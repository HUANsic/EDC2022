
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000974c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08009938  08009938  00019938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c78  08009c78  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009c78  08009c78  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009c78  08009c78  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c78  08009c78  00019c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c7c  08009c7c  00019c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009c80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b78  20000074  08009cf4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bec  08009cf4  00020bec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119db  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a18  00000000  00000000  00031a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00034490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00035608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003565  00000000  00000000  00036690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015427  00000000  00000000  00039bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009db55  00000000  00000000  0004f01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ecb71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005810  00000000  00000000  000ecbc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000074 	.word	0x20000074
 8000204:	00000000 	.word	0x00000000
 8000208:	0800991c 	.word	0x0800991c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000078 	.word	0x20000078
 8000224:	0800991c 	.word	0x0800991c

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fmul>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d06f      	beq.n	8000ed8 <__aeabi_fmul+0xf8>
 8000df8:	441a      	add	r2, r3
 8000dfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dfe:	0240      	lsls	r0, r0, #9
 8000e00:	bf18      	it	ne
 8000e02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e06:	d01e      	beq.n	8000e46 <__aeabi_fmul+0x66>
 8000e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e14:	fba0 3101 	umull	r3, r1, r0, r1
 8000e18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e20:	bf3e      	ittt	cc
 8000e22:	0049      	lslcc	r1, r1, #1
 8000e24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	ea40 0001 	orr.w	r0, r0, r1
 8000e2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e32:	2afd      	cmp	r2, #253	; 0xfd
 8000e34:	d81d      	bhi.n	8000e72 <__aeabi_fmul+0x92>
 8000e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3e:	bf08      	it	eq
 8000e40:	f020 0001 	biceq.w	r0, r0, #1
 8000e44:	4770      	bx	lr
 8000e46:	f090 0f00 	teq	r0, #0
 8000e4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e4e:	bf08      	it	eq
 8000e50:	0249      	lsleq	r1, r1, #9
 8000e52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e5a:	3a7f      	subs	r2, #127	; 0x7f
 8000e5c:	bfc2      	ittt	gt
 8000e5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e66:	4770      	bxgt	lr
 8000e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	3a01      	subs	r2, #1
 8000e72:	dc5d      	bgt.n	8000f30 <__aeabi_fmul+0x150>
 8000e74:	f112 0f19 	cmn.w	r2, #25
 8000e78:	bfdc      	itt	le
 8000e7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e7e:	4770      	bxle	lr
 8000e80:	f1c2 0200 	rsb	r2, r2, #0
 8000e84:	0041      	lsls	r1, r0, #1
 8000e86:	fa21 f102 	lsr.w	r1, r1, r2
 8000e8a:	f1c2 0220 	rsb	r2, r2, #32
 8000e8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e96:	f140 0000 	adc.w	r0, r0, #0
 8000e9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e9e:	bf08      	it	eq
 8000ea0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea4:	4770      	bx	lr
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xce>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fmul+0xe6>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e78f      	b.n	8000df8 <__aeabi_fmul+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	bf18      	it	ne
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d00a      	beq.n	8000efe <__aeabi_fmul+0x11e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1d8      	bne.n	8000ea6 <__aeabi_fmul+0xc6>
 8000ef4:	ea80 0001 	eor.w	r0, r0, r1
 8000ef8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000efc:	4770      	bx	lr
 8000efe:	f090 0f00 	teq	r0, #0
 8000f02:	bf17      	itett	ne
 8000f04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f08:	4608      	moveq	r0, r1
 8000f0a:	f091 0f00 	teqne	r1, #0
 8000f0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f12:	d014      	beq.n	8000f3e <__aeabi_fmul+0x15e>
 8000f14:	ea92 0f0c 	teq	r2, ip
 8000f18:	d101      	bne.n	8000f1e <__aeabi_fmul+0x13e>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d10f      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f1e:	ea93 0f0c 	teq	r3, ip
 8000f22:	d103      	bne.n	8000f2c <__aeabi_fmul+0x14c>
 8000f24:	024b      	lsls	r3, r1, #9
 8000f26:	bf18      	it	ne
 8000f28:	4608      	movne	r0, r1
 8000f2a:	d108      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f2c:	ea80 0001 	eor.w	r0, r0, r1
 8000f30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3c:	4770      	bx	lr
 8000f3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f46:	4770      	bx	lr

08000f48 <__aeabi_fdiv>:
 8000f48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f50:	bf1e      	ittt	ne
 8000f52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f56:	ea92 0f0c 	teqne	r2, ip
 8000f5a:	ea93 0f0c 	teqne	r3, ip
 8000f5e:	d069      	beq.n	8001034 <__aeabi_fdiv+0xec>
 8000f60:	eba2 0203 	sub.w	r2, r2, r3
 8000f64:	ea80 0c01 	eor.w	ip, r0, r1
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f6e:	d037      	beq.n	8000fe0 <__aeabi_fdiv+0x98>
 8000f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f80:	428b      	cmp	r3, r1
 8000f82:	bf38      	it	cc
 8000f84:	005b      	lslcc	r3, r3, #1
 8000f86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	bf24      	itt	cs
 8000f92:	1a5b      	subcs	r3, r3, r1
 8000f94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fa2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fa6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000faa:	bf24      	itt	cs
 8000fac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fbe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	bf18      	it	ne
 8000fc6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fca:	d1e0      	bne.n	8000f8e <__aeabi_fdiv+0x46>
 8000fcc:	2afd      	cmp	r2, #253	; 0xfd
 8000fce:	f63f af50 	bhi.w	8000e72 <__aeabi_fmul+0x92>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fd8:	bf08      	it	eq
 8000fda:	f020 0001 	biceq.w	r0, r0, #1
 8000fde:	4770      	bx	lr
 8000fe0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fe4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fe8:	327f      	adds	r2, #127	; 0x7f
 8000fea:	bfc2      	ittt	gt
 8000fec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ff4:	4770      	bxgt	lr
 8000ff6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	3a01      	subs	r2, #1
 8001000:	e737      	b.n	8000e72 <__aeabi_fmul+0x92>
 8001002:	f092 0f00 	teq	r2, #0
 8001006:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0040      	lsleq	r0, r0, #1
 800100e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001012:	3a01      	subeq	r2, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xc2>
 8001016:	ea40 000c 	orr.w	r0, r0, ip
 800101a:	f093 0f00 	teq	r3, #0
 800101e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001022:	bf02      	ittt	eq
 8001024:	0049      	lsleq	r1, r1, #1
 8001026:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800102a:	3b01      	subeq	r3, #1
 800102c:	d0f9      	beq.n	8001022 <__aeabi_fdiv+0xda>
 800102e:	ea41 010c 	orr.w	r1, r1, ip
 8001032:	e795      	b.n	8000f60 <__aeabi_fdiv+0x18>
 8001034:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001038:	ea92 0f0c 	teq	r2, ip
 800103c:	d108      	bne.n	8001050 <__aeabi_fdiv+0x108>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	f47f af7d 	bne.w	8000f3e <__aeabi_fmul+0x15e>
 8001044:	ea93 0f0c 	teq	r3, ip
 8001048:	f47f af70 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 800104c:	4608      	mov	r0, r1
 800104e:	e776      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001050:	ea93 0f0c 	teq	r3, ip
 8001054:	d104      	bne.n	8001060 <__aeabi_fdiv+0x118>
 8001056:	024b      	lsls	r3, r1, #9
 8001058:	f43f af4c 	beq.w	8000ef4 <__aeabi_fmul+0x114>
 800105c:	4608      	mov	r0, r1
 800105e:	e76e      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001060:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001064:	bf18      	it	ne
 8001066:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800106a:	d1ca      	bne.n	8001002 <__aeabi_fdiv+0xba>
 800106c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001070:	f47f af5c 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 8001074:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001078:	f47f af3c 	bne.w	8000ef4 <__aeabi_fmul+0x114>
 800107c:	e75f      	b.n	8000f3e <__aeabi_fmul+0x15e>
 800107e:	bf00      	nop

08001080 <__gesf2>:
 8001080:	f04f 3cff 	mov.w	ip, #4294967295
 8001084:	e006      	b.n	8001094 <__cmpsf2+0x4>
 8001086:	bf00      	nop

08001088 <__lesf2>:
 8001088:	f04f 0c01 	mov.w	ip, #1
 800108c:	e002      	b.n	8001094 <__cmpsf2+0x4>
 800108e:	bf00      	nop

08001090 <__cmpsf2>:
 8001090:	f04f 0c01 	mov.w	ip, #1
 8001094:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001098:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800109c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a4:	bf18      	it	ne
 80010a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010aa:	d011      	beq.n	80010d0 <__cmpsf2+0x40>
 80010ac:	b001      	add	sp, #4
 80010ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010b2:	bf18      	it	ne
 80010b4:	ea90 0f01 	teqne	r0, r1
 80010b8:	bf58      	it	pl
 80010ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80010be:	bf88      	it	hi
 80010c0:	17c8      	asrhi	r0, r1, #31
 80010c2:	bf38      	it	cc
 80010c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010c8:	bf18      	it	ne
 80010ca:	f040 0001 	orrne.w	r0, r0, #1
 80010ce:	4770      	bx	lr
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__cmpsf2+0x4c>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d105      	bne.n	80010e8 <__cmpsf2+0x58>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d1e4      	bne.n	80010ac <__cmpsf2+0x1c>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d0e1      	beq.n	80010ac <__cmpsf2+0x1c>
 80010e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_cfrcmple>:
 80010f0:	4684      	mov	ip, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4661      	mov	r1, ip
 80010f6:	e7ff      	b.n	80010f8 <__aeabi_cfcmpeq>

080010f8 <__aeabi_cfcmpeq>:
 80010f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010fa:	f7ff ffc9 	bl	8001090 <__cmpsf2>
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf48      	it	mi
 8001102:	f110 0f00 	cmnmi.w	r0, #0
 8001106:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001108 <__aeabi_fcmpeq>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff fff4 	bl	80010f8 <__aeabi_cfcmpeq>
 8001110:	bf0c      	ite	eq
 8001112:	2001      	moveq	r0, #1
 8001114:	2000      	movne	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmplt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffea 	bl	80010f8 <__aeabi_cfcmpeq>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmple>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffe0 	bl	80010f8 <__aeabi_cfcmpeq>
 8001138:	bf94      	ite	ls
 800113a:	2001      	movls	r0, #1
 800113c:	2000      	movhi	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpge>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffd2 	bl	80010f0 <__aeabi_cfrcmple>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmpgt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffc8 	bl	80010f0 <__aeabi_cfrcmple>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_f2uiz>:
 800116c:	0042      	lsls	r2, r0, #1
 800116e:	d20e      	bcs.n	800118e <__aeabi_f2uiz+0x22>
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001174:	d30b      	bcc.n	800118e <__aeabi_f2uiz+0x22>
 8001176:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d409      	bmi.n	8001194 <__aeabi_f2uiz+0x28>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001188:	fa23 f002 	lsr.w	r0, r3, r2
 800118c:	4770      	bx	lr
 800118e:	f04f 0000 	mov.w	r0, #0
 8001192:	4770      	bx	lr
 8001194:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001198:	d101      	bne.n	800119e <__aeabi_f2uiz+0x32>
 800119a:	0242      	lsls	r2, r0, #9
 800119c:	d102      	bne.n	80011a4 <__aeabi_f2uiz+0x38>
 800119e:	f04f 30ff 	mov.w	r0, #4294967295
 80011a2:	4770      	bx	lr
 80011a4:	f04f 0000 	mov.w	r0, #0
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <chao_move_angle>:
		}
	}
}

//0 - 360 degree, 0 degree front, clockwise
void chao_move_angle(float _angle, float speed){
 80011b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
	float angle_arc = (_angle / 180) * M_PI;
 80011bc:	4984      	ldr	r1, [pc, #528]	; (80013d0 <chao_move_angle+0x220>)
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fec2 	bl	8000f48 <__aeabi_fdiv>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f992 	bl	80004f0 <__aeabi_f2d>
 80011cc:	a37e      	add	r3, pc, #504	; (adr r3, 80013c8 <chao_move_angle+0x218>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff f9e5 	bl	80005a0 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fca1 	bl	8000b24 <__aeabi_d2f>
 80011e2:	4603      	mov	r3, r0
 80011e4:	60fb      	str	r3, [r7, #12]
	cmotor_lf.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 80011e6:	6838      	ldr	r0, [r7, #0]
 80011e8:	f7ff f982 	bl	80004f0 <__aeabi_f2d>
 80011ec:	4604      	mov	r4, r0
 80011ee:	460d      	mov	r5, r1
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f7ff f97d 	bl	80004f0 <__aeabi_f2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f007 fb27 	bl	8008850 <cos>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4620      	mov	r0, r4
 8001208:	4629      	mov	r1, r5
 800120a:	f7ff f9c9 	bl	80005a0 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4690      	mov	r8, r2
 8001214:	4699      	mov	r9, r3
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f7ff f96a 	bl	80004f0 <__aeabi_f2d>
 800121c:	4604      	mov	r4, r0
 800121e:	460d      	mov	r5, r1
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff f965 	bl	80004f0 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f007 fb59 	bl	80088e4 <sin>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4620      	mov	r0, r4
 8001238:	4629      	mov	r1, r5
 800123a:	f7ff f9b1 	bl	80005a0 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4640      	mov	r0, r8
 8001244:	4649      	mov	r1, r9
 8001246:	f7fe fff3 	bl	8000230 <__aeabi_dsub>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fc67 	bl	8000b24 <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	4a5e      	ldr	r2, [pc, #376]	; (80013d4 <chao_move_angle+0x224>)
 800125a:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rf.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f7ff f947 	bl	80004f0 <__aeabi_f2d>
 8001262:	4604      	mov	r4, r0
 8001264:	460d      	mov	r5, r1
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f7ff f942 	bl	80004f0 <__aeabi_f2d>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f007 faec 	bl	8008850 <cos>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f98e 	bl	80005a0 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4690      	mov	r8, r2
 800128a:	4699      	mov	r9, r3
 800128c:	6838      	ldr	r0, [r7, #0]
 800128e:	f7ff f92f 	bl	80004f0 <__aeabi_f2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff f92a 	bl	80004f0 <__aeabi_f2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f007 fb1e 	bl	80088e4 <sin>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff f976 	bl	80005a0 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4640      	mov	r0, r8
 80012ba:	4649      	mov	r1, r9
 80012bc:	f7fe ffba 	bl	8000234 <__adddf3>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc2c 	bl	8000b24 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a42      	ldr	r2, [pc, #264]	; (80013d8 <chao_move_angle+0x228>)
 80012d0:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_lb.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7ff f90c 	bl	80004f0 <__aeabi_f2d>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f7ff f907 	bl	80004f0 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f007 fab1 	bl	8008850 <cos>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4620      	mov	r0, r4
 80012f4:	4629      	mov	r1, r5
 80012f6:	f7ff f953 	bl	80005a0 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4690      	mov	r8, r2
 8001300:	4699      	mov	r9, r3
 8001302:	6838      	ldr	r0, [r7, #0]
 8001304:	f7ff f8f4 	bl	80004f0 <__aeabi_f2d>
 8001308:	4604      	mov	r4, r0
 800130a:	460d      	mov	r5, r1
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f7ff f8ef 	bl	80004f0 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f007 fae3 	bl	80088e4 <sin>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7ff f93b 	bl	80005a0 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4640      	mov	r0, r8
 8001330:	4649      	mov	r1, r9
 8001332:	f7fe ff7f 	bl	8000234 <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fbf1 	bl	8000b24 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a25      	ldr	r2, [pc, #148]	; (80013dc <chao_move_angle+0x22c>)
 8001346:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rb.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 8001348:	6838      	ldr	r0, [r7, #0]
 800134a:	f7ff f8d1 	bl	80004f0 <__aeabi_f2d>
 800134e:	4604      	mov	r4, r0
 8001350:	460d      	mov	r5, r1
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff f8cc 	bl	80004f0 <__aeabi_f2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f007 fa76 	bl	8008850 <cos>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7ff f918 	bl	80005a0 <__aeabi_dmul>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4690      	mov	r8, r2
 8001376:	4699      	mov	r9, r3
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7ff f8b9 	bl	80004f0 <__aeabi_f2d>
 800137e:	4604      	mov	r4, r0
 8001380:	460d      	mov	r5, r1
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7ff f8b4 	bl	80004f0 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f007 faa8 	bl	80088e4 <sin>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	f7ff f900 	bl	80005a0 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4640      	mov	r0, r8
 80013a6:	4649      	mov	r1, r9
 80013a8:	f7fe ff42 	bl	8000230 <__aeabi_dsub>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fbb6 	bl	8000b24 <__aeabi_d2f>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <chao_move_angle+0x230>)
 80013bc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013c8:	54442d18 	.word	0x54442d18
 80013cc:	400921fb 	.word	0x400921fb
 80013d0:	43340000 	.word	0x43340000
 80013d4:	2000098c 	.word	0x2000098c
 80013d8:	200009c8 	.word	0x200009c8
 80013dc:	20000a04 	.word	0x20000a04
 80013e0:	20000a40 	.word	0x20000a40

080013e4 <huansic_jy62_init>:
/*
 * 		Initializes the port of the IMU.
 * 		@param	himu	jy62 pending initialization
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_init(JY62_HandleTypeDef *himu) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	// perform some necessary checks
	if (!himu)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <huansic_jy62_init+0x12>
		return IMU_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e026      	b.n	8001444 <huansic_jy62_init+0x60>

	if (!himu->huart)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <huansic_jy62_init+0x1e>
		return IMU_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e020      	b.n	8001444 <huansic_jy62_init+0x60>
	HAL_UART_Init(himu->huart);
	HAL_Delay(10);
#endif
#endif

	HAL_Delay(3);
 8001402:	2003      	movs	r0, #3
 8001404:	f002 fd50 	bl	8003ea8 <HAL_Delay>

	// reset z-axis angle
	HAL_UART_Transmit(himu->huart, JY62_RESET_Z_ANGLE, 3, 10);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	230a      	movs	r3, #10
 800140e:	2203      	movs	r2, #3
 8001410:	490e      	ldr	r1, [pc, #56]	; (800144c <huansic_jy62_init+0x68>)
 8001412:	f005 fbaf 	bl	8006b74 <HAL_UART_Transmit>

// instead, just use DMA
	himu->pending_alignment = 0;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6818      	ldr	r0, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	3334      	adds	r3, #52	; 0x34
 8001426:	2221      	movs	r2, #33	; 0x21
 8001428:	4619      	mov	r1, r3
 800142a:	f005 fc65 	bl	8006cf8 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0204 	bic.w	r2, r2, #4
 8001440:	601a      	str	r2, [r3, #0]

#ifdef HUANSIC_JY62_DEBUG
	himu->counter = 0;
#endif

	return IMU_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000000 	.word	0x20000000

08001450 <huansic_jy62_dma_isr>:
/*
 * 		Handles the dma interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_dma_isr(JY62_HandleTypeDef *himu) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	if (!himu)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <huansic_jy62_dma_isr+0x12>
		return IMU_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e112      	b.n	8001688 <huansic_jy62_dma_isr+0x238>

	uint8_t temp8, i, i11;

	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	2300      	movs	r3, #0
 8001468:	73bb      	strb	r3, [r7, #14]
 800146a:	e0ed      	b.n	8001648 <huansic_jy62_dma_isr+0x1f8>
		if (himu->buffer[0 + i11] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001476:	2b55      	cmp	r3, #85	; 0x55
 8001478:	d01c      	beq.n	80014b4 <huansic_jy62_dma_isr+0x64>
			himu->pending_alignment = 1;		// enter aligning mode if not already
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6818      	ldr	r0, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3334      	adds	r3, #52	; 0x34
 800148a:	2201      	movs	r2, #1
 800148c:	4619      	mov	r1, r3
 800148e:	f005 fc03 	bl	8006c98 <HAL_UART_Receive_IT>
			if (i) {
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00b      	beq.n	80014b0 <huansic_jy62_dma_isr+0x60>
				__huansic_jy62_decode_temp(himu, i - 1);
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	3b01      	subs	r3, #1
 800149c:	b2db      	uxtb	r3, r3
 800149e:	4619      	mov	r1, r3
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 fa65 	bl	8001970 <__huansic_jy62_decode_temp>
				himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 80014a6:	f002 fcf5 	bl	8003e94 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	631a      	str	r2, [r3, #48]	; 0x30
			}
			return IMU_HEADER_ERROR;
 80014b0:	2305      	movs	r3, #5
 80014b2:	e0e9      	b.n	8001688 <huansic_jy62_dma_isr+0x238>
		} else {
			// check sum
			temp8 = himu->buffer[0 + i11];
 80014b4:	7bbb      	ldrb	r3, [r7, #14]
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014be:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[1 + i11];
 80014c0:	7bbb      	ldrb	r3, [r7, #14]
 80014c2:	3301      	adds	r3, #1
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	4413      	add	r3, r2
 80014c8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80014cc:	7b7b      	ldrb	r3, [r7, #13]
 80014ce:	4413      	add	r3, r2
 80014d0:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[2 + i11];
 80014d2:	7bbb      	ldrb	r3, [r7, #14]
 80014d4:	3302      	adds	r3, #2
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80014de:	7b7b      	ldrb	r3, [r7, #13]
 80014e0:	4413      	add	r3, r2
 80014e2:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[3 + i11];
 80014e4:	7bbb      	ldrb	r3, [r7, #14]
 80014e6:	3303      	adds	r3, #3
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	4413      	add	r3, r2
 80014ec:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80014f0:	7b7b      	ldrb	r3, [r7, #13]
 80014f2:	4413      	add	r3, r2
 80014f4:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[4 + i11];
 80014f6:	7bbb      	ldrb	r3, [r7, #14]
 80014f8:	3304      	adds	r3, #4
 80014fa:	687a      	ldr	r2, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001502:	7b7b      	ldrb	r3, [r7, #13]
 8001504:	4413      	add	r3, r2
 8001506:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[5 + i11];
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	3305      	adds	r3, #5
 800150c:	687a      	ldr	r2, [r7, #4]
 800150e:	4413      	add	r3, r2
 8001510:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001514:	7b7b      	ldrb	r3, [r7, #13]
 8001516:	4413      	add	r3, r2
 8001518:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[6 + i11];
 800151a:	7bbb      	ldrb	r3, [r7, #14]
 800151c:	3306      	adds	r3, #6
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001526:	7b7b      	ldrb	r3, [r7, #13]
 8001528:	4413      	add	r3, r2
 800152a:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[7 + i11];
 800152c:	7bbb      	ldrb	r3, [r7, #14]
 800152e:	3307      	adds	r3, #7
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	4413      	add	r3, r2
 8001534:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001538:	7b7b      	ldrb	r3, [r7, #13]
 800153a:	4413      	add	r3, r2
 800153c:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[8 + i11];
 800153e:	7bbb      	ldrb	r3, [r7, #14]
 8001540:	3308      	adds	r3, #8
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800154a:	7b7b      	ldrb	r3, [r7, #13]
 800154c:	4413      	add	r3, r2
 800154e:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[9 + i11];
 8001550:	7bbb      	ldrb	r3, [r7, #14]
 8001552:	3309      	adds	r3, #9
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	4413      	add	r3, r2
 8001558:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800155c:	7b7b      	ldrb	r3, [r7, #13]
 800155e:	4413      	add	r3, r2
 8001560:	737b      	strb	r3, [r7, #13]

			if (temp8 != himu->buffer[10 + i11]) {		// check
 8001562:	7bbb      	ldrb	r3, [r7, #14]
 8001564:	330a      	adds	r3, #10
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	4413      	add	r3, r2
 800156a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800156e:	7b7a      	ldrb	r2, [r7, #13]
 8001570:	429a      	cmp	r2, r3
 8001572:	d01c      	beq.n	80015ae <huansic_jy62_dma_isr+0x15e>
				himu->pending_alignment = 1;		// enter aligning mode if not already
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6818      	ldr	r0, [r3, #0]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3334      	adds	r3, #52	; 0x34
 8001584:	2201      	movs	r2, #1
 8001586:	4619      	mov	r1, r3
 8001588:	f005 fb86 	bl	8006c98 <HAL_UART_Receive_IT>
				if (i) {
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d00b      	beq.n	80015aa <huansic_jy62_dma_isr+0x15a>
					__huansic_jy62_decode_temp(himu, i - 1);
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	3b01      	subs	r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	4619      	mov	r1, r3
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f000 f9e8 	bl	8001970 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 80015a0:	f002 fc78 	bl	8003e94 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_SUM_ERROR;
 80015aa:	2304      	movs	r3, #4
 80015ac:	e06c      	b.n	8001688 <huansic_jy62_dma_isr+0x238>
			}

			if (himu->buffer[1 + i11] == HUANSIC_JY62_ACCEL) 		// then decode
 80015ae:	7bbb      	ldrb	r3, [r7, #14]
 80015b0:	3301      	adds	r3, #1
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015ba:	2b51      	cmp	r3, #81	; 0x51
 80015bc:	d105      	bne.n	80015ca <huansic_jy62_dma_isr+0x17a>
				__huansic_jy62_decode_accel(himu, i);
 80015be:	7bfb      	ldrb	r3, [r7, #15]
 80015c0:	4619      	mov	r1, r3
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f8c4 	bl	8001750 <__huansic_jy62_decode_accel>
 80015c8:	e038      	b.n	800163c <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_OMEGA)
 80015ca:	7bbb      	ldrb	r3, [r7, #14]
 80015cc:	3301      	adds	r3, #1
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015d6:	2b52      	cmp	r3, #82	; 0x52
 80015d8:	d105      	bne.n	80015e6 <huansic_jy62_dma_isr+0x196>
				__huansic_jy62_decode_omega(himu, i);
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	4619      	mov	r1, r3
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 f920 	bl	8001824 <__huansic_jy62_decode_omega>
 80015e4:	e02a      	b.n	800163c <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_THETA)
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	3301      	adds	r3, #1
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015f2:	2b53      	cmp	r3, #83	; 0x53
 80015f4:	d105      	bne.n	8001602 <huansic_jy62_dma_isr+0x1b2>
				__huansic_jy62_decode_theta(himu, i);
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	4619      	mov	r1, r3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f964 	bl	80018c8 <__huansic_jy62_decode_theta>
 8001600:	e01c      	b.n	800163c <huansic_jy62_dma_isr+0x1ec>
			else {
				himu->pending_alignment = 1;		// enter aligning mode if not already
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2201      	movs	r2, #1
 8001606:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6818      	ldr	r0, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3334      	adds	r3, #52	; 0x34
 8001612:	2201      	movs	r2, #1
 8001614:	4619      	mov	r1, r3
 8001616:	f005 fb3f 	bl	8006c98 <HAL_UART_Receive_IT>
				if (i) {
 800161a:	7bfb      	ldrb	r3, [r7, #15]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00b      	beq.n	8001638 <huansic_jy62_dma_isr+0x1e8>
					__huansic_jy62_decode_temp(himu, i - 1);
 8001620:	7bfb      	ldrb	r3, [r7, #15]
 8001622:	3b01      	subs	r3, #1
 8001624:	b2db      	uxtb	r3, r3
 8001626:	4619      	mov	r1, r3
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f9a1 	bl	8001970 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 800162e:	f002 fc31 	bl	8003e94 <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_PID_ERROR;
 8001638:	2306      	movs	r3, #6
 800163a:	e025      	b.n	8001688 <huansic_jy62_dma_isr+0x238>
	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	3301      	adds	r3, #1
 8001640:	73fb      	strb	r3, [r7, #15]
 8001642:	7bbb      	ldrb	r3, [r7, #14]
 8001644:	330b      	adds	r3, #11
 8001646:	73bb      	strb	r3, [r7, #14]
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	2b02      	cmp	r3, #2
 800164c:	f67f af0e 	bls.w	800146c <huansic_jy62_dma_isr+0x1c>
		}

	}

	// it should only reach this point if the package is fully valid
	himu->lastUpdated = HAL_GetTick();
 8001650:	f002 fc20 	bl	8003e94 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
	__huansic_jy62_decode_temp(himu, 2);
 800165a:	2102      	movs	r1, #2
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f987 	bl	8001970 <__huansic_jy62_decode_temp>
	// start to receive the next package
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3334      	adds	r3, #52	; 0x34
 800166a:	2221      	movs	r2, #33	; 0x21
 800166c:	4619      	mov	r1, r3
 800166e:	f005 fb43 	bl	8006cf8 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f022 0204 	bic.w	r2, r2, #4
 8001684:	601a      	str	r2, [r3, #0]
#ifdef HUANSIC_JY62_DEBUG
	himu->counter++;
	HAL_GPIO_WritePin(himu->port, himu->pin, himu->counter & (1 << 5));
#endif

	return IMU_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3710      	adds	r7, #16
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <huansic_jy62_isr>:
/*
 * 		Handles the interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_isr(JY62_HandleTypeDef *himu) {
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	if (!himu)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <huansic_jy62_isr+0x12>
		return IMU_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e029      	b.n	80016f6 <huansic_jy62_isr+0x66>

	if (himu->buffer[0] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016a8:	2b55      	cmp	r3, #85	; 0x55
 80016aa:	d00d      	beq.n	80016c8 <huansic_jy62_isr+0x38>
		himu->pending_alignment = 1;		// enter aligning mode if not already
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3334      	adds	r3, #52	; 0x34
 80016bc:	2201      	movs	r2, #1
 80016be:	4619      	mov	r1, r3
 80016c0:	f005 faea 	bl	8006c98 <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 80016c4:	2305      	movs	r3, #5
 80016c6:	e016      	b.n	80016f6 <huansic_jy62_isr+0x66>
	} else {
		// header just aligned
		himu->pending_alignment = 0;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_DMA(himu->huart, &himu->buffer[1], 32);		// receive the rest
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	3335      	adds	r3, #53	; 0x35
 80016d8:	2220      	movs	r2, #32
 80016da:	4619      	mov	r1, r3
 80016dc:	f005 fb0c 	bl	8006cf8 <HAL_UART_Receive_DMA>
		himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0204 	bic.w	r2, r2, #4
 80016f2:	601a      	str	r2, [r3, #0]
		return IMU_OK;
 80016f4:	2300      	movs	r3, #0
	}
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <huansic_jy62_dma_error>:
/*
 * 		Handles the dma errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_dma_error(JY62_HandleTypeDef *himu){
 80016fe:	b580      	push	{r7, lr}
 8001700:	b082      	sub	sp, #8
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2201      	movs	r2, #1
 800170a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3334      	adds	r3, #52	; 0x34
 8001716:	2201      	movs	r2, #1
 8001718:	4619      	mov	r1, r3
 800171a:	f005 fabd 	bl	8006c98 <HAL_UART_Receive_IT>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <huansic_jy62_error>:
/*
 * 		Handles the errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_error(JY62_HandleTypeDef *himu){
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3334      	adds	r3, #52	; 0x34
 800173e:	2201      	movs	r2, #1
 8001740:	4619      	mov	r1, r3
 8001742:	f005 faa9 	bl	8006c98 <HAL_UART_Receive_IT>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <__huansic_jy62_decode_accel>:

/***************	functions used by the library; not visible to users		***************/

static inline void __huansic_jy62_decode_accel(JY62_HandleTypeDef *himu, uint8_t location) {
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 800175c:	2300      	movs	r3, #0
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e050      	b.n	8001804 <__huansic_jy62_decode_accel+0xb4>
		temp = himu->buffer[2 + 2 * i + location * 11];
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	3301      	adds	r3, #1
 8001766:	0059      	lsls	r1, r3, #1
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	4613      	mov	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	440b      	add	r3, r1
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	4413      	add	r3, r2
 800177a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800177e:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8001780:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[3 + 2 * i + location * 11];
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	1cd9      	adds	r1, r3, #3
 800178e:	78fa      	ldrb	r2, [r7, #3]
 8001790:	4613      	mov	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	4413      	add	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	440b      	add	r3, r1
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4413      	add	r3, r2
 80017a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80017a4:	b21a      	sxth	r2, r3
 80017a6:	89bb      	ldrh	r3, [r7, #12]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 16 * 9.8 / 32768;
 80017ac:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fac1 	bl	8000d38 <__aeabi_i2f>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fb0f 	bl	8000de0 <__aeabi_fmul>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7fe fe93 	bl	80004f0 <__aeabi_f2d>
 80017ca:	a313      	add	r3, pc, #76	; (adr r3, 8001818 <__huansic_jy62_decode_accel+0xc8>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f7fe fee6 	bl	80005a0 <__aeabi_dmul>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4610      	mov	r0, r2
 80017da:	4619      	mov	r1, r3
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <__huansic_jy62_decode_accel+0xd0>)
 80017e2:	f7ff f807 	bl	80007f4 <__aeabi_ddiv>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	7bfc      	ldrb	r4, [r7, #15]
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff f998 	bl	8000b24 <__aeabi_d2f>
 80017f4:	4601      	mov	r1, r0
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	1ca2      	adds	r2, r4, #2
 80017fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	3301      	adds	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d9ab      	bls.n	8001762 <__huansic_jy62_decode_accel+0x12>
	}
}
 800180a:	bf00      	nop
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	bd90      	pop	{r4, r7, pc}
 8001814:	f3af 8000 	nop.w
 8001818:	9999999a 	.word	0x9999999a
 800181c:	40239999 	.word	0x40239999
 8001820:	40e00000 	.word	0x40e00000

08001824 <__huansic_jy62_decode_omega>:

static inline void __huansic_jy62_decode_omega(JY62_HandleTypeDef *himu, uint8_t location) {
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e03e      	b.n	80018b4 <__huansic_jy62_decode_omega+0x90>
		temp = himu->buffer[2 + 2 * i + location * 11];
 8001836:	7bfb      	ldrb	r3, [r7, #15]
 8001838:	3301      	adds	r3, #1
 800183a:	0059      	lsls	r1, r3, #1
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	440b      	add	r3, r1
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001852:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8001854:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[3 + 2 * i + location * 11];
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	1cd9      	adds	r1, r3, #3
 8001862:	78fa      	ldrb	r2, [r7, #3]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	440b      	add	r3, r1
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001878:	b21a      	sxth	r2, r3
 800187a:	89bb      	ldrh	r3, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 2000 / 32768;
 8001880:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fa57 	bl	8000d38 <__aeabi_i2f>
 800188a:	4603      	mov	r3, r0
 800188c:	490d      	ldr	r1, [pc, #52]	; (80018c4 <__huansic_jy62_decode_omega+0xa0>)
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff faa6 	bl	8000de0 <__aeabi_fmul>
 8001894:	4603      	mov	r3, r0
 8001896:	7bfc      	ldrb	r4, [r7, #15]
 8001898:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fb53 	bl	8000f48 <__aeabi_fdiv>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4619      	mov	r1, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	1ca2      	adds	r2, r4, #2
 80018aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	3301      	adds	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	7bfb      	ldrb	r3, [r7, #15]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d9bd      	bls.n	8001836 <__huansic_jy62_decode_omega+0x12>
	}
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd90      	pop	{r4, r7, pc}
 80018c4:	44fa0000 	.word	0x44fa0000

080018c8 <__huansic_jy62_decode_theta>:

static inline void __huansic_jy62_decode_theta(JY62_HandleTypeDef *himu, uint8_t location) {
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80018d4:	2300      	movs	r3, #0
 80018d6:	73fb      	strb	r3, [r7, #15]
 80018d8:	e03e      	b.n	8001958 <__huansic_jy62_decode_theta+0x90>
		temp = himu->buffer[2 + 2 * i + location * 11];
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	3301      	adds	r3, #1
 80018de:	0059      	lsls	r1, r3, #1
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	440b      	add	r3, r1
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	4413      	add	r3, r2
 80018f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80018f6:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 80018f8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[3 + 2 * i + location * 11];
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	1cd9      	adds	r1, r3, #3
 8001906:	78fa      	ldrb	r2, [r7, #3]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	4413      	add	r3, r2
 8001912:	440b      	add	r3, r1
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	4413      	add	r3, r2
 8001918:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800191c:	b21a      	sxth	r2, r3
 800191e:	89bb      	ldrh	r3, [r7, #12]
 8001920:	4313      	orrs	r3, r2
 8001922:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 180 / 32768;
 8001924:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff fa05 	bl	8000d38 <__aeabi_i2f>
 800192e:	4603      	mov	r3, r0
 8001930:	490d      	ldr	r1, [pc, #52]	; (8001968 <__huansic_jy62_decode_theta+0xa0>)
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fa54 	bl	8000de0 <__aeabi_fmul>
 8001938:	4603      	mov	r3, r0
 800193a:	7bfc      	ldrb	r4, [r7, #15]
 800193c:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff fb01 	bl	8000f48 <__aeabi_fdiv>
 8001946:	4603      	mov	r3, r0
 8001948:	4619      	mov	r1, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	1ca2      	adds	r2, r4, #2
 800194e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	3301      	adds	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d9bd      	bls.n	80018da <__huansic_jy62_decode_theta+0x12>
	}
}
 800195e:	bf00      	nop
 8001960:	bf00      	nop
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	bd90      	pop	{r4, r7, pc}
 8001968:	43340000 	.word	0x43340000
 800196c:	00000000 	.word	0x00000000

08001970 <__huansic_jy62_decode_temp>:

static inline void __huansic_jy62_decode_temp(JY62_HandleTypeDef *himu, uint8_t location) {
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	70fb      	strb	r3, [r7, #3]
	int16_t temp;

	temp = himu->buffer[8 + location * 11];
 800197c:	78fa      	ldrb	r2, [r7, #3]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	4413      	add	r3, r2
 8001988:	3308      	adds	r3, #8
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001992:	81fb      	strh	r3, [r7, #14]
	temp <<= 8;
 8001994:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	81fb      	strh	r3, [r7, #14]
	temp |= himu->buffer[9 + location * 11];
 800199c:	78fa      	ldrb	r2, [r7, #3]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	3309      	adds	r3, #9
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	89fb      	ldrh	r3, [r7, #14]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	81fb      	strh	r3, [r7, #14]
	himu->temperature = (float) temp / 340 + 36.53;
 80019ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f9ba 	bl	8000d38 <__aeabi_i2f>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4910      	ldr	r1, [pc, #64]	; (8001a08 <__huansic_jy62_decode_temp+0x98>)
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fabd 	bl	8000f48 <__aeabi_fdiv>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fd8d 	bl	80004f0 <__aeabi_f2d>
 80019d6:	a30a      	add	r3, pc, #40	; (adr r3, 8001a00 <__huansic_jy62_decode_temp+0x90>)
 80019d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019dc:	f7fe fc2a 	bl	8000234 <__adddf3>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4610      	mov	r0, r2
 80019e6:	4619      	mov	r1, r3
 80019e8:	f7ff f89c 	bl	8000b24 <__aeabi_d2f>
 80019ec:	4602      	mov	r2, r0
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	f3af 8000 	nop.w
 8001a00:	0a3d70a4 	.word	0x0a3d70a4
 8001a04:	404243d7 	.word	0x404243d7
 8001a08:	43aa0000 	.word	0x43aa0000

08001a0c <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]

}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
	...

08001a20 <huansic_order_new>:
		orderBuffers[i].id = -1;
	for (i = 0; i < 5; i++)
		delivering[i] = &orderBuffers[i];		// give it some default value
}

Order* huansic_order_new(int8_t id) {
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a32:	d101      	bne.n	8001a38 <huansic_order_new+0x18>
		return 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	e046      	b.n	8001ac6 <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e017      	b.n	8001a6e <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	4923      	ldr	r1, [pc, #140]	; (8001ad0 <huansic_order_new+0xb0>)
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3310      	adds	r3, #16
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d107      	bne.n	8001a68 <huansic_order_new+0x48>
			return &orderBuffers[i];
 8001a58:	7bfa      	ldrb	r2, [r7, #15]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	00db      	lsls	r3, r3, #3
 8001a62:	4a1b      	ldr	r2, [pc, #108]	; (8001ad0 <huansic_order_new+0xb0>)
 8001a64:	4413      	add	r3, r2
 8001a66:	e02e      	b.n	8001ac6 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b3b      	cmp	r3, #59	; 0x3b
 8001a72:	d9e4      	bls.n	8001a3e <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	e021      	b.n	8001abe <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 8001a7a:	7bfa      	ldrb	r2, [r7, #15]
 8001a7c:	4914      	ldr	r1, [pc, #80]	; (8001ad0 <huansic_order_new+0xb0>)
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	3310      	adds	r3, #16
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a90:	d112      	bne.n	8001ab8 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 8001a92:	7bfa      	ldrb	r2, [r7, #15]
 8001a94:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <huansic_order_new+0xb0>)
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4403      	add	r3, r0
 8001aa4:	3310      	adds	r3, #16
 8001aa6:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <huansic_order_new+0xb0>)
 8001ab4:	4413      	add	r3, r2
 8001ab6:	e006      	b.n	8001ac6 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	3301      	adds	r3, #1
 8001abc:	73fb      	strb	r3, [r7, #15]
 8001abe:	7bfb      	ldrb	r3, [r7, #15]
 8001ac0:	2b3b      	cmp	r3, #59	; 0x3b
 8001ac2:	d9da      	bls.n	8001a7a <huansic_order_new+0x5a>
		}
	}

	return 0;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr
 8001ad0:	20000090 	.word	0x20000090

08001ad4 <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ae4:	d103      	bne.n	8001aee <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7ff ff90 	bl	8001a0c <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 8001aec:	e003      	b.n	8001af6 <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	f04f 32ff 	mov.w	r2, #4294967295
 8001af4:	611a      	str	r2, [r3, #16]
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <huansic_motor_init+0x1c>
 8001b10:	4b55      	ldr	r3, [pc, #340]	; (8001c68 <huansic_motor_init+0x168>)
 8001b12:	4a56      	ldr	r2, [pc, #344]	; (8001c6c <huansic_motor_init+0x16c>)
 8001b14:	210c      	movs	r1, #12
 8001b16:	4856      	ldr	r0, [pc, #344]	; (8001c70 <huansic_motor_init+0x170>)
 8001b18:	f005 fe70 	bl	80077fc <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d105      	bne.n	8001b30 <huansic_motor_init+0x30>
 8001b24:	4b53      	ldr	r3, [pc, #332]	; (8001c74 <huansic_motor_init+0x174>)
 8001b26:	4a51      	ldr	r2, [pc, #324]	; (8001c6c <huansic_motor_init+0x16c>)
 8001b28:	210d      	movs	r1, #13
 8001b2a:	4851      	ldr	r0, [pc, #324]	; (8001c70 <huansic_motor_init+0x170>)
 8001b2c:	f005 fe66 	bl	80077fc <__assert_func>
	assert(hmotor->dt);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	f04f 0100 	mov.w	r1, #0
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fae5 	bl	8001108 <__aeabi_fcmpeq>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d005      	beq.n	8001b50 <huansic_motor_init+0x50>
 8001b44:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <huansic_motor_init+0x178>)
 8001b46:	4a49      	ldr	r2, [pc, #292]	; (8001c6c <huansic_motor_init+0x16c>)
 8001b48:	210e      	movs	r1, #14
 8001b4a:	4849      	ldr	r0, [pc, #292]	; (8001c70 <huansic_motor_init+0x170>)
 8001b4c:	f005 fe56 	bl	80077fc <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	84da      	strh	r2, [r3, #38]	; 0x26
	hmotor->lastError = 0;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2200      	movs	r2, #0
 8001b86:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2200      	movs	r2, #0
 8001b98:	635a      	str	r2, [r3, #52]	; 0x34
 8001b9a:	e01c      	b.n	8001bd6 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d105      	bne.n	8001bb0 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2200      	movs	r2, #0
 8001bac:	639a      	str	r2, [r3, #56]	; 0x38
 8001bae:	e012      	b.n	8001bd6 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d105      	bne.n	8001bc4 <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bc2:	e008      	b.n	8001bd6 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b0c      	cmp	r3, #12
 8001bca:	d104      	bne.n	8001bd6 <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d026      	beq.n	8001c2c <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d105      	bne.n	8001bf2 <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2200      	movs	r2, #0
 8001bee:	635a      	str	r2, [r3, #52]	; 0x34
 8001bf0:	e01c      	b.n	8001c2c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d105      	bne.n	8001c06 <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2200      	movs	r2, #0
 8001c02:	639a      	str	r2, [r3, #56]	; 0x38
 8001c04:	e012      	b.n	8001c2c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d105      	bne.n	8001c1a <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2200      	movs	r2, #0
 8001c16:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c18:	e008      	b.n	8001c2c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b0c      	cmp	r3, #12
 8001c20:	d104      	bne.n	8001c2c <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	213c      	movs	r1, #60	; 0x3c
 8001c32:	4618      	mov	r0, r3
 8001c34:	f004 f85c 	bl	8005cf0 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4619      	mov	r1, r3
 8001c42:	4610      	mov	r0, r2
 8001c44:	f003 fef8 	bl	8005a38 <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	f003 feec 	bl	8005a38 <HAL_TIM_PWM_Start>
}
 8001c60:	bf00      	nop
 8001c62:	3708      	adds	r7, #8
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	08009938 	.word	0x08009938
 8001c6c:	080099a0 	.word	0x080099a0
 8001c70:	08009948 	.word	0x08009948
 8001c74:	08009968 	.word	0x08009968
 8001c78:	0800997c 	.word	0x0800997c

08001c7c <huansic_motor_pid>:
	hmotor->posTimer = temp;

	hmotor->encoderInverted = !(hmotor->encoderInverted);
}

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 8001c7c:	b590      	push	{r4, r7, lr}
 8001c7e:	b087      	sub	sp, #28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
	int16_t newTick = 0x0FFFF & hmotor->counter->Instance->CNT;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	82fb      	strh	r3, [r7, #22]
	if (hmotor->encoderInverted)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <huansic_motor_pid+0x24>
		newTick = -newTick;
 8001c98:	8afb      	ldrh	r3, [r7, #22]
 8001c9a:	425b      	negs	r3, r3
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	82fb      	strh	r3, [r7, #22]
	int16_t diffTick = newTick - hmotor->lastTick;
 8001ca0:	8afa      	ldrh	r2, [r7, #22]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	82bb      	strh	r3, [r7, #20]

	hmotor->lastTick = newTick;
 8001cac:	8afa      	ldrh	r2, [r7, #22]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	84da      	strh	r2, [r3, #38]	; 0x26

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 8001cb2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff f83e 	bl	8000d38 <__aeabi_i2f>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	f7ff f93f 	bl	8000f48 <__aeabi_fdiv>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461a      	mov	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	62da      	str	r2, [r3, #44]	; 0x2c
	//hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	f7fe ff73 	bl	8000bcc <__aeabi_fsub>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4620      	mov	r0, r4
 8001cec:	f7fe ff6e 	bl	8000bcc <__aeabi_fsub>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4610      	mov	r0, r2
 8001d00:	f7fe ff64 	bl	8000bcc <__aeabi_fsub>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	4619      	mov	r1, r3
 8001d16:	4610      	mov	r0, r2
 8001d18:	f7fe ff5a 	bl	8000bd0 <__addsf3>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461a      	mov	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695a      	ldr	r2, [r3, #20]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	4610      	mov	r0, r2
 8001d30:	f7ff f856 	bl	8000de0 <__aeabi_fmul>
 8001d34:	4603      	mov	r3, r0
 8001d36:	461c      	mov	r4, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699a      	ldr	r2, [r3, #24]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d40:	4619      	mov	r1, r3
 8001d42:	4610      	mov	r0, r2
 8001d44:	f7ff f84c 	bl	8000de0 <__aeabi_fmul>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7fe ff3f 	bl	8000bd0 <__addsf3>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	6939      	ldr	r1, [r7, #16]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff f83f 	bl	8000de0 <__aeabi_fmul>
 8001d62:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001d64:	4619      	mov	r1, r3
 8001d66:	4620      	mov	r0, r4
 8001d68:	f7fe ff32 	bl	8000bd0 <__addsf3>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 8001d70:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001d74:	68f8      	ldr	r0, [r7, #12]
 8001d76:	f7ff f9ef 	bl	8001158 <__aeabi_fcmpgt>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d002      	beq.n	8001d86 <huansic_motor_pid+0x10a>
 8001d80:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001d84:	e009      	b.n	8001d9a <huansic_motor_pid+0x11e>
 8001d86:	4954      	ldr	r1, [pc, #336]	; (8001ed8 <huansic_motor_pid+0x25c>)
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f7ff f9c7 	bl	800111c <__aeabi_fcmplt>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <huansic_motor_pid+0x11c>
 8001d94:	4b50      	ldr	r3, [pc, #320]	; (8001ed8 <huansic_motor_pid+0x25c>)
 8001d96:	e000      	b.n	8001d9a <huansic_motor_pid+0x11e>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 8001d9c:	f04f 0100 	mov.w	r1, #0
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f7ff f9d9 	bl	8001158 <__aeabi_fcmpgt>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d019      	beq.n	8001de0 <huansic_motor_pid+0x164>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe ffb8 	bl	8000d30 <__aeabi_ui2f>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f7ff f80b 	bl	8000de0 <__aeabi_fmul>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f006 fdcf 	bl	8008970 <roundf>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff f9c9 	bl	800116c <__aeabi_f2uiz>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	e000      	b.n	8001de2 <huansic_motor_pid+0x166>
 8001de0:	2300      	movs	r3, #0
 8001de2:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 8001de4:	f04f 0100 	mov.w	r1, #0
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff f997 	bl	800111c <__aeabi_fcmplt>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d019      	beq.n	8001e28 <huansic_motor_pid+0x1ac>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe ff94 	bl	8000d30 <__aeabi_ui2f>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4620      	mov	r0, r4
 8001e0e:	f7fe ffe7 	bl	8000de0 <__aeabi_fmul>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f006 fdab 	bl	8008970 <roundf>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff f9a5 	bl	800116c <__aeabi_f2uiz>
 8001e22:	4603      	mov	r3, r0
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	e000      	b.n	8001e2a <huansic_motor_pid+0x1ae>
 8001e28:	2300      	movs	r3, #0
 8001e2a:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d105      	bne.n	8001e40 <huansic_motor_pid+0x1c4>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	897a      	ldrh	r2, [r7, #10]
 8001e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e3e:	e01c      	b.n	8001e7a <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b04      	cmp	r3, #4
 8001e46:	d105      	bne.n	8001e54 <huansic_motor_pid+0x1d8>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	897a      	ldrh	r2, [r7, #10]
 8001e50:	639a      	str	r2, [r3, #56]	; 0x38
 8001e52:	e012      	b.n	8001e7a <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d105      	bne.n	8001e68 <huansic_motor_pid+0x1ec>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	897a      	ldrh	r2, [r7, #10]
 8001e64:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e66:	e008      	b.n	8001e7a <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	2b0c      	cmp	r3, #12
 8001e6e:	d104      	bne.n	8001e7a <huansic_motor_pid+0x1fe>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	897a      	ldrh	r2, [r7, #10]
 8001e78:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d026      	beq.n	8001ed0 <huansic_motor_pid+0x254>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d105      	bne.n	8001e96 <huansic_motor_pid+0x21a>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	893a      	ldrh	r2, [r7, #8]
 8001e92:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8001e94:	e01c      	b.n	8001ed0 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d105      	bne.n	8001eaa <huansic_motor_pid+0x22e>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	893a      	ldrh	r2, [r7, #8]
 8001ea6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001ea8:	e012      	b.n	8001ed0 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d105      	bne.n	8001ebe <huansic_motor_pid+0x242>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	893a      	ldrh	r2, [r7, #8]
 8001eba:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001ebc:	e008      	b.n	8001ed0 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d104      	bne.n	8001ed0 <huansic_motor_pid+0x254>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	893a      	ldrh	r2, [r7, #8]
 8001ece:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ed0:	bf00      	nop
 8001ed2:	371c      	adds	r7, #28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd90      	pop	{r4, r7, pc}
 8001ed8:	bf800000 	.word	0xbf800000

08001edc <custom_order_new_failed>:
extern float myCharge;				// current charge returned by Master

// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms

__weak void custom_order_new_failed(uint8_t id) {
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]

}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
	hxb->nextPackageLength = 6;		// header length
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2206      	movs	r2, #6
 8001efc:	725a      	strb	r2, [r3, #9]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f103 010a 	add.w	r1, r3, #10
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7a5b      	ldrb	r3, [r3, #9]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	461a      	mov	r2, r3
 8001f10:	f004 fef2 	bl	8006cf8 <HAL_UART_Receive_DMA>
}
 8001f14:	bf00      	nop
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <huansic_xb_decodeHeader>:

uint8_t huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	// checksum
	if (hxb->buffer[5]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7bda      	ldrb	r2, [r3, #15]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7a99      	ldrb	r1, [r3, #10]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	7adb      	ldrb	r3, [r3, #11]
 8001f30:	404b      	eors	r3, r1
 8001f32:	b2d9      	uxtb	r1, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7b1b      	ldrb	r3, [r3, #12]
 8001f38:	404b      	eors	r3, r1
 8001f3a:	b2d9      	uxtb	r1, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	7b5b      	ldrb	r3, [r3, #13]
 8001f40:	404b      	eors	r3, r1
 8001f42:	b2d9      	uxtb	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	7b9b      	ldrb	r3, [r3, #14]
 8001f48:	404b      	eors	r3, r1
 8001f4a:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <huansic_xb_decodeHeader+0x38>
		return 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	e01d      	b.n	8001f90 <huansic_xb_decodeHeader+0x74>

	// get and check packet ID
	if (hxb->buffer[0] != 0x01 && hxb->buffer[0] != 0x05)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7a9b      	ldrb	r3, [r3, #10]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d005      	beq.n	8001f68 <huansic_xb_decodeHeader+0x4c>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	7a9b      	ldrb	r3, [r3, #10]
 8001f60:	2b05      	cmp	r3, #5
 8001f62:	d001      	beq.n	8001f68 <huansic_xb_decodeHeader+0x4c>
		return 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e013      	b.n	8001f90 <huansic_xb_decodeHeader+0x74>
	hxb->nextPackageID = hxb->buffer[0];
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	7a9a      	ldrb	r2, [r3, #10]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	721a      	strb	r2, [r3, #8]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	7b9a      	ldrb	r2, [r3, #14]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	725a      	strb	r2, [r3, #9]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f103 010a 	add.w	r1, r3, #10
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7a5b      	ldrb	r3, [r3, #9]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f004 feb5 	bl	8006cf8 <HAL_UART_Receive_DMA>
	return 1;
 8001f8e:	2301      	movs	r3, #1
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <huansic_xb_decodeBody>:

void huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b088      	sub	sp, #32
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	76fb      	strb	r3, [r7, #27]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	777b      	strb	r3, [r7, #29]
	uint32_t temp;
	if (hxb->nextPackageID == 0x01) {		// game information
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	7a1b      	ldrb	r3, [r3, #8]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	f040 816d 	bne.w	800228c <huansic_xb_decodeBody+0x2f4>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8001fb2:	7f7b      	ldrb	r3, [r7, #29]
 8001fb4:	1c5a      	adds	r2, r3, #1
 8001fb6:	777a      	strb	r2, [r7, #29]
 8001fb8:	461a      	mov	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	7a9a      	ldrb	r2, [r3, #10]
 8001fc0:	4b8c      	ldr	r3, [pc, #560]	; (80021f4 <huansic_xb_decodeBody+0x25c>)
 8001fc2:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8001fc4:	7f7b      	ldrb	r3, [r7, #29]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8001fca:	2300      	movs	r3, #0
 8001fcc:	77fb      	strb	r3, [r7, #31]
 8001fce:	e075      	b.n	80020bc <huansic_xb_decodeBody+0x124>
			index += 2;
 8001fd0:	7f7b      	ldrb	r3, [r7, #29]
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index++] << 8;
 8001fd6:	7f7b      	ldrb	r3, [r7, #29]
 8001fd8:	1c5a      	adds	r2, r3, #1
 8001fda:	777a      	strb	r2, [r7, #29]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	7a9b      	ldrb	r3, [r3, #10]
 8001fe4:	021a      	lsls	r2, r3, #8
 8001fe6:	7ffb      	ldrb	r3, [r7, #31]
 8001fe8:	b211      	sxth	r1, r2
 8001fea:	4a83      	ldr	r2, [pc, #524]	; (80021f8 <huansic_xb_decodeBody+0x260>)
 8001fec:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index++];
 8001ff0:	7f7b      	ldrb	r3, [r7, #29]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	777a      	strb	r2, [r7, #29]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	7a9a      	ldrb	r2, [r3, #10]
 8001ffe:	7ffb      	ldrb	r3, [r7, #31]
 8002000:	b211      	sxth	r1, r2
 8002002:	4a7d      	ldr	r2, [pc, #500]	; (80021f8 <huansic_xb_decodeBody+0x260>)
 8002004:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 8002008:	7f7b      	ldrb	r3, [r7, #29]
 800200a:	3302      	adds	r3, #2
 800200c:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index++] << 8;
 800200e:	7f7b      	ldrb	r3, [r7, #29]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	777a      	strb	r2, [r7, #29]
 8002014:	461a      	mov	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	7a9b      	ldrb	r3, [r3, #10]
 800201c:	021a      	lsls	r2, r3, #8
 800201e:	7ffb      	ldrb	r3, [r7, #31]
 8002020:	b211      	sxth	r1, r2
 8002022:	4a75      	ldr	r2, [pc, #468]	; (80021f8 <huansic_xb_decodeBody+0x260>)
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	460a      	mov	r2, r1
 800202a:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 800202c:	7f7b      	ldrb	r3, [r7, #29]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	7a9a      	ldrb	r2, [r3, #10]
 8002034:	7ffb      	ldrb	r3, [r7, #31]
 8002036:	b211      	sxth	r1, r2
 8002038:	4a6f      	ldr	r2, [pc, #444]	; (80021f8 <huansic_xb_decodeBody+0x260>)
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	4413      	add	r3, r2
 800203e:	460a      	mov	r2, r1
 8002040:	805a      	strh	r2, [r3, #2]
			index += 2;
 8002042:	7f7b      	ldrb	r3, [r7, #29]
 8002044:	3302      	adds	r3, #2
 8002046:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index++] << 8;
 8002048:	7f7b      	ldrb	r3, [r7, #29]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	777a      	strb	r2, [r7, #29]
 800204e:	461a      	mov	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4413      	add	r3, r2
 8002054:	7a9b      	ldrb	r3, [r3, #10]
 8002056:	021a      	lsls	r2, r3, #8
 8002058:	7ffb      	ldrb	r3, [r7, #31]
 800205a:	b211      	sxth	r1, r2
 800205c:	4a66      	ldr	r2, [pc, #408]	; (80021f8 <huansic_xb_decodeBody+0x260>)
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	460a      	mov	r2, r1
 8002064:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8002066:	7f7b      	ldrb	r3, [r7, #29]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	7a9a      	ldrb	r2, [r3, #10]
 800206e:	7ffb      	ldrb	r3, [r7, #31]
 8002070:	b211      	sxth	r1, r2
 8002072:	4a61      	ldr	r2, [pc, #388]	; (80021f8 <huansic_xb_decodeBody+0x260>)
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	460a      	mov	r2, r1
 800207a:	809a      	strh	r2, [r3, #4]
			index += 2;
 800207c:	7f7b      	ldrb	r3, [r7, #29]
 800207e:	3302      	adds	r3, #2
 8002080:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index++] << 8;
 8002082:	7f7b      	ldrb	r3, [r7, #29]
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	777a      	strb	r2, [r7, #29]
 8002088:	461a      	mov	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	7a9b      	ldrb	r3, [r3, #10]
 8002090:	021a      	lsls	r2, r3, #8
 8002092:	7ffb      	ldrb	r3, [r7, #31]
 8002094:	b211      	sxth	r1, r2
 8002096:	4a58      	ldr	r2, [pc, #352]	; (80021f8 <huansic_xb_decodeBody+0x260>)
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	460a      	mov	r2, r1
 800209e:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 80020a0:	7f7b      	ldrb	r3, [r7, #29]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	7a9a      	ldrb	r2, [r3, #10]
 80020a8:	7ffb      	ldrb	r3, [r7, #31]
 80020aa:	b211      	sxth	r1, r2
 80020ac:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <huansic_xb_decodeBody+0x260>)
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	460a      	mov	r2, r1
 80020b4:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 80020b6:	7ffb      	ldrb	r3, [r7, #31]
 80020b8:	3301      	adds	r3, #1
 80020ba:	77fb      	strb	r3, [r7, #31]
 80020bc:	7ffb      	ldrb	r3, [r7, #31]
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d986      	bls.n	8001fd0 <huansic_xb_decodeBody+0x38>
		}

		/* total time of this round */
		index++;
 80020c2:	7f7b      	ldrb	r3, [r7, #29]
 80020c4:	3301      	adds	r3, #1
 80020c6:	777b      	strb	r3, [r7, #29]
		gameStageTimeLimit = hxb->buffer[index++];
 80020c8:	7f7b      	ldrb	r3, [r7, #29]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	777a      	strb	r2, [r7, #29]
 80020ce:	461a      	mov	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4413      	add	r3, r2
 80020d4:	7a9b      	ldrb	r3, [r3, #10]
 80020d6:	461a      	mov	r2, r3
 80020d8:	4b48      	ldr	r3, [pc, #288]	; (80021fc <huansic_xb_decodeBody+0x264>)
 80020da:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 80020dc:	4b47      	ldr	r3, [pc, #284]	; (80021fc <huansic_xb_decodeBody+0x264>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	4a46      	ldr	r2, [pc, #280]	; (80021fc <huansic_xb_decodeBody+0x264>)
 80020e4:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 80020e6:	7f7b      	ldrb	r3, [r7, #29]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	777a      	strb	r2, [r7, #29]
 80020ec:	461a      	mov	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	7a9b      	ldrb	r3, [r3, #10]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <huansic_xb_decodeBody+0x264>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	4a3f      	ldr	r2, [pc, #252]	; (80021fc <huansic_xb_decodeBody+0x264>)
 80020fe:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002100:	4b3e      	ldr	r3, [pc, #248]	; (80021fc <huansic_xb_decodeBody+0x264>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	4a3d      	ldr	r2, [pc, #244]	; (80021fc <huansic_xb_decodeBody+0x264>)
 8002108:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 800210a:	7f7b      	ldrb	r3, [r7, #29]
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	777a      	strb	r2, [r7, #29]
 8002110:	461a      	mov	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	7a9b      	ldrb	r3, [r3, #10]
 8002118:	461a      	mov	r2, r3
 800211a:	4b38      	ldr	r3, [pc, #224]	; (80021fc <huansic_xb_decodeBody+0x264>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	4a36      	ldr	r2, [pc, #216]	; (80021fc <huansic_xb_decodeBody+0x264>)
 8002122:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002124:	4b35      	ldr	r3, [pc, #212]	; (80021fc <huansic_xb_decodeBody+0x264>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	021b      	lsls	r3, r3, #8
 800212a:	4a34      	ldr	r2, [pc, #208]	; (80021fc <huansic_xb_decodeBody+0x264>)
 800212c:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 800212e:	7f7b      	ldrb	r3, [r7, #29]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	777a      	strb	r2, [r7, #29]
 8002134:	461a      	mov	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4413      	add	r3, r2
 800213a:	7a9b      	ldrb	r3, [r3, #10]
 800213c:	461a      	mov	r2, r3
 800213e:	4b2f      	ldr	r3, [pc, #188]	; (80021fc <huansic_xb_decodeBody+0x264>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	4a2d      	ldr	r2, [pc, #180]	; (80021fc <huansic_xb_decodeBody+0x264>)
 8002146:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 8002148:	7f7b      	ldrb	r3, [r7, #29]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	7a9b      	ldrb	r3, [r3, #10]
 8002150:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002152:	2300      	movs	r3, #0
 8002154:	77fb      	strb	r3, [r7, #31]
 8002156:	e03e      	b.n	80021d6 <huansic_xb_decodeBody+0x23e>
			index += 2;
 8002158:	7f7b      	ldrb	r3, [r7, #29]
 800215a:	3302      	adds	r3, #2
 800215c:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 800215e:	7f7b      	ldrb	r3, [r7, #29]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	777a      	strb	r2, [r7, #29]
 8002164:	461a      	mov	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4413      	add	r3, r2
 800216a:	7a9b      	ldrb	r3, [r3, #10]
 800216c:	021a      	lsls	r2, r3, #8
 800216e:	7ffb      	ldrb	r3, [r7, #31]
 8002170:	b211      	sxth	r1, r2
 8002172:	4a23      	ldr	r2, [pc, #140]	; (8002200 <huansic_xb_decodeBody+0x268>)
 8002174:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x = hxb->buffer[index++];
 8002178:	7f7b      	ldrb	r3, [r7, #29]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	777a      	strb	r2, [r7, #29]
 800217e:	461a      	mov	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	7a9a      	ldrb	r2, [r3, #10]
 8002186:	7ffb      	ldrb	r3, [r7, #31]
 8002188:	b211      	sxth	r1, r2
 800218a:	4a1d      	ldr	r2, [pc, #116]	; (8002200 <huansic_xb_decodeBody+0x268>)
 800218c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002190:	7f7b      	ldrb	r3, [r7, #29]
 8002192:	3302      	adds	r3, #2
 8002194:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002196:	7f7b      	ldrb	r3, [r7, #29]
 8002198:	1c5a      	adds	r2, r3, #1
 800219a:	777a      	strb	r2, [r7, #29]
 800219c:	461a      	mov	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4413      	add	r3, r2
 80021a2:	7a9b      	ldrb	r3, [r3, #10]
 80021a4:	021a      	lsls	r2, r3, #8
 80021a6:	7ffb      	ldrb	r3, [r7, #31]
 80021a8:	b211      	sxth	r1, r2
 80021aa:	4a15      	ldr	r2, [pc, #84]	; (8002200 <huansic_xb_decodeBody+0x268>)
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	460a      	mov	r2, r1
 80021b2:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y = hxb->buffer[index++];
 80021b4:	7f7b      	ldrb	r3, [r7, #29]
 80021b6:	1c5a      	adds	r2, r3, #1
 80021b8:	777a      	strb	r2, [r7, #29]
 80021ba:	461a      	mov	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	7a9a      	ldrb	r2, [r3, #10]
 80021c2:	7ffb      	ldrb	r3, [r7, #31]
 80021c4:	b211      	sxth	r1, r2
 80021c6:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <huansic_xb_decodeBody+0x268>)
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	460a      	mov	r2, r1
 80021ce:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 80021d0:	7ffb      	ldrb	r3, [r7, #31]
 80021d2:	3301      	adds	r3, #1
 80021d4:	77fb      	strb	r3, [r7, #31]
 80021d6:	7ffa      	ldrb	r2, [r7, #31]
 80021d8:	7efb      	ldrb	r3, [r7, #27]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d3bc      	bcc.n	8002158 <huansic_xb_decodeBody+0x1c0>
		}

		/* opponent beacons */
		index++;
 80021de:	7f7b      	ldrb	r3, [r7, #29]
 80021e0:	3301      	adds	r3, #1
 80021e2:	777b      	strb	r3, [r7, #29]
		listLength = hxb->buffer[index];
 80021e4:	7f7b      	ldrb	r3, [r7, #29]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	7a9b      	ldrb	r3, [r3, #10]
 80021ec:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 80021ee:	2300      	movs	r3, #0
 80021f0:	77fb      	strb	r3, [r7, #31]
 80021f2:	e046      	b.n	8002282 <huansic_xb_decodeBody+0x2ea>
 80021f4:	20000b60 	.word	0x20000b60
 80021f8:	20000b6c 	.word	0x20000b6c
 80021fc:	20000b64 	.word	0x20000b64
 8002200:	20000b94 	.word	0x20000b94
			index += 2;
 8002204:	7f7b      	ldrb	r3, [r7, #29]
 8002206:	3302      	adds	r3, #2
 8002208:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 800220a:	7f7b      	ldrb	r3, [r7, #29]
 800220c:	1c5a      	adds	r2, r3, #1
 800220e:	777a      	strb	r2, [r7, #29]
 8002210:	461a      	mov	r2, r3
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4413      	add	r3, r2
 8002216:	7a9b      	ldrb	r3, [r3, #10]
 8002218:	021a      	lsls	r2, r3, #8
 800221a:	7ffb      	ldrb	r3, [r7, #31]
 800221c:	b211      	sxth	r1, r2
 800221e:	4a9f      	ldr	r2, [pc, #636]	; (800249c <huansic_xb_decodeBody+0x504>)
 8002220:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x = hxb->buffer[index++];
 8002224:	7f7b      	ldrb	r3, [r7, #29]
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	777a      	strb	r2, [r7, #29]
 800222a:	461a      	mov	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4413      	add	r3, r2
 8002230:	7a9a      	ldrb	r2, [r3, #10]
 8002232:	7ffb      	ldrb	r3, [r7, #31]
 8002234:	b211      	sxth	r1, r2
 8002236:	4a99      	ldr	r2, [pc, #612]	; (800249c <huansic_xb_decodeBody+0x504>)
 8002238:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 800223c:	7f7b      	ldrb	r3, [r7, #29]
 800223e:	3302      	adds	r3, #2
 8002240:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002242:	7f7b      	ldrb	r3, [r7, #29]
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	777a      	strb	r2, [r7, #29]
 8002248:	461a      	mov	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	7a9b      	ldrb	r3, [r3, #10]
 8002250:	021a      	lsls	r2, r3, #8
 8002252:	7ffb      	ldrb	r3, [r7, #31]
 8002254:	b211      	sxth	r1, r2
 8002256:	4a91      	ldr	r2, [pc, #580]	; (800249c <huansic_xb_decodeBody+0x504>)
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	460a      	mov	r2, r1
 800225e:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8002260:	7f7b      	ldrb	r3, [r7, #29]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	777a      	strb	r2, [r7, #29]
 8002266:	461a      	mov	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4413      	add	r3, r2
 800226c:	7a9a      	ldrb	r2, [r3, #10]
 800226e:	7ffb      	ldrb	r3, [r7, #31]
 8002270:	b211      	sxth	r1, r2
 8002272:	4a8a      	ldr	r2, [pc, #552]	; (800249c <huansic_xb_decodeBody+0x504>)
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	460a      	mov	r2, r1
 800227a:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 800227c:	7ffb      	ldrb	r3, [r7, #31]
 800227e:	3301      	adds	r3, #1
 8002280:	77fb      	strb	r3, [r7, #31]
 8002282:	7ffa      	ldrb	r2, [r7, #31]
 8002284:	7efb      	ldrb	r3, [r7, #27]
 8002286:	429a      	cmp	r2, r3
 8002288:	d3bc      	bcc.n	8002204 <huansic_xb_decodeBody+0x26c>
 800228a:	e31a      	b.n	80028c2 <huansic_xb_decodeBody+0x92a>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7a1b      	ldrb	r3, [r3, #8]
 8002290:	2b05      	cmp	r3, #5
 8002292:	f040 8316 	bne.w	80028c2 <huansic_xb_decodeBody+0x92a>
		/* game status */
		gameStatus = hxb->buffer[index++];
 8002296:	7f7b      	ldrb	r3, [r7, #29]
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	777a      	strb	r2, [r7, #29]
 800229c:	461a      	mov	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4413      	add	r3, r2
 80022a2:	7a9a      	ldrb	r2, [r3, #10]
 80022a4:	4b7e      	ldr	r3, [pc, #504]	; (80024a0 <huansic_xb_decodeBody+0x508>)
 80022a6:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 80022a8:	7f7b      	ldrb	r3, [r7, #29]
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	777a      	strb	r2, [r7, #29]
 80022ae:	461a      	mov	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4413      	add	r3, r2
 80022b4:	7a9b      	ldrb	r3, [r3, #10]
 80022b6:	461a      	mov	r2, r3
 80022b8:	4b7a      	ldr	r3, [pc, #488]	; (80024a4 <huansic_xb_decodeBody+0x50c>)
 80022ba:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 80022bc:	4b79      	ldr	r3, [pc, #484]	; (80024a4 <huansic_xb_decodeBody+0x50c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	021b      	lsls	r3, r3, #8
 80022c2:	4a78      	ldr	r2, [pc, #480]	; (80024a4 <huansic_xb_decodeBody+0x50c>)
 80022c4:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 80022c6:	7f7b      	ldrb	r3, [r7, #29]
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	777a      	strb	r2, [r7, #29]
 80022cc:	461a      	mov	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4413      	add	r3, r2
 80022d2:	7a9b      	ldrb	r3, [r3, #10]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b73      	ldr	r3, [pc, #460]	; (80024a4 <huansic_xb_decodeBody+0x50c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	4a71      	ldr	r2, [pc, #452]	; (80024a4 <huansic_xb_decodeBody+0x50c>)
 80022de:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 80022e0:	4b70      	ldr	r3, [pc, #448]	; (80024a4 <huansic_xb_decodeBody+0x50c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	4a6f      	ldr	r2, [pc, #444]	; (80024a4 <huansic_xb_decodeBody+0x50c>)
 80022e8:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 80022ea:	7f7b      	ldrb	r3, [r7, #29]
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	777a      	strb	r2, [r7, #29]
 80022f0:	461a      	mov	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4413      	add	r3, r2
 80022f6:	7a9b      	ldrb	r3, [r3, #10]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b6a      	ldr	r3, [pc, #424]	; (80024a4 <huansic_xb_decodeBody+0x50c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4313      	orrs	r3, r2
 8002300:	4a68      	ldr	r2, [pc, #416]	; (80024a4 <huansic_xb_decodeBody+0x50c>)
 8002302:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8002304:	4b67      	ldr	r3, [pc, #412]	; (80024a4 <huansic_xb_decodeBody+0x50c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	4a66      	ldr	r2, [pc, #408]	; (80024a4 <huansic_xb_decodeBody+0x50c>)
 800230c:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 800230e:	7f7b      	ldrb	r3, [r7, #29]
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	777a      	strb	r2, [r7, #29]
 8002314:	461a      	mov	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4413      	add	r3, r2
 800231a:	7a9b      	ldrb	r3, [r3, #10]
 800231c:	461a      	mov	r2, r3
 800231e:	4b61      	ldr	r3, [pc, #388]	; (80024a4 <huansic_xb_decodeBody+0x50c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4313      	orrs	r3, r2
 8002324:	4a5f      	ldr	r2, [pc, #380]	; (80024a4 <huansic_xb_decodeBody+0x50c>)
 8002326:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 8002328:	4b5f      	ldr	r3, [pc, #380]	; (80024a8 <huansic_xb_decodeBody+0x510>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	4b5d      	ldr	r3, [pc, #372]	; (80024a4 <huansic_xb_decodeBody+0x50c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	4a5e      	ldr	r2, [pc, #376]	; (80024ac <huansic_xb_decodeBody+0x514>)
 8002334:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 8002336:	7f7b      	ldrb	r3, [r7, #29]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	777a      	strb	r2, [r7, #29]
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	7a9b      	ldrb	r3, [r3, #10]
 8002344:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800234c:	7f7b      	ldrb	r3, [r7, #29]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	777a      	strb	r2, [r7, #29]
 8002352:	461a      	mov	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4413      	add	r3, r2
 8002358:	7a9b      	ldrb	r3, [r3, #10]
 800235a:	461a      	mov	r2, r3
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4313      	orrs	r3, r2
 8002360:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	021b      	lsls	r3, r3, #8
 8002366:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002368:	7f7b      	ldrb	r3, [r7, #29]
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	777a      	strb	r2, [r7, #29]
 800236e:	461a      	mov	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4413      	add	r3, r2
 8002374:	7a9b      	ldrb	r3, [r3, #10]
 8002376:	461a      	mov	r2, r3
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002384:	7f7b      	ldrb	r3, [r7, #29]
 8002386:	1c5a      	adds	r2, r3, #1
 8002388:	777a      	strb	r2, [r7, #29]
 800238a:	461a      	mov	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	4413      	add	r3, r2
 8002390:	7a9b      	ldrb	r3, [r3, #10]
 8002392:	461a      	mov	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 800239a:	f107 0310 	add.w	r3, r7, #16
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a43      	ldr	r2, [pc, #268]	; (80024b0 <huansic_xb_decodeBody+0x518>)
 80023a2:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 2;
 80023a4:	7f7b      	ldrb	r3, [r7, #29]
 80023a6:	3302      	adds	r3, #2
 80023a8:	777b      	strb	r3, [r7, #29]
		myCoord.x = (uint16_t) hxb->buffer[index++] << 8;
 80023aa:	7f7b      	ldrb	r3, [r7, #29]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	777a      	strb	r2, [r7, #29]
 80023b0:	461a      	mov	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	7a9b      	ldrb	r3, [r3, #10]
 80023b8:	021b      	lsls	r3, r3, #8
 80023ba:	b21a      	sxth	r2, r3
 80023bc:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <huansic_xb_decodeBody+0x51c>)
 80023be:	801a      	strh	r2, [r3, #0]
		myCoord.x = hxb->buffer[index++];
 80023c0:	7f7b      	ldrb	r3, [r7, #29]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	777a      	strb	r2, [r7, #29]
 80023c6:	461a      	mov	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4413      	add	r3, r2
 80023cc:	7a9b      	ldrb	r3, [r3, #10]
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	4b38      	ldr	r3, [pc, #224]	; (80024b4 <huansic_xb_decodeBody+0x51c>)
 80023d2:	801a      	strh	r2, [r3, #0]
		index += 2;
 80023d4:	7f7b      	ldrb	r3, [r7, #29]
 80023d6:	3302      	adds	r3, #2
 80023d8:	777b      	strb	r3, [r7, #29]
		myCoord.y = (uint16_t) hxb->buffer[index++] << 8;
 80023da:	7f7b      	ldrb	r3, [r7, #29]
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	777a      	strb	r2, [r7, #29]
 80023e0:	461a      	mov	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	7a9b      	ldrb	r3, [r3, #10]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <huansic_xb_decodeBody+0x51c>)
 80023ee:	805a      	strh	r2, [r3, #2]
		myCoord.y = hxb->buffer[index++];
 80023f0:	7f7b      	ldrb	r3, [r7, #29]
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	777a      	strb	r2, [r7, #29]
 80023f6:	461a      	mov	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	7a9b      	ldrb	r3, [r3, #10]
 80023fe:	b21a      	sxth	r2, r3
 8002400:	4b2c      	ldr	r3, [pc, #176]	; (80024b4 <huansic_xb_decodeBody+0x51c>)
 8002402:	805a      	strh	r2, [r3, #2]

		/* fetch battery */
		temp = hxb->buffer[index++];
 8002404:	7f7b      	ldrb	r3, [r7, #29]
 8002406:	1c5a      	adds	r2, r3, #1
 8002408:	777a      	strb	r2, [r7, #29]
 800240a:	461a      	mov	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4413      	add	r3, r2
 8002410:	7a9b      	ldrb	r3, [r3, #10]
 8002412:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800241a:	7f7b      	ldrb	r3, [r7, #29]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	777a      	strb	r2, [r7, #29]
 8002420:	461a      	mov	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	7a9b      	ldrb	r3, [r3, #10]
 8002428:	461a      	mov	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	021b      	lsls	r3, r3, #8
 8002434:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002436:	7f7b      	ldrb	r3, [r7, #29]
 8002438:	1c5a      	adds	r2, r3, #1
 800243a:	777a      	strb	r2, [r7, #29]
 800243c:	461a      	mov	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	7a9b      	ldrb	r3, [r3, #10]
 8002444:	461a      	mov	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002452:	7f7b      	ldrb	r3, [r7, #29]
 8002454:	1c5a      	adds	r2, r3, #1
 8002456:	777a      	strb	r2, [r7, #29]
 8002458:	461a      	mov	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4413      	add	r3, r2
 800245e:	7a9b      	ldrb	r3, [r3, #10]
 8002460:	461a      	mov	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <huansic_xb_decodeBody+0x520>)
 8002470:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 8002472:	4a12      	ldr	r2, [pc, #72]	; (80024bc <huansic_xb_decodeBody+0x524>)
 8002474:	f107 0308 	add.w	r3, r7, #8
 8002478:	e892 0003 	ldmia.w	r2, {r0, r1}
 800247c:	6018      	str	r0, [r3, #0]
 800247e:	3304      	adds	r3, #4
 8002480:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 8002486:	7f7b      	ldrb	r3, [r7, #29]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	777a      	strb	r2, [r7, #29]
 800248c:	461a      	mov	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	7a9b      	ldrb	r3, [r3, #10]
 8002494:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002496:	2300      	movs	r3, #0
 8002498:	77fb      	strb	r3, [r7, #31]
 800249a:	e0fd      	b.n	8002698 <huansic_xb_decodeBody+0x700>
 800249c:	20000ba0 	.word	0x20000ba0
 80024a0:	20000b61 	.word	0x20000b61
 80024a4:	20000b68 	.word	0x20000b68
 80024a8:	20000b64 	.word	0x20000b64
 80024ac:	20000bd0 	.word	0x20000bd0
 80024b0:	20000bc8 	.word	0x20000bc8
 80024b4:	20000bc0 	.word	0x20000bc0
 80024b8:	20000bcc 	.word	0x20000bcc
 80024bc:	08009988 	.word	0x08009988
			temp = hxb->buffer[index + 24];
 80024c0:	7f7b      	ldrb	r3, [r7, #29]
 80024c2:	3318      	adds	r3, #24
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	7a9b      	ldrb	r3, [r3, #10]
 80024ca:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 25];
 80024d2:	7f7b      	ldrb	r3, [r7, #29]
 80024d4:	3319      	adds	r3, #25
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	7a9b      	ldrb	r3, [r3, #10]
 80024dc:	461a      	mov	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 26];
 80024ea:	7f7b      	ldrb	r3, [r7, #29]
 80024ec:	331a      	adds	r3, #26
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	7a9b      	ldrb	r3, [r3, #10]
 80024f4:	461a      	mov	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 27];
 8002502:	7f7b      	ldrb	r3, [r7, #29]
 8002504:	331b      	adds	r3, #27
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	7a9b      	ldrb	r3, [r3, #10]
 800250c:	461a      	mov	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	b25b      	sxtb	r3, r3
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fa81 	bl	8001a20 <huansic_order_new>
 800251e:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d108      	bne.n	8002538 <huansic_xb_decodeBody+0x5a0>
				index += 28;
 8002526:	7f7b      	ldrb	r3, [r7, #29]
 8002528:	331c      	adds	r3, #28
 800252a:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	4618      	mov	r0, r3
 8002532:	f7ff fcd3 	bl	8001edc <custom_order_new_failed>
				continue;
 8002536:	e0ac      	b.n	8002692 <huansic_xb_decodeBody+0x6fa>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002538:	7f7b      	ldrb	r3, [r7, #29]
 800253a:	3302      	adds	r3, #2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	7a9b      	ldrb	r3, [r3, #10]
 8002542:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 8002544:	b21a      	sxth	r2, r3
 8002546:	7f7b      	ldrb	r3, [r7, #29]
 8002548:	3303      	adds	r3, #3
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	440b      	add	r3, r1
 800254e:	7a9b      	ldrb	r3, [r3, #10]
 8002550:	b21b      	sxth	r3, r3
 8002552:	4313      	orrs	r3, r2
 8002554:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 800255a:	7f7b      	ldrb	r3, [r7, #29]
 800255c:	3306      	adds	r3, #6
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	4413      	add	r3, r2
 8002562:	7a9b      	ldrb	r3, [r3, #10]
 8002564:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 8002566:	b21a      	sxth	r2, r3
 8002568:	7f7b      	ldrb	r3, [r7, #29]
 800256a:	3307      	adds	r3, #7
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	440b      	add	r3, r1
 8002570:	7a9b      	ldrb	r3, [r3, #10]
 8002572:	b21b      	sxth	r3, r3
 8002574:	4313      	orrs	r3, r2
 8002576:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 800257c:	7f7b      	ldrb	r3, [r7, #29]
 800257e:	330a      	adds	r3, #10
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	4413      	add	r3, r2
 8002584:	7a9b      	ldrb	r3, [r3, #10]
 8002586:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 8002588:	b21a      	sxth	r2, r3
 800258a:	7f7b      	ldrb	r3, [r7, #29]
 800258c:	330b      	adds	r3, #11
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	440b      	add	r3, r1
 8002592:	7a9b      	ldrb	r3, [r3, #10]
 8002594:	b21b      	sxth	r3, r3
 8002596:	4313      	orrs	r3, r2
 8002598:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 800259e:	7f7b      	ldrb	r3, [r7, #29]
 80025a0:	330e      	adds	r3, #14
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	7a9b      	ldrb	r3, [r3, #10]
 80025a8:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 80025aa:	b21a      	sxth	r2, r3
 80025ac:	7f7b      	ldrb	r3, [r7, #29]
 80025ae:	330f      	adds	r3, #15
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	440b      	add	r3, r1
 80025b4:	7a9b      	ldrb	r3, [r3, #10]
 80025b6:	b21b      	sxth	r3, r3
 80025b8:	4313      	orrs	r3, r2
 80025ba:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 80025c0:	7f7b      	ldrb	r3, [r7, #29]
 80025c2:	3310      	adds	r3, #16
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	7a9b      	ldrb	r3, [r3, #10]
 80025ca:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 80025d2:	7f7b      	ldrb	r3, [r7, #29]
 80025d4:	3311      	adds	r3, #17
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4413      	add	r3, r2
 80025da:	7a9b      	ldrb	r3, [r3, #10]
 80025dc:	461a      	mov	r2, r3
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	021b      	lsls	r3, r3, #8
 80025e8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 80025ea:	7f7b      	ldrb	r3, [r7, #29]
 80025ec:	3312      	adds	r3, #18
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	7a9b      	ldrb	r3, [r3, #10]
 80025f4:	461a      	mov	r2, r3
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	021b      	lsls	r3, r3, #8
 8002600:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 8002602:	7f7b      	ldrb	r3, [r7, #29]
 8002604:	3313      	adds	r3, #19
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	4413      	add	r3, r2
 800260a:	7a9b      	ldrb	r3, [r3, #10]
 800260c:	461a      	mov	r2, r3
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8002614:	693a      	ldr	r2, [r7, #16]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 800261a:	7f7b      	ldrb	r3, [r7, #29]
 800261c:	3314      	adds	r3, #20
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	7a9b      	ldrb	r3, [r3, #10]
 8002624:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 800262c:	7f7b      	ldrb	r3, [r7, #29]
 800262e:	3315      	adds	r3, #21
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	4413      	add	r3, r2
 8002634:	7a9b      	ldrb	r3, [r3, #10]
 8002636:	461a      	mov	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 8002644:	7f7b      	ldrb	r3, [r7, #29]
 8002646:	3316      	adds	r3, #22
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	4413      	add	r3, r2
 800264c:	7a9b      	ldrb	r3, [r3, #10]
 800264e:	461a      	mov	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	4313      	orrs	r3, r2
 8002654:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 800265c:	7f7b      	ldrb	r3, [r7, #29]
 800265e:	3317      	adds	r3, #23
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	4413      	add	r3, r2
 8002664:	7a9b      	ldrb	r3, [r3, #10]
 8002666:	461a      	mov	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 800266e:	f107 0310 	add.w	r3, r7, #16
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 28;
 8002678:	7f7b      	ldrb	r3, [r7, #29]
 800267a:	331c      	adds	r3, #28
 800267c:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	691a      	ldr	r2, [r3, #16]
 8002682:	7f3b      	ldrb	r3, [r7, #28]
 8002684:	1c59      	adds	r1, r3, #1
 8002686:	7739      	strb	r1, [r7, #28]
 8002688:	b252      	sxtb	r2, r2
 800268a:	3320      	adds	r3, #32
 800268c:	443b      	add	r3, r7
 800268e:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 8002692:	7ffb      	ldrb	r3, [r7, #31]
 8002694:	3301      	adds	r3, #1
 8002696:	77fb      	strb	r3, [r7, #31]
 8002698:	7ffa      	ldrb	r2, [r7, #31]
 800269a:	7efb      	ldrb	r3, [r7, #27]
 800269c:	429a      	cmp	r2, r3
 800269e:	f4ff af0f 	bcc.w	80024c0 <huansic_xb_decodeBody+0x528>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 80026a2:	2300      	movs	r3, #0
 80026a4:	77fb      	strb	r3, [r7, #31]
 80026a6:	e02d      	b.n	8002704 <huansic_xb_decodeBody+0x76c>
			if (delivering[i]->id != -1) {
 80026a8:	7ffb      	ldrb	r3, [r7, #31]
 80026aa:	4a90      	ldr	r2, [pc, #576]	; (80028ec <huansic_xb_decodeBody+0x954>)
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b6:	d022      	beq.n	80026fe <huansic_xb_decodeBody+0x766>
				for (j = 0; i < updatedOrderIndex; j++)
 80026b8:	2300      	movs	r3, #0
 80026ba:	77bb      	strb	r3, [r7, #30]
 80026bc:	e011      	b.n	80026e2 <huansic_xb_decodeBody+0x74a>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 80026be:	7ffb      	ldrb	r3, [r7, #31]
 80026c0:	4a8a      	ldr	r2, [pc, #552]	; (80028ec <huansic_xb_decodeBody+0x954>)
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	7fba      	ldrb	r2, [r7, #30]
 80026ca:	3220      	adds	r2, #32
 80026cc:	443a      	add	r2, r7
 80026ce:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d102      	bne.n	80026dc <huansic_xb_decodeBody+0x744>
						j = 255;
 80026d6:	23ff      	movs	r3, #255	; 0xff
 80026d8:	77bb      	strb	r3, [r7, #30]
						break;
 80026da:	e006      	b.n	80026ea <huansic_xb_decodeBody+0x752>
				for (j = 0; i < updatedOrderIndex; j++)
 80026dc:	7fbb      	ldrb	r3, [r7, #30]
 80026de:	3301      	adds	r3, #1
 80026e0:	77bb      	strb	r3, [r7, #30]
 80026e2:	7ffa      	ldrb	r2, [r7, #31]
 80026e4:	7f3b      	ldrb	r3, [r7, #28]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d3e9      	bcc.n	80026be <huansic_xb_decodeBody+0x726>
					}
				if (j != 255)
 80026ea:	7fbb      	ldrb	r3, [r7, #30]
 80026ec:	2bff      	cmp	r3, #255	; 0xff
 80026ee:	d006      	beq.n	80026fe <huansic_xb_decodeBody+0x766>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 80026f0:	7ffb      	ldrb	r3, [r7, #31]
 80026f2:	4a7e      	ldr	r2, [pc, #504]	; (80028ec <huansic_xb_decodeBody+0x954>)
 80026f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff f9eb 	bl	8001ad4 <huansic_order_delete>
		for (i = 0; i < 5; i++)
 80026fe:	7ffb      	ldrb	r3, [r7, #31]
 8002700:	3301      	adds	r3, #1
 8002702:	77fb      	strb	r3, [r7, #31]
 8002704:	7ffb      	ldrb	r3, [r7, #31]
 8002706:	2b04      	cmp	r3, #4
 8002708:	d9ce      	bls.n	80026a8 <huansic_xb_decodeBody+0x710>
			}

		/* record latest order */
		temp = hxb->buffer[index + 24];
 800270a:	7f7b      	ldrb	r3, [r7, #29]
 800270c:	3318      	adds	r3, #24
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	4413      	add	r3, r2
 8002712:	7a9b      	ldrb	r3, [r3, #10]
 8002714:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	021b      	lsls	r3, r3, #8
 800271a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 25];
 800271c:	7f7b      	ldrb	r3, [r7, #29]
 800271e:	3319      	adds	r3, #25
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4413      	add	r3, r2
 8002724:	7a9b      	ldrb	r3, [r3, #10]
 8002726:	461a      	mov	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	021b      	lsls	r3, r3, #8
 8002732:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 26];
 8002734:	7f7b      	ldrb	r3, [r7, #29]
 8002736:	331a      	adds	r3, #26
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	4413      	add	r3, r2
 800273c:	7a9b      	ldrb	r3, [r3, #10]
 800273e:	461a      	mov	r2, r3
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	021b      	lsls	r3, r3, #8
 800274a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 27];
 800274c:	7f7b      	ldrb	r3, [r7, #29]
 800274e:	331b      	adds	r3, #27
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	4413      	add	r3, r2
 8002754:	7a9b      	ldrb	r3, [r3, #10]
 8002756:	461a      	mov	r2, r3
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	b25b      	sxtb	r3, r3
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff f95c 	bl	8001a20 <huansic_order_new>
 8002768:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d108      	bne.n	8002782 <huansic_xb_decodeBody+0x7ea>
			index += 28;
 8002770:	7f7b      	ldrb	r3, [r7, #29]
 8002772:	331c      	adds	r3, #28
 8002774:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	b2db      	uxtb	r3, r3
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fbae 	bl	8001edc <custom_order_new_failed>
 8002780:	e09f      	b.n	80028c2 <huansic_xb_decodeBody+0x92a>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002782:	7f7b      	ldrb	r3, [r7, #29]
 8002784:	3302      	adds	r3, #2
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	7a9b      	ldrb	r3, [r3, #10]
 800278c:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 800278e:	b21a      	sxth	r2, r3
 8002790:	7f7b      	ldrb	r3, [r7, #29]
 8002792:	3303      	adds	r3, #3
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	440b      	add	r3, r1
 8002798:	7a9b      	ldrb	r3, [r3, #10]
 800279a:	b21b      	sxth	r3, r3
 800279c:	4313      	orrs	r3, r2
 800279e:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80027a4:	7f7b      	ldrb	r3, [r7, #29]
 80027a6:	3306      	adds	r3, #6
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	4413      	add	r3, r2
 80027ac:	7a9b      	ldrb	r3, [r3, #10]
 80027ae:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 80027b0:	b21a      	sxth	r2, r3
 80027b2:	7f7b      	ldrb	r3, [r7, #29]
 80027b4:	3307      	adds	r3, #7
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	440b      	add	r3, r1
 80027ba:	7a9b      	ldrb	r3, [r3, #10]
 80027bc:	b21b      	sxth	r3, r3
 80027be:	4313      	orrs	r3, r2
 80027c0:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	805a      	strh	r2, [r3, #2]
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80027c6:	7f7b      	ldrb	r3, [r7, #29]
 80027c8:	330a      	adds	r3, #10
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	4413      	add	r3, r2
 80027ce:	7a9b      	ldrb	r3, [r3, #10]
 80027d0:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 80027d2:	b21a      	sxth	r2, r3
 80027d4:	7f7b      	ldrb	r3, [r7, #29]
 80027d6:	330b      	adds	r3, #11
 80027d8:	6879      	ldr	r1, [r7, #4]
 80027da:	440b      	add	r3, r1
 80027dc:	7a9b      	ldrb	r3, [r3, #10]
 80027de:	b21b      	sxth	r3, r3
 80027e0:	4313      	orrs	r3, r2
 80027e2:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80027e8:	7f7b      	ldrb	r3, [r7, #29]
 80027ea:	330e      	adds	r3, #14
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	4413      	add	r3, r2
 80027f0:	7a9b      	ldrb	r3, [r3, #10]
 80027f2:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	7f7b      	ldrb	r3, [r7, #29]
 80027f8:	330f      	adds	r3, #15
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	440b      	add	r3, r1
 80027fe:	7a9b      	ldrb	r3, [r3, #10]
 8002800:	b21b      	sxth	r3, r3
 8002802:	4313      	orrs	r3, r2
 8002804:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 800280a:	7f7b      	ldrb	r3, [r7, #29]
 800280c:	3310      	adds	r3, #16
 800280e:	687a      	ldr	r2, [r7, #4]
 8002810:	4413      	add	r3, r2
 8002812:	7a9b      	ldrb	r3, [r3, #10]
 8002814:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	021b      	lsls	r3, r3, #8
 800281a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 800281c:	7f7b      	ldrb	r3, [r7, #29]
 800281e:	3311      	adds	r3, #17
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	4413      	add	r3, r2
 8002824:	7a9b      	ldrb	r3, [r3, #10]
 8002826:	461a      	mov	r2, r3
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	4313      	orrs	r3, r2
 800282c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 8002834:	7f7b      	ldrb	r3, [r7, #29]
 8002836:	3312      	adds	r3, #18
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	4413      	add	r3, r2
 800283c:	7a9b      	ldrb	r3, [r3, #10]
 800283e:	461a      	mov	r2, r3
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	021b      	lsls	r3, r3, #8
 800284a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 800284c:	7f7b      	ldrb	r3, [r7, #29]
 800284e:	3313      	adds	r3, #19
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	4413      	add	r3, r2
 8002854:	7a9b      	ldrb	r3, [r3, #10]
 8002856:	461a      	mov	r2, r3
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8002864:	7f7b      	ldrb	r3, [r7, #29]
 8002866:	3314      	adds	r3, #20
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	4413      	add	r3, r2
 800286c:	7a9b      	ldrb	r3, [r3, #10]
 800286e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	021b      	lsls	r3, r3, #8
 8002874:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 8002876:	7f7b      	ldrb	r3, [r7, #29]
 8002878:	3315      	adds	r3, #21
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	4413      	add	r3, r2
 800287e:	7a9b      	ldrb	r3, [r3, #10]
 8002880:	461a      	mov	r2, r3
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	021b      	lsls	r3, r3, #8
 800288c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 800288e:	7f7b      	ldrb	r3, [r7, #29]
 8002890:	3316      	adds	r3, #22
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	7a9b      	ldrb	r3, [r3, #10]
 8002898:	461a      	mov	r2, r3
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 80028a6:	7f7b      	ldrb	r3, [r7, #29]
 80028a8:	3317      	adds	r3, #23
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	7a9b      	ldrb	r3, [r3, #10]
 80028b0:	461a      	mov	r2, r3
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	615a      	str	r2, [r3, #20]
		}
	}

	// set up next DMA
	hxb->nextPackageLength = 6;		// header length
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2206      	movs	r2, #6
 80028c6:	725a      	strb	r2, [r3, #9]
	hxb->nextPackageID = 0x00;		// the next one is header
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f103 010a 	add.w	r1, r3, #10
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7a5b      	ldrb	r3, [r3, #9]
 80028dc:	b29b      	uxth	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	f004 fa0a 	bl	8006cf8 <HAL_UART_Receive_DMA>
}
 80028e4:	bf00      	nop
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000bac 	.word	0x20000bac

080028f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80028f6:	f001 fa75 	bl	8003de4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028fa:	f000 f89f 	bl	8002a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028fe:	f000 fc99 	bl	8003234 <MX_GPIO_Init>
  MX_DMA_Init();
 8002902:	f000 fc71 	bl	80031e8 <MX_DMA_Init>
  MX_I2C1_Init();
 8002906:	f000 f8df 	bl	8002ac8 <MX_I2C1_Init>
  MX_TIM1_Init();
 800290a:	f000 f90b 	bl	8002b24 <MX_TIM1_Init>
  MX_TIM2_Init();
 800290e:	f000 f9cd 	bl	8002cac <MX_TIM2_Init>
  MX_TIM3_Init();
 8002912:	f000 fa1f 	bl	8002d54 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002916:	f000 fa71 	bl	8002dfc <MX_TIM4_Init>
  MX_TIM5_Init();
 800291a:	f000 fac3 	bl	8002ea4 <MX_TIM5_Init>
  MX_TIM8_Init();
 800291e:	f000 fb4b 	bl	8002fb8 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8002922:	f000 fc0d 	bl	8003140 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002926:	f000 fc35 	bl	8003194 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 800292a:	f000 fb0f 	bl	8002f4c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
    //Motor init
	HUAN_MOTOR1_Init();
 800292e:	f000 fcd7 	bl	80032e0 <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 8002932:	f000 fd05 	bl	8003340 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 8002936:	f000 fd33 	bl	80033a0 <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 800293a:	f000 fd61 	bl	8003400 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 800293e:	f000 fd8f 	bl	8003460 <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 8002942:	f000 fd9b 	bl	800347c <HUAN_ZIGBEE_Init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer after data stables
	HAL_Delay(20);
 8002946:	2014      	movs	r0, #20
 8002948:	f001 faae 	bl	8003ea8 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 800294c:	4830      	ldr	r0, [pc, #192]	; (8002a10 <main+0x120>)
 800294e:	f002 ffbb 	bl	80058c8 <HAL_TIM_Base_Start_IT>
	initangleZ = himu.theta[2];
 8002952:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <main+0x124>)
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	4a30      	ldr	r2, [pc, #192]	; (8002a18 <main+0x128>)
 8002958:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	myCoord.x = 0;
 800295a:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <main+0x12c>)
 800295c:	2200      	movs	r2, #0
 800295e:	801a      	strh	r2, [r3, #0]
	myCoord.y = 0;
 8002960:	4b2e      	ldr	r3, [pc, #184]	; (8002a1c <main+0x12c>)
 8002962:	2200      	movs	r2, #0
 8002964:	805a      	strh	r2, [r3, #2]
	Coordinate goal;
	goal.x = 10;
 8002966:	230a      	movs	r3, #10
 8002968:	803b      	strh	r3, [r7, #0]
	goal.y = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	807b      	strh	r3, [r7, #2]
	uint8_t isArrived = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	71fb      	strb	r3, [r7, #7]
    while (1) {

		HAL_Delay(1000);
 8002972:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002976:	f001 fa97 	bl	8003ea8 <HAL_Delay>
		chao_move_angle(180, 1000);
 800297a:	4929      	ldr	r1, [pc, #164]	; (8002a20 <main+0x130>)
 800297c:	4829      	ldr	r0, [pc, #164]	; (8002a24 <main+0x134>)
 800297e:	f7fe fc17 	bl	80011b0 <chao_move_angle>

		HAL_Delay(1000);
 8002982:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002986:	f001 fa8f 	bl	8003ea8 <HAL_Delay>
		chao_move_angle(270, 1000);
 800298a:	4925      	ldr	r1, [pc, #148]	; (8002a20 <main+0x130>)
 800298c:	4826      	ldr	r0, [pc, #152]	; (8002a28 <main+0x138>)
 800298e:	f7fe fc0f 	bl	80011b0 <chao_move_angle>

		HAL_Delay(1000);
 8002992:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002996:	f001 fa87 	bl	8003ea8 <HAL_Delay>
		chao_move_angle(0, 1000);
 800299a:	4921      	ldr	r1, [pc, #132]	; (8002a20 <main+0x130>)
 800299c:	f04f 0000 	mov.w	r0, #0
 80029a0:	f7fe fc06 	bl	80011b0 <chao_move_angle>

		HAL_Delay(1000);
 80029a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029a8:	f001 fa7e 	bl	8003ea8 <HAL_Delay>
		chao_move_angle(90, 1000);
 80029ac:	491c      	ldr	r1, [pc, #112]	; (8002a20 <main+0x130>)
 80029ae:	481f      	ldr	r0, [pc, #124]	; (8002a2c <main+0x13c>)
 80029b0:	f7fe fbfe 	bl	80011b0 <chao_move_angle>

//    	isArrived = GotoDestination(goal); //暂时不用管，还没有调通
//    	if (isArrived == 1) break;

		while(!gameStatus){		// if the game is not running
 80029b4:	bf00      	nop
 80029b6:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <main+0x140>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10a      	bne.n	80029d4 <main+0xe4>
	    	LED1_ON;
 80029be:	2201      	movs	r2, #1
 80029c0:	2101      	movs	r1, #1
 80029c2:	481c      	ldr	r0, [pc, #112]	; (8002a34 <main+0x144>)
 80029c4:	f002 f9b8 	bl	8004d38 <HAL_GPIO_WritePin>
			break;
 80029c8:	bf00      	nop
		}

		while (gameStage == 0) {		// pre-match
 80029ca:	e003      	b.n	80029d4 <main+0xe4>
			if (!gameStatus)	// if the game stopped
 80029cc:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <main+0x140>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d004      	beq.n	80029de <main+0xee>
		while (gameStage == 0) {		// pre-match
 80029d4:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <main+0x148>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f7      	beq.n	80029cc <main+0xdc>
 80029dc:	e005      	b.n	80029ea <main+0xfa>
				break;
 80029de:	bf00      	nop
			// do some initialization

			// find angle offset
		}

		while (gameStage == 1){			// first-half
 80029e0:	e003      	b.n	80029ea <main+0xfa>
			if (!gameStatus)	// if the game stopped
 80029e2:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <main+0x140>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d004      	beq.n	80029f4 <main+0x104>
		while (gameStage == 1){			// first-half
 80029ea:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <main+0x148>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d0f7      	beq.n	80029e2 <main+0xf2>
 80029f2:	e005      	b.n	8002a00 <main+0x110>
				break;
 80029f4:	bf00      	nop

		}

		while (gameStage == 2){			// second-half
 80029f6:	e003      	b.n	8002a00 <main+0x110>
			if (!gameStatus)	// if the game stopped
 80029f8:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <main+0x140>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d004      	beq.n	8002a0a <main+0x11a>
		while (gameStage == 2){			// second-half
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <main+0x148>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d0f7      	beq.n	80029f8 <main+0x108>
 8002a08:	e7b3      	b.n	8002972 <main+0x82>
				break;
 8002a0a:	bf00      	nop
		HAL_Delay(1000);
 8002a0c:	e7b1      	b.n	8002972 <main+0x82>
 8002a0e:	bf00      	nop
 8002a10:	200007ec 	.word	0x200007ec
 8002a14:	20000a7c 	.word	0x20000a7c
 8002a18:	20000bc4 	.word	0x20000bc4
 8002a1c:	20000bc0 	.word	0x20000bc0
 8002a20:	447a0000 	.word	0x447a0000
 8002a24:	43340000 	.word	0x43340000
 8002a28:	43870000 	.word	0x43870000
 8002a2c:	42b40000 	.word	0x42b40000
 8002a30:	20000b61 	.word	0x20000b61
 8002a34:	40010c00 	.word	0x40010c00
 8002a38:	20000b60 	.word	0x20000b60

08002a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b090      	sub	sp, #64	; 0x40
 8002a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a42:	f107 0318 	add.w	r3, r7, #24
 8002a46:	2228      	movs	r2, #40	; 0x28
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f004 ff30 	bl	80078b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	605a      	str	r2, [r3, #4]
 8002a58:	609a      	str	r2, [r3, #8]
 8002a5a:	60da      	str	r2, [r3, #12]
 8002a5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8002a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a72:	2302      	movs	r3, #2
 8002a74:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a7a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a7c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a82:	f107 0318 	add.w	r3, r7, #24
 8002a86:	4618      	mov	r0, r3
 8002a88:	f002 fab2 	bl	8004ff0 <HAL_RCC_OscConfig>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8002a92:	f000 fd39 	bl	8003508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a96:	230f      	movs	r3, #15
 8002a98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	2102      	movs	r1, #2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 fd1f 	bl	80054f4 <HAL_RCC_ClockConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002abc:	f000 fd24 	bl	8003508 <Error_Handler>
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	3740      	adds	r7, #64	; 0x40
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <MX_I2C1_Init+0x50>)
 8002ace:	4a13      	ldr	r2, [pc, #76]	; (8002b1c <MX_I2C1_Init+0x54>)
 8002ad0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <MX_I2C1_Init+0x50>)
 8002ad4:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <MX_I2C1_Init+0x58>)
 8002ad6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <MX_I2C1_Init+0x50>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <MX_I2C1_Init+0x50>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <MX_I2C1_Init+0x50>)
 8002ae6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002aea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aec:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <MX_I2C1_Init+0x50>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <MX_I2C1_Init+0x50>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <MX_I2C1_Init+0x50>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <MX_I2C1_Init+0x50>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b04:	4804      	ldr	r0, [pc, #16]	; (8002b18 <MX_I2C1_Init+0x50>)
 8002b06:	f002 f92f 	bl	8004d68 <HAL_I2C_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b10:	f000 fcfa 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000630 	.word	0x20000630
 8002b1c:	40005400 	.word	0x40005400
 8002b20:	000186a0 	.word	0x000186a0

08002b24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b096      	sub	sp, #88	; 0x58
 8002b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002b2e:	2200      	movs	r2, #0
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	609a      	str	r2, [r3, #8]
 8002b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	60da      	str	r2, [r3, #12]
 8002b50:	611a      	str	r2, [r3, #16]
 8002b52:	615a      	str	r2, [r3, #20]
 8002b54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	2220      	movs	r2, #32
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 fea7 	bl	80078b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b62:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002b64:	4a50      	ldr	r2, [pc, #320]	; (8002ca8 <MX_TIM1_Init+0x184>)
 8002b66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b68:	4b4e      	ldr	r3, [pc, #312]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6e:	4b4d      	ldr	r3, [pc, #308]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b74:	4b4b      	ldr	r3, [pc, #300]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002b76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7c:	4b49      	ldr	r3, [pc, #292]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b82:	4b48      	ldr	r3, [pc, #288]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b88:	4b46      	ldr	r3, [pc, #280]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b8e:	4845      	ldr	r0, [pc, #276]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002b90:	f002 fe4a 	bl	8005828 <HAL_TIM_Base_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002b9a:	f000 fcb5 	bl	8003508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ba4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002ba8:	4619      	mov	r1, r3
 8002baa:	483e      	ldr	r0, [pc, #248]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002bac:	f003 faf4 	bl	8006198 <HAL_TIM_ConfigClockSource>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002bb6:	f000 fca7 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bba:	483a      	ldr	r0, [pc, #232]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002bbc:	f002 fee4 	bl	8005988 <HAL_TIM_PWM_Init>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002bc6:	f000 fc9f 	bl	8003508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4832      	ldr	r0, [pc, #200]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002bda:	f003 feaf 	bl	800693c <HAL_TIMEx_MasterConfigSynchronization>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002be4:	f000 fc90 	bl	8003508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002be8:	2360      	movs	r3, #96	; 0x60
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c00:	2300      	movs	r3, #0
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c08:	2200      	movs	r2, #0
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4825      	ldr	r0, [pc, #148]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002c0e:	f003 fa05 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002c18:	f000 fc76 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c20:	2204      	movs	r2, #4
 8002c22:	4619      	mov	r1, r3
 8002c24:	481f      	ldr	r0, [pc, #124]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002c26:	f003 f9f9 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002c30:	f000 fc6a 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c38:	2208      	movs	r2, #8
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4819      	ldr	r0, [pc, #100]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002c3e:	f003 f9ed 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002c48:	f000 fc5e 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c50:	220c      	movs	r2, #12
 8002c52:	4619      	mov	r1, r3
 8002c54:	4813      	ldr	r0, [pc, #76]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002c56:	f003 f9e1 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002c60:	f000 fc52 	bl	8003508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c64:	2300      	movs	r3, #0
 8002c66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	4619      	mov	r1, r3
 8002c86:	4807      	ldr	r0, [pc, #28]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002c88:	f003 fec4 	bl	8006a14 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002c92:	f000 fc39 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c96:	4803      	ldr	r0, [pc, #12]	; (8002ca4 <MX_TIM1_Init+0x180>)
 8002c98:	f000 fdfc 	bl	8003894 <HAL_TIM_MspPostInit>

}
 8002c9c:	bf00      	nop
 8002c9e:	3758      	adds	r7, #88	; 0x58
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000684 	.word	0x20000684
 8002ca8:	40012c00 	.word	0x40012c00

08002cac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08c      	sub	sp, #48	; 0x30
 8002cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cb2:	f107 030c 	add.w	r3, r7, #12
 8002cb6:	2224      	movs	r2, #36	; 0x24
 8002cb8:	2100      	movs	r1, #0
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f004 fdf8 	bl	80078b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
 8002cc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002cc8:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <MX_TIM2_Init+0xa4>)
 8002cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002cce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002cd0:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <MX_TIM2_Init+0xa4>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cd6:	4b1e      	ldr	r3, [pc, #120]	; (8002d50 <MX_TIM2_Init+0xa4>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <MX_TIM2_Init+0xa4>)
 8002cde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ce2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	; (8002d50 <MX_TIM2_Init+0xa4>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cea:	4b19      	ldr	r3, [pc, #100]	; (8002d50 <MX_TIM2_Init+0xa4>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d04:	2300      	movs	r3, #0
 8002d06:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002d14:	f107 030c 	add.w	r3, r7, #12
 8002d18:	4619      	mov	r1, r3
 8002d1a:	480d      	ldr	r0, [pc, #52]	; (8002d50 <MX_TIM2_Init+0xa4>)
 8002d1c:	f002 ff46 	bl	8005bac <HAL_TIM_Encoder_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002d26:	f000 fbef 	bl	8003508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d32:	1d3b      	adds	r3, r7, #4
 8002d34:	4619      	mov	r1, r3
 8002d36:	4806      	ldr	r0, [pc, #24]	; (8002d50 <MX_TIM2_Init+0xa4>)
 8002d38:	f003 fe00 	bl	800693c <HAL_TIMEx_MasterConfigSynchronization>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002d42:	f000 fbe1 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d46:	bf00      	nop
 8002d48:	3730      	adds	r7, #48	; 0x30
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	200006cc 	.word	0x200006cc

08002d54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08c      	sub	sp, #48	; 0x30
 8002d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	2224      	movs	r2, #36	; 0x24
 8002d60:	2100      	movs	r1, #0
 8002d62:	4618      	mov	r0, r3
 8002d64:	f004 fda4 	bl	80078b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d68:	1d3b      	adds	r3, r7, #4
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002d70:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <MX_TIM3_Init+0xa0>)
 8002d72:	4a21      	ldr	r2, [pc, #132]	; (8002df8 <MX_TIM3_Init+0xa4>)
 8002d74:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002d76:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <MX_TIM3_Init+0xa0>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d7c:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <MX_TIM3_Init+0xa0>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002d82:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <MX_TIM3_Init+0xa0>)
 8002d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d88:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d8a:	4b1a      	ldr	r3, [pc, #104]	; (8002df4 <MX_TIM3_Init+0xa0>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d90:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <MX_TIM3_Init+0xa0>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002d96:	2301      	movs	r3, #1
 8002d98:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002daa:	2300      	movs	r3, #0
 8002dac:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002dae:	2301      	movs	r3, #1
 8002db0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002db2:	2300      	movs	r3, #0
 8002db4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002dba:	f107 030c 	add.w	r3, r7, #12
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480c      	ldr	r0, [pc, #48]	; (8002df4 <MX_TIM3_Init+0xa0>)
 8002dc2:	f002 fef3 	bl	8005bac <HAL_TIM_Encoder_Init>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002dcc:	f000 fb9c 	bl	8003508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4805      	ldr	r0, [pc, #20]	; (8002df4 <MX_TIM3_Init+0xa0>)
 8002dde:	f003 fdad 	bl	800693c <HAL_TIMEx_MasterConfigSynchronization>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002de8:	f000 fb8e 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002dec:	bf00      	nop
 8002dee:	3730      	adds	r7, #48	; 0x30
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000714 	.word	0x20000714
 8002df8:	40000400 	.word	0x40000400

08002dfc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08c      	sub	sp, #48	; 0x30
 8002e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002e02:	f107 030c 	add.w	r3, r7, #12
 8002e06:	2224      	movs	r2, #36	; 0x24
 8002e08:	2100      	movs	r1, #0
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 fd50 	bl	80078b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e10:	1d3b      	adds	r3, r7, #4
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002e18:	4b20      	ldr	r3, [pc, #128]	; (8002e9c <MX_TIM4_Init+0xa0>)
 8002e1a:	4a21      	ldr	r2, [pc, #132]	; (8002ea0 <MX_TIM4_Init+0xa4>)
 8002e1c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002e1e:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <MX_TIM4_Init+0xa0>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e24:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <MX_TIM4_Init+0xa0>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002e2a:	4b1c      	ldr	r3, [pc, #112]	; (8002e9c <MX_TIM4_Init+0xa0>)
 8002e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e30:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e32:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <MX_TIM4_Init+0xa0>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e38:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <MX_TIM4_Init+0xa0>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002e46:	2301      	movs	r3, #1
 8002e48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002e52:	2300      	movs	r3, #0
 8002e54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002e56:	2301      	movs	r3, #1
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002e62:	f107 030c 	add.w	r3, r7, #12
 8002e66:	4619      	mov	r1, r3
 8002e68:	480c      	ldr	r0, [pc, #48]	; (8002e9c <MX_TIM4_Init+0xa0>)
 8002e6a:	f002 fe9f 	bl	8005bac <HAL_TIM_Encoder_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002e74:	f000 fb48 	bl	8003508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e80:	1d3b      	adds	r3, r7, #4
 8002e82:	4619      	mov	r1, r3
 8002e84:	4805      	ldr	r0, [pc, #20]	; (8002e9c <MX_TIM4_Init+0xa0>)
 8002e86:	f003 fd59 	bl	800693c <HAL_TIMEx_MasterConfigSynchronization>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002e90:	f000 fb3a 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002e94:	bf00      	nop
 8002e96:	3730      	adds	r7, #48	; 0x30
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	2000075c 	.word	0x2000075c
 8002ea0:	40000800 	.word	0x40000800

08002ea4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08c      	sub	sp, #48	; 0x30
 8002ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002eaa:	f107 030c 	add.w	r3, r7, #12
 8002eae:	2224      	movs	r2, #36	; 0x24
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f004 fcfc 	bl	80078b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ec0:	4b20      	ldr	r3, [pc, #128]	; (8002f44 <MX_TIM5_Init+0xa0>)
 8002ec2:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <MX_TIM5_Init+0xa4>)
 8002ec4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002ec6:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <MX_TIM5_Init+0xa0>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <MX_TIM5_Init+0xa0>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <MX_TIM5_Init+0xa0>)
 8002ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ed8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eda:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <MX_TIM5_Init+0xa0>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ee0:	4b18      	ldr	r3, [pc, #96]	; (8002f44 <MX_TIM5_Init+0xa0>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002efa:	2300      	movs	r3, #0
 8002efc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002efe:	2301      	movs	r3, #1
 8002f00:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002f02:	2300      	movs	r3, #0
 8002f04:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002f0a:	f107 030c 	add.w	r3, r7, #12
 8002f0e:	4619      	mov	r1, r3
 8002f10:	480c      	ldr	r0, [pc, #48]	; (8002f44 <MX_TIM5_Init+0xa0>)
 8002f12:	f002 fe4b 	bl	8005bac <HAL_TIM_Encoder_Init>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002f1c:	f000 faf4 	bl	8003508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f20:	2300      	movs	r3, #0
 8002f22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f28:	1d3b      	adds	r3, r7, #4
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4805      	ldr	r0, [pc, #20]	; (8002f44 <MX_TIM5_Init+0xa0>)
 8002f2e:	f003 fd05 	bl	800693c <HAL_TIMEx_MasterConfigSynchronization>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002f38:	f000 fae6 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002f3c:	bf00      	nop
 8002f3e:	3730      	adds	r7, #48	; 0x30
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	200007a4 	.word	0x200007a4
 8002f48:	40000c00 	.word	0x40000c00

08002f4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f52:	463b      	mov	r3, r7
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <MX_TIM6_Init+0x64>)
 8002f5c:	4a15      	ldr	r2, [pc, #84]	; (8002fb4 <MX_TIM6_Init+0x68>)
 8002f5e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <MX_TIM6_Init+0x64>)
 8002f62:	2247      	movs	r2, #71	; 0x47
 8002f64:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f66:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <MX_TIM6_Init+0x64>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 8002f6c:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <MX_TIM6_Init+0x64>)
 8002f6e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002f72:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <MX_TIM6_Init+0x64>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f7a:	480d      	ldr	r0, [pc, #52]	; (8002fb0 <MX_TIM6_Init+0x64>)
 8002f7c:	f002 fc54 	bl	8005828 <HAL_TIM_Base_Init>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002f86:	f000 fabf 	bl	8003508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f92:	463b      	mov	r3, r7
 8002f94:	4619      	mov	r1, r3
 8002f96:	4806      	ldr	r0, [pc, #24]	; (8002fb0 <MX_TIM6_Init+0x64>)
 8002f98:	f003 fcd0 	bl	800693c <HAL_TIMEx_MasterConfigSynchronization>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002fa2:	f000 fab1 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	200007ec 	.word	0x200007ec
 8002fb4:	40001000 	.word	0x40001000

08002fb8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b096      	sub	sp, #88	; 0x58
 8002fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002fbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002fcc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	609a      	str	r2, [r3, #8]
 8002fe2:	60da      	str	r2, [r3, #12]
 8002fe4:	611a      	str	r2, [r3, #16]
 8002fe6:	615a      	str	r2, [r3, #20]
 8002fe8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002fea:	1d3b      	adds	r3, r7, #4
 8002fec:	2220      	movs	r2, #32
 8002fee:	2100      	movs	r1, #0
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f004 fc5d 	bl	80078b0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002ff6:	4b50      	ldr	r3, [pc, #320]	; (8003138 <MX_TIM8_Init+0x180>)
 8002ff8:	4a50      	ldr	r2, [pc, #320]	; (800313c <MX_TIM8_Init+0x184>)
 8002ffa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002ffc:	4b4e      	ldr	r3, [pc, #312]	; (8003138 <MX_TIM8_Init+0x180>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003002:	4b4d      	ldr	r3, [pc, #308]	; (8003138 <MX_TIM8_Init+0x180>)
 8003004:	2200      	movs	r2, #0
 8003006:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003008:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <MX_TIM8_Init+0x180>)
 800300a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800300e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003010:	4b49      	ldr	r3, [pc, #292]	; (8003138 <MX_TIM8_Init+0x180>)
 8003012:	2200      	movs	r2, #0
 8003014:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003016:	4b48      	ldr	r3, [pc, #288]	; (8003138 <MX_TIM8_Init+0x180>)
 8003018:	2200      	movs	r2, #0
 800301a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800301c:	4b46      	ldr	r3, [pc, #280]	; (8003138 <MX_TIM8_Init+0x180>)
 800301e:	2200      	movs	r2, #0
 8003020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003022:	4845      	ldr	r0, [pc, #276]	; (8003138 <MX_TIM8_Init+0x180>)
 8003024:	f002 fc00 	bl	8005828 <HAL_TIM_Base_Init>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800302e:	f000 fa6b 	bl	8003508 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003036:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003038:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800303c:	4619      	mov	r1, r3
 800303e:	483e      	ldr	r0, [pc, #248]	; (8003138 <MX_TIM8_Init+0x180>)
 8003040:	f003 f8aa 	bl	8006198 <HAL_TIM_ConfigClockSource>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800304a:	f000 fa5d 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800304e:	483a      	ldr	r0, [pc, #232]	; (8003138 <MX_TIM8_Init+0x180>)
 8003050:	f002 fc9a 	bl	8005988 <HAL_TIM_PWM_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800305a:	f000 fa55 	bl	8003508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003062:	2300      	movs	r3, #0
 8003064:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003066:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800306a:	4619      	mov	r1, r3
 800306c:	4832      	ldr	r0, [pc, #200]	; (8003138 <MX_TIM8_Init+0x180>)
 800306e:	f003 fc65 	bl	800693c <HAL_TIMEx_MasterConfigSynchronization>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003078:	f000 fa46 	bl	8003508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800307c:	2360      	movs	r3, #96	; 0x60
 800307e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003084:	2300      	movs	r3, #0
 8003086:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003088:	2300      	movs	r3, #0
 800308a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800308c:	2300      	movs	r3, #0
 800308e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003090:	2300      	movs	r3, #0
 8003092:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003094:	2300      	movs	r3, #0
 8003096:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800309c:	2200      	movs	r2, #0
 800309e:	4619      	mov	r1, r3
 80030a0:	4825      	ldr	r0, [pc, #148]	; (8003138 <MX_TIM8_Init+0x180>)
 80030a2:	f002 ffbb 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80030ac:	f000 fa2c 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80030b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030b4:	2204      	movs	r2, #4
 80030b6:	4619      	mov	r1, r3
 80030b8:	481f      	ldr	r0, [pc, #124]	; (8003138 <MX_TIM8_Init+0x180>)
 80030ba:	f002 ffaf 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80030c4:	f000 fa20 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80030c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030cc:	2208      	movs	r2, #8
 80030ce:	4619      	mov	r1, r3
 80030d0:	4819      	ldr	r0, [pc, #100]	; (8003138 <MX_TIM8_Init+0x180>)
 80030d2:	f002 ffa3 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d001      	beq.n	80030e0 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80030dc:	f000 fa14 	bl	8003508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80030e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030e4:	220c      	movs	r2, #12
 80030e6:	4619      	mov	r1, r3
 80030e8:	4813      	ldr	r0, [pc, #76]	; (8003138 <MX_TIM8_Init+0x180>)
 80030ea:	f002 ff97 	bl	800601c <HAL_TIM_PWM_ConfigChannel>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80030f4:	f000 fa08 	bl	8003508 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003100:	2300      	movs	r3, #0
 8003102:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003104:	2300      	movs	r3, #0
 8003106:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800310c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003110:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003112:	2300      	movs	r3, #0
 8003114:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	4619      	mov	r1, r3
 800311a:	4807      	ldr	r0, [pc, #28]	; (8003138 <MX_TIM8_Init+0x180>)
 800311c:	f003 fc7a 	bl	8006a14 <HAL_TIMEx_ConfigBreakDeadTime>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8003126:	f000 f9ef 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800312a:	4803      	ldr	r0, [pc, #12]	; (8003138 <MX_TIM8_Init+0x180>)
 800312c:	f000 fbb2 	bl	8003894 <HAL_TIM_MspPostInit>

}
 8003130:	bf00      	nop
 8003132:	3758      	adds	r7, #88	; 0x58
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	20000834 	.word	0x20000834
 800313c:	40013400 	.word	0x40013400

08003140 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <MX_USART2_UART_Init+0x4c>)
 8003146:	4a12      	ldr	r2, [pc, #72]	; (8003190 <MX_USART2_UART_Init+0x50>)
 8003148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800314a:	4b10      	ldr	r3, [pc, #64]	; (800318c <MX_USART2_UART_Init+0x4c>)
 800314c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003152:	4b0e      	ldr	r3, [pc, #56]	; (800318c <MX_USART2_UART_Init+0x4c>)
 8003154:	2200      	movs	r2, #0
 8003156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003158:	4b0c      	ldr	r3, [pc, #48]	; (800318c <MX_USART2_UART_Init+0x4c>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <MX_USART2_UART_Init+0x4c>)
 8003160:	2200      	movs	r2, #0
 8003162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003164:	4b09      	ldr	r3, [pc, #36]	; (800318c <MX_USART2_UART_Init+0x4c>)
 8003166:	220c      	movs	r2, #12
 8003168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800316a:	4b08      	ldr	r3, [pc, #32]	; (800318c <MX_USART2_UART_Init+0x4c>)
 800316c:	2200      	movs	r2, #0
 800316e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003170:	4b06      	ldr	r3, [pc, #24]	; (800318c <MX_USART2_UART_Init+0x4c>)
 8003172:	2200      	movs	r2, #0
 8003174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003176:	4805      	ldr	r0, [pc, #20]	; (800318c <MX_USART2_UART_Init+0x4c>)
 8003178:	f003 fcaf 	bl	8006ada <HAL_UART_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003182:	f000 f9c1 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	2000087c 	.word	0x2000087c
 8003190:	40004400 	.word	0x40004400

08003194 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <MX_USART3_UART_Init+0x4c>)
 800319a:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <MX_USART3_UART_Init+0x50>)
 800319c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800319e:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <MX_USART3_UART_Init+0x4c>)
 80031a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <MX_USART3_UART_Init+0x4c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <MX_USART3_UART_Init+0x4c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80031b2:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <MX_USART3_UART_Init+0x4c>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80031b8:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <MX_USART3_UART_Init+0x4c>)
 80031ba:	220c      	movs	r2, #12
 80031bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <MX_USART3_UART_Init+0x4c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80031c4:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <MX_USART3_UART_Init+0x4c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80031ca:	4805      	ldr	r0, [pc, #20]	; (80031e0 <MX_USART3_UART_Init+0x4c>)
 80031cc:	f003 fc85 	bl	8006ada <HAL_UART_Init>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80031d6:	f000 f997 	bl	8003508 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	200008c0 	.word	0x200008c0
 80031e4:	40004800 	.word	0x40004800

080031e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <MX_DMA_Init+0x48>)
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <MX_DMA_Init+0x48>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6153      	str	r3, [r2, #20]
 80031fa:	4b0d      	ldr	r3, [pc, #52]	; (8003230 <MX_DMA_Init+0x48>)
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	607b      	str	r3, [r7, #4]
 8003204:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8003206:	2200      	movs	r2, #0
 8003208:	2102      	movs	r1, #2
 800320a:	200d      	movs	r0, #13
 800320c:	f000 ff47 	bl	800409e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003210:	200d      	movs	r0, #13
 8003212:	f000 ff60 	bl	80040d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 8003216:	2200      	movs	r2, #0
 8003218:	2102      	movs	r1, #2
 800321a:	2010      	movs	r0, #16
 800321c:	f000 ff3f 	bl	800409e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003220:	2010      	movs	r0, #16
 8003222:	f000 ff58 	bl	80040d6 <HAL_NVIC_EnableIRQ>

}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	40021000 	.word	0x40021000

08003234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b088      	sub	sp, #32
 8003238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800323a:	f107 0310 	add.w	r3, r7, #16
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
 8003242:	605a      	str	r2, [r3, #4]
 8003244:	609a      	str	r2, [r3, #8]
 8003246:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003248:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <MX_GPIO_Init+0xa4>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <MX_GPIO_Init+0xa4>)
 800324e:	f043 0320 	orr.w	r3, r3, #32
 8003252:	6193      	str	r3, [r2, #24]
 8003254:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <MX_GPIO_Init+0xa4>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	f003 0320 	and.w	r3, r3, #32
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003260:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <MX_GPIO_Init+0xa4>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <MX_GPIO_Init+0xa4>)
 8003266:	f043 0304 	orr.w	r3, r3, #4
 800326a:	6193      	str	r3, [r2, #24]
 800326c:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <MX_GPIO_Init+0xa4>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	60bb      	str	r3, [r7, #8]
 8003276:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003278:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <MX_GPIO_Init+0xa4>)
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	4a16      	ldr	r2, [pc, #88]	; (80032d8 <MX_GPIO_Init+0xa4>)
 800327e:	f043 0308 	orr.w	r3, r3, #8
 8003282:	6193      	str	r3, [r2, #24]
 8003284:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <MX_GPIO_Init+0xa4>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	607b      	str	r3, [r7, #4]
 800328e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <MX_GPIO_Init+0xa4>)
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	4a10      	ldr	r2, [pc, #64]	; (80032d8 <MX_GPIO_Init+0xa4>)
 8003296:	f043 0310 	orr.w	r3, r3, #16
 800329a:	6193      	str	r3, [r2, #24]
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <MX_GPIO_Init+0xa4>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	603b      	str	r3, [r7, #0]
 80032a6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80032a8:	2200      	movs	r2, #0
 80032aa:	2107      	movs	r1, #7
 80032ac:	480b      	ldr	r0, [pc, #44]	; (80032dc <MX_GPIO_Init+0xa8>)
 80032ae:	f001 fd43 	bl	8004d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80032b2:	2307      	movs	r3, #7
 80032b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b6:	2301      	movs	r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032be:	2302      	movs	r3, #2
 80032c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c2:	f107 0310 	add.w	r3, r7, #16
 80032c6:	4619      	mov	r1, r3
 80032c8:	4804      	ldr	r0, [pc, #16]	; (80032dc <MX_GPIO_Init+0xa8>)
 80032ca:	f001 fba1 	bl	8004a10 <HAL_GPIO_Init>

}
 80032ce:	bf00      	nop
 80032d0:	3720      	adds	r7, #32
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40010c00 	.word	0x40010c00

080032e0 <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HUAN_MOTOR1_Init+0x44>)
 80032e6:	4a10      	ldr	r2, [pc, #64]	; (8003328 <HUAN_MOTOR1_Init+0x48>)
 80032e8:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 80032ea:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <HUAN_MOTOR1_Init+0x44>)
 80032ec:	4a0f      	ldr	r2, [pc, #60]	; (800332c <HUAN_MOTOR1_Init+0x4c>)
 80032ee:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <HUAN_MOTOR1_Init+0x44>)
 80032f2:	4a0f      	ldr	r2, [pc, #60]	; (8003330 <HUAN_MOTOR1_Init+0x50>)
 80032f4:	605a      	str	r2, [r3, #4]
//	cmotor_lf.pos_channel = TIM_CHANNEL_4;
	cmotor_lf.pos_channel = TIM_CHANNEL_3;
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HUAN_MOTOR1_Init+0x44>)
 80032f8:	2208      	movs	r2, #8
 80032fa:	60da      	str	r2, [r3, #12]
	cmotor_lf.negTimer = &htim1;
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HUAN_MOTOR1_Init+0x44>)
 80032fe:	4a0c      	ldr	r2, [pc, #48]	; (8003330 <HUAN_MOTOR1_Init+0x50>)
 8003300:	609a      	str	r2, [r3, #8]
//	cmotor_lf.neg_channel = TIM_CHANNEL_3;
	cmotor_lf.neg_channel = TIM_CHANNEL_4;
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HUAN_MOTOR1_Init+0x44>)
 8003304:	220c      	movs	r2, #12
 8003306:	611a      	str	r2, [r3, #16]
	cmotor_lf.kp = 0.0003;
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HUAN_MOTOR1_Init+0x44>)
 800330a:	4a0a      	ldr	r2, [pc, #40]	; (8003334 <HUAN_MOTOR1_Init+0x54>)
 800330c:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 800330e:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HUAN_MOTOR1_Init+0x44>)
 8003310:	4a09      	ldr	r2, [pc, #36]	; (8003338 <HUAN_MOTOR1_Init+0x58>)
 8003312:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 8003314:	4b03      	ldr	r3, [pc, #12]	; (8003324 <HUAN_MOTOR1_Init+0x44>)
 8003316:	4a09      	ldr	r2, [pc, #36]	; (800333c <HUAN_MOTOR1_Init+0x5c>)
 8003318:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 800331a:	4802      	ldr	r0, [pc, #8]	; (8003324 <HUAN_MOTOR1_Init+0x44>)
 800331c:	f7fe fbf0 	bl	8001b00 <huansic_motor_init>
}
 8003320:	bf00      	nop
 8003322:	bd80      	pop	{r7, pc}
 8003324:	2000098c 	.word	0x2000098c
 8003328:	200006cc 	.word	0x200006cc
 800332c:	3d4ccccd 	.word	0x3d4ccccd
 8003330:	20000684 	.word	0x20000684
 8003334:	399d4952 	.word	0x399d4952
 8003338:	37a7c5ac 	.word	0x37a7c5ac
 800333c:	387ba882 	.word	0x387ba882

08003340 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <HUAN_MOTOR2_Init+0x44>)
 8003346:	4a10      	ldr	r2, [pc, #64]	; (8003388 <HUAN_MOTOR2_Init+0x48>)
 8003348:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <HUAN_MOTOR2_Init+0x44>)
 800334c:	4a0f      	ldr	r2, [pc, #60]	; (800338c <HUAN_MOTOR2_Init+0x4c>)
 800334e:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <HUAN_MOTOR2_Init+0x44>)
 8003352:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <HUAN_MOTOR2_Init+0x50>)
 8003354:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <HUAN_MOTOR2_Init+0x44>)
 8003358:	2200      	movs	r2, #0
 800335a:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 800335c:	4b09      	ldr	r3, [pc, #36]	; (8003384 <HUAN_MOTOR2_Init+0x44>)
 800335e:	4a0c      	ldr	r2, [pc, #48]	; (8003390 <HUAN_MOTOR2_Init+0x50>)
 8003360:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 8003362:	4b08      	ldr	r3, [pc, #32]	; (8003384 <HUAN_MOTOR2_Init+0x44>)
 8003364:	2204      	movs	r2, #4
 8003366:	611a      	str	r2, [r3, #16]
	cmotor_rf.kp = 0.0003;
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HUAN_MOTOR2_Init+0x44>)
 800336a:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <HUAN_MOTOR2_Init+0x54>)
 800336c:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 800336e:	4b05      	ldr	r3, [pc, #20]	; (8003384 <HUAN_MOTOR2_Init+0x44>)
 8003370:	4a09      	ldr	r2, [pc, #36]	; (8003398 <HUAN_MOTOR2_Init+0x58>)
 8003372:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 8003374:	4b03      	ldr	r3, [pc, #12]	; (8003384 <HUAN_MOTOR2_Init+0x44>)
 8003376:	4a09      	ldr	r2, [pc, #36]	; (800339c <HUAN_MOTOR2_Init+0x5c>)
 8003378:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 800337a:	4802      	ldr	r0, [pc, #8]	; (8003384 <HUAN_MOTOR2_Init+0x44>)
 800337c:	f7fe fbc0 	bl	8001b00 <huansic_motor_init>
}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}
 8003384:	200009c8 	.word	0x200009c8
 8003388:	2000075c 	.word	0x2000075c
 800338c:	3d4ccccd 	.word	0x3d4ccccd
 8003390:	20000684 	.word	0x20000684
 8003394:	399d4952 	.word	0x399d4952
 8003398:	37a7c5ac 	.word	0x37a7c5ac
 800339c:	387ba882 	.word	0x387ba882

080033a0 <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 80033a4:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <HUAN_MOTOR3_Init+0x44>)
 80033a6:	4a10      	ldr	r2, [pc, #64]	; (80033e8 <HUAN_MOTOR3_Init+0x48>)
 80033a8:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 80033aa:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <HUAN_MOTOR3_Init+0x44>)
 80033ac:	4a0f      	ldr	r2, [pc, #60]	; (80033ec <HUAN_MOTOR3_Init+0x4c>)
 80033ae:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <HUAN_MOTOR3_Init+0x44>)
 80033b2:	4a0f      	ldr	r2, [pc, #60]	; (80033f0 <HUAN_MOTOR3_Init+0x50>)
 80033b4:	605a      	str	r2, [r3, #4]
//	cmotor_lb.pos_channel = TIM_CHANNEL_4;
	cmotor_lb.pos_channel = TIM_CHANNEL_3;
 80033b6:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HUAN_MOTOR3_Init+0x44>)
 80033b8:	2208      	movs	r2, #8
 80033ba:	60da      	str	r2, [r3, #12]
	cmotor_lb.negTimer = &htim8;
 80033bc:	4b09      	ldr	r3, [pc, #36]	; (80033e4 <HUAN_MOTOR3_Init+0x44>)
 80033be:	4a0c      	ldr	r2, [pc, #48]	; (80033f0 <HUAN_MOTOR3_Init+0x50>)
 80033c0:	609a      	str	r2, [r3, #8]
//	cmotor_lb.neg_channel = TIM_CHANNEL_3;
	cmotor_lb.neg_channel = TIM_CHANNEL_4;
 80033c2:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <HUAN_MOTOR3_Init+0x44>)
 80033c4:	220c      	movs	r2, #12
 80033c6:	611a      	str	r2, [r3, #16]
	cmotor_lb.kp = 0.0003;
 80033c8:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HUAN_MOTOR3_Init+0x44>)
 80033ca:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <HUAN_MOTOR3_Init+0x54>)
 80033cc:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <HUAN_MOTOR3_Init+0x44>)
 80033d0:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <HUAN_MOTOR3_Init+0x58>)
 80033d2:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <HUAN_MOTOR3_Init+0x44>)
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <HUAN_MOTOR3_Init+0x5c>)
 80033d8:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 80033da:	4802      	ldr	r0, [pc, #8]	; (80033e4 <HUAN_MOTOR3_Init+0x44>)
 80033dc:	f7fe fb90 	bl	8001b00 <huansic_motor_init>
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	20000a04 	.word	0x20000a04
 80033e8:	20000714 	.word	0x20000714
 80033ec:	3d4ccccd 	.word	0x3d4ccccd
 80033f0:	20000834 	.word	0x20000834
 80033f4:	399d4952 	.word	0x399d4952
 80033f8:	37a7c5ac 	.word	0x37a7c5ac
 80033fc:	387ba882 	.word	0x387ba882

08003400 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 8003400:	b580      	push	{r7, lr}
 8003402:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 8003404:	4b0f      	ldr	r3, [pc, #60]	; (8003444 <HUAN_MOTOR4_Init+0x44>)
 8003406:	4a10      	ldr	r2, [pc, #64]	; (8003448 <HUAN_MOTOR4_Init+0x48>)
 8003408:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 800340a:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <HUAN_MOTOR4_Init+0x44>)
 800340c:	4a0f      	ldr	r2, [pc, #60]	; (800344c <HUAN_MOTOR4_Init+0x4c>)
 800340e:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <HUAN_MOTOR4_Init+0x44>)
 8003412:	4a0f      	ldr	r2, [pc, #60]	; (8003450 <HUAN_MOTOR4_Init+0x50>)
 8003414:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 8003416:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HUAN_MOTOR4_Init+0x44>)
 8003418:	2200      	movs	r2, #0
 800341a:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HUAN_MOTOR4_Init+0x44>)
 800341e:	4a0c      	ldr	r2, [pc, #48]	; (8003450 <HUAN_MOTOR4_Init+0x50>)
 8003420:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 8003422:	4b08      	ldr	r3, [pc, #32]	; (8003444 <HUAN_MOTOR4_Init+0x44>)
 8003424:	2204      	movs	r2, #4
 8003426:	611a      	str	r2, [r3, #16]
	cmotor_rb.kp = 0.0003;
 8003428:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HUAN_MOTOR4_Init+0x44>)
 800342a:	4a0a      	ldr	r2, [pc, #40]	; (8003454 <HUAN_MOTOR4_Init+0x54>)
 800342c:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 800342e:	4b05      	ldr	r3, [pc, #20]	; (8003444 <HUAN_MOTOR4_Init+0x44>)
 8003430:	4a09      	ldr	r2, [pc, #36]	; (8003458 <HUAN_MOTOR4_Init+0x58>)
 8003432:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 8003434:	4b03      	ldr	r3, [pc, #12]	; (8003444 <HUAN_MOTOR4_Init+0x44>)
 8003436:	4a09      	ldr	r2, [pc, #36]	; (800345c <HUAN_MOTOR4_Init+0x5c>)
 8003438:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 800343a:	4802      	ldr	r0, [pc, #8]	; (8003444 <HUAN_MOTOR4_Init+0x44>)
 800343c:	f7fe fb60 	bl	8001b00 <huansic_motor_init>
}
 8003440:	bf00      	nop
 8003442:	bd80      	pop	{r7, pc}
 8003444:	20000a40 	.word	0x20000a40
 8003448:	200007a4 	.word	0x200007a4
 800344c:	3d4ccccd 	.word	0x3d4ccccd
 8003450:	20000834 	.word	0x20000834
 8003454:	399d4952 	.word	0x399d4952
 8003458:	37a7c5ac 	.word	0x37a7c5ac
 800345c:	387ba882 	.word	0x387ba882

08003460 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
	himu.huart = &huart3;
 8003464:	4b03      	ldr	r3, [pc, #12]	; (8003474 <HUAN_IMU_Init+0x14>)
 8003466:	4a04      	ldr	r2, [pc, #16]	; (8003478 <HUAN_IMU_Init+0x18>)
 8003468:	601a      	str	r2, [r3, #0]
	huansic_jy62_init(&himu);
 800346a:	4802      	ldr	r0, [pc, #8]	; (8003474 <HUAN_IMU_Init+0x14>)
 800346c:	f7fd ffba 	bl	80013e4 <huansic_jy62_init>
}
 8003470:	bf00      	nop
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000a7c 	.word	0x20000a7c
 8003478:	200008c0 	.word	0x200008c0

0800347c <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
	hxb.uartPort = &huart2;
 8003480:	4b03      	ldr	r3, [pc, #12]	; (8003490 <HUAN_ZIGBEE_Init+0x14>)
 8003482:	4a04      	ldr	r2, [pc, #16]	; (8003494 <HUAN_ZIGBEE_Init+0x18>)
 8003484:	601a      	str	r2, [r3, #0]
	huansic_xb_init(&hxb);
 8003486:	4802      	ldr	r0, [pc, #8]	; (8003490 <HUAN_ZIGBEE_Init+0x14>)
 8003488:	f7fe fd32 	bl	8001ef0 <huansic_xb_init>
}
 800348c:	bf00      	nop
 800348e:	bd80      	pop	{r7, pc}
 8003490:	20000ad4 	.word	0x20000ad4
 8003494:	2000087c 	.word	0x2000087c

08003498 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_UART_RxCpltCallback+0x34>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d10b      	bne.n	80034c2 <HAL_UART_RxCpltCallback+0x2a>
		if (himu.pending_alignment)
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <HAL_UART_RxCpltCallback+0x34>)
 80034ac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_UART_RxCpltCallback+0x24>
			huansic_jy62_isr(&himu);
 80034b4:	4805      	ldr	r0, [pc, #20]	; (80034cc <HAL_UART_RxCpltCallback+0x34>)
 80034b6:	f7fe f8eb 	bl	8001690 <huansic_jy62_isr>
		else
			huansic_jy62_dma_isr(&himu);
	} /*else if(){

	} */
}
 80034ba:	e002      	b.n	80034c2 <HAL_UART_RxCpltCallback+0x2a>
			huansic_jy62_dma_isr(&himu);
 80034bc:	4803      	ldr	r0, [pc, #12]	; (80034cc <HAL_UART_RxCpltCallback+0x34>)
 80034be:	f7fd ffc7 	bl	8001450 <huansic_jy62_dma_isr>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000a7c 	.word	0x20000a7c

080034d0 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_UART_ErrorCallback+0x34>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d10b      	bne.n	80034fa <HAL_UART_ErrorCallback+0x2a>
		if (himu.pending_alignment)
 80034e2:	4b08      	ldr	r3, [pc, #32]	; (8003504 <HAL_UART_ErrorCallback+0x34>)
 80034e4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d003      	beq.n	80034f4 <HAL_UART_ErrorCallback+0x24>
			huansic_jy62_error(&himu);
 80034ec:	4805      	ldr	r0, [pc, #20]	; (8003504 <HAL_UART_ErrorCallback+0x34>)
 80034ee:	f7fe f91a 	bl	8001726 <huansic_jy62_error>
		else
			huansic_jy62_dma_error(&himu);
	} /*else if(){

	}*/
}
 80034f2:	e002      	b.n	80034fa <HAL_UART_ErrorCallback+0x2a>
			huansic_jy62_dma_error(&himu);
 80034f4:	4803      	ldr	r0, [pc, #12]	; (8003504 <HAL_UART_ErrorCallback+0x34>)
 80034f6:	f7fe f902 	bl	80016fe <huansic_jy62_dma_error>
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000a7c 	.word	0x20000a7c

08003508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800350c:	b672      	cpsid	i
}
 800350e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003510:	e7fe      	b.n	8003510 <Error_Handler+0x8>
	...

08003514 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003514:	b480      	push	{r7}
 8003516:	b085      	sub	sp, #20
 8003518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <HAL_MspInit+0x5c>)
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	4a14      	ldr	r2, [pc, #80]	; (8003570 <HAL_MspInit+0x5c>)
 8003520:	f043 0301 	orr.w	r3, r3, #1
 8003524:	6193      	str	r3, [r2, #24]
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <HAL_MspInit+0x5c>)
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	60bb      	str	r3, [r7, #8]
 8003530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <HAL_MspInit+0x5c>)
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	4a0e      	ldr	r2, [pc, #56]	; (8003570 <HAL_MspInit+0x5c>)
 8003538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353c:	61d3      	str	r3, [r2, #28]
 800353e:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <HAL_MspInit+0x5c>)
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800354a:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <HAL_MspInit+0x60>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	4a04      	ldr	r2, [pc, #16]	; (8003574 <HAL_MspInit+0x60>)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003566:	bf00      	nop
 8003568:	3714      	adds	r7, #20
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr
 8003570:	40021000 	.word	0x40021000
 8003574:	40010000 	.word	0x40010000

08003578 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	; 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <HAL_I2C_MspInit+0x90>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d132      	bne.n	80035fe <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003598:	4b1c      	ldr	r3, [pc, #112]	; (800360c <HAL_I2C_MspInit+0x94>)
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	4a1b      	ldr	r2, [pc, #108]	; (800360c <HAL_I2C_MspInit+0x94>)
 800359e:	f043 0308 	orr.w	r3, r3, #8
 80035a2:	6193      	str	r3, [r2, #24]
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_I2C_MspInit+0x94>)
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035b6:	2312      	movs	r3, #18
 80035b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ba:	2303      	movs	r3, #3
 80035bc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	4619      	mov	r1, r3
 80035c4:	4812      	ldr	r0, [pc, #72]	; (8003610 <HAL_I2C_MspInit+0x98>)
 80035c6:	f001 fa23 	bl	8004a10 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <HAL_I2C_MspInit+0x9c>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	627b      	str	r3, [r7, #36]	; 0x24
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	f043 0302 	orr.w	r3, r3, #2
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
 80035e0:	4a0c      	ldr	r2, [pc, #48]	; (8003614 <HAL_I2C_MspInit+0x9c>)
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <HAL_I2C_MspInit+0x94>)
 80035e8:	69db      	ldr	r3, [r3, #28]
 80035ea:	4a08      	ldr	r2, [pc, #32]	; (800360c <HAL_I2C_MspInit+0x94>)
 80035ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035f0:	61d3      	str	r3, [r2, #28]
 80035f2:	4b06      	ldr	r3, [pc, #24]	; (800360c <HAL_I2C_MspInit+0x94>)
 80035f4:	69db      	ldr	r3, [r3, #28]
 80035f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80035fe:	bf00      	nop
 8003600:	3728      	adds	r7, #40	; 0x28
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	40005400 	.word	0x40005400
 800360c:	40021000 	.word	0x40021000
 8003610:	40010c00 	.word	0x40010c00
 8003614:	40010000 	.word	0x40010000

08003618 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <HAL_TIM_Base_MspInit+0x8c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d10c      	bne.n	8003644 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800362a:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <HAL_TIM_Base_MspInit+0x90>)
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	4a1e      	ldr	r2, [pc, #120]	; (80036a8 <HAL_TIM_Base_MspInit+0x90>)
 8003630:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003634:	6193      	str	r3, [r2, #24]
 8003636:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <HAL_TIM_Base_MspInit+0x90>)
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003642:	e02a      	b.n	800369a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_TIM_Base_MspInit+0x94>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d114      	bne.n	8003678 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800364e:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <HAL_TIM_Base_MspInit+0x90>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4a15      	ldr	r2, [pc, #84]	; (80036a8 <HAL_TIM_Base_MspInit+0x90>)
 8003654:	f043 0310 	orr.w	r3, r3, #16
 8003658:	61d3      	str	r3, [r2, #28]
 800365a:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <HAL_TIM_Base_MspInit+0x90>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	613b      	str	r3, [r7, #16]
 8003664:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8003666:	2200      	movs	r2, #0
 8003668:	2101      	movs	r1, #1
 800366a:	2036      	movs	r0, #54	; 0x36
 800366c:	f000 fd17 	bl	800409e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003670:	2036      	movs	r0, #54	; 0x36
 8003672:	f000 fd30 	bl	80040d6 <HAL_NVIC_EnableIRQ>
}
 8003676:	e010      	b.n	800369a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0c      	ldr	r2, [pc, #48]	; (80036b0 <HAL_TIM_Base_MspInit+0x98>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d10b      	bne.n	800369a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003682:	4b09      	ldr	r3, [pc, #36]	; (80036a8 <HAL_TIM_Base_MspInit+0x90>)
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	4a08      	ldr	r2, [pc, #32]	; (80036a8 <HAL_TIM_Base_MspInit+0x90>)
 8003688:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800368c:	6193      	str	r3, [r2, #24]
 800368e:	4b06      	ldr	r3, [pc, #24]	; (80036a8 <HAL_TIM_Base_MspInit+0x90>)
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	68fb      	ldr	r3, [r7, #12]
}
 800369a:	bf00      	nop
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	40021000 	.word	0x40021000
 80036ac:	40001000 	.word	0x40001000
 80036b0:	40013400 	.word	0x40013400

080036b4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b090      	sub	sp, #64	; 0x40
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036c0:	2200      	movs	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	609a      	str	r2, [r3, #8]
 80036c8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d2:	d14f      	bne.n	8003774 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036d4:	4b68      	ldr	r3, [pc, #416]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	4a67      	ldr	r2, [pc, #412]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	61d3      	str	r3, [r2, #28]
 80036e0:	4b65      	ldr	r3, [pc, #404]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ea:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ec:	4b62      	ldr	r3, [pc, #392]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	4a61      	ldr	r2, [pc, #388]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80036f2:	f043 0304 	orr.w	r3, r3, #4
 80036f6:	6193      	str	r3, [r2, #24]
 80036f8:	4b5f      	ldr	r3, [pc, #380]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
 8003702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003704:	4b5c      	ldr	r3, [pc, #368]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	4a5b      	ldr	r2, [pc, #364]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800370a:	f043 0308 	orr.w	r3, r3, #8
 800370e:	6193      	str	r3, [r2, #24]
 8003710:	4b59      	ldr	r3, [pc, #356]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	623b      	str	r3, [r7, #32]
 800371a:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800371c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003722:	2300      	movs	r3, #0
 8003724:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800372a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800372e:	4619      	mov	r1, r3
 8003730:	4852      	ldr	r0, [pc, #328]	; (800387c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003732:	f001 f96d 	bl	8004a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003736:	2308      	movs	r3, #8
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800373a:	2300      	movs	r3, #0
 800373c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373e:	2300      	movs	r3, #0
 8003740:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003746:	4619      	mov	r1, r3
 8003748:	484d      	ldr	r0, [pc, #308]	; (8003880 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800374a:	f001 f961 	bl	8004a10 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800374e:	4b4d      	ldr	r3, [pc, #308]	; (8003884 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800375c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800375e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800376c:	4a45      	ldr	r2, [pc, #276]	; (8003884 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800376e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003770:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003772:	e07c      	b.n	800386e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a43      	ldr	r2, [pc, #268]	; (8003888 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d124      	bne.n	80037c8 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800377e:	4b3e      	ldr	r3, [pc, #248]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	4a3d      	ldr	r2, [pc, #244]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003784:	f043 0302 	orr.w	r3, r3, #2
 8003788:	61d3      	str	r3, [r2, #28]
 800378a:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003796:	4b38      	ldr	r3, [pc, #224]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	4a37      	ldr	r2, [pc, #220]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800379c:	f043 0304 	orr.w	r3, r3, #4
 80037a0:	6193      	str	r3, [r2, #24]
 80037a2:	4b35      	ldr	r3, [pc, #212]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	61bb      	str	r3, [r7, #24]
 80037ac:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80037ae:	23c0      	movs	r3, #192	; 0xc0
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037b2:	2300      	movs	r3, #0
 80037b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b6:	2300      	movs	r3, #0
 80037b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037be:	4619      	mov	r1, r3
 80037c0:	482e      	ldr	r0, [pc, #184]	; (800387c <HAL_TIM_Encoder_MspInit+0x1c8>)
 80037c2:	f001 f925 	bl	8004a10 <HAL_GPIO_Init>
}
 80037c6:	e052      	b.n	800386e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2f      	ldr	r2, [pc, #188]	; (800388c <HAL_TIM_Encoder_MspInit+0x1d8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d124      	bne.n	800381c <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037d2:	4b29      	ldr	r3, [pc, #164]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80037d4:	69db      	ldr	r3, [r3, #28]
 80037d6:	4a28      	ldr	r2, [pc, #160]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80037d8:	f043 0304 	orr.w	r3, r3, #4
 80037dc:	61d3      	str	r3, [r2, #28]
 80037de:	4b26      	ldr	r3, [pc, #152]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ea:	4b23      	ldr	r3, [pc, #140]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	4a22      	ldr	r2, [pc, #136]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80037f0:	f043 0308 	orr.w	r3, r3, #8
 80037f4:	6193      	str	r3, [r2, #24]
 80037f6:	4b20      	ldr	r3, [pc, #128]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f003 0308 	and.w	r3, r3, #8
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003802:	23c0      	movs	r3, #192	; 0xc0
 8003804:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003806:	2300      	movs	r3, #0
 8003808:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380a:	2300      	movs	r3, #0
 800380c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003812:	4619      	mov	r1, r3
 8003814:	481a      	ldr	r0, [pc, #104]	; (8003880 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8003816:	f001 f8fb 	bl	8004a10 <HAL_GPIO_Init>
}
 800381a:	e028      	b.n	800386e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a1b      	ldr	r2, [pc, #108]	; (8003890 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d123      	bne.n	800386e <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003826:	4b14      	ldr	r3, [pc, #80]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	4a13      	ldr	r2, [pc, #76]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800382c:	f043 0308 	orr.w	r3, r3, #8
 8003830:	61d3      	str	r3, [r2, #28]
 8003832:	4b11      	ldr	r3, [pc, #68]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f003 0308 	and.w	r3, r3, #8
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383e:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	4a0d      	ldr	r2, [pc, #52]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	6193      	str	r3, [r2, #24]
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003856:	2303      	movs	r3, #3
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800385a:	2300      	movs	r3, #0
 800385c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	2300      	movs	r3, #0
 8003860:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003866:	4619      	mov	r1, r3
 8003868:	4804      	ldr	r0, [pc, #16]	; (800387c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800386a:	f001 f8d1 	bl	8004a10 <HAL_GPIO_Init>
}
 800386e:	bf00      	nop
 8003870:	3740      	adds	r7, #64	; 0x40
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	40010800 	.word	0x40010800
 8003880:	40010c00 	.word	0x40010c00
 8003884:	40010000 	.word	0x40010000
 8003888:	40000400 	.word	0x40000400
 800388c:	40000800 	.word	0x40000800
 8003890:	40000c00 	.word	0x40000c00

08003894 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800389c:	f107 0310 	add.w	r3, r7, #16
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	609a      	str	r2, [r3, #8]
 80038a8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1f      	ldr	r2, [pc, #124]	; (800392c <HAL_TIM_MspPostInit+0x98>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d119      	bne.n	80038e8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038b4:	4b1e      	ldr	r3, [pc, #120]	; (8003930 <HAL_TIM_MspPostInit+0x9c>)
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	4a1d      	ldr	r2, [pc, #116]	; (8003930 <HAL_TIM_MspPostInit+0x9c>)
 80038ba:	f043 0304 	orr.w	r3, r3, #4
 80038be:	6193      	str	r3, [r2, #24]
 80038c0:	4b1b      	ldr	r3, [pc, #108]	; (8003930 <HAL_TIM_MspPostInit+0x9c>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0304 	and.w	r3, r3, #4
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80038cc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80038d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d2:	2302      	movs	r3, #2
 80038d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d6:	2302      	movs	r3, #2
 80038d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038da:	f107 0310 	add.w	r3, r7, #16
 80038de:	4619      	mov	r1, r3
 80038e0:	4814      	ldr	r0, [pc, #80]	; (8003934 <HAL_TIM_MspPostInit+0xa0>)
 80038e2:	f001 f895 	bl	8004a10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80038e6:	e01d      	b.n	8003924 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a12      	ldr	r2, [pc, #72]	; (8003938 <HAL_TIM_MspPostInit+0xa4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d118      	bne.n	8003924 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038f2:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <HAL_TIM_MspPostInit+0x9c>)
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	4a0e      	ldr	r2, [pc, #56]	; (8003930 <HAL_TIM_MspPostInit+0x9c>)
 80038f8:	f043 0310 	orr.w	r3, r3, #16
 80038fc:	6193      	str	r3, [r2, #24]
 80038fe:	4b0c      	ldr	r3, [pc, #48]	; (8003930 <HAL_TIM_MspPostInit+0x9c>)
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f003 0310 	and.w	r3, r3, #16
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800390a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800390e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003910:	2302      	movs	r3, #2
 8003912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003914:	2302      	movs	r3, #2
 8003916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003918:	f107 0310 	add.w	r3, r7, #16
 800391c:	4619      	mov	r1, r3
 800391e:	4807      	ldr	r0, [pc, #28]	; (800393c <HAL_TIM_MspPostInit+0xa8>)
 8003920:	f001 f876 	bl	8004a10 <HAL_GPIO_Init>
}
 8003924:	bf00      	nop
 8003926:	3720      	adds	r7, #32
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	40012c00 	.word	0x40012c00
 8003930:	40021000 	.word	0x40021000
 8003934:	40010800 	.word	0x40010800
 8003938:	40013400 	.word	0x40013400
 800393c:	40011000 	.word	0x40011000

08003940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08c      	sub	sp, #48	; 0x30
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003948:	f107 031c 	add.w	r3, r7, #28
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a6a      	ldr	r2, [pc, #424]	; (8003b04 <HAL_UART_MspInit+0x1c4>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d156      	bne.n	8003a0e <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003960:	4b69      	ldr	r3, [pc, #420]	; (8003b08 <HAL_UART_MspInit+0x1c8>)
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	4a68      	ldr	r2, [pc, #416]	; (8003b08 <HAL_UART_MspInit+0x1c8>)
 8003966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800396a:	61d3      	str	r3, [r2, #28]
 800396c:	4b66      	ldr	r3, [pc, #408]	; (8003b08 <HAL_UART_MspInit+0x1c8>)
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003978:	4b63      	ldr	r3, [pc, #396]	; (8003b08 <HAL_UART_MspInit+0x1c8>)
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	4a62      	ldr	r2, [pc, #392]	; (8003b08 <HAL_UART_MspInit+0x1c8>)
 800397e:	f043 0304 	orr.w	r3, r3, #4
 8003982:	6193      	str	r3, [r2, #24]
 8003984:	4b60      	ldr	r3, [pc, #384]	; (8003b08 <HAL_UART_MspInit+0x1c8>)
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8003990:	2304      	movs	r3, #4
 8003992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003994:	2302      	movs	r3, #2
 8003996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003998:	2303      	movs	r3, #3
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 800399c:	f107 031c 	add.w	r3, r7, #28
 80039a0:	4619      	mov	r1, r3
 80039a2:	485a      	ldr	r0, [pc, #360]	; (8003b0c <HAL_UART_MspInit+0x1cc>)
 80039a4:	f001 f834 	bl	8004a10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 80039a8:	2308      	movs	r3, #8
 80039aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039ac:	2300      	movs	r3, #0
 80039ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 80039b4:	f107 031c 	add.w	r3, r7, #28
 80039b8:	4619      	mov	r1, r3
 80039ba:	4854      	ldr	r0, [pc, #336]	; (8003b0c <HAL_UART_MspInit+0x1cc>)
 80039bc:	f001 f828 	bl	8004a10 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80039c0:	4b53      	ldr	r3, [pc, #332]	; (8003b10 <HAL_UART_MspInit+0x1d0>)
 80039c2:	4a54      	ldr	r2, [pc, #336]	; (8003b14 <HAL_UART_MspInit+0x1d4>)
 80039c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039c6:	4b52      	ldr	r3, [pc, #328]	; (8003b10 <HAL_UART_MspInit+0x1d0>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039cc:	4b50      	ldr	r3, [pc, #320]	; (8003b10 <HAL_UART_MspInit+0x1d0>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039d2:	4b4f      	ldr	r3, [pc, #316]	; (8003b10 <HAL_UART_MspInit+0x1d0>)
 80039d4:	2280      	movs	r2, #128	; 0x80
 80039d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039d8:	4b4d      	ldr	r3, [pc, #308]	; (8003b10 <HAL_UART_MspInit+0x1d0>)
 80039da:	2200      	movs	r2, #0
 80039dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039de:	4b4c      	ldr	r3, [pc, #304]	; (8003b10 <HAL_UART_MspInit+0x1d0>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80039e4:	4b4a      	ldr	r3, [pc, #296]	; (8003b10 <HAL_UART_MspInit+0x1d0>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039ea:	4b49      	ldr	r3, [pc, #292]	; (8003b10 <HAL_UART_MspInit+0x1d0>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80039f0:	4847      	ldr	r0, [pc, #284]	; (8003b10 <HAL_UART_MspInit+0x1d0>)
 80039f2:	f000 fb8b 	bl	800410c <HAL_DMA_Init>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80039fc:	f7ff fd84 	bl	8003508 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a43      	ldr	r2, [pc, #268]	; (8003b10 <HAL_UART_MspInit+0x1d0>)
 8003a04:	639a      	str	r2, [r3, #56]	; 0x38
 8003a06:	4a42      	ldr	r2, [pc, #264]	; (8003b10 <HAL_UART_MspInit+0x1d0>)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003a0c:	e076      	b.n	8003afc <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a41      	ldr	r2, [pc, #260]	; (8003b18 <HAL_UART_MspInit+0x1d8>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d171      	bne.n	8003afc <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a18:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_UART_MspInit+0x1c8>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	4a3a      	ldr	r2, [pc, #232]	; (8003b08 <HAL_UART_MspInit+0x1c8>)
 8003a1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a22:	61d3      	str	r3, [r2, #28]
 8003a24:	4b38      	ldr	r3, [pc, #224]	; (8003b08 <HAL_UART_MspInit+0x1c8>)
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a30:	4b35      	ldr	r3, [pc, #212]	; (8003b08 <HAL_UART_MspInit+0x1c8>)
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	4a34      	ldr	r2, [pc, #208]	; (8003b08 <HAL_UART_MspInit+0x1c8>)
 8003a36:	f043 0310 	orr.w	r3, r3, #16
 8003a3a:	6193      	str	r3, [r2, #24]
 8003a3c:	4b32      	ldr	r3, [pc, #200]	; (8003b08 <HAL_UART_MspInit+0x1c8>)
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	60fb      	str	r3, [r7, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8003a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a52:	2303      	movs	r3, #3
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8003a56:	f107 031c 	add.w	r3, r7, #28
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	482f      	ldr	r0, [pc, #188]	; (8003b1c <HAL_UART_MspInit+0x1dc>)
 8003a5e:	f000 ffd7 	bl	8004a10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 8003a62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8003a70:	f107 031c 	add.w	r3, r7, #28
 8003a74:	4619      	mov	r1, r3
 8003a76:	4829      	ldr	r0, [pc, #164]	; (8003b1c <HAL_UART_MspInit+0x1dc>)
 8003a78:	f000 ffca 	bl	8004a10 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8003a7c:	4b28      	ldr	r3, [pc, #160]	; (8003b20 <HAL_UART_MspInit+0x1e0>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a84:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003a90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	f043 0310 	orr.w	r3, r3, #16
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9a:	4a21      	ldr	r2, [pc, #132]	; (8003b20 <HAL_UART_MspInit+0x1e0>)
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003aa0:	4b20      	ldr	r3, [pc, #128]	; (8003b24 <HAL_UART_MspInit+0x1e4>)
 8003aa2:	4a21      	ldr	r2, [pc, #132]	; (8003b28 <HAL_UART_MspInit+0x1e8>)
 8003aa4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003aa6:	4b1f      	ldr	r3, [pc, #124]	; (8003b24 <HAL_UART_MspInit+0x1e4>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aac:	4b1d      	ldr	r3, [pc, #116]	; (8003b24 <HAL_UART_MspInit+0x1e4>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <HAL_UART_MspInit+0x1e4>)
 8003ab4:	2280      	movs	r2, #128	; 0x80
 8003ab6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003ab8:	4b1a      	ldr	r3, [pc, #104]	; (8003b24 <HAL_UART_MspInit+0x1e4>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003abe:	4b19      	ldr	r3, [pc, #100]	; (8003b24 <HAL_UART_MspInit+0x1e4>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003ac4:	4b17      	ldr	r3, [pc, #92]	; (8003b24 <HAL_UART_MspInit+0x1e4>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003aca:	4b16      	ldr	r3, [pc, #88]	; (8003b24 <HAL_UART_MspInit+0x1e4>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003ad0:	4814      	ldr	r0, [pc, #80]	; (8003b24 <HAL_UART_MspInit+0x1e4>)
 8003ad2:	f000 fb1b 	bl	800410c <HAL_DMA_Init>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d001      	beq.n	8003ae0 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8003adc:	f7ff fd14 	bl	8003508 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a10      	ldr	r2, [pc, #64]	; (8003b24 <HAL_UART_MspInit+0x1e4>)
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
 8003ae6:	4a0f      	ldr	r2, [pc, #60]	; (8003b24 <HAL_UART_MspInit+0x1e4>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8003aec:	2200      	movs	r2, #0
 8003aee:	2102      	movs	r1, #2
 8003af0:	2027      	movs	r0, #39	; 0x27
 8003af2:	f000 fad4 	bl	800409e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003af6:	2027      	movs	r0, #39	; 0x27
 8003af8:	f000 faed 	bl	80040d6 <HAL_NVIC_EnableIRQ>
}
 8003afc:	bf00      	nop
 8003afe:	3730      	adds	r7, #48	; 0x30
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	40004400 	.word	0x40004400
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40010800 	.word	0x40010800
 8003b10:	20000904 	.word	0x20000904
 8003b14:	4002006c 	.word	0x4002006c
 8003b18:	40004800 	.word	0x40004800
 8003b1c:	40011000 	.word	0x40011000
 8003b20:	40010000 	.word	0x40010000
 8003b24:	20000948 	.word	0x20000948
 8003b28:	40020030 	.word	0x40020030

08003b2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003b30:	e7fe      	b.n	8003b30 <NMI_Handler+0x4>

08003b32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b36:	e7fe      	b.n	8003b36 <HardFault_Handler+0x4>

08003b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b3c:	e7fe      	b.n	8003b3c <MemManage_Handler+0x4>

08003b3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b42:	e7fe      	b.n	8003b42 <BusFault_Handler+0x4>

08003b44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b48:	e7fe      	b.n	8003b48 <UsageFault_Handler+0x4>

08003b4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr

08003b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b56:	b480      	push	{r7}
 8003b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr

08003b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b62:	b480      	push	{r7}
 8003b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b66:	bf00      	nop
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bc80      	pop	{r7}
 8003b6c:	4770      	bx	lr

08003b6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b72:	f000 f97d 	bl	8003e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003b80:	4802      	ldr	r0, [pc, #8]	; (8003b8c <DMA1_Channel3_IRQHandler+0x10>)
 8003b82:	f000 fcdb 	bl	800453c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003b86:	bf00      	nop
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000948 	.word	0x20000948

08003b90 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if (hxb.nextPackageID == 0x00)
 8003b94:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <DMA1_Channel6_IRQHandler+0x24>)
 8003b96:	7a1b      	ldrb	r3, [r3, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <DMA1_Channel6_IRQHandler+0x14>
		huansic_xb_decodeHeader(&hxb);
 8003b9c:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <DMA1_Channel6_IRQHandler+0x24>)
 8003b9e:	f7fe f9bd 	bl	8001f1c <huansic_xb_decodeHeader>
 8003ba2:	e002      	b.n	8003baa <DMA1_Channel6_IRQHandler+0x1a>
	else
		huansic_xb_decodeBody(&hxb);
 8003ba4:	4803      	ldr	r0, [pc, #12]	; (8003bb4 <DMA1_Channel6_IRQHandler+0x24>)
 8003ba6:	f7fe f9f7 	bl	8001f98 <huansic_xb_decodeBody>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003baa:	4803      	ldr	r0, [pc, #12]	; (8003bb8 <DMA1_Channel6_IRQHandler+0x28>)
 8003bac:	f000 fcc6 	bl	800453c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003bb0:	bf00      	nop
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000ad4 	.word	0x20000ad4
 8003bb8:	20000904 	.word	0x20000904

08003bbc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003bc0:	4802      	ldr	r0, [pc, #8]	; (8003bcc <USART3_IRQHandler+0x10>)
 8003bc2:	f003 f8c9 	bl	8006d58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003bc6:	bf00      	nop
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	200008c0 	.word	0x200008c0

08003bd0 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 8003bd4:	4808      	ldr	r0, [pc, #32]	; (8003bf8 <TIM6_IRQHandler+0x28>)
 8003bd6:	f7fe f851 	bl	8001c7c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 8003bda:	4808      	ldr	r0, [pc, #32]	; (8003bfc <TIM6_IRQHandler+0x2c>)
 8003bdc:	f7fe f84e 	bl	8001c7c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 8003be0:	4807      	ldr	r0, [pc, #28]	; (8003c00 <TIM6_IRQHandler+0x30>)
 8003be2:	f7fe f84b 	bl	8001c7c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 8003be6:	4807      	ldr	r0, [pc, #28]	; (8003c04 <TIM6_IRQHandler+0x34>)
 8003be8:	f7fe f848 	bl	8001c7c <huansic_motor_pid>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bec:	4806      	ldr	r0, [pc, #24]	; (8003c08 <TIM6_IRQHandler+0x38>)
 8003bee:	f002 f90d 	bl	8005e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003bf2:	bf00      	nop
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	2000098c 	.word	0x2000098c
 8003bfc:	200009c8 	.word	0x200009c8
 8003c00:	20000a04 	.word	0x20000a04
 8003c04:	20000a40 	.word	0x20000a40
 8003c08:	200007ec 	.word	0x200007ec

08003c0c <_getpid>:
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	2301      	movs	r3, #1
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bc80      	pop	{r7}
 8003c18:	4770      	bx	lr

08003c1a <_kill>:
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b082      	sub	sp, #8
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
 8003c24:	f003 fe08 	bl	8007838 <__errno>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2216      	movs	r2, #22
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <_exit>:
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
 8003c42:	f04f 31ff 	mov.w	r1, #4294967295
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7ff ffe7 	bl	8003c1a <_kill>
 8003c4c:	e7fe      	b.n	8003c4c <_exit+0x12>

08003c4e <_read>:
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b086      	sub	sp, #24
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e00a      	b.n	8003c76 <_read+0x28>
 8003c60:	f3af 8000 	nop.w
 8003c64:	4601      	mov	r1, r0
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	1c5a      	adds	r2, r3, #1
 8003c6a:	60ba      	str	r2, [r7, #8]
 8003c6c:	b2ca      	uxtb	r2, r1
 8003c6e:	701a      	strb	r2, [r3, #0]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	3301      	adds	r3, #1
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	dbf0      	blt.n	8003c60 <_read+0x12>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <_write>:
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e009      	b.n	8003cae <_write+0x26>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	60ba      	str	r2, [r7, #8]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f3af 8000 	nop.w
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	3301      	adds	r3, #1
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	dbf1      	blt.n	8003c9a <_write+0x12>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <_close>:
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ccc:	4618      	mov	r0, r3
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr

08003cd6 <_fstat>:
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	6039      	str	r1, [r7, #0]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ce6:	605a      	str	r2, [r3, #4]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	4618      	mov	r0, r3
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <_isatty>:
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	4618      	mov	r0, r3
 8003d00:	370c      	adds	r7, #12
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bc80      	pop	{r7}
 8003d06:	4770      	bx	lr

08003d08 <_lseek>:
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
 8003d14:	2300      	movs	r3, #0
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bc80      	pop	{r7}
 8003d1e:	4770      	bx	lr

08003d20 <_sbrk>:
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	4a14      	ldr	r2, [pc, #80]	; (8003d7c <_sbrk+0x5c>)
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <_sbrk+0x60>)
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <_sbrk+0x64>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d102      	bne.n	8003d42 <_sbrk+0x22>
 8003d3c:	4b11      	ldr	r3, [pc, #68]	; (8003d84 <_sbrk+0x64>)
 8003d3e:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <_sbrk+0x68>)
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <_sbrk+0x64>)
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4413      	add	r3, r2
 8003d4a:	693a      	ldr	r2, [r7, #16]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d207      	bcs.n	8003d60 <_sbrk+0x40>
 8003d50:	f003 fd72 	bl	8007838 <__errno>
 8003d54:	4603      	mov	r3, r0
 8003d56:	220c      	movs	r2, #12
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5e:	e009      	b.n	8003d74 <_sbrk+0x54>
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <_sbrk+0x64>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	4b07      	ldr	r3, [pc, #28]	; (8003d84 <_sbrk+0x64>)
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	4a05      	ldr	r2, [pc, #20]	; (8003d84 <_sbrk+0x64>)
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	2000c000 	.word	0x2000c000
 8003d80:	00000400 	.word	0x00000400
 8003d84:	20000bd4 	.word	0x20000bd4
 8003d88:	20000bf0 	.word	0x20000bf0

08003d8c <SystemInit>:
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bc80      	pop	{r7}
 8003d96:	4770      	bx	lr

08003d98 <Reset_Handler>:
 8003d98:	480c      	ldr	r0, [pc, #48]	; (8003dcc <LoopFillZerobss+0x12>)
 8003d9a:	490d      	ldr	r1, [pc, #52]	; (8003dd0 <LoopFillZerobss+0x16>)
 8003d9c:	4a0d      	ldr	r2, [pc, #52]	; (8003dd4 <LoopFillZerobss+0x1a>)
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e002      	b.n	8003da8 <LoopCopyDataInit>

08003da2 <CopyDataInit>:
 8003da2:	58d4      	ldr	r4, [r2, r3]
 8003da4:	50c4      	str	r4, [r0, r3]
 8003da6:	3304      	adds	r3, #4

08003da8 <LoopCopyDataInit>:
 8003da8:	18c4      	adds	r4, r0, r3
 8003daa:	428c      	cmp	r4, r1
 8003dac:	d3f9      	bcc.n	8003da2 <CopyDataInit>
 8003dae:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <LoopFillZerobss+0x1e>)
 8003db0:	4c0a      	ldr	r4, [pc, #40]	; (8003ddc <LoopFillZerobss+0x22>)
 8003db2:	2300      	movs	r3, #0
 8003db4:	e001      	b.n	8003dba <LoopFillZerobss>

08003db6 <FillZerobss>:
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	3204      	adds	r2, #4

08003dba <LoopFillZerobss>:
 8003dba:	42a2      	cmp	r2, r4
 8003dbc:	d3fb      	bcc.n	8003db6 <FillZerobss>
 8003dbe:	f7ff ffe5 	bl	8003d8c <SystemInit>
 8003dc2:	f003 fd51 	bl	8007868 <__libc_init_array>
 8003dc6:	f7fe fd93 	bl	80028f0 <main>
 8003dca:	4770      	bx	lr
 8003dcc:	20000000 	.word	0x20000000
 8003dd0:	20000074 	.word	0x20000074
 8003dd4:	08009c80 	.word	0x08009c80
 8003dd8:	20000074 	.word	0x20000074
 8003ddc:	20000bec 	.word	0x20000bec

08003de0 <ADC1_2_IRQHandler>:
 8003de0:	e7fe      	b.n	8003de0 <ADC1_2_IRQHandler>
	...

08003de4 <HAL_Init>:
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <HAL_Init+0x28>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a07      	ldr	r2, [pc, #28]	; (8003e0c <HAL_Init+0x28>)
 8003dee:	f043 0310 	orr.w	r3, r3, #16
 8003df2:	6013      	str	r3, [r2, #0]
 8003df4:	2003      	movs	r0, #3
 8003df6:	f000 f947 	bl	8004088 <HAL_NVIC_SetPriorityGrouping>
 8003dfa:	200f      	movs	r0, #15
 8003dfc:	f000 f808 	bl	8003e10 <HAL_InitTick>
 8003e00:	f7ff fb88 	bl	8003514 <HAL_MspInit>
 8003e04:	2300      	movs	r3, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40022000 	.word	0x40022000

08003e10 <HAL_InitTick>:
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <HAL_InitTick+0x54>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4b12      	ldr	r3, [pc, #72]	; (8003e68 <HAL_InitTick+0x58>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	4619      	mov	r1, r3
 8003e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f000 f95f 	bl	80040f2 <HAL_SYSTICK_Config>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_InitTick+0x2e>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e00e      	b.n	8003e5c <HAL_InitTick+0x4c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b0f      	cmp	r3, #15
 8003e42:	d80a      	bhi.n	8003e5a <HAL_InitTick+0x4a>
 8003e44:	2200      	movs	r2, #0
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	f000 f927 	bl	800409e <HAL_NVIC_SetPriority>
 8003e50:	4a06      	ldr	r2, [pc, #24]	; (8003e6c <HAL_InitTick+0x5c>)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	2300      	movs	r3, #0
 8003e58:	e000      	b.n	8003e5c <HAL_InitTick+0x4c>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000004 	.word	0x20000004
 8003e68:	2000000c 	.word	0x2000000c
 8003e6c:	20000008 	.word	0x20000008

08003e70 <HAL_IncTick>:
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	4b05      	ldr	r3, [pc, #20]	; (8003e8c <HAL_IncTick+0x1c>)
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	461a      	mov	r2, r3
 8003e7a:	4b05      	ldr	r3, [pc, #20]	; (8003e90 <HAL_IncTick+0x20>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4413      	add	r3, r2
 8003e80:	4a03      	ldr	r2, [pc, #12]	; (8003e90 <HAL_IncTick+0x20>)
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	2000000c 	.word	0x2000000c
 8003e90:	20000bd8 	.word	0x20000bd8

08003e94 <HAL_GetTick>:
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	4b02      	ldr	r3, [pc, #8]	; (8003ea4 <HAL_GetTick+0x10>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr
 8003ea4:	20000bd8 	.word	0x20000bd8

08003ea8 <HAL_Delay>:
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	f7ff fff0 	bl	8003e94 <HAL_GetTick>
 8003eb4:	60b8      	str	r0, [r7, #8]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec0:	d005      	beq.n	8003ece <HAL_Delay+0x26>
 8003ec2:	4b0a      	ldr	r3, [pc, #40]	; (8003eec <HAL_Delay+0x44>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
 8003ece:	bf00      	nop
 8003ed0:	f7ff ffe0 	bl	8003e94 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d8f7      	bhi.n	8003ed0 <HAL_Delay+0x28>
 8003ee0:	bf00      	nop
 8003ee2:	bf00      	nop
 8003ee4:	3710      	adds	r7, #16
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	2000000c 	.word	0x2000000c

08003ef0 <__NVIC_SetPriorityGrouping>:
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f003 0307 	and.w	r3, r3, #7
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <__NVIC_SetPriorityGrouping+0x44>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	60bb      	str	r3, [r7, #8]
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	021a      	lsls	r2, r3, #8
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	4a04      	ldr	r2, [pc, #16]	; (8003f34 <__NVIC_SetPriorityGrouping+0x44>)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	60d3      	str	r3, [r2, #12]
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bc80      	pop	{r7}
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	e000ed00 	.word	0xe000ed00

08003f38 <__NVIC_GetPriorityGrouping>:
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <__NVIC_GetPriorityGrouping+0x18>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	0a1b      	lsrs	r3, r3, #8
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	4618      	mov	r0, r3
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bc80      	pop	{r7}
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	e000ed00 	.word	0xe000ed00

08003f54 <__NVIC_EnableIRQ>:
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	71fb      	strb	r3, [r7, #7]
 8003f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	db0b      	blt.n	8003f7e <__NVIC_EnableIRQ+0x2a>
 8003f66:	79fb      	ldrb	r3, [r7, #7]
 8003f68:	f003 021f 	and.w	r2, r3, #31
 8003f6c:	4906      	ldr	r1, [pc, #24]	; (8003f88 <__NVIC_EnableIRQ+0x34>)
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	095b      	lsrs	r3, r3, #5
 8003f74:	2001      	movs	r0, #1
 8003f76:	fa00 f202 	lsl.w	r2, r0, r2
 8003f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr
 8003f88:	e000e100 	.word	0xe000e100

08003f8c <__NVIC_SetPriority>:
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	6039      	str	r1, [r7, #0]
 8003f96:	71fb      	strb	r3, [r7, #7]
 8003f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	db0a      	blt.n	8003fb6 <__NVIC_SetPriority+0x2a>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	490c      	ldr	r1, [pc, #48]	; (8003fd8 <__NVIC_SetPriority+0x4c>)
 8003fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003faa:	0112      	lsls	r2, r2, #4
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	440b      	add	r3, r1
 8003fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003fb4:	e00a      	b.n	8003fcc <__NVIC_SetPriority+0x40>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	4908      	ldr	r1, [pc, #32]	; (8003fdc <__NVIC_SetPriority+0x50>)
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	3b04      	subs	r3, #4
 8003fc4:	0112      	lsls	r2, r2, #4
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	440b      	add	r3, r1
 8003fca:	761a      	strb	r2, [r3, #24]
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	e000e100 	.word	0xe000e100
 8003fdc:	e000ed00 	.word	0xe000ed00

08003fe0 <NVIC_EncodePriority>:
 8003fe0:	b480      	push	{r7}
 8003fe2:	b089      	sub	sp, #36	; 0x24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f1c3 0307 	rsb	r3, r3, #7
 8003ffa:	2b04      	cmp	r3, #4
 8003ffc:	bf28      	it	cs
 8003ffe:	2304      	movcs	r3, #4
 8004000:	61bb      	str	r3, [r7, #24]
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	3304      	adds	r3, #4
 8004006:	2b06      	cmp	r3, #6
 8004008:	d902      	bls.n	8004010 <NVIC_EncodePriority+0x30>
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	3b03      	subs	r3, #3
 800400e:	e000      	b.n	8004012 <NVIC_EncodePriority+0x32>
 8004010:	2300      	movs	r3, #0
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	f04f 32ff 	mov.w	r2, #4294967295
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43da      	mvns	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	401a      	ands	r2, r3
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	409a      	lsls	r2, r3
 8004028:	f04f 31ff 	mov.w	r1, #4294967295
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	fa01 f303 	lsl.w	r3, r1, r3
 8004032:	43d9      	mvns	r1, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	400b      	ands	r3, r1
 8004038:	4313      	orrs	r3, r2
 800403a:	4618      	mov	r0, r3
 800403c:	3724      	adds	r7, #36	; 0x24
 800403e:	46bd      	mov	sp, r7
 8004040:	bc80      	pop	{r7}
 8004042:	4770      	bx	lr

08004044 <SysTick_Config>:
 8004044:	b580      	push	{r7, lr}
 8004046:	b082      	sub	sp, #8
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3b01      	subs	r3, #1
 8004050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004054:	d301      	bcc.n	800405a <SysTick_Config+0x16>
 8004056:	2301      	movs	r3, #1
 8004058:	e00f      	b.n	800407a <SysTick_Config+0x36>
 800405a:	4a0a      	ldr	r2, [pc, #40]	; (8004084 <SysTick_Config+0x40>)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3b01      	subs	r3, #1
 8004060:	6053      	str	r3, [r2, #4]
 8004062:	210f      	movs	r1, #15
 8004064:	f04f 30ff 	mov.w	r0, #4294967295
 8004068:	f7ff ff90 	bl	8003f8c <__NVIC_SetPriority>
 800406c:	4b05      	ldr	r3, [pc, #20]	; (8004084 <SysTick_Config+0x40>)
 800406e:	2200      	movs	r2, #0
 8004070:	609a      	str	r2, [r3, #8]
 8004072:	4b04      	ldr	r3, [pc, #16]	; (8004084 <SysTick_Config+0x40>)
 8004074:	2207      	movs	r2, #7
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	2300      	movs	r3, #0
 800407a:	4618      	mov	r0, r3
 800407c:	3708      	adds	r7, #8
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	e000e010 	.word	0xe000e010

08004088 <HAL_NVIC_SetPriorityGrouping>:
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f7ff ff2d 	bl	8003ef0 <__NVIC_SetPriorityGrouping>
 8004096:	bf00      	nop
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <HAL_NVIC_SetPriority>:
 800409e:	b580      	push	{r7, lr}
 80040a0:	b086      	sub	sp, #24
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	4603      	mov	r3, r0
 80040a6:	60b9      	str	r1, [r7, #8]
 80040a8:	607a      	str	r2, [r7, #4]
 80040aa:	73fb      	strb	r3, [r7, #15]
 80040ac:	2300      	movs	r3, #0
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	f7ff ff42 	bl	8003f38 <__NVIC_GetPriorityGrouping>
 80040b4:	6178      	str	r0, [r7, #20]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	68b9      	ldr	r1, [r7, #8]
 80040ba:	6978      	ldr	r0, [r7, #20]
 80040bc:	f7ff ff90 	bl	8003fe0 <NVIC_EncodePriority>
 80040c0:	4602      	mov	r2, r0
 80040c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff ff5f 	bl	8003f8c <__NVIC_SetPriority>
 80040ce:	bf00      	nop
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_NVIC_EnableIRQ>:
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b082      	sub	sp, #8
 80040da:	af00      	add	r7, sp, #0
 80040dc:	4603      	mov	r3, r0
 80040de:	71fb      	strb	r3, [r7, #7]
 80040e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff ff35 	bl	8003f54 <__NVIC_EnableIRQ>
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_SYSTICK_Config>:
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b082      	sub	sp, #8
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f7ff ffa2 	bl	8004044 <SysTick_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <HAL_DMA_Init>:
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_DMA_Init+0x16>
 800411e:	2301      	movs	r3, #1
 8004120:	e059      	b.n	80041d6 <HAL_DMA_Init+0xca>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	461a      	mov	r2, r3
 8004128:	4b2d      	ldr	r3, [pc, #180]	; (80041e0 <HAL_DMA_Init+0xd4>)
 800412a:	429a      	cmp	r2, r3
 800412c:	d80f      	bhi.n	800414e <HAL_DMA_Init+0x42>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	461a      	mov	r2, r3
 8004134:	4b2b      	ldr	r3, [pc, #172]	; (80041e4 <HAL_DMA_Init+0xd8>)
 8004136:	4413      	add	r3, r2
 8004138:	4a2b      	ldr	r2, [pc, #172]	; (80041e8 <HAL_DMA_Init+0xdc>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	009a      	lsls	r2, r3, #2
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	641a      	str	r2, [r3, #64]	; 0x40
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a28      	ldr	r2, [pc, #160]	; (80041ec <HAL_DMA_Init+0xe0>)
 800414a:	63da      	str	r2, [r3, #60]	; 0x3c
 800414c:	e00e      	b.n	800416c <HAL_DMA_Init+0x60>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	4b26      	ldr	r3, [pc, #152]	; (80041f0 <HAL_DMA_Init+0xe4>)
 8004156:	4413      	add	r3, r2
 8004158:	4a23      	ldr	r2, [pc, #140]	; (80041e8 <HAL_DMA_Init+0xdc>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	091b      	lsrs	r3, r3, #4
 8004160:	009a      	lsls	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a22      	ldr	r2, [pc, #136]	; (80041f4 <HAL_DMA_Init+0xe8>)
 800416a:	63da      	str	r2, [r3, #60]	; 0x3c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	60fb      	str	r3, [r7, #12]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004182:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	699b      	ldr	r3, [r3, #24]
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	68fa      	ldr	r2, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	639a      	str	r2, [r3, #56]	; 0x38
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2020 	strb.w	r2, [r3, #32]
 80041d4:	2300      	movs	r3, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	3714      	adds	r7, #20
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr
 80041e0:	40020407 	.word	0x40020407
 80041e4:	bffdfff8 	.word	0xbffdfff8
 80041e8:	cccccccd 	.word	0xcccccccd
 80041ec:	40020000 	.word	0x40020000
 80041f0:	bffdfbf8 	.word	0xbffdfbf8
 80041f4:	40020400 	.word	0x40020400

080041f8 <HAL_DMA_Start_IT>:
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
 8004206:	2300      	movs	r3, #0
 8004208:	75fb      	strb	r3, [r7, #23]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_DMA_Start_IT+0x20>
 8004214:	2302      	movs	r3, #2
 8004216:	e04a      	b.n	80042ae <HAL_DMA_Start_IT+0xb6>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2020 	strb.w	r2, [r3, #32]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004226:	2b01      	cmp	r3, #1
 8004228:	d13a      	bne.n	80042a0 <HAL_DMA_Start_IT+0xa8>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2202      	movs	r2, #2
 800422e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	639a      	str	r2, [r3, #56]	; 0x38
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0201 	bic.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	68f8      	ldr	r0, [r7, #12]
 8004250:	f000 fbb0 	bl	80049b4 <DMA_SetConfig>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	2b00      	cmp	r3, #0
 800425a:	d008      	beq.n	800426e <HAL_DMA_Start_IT+0x76>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 020e 	orr.w	r2, r2, #14
 800426a:	601a      	str	r2, [r3, #0]
 800426c:	e00f      	b.n	800428e <HAL_DMA_Start_IT+0x96>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0204 	bic.w	r2, r2, #4
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 020a 	orr.w	r2, r2, #10
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f042 0201 	orr.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	e005      	b.n	80042ac <HAL_DMA_Start_IT+0xb4>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2020 	strb.w	r2, [r3, #32]
 80042a8:	2302      	movs	r3, #2
 80042aa:	75fb      	strb	r3, [r7, #23]
 80042ac:	7dfb      	ldrb	r3, [r7, #23]
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_DMA_Abort>:
 80042b6:	b480      	push	{r7}
 80042b8:	b085      	sub	sp, #20
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	2300      	movs	r3, #0
 80042c0:	73fb      	strb	r3, [r7, #15]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d008      	beq.n	80042de <HAL_DMA_Abort+0x28>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2204      	movs	r2, #4
 80042d0:	639a      	str	r2, [r3, #56]	; 0x38
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2020 	strb.w	r2, [r3, #32]
 80042da:	2301      	movs	r3, #1
 80042dc:	e020      	b.n	8004320 <HAL_DMA_Abort+0x6a>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f022 020e 	bic.w	r2, r2, #14
 80042ec:	601a      	str	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004306:	2101      	movs	r1, #1
 8004308:	fa01 f202 	lsl.w	r2, r1, r2
 800430c:	605a      	str	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 2020 	strb.w	r2, [r3, #32]
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	4618      	mov	r0, r3
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	bc80      	pop	{r7}
 8004328:	4770      	bx	lr
	...

0800432c <HAL_DMA_Abort_IT>:
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	2300      	movs	r3, #0
 8004336:	73fb      	strb	r3, [r7, #15]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800433e:	2b02      	cmp	r3, #2
 8004340:	d005      	beq.n	800434e <HAL_DMA_Abort_IT+0x22>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2204      	movs	r2, #4
 8004346:	639a      	str	r2, [r3, #56]	; 0x38
 8004348:	2301      	movs	r3, #1
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e0d6      	b.n	80044fc <HAL_DMA_Abort_IT+0x1d0>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 020e 	bic.w	r2, r2, #14
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f022 0201 	bic.w	r2, r2, #1
 800436c:	601a      	str	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	4b64      	ldr	r3, [pc, #400]	; (8004508 <HAL_DMA_Abort_IT+0x1dc>)
 8004376:	429a      	cmp	r2, r3
 8004378:	d958      	bls.n	800442c <HAL_DMA_Abort_IT+0x100>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a63      	ldr	r2, [pc, #396]	; (800450c <HAL_DMA_Abort_IT+0x1e0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d04f      	beq.n	8004424 <HAL_DMA_Abort_IT+0xf8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a61      	ldr	r2, [pc, #388]	; (8004510 <HAL_DMA_Abort_IT+0x1e4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d048      	beq.n	8004420 <HAL_DMA_Abort_IT+0xf4>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a60      	ldr	r2, [pc, #384]	; (8004514 <HAL_DMA_Abort_IT+0x1e8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d040      	beq.n	800441a <HAL_DMA_Abort_IT+0xee>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a5e      	ldr	r2, [pc, #376]	; (8004518 <HAL_DMA_Abort_IT+0x1ec>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d038      	beq.n	8004414 <HAL_DMA_Abort_IT+0xe8>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a5d      	ldr	r2, [pc, #372]	; (800451c <HAL_DMA_Abort_IT+0x1f0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d030      	beq.n	800440e <HAL_DMA_Abort_IT+0xe2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a5b      	ldr	r2, [pc, #364]	; (8004520 <HAL_DMA_Abort_IT+0x1f4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d028      	beq.n	8004408 <HAL_DMA_Abort_IT+0xdc>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a53      	ldr	r2, [pc, #332]	; (8004508 <HAL_DMA_Abort_IT+0x1dc>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d020      	beq.n	8004402 <HAL_DMA_Abort_IT+0xd6>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a57      	ldr	r2, [pc, #348]	; (8004524 <HAL_DMA_Abort_IT+0x1f8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d019      	beq.n	80043fe <HAL_DMA_Abort_IT+0xd2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a56      	ldr	r2, [pc, #344]	; (8004528 <HAL_DMA_Abort_IT+0x1fc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d012      	beq.n	80043fa <HAL_DMA_Abort_IT+0xce>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a54      	ldr	r2, [pc, #336]	; (800452c <HAL_DMA_Abort_IT+0x200>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00a      	beq.n	80043f4 <HAL_DMA_Abort_IT+0xc8>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a53      	ldr	r2, [pc, #332]	; (8004530 <HAL_DMA_Abort_IT+0x204>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d102      	bne.n	80043ee <HAL_DMA_Abort_IT+0xc2>
 80043e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ec:	e01b      	b.n	8004426 <HAL_DMA_Abort_IT+0xfa>
 80043ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043f2:	e018      	b.n	8004426 <HAL_DMA_Abort_IT+0xfa>
 80043f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043f8:	e015      	b.n	8004426 <HAL_DMA_Abort_IT+0xfa>
 80043fa:	2310      	movs	r3, #16
 80043fc:	e013      	b.n	8004426 <HAL_DMA_Abort_IT+0xfa>
 80043fe:	2301      	movs	r3, #1
 8004400:	e011      	b.n	8004426 <HAL_DMA_Abort_IT+0xfa>
 8004402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004406:	e00e      	b.n	8004426 <HAL_DMA_Abort_IT+0xfa>
 8004408:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800440c:	e00b      	b.n	8004426 <HAL_DMA_Abort_IT+0xfa>
 800440e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004412:	e008      	b.n	8004426 <HAL_DMA_Abort_IT+0xfa>
 8004414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004418:	e005      	b.n	8004426 <HAL_DMA_Abort_IT+0xfa>
 800441a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800441e:	e002      	b.n	8004426 <HAL_DMA_Abort_IT+0xfa>
 8004420:	2310      	movs	r3, #16
 8004422:	e000      	b.n	8004426 <HAL_DMA_Abort_IT+0xfa>
 8004424:	2301      	movs	r3, #1
 8004426:	4a43      	ldr	r2, [pc, #268]	; (8004534 <HAL_DMA_Abort_IT+0x208>)
 8004428:	6053      	str	r3, [r2, #4]
 800442a:	e057      	b.n	80044dc <HAL_DMA_Abort_IT+0x1b0>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a36      	ldr	r2, [pc, #216]	; (800450c <HAL_DMA_Abort_IT+0x1e0>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d04f      	beq.n	80044d6 <HAL_DMA_Abort_IT+0x1aa>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a35      	ldr	r2, [pc, #212]	; (8004510 <HAL_DMA_Abort_IT+0x1e4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d048      	beq.n	80044d2 <HAL_DMA_Abort_IT+0x1a6>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a33      	ldr	r2, [pc, #204]	; (8004514 <HAL_DMA_Abort_IT+0x1e8>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d040      	beq.n	80044cc <HAL_DMA_Abort_IT+0x1a0>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a32      	ldr	r2, [pc, #200]	; (8004518 <HAL_DMA_Abort_IT+0x1ec>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d038      	beq.n	80044c6 <HAL_DMA_Abort_IT+0x19a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a30      	ldr	r2, [pc, #192]	; (800451c <HAL_DMA_Abort_IT+0x1f0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d030      	beq.n	80044c0 <HAL_DMA_Abort_IT+0x194>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a2f      	ldr	r2, [pc, #188]	; (8004520 <HAL_DMA_Abort_IT+0x1f4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d028      	beq.n	80044ba <HAL_DMA_Abort_IT+0x18e>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a26      	ldr	r2, [pc, #152]	; (8004508 <HAL_DMA_Abort_IT+0x1dc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d020      	beq.n	80044b4 <HAL_DMA_Abort_IT+0x188>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2b      	ldr	r2, [pc, #172]	; (8004524 <HAL_DMA_Abort_IT+0x1f8>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d019      	beq.n	80044b0 <HAL_DMA_Abort_IT+0x184>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a29      	ldr	r2, [pc, #164]	; (8004528 <HAL_DMA_Abort_IT+0x1fc>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d012      	beq.n	80044ac <HAL_DMA_Abort_IT+0x180>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a28      	ldr	r2, [pc, #160]	; (800452c <HAL_DMA_Abort_IT+0x200>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00a      	beq.n	80044a6 <HAL_DMA_Abort_IT+0x17a>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a26      	ldr	r2, [pc, #152]	; (8004530 <HAL_DMA_Abort_IT+0x204>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d102      	bne.n	80044a0 <HAL_DMA_Abort_IT+0x174>
 800449a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800449e:	e01b      	b.n	80044d8 <HAL_DMA_Abort_IT+0x1ac>
 80044a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044a4:	e018      	b.n	80044d8 <HAL_DMA_Abort_IT+0x1ac>
 80044a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044aa:	e015      	b.n	80044d8 <HAL_DMA_Abort_IT+0x1ac>
 80044ac:	2310      	movs	r3, #16
 80044ae:	e013      	b.n	80044d8 <HAL_DMA_Abort_IT+0x1ac>
 80044b0:	2301      	movs	r3, #1
 80044b2:	e011      	b.n	80044d8 <HAL_DMA_Abort_IT+0x1ac>
 80044b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b8:	e00e      	b.n	80044d8 <HAL_DMA_Abort_IT+0x1ac>
 80044ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80044be:	e00b      	b.n	80044d8 <HAL_DMA_Abort_IT+0x1ac>
 80044c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044c4:	e008      	b.n	80044d8 <HAL_DMA_Abort_IT+0x1ac>
 80044c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044ca:	e005      	b.n	80044d8 <HAL_DMA_Abort_IT+0x1ac>
 80044cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044d0:	e002      	b.n	80044d8 <HAL_DMA_Abort_IT+0x1ac>
 80044d2:	2310      	movs	r3, #16
 80044d4:	e000      	b.n	80044d8 <HAL_DMA_Abort_IT+0x1ac>
 80044d6:	2301      	movs	r3, #1
 80044d8:	4a17      	ldr	r2, [pc, #92]	; (8004538 <HAL_DMA_Abort_IT+0x20c>)
 80044da:	6053      	str	r3, [r2, #4]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2020 	strb.w	r2, [r3, #32]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_DMA_Abort_IT+0x1d0>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4798      	blx	r3
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	4618      	mov	r0, r3
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40020080 	.word	0x40020080
 800450c:	40020008 	.word	0x40020008
 8004510:	4002001c 	.word	0x4002001c
 8004514:	40020030 	.word	0x40020030
 8004518:	40020044 	.word	0x40020044
 800451c:	40020058 	.word	0x40020058
 8004520:	4002006c 	.word	0x4002006c
 8004524:	40020408 	.word	0x40020408
 8004528:	4002041c 	.word	0x4002041c
 800452c:	40020430 	.word	0x40020430
 8004530:	40020444 	.word	0x40020444
 8004534:	40020400 	.word	0x40020400
 8004538:	40020000 	.word	0x40020000

0800453c <HAL_DMA_IRQHandler>:
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004558:	2204      	movs	r2, #4
 800455a:	409a      	lsls	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4013      	ands	r3, r2
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 80f1 	beq.w	8004748 <HAL_DMA_IRQHandler+0x20c>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	f000 80eb 	beq.w	8004748 <HAL_DMA_IRQHandler+0x20c>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	2b00      	cmp	r3, #0
 800457e:	d107      	bne.n	8004590 <HAL_DMA_IRQHandler+0x54>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0204 	bic.w	r2, r2, #4
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	4b5f      	ldr	r3, [pc, #380]	; (8004714 <HAL_DMA_IRQHandler+0x1d8>)
 8004598:	429a      	cmp	r2, r3
 800459a:	d958      	bls.n	800464e <HAL_DMA_IRQHandler+0x112>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a5d      	ldr	r2, [pc, #372]	; (8004718 <HAL_DMA_IRQHandler+0x1dc>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d04f      	beq.n	8004646 <HAL_DMA_IRQHandler+0x10a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a5c      	ldr	r2, [pc, #368]	; (800471c <HAL_DMA_IRQHandler+0x1e0>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d048      	beq.n	8004642 <HAL_DMA_IRQHandler+0x106>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a5a      	ldr	r2, [pc, #360]	; (8004720 <HAL_DMA_IRQHandler+0x1e4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d040      	beq.n	800463c <HAL_DMA_IRQHandler+0x100>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a59      	ldr	r2, [pc, #356]	; (8004724 <HAL_DMA_IRQHandler+0x1e8>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d038      	beq.n	8004636 <HAL_DMA_IRQHandler+0xfa>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a57      	ldr	r2, [pc, #348]	; (8004728 <HAL_DMA_IRQHandler+0x1ec>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d030      	beq.n	8004630 <HAL_DMA_IRQHandler+0xf4>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a56      	ldr	r2, [pc, #344]	; (800472c <HAL_DMA_IRQHandler+0x1f0>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d028      	beq.n	800462a <HAL_DMA_IRQHandler+0xee>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a4d      	ldr	r2, [pc, #308]	; (8004714 <HAL_DMA_IRQHandler+0x1d8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d020      	beq.n	8004624 <HAL_DMA_IRQHandler+0xe8>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a52      	ldr	r2, [pc, #328]	; (8004730 <HAL_DMA_IRQHandler+0x1f4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d019      	beq.n	8004620 <HAL_DMA_IRQHandler+0xe4>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a50      	ldr	r2, [pc, #320]	; (8004734 <HAL_DMA_IRQHandler+0x1f8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d012      	beq.n	800461c <HAL_DMA_IRQHandler+0xe0>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a4f      	ldr	r2, [pc, #316]	; (8004738 <HAL_DMA_IRQHandler+0x1fc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00a      	beq.n	8004616 <HAL_DMA_IRQHandler+0xda>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a4d      	ldr	r2, [pc, #308]	; (800473c <HAL_DMA_IRQHandler+0x200>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d102      	bne.n	8004610 <HAL_DMA_IRQHandler+0xd4>
 800460a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800460e:	e01b      	b.n	8004648 <HAL_DMA_IRQHandler+0x10c>
 8004610:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004614:	e018      	b.n	8004648 <HAL_DMA_IRQHandler+0x10c>
 8004616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800461a:	e015      	b.n	8004648 <HAL_DMA_IRQHandler+0x10c>
 800461c:	2340      	movs	r3, #64	; 0x40
 800461e:	e013      	b.n	8004648 <HAL_DMA_IRQHandler+0x10c>
 8004620:	2304      	movs	r3, #4
 8004622:	e011      	b.n	8004648 <HAL_DMA_IRQHandler+0x10c>
 8004624:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004628:	e00e      	b.n	8004648 <HAL_DMA_IRQHandler+0x10c>
 800462a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800462e:	e00b      	b.n	8004648 <HAL_DMA_IRQHandler+0x10c>
 8004630:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004634:	e008      	b.n	8004648 <HAL_DMA_IRQHandler+0x10c>
 8004636:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800463a:	e005      	b.n	8004648 <HAL_DMA_IRQHandler+0x10c>
 800463c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004640:	e002      	b.n	8004648 <HAL_DMA_IRQHandler+0x10c>
 8004642:	2340      	movs	r3, #64	; 0x40
 8004644:	e000      	b.n	8004648 <HAL_DMA_IRQHandler+0x10c>
 8004646:	2304      	movs	r3, #4
 8004648:	4a3d      	ldr	r2, [pc, #244]	; (8004740 <HAL_DMA_IRQHandler+0x204>)
 800464a:	6053      	str	r3, [r2, #4]
 800464c:	e057      	b.n	80046fe <HAL_DMA_IRQHandler+0x1c2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a31      	ldr	r2, [pc, #196]	; (8004718 <HAL_DMA_IRQHandler+0x1dc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d04f      	beq.n	80046f8 <HAL_DMA_IRQHandler+0x1bc>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a2f      	ldr	r2, [pc, #188]	; (800471c <HAL_DMA_IRQHandler+0x1e0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d048      	beq.n	80046f4 <HAL_DMA_IRQHandler+0x1b8>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2e      	ldr	r2, [pc, #184]	; (8004720 <HAL_DMA_IRQHandler+0x1e4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d040      	beq.n	80046ee <HAL_DMA_IRQHandler+0x1b2>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a2c      	ldr	r2, [pc, #176]	; (8004724 <HAL_DMA_IRQHandler+0x1e8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d038      	beq.n	80046e8 <HAL_DMA_IRQHandler+0x1ac>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a2b      	ldr	r2, [pc, #172]	; (8004728 <HAL_DMA_IRQHandler+0x1ec>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d030      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x1a6>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a29      	ldr	r2, [pc, #164]	; (800472c <HAL_DMA_IRQHandler+0x1f0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d028      	beq.n	80046dc <HAL_DMA_IRQHandler+0x1a0>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a21      	ldr	r2, [pc, #132]	; (8004714 <HAL_DMA_IRQHandler+0x1d8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d020      	beq.n	80046d6 <HAL_DMA_IRQHandler+0x19a>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a25      	ldr	r2, [pc, #148]	; (8004730 <HAL_DMA_IRQHandler+0x1f4>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d019      	beq.n	80046d2 <HAL_DMA_IRQHandler+0x196>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a24      	ldr	r2, [pc, #144]	; (8004734 <HAL_DMA_IRQHandler+0x1f8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d012      	beq.n	80046ce <HAL_DMA_IRQHandler+0x192>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a22      	ldr	r2, [pc, #136]	; (8004738 <HAL_DMA_IRQHandler+0x1fc>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00a      	beq.n	80046c8 <HAL_DMA_IRQHandler+0x18c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a21      	ldr	r2, [pc, #132]	; (800473c <HAL_DMA_IRQHandler+0x200>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d102      	bne.n	80046c2 <HAL_DMA_IRQHandler+0x186>
 80046bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046c0:	e01b      	b.n	80046fa <HAL_DMA_IRQHandler+0x1be>
 80046c2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046c6:	e018      	b.n	80046fa <HAL_DMA_IRQHandler+0x1be>
 80046c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046cc:	e015      	b.n	80046fa <HAL_DMA_IRQHandler+0x1be>
 80046ce:	2340      	movs	r3, #64	; 0x40
 80046d0:	e013      	b.n	80046fa <HAL_DMA_IRQHandler+0x1be>
 80046d2:	2304      	movs	r3, #4
 80046d4:	e011      	b.n	80046fa <HAL_DMA_IRQHandler+0x1be>
 80046d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80046da:	e00e      	b.n	80046fa <HAL_DMA_IRQHandler+0x1be>
 80046dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80046e0:	e00b      	b.n	80046fa <HAL_DMA_IRQHandler+0x1be>
 80046e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80046e6:	e008      	b.n	80046fa <HAL_DMA_IRQHandler+0x1be>
 80046e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046ec:	e005      	b.n	80046fa <HAL_DMA_IRQHandler+0x1be>
 80046ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046f2:	e002      	b.n	80046fa <HAL_DMA_IRQHandler+0x1be>
 80046f4:	2340      	movs	r3, #64	; 0x40
 80046f6:	e000      	b.n	80046fa <HAL_DMA_IRQHandler+0x1be>
 80046f8:	2304      	movs	r3, #4
 80046fa:	4a12      	ldr	r2, [pc, #72]	; (8004744 <HAL_DMA_IRQHandler+0x208>)
 80046fc:	6053      	str	r3, [r2, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 8136 	beq.w	8004974 <HAL_DMA_IRQHandler+0x438>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4798      	blx	r3
 8004710:	e130      	b.n	8004974 <HAL_DMA_IRQHandler+0x438>
 8004712:	bf00      	nop
 8004714:	40020080 	.word	0x40020080
 8004718:	40020008 	.word	0x40020008
 800471c:	4002001c 	.word	0x4002001c
 8004720:	40020030 	.word	0x40020030
 8004724:	40020044 	.word	0x40020044
 8004728:	40020058 	.word	0x40020058
 800472c:	4002006c 	.word	0x4002006c
 8004730:	40020408 	.word	0x40020408
 8004734:	4002041c 	.word	0x4002041c
 8004738:	40020430 	.word	0x40020430
 800473c:	40020444 	.word	0x40020444
 8004740:	40020400 	.word	0x40020400
 8004744:	40020000 	.word	0x40020000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	2202      	movs	r2, #2
 800474e:	409a      	lsls	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4013      	ands	r3, r2
 8004754:	2b00      	cmp	r3, #0
 8004756:	f000 80dd 	beq.w	8004914 <HAL_DMA_IRQHandler+0x3d8>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80d7 	beq.w	8004914 <HAL_DMA_IRQHandler+0x3d8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0320 	and.w	r3, r3, #32
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10b      	bne.n	800478c <HAL_DMA_IRQHandler+0x250>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 020a 	bic.w	r2, r2, #10
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	4b7b      	ldr	r3, [pc, #492]	; (8004980 <HAL_DMA_IRQHandler+0x444>)
 8004794:	429a      	cmp	r2, r3
 8004796:	d958      	bls.n	800484a <HAL_DMA_IRQHandler+0x30e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a79      	ldr	r2, [pc, #484]	; (8004984 <HAL_DMA_IRQHandler+0x448>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d04f      	beq.n	8004842 <HAL_DMA_IRQHandler+0x306>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a78      	ldr	r2, [pc, #480]	; (8004988 <HAL_DMA_IRQHandler+0x44c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d048      	beq.n	800483e <HAL_DMA_IRQHandler+0x302>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a76      	ldr	r2, [pc, #472]	; (800498c <HAL_DMA_IRQHandler+0x450>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d040      	beq.n	8004838 <HAL_DMA_IRQHandler+0x2fc>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a75      	ldr	r2, [pc, #468]	; (8004990 <HAL_DMA_IRQHandler+0x454>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d038      	beq.n	8004832 <HAL_DMA_IRQHandler+0x2f6>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a73      	ldr	r2, [pc, #460]	; (8004994 <HAL_DMA_IRQHandler+0x458>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d030      	beq.n	800482c <HAL_DMA_IRQHandler+0x2f0>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a72      	ldr	r2, [pc, #456]	; (8004998 <HAL_DMA_IRQHandler+0x45c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d028      	beq.n	8004826 <HAL_DMA_IRQHandler+0x2ea>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a69      	ldr	r2, [pc, #420]	; (8004980 <HAL_DMA_IRQHandler+0x444>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d020      	beq.n	8004820 <HAL_DMA_IRQHandler+0x2e4>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a6e      	ldr	r2, [pc, #440]	; (800499c <HAL_DMA_IRQHandler+0x460>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d019      	beq.n	800481c <HAL_DMA_IRQHandler+0x2e0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a6c      	ldr	r2, [pc, #432]	; (80049a0 <HAL_DMA_IRQHandler+0x464>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d012      	beq.n	8004818 <HAL_DMA_IRQHandler+0x2dc>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a6b      	ldr	r2, [pc, #428]	; (80049a4 <HAL_DMA_IRQHandler+0x468>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00a      	beq.n	8004812 <HAL_DMA_IRQHandler+0x2d6>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a69      	ldr	r2, [pc, #420]	; (80049a8 <HAL_DMA_IRQHandler+0x46c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d102      	bne.n	800480c <HAL_DMA_IRQHandler+0x2d0>
 8004806:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800480a:	e01b      	b.n	8004844 <HAL_DMA_IRQHandler+0x308>
 800480c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004810:	e018      	b.n	8004844 <HAL_DMA_IRQHandler+0x308>
 8004812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004816:	e015      	b.n	8004844 <HAL_DMA_IRQHandler+0x308>
 8004818:	2320      	movs	r3, #32
 800481a:	e013      	b.n	8004844 <HAL_DMA_IRQHandler+0x308>
 800481c:	2302      	movs	r3, #2
 800481e:	e011      	b.n	8004844 <HAL_DMA_IRQHandler+0x308>
 8004820:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004824:	e00e      	b.n	8004844 <HAL_DMA_IRQHandler+0x308>
 8004826:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800482a:	e00b      	b.n	8004844 <HAL_DMA_IRQHandler+0x308>
 800482c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004830:	e008      	b.n	8004844 <HAL_DMA_IRQHandler+0x308>
 8004832:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004836:	e005      	b.n	8004844 <HAL_DMA_IRQHandler+0x308>
 8004838:	f44f 7300 	mov.w	r3, #512	; 0x200
 800483c:	e002      	b.n	8004844 <HAL_DMA_IRQHandler+0x308>
 800483e:	2320      	movs	r3, #32
 8004840:	e000      	b.n	8004844 <HAL_DMA_IRQHandler+0x308>
 8004842:	2302      	movs	r3, #2
 8004844:	4a59      	ldr	r2, [pc, #356]	; (80049ac <HAL_DMA_IRQHandler+0x470>)
 8004846:	6053      	str	r3, [r2, #4]
 8004848:	e057      	b.n	80048fa <HAL_DMA_IRQHandler+0x3be>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a4d      	ldr	r2, [pc, #308]	; (8004984 <HAL_DMA_IRQHandler+0x448>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d04f      	beq.n	80048f4 <HAL_DMA_IRQHandler+0x3b8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a4b      	ldr	r2, [pc, #300]	; (8004988 <HAL_DMA_IRQHandler+0x44c>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d048      	beq.n	80048f0 <HAL_DMA_IRQHandler+0x3b4>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a4a      	ldr	r2, [pc, #296]	; (800498c <HAL_DMA_IRQHandler+0x450>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d040      	beq.n	80048ea <HAL_DMA_IRQHandler+0x3ae>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a48      	ldr	r2, [pc, #288]	; (8004990 <HAL_DMA_IRQHandler+0x454>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d038      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x3a8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a47      	ldr	r2, [pc, #284]	; (8004994 <HAL_DMA_IRQHandler+0x458>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d030      	beq.n	80048de <HAL_DMA_IRQHandler+0x3a2>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a45      	ldr	r2, [pc, #276]	; (8004998 <HAL_DMA_IRQHandler+0x45c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d028      	beq.n	80048d8 <HAL_DMA_IRQHandler+0x39c>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a3d      	ldr	r2, [pc, #244]	; (8004980 <HAL_DMA_IRQHandler+0x444>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d020      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x396>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a41      	ldr	r2, [pc, #260]	; (800499c <HAL_DMA_IRQHandler+0x460>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d019      	beq.n	80048ce <HAL_DMA_IRQHandler+0x392>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a40      	ldr	r2, [pc, #256]	; (80049a0 <HAL_DMA_IRQHandler+0x464>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d012      	beq.n	80048ca <HAL_DMA_IRQHandler+0x38e>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a3e      	ldr	r2, [pc, #248]	; (80049a4 <HAL_DMA_IRQHandler+0x468>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00a      	beq.n	80048c4 <HAL_DMA_IRQHandler+0x388>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a3d      	ldr	r2, [pc, #244]	; (80049a8 <HAL_DMA_IRQHandler+0x46c>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d102      	bne.n	80048be <HAL_DMA_IRQHandler+0x382>
 80048b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048bc:	e01b      	b.n	80048f6 <HAL_DMA_IRQHandler+0x3ba>
 80048be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048c2:	e018      	b.n	80048f6 <HAL_DMA_IRQHandler+0x3ba>
 80048c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048c8:	e015      	b.n	80048f6 <HAL_DMA_IRQHandler+0x3ba>
 80048ca:	2320      	movs	r3, #32
 80048cc:	e013      	b.n	80048f6 <HAL_DMA_IRQHandler+0x3ba>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e011      	b.n	80048f6 <HAL_DMA_IRQHandler+0x3ba>
 80048d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048d6:	e00e      	b.n	80048f6 <HAL_DMA_IRQHandler+0x3ba>
 80048d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048dc:	e00b      	b.n	80048f6 <HAL_DMA_IRQHandler+0x3ba>
 80048de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048e2:	e008      	b.n	80048f6 <HAL_DMA_IRQHandler+0x3ba>
 80048e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80048e8:	e005      	b.n	80048f6 <HAL_DMA_IRQHandler+0x3ba>
 80048ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048ee:	e002      	b.n	80048f6 <HAL_DMA_IRQHandler+0x3ba>
 80048f0:	2320      	movs	r3, #32
 80048f2:	e000      	b.n	80048f6 <HAL_DMA_IRQHandler+0x3ba>
 80048f4:	2302      	movs	r3, #2
 80048f6:	4a2e      	ldr	r2, [pc, #184]	; (80049b0 <HAL_DMA_IRQHandler+0x474>)
 80048f8:	6053      	str	r3, [r2, #4]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2020 	strb.w	r2, [r3, #32]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004906:	2b00      	cmp	r3, #0
 8004908:	d034      	beq.n	8004974 <HAL_DMA_IRQHandler+0x438>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	4798      	blx	r3
 8004912:	e02f      	b.n	8004974 <HAL_DMA_IRQHandler+0x438>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	2208      	movs	r2, #8
 800491a:	409a      	lsls	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4013      	ands	r3, r2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d028      	beq.n	8004976 <HAL_DMA_IRQHandler+0x43a>
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d023      	beq.n	8004976 <HAL_DMA_IRQHandler+0x43a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 020e 	bic.w	r2, r2, #14
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	2101      	movs	r1, #1
 8004948:	fa01 f202 	lsl.w	r2, r1, r2
 800494c:	605a      	str	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	639a      	str	r2, [r3, #56]	; 0x38
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2020 	strb.w	r2, [r3, #32]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004968:	2b00      	cmp	r3, #0
 800496a:	d004      	beq.n	8004976 <HAL_DMA_IRQHandler+0x43a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	4798      	blx	r3
 8004974:	bf00      	nop
 8004976:	bf00      	nop
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	40020080 	.word	0x40020080
 8004984:	40020008 	.word	0x40020008
 8004988:	4002001c 	.word	0x4002001c
 800498c:	40020030 	.word	0x40020030
 8004990:	40020044 	.word	0x40020044
 8004994:	40020058 	.word	0x40020058
 8004998:	4002006c 	.word	0x4002006c
 800499c:	40020408 	.word	0x40020408
 80049a0:	4002041c 	.word	0x4002041c
 80049a4:	40020430 	.word	0x40020430
 80049a8:	40020444 	.word	0x40020444
 80049ac:	40020400 	.word	0x40020400
 80049b0:	40020000 	.word	0x40020000

080049b4 <DMA_SetConfig>:
 80049b4:	b480      	push	{r7}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	607a      	str	r2, [r7, #4]
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ca:	2101      	movs	r1, #1
 80049cc:	fa01 f202 	lsl.w	r2, r1, r2
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	2b10      	cmp	r3, #16
 80049e0:	d108      	bne.n	80049f4 <DMA_SetConfig+0x40>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	609a      	str	r2, [r3, #8]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	60da      	str	r2, [r3, #12]
 80049f2:	e007      	b.n	8004a04 <DMA_SetConfig+0x50>
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68ba      	ldr	r2, [r7, #8]
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	60da      	str	r2, [r3, #12]
 8004a04:	bf00      	nop
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bc80      	pop	{r7}
 8004a0c:	4770      	bx	lr
	...

08004a10 <HAL_GPIO_Init>:
 8004a10:	b480      	push	{r7}
 8004a12:	b08b      	sub	sp, #44	; 0x2c
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1e:	2300      	movs	r3, #0
 8004a20:	623b      	str	r3, [r7, #32]
 8004a22:	e179      	b.n	8004d18 <HAL_GPIO_Init+0x308>
 8004a24:	2201      	movs	r2, #1
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	4013      	ands	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	f040 8168 	bne.w	8004d12 <HAL_GPIO_Init+0x302>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4a96      	ldr	r2, [pc, #600]	; (8004ca0 <HAL_GPIO_Init+0x290>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d05e      	beq.n	8004b0a <HAL_GPIO_Init+0xfa>
 8004a4c:	4a94      	ldr	r2, [pc, #592]	; (8004ca0 <HAL_GPIO_Init+0x290>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d875      	bhi.n	8004b3e <HAL_GPIO_Init+0x12e>
 8004a52:	4a94      	ldr	r2, [pc, #592]	; (8004ca4 <HAL_GPIO_Init+0x294>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d058      	beq.n	8004b0a <HAL_GPIO_Init+0xfa>
 8004a58:	4a92      	ldr	r2, [pc, #584]	; (8004ca4 <HAL_GPIO_Init+0x294>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d86f      	bhi.n	8004b3e <HAL_GPIO_Init+0x12e>
 8004a5e:	4a92      	ldr	r2, [pc, #584]	; (8004ca8 <HAL_GPIO_Init+0x298>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d052      	beq.n	8004b0a <HAL_GPIO_Init+0xfa>
 8004a64:	4a90      	ldr	r2, [pc, #576]	; (8004ca8 <HAL_GPIO_Init+0x298>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d869      	bhi.n	8004b3e <HAL_GPIO_Init+0x12e>
 8004a6a:	4a90      	ldr	r2, [pc, #576]	; (8004cac <HAL_GPIO_Init+0x29c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d04c      	beq.n	8004b0a <HAL_GPIO_Init+0xfa>
 8004a70:	4a8e      	ldr	r2, [pc, #568]	; (8004cac <HAL_GPIO_Init+0x29c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d863      	bhi.n	8004b3e <HAL_GPIO_Init+0x12e>
 8004a76:	4a8e      	ldr	r2, [pc, #568]	; (8004cb0 <HAL_GPIO_Init+0x2a0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d046      	beq.n	8004b0a <HAL_GPIO_Init+0xfa>
 8004a7c:	4a8c      	ldr	r2, [pc, #560]	; (8004cb0 <HAL_GPIO_Init+0x2a0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d85d      	bhi.n	8004b3e <HAL_GPIO_Init+0x12e>
 8004a82:	2b12      	cmp	r3, #18
 8004a84:	d82a      	bhi.n	8004adc <HAL_GPIO_Init+0xcc>
 8004a86:	2b12      	cmp	r3, #18
 8004a88:	d859      	bhi.n	8004b3e <HAL_GPIO_Init+0x12e>
 8004a8a:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <HAL_GPIO_Init+0x80>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004b0b 	.word	0x08004b0b
 8004a94:	08004ae5 	.word	0x08004ae5
 8004a98:	08004af7 	.word	0x08004af7
 8004a9c:	08004b39 	.word	0x08004b39
 8004aa0:	08004b3f 	.word	0x08004b3f
 8004aa4:	08004b3f 	.word	0x08004b3f
 8004aa8:	08004b3f 	.word	0x08004b3f
 8004aac:	08004b3f 	.word	0x08004b3f
 8004ab0:	08004b3f 	.word	0x08004b3f
 8004ab4:	08004b3f 	.word	0x08004b3f
 8004ab8:	08004b3f 	.word	0x08004b3f
 8004abc:	08004b3f 	.word	0x08004b3f
 8004ac0:	08004b3f 	.word	0x08004b3f
 8004ac4:	08004b3f 	.word	0x08004b3f
 8004ac8:	08004b3f 	.word	0x08004b3f
 8004acc:	08004b3f 	.word	0x08004b3f
 8004ad0:	08004b3f 	.word	0x08004b3f
 8004ad4:	08004aed 	.word	0x08004aed
 8004ad8:	08004b01 	.word	0x08004b01
 8004adc:	4a75      	ldr	r2, [pc, #468]	; (8004cb4 <HAL_GPIO_Init+0x2a4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <HAL_GPIO_Init+0xfa>
 8004ae2:	e02c      	b.n	8004b3e <HAL_GPIO_Init+0x12e>
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	623b      	str	r3, [r7, #32]
 8004aea:	e029      	b.n	8004b40 <HAL_GPIO_Init+0x130>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	3304      	adds	r3, #4
 8004af2:	623b      	str	r3, [r7, #32]
 8004af4:	e024      	b.n	8004b40 <HAL_GPIO_Init+0x130>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	3308      	adds	r3, #8
 8004afc:	623b      	str	r3, [r7, #32]
 8004afe:	e01f      	b.n	8004b40 <HAL_GPIO_Init+0x130>
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	330c      	adds	r3, #12
 8004b06:	623b      	str	r3, [r7, #32]
 8004b08:	e01a      	b.n	8004b40 <HAL_GPIO_Init+0x130>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d102      	bne.n	8004b18 <HAL_GPIO_Init+0x108>
 8004b12:	2304      	movs	r3, #4
 8004b14:	623b      	str	r3, [r7, #32]
 8004b16:	e013      	b.n	8004b40 <HAL_GPIO_Init+0x130>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d105      	bne.n	8004b2c <HAL_GPIO_Init+0x11c>
 8004b20:	2308      	movs	r3, #8
 8004b22:	623b      	str	r3, [r7, #32]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	611a      	str	r2, [r3, #16]
 8004b2a:	e009      	b.n	8004b40 <HAL_GPIO_Init+0x130>
 8004b2c:	2308      	movs	r3, #8
 8004b2e:	623b      	str	r3, [r7, #32]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	615a      	str	r2, [r3, #20]
 8004b36:	e003      	b.n	8004b40 <HAL_GPIO_Init+0x130>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	623b      	str	r3, [r7, #32]
 8004b3c:	e000      	b.n	8004b40 <HAL_GPIO_Init+0x130>
 8004b3e:	bf00      	nop
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	2bff      	cmp	r3, #255	; 0xff
 8004b44:	d801      	bhi.n	8004b4a <HAL_GPIO_Init+0x13a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	e001      	b.n	8004b4e <HAL_GPIO_Init+0x13e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2bff      	cmp	r3, #255	; 0xff
 8004b54:	d802      	bhi.n	8004b5c <HAL_GPIO_Init+0x14c>
 8004b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	e002      	b.n	8004b62 <HAL_GPIO_Init+0x152>
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	3b08      	subs	r3, #8
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	210f      	movs	r1, #15
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b70:	43db      	mvns	r3, r3
 8004b72:	401a      	ands	r2, r3
 8004b74:	6a39      	ldr	r1, [r7, #32]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f000 80c1 	beq.w	8004d12 <HAL_GPIO_Init+0x302>
 8004b90:	4b49      	ldr	r3, [pc, #292]	; (8004cb8 <HAL_GPIO_Init+0x2a8>)
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	4a48      	ldr	r2, [pc, #288]	; (8004cb8 <HAL_GPIO_Init+0x2a8>)
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	6193      	str	r3, [r2, #24]
 8004b9c:	4b46      	ldr	r3, [pc, #280]	; (8004cb8 <HAL_GPIO_Init+0x2a8>)
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4a44      	ldr	r2, [pc, #272]	; (8004cbc <HAL_GPIO_Init+0x2ac>)
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	089b      	lsrs	r3, r3, #2
 8004bae:	3302      	adds	r3, #2
 8004bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	f003 0303 	and.w	r3, r3, #3
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	220f      	movs	r2, #15
 8004bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc4:	43db      	mvns	r3, r3
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4013      	ands	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a3c      	ldr	r2, [pc, #240]	; (8004cc0 <HAL_GPIO_Init+0x2b0>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d01f      	beq.n	8004c14 <HAL_GPIO_Init+0x204>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a3b      	ldr	r2, [pc, #236]	; (8004cc4 <HAL_GPIO_Init+0x2b4>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d019      	beq.n	8004c10 <HAL_GPIO_Init+0x200>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a3a      	ldr	r2, [pc, #232]	; (8004cc8 <HAL_GPIO_Init+0x2b8>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d013      	beq.n	8004c0c <HAL_GPIO_Init+0x1fc>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a39      	ldr	r2, [pc, #228]	; (8004ccc <HAL_GPIO_Init+0x2bc>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00d      	beq.n	8004c08 <HAL_GPIO_Init+0x1f8>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	4a38      	ldr	r2, [pc, #224]	; (8004cd0 <HAL_GPIO_Init+0x2c0>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d007      	beq.n	8004c04 <HAL_GPIO_Init+0x1f4>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a37      	ldr	r2, [pc, #220]	; (8004cd4 <HAL_GPIO_Init+0x2c4>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d101      	bne.n	8004c00 <HAL_GPIO_Init+0x1f0>
 8004bfc:	2305      	movs	r3, #5
 8004bfe:	e00a      	b.n	8004c16 <HAL_GPIO_Init+0x206>
 8004c00:	2306      	movs	r3, #6
 8004c02:	e008      	b.n	8004c16 <HAL_GPIO_Init+0x206>
 8004c04:	2304      	movs	r3, #4
 8004c06:	e006      	b.n	8004c16 <HAL_GPIO_Init+0x206>
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e004      	b.n	8004c16 <HAL_GPIO_Init+0x206>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e002      	b.n	8004c16 <HAL_GPIO_Init+0x206>
 8004c10:	2301      	movs	r3, #1
 8004c12:	e000      	b.n	8004c16 <HAL_GPIO_Init+0x206>
 8004c14:	2300      	movs	r3, #0
 8004c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c18:	f002 0203 	and.w	r2, r2, #3
 8004c1c:	0092      	lsls	r2, r2, #2
 8004c1e:	4093      	lsls	r3, r2
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	4925      	ldr	r1, [pc, #148]	; (8004cbc <HAL_GPIO_Init+0x2ac>)
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	089b      	lsrs	r3, r3, #2
 8004c2c:	3302      	adds	r3, #2
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d006      	beq.n	8004c4e <HAL_GPIO_Init+0x23e>
 8004c40:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <HAL_GPIO_Init+0x2c8>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	4924      	ldr	r1, [pc, #144]	; (8004cd8 <HAL_GPIO_Init+0x2c8>)
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	600b      	str	r3, [r1, #0]
 8004c4c:	e006      	b.n	8004c5c <HAL_GPIO_Init+0x24c>
 8004c4e:	4b22      	ldr	r3, [pc, #136]	; (8004cd8 <HAL_GPIO_Init+0x2c8>)
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	43db      	mvns	r3, r3
 8004c56:	4920      	ldr	r1, [pc, #128]	; (8004cd8 <HAL_GPIO_Init+0x2c8>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	600b      	str	r3, [r1, #0]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d006      	beq.n	8004c76 <HAL_GPIO_Init+0x266>
 8004c68:	4b1b      	ldr	r3, [pc, #108]	; (8004cd8 <HAL_GPIO_Init+0x2c8>)
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	491a      	ldr	r1, [pc, #104]	; (8004cd8 <HAL_GPIO_Init+0x2c8>)
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	604b      	str	r3, [r1, #4]
 8004c74:	e006      	b.n	8004c84 <HAL_GPIO_Init+0x274>
 8004c76:	4b18      	ldr	r3, [pc, #96]	; (8004cd8 <HAL_GPIO_Init+0x2c8>)
 8004c78:	685a      	ldr	r2, [r3, #4]
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	4916      	ldr	r1, [pc, #88]	; (8004cd8 <HAL_GPIO_Init+0x2c8>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	604b      	str	r3, [r1, #4]
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d025      	beq.n	8004cdc <HAL_GPIO_Init+0x2cc>
 8004c90:	4b11      	ldr	r3, [pc, #68]	; (8004cd8 <HAL_GPIO_Init+0x2c8>)
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	4910      	ldr	r1, [pc, #64]	; (8004cd8 <HAL_GPIO_Init+0x2c8>)
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	608b      	str	r3, [r1, #8]
 8004c9c:	e025      	b.n	8004cea <HAL_GPIO_Init+0x2da>
 8004c9e:	bf00      	nop
 8004ca0:	10320000 	.word	0x10320000
 8004ca4:	10310000 	.word	0x10310000
 8004ca8:	10220000 	.word	0x10220000
 8004cac:	10210000 	.word	0x10210000
 8004cb0:	10120000 	.word	0x10120000
 8004cb4:	10110000 	.word	0x10110000
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	40010800 	.word	0x40010800
 8004cc4:	40010c00 	.word	0x40010c00
 8004cc8:	40011000 	.word	0x40011000
 8004ccc:	40011400 	.word	0x40011400
 8004cd0:	40011800 	.word	0x40011800
 8004cd4:	40011c00 	.word	0x40011c00
 8004cd8:	40010400 	.word	0x40010400
 8004cdc:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <HAL_GPIO_Init+0x324>)
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	4913      	ldr	r1, [pc, #76]	; (8004d34 <HAL_GPIO_Init+0x324>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	608b      	str	r3, [r1, #8]
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d006      	beq.n	8004d04 <HAL_GPIO_Init+0x2f4>
 8004cf6:	4b0f      	ldr	r3, [pc, #60]	; (8004d34 <HAL_GPIO_Init+0x324>)
 8004cf8:	68da      	ldr	r2, [r3, #12]
 8004cfa:	490e      	ldr	r1, [pc, #56]	; (8004d34 <HAL_GPIO_Init+0x324>)
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60cb      	str	r3, [r1, #12]
 8004d02:	e006      	b.n	8004d12 <HAL_GPIO_Init+0x302>
 8004d04:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <HAL_GPIO_Init+0x324>)
 8004d06:	68da      	ldr	r2, [r3, #12]
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	43db      	mvns	r3, r3
 8004d0c:	4909      	ldr	r1, [pc, #36]	; (8004d34 <HAL_GPIO_Init+0x324>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	60cb      	str	r3, [r1, #12]
 8004d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d14:	3301      	adds	r3, #1
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f47f ae7e 	bne.w	8004a24 <HAL_GPIO_Init+0x14>
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	372c      	adds	r7, #44	; 0x2c
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	40010400 	.word	0x40010400

08004d38 <HAL_GPIO_WritePin>:
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	460b      	mov	r3, r1
 8004d42:	807b      	strh	r3, [r7, #2]
 8004d44:	4613      	mov	r3, r2
 8004d46:	707b      	strb	r3, [r7, #1]
 8004d48:	787b      	ldrb	r3, [r7, #1]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_GPIO_WritePin+0x1e>
 8004d4e:	887a      	ldrh	r2, [r7, #2]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	611a      	str	r2, [r3, #16]
 8004d54:	e003      	b.n	8004d5e <HAL_GPIO_WritePin+0x26>
 8004d56:	887b      	ldrh	r3, [r7, #2]
 8004d58:	041a      	lsls	r2, r3, #16
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	611a      	str	r2, [r3, #16]
 8004d5e:	bf00      	nop
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr

08004d68 <HAL_I2C_Init>:
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_I2C_Init+0x12>
 8004d76:	2301      	movs	r3, #1
 8004d78:	e12b      	b.n	8004fd2 <HAL_I2C_Init+0x26a>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_I2C_Init+0x2c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fe fbf2 	bl	8003578 <HAL_I2C_MspInit>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2224      	movs	r2, #36	; 0x24
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0201 	bic.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	f000 fce6 	bl	800579c <HAL_RCC_GetPCLK1Freq>
 8004dd0:	60f8      	str	r0, [r7, #12]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4a81      	ldr	r2, [pc, #516]	; (8004fdc <HAL_I2C_Init+0x274>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d807      	bhi.n	8004dec <HAL_I2C_Init+0x84>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a80      	ldr	r2, [pc, #512]	; (8004fe0 <HAL_I2C_Init+0x278>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	bf94      	ite	ls
 8004de4:	2301      	movls	r3, #1
 8004de6:	2300      	movhi	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	e006      	b.n	8004dfa <HAL_I2C_Init+0x92>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4a7d      	ldr	r2, [pc, #500]	; (8004fe4 <HAL_I2C_Init+0x27c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	bf94      	ite	ls
 8004df4:	2301      	movls	r3, #1
 8004df6:	2300      	movhi	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_I2C_Init+0x9a>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e0e7      	b.n	8004fd2 <HAL_I2C_Init+0x26a>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4a78      	ldr	r2, [pc, #480]	; (8004fe8 <HAL_I2C_Init+0x280>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	0c9b      	lsrs	r3, r3, #18
 8004e0c:	60bb      	str	r3, [r7, #8]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	4a6a      	ldr	r2, [pc, #424]	; (8004fdc <HAL_I2C_Init+0x274>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d802      	bhi.n	8004e3c <HAL_I2C_Init+0xd4>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	e009      	b.n	8004e50 <HAL_I2C_Init+0xe8>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	4a69      	ldr	r2, [pc, #420]	; (8004fec <HAL_I2C_Init+0x284>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	099b      	lsrs	r3, r3, #6
 8004e4e:	3301      	adds	r3, #1
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	430b      	orrs	r3, r1
 8004e56:	6213      	str	r3, [r2, #32]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	495c      	ldr	r1, [pc, #368]	; (8004fdc <HAL_I2C_Init+0x274>)
 8004e6c:	428b      	cmp	r3, r1
 8004e6e:	d819      	bhi.n	8004ea4 <HAL_I2C_Init+0x13c>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	1e59      	subs	r1, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e7e:	1c59      	adds	r1, r3, #1
 8004e80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e84:	400b      	ands	r3, r1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <HAL_I2C_Init+0x138>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1e59      	subs	r1, r3, #1
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e98:	3301      	adds	r3, #1
 8004e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9e:	e051      	b.n	8004f44 <HAL_I2C_Init+0x1dc>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	e04f      	b.n	8004f44 <HAL_I2C_Init+0x1dc>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d111      	bne.n	8004ed0 <HAL_I2C_Init+0x168>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1e58      	subs	r0, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6859      	ldr	r1, [r3, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	440b      	add	r3, r1
 8004eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2301      	moveq	r3, #1
 8004eca:	2300      	movne	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	e012      	b.n	8004ef6 <HAL_I2C_Init+0x18e>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	1e58      	subs	r0, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6859      	ldr	r1, [r3, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	0099      	lsls	r1, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bf0c      	ite	eq
 8004ef0:	2301      	moveq	r3, #1
 8004ef2:	2300      	movne	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_I2C_Init+0x196>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e022      	b.n	8004f44 <HAL_I2C_Init+0x1dc>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10e      	bne.n	8004f24 <HAL_I2C_Init+0x1bc>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1e58      	subs	r0, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6859      	ldr	r1, [r3, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	440b      	add	r3, r1
 8004f14:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f18:	3301      	adds	r3, #1
 8004f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f22:	e00f      	b.n	8004f44 <HAL_I2C_Init+0x1dc>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	1e58      	subs	r0, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6859      	ldr	r1, [r3, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	0099      	lsls	r1, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	6809      	ldr	r1, [r1, #0]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	61cb      	str	r3, [r1, #28]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69da      	ldr	r2, [r3, #28]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6911      	ldr	r1, [r2, #16]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	68d2      	ldr	r2, [r2, #12]
 8004f7e:	4311      	orrs	r1, r2
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6812      	ldr	r2, [r2, #0]
 8004f84:	430b      	orrs	r3, r1
 8004f86:	6093      	str	r3, [r2, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	60da      	str	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	641a      	str	r2, [r3, #64]	; 0x40
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	; 0x30
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	000186a0 	.word	0x000186a0
 8004fe0:	001e847f 	.word	0x001e847f
 8004fe4:	003d08ff 	.word	0x003d08ff
 8004fe8:	431bde83 	.word	0x431bde83
 8004fec:	10624dd3 	.word	0x10624dd3

08004ff0 <HAL_RCC_OscConfig>:
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_RCC_OscConfig+0x12>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e272      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0301 	and.w	r3, r3, #1
 800500a:	2b00      	cmp	r3, #0
 800500c:	f000 8087 	beq.w	800511e <HAL_RCC_OscConfig+0x12e>
 8005010:	4b92      	ldr	r3, [pc, #584]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f003 030c 	and.w	r3, r3, #12
 8005018:	2b04      	cmp	r3, #4
 800501a:	d00c      	beq.n	8005036 <HAL_RCC_OscConfig+0x46>
 800501c:	4b8f      	ldr	r3, [pc, #572]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f003 030c 	and.w	r3, r3, #12
 8005024:	2b08      	cmp	r3, #8
 8005026:	d112      	bne.n	800504e <HAL_RCC_OscConfig+0x5e>
 8005028:	4b8c      	ldr	r3, [pc, #560]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005034:	d10b      	bne.n	800504e <HAL_RCC_OscConfig+0x5e>
 8005036:	4b89      	ldr	r3, [pc, #548]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d06c      	beq.n	800511c <HAL_RCC_OscConfig+0x12c>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d168      	bne.n	800511c <HAL_RCC_OscConfig+0x12c>
 800504a:	2301      	movs	r3, #1
 800504c:	e24c      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005056:	d106      	bne.n	8005066 <HAL_RCC_OscConfig+0x76>
 8005058:	4b80      	ldr	r3, [pc, #512]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a7f      	ldr	r2, [pc, #508]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 800505e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005062:	6013      	str	r3, [r2, #0]
 8005064:	e02e      	b.n	80050c4 <HAL_RCC_OscConfig+0xd4>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10c      	bne.n	8005088 <HAL_RCC_OscConfig+0x98>
 800506e:	4b7b      	ldr	r3, [pc, #492]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a7a      	ldr	r2, [pc, #488]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 8005074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	4b78      	ldr	r3, [pc, #480]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a77      	ldr	r2, [pc, #476]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 8005080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005084:	6013      	str	r3, [r2, #0]
 8005086:	e01d      	b.n	80050c4 <HAL_RCC_OscConfig+0xd4>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005090:	d10c      	bne.n	80050ac <HAL_RCC_OscConfig+0xbc>
 8005092:	4b72      	ldr	r3, [pc, #456]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a71      	ldr	r2, [pc, #452]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 8005098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	4b6f      	ldr	r3, [pc, #444]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a6e      	ldr	r2, [pc, #440]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 80050a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e00b      	b.n	80050c4 <HAL_RCC_OscConfig+0xd4>
 80050ac:	4b6b      	ldr	r3, [pc, #428]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a6a      	ldr	r2, [pc, #424]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 80050b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	4b68      	ldr	r3, [pc, #416]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a67      	ldr	r2, [pc, #412]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 80050be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d013      	beq.n	80050f4 <HAL_RCC_OscConfig+0x104>
 80050cc:	f7fe fee2 	bl	8003e94 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0xf6>
 80050d4:	f7fe fede 	bl	8003e94 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b64      	cmp	r3, #100	; 0x64
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0xf6>
 80050e2:	2303      	movs	r3, #3
 80050e4:	e200      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 80050e6:	4b5d      	ldr	r3, [pc, #372]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0f0      	beq.n	80050d4 <HAL_RCC_OscConfig+0xe4>
 80050f2:	e014      	b.n	800511e <HAL_RCC_OscConfig+0x12e>
 80050f4:	f7fe fece 	bl	8003e94 <HAL_GetTick>
 80050f8:	6138      	str	r0, [r7, #16]
 80050fa:	e008      	b.n	800510e <HAL_RCC_OscConfig+0x11e>
 80050fc:	f7fe feca 	bl	8003e94 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b64      	cmp	r3, #100	; 0x64
 8005108:	d901      	bls.n	800510e <HAL_RCC_OscConfig+0x11e>
 800510a:	2303      	movs	r3, #3
 800510c:	e1ec      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 800510e:	4b53      	ldr	r3, [pc, #332]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1f0      	bne.n	80050fc <HAL_RCC_OscConfig+0x10c>
 800511a:	e000      	b.n	800511e <HAL_RCC_OscConfig+0x12e>
 800511c:	bf00      	nop
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d063      	beq.n	80051f2 <HAL_RCC_OscConfig+0x202>
 800512a:	4b4c      	ldr	r3, [pc, #304]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f003 030c 	and.w	r3, r3, #12
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00b      	beq.n	800514e <HAL_RCC_OscConfig+0x15e>
 8005136:	4b49      	ldr	r3, [pc, #292]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f003 030c 	and.w	r3, r3, #12
 800513e:	2b08      	cmp	r3, #8
 8005140:	d11c      	bne.n	800517c <HAL_RCC_OscConfig+0x18c>
 8005142:	4b46      	ldr	r3, [pc, #280]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d116      	bne.n	800517c <HAL_RCC_OscConfig+0x18c>
 800514e:	4b43      	ldr	r3, [pc, #268]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d005      	beq.n	8005166 <HAL_RCC_OscConfig+0x176>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b01      	cmp	r3, #1
 8005160:	d001      	beq.n	8005166 <HAL_RCC_OscConfig+0x176>
 8005162:	2301      	movs	r3, #1
 8005164:	e1c0      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 8005166:	4b3d      	ldr	r3, [pc, #244]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	4939      	ldr	r1, [pc, #228]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 8005176:	4313      	orrs	r3, r2
 8005178:	600b      	str	r3, [r1, #0]
 800517a:	e03a      	b.n	80051f2 <HAL_RCC_OscConfig+0x202>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d020      	beq.n	80051c6 <HAL_RCC_OscConfig+0x1d6>
 8005184:	4b36      	ldr	r3, [pc, #216]	; (8005260 <HAL_RCC_OscConfig+0x270>)
 8005186:	2201      	movs	r2, #1
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	f7fe fe83 	bl	8003e94 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x1b4>
 8005192:	f7fe fe7f 	bl	8003e94 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x1b4>
 80051a0:	2303      	movs	r3, #3
 80051a2:	e1a1      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 80051a4:	4b2d      	ldr	r3, [pc, #180]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x1a2>
 80051b0:	4b2a      	ldr	r3, [pc, #168]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	695b      	ldr	r3, [r3, #20]
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	4927      	ldr	r1, [pc, #156]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	600b      	str	r3, [r1, #0]
 80051c4:	e015      	b.n	80051f2 <HAL_RCC_OscConfig+0x202>
 80051c6:	4b26      	ldr	r3, [pc, #152]	; (8005260 <HAL_RCC_OscConfig+0x270>)
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
 80051cc:	f7fe fe62 	bl	8003e94 <HAL_GetTick>
 80051d0:	6138      	str	r0, [r7, #16]
 80051d2:	e008      	b.n	80051e6 <HAL_RCC_OscConfig+0x1f6>
 80051d4:	f7fe fe5e 	bl	8003e94 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_OscConfig+0x1f6>
 80051e2:	2303      	movs	r3, #3
 80051e4:	e180      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 80051e6:	4b1d      	ldr	r3, [pc, #116]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f0      	bne.n	80051d4 <HAL_RCC_OscConfig+0x1e4>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d03a      	beq.n	8005274 <HAL_RCC_OscConfig+0x284>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d019      	beq.n	800523a <HAL_RCC_OscConfig+0x24a>
 8005206:	4b17      	ldr	r3, [pc, #92]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 8005208:	2201      	movs	r2, #1
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	f7fe fe42 	bl	8003e94 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x236>
 8005214:	f7fe fe3e 	bl	8003e94 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x236>
 8005222:	2303      	movs	r3, #3
 8005224:	e160      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 8005226:	4b0d      	ldr	r3, [pc, #52]	; (800525c <HAL_RCC_OscConfig+0x26c>)
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0x224>
 8005232:	2001      	movs	r0, #1
 8005234:	f000 fada 	bl	80057ec <RCC_Delay>
 8005238:	e01c      	b.n	8005274 <HAL_RCC_OscConfig+0x284>
 800523a:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <HAL_RCC_OscConfig+0x274>)
 800523c:	2200      	movs	r2, #0
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	f7fe fe28 	bl	8003e94 <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]
 8005246:	e00f      	b.n	8005268 <HAL_RCC_OscConfig+0x278>
 8005248:	f7fe fe24 	bl	8003e94 <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d908      	bls.n	8005268 <HAL_RCC_OscConfig+0x278>
 8005256:	2303      	movs	r3, #3
 8005258:	e146      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 800525a:	bf00      	nop
 800525c:	40021000 	.word	0x40021000
 8005260:	42420000 	.word	0x42420000
 8005264:	42420480 	.word	0x42420480
 8005268:	4b92      	ldr	r3, [pc, #584]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e9      	bne.n	8005248 <HAL_RCC_OscConfig+0x258>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 0304 	and.w	r3, r3, #4
 800527c:	2b00      	cmp	r3, #0
 800527e:	f000 80a6 	beq.w	80053ce <HAL_RCC_OscConfig+0x3de>
 8005282:	2300      	movs	r3, #0
 8005284:	75fb      	strb	r3, [r7, #23]
 8005286:	4b8b      	ldr	r3, [pc, #556]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10d      	bne.n	80052ae <HAL_RCC_OscConfig+0x2be>
 8005292:	4b88      	ldr	r3, [pc, #544]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	4a87      	ldr	r2, [pc, #540]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 8005298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529c:	61d3      	str	r3, [r2, #28]
 800529e:	4b85      	ldr	r3, [pc, #532]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a6:	60bb      	str	r3, [r7, #8]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2301      	movs	r3, #1
 80052ac:	75fb      	strb	r3, [r7, #23]
 80052ae:	4b82      	ldr	r3, [pc, #520]	; (80054b8 <HAL_RCC_OscConfig+0x4c8>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d118      	bne.n	80052ec <HAL_RCC_OscConfig+0x2fc>
 80052ba:	4b7f      	ldr	r3, [pc, #508]	; (80054b8 <HAL_RCC_OscConfig+0x4c8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a7e      	ldr	r2, [pc, #504]	; (80054b8 <HAL_RCC_OscConfig+0x4c8>)
 80052c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	f7fe fde5 	bl	8003e94 <HAL_GetTick>
 80052ca:	6138      	str	r0, [r7, #16]
 80052cc:	e008      	b.n	80052e0 <HAL_RCC_OscConfig+0x2f0>
 80052ce:	f7fe fde1 	bl	8003e94 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	2b64      	cmp	r3, #100	; 0x64
 80052da:	d901      	bls.n	80052e0 <HAL_RCC_OscConfig+0x2f0>
 80052dc:	2303      	movs	r3, #3
 80052de:	e103      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 80052e0:	4b75      	ldr	r3, [pc, #468]	; (80054b8 <HAL_RCC_OscConfig+0x4c8>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0f0      	beq.n	80052ce <HAL_RCC_OscConfig+0x2de>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d106      	bne.n	8005302 <HAL_RCC_OscConfig+0x312>
 80052f4:	4b6f      	ldr	r3, [pc, #444]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	4a6e      	ldr	r2, [pc, #440]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 80052fa:	f043 0301 	orr.w	r3, r3, #1
 80052fe:	6213      	str	r3, [r2, #32]
 8005300:	e02d      	b.n	800535e <HAL_RCC_OscConfig+0x36e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10c      	bne.n	8005324 <HAL_RCC_OscConfig+0x334>
 800530a:	4b6a      	ldr	r3, [pc, #424]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	4a69      	ldr	r2, [pc, #420]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 8005310:	f023 0301 	bic.w	r3, r3, #1
 8005314:	6213      	str	r3, [r2, #32]
 8005316:	4b67      	ldr	r3, [pc, #412]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 8005318:	6a1b      	ldr	r3, [r3, #32]
 800531a:	4a66      	ldr	r2, [pc, #408]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 800531c:	f023 0304 	bic.w	r3, r3, #4
 8005320:	6213      	str	r3, [r2, #32]
 8005322:	e01c      	b.n	800535e <HAL_RCC_OscConfig+0x36e>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	2b05      	cmp	r3, #5
 800532a:	d10c      	bne.n	8005346 <HAL_RCC_OscConfig+0x356>
 800532c:	4b61      	ldr	r3, [pc, #388]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 800532e:	6a1b      	ldr	r3, [r3, #32]
 8005330:	4a60      	ldr	r2, [pc, #384]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 8005332:	f043 0304 	orr.w	r3, r3, #4
 8005336:	6213      	str	r3, [r2, #32]
 8005338:	4b5e      	ldr	r3, [pc, #376]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 800533a:	6a1b      	ldr	r3, [r3, #32]
 800533c:	4a5d      	ldr	r2, [pc, #372]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	6213      	str	r3, [r2, #32]
 8005344:	e00b      	b.n	800535e <HAL_RCC_OscConfig+0x36e>
 8005346:	4b5b      	ldr	r3, [pc, #364]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	4a5a      	ldr	r2, [pc, #360]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 800534c:	f023 0301 	bic.w	r3, r3, #1
 8005350:	6213      	str	r3, [r2, #32]
 8005352:	4b58      	ldr	r3, [pc, #352]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	4a57      	ldr	r2, [pc, #348]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 8005358:	f023 0304 	bic.w	r3, r3, #4
 800535c:	6213      	str	r3, [r2, #32]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d015      	beq.n	8005392 <HAL_RCC_OscConfig+0x3a2>
 8005366:	f7fe fd95 	bl	8003e94 <HAL_GetTick>
 800536a:	6138      	str	r0, [r7, #16]
 800536c:	e00a      	b.n	8005384 <HAL_RCC_OscConfig+0x394>
 800536e:	f7fe fd91 	bl	8003e94 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	f241 3288 	movw	r2, #5000	; 0x1388
 800537c:	4293      	cmp	r3, r2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x394>
 8005380:	2303      	movs	r3, #3
 8005382:	e0b1      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 8005384:	4b4b      	ldr	r3, [pc, #300]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 8005386:	6a1b      	ldr	r3, [r3, #32]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0ee      	beq.n	800536e <HAL_RCC_OscConfig+0x37e>
 8005390:	e014      	b.n	80053bc <HAL_RCC_OscConfig+0x3cc>
 8005392:	f7fe fd7f 	bl	8003e94 <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]
 8005398:	e00a      	b.n	80053b0 <HAL_RCC_OscConfig+0x3c0>
 800539a:	f7fe fd7b 	bl	8003e94 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d901      	bls.n	80053b0 <HAL_RCC_OscConfig+0x3c0>
 80053ac:	2303      	movs	r3, #3
 80053ae:	e09b      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 80053b0:	4b40      	ldr	r3, [pc, #256]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ee      	bne.n	800539a <HAL_RCC_OscConfig+0x3aa>
 80053bc:	7dfb      	ldrb	r3, [r7, #23]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d105      	bne.n	80053ce <HAL_RCC_OscConfig+0x3de>
 80053c2:	4b3c      	ldr	r3, [pc, #240]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	4a3b      	ldr	r2, [pc, #236]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 80053c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053cc:	61d3      	str	r3, [r2, #28]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8087 	beq.w	80054e6 <HAL_RCC_OscConfig+0x4f6>
 80053d8:	4b36      	ldr	r3, [pc, #216]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 030c 	and.w	r3, r3, #12
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d061      	beq.n	80054a8 <HAL_RCC_OscConfig+0x4b8>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d146      	bne.n	800547a <HAL_RCC_OscConfig+0x48a>
 80053ec:	4b33      	ldr	r3, [pc, #204]	; (80054bc <HAL_RCC_OscConfig+0x4cc>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	f7fe fd4f 	bl	8003e94 <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]
 80053f8:	e008      	b.n	800540c <HAL_RCC_OscConfig+0x41c>
 80053fa:	f7fe fd4b 	bl	8003e94 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x41c>
 8005408:	2303      	movs	r3, #3
 800540a:	e06d      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 800540c:	4b29      	ldr	r3, [pc, #164]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f0      	bne.n	80053fa <HAL_RCC_OscConfig+0x40a>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005420:	d108      	bne.n	8005434 <HAL_RCC_OscConfig+0x444>
 8005422:	4b24      	ldr	r3, [pc, #144]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	4921      	ldr	r1, [pc, #132]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 8005430:	4313      	orrs	r3, r2
 8005432:	604b      	str	r3, [r1, #4]
 8005434:	4b1f      	ldr	r3, [pc, #124]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a19      	ldr	r1, [r3, #32]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	430b      	orrs	r3, r1
 8005446:	491b      	ldr	r1, [pc, #108]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 8005448:	4313      	orrs	r3, r2
 800544a:	604b      	str	r3, [r1, #4]
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <HAL_RCC_OscConfig+0x4cc>)
 800544e:	2201      	movs	r2, #1
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	f7fe fd1f 	bl	8003e94 <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x47c>
 800545a:	f7fe fd1b 	bl	8003e94 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x47c>
 8005468:	2303      	movs	r3, #3
 800546a:	e03d      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 800546c:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0f0      	beq.n	800545a <HAL_RCC_OscConfig+0x46a>
 8005478:	e035      	b.n	80054e6 <HAL_RCC_OscConfig+0x4f6>
 800547a:	4b10      	ldr	r3, [pc, #64]	; (80054bc <HAL_RCC_OscConfig+0x4cc>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	f7fe fd08 	bl	8003e94 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x4aa>
 8005488:	f7fe fd04 	bl	8003e94 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x4aa>
 8005496:	2303      	movs	r3, #3
 8005498:	e026      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 800549a:	4b06      	ldr	r3, [pc, #24]	; (80054b4 <HAL_RCC_OscConfig+0x4c4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1f0      	bne.n	8005488 <HAL_RCC_OscConfig+0x498>
 80054a6:	e01e      	b.n	80054e6 <HAL_RCC_OscConfig+0x4f6>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	69db      	ldr	r3, [r3, #28]
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d107      	bne.n	80054c0 <HAL_RCC_OscConfig+0x4d0>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e019      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 80054b4:	40021000 	.word	0x40021000
 80054b8:	40007000 	.word	0x40007000
 80054bc:	42420060 	.word	0x42420060
 80054c0:	4b0b      	ldr	r3, [pc, #44]	; (80054f0 <HAL_RCC_OscConfig+0x500>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d106      	bne.n	80054e2 <HAL_RCC_OscConfig+0x4f2>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054de:	429a      	cmp	r2, r3
 80054e0:	d001      	beq.n	80054e6 <HAL_RCC_OscConfig+0x4f6>
 80054e2:	2301      	movs	r3, #1
 80054e4:	e000      	b.n	80054e8 <HAL_RCC_OscConfig+0x4f8>
 80054e6:	2300      	movs	r3, #0
 80054e8:	4618      	mov	r0, r3
 80054ea:	3718      	adds	r7, #24
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	40021000 	.word	0x40021000

080054f4 <HAL_RCC_ClockConfig>:
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <HAL_RCC_ClockConfig+0x14>
 8005504:	2301      	movs	r3, #1
 8005506:	e0d0      	b.n	80056aa <HAL_RCC_ClockConfig+0x1b6>
 8005508:	4b6a      	ldr	r3, [pc, #424]	; (80056b4 <HAL_RCC_ClockConfig+0x1c0>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d910      	bls.n	8005538 <HAL_RCC_ClockConfig+0x44>
 8005516:	4b67      	ldr	r3, [pc, #412]	; (80056b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f023 0207 	bic.w	r2, r3, #7
 800551e:	4965      	ldr	r1, [pc, #404]	; (80056b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	4313      	orrs	r3, r2
 8005524:	600b      	str	r3, [r1, #0]
 8005526:	4b63      	ldr	r3, [pc, #396]	; (80056b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	d001      	beq.n	8005538 <HAL_RCC_ClockConfig+0x44>
 8005534:	2301      	movs	r3, #1
 8005536:	e0b8      	b.n	80056aa <HAL_RCC_ClockConfig+0x1b6>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d020      	beq.n	8005586 <HAL_RCC_ClockConfig+0x92>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d005      	beq.n	800555c <HAL_RCC_ClockConfig+0x68>
 8005550:	4b59      	ldr	r3, [pc, #356]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	4a58      	ldr	r2, [pc, #352]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005556:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800555a:	6053      	str	r3, [r2, #4]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_RCC_ClockConfig+0x80>
 8005568:	4b53      	ldr	r3, [pc, #332]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4a52      	ldr	r2, [pc, #328]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 800556e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005572:	6053      	str	r3, [r2, #4]
 8005574:	4b50      	ldr	r3, [pc, #320]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	494d      	ldr	r1, [pc, #308]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005582:	4313      	orrs	r3, r2
 8005584:	604b      	str	r3, [r1, #4]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	2b00      	cmp	r3, #0
 8005590:	d040      	beq.n	8005614 <HAL_RCC_ClockConfig+0x120>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d107      	bne.n	80055aa <HAL_RCC_ClockConfig+0xb6>
 800559a:	4b47      	ldr	r3, [pc, #284]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d115      	bne.n	80055d2 <HAL_RCC_ClockConfig+0xde>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e07f      	b.n	80056aa <HAL_RCC_ClockConfig+0x1b6>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d107      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xce>
 80055b2:	4b41      	ldr	r3, [pc, #260]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <HAL_RCC_ClockConfig+0xde>
 80055be:	2301      	movs	r3, #1
 80055c0:	e073      	b.n	80056aa <HAL_RCC_ClockConfig+0x1b6>
 80055c2:	4b3d      	ldr	r3, [pc, #244]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_RCC_ClockConfig+0xde>
 80055ce:	2301      	movs	r3, #1
 80055d0:	e06b      	b.n	80056aa <HAL_RCC_ClockConfig+0x1b6>
 80055d2:	4b39      	ldr	r3, [pc, #228]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f023 0203 	bic.w	r2, r3, #3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	4936      	ldr	r1, [pc, #216]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	604b      	str	r3, [r1, #4]
 80055e4:	f7fe fc56 	bl	8003e94 <HAL_GetTick>
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	e00a      	b.n	8005602 <HAL_RCC_ClockConfig+0x10e>
 80055ec:	f7fe fc52 	bl	8003e94 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_ClockConfig+0x10e>
 80055fe:	2303      	movs	r3, #3
 8005600:	e053      	b.n	80056aa <HAL_RCC_ClockConfig+0x1b6>
 8005602:	4b2d      	ldr	r3, [pc, #180]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	f003 020c 	and.w	r2, r3, #12
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	429a      	cmp	r2, r3
 8005612:	d1eb      	bne.n	80055ec <HAL_RCC_ClockConfig+0xf8>
 8005614:	4b27      	ldr	r3, [pc, #156]	; (80056b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d210      	bcs.n	8005644 <HAL_RCC_ClockConfig+0x150>
 8005622:	4b24      	ldr	r3, [pc, #144]	; (80056b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f023 0207 	bic.w	r2, r3, #7
 800562a:	4922      	ldr	r1, [pc, #136]	; (80056b4 <HAL_RCC_ClockConfig+0x1c0>)
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	4313      	orrs	r3, r2
 8005630:	600b      	str	r3, [r1, #0]
 8005632:	4b20      	ldr	r3, [pc, #128]	; (80056b4 <HAL_RCC_ClockConfig+0x1c0>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d001      	beq.n	8005644 <HAL_RCC_ClockConfig+0x150>
 8005640:	2301      	movs	r3, #1
 8005642:	e032      	b.n	80056aa <HAL_RCC_ClockConfig+0x1b6>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0304 	and.w	r3, r3, #4
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <HAL_RCC_ClockConfig+0x16e>
 8005650:	4b19      	ldr	r3, [pc, #100]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	4916      	ldr	r1, [pc, #88]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 800565e:	4313      	orrs	r3, r2
 8005660:	604b      	str	r3, [r1, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d009      	beq.n	8005682 <HAL_RCC_ClockConfig+0x18e>
 800566e:	4b12      	ldr	r3, [pc, #72]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	490e      	ldr	r1, [pc, #56]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 800567e:	4313      	orrs	r3, r2
 8005680:	604b      	str	r3, [r1, #4]
 8005682:	f000 f821 	bl	80056c8 <HAL_RCC_GetSysClockFreq>
 8005686:	4602      	mov	r2, r0
 8005688:	4b0b      	ldr	r3, [pc, #44]	; (80056b8 <HAL_RCC_ClockConfig+0x1c4>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	091b      	lsrs	r3, r3, #4
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	490a      	ldr	r1, [pc, #40]	; (80056bc <HAL_RCC_ClockConfig+0x1c8>)
 8005694:	5ccb      	ldrb	r3, [r1, r3]
 8005696:	fa22 f303 	lsr.w	r3, r2, r3
 800569a:	4a09      	ldr	r2, [pc, #36]	; (80056c0 <HAL_RCC_ClockConfig+0x1cc>)
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	4b09      	ldr	r3, [pc, #36]	; (80056c4 <HAL_RCC_ClockConfig+0x1d0>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fe fbb4 	bl	8003e10 <HAL_InitTick>
 80056a8:	2300      	movs	r3, #0
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40022000 	.word	0x40022000
 80056b8:	40021000 	.word	0x40021000
 80056bc:	080099b4 	.word	0x080099b4
 80056c0:	20000004 	.word	0x20000004
 80056c4:	20000008 	.word	0x20000008

080056c8 <HAL_RCC_GetSysClockFreq>:
 80056c8:	b490      	push	{r4, r7}
 80056ca:	b08a      	sub	sp, #40	; 0x28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4b29      	ldr	r3, [pc, #164]	; (8005774 <HAL_RCC_GetSysClockFreq+0xac>)
 80056d0:	1d3c      	adds	r4, r7, #4
 80056d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80056d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80056d8:	f240 2301 	movw	r3, #513	; 0x201
 80056dc:	803b      	strh	r3, [r7, #0]
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
 80056e2:	2300      	movs	r3, #0
 80056e4:	61bb      	str	r3, [r7, #24]
 80056e6:	2300      	movs	r3, #0
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ea:	2300      	movs	r3, #0
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	2300      	movs	r3, #0
 80056f0:	623b      	str	r3, [r7, #32]
 80056f2:	4b21      	ldr	r3, [pc, #132]	; (8005778 <HAL_RCC_GetSysClockFreq+0xb0>)
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	f003 030c 	and.w	r3, r3, #12
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d002      	beq.n	8005708 <HAL_RCC_GetSysClockFreq+0x40>
 8005702:	2b08      	cmp	r3, #8
 8005704:	d003      	beq.n	800570e <HAL_RCC_GetSysClockFreq+0x46>
 8005706:	e02b      	b.n	8005760 <HAL_RCC_GetSysClockFreq+0x98>
 8005708:	4b1c      	ldr	r3, [pc, #112]	; (800577c <HAL_RCC_GetSysClockFreq+0xb4>)
 800570a:	623b      	str	r3, [r7, #32]
 800570c:	e02b      	b.n	8005766 <HAL_RCC_GetSysClockFreq+0x9e>
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	0c9b      	lsrs	r3, r3, #18
 8005712:	f003 030f 	and.w	r3, r3, #15
 8005716:	3328      	adds	r3, #40	; 0x28
 8005718:	443b      	add	r3, r7
 800571a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800571e:	617b      	str	r3, [r7, #20]
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d012      	beq.n	8005750 <HAL_RCC_GetSysClockFreq+0x88>
 800572a:	4b13      	ldr	r3, [pc, #76]	; (8005778 <HAL_RCC_GetSysClockFreq+0xb0>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	0c5b      	lsrs	r3, r3, #17
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	3328      	adds	r3, #40	; 0x28
 8005736:	443b      	add	r3, r7
 8005738:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	4a0e      	ldr	r2, [pc, #56]	; (800577c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005742:	fb03 f202 	mul.w	r2, r3, r2
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	fbb2 f3f3 	udiv	r3, r2, r3
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
 800574e:	e004      	b.n	800575a <HAL_RCC_GetSysClockFreq+0x92>
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	4a0b      	ldr	r2, [pc, #44]	; (8005780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005754:	fb02 f303 	mul.w	r3, r2, r3
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
 800575a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800575c:	623b      	str	r3, [r7, #32]
 800575e:	e002      	b.n	8005766 <HAL_RCC_GetSysClockFreq+0x9e>
 8005760:	4b08      	ldr	r3, [pc, #32]	; (8005784 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005762:	623b      	str	r3, [r7, #32]
 8005764:	bf00      	nop
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	4618      	mov	r0, r3
 800576a:	3728      	adds	r7, #40	; 0x28
 800576c:	46bd      	mov	sp, r7
 800576e:	bc90      	pop	{r4, r7}
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	08009990 	.word	0x08009990
 8005778:	40021000 	.word	0x40021000
 800577c:	00f42400 	.word	0x00f42400
 8005780:	003d0900 	.word	0x003d0900
 8005784:	007a1200 	.word	0x007a1200

08005788 <HAL_RCC_GetHCLKFreq>:
 8005788:	b480      	push	{r7}
 800578a:	af00      	add	r7, sp, #0
 800578c:	4b02      	ldr	r3, [pc, #8]	; (8005798 <HAL_RCC_GetHCLKFreq+0x10>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4618      	mov	r0, r3
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr
 8005798:	20000004 	.word	0x20000004

0800579c <HAL_RCC_GetPCLK1Freq>:
 800579c:	b580      	push	{r7, lr}
 800579e:	af00      	add	r7, sp, #0
 80057a0:	f7ff fff2 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057a4:	4602      	mov	r2, r0
 80057a6:	4b05      	ldr	r3, [pc, #20]	; (80057bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	0a1b      	lsrs	r3, r3, #8
 80057ac:	f003 0307 	and.w	r3, r3, #7
 80057b0:	4903      	ldr	r1, [pc, #12]	; (80057c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057b2:	5ccb      	ldrb	r3, [r1, r3]
 80057b4:	fa22 f303 	lsr.w	r3, r2, r3
 80057b8:	4618      	mov	r0, r3
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40021000 	.word	0x40021000
 80057c0:	080099c4 	.word	0x080099c4

080057c4 <HAL_RCC_GetPCLK2Freq>:
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	f7ff ffde 	bl	8005788 <HAL_RCC_GetHCLKFreq>
 80057cc:	4602      	mov	r2, r0
 80057ce:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	0adb      	lsrs	r3, r3, #11
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	4903      	ldr	r1, [pc, #12]	; (80057e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057da:	5ccb      	ldrb	r3, [r1, r3]
 80057dc:	fa22 f303 	lsr.w	r3, r2, r3
 80057e0:	4618      	mov	r0, r3
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	40021000 	.word	0x40021000
 80057e8:	080099c4 	.word	0x080099c4

080057ec <RCC_Delay>:
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <RCC_Delay+0x34>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a0a      	ldr	r2, [pc, #40]	; (8005824 <RCC_Delay+0x38>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	0a5b      	lsrs	r3, r3, #9
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	fb02 f303 	mul.w	r3, r2, r3
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	bf00      	nop
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	1e5a      	subs	r2, r3, #1
 800580e:	60fa      	str	r2, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f9      	bne.n	8005808 <RCC_Delay+0x1c>
 8005814:	bf00      	nop
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	bc80      	pop	{r7}
 800581e:	4770      	bx	lr
 8005820:	20000004 	.word	0x20000004
 8005824:	10624dd3 	.word	0x10624dd3

08005828 <HAL_TIM_Base_Init>:
 8005828:	b580      	push	{r7, lr}
 800582a:	b082      	sub	sp, #8
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_TIM_Base_Init+0x12>
 8005836:	2301      	movs	r3, #1
 8005838:	e041      	b.n	80058be <HAL_TIM_Base_Init+0x96>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_TIM_Base_Init+0x2c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fd fee2 	bl	8003618 <HAL_TIM_Base_MspInit>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3304      	adds	r3, #4
 8005864:	4619      	mov	r1, r3
 8005866:	4610      	mov	r0, r2
 8005868:	f000 fd88 	bl	800637c <TIM_Base_SetConfig>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058bc:	2300      	movs	r3, #0
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <HAL_TIM_Base_Start_IT>:
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d001      	beq.n	80058e0 <HAL_TIM_Base_Start_IT+0x18>
 80058dc:	2301      	movs	r3, #1
 80058de:	e044      	b.n	800596a <HAL_TIM_Base_Start_IT+0xa2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0201 	orr.w	r2, r2, #1
 80058f6:	60da      	str	r2, [r3, #12]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a1d      	ldr	r2, [pc, #116]	; (8005974 <HAL_TIM_Base_Start_IT+0xac>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d018      	beq.n	8005934 <HAL_TIM_Base_Start_IT+0x6c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <HAL_TIM_Base_Start_IT+0xb0>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d013      	beq.n	8005934 <HAL_TIM_Base_Start_IT+0x6c>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005914:	d00e      	beq.n	8005934 <HAL_TIM_Base_Start_IT+0x6c>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a18      	ldr	r2, [pc, #96]	; (800597c <HAL_TIM_Base_Start_IT+0xb4>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d009      	beq.n	8005934 <HAL_TIM_Base_Start_IT+0x6c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a16      	ldr	r2, [pc, #88]	; (8005980 <HAL_TIM_Base_Start_IT+0xb8>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d004      	beq.n	8005934 <HAL_TIM_Base_Start_IT+0x6c>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a15      	ldr	r2, [pc, #84]	; (8005984 <HAL_TIM_Base_Start_IT+0xbc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d111      	bne.n	8005958 <HAL_TIM_Base_Start_IT+0x90>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 0307 	and.w	r3, r3, #7
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2b06      	cmp	r3, #6
 8005944:	d010      	beq.n	8005968 <HAL_TIM_Base_Start_IT+0xa0>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f042 0201 	orr.w	r2, r2, #1
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	e007      	b.n	8005968 <HAL_TIM_Base_Start_IT+0xa0>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	601a      	str	r2, [r3, #0]
 8005968:	2300      	movs	r3, #0
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr
 8005974:	40012c00 	.word	0x40012c00
 8005978:	40013400 	.word	0x40013400
 800597c:	40000400 	.word	0x40000400
 8005980:	40000800 	.word	0x40000800
 8005984:	40000c00 	.word	0x40000c00

08005988 <HAL_TIM_PWM_Init>:
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_TIM_PWM_Init+0x12>
 8005996:	2301      	movs	r3, #1
 8005998:	e041      	b.n	8005a1e <HAL_TIM_PWM_Init+0x96>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <HAL_TIM_PWM_Init+0x2c>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f839 	bl	8005a26 <HAL_TIM_PWM_MspInit>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3304      	adds	r3, #4
 80059c4:	4619      	mov	r1, r3
 80059c6:	4610      	mov	r0, r2
 80059c8:	f000 fcd8 	bl	800637c <TIM_Base_SetConfig>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_TIM_PWM_MspInit>:
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
 8005a2e:	bf00      	nop
 8005a30:	370c      	adds	r7, #12
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bc80      	pop	{r7}
 8005a36:	4770      	bx	lr

08005a38 <HAL_TIM_PWM_Start>:
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <HAL_TIM_PWM_Start+0x24>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	bf14      	ite	ne
 8005a54:	2301      	movne	r3, #1
 8005a56:	2300      	moveq	r3, #0
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	e022      	b.n	8005aa2 <HAL_TIM_PWM_Start+0x6a>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d109      	bne.n	8005a76 <HAL_TIM_PWM_Start+0x3e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	bf14      	ite	ne
 8005a6e:	2301      	movne	r3, #1
 8005a70:	2300      	moveq	r3, #0
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	e015      	b.n	8005aa2 <HAL_TIM_PWM_Start+0x6a>
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d109      	bne.n	8005a90 <HAL_TIM_PWM_Start+0x58>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	bf14      	ite	ne
 8005a88:	2301      	movne	r3, #1
 8005a8a:	2300      	moveq	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	e008      	b.n	8005aa2 <HAL_TIM_PWM_Start+0x6a>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	bf14      	ite	ne
 8005a9c:	2301      	movne	r3, #1
 8005a9e:	2300      	moveq	r3, #0
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x72>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e072      	b.n	8005b90 <HAL_TIM_PWM_Start+0x158>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d104      	bne.n	8005aba <HAL_TIM_PWM_Start+0x82>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ab8:	e013      	b.n	8005ae2 <HAL_TIM_PWM_Start+0xaa>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d104      	bne.n	8005aca <HAL_TIM_PWM_Start+0x92>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ac8:	e00b      	b.n	8005ae2 <HAL_TIM_PWM_Start+0xaa>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d104      	bne.n	8005ada <HAL_TIM_PWM_Start+0xa2>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad8:	e003      	b.n	8005ae2 <HAL_TIM_PWM_Start+0xaa>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2202      	movs	r2, #2
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	6839      	ldr	r1, [r7, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 ff02 	bl	80068f4 <TIM_CCxChannelCmd>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a28      	ldr	r2, [pc, #160]	; (8005b98 <HAL_TIM_PWM_Start+0x160>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d004      	beq.n	8005b04 <HAL_TIM_PWM_Start+0xcc>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <HAL_TIM_PWM_Start+0x164>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d101      	bne.n	8005b08 <HAL_TIM_PWM_Start+0xd0>
 8005b04:	2301      	movs	r3, #1
 8005b06:	e000      	b.n	8005b0a <HAL_TIM_PWM_Start+0xd2>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d007      	beq.n	8005b1e <HAL_TIM_PWM_Start+0xe6>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b1c:	645a      	str	r2, [r3, #68]	; 0x44
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a1d      	ldr	r2, [pc, #116]	; (8005b98 <HAL_TIM_PWM_Start+0x160>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d018      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x122>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a1b      	ldr	r2, [pc, #108]	; (8005b9c <HAL_TIM_PWM_Start+0x164>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d013      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x122>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3a:	d00e      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x122>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a17      	ldr	r2, [pc, #92]	; (8005ba0 <HAL_TIM_PWM_Start+0x168>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d009      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x122>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a16      	ldr	r2, [pc, #88]	; (8005ba4 <HAL_TIM_PWM_Start+0x16c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d004      	beq.n	8005b5a <HAL_TIM_PWM_Start+0x122>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a14      	ldr	r2, [pc, #80]	; (8005ba8 <HAL_TIM_PWM_Start+0x170>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d111      	bne.n	8005b7e <HAL_TIM_PWM_Start+0x146>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 0307 	and.w	r3, r3, #7
 8005b64:	60fb      	str	r3, [r7, #12]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b06      	cmp	r3, #6
 8005b6a:	d010      	beq.n	8005b8e <HAL_TIM_PWM_Start+0x156>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	e007      	b.n	8005b8e <HAL_TIM_PWM_Start+0x156>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0201 	orr.w	r2, r2, #1
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	40012c00 	.word	0x40012c00
 8005b9c:	40013400 	.word	0x40013400
 8005ba0:	40000400 	.word	0x40000400
 8005ba4:	40000800 	.word	0x40000800
 8005ba8:	40000c00 	.word	0x40000c00

08005bac <HAL_TIM_Encoder_Init>:
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_TIM_Encoder_Init+0x14>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e093      	b.n	8005ce8 <HAL_TIM_Encoder_Init+0x13c>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d106      	bne.n	8005bda <HAL_TIM_Encoder_Init+0x2e>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7fd fd6d 	bl	80036b4 <HAL_TIM_Encoder_MspInit>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2202      	movs	r2, #2
 8005bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	6812      	ldr	r2, [r2, #0]
 8005bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bf0:	f023 0307 	bic.w	r3, r3, #7
 8005bf4:	6093      	str	r3, [r2, #8]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4610      	mov	r0, r2
 8005c02:	f000 fbbb 	bl	800637c <TIM_Base_SetConfig>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2e:	f023 0303 	bic.w	r3, r3, #3
 8005c32:	613b      	str	r3, [r7, #16]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689a      	ldr	r2, [r3, #8]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	021b      	lsls	r3, r3, #8
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	693a      	ldr	r2, [r7, #16]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c4c:	f023 030c 	bic.w	r3, r3, #12
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c5c:	613b      	str	r3, [r7, #16]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68da      	ldr	r2, [r3, #12]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	69db      	ldr	r3, [r3, #28]
 8005c66:	021b      	lsls	r3, r3, #8
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	011a      	lsls	r2, r3, #4
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	031b      	lsls	r3, r3, #12
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	613b      	str	r3, [r7, #16]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c8a:	60fb      	str	r3, [r7, #12]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	4313      	orrs	r3, r2
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	609a      	str	r2, [r3, #8]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	693a      	ldr	r2, [r7, #16]
 8005cac:	619a      	str	r2, [r3, #24]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	621a      	str	r2, [r3, #32]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3718      	adds	r7, #24
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_TIM_Encoder_Start>:
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d00:	73fb      	strb	r3, [r7, #15]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d08:	73bb      	strb	r3, [r7, #14]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d10:	737b      	strb	r3, [r7, #13]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005d18:	733b      	strb	r3, [r7, #12]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d110      	bne.n	8005d42 <HAL_TIM_Encoder_Start+0x52>
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d102      	bne.n	8005d2c <HAL_TIM_Encoder_Start+0x3c>
 8005d26:	7b7b      	ldrb	r3, [r7, #13]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d001      	beq.n	8005d30 <HAL_TIM_Encoder_Start+0x40>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e069      	b.n	8005e04 <HAL_TIM_Encoder_Start+0x114>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d40:	e031      	b.n	8005da6 <HAL_TIM_Encoder_Start+0xb6>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d110      	bne.n	8005d6a <HAL_TIM_Encoder_Start+0x7a>
 8005d48:	7bbb      	ldrb	r3, [r7, #14]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d102      	bne.n	8005d54 <HAL_TIM_Encoder_Start+0x64>
 8005d4e:	7b3b      	ldrb	r3, [r7, #12]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d001      	beq.n	8005d58 <HAL_TIM_Encoder_Start+0x68>
 8005d54:	2301      	movs	r3, #1
 8005d56:	e055      	b.n	8005e04 <HAL_TIM_Encoder_Start+0x114>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d68:	e01d      	b.n	8005da6 <HAL_TIM_Encoder_Start+0xb6>
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d108      	bne.n	8005d82 <HAL_TIM_Encoder_Start+0x92>
 8005d70:	7bbb      	ldrb	r3, [r7, #14]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d105      	bne.n	8005d82 <HAL_TIM_Encoder_Start+0x92>
 8005d76:	7b7b      	ldrb	r3, [r7, #13]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d102      	bne.n	8005d82 <HAL_TIM_Encoder_Start+0x92>
 8005d7c:	7b3b      	ldrb	r3, [r7, #12]
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d001      	beq.n	8005d86 <HAL_TIM_Encoder_Start+0x96>
 8005d82:	2301      	movs	r3, #1
 8005d84:	e03e      	b.n	8005e04 <HAL_TIM_Encoder_Start+0x114>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2202      	movs	r2, #2
 8005d92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2202      	movs	r2, #2
 8005d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2202      	movs	r2, #2
 8005da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_TIM_Encoder_Start+0xc4>
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d008      	beq.n	8005dc4 <HAL_TIM_Encoder_Start+0xd4>
 8005db2:	e00f      	b.n	8005dd4 <HAL_TIM_Encoder_Start+0xe4>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2201      	movs	r2, #1
 8005dba:	2100      	movs	r1, #0
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fd99 	bl	80068f4 <TIM_CCxChannelCmd>
 8005dc2:	e016      	b.n	8005df2 <HAL_TIM_Encoder_Start+0x102>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	2104      	movs	r1, #4
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f000 fd91 	bl	80068f4 <TIM_CCxChannelCmd>
 8005dd2:	e00e      	b.n	8005df2 <HAL_TIM_Encoder_Start+0x102>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	2100      	movs	r1, #0
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f000 fd89 	bl	80068f4 <TIM_CCxChannelCmd>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2201      	movs	r2, #1
 8005de8:	2104      	movs	r1, #4
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fd82 	bl	80068f4 <TIM_CCxChannelCmd>
 8005df0:	bf00      	nop
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0201 	orr.w	r2, r2, #1
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	2300      	movs	r3, #0
 8005e04:	4618      	mov	r0, r3
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <HAL_TIM_IRQHandler>:
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d122      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x5c>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d11b      	bne.n	8005e68 <HAL_TIM_IRQHandler+0x5c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0202 	mvn.w	r2, #2
 8005e38:	611a      	str	r2, [r3, #16]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	771a      	strb	r2, [r3, #28]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x4a>
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fa78 	bl	8006344 <HAL_TIM_IC_CaptureCallback>
 8005e54:	e005      	b.n	8005e62 <HAL_TIM_IRQHandler+0x56>
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa6b 	bl	8006332 <HAL_TIM_OC_DelayElapsedCallback>
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fa7a 	bl	8006356 <HAL_TIM_PWM_PulseFinishedCallback>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	771a      	strb	r2, [r3, #28]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d122      	bne.n	8005ebc <HAL_TIM_IRQHandler+0xb0>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b04      	cmp	r3, #4
 8005e82:	d11b      	bne.n	8005ebc <HAL_TIM_IRQHandler+0xb0>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f06f 0204 	mvn.w	r2, #4
 8005e8c:	611a      	str	r2, [r3, #16]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	771a      	strb	r2, [r3, #28]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d003      	beq.n	8005eaa <HAL_TIM_IRQHandler+0x9e>
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fa4e 	bl	8006344 <HAL_TIM_IC_CaptureCallback>
 8005ea8:	e005      	b.n	8005eb6 <HAL_TIM_IRQHandler+0xaa>
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fa41 	bl	8006332 <HAL_TIM_OC_DelayElapsedCallback>
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 fa50 	bl	8006356 <HAL_TIM_PWM_PulseFinishedCallback>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	771a      	strb	r2, [r3, #28]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	691b      	ldr	r3, [r3, #16]
 8005ec2:	f003 0308 	and.w	r3, r3, #8
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d122      	bne.n	8005f10 <HAL_TIM_IRQHandler+0x104>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d11b      	bne.n	8005f10 <HAL_TIM_IRQHandler+0x104>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f06f 0208 	mvn.w	r2, #8
 8005ee0:	611a      	str	r2, [r3, #16]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2204      	movs	r2, #4
 8005ee6:	771a      	strb	r2, [r3, #28]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	69db      	ldr	r3, [r3, #28]
 8005eee:	f003 0303 	and.w	r3, r3, #3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d003      	beq.n	8005efe <HAL_TIM_IRQHandler+0xf2>
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 fa24 	bl	8006344 <HAL_TIM_IC_CaptureCallback>
 8005efc:	e005      	b.n	8005f0a <HAL_TIM_IRQHandler+0xfe>
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fa17 	bl	8006332 <HAL_TIM_OC_DelayElapsedCallback>
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fa26 	bl	8006356 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	771a      	strb	r2, [r3, #28]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0310 	and.w	r3, r3, #16
 8005f1a:	2b10      	cmp	r3, #16
 8005f1c:	d122      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x158>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b10      	cmp	r3, #16
 8005f2a:	d11b      	bne.n	8005f64 <HAL_TIM_IRQHandler+0x158>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f06f 0210 	mvn.w	r2, #16
 8005f34:	611a      	str	r2, [r3, #16]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2208      	movs	r2, #8
 8005f3a:	771a      	strb	r2, [r3, #28]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_TIM_IRQHandler+0x146>
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f9fa 	bl	8006344 <HAL_TIM_IC_CaptureCallback>
 8005f50:	e005      	b.n	8005f5e <HAL_TIM_IRQHandler+0x152>
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f9ed 	bl	8006332 <HAL_TIM_OC_DelayElapsedCallback>
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f9fc 	bl	8006356 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	771a      	strb	r2, [r3, #28]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d10e      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x184>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d107      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x184>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0201 	mvn.w	r2, #1
 8005f88:	611a      	str	r2, [r3, #16]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f9c8 	bl	8006320 <HAL_TIM_PeriodElapsedCallback>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9a:	2b80      	cmp	r3, #128	; 0x80
 8005f9c:	d10e      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x1b0>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa8:	2b80      	cmp	r3, #128	; 0x80
 8005faa:	d107      	bne.n	8005fbc <HAL_TIM_IRQHandler+0x1b0>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fb4:	611a      	str	r2, [r3, #16]
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fd86 	bl	8006ac8 <HAL_TIMEx_BreakCallback>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc6:	2b40      	cmp	r3, #64	; 0x40
 8005fc8:	d10e      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x1dc>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd4:	2b40      	cmp	r3, #64	; 0x40
 8005fd6:	d107      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x1dc>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fe0:	611a      	str	r2, [r3, #16]
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f9c0 	bl	8006368 <HAL_TIM_TriggerCallback>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0320 	and.w	r3, r3, #32
 8005ff2:	2b20      	cmp	r3, #32
 8005ff4:	d10e      	bne.n	8006014 <HAL_TIM_IRQHandler+0x208>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b20      	cmp	r3, #32
 8006002:	d107      	bne.n	8006014 <HAL_TIM_IRQHandler+0x208>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0220 	mvn.w	r2, #32
 800600c:	611a      	str	r2, [r3, #16]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fd51 	bl	8006ab6 <HAL_TIMEx_CommutCallback>
 8006014:	bf00      	nop
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <HAL_TIM_PWM_ConfigChannel>:
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800602e:	2b01      	cmp	r3, #1
 8006030:	d101      	bne.n	8006036 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006032:	2302      	movs	r3, #2
 8006034:	e0ac      	b.n	8006190 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b0c      	cmp	r3, #12
 8006042:	f200 809f 	bhi.w	8006184 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006046:	a201      	add	r2, pc, #4	; (adr r2, 800604c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604c:	08006081 	.word	0x08006081
 8006050:	08006185 	.word	0x08006185
 8006054:	08006185 	.word	0x08006185
 8006058:	08006185 	.word	0x08006185
 800605c:	080060c1 	.word	0x080060c1
 8006060:	08006185 	.word	0x08006185
 8006064:	08006185 	.word	0x08006185
 8006068:	08006185 	.word	0x08006185
 800606c:	08006103 	.word	0x08006103
 8006070:	08006185 	.word	0x08006185
 8006074:	08006185 	.word	0x08006185
 8006078:	08006185 	.word	0x08006185
 800607c:	08006143 	.word	0x08006143
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68b9      	ldr	r1, [r7, #8]
 8006086:	4618      	mov	r0, r3
 8006088:	f000 f9f2 	bl	8006470 <TIM_OC1_SetConfig>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0208 	orr.w	r2, r2, #8
 800609a:	619a      	str	r2, [r3, #24]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699a      	ldr	r2, [r3, #24]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0204 	bic.w	r2, r2, #4
 80060aa:	619a      	str	r2, [r3, #24]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6999      	ldr	r1, [r3, #24]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	691a      	ldr	r2, [r3, #16]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	430a      	orrs	r2, r1
 80060bc:	619a      	str	r2, [r3, #24]
 80060be:	e062      	b.n	8006186 <HAL_TIM_PWM_ConfigChannel+0x16a>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 fa42 	bl	8006550 <TIM_OC2_SetConfig>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	699a      	ldr	r2, [r3, #24]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060da:	619a      	str	r2, [r3, #24]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	699a      	ldr	r2, [r3, #24]
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ea:	619a      	str	r2, [r3, #24]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6999      	ldr	r1, [r3, #24]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	021a      	lsls	r2, r3, #8
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	430a      	orrs	r2, r1
 80060fe:	619a      	str	r2, [r3, #24]
 8006100:	e041      	b.n	8006186 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68b9      	ldr	r1, [r7, #8]
 8006108:	4618      	mov	r0, r3
 800610a:	f000 fa95 	bl	8006638 <TIM_OC3_SetConfig>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69da      	ldr	r2, [r3, #28]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0208 	orr.w	r2, r2, #8
 800611c:	61da      	str	r2, [r3, #28]
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69da      	ldr	r2, [r3, #28]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0204 	bic.w	r2, r2, #4
 800612c:	61da      	str	r2, [r3, #28]
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	69d9      	ldr	r1, [r3, #28]
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	691a      	ldr	r2, [r3, #16]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	430a      	orrs	r2, r1
 800613e:	61da      	str	r2, [r3, #28]
 8006140:	e021      	b.n	8006186 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68b9      	ldr	r1, [r7, #8]
 8006148:	4618      	mov	r0, r3
 800614a:	f000 fae9 	bl	8006720 <TIM_OC4_SetConfig>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	69da      	ldr	r2, [r3, #28]
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800615c:	61da      	str	r2, [r3, #28]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69da      	ldr	r2, [r3, #28]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800616c:	61da      	str	r2, [r3, #28]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	69d9      	ldr	r1, [r3, #28]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	021a      	lsls	r2, r3, #8
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	61da      	str	r2, [r3, #28]
 8006182:	e000      	b.n	8006186 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8006184:	bf00      	nop
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800618e:	2300      	movs	r3, #0
 8006190:	4618      	mov	r0, r3
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_TIM_ConfigClockSource>:
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_TIM_ConfigClockSource+0x18>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e0b3      	b.n	8006318 <HAL_TIM_ConfigClockSource+0x180>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	609a      	str	r2, [r3, #8]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e8:	d03e      	beq.n	8006268 <HAL_TIM_ConfigClockSource+0xd0>
 80061ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ee:	f200 8087 	bhi.w	8006300 <HAL_TIM_ConfigClockSource+0x168>
 80061f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f6:	f000 8085 	beq.w	8006304 <HAL_TIM_ConfigClockSource+0x16c>
 80061fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fe:	d87f      	bhi.n	8006300 <HAL_TIM_ConfigClockSource+0x168>
 8006200:	2b70      	cmp	r3, #112	; 0x70
 8006202:	d01a      	beq.n	800623a <HAL_TIM_ConfigClockSource+0xa2>
 8006204:	2b70      	cmp	r3, #112	; 0x70
 8006206:	d87b      	bhi.n	8006300 <HAL_TIM_ConfigClockSource+0x168>
 8006208:	2b60      	cmp	r3, #96	; 0x60
 800620a:	d050      	beq.n	80062ae <HAL_TIM_ConfigClockSource+0x116>
 800620c:	2b60      	cmp	r3, #96	; 0x60
 800620e:	d877      	bhi.n	8006300 <HAL_TIM_ConfigClockSource+0x168>
 8006210:	2b50      	cmp	r3, #80	; 0x50
 8006212:	d03c      	beq.n	800628e <HAL_TIM_ConfigClockSource+0xf6>
 8006214:	2b50      	cmp	r3, #80	; 0x50
 8006216:	d873      	bhi.n	8006300 <HAL_TIM_ConfigClockSource+0x168>
 8006218:	2b40      	cmp	r3, #64	; 0x40
 800621a:	d058      	beq.n	80062ce <HAL_TIM_ConfigClockSource+0x136>
 800621c:	2b40      	cmp	r3, #64	; 0x40
 800621e:	d86f      	bhi.n	8006300 <HAL_TIM_ConfigClockSource+0x168>
 8006220:	2b30      	cmp	r3, #48	; 0x30
 8006222:	d064      	beq.n	80062ee <HAL_TIM_ConfigClockSource+0x156>
 8006224:	2b30      	cmp	r3, #48	; 0x30
 8006226:	d86b      	bhi.n	8006300 <HAL_TIM_ConfigClockSource+0x168>
 8006228:	2b20      	cmp	r3, #32
 800622a:	d060      	beq.n	80062ee <HAL_TIM_ConfigClockSource+0x156>
 800622c:	2b20      	cmp	r3, #32
 800622e:	d867      	bhi.n	8006300 <HAL_TIM_ConfigClockSource+0x168>
 8006230:	2b00      	cmp	r3, #0
 8006232:	d05c      	beq.n	80062ee <HAL_TIM_ConfigClockSource+0x156>
 8006234:	2b10      	cmp	r3, #16
 8006236:	d05a      	beq.n	80062ee <HAL_TIM_ConfigClockSource+0x156>
 8006238:	e062      	b.n	8006300 <HAL_TIM_ConfigClockSource+0x168>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6818      	ldr	r0, [r3, #0]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	6899      	ldr	r1, [r3, #8]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685a      	ldr	r2, [r3, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	f000 fb34 	bl	80068b6 <TIM_ETR_SetConfig>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	689b      	ldr	r3, [r3, #8]
 8006254:	60fb      	str	r3, [r7, #12]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800625c:	60fb      	str	r3, [r7, #12]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	609a      	str	r2, [r3, #8]
 8006266:	e04e      	b.n	8006306 <HAL_TIM_ConfigClockSource+0x16e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	6899      	ldr	r1, [r3, #8]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	685a      	ldr	r2, [r3, #4]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	f000 fb1d 	bl	80068b6 <TIM_ETR_SetConfig>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689a      	ldr	r2, [r3, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800628a:	609a      	str	r2, [r3, #8]
 800628c:	e03b      	b.n	8006306 <HAL_TIM_ConfigClockSource+0x16e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6818      	ldr	r0, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	6859      	ldr	r1, [r3, #4]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	461a      	mov	r2, r3
 800629c:	f000 fa94 	bl	80067c8 <TIM_TI1_ConfigInputStage>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2150      	movs	r1, #80	; 0x50
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 faeb 	bl	8006882 <TIM_ITRx_SetConfig>
 80062ac:	e02b      	b.n	8006306 <HAL_TIM_ConfigClockSource+0x16e>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6818      	ldr	r0, [r3, #0]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	6859      	ldr	r1, [r3, #4]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	461a      	mov	r2, r3
 80062bc:	f000 fab2 	bl	8006824 <TIM_TI2_ConfigInputStage>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2160      	movs	r1, #96	; 0x60
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fadb 	bl	8006882 <TIM_ITRx_SetConfig>
 80062cc:	e01b      	b.n	8006306 <HAL_TIM_ConfigClockSource+0x16e>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6818      	ldr	r0, [r3, #0]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	6859      	ldr	r1, [r3, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	461a      	mov	r2, r3
 80062dc:	f000 fa74 	bl	80067c8 <TIM_TI1_ConfigInputStage>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	2140      	movs	r1, #64	; 0x40
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 facb 	bl	8006882 <TIM_ITRx_SetConfig>
 80062ec:	e00b      	b.n	8006306 <HAL_TIM_ConfigClockSource+0x16e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4619      	mov	r1, r3
 80062f8:	4610      	mov	r0, r2
 80062fa:	f000 fac2 	bl	8006882 <TIM_ITRx_SetConfig>
 80062fe:	e002      	b.n	8006306 <HAL_TIM_ConfigClockSource+0x16e>
 8006300:	bf00      	nop
 8006302:	e000      	b.n	8006306 <HAL_TIM_ConfigClockSource+0x16e>
 8006304:	bf00      	nop
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006316:	2300      	movs	r3, #0
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <HAL_TIM_PeriodElapsedCallback>:
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	bc80      	pop	{r7}
 8006330:	4770      	bx	lr

08006332 <HAL_TIM_OC_DelayElapsedCallback>:
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr

08006344 <HAL_TIM_IC_CaptureCallback>:
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	bc80      	pop	{r7}
 8006354:	4770      	bx	lr

08006356 <HAL_TIM_PWM_PulseFinishedCallback>:
 8006356:	b480      	push	{r7}
 8006358:	b083      	sub	sp, #12
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	bf00      	nop
 8006360:	370c      	adds	r7, #12
 8006362:	46bd      	mov	sp, r7
 8006364:	bc80      	pop	{r7}
 8006366:	4770      	bx	lr

08006368 <HAL_TIM_TriggerCallback>:
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr
	...

0800637c <TIM_Base_SetConfig>:
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	60fb      	str	r3, [r7, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a33      	ldr	r2, [pc, #204]	; (800645c <TIM_Base_SetConfig+0xe0>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d013      	beq.n	80063bc <TIM_Base_SetConfig+0x40>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a32      	ldr	r2, [pc, #200]	; (8006460 <TIM_Base_SetConfig+0xe4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00f      	beq.n	80063bc <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063a2:	d00b      	beq.n	80063bc <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a2f      	ldr	r2, [pc, #188]	; (8006464 <TIM_Base_SetConfig+0xe8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d007      	beq.n	80063bc <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a2e      	ldr	r2, [pc, #184]	; (8006468 <TIM_Base_SetConfig+0xec>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <TIM_Base_SetConfig+0x40>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a2d      	ldr	r2, [pc, #180]	; (800646c <TIM_Base_SetConfig+0xf0>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d108      	bne.n	80063ce <TIM_Base_SetConfig+0x52>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c2:	60fb      	str	r3, [r7, #12]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a22      	ldr	r2, [pc, #136]	; (800645c <TIM_Base_SetConfig+0xe0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <TIM_Base_SetConfig+0x82>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a21      	ldr	r2, [pc, #132]	; (8006460 <TIM_Base_SetConfig+0xe4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00f      	beq.n	80063fe <TIM_Base_SetConfig+0x82>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e4:	d00b      	beq.n	80063fe <TIM_Base_SetConfig+0x82>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a1e      	ldr	r2, [pc, #120]	; (8006464 <TIM_Base_SetConfig+0xe8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d007      	beq.n	80063fe <TIM_Base_SetConfig+0x82>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a1d      	ldr	r2, [pc, #116]	; (8006468 <TIM_Base_SetConfig+0xec>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d003      	beq.n	80063fe <TIM_Base_SetConfig+0x82>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a1c      	ldr	r2, [pc, #112]	; (800646c <TIM_Base_SetConfig+0xf0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d108      	bne.n	8006410 <TIM_Base_SetConfig+0x94>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	62da      	str	r2, [r3, #44]	; 0x2c
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	629a      	str	r2, [r3, #40]	; 0x28
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a09      	ldr	r2, [pc, #36]	; (800645c <TIM_Base_SetConfig+0xe0>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d003      	beq.n	8006444 <TIM_Base_SetConfig+0xc8>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a08      	ldr	r2, [pc, #32]	; (8006460 <TIM_Base_SetConfig+0xe4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d103      	bne.n	800644c <TIM_Base_SetConfig+0xd0>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	631a      	str	r2, [r3, #48]	; 0x30
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	615a      	str	r2, [r3, #20]
 8006452:	bf00      	nop
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr
 800645c:	40012c00 	.word	0x40012c00
 8006460:	40013400 	.word	0x40013400
 8006464:	40000400 	.word	0x40000400
 8006468:	40000800 	.word	0x40000800
 800646c:	40000c00 	.word	0x40000c00

08006470 <TIM_OC1_SetConfig>:
 8006470:	b480      	push	{r7}
 8006472:	b087      	sub	sp, #28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	f023 0201 	bic.w	r2, r3, #1
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	621a      	str	r2, [r3, #32]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	60fb      	str	r3, [r7, #12]
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649e:	60fb      	str	r3, [r7, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f023 0303 	bic.w	r3, r3, #3
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f023 0302 	bic.w	r3, r3, #2
 80064b8:	617b      	str	r3, [r7, #20]
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a20      	ldr	r2, [pc, #128]	; (8006548 <TIM_OC1_SetConfig+0xd8>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_OC1_SetConfig+0x64>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a1f      	ldr	r2, [pc, #124]	; (800654c <TIM_OC1_SetConfig+0xdc>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d10c      	bne.n	80064ee <TIM_OC1_SetConfig+0x7e>
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f023 0308 	bic.w	r3, r3, #8
 80064da:	617b      	str	r3, [r7, #20]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f023 0304 	bic.w	r3, r3, #4
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a15      	ldr	r2, [pc, #84]	; (8006548 <TIM_OC1_SetConfig+0xd8>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_OC1_SetConfig+0x8e>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a14      	ldr	r2, [pc, #80]	; (800654c <TIM_OC1_SetConfig+0xdc>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d111      	bne.n	8006522 <TIM_OC1_SetConfig+0xb2>
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	695b      	ldr	r3, [r3, #20]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	4313      	orrs	r3, r2
 8006516:	613b      	str	r3, [r7, #16]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	605a      	str	r2, [r3, #4]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	619a      	str	r2, [r3, #24]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	635a      	str	r2, [r3, #52]	; 0x34
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	697a      	ldr	r2, [r7, #20]
 800653a:	621a      	str	r2, [r3, #32]
 800653c:	bf00      	nop
 800653e:	371c      	adds	r7, #28
 8006540:	46bd      	mov	sp, r7
 8006542:	bc80      	pop	{r7}
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40013400 	.word	0x40013400

08006550 <TIM_OC2_SetConfig>:
 8006550:	b480      	push	{r7}
 8006552:	b087      	sub	sp, #28
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	f023 0210 	bic.w	r2, r3, #16
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	621a      	str	r2, [r3, #32]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	613b      	str	r3, [r7, #16]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	021b      	lsls	r3, r3, #8
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	4313      	orrs	r3, r2
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f023 0320 	bic.w	r3, r3, #32
 800659a:	617b      	str	r3, [r7, #20]
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	697a      	ldr	r2, [r7, #20]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a21      	ldr	r2, [pc, #132]	; (8006630 <TIM_OC2_SetConfig+0xe0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <TIM_OC2_SetConfig+0x68>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a20      	ldr	r2, [pc, #128]	; (8006634 <TIM_OC2_SetConfig+0xe4>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d10d      	bne.n	80065d4 <TIM_OC2_SetConfig+0x84>
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	697a      	ldr	r2, [r7, #20]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a16      	ldr	r2, [pc, #88]	; (8006630 <TIM_OC2_SetConfig+0xe0>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <TIM_OC2_SetConfig+0x94>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a15      	ldr	r2, [pc, #84]	; (8006634 <TIM_OC2_SetConfig+0xe4>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d113      	bne.n	800660c <TIM_OC2_SetConfig+0xbc>
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ea:	613b      	str	r3, [r7, #16]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065f2:	613b      	str	r3, [r7, #16]
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	693a      	ldr	r2, [r7, #16]
 8006608:	4313      	orrs	r3, r2
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	605a      	str	r2, [r3, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	619a      	str	r2, [r3, #24]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	685a      	ldr	r2, [r3, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	639a      	str	r2, [r3, #56]	; 0x38
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	621a      	str	r2, [r3, #32]
 8006626:	bf00      	nop
 8006628:	371c      	adds	r7, #28
 800662a:	46bd      	mov	sp, r7
 800662c:	bc80      	pop	{r7}
 800662e:	4770      	bx	lr
 8006630:	40012c00 	.word	0x40012c00
 8006634:	40013400 	.word	0x40013400

08006638 <TIM_OC3_SetConfig>:
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	621a      	str	r2, [r3, #32]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	60fb      	str	r3, [r7, #12]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006666:	60fb      	str	r3, [r7, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0303 	bic.w	r3, r3, #3
 800666e:	60fb      	str	r3, [r7, #12]
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006680:	617b      	str	r3, [r7, #20]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	021b      	lsls	r3, r3, #8
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a21      	ldr	r2, [pc, #132]	; (8006718 <TIM_OC3_SetConfig+0xe0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d003      	beq.n	800669e <TIM_OC3_SetConfig+0x66>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a20      	ldr	r2, [pc, #128]	; (800671c <TIM_OC3_SetConfig+0xe4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d10d      	bne.n	80066ba <TIM_OC3_SetConfig+0x82>
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066a4:	617b      	str	r3, [r7, #20]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	021b      	lsls	r3, r3, #8
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a16      	ldr	r2, [pc, #88]	; (8006718 <TIM_OC3_SetConfig+0xe0>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d003      	beq.n	80066ca <TIM_OC3_SetConfig+0x92>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a15      	ldr	r2, [pc, #84]	; (800671c <TIM_OC3_SetConfig+0xe4>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d113      	bne.n	80066f2 <TIM_OC3_SetConfig+0xba>
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	695b      	ldr	r3, [r3, #20]
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	613b      	str	r3, [r7, #16]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	605a      	str	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	61da      	str	r2, [r3, #28]
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	685a      	ldr	r2, [r3, #4]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	63da      	str	r2, [r3, #60]	; 0x3c
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	621a      	str	r2, [r3, #32]
 800670c:	bf00      	nop
 800670e:	371c      	adds	r7, #28
 8006710:	46bd      	mov	sp, r7
 8006712:	bc80      	pop	{r7}
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	40012c00 	.word	0x40012c00
 800671c:	40013400 	.word	0x40013400

08006720 <TIM_OC4_SetConfig>:
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	621a      	str	r2, [r3, #32]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	613b      	str	r3, [r7, #16]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	4313      	orrs	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800676a:	613b      	str	r3, [r7, #16]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	031b      	lsls	r3, r3, #12
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a11      	ldr	r2, [pc, #68]	; (80067c0 <TIM_OC4_SetConfig+0xa0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d003      	beq.n	8006788 <TIM_OC4_SetConfig+0x68>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a10      	ldr	r2, [pc, #64]	; (80067c4 <TIM_OC4_SetConfig+0xa4>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d109      	bne.n	800679c <TIM_OC4_SetConfig+0x7c>
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	019b      	lsls	r3, r3, #6
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	4313      	orrs	r3, r2
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	605a      	str	r2, [r3, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	61da      	str	r2, [r3, #28]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685a      	ldr	r2, [r3, #4]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	641a      	str	r2, [r3, #64]	; 0x40
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	621a      	str	r2, [r3, #32]
 80067b6:	bf00      	nop
 80067b8:	371c      	adds	r7, #28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bc80      	pop	{r7}
 80067be:	4770      	bx	lr
 80067c0:	40012c00 	.word	0x40012c00
 80067c4:	40013400 	.word	0x40013400

080067c8 <TIM_TI1_ConfigInputStage>:
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	f023 0201 	bic.w	r2, r3, #1
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	621a      	str	r2, [r3, #32]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	613b      	str	r3, [r7, #16]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067f2:	613b      	str	r3, [r7, #16]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	693a      	ldr	r2, [r7, #16]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f023 030a 	bic.w	r3, r3, #10
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	4313      	orrs	r3, r2
 800680c:	617b      	str	r3, [r7, #20]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	693a      	ldr	r2, [r7, #16]
 8006812:	619a      	str	r2, [r3, #24]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	621a      	str	r2, [r3, #32]
 800681a:	bf00      	nop
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	bc80      	pop	{r7}
 8006822:	4770      	bx	lr

08006824 <TIM_TI2_ConfigInputStage>:
 8006824:	b480      	push	{r7}
 8006826:	b087      	sub	sp, #28
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a1b      	ldr	r3, [r3, #32]
 8006834:	f023 0210 	bic.w	r2, r3, #16
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	621a      	str	r2, [r3, #32]
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a1b      	ldr	r3, [r3, #32]
 8006846:	613b      	str	r3, [r7, #16]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	031b      	lsls	r3, r3, #12
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	619a      	str	r2, [r3, #24]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	693a      	ldr	r2, [r7, #16]
 8006876:	621a      	str	r2, [r3, #32]
 8006878:	bf00      	nop
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr

08006882 <TIM_ITRx_SetConfig>:
 8006882:	b480      	push	{r7}
 8006884:	b085      	sub	sp, #20
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	f043 0307 	orr.w	r3, r3, #7
 80068a4:	60fb      	str	r3, [r7, #12]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	609a      	str	r2, [r3, #8]
 80068ac:	bf00      	nop
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr

080068b6 <TIM_ETR_SetConfig>:
 80068b6:	b480      	push	{r7}
 80068b8:	b087      	sub	sp, #28
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	617b      	str	r3, [r7, #20]
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068d0:	617b      	str	r3, [r7, #20]
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	021a      	lsls	r2, r3, #8
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	431a      	orrs	r2, r3
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	4313      	orrs	r3, r2
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	609a      	str	r2, [r3, #8]
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bc80      	pop	{r7}
 80068f2:	4770      	bx	lr

080068f4 <TIM_CCxChannelCmd>:
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	2201      	movs	r2, #1
 8006908:	fa02 f303 	lsl.w	r3, r2, r3
 800690c:	617b      	str	r3, [r7, #20]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a1a      	ldr	r2, [r3, #32]
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	43db      	mvns	r3, r3
 8006916:	401a      	ands	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	621a      	str	r2, [r3, #32]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a1a      	ldr	r2, [r3, #32]
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f003 031f 	and.w	r3, r3, #31
 8006926:	6879      	ldr	r1, [r7, #4]
 8006928:	fa01 f303 	lsl.w	r3, r1, r3
 800692c:	431a      	orrs	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	621a      	str	r2, [r3, #32]
 8006932:	bf00      	nop
 8006934:	371c      	adds	r7, #28
 8006936:	46bd      	mov	sp, r7
 8006938:	bc80      	pop	{r7}
 800693a:	4770      	bx	lr

0800693c <HAL_TIMEx_MasterConfigSynchronization>:
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800694c:	2b01      	cmp	r3, #1
 800694e:	d101      	bne.n	8006954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006950:	2302      	movs	r3, #2
 8006952:	e050      	b.n	80069f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2202      	movs	r2, #2
 8006960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	60bb      	str	r3, [r7, #8]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68fa      	ldr	r2, [r7, #12]
 8006982:	4313      	orrs	r3, r2
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	605a      	str	r2, [r3, #4]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1b      	ldr	r2, [pc, #108]	; (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d018      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a19      	ldr	r2, [pc, #100]	; (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d013      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069aa:	d00e      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a15      	ldr	r2, [pc, #84]	; (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d009      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a14      	ldr	r2, [pc, #80]	; (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d004      	beq.n	80069ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a12      	ldr	r2, [pc, #72]	; (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d10c      	bne.n	80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069d0:	60bb      	str	r3, [r7, #8]
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60bb      	str	r3, [r7, #8]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	68ba      	ldr	r2, [r7, #8]
 80069e2:	609a      	str	r2, [r3, #8]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80069f4:	2300      	movs	r3, #0
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bc80      	pop	{r7}
 80069fe:	4770      	bx	lr
 8006a00:	40012c00 	.word	0x40012c00
 8006a04:	40013400 	.word	0x40013400
 8006a08:	40000400 	.word	0x40000400
 8006a0c:	40000800 	.word	0x40000800
 8006a10:	40000c00 	.word	0x40000c00

08006a14 <HAL_TIMEx_ConfigBreakDeadTime>:
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60fb      	str	r3, [r7, #12]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d101      	bne.n	8006a30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a2c:	2302      	movs	r3, #2
 8006a2e:	e03d      	b.n	8006aac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	60fb      	str	r3, [r7, #12]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	645a      	str	r2, [r3, #68]	; 0x44
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006aaa:	2300      	movs	r3, #0
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr

08006ab6 <HAL_TIMEx_CommutCallback>:
 8006ab6:	b480      	push	{r7}
 8006ab8:	b083      	sub	sp, #12
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bc80      	pop	{r7}
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_TIMEx_BreakCallback>:
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	bf00      	nop
 8006ad2:	370c      	adds	r7, #12
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bc80      	pop	{r7}
 8006ad8:	4770      	bx	lr

08006ada <HAL_UART_Init>:
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d101      	bne.n	8006aec <HAL_UART_Init+0x12>
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e03f      	b.n	8006b6c <HAL_UART_Init+0x92>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d106      	bne.n	8006b06 <HAL_UART_Init+0x2c>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f7fc ff1d 	bl	8003940 <HAL_UART_MspInit>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2224      	movs	r2, #36	; 0x24
 8006b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 fdde 	bl	80076e0 <UART_SetConfig>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	691a      	ldr	r2, [r3, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b32:	611a      	str	r2, [r3, #16]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	695a      	ldr	r2, [r3, #20]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b42:	615a      	str	r2, [r3, #20]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b52:	60da      	str	r2, [r3, #12]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	641a      	str	r2, [r3, #64]	; 0x40
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_UART_Transmit>:
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b08a      	sub	sp, #40	; 0x28
 8006b78:	af02      	add	r7, sp, #8
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	4613      	mov	r3, r2
 8006b82:	80fb      	strh	r3, [r7, #6]
 8006b84:	2300      	movs	r3, #0
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d17c      	bne.n	8006c8e <HAL_UART_Transmit+0x11a>
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d002      	beq.n	8006ba0 <HAL_UART_Transmit+0x2c>
 8006b9a:	88fb      	ldrh	r3, [r7, #6]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d101      	bne.n	8006ba4 <HAL_UART_Transmit+0x30>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e075      	b.n	8006c90 <HAL_UART_Transmit+0x11c>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d101      	bne.n	8006bb2 <HAL_UART_Transmit+0x3e>
 8006bae:	2302      	movs	r3, #2
 8006bb0:	e06e      	b.n	8006c90 <HAL_UART_Transmit+0x11c>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	641a      	str	r2, [r3, #64]	; 0x40
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2221      	movs	r2, #33	; 0x21
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006bc8:	f7fd f964 	bl	8003e94 <HAL_GetTick>
 8006bcc:	6178      	str	r0, [r7, #20]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	88fa      	ldrh	r2, [r7, #6]
 8006bd2:	849a      	strh	r2, [r3, #36]	; 0x24
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	88fa      	ldrh	r2, [r7, #6]
 8006bd8:	84da      	strh	r2, [r3, #38]	; 0x26
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be2:	d108      	bne.n	8006bf6 <HAL_UART_Transmit+0x82>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d104      	bne.n	8006bf6 <HAL_UART_Transmit+0x82>
 8006bec:	2300      	movs	r3, #0
 8006bee:	61fb      	str	r3, [r7, #28]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	61bb      	str	r3, [r7, #24]
 8006bf4:	e003      	b.n	8006bfe <HAL_UART_Transmit+0x8a>
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	61fb      	str	r3, [r7, #28]
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006c06:	e02a      	b.n	8006c5e <HAL_UART_Transmit+0xea>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	2180      	movs	r1, #128	; 0x80
 8006c12:	68f8      	ldr	r0, [r7, #12]
 8006c14:	f000 fb17 	bl	8007246 <UART_WaitOnFlagUntilTimeout>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d001      	beq.n	8006c22 <HAL_UART_Transmit+0xae>
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e036      	b.n	8006c90 <HAL_UART_Transmit+0x11c>
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d10b      	bne.n	8006c40 <HAL_UART_Transmit+0xcc>
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	881b      	ldrh	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c36:	605a      	str	r2, [r3, #4]
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	3302      	adds	r3, #2
 8006c3c:	61bb      	str	r3, [r7, #24]
 8006c3e:	e007      	b.n	8006c50 <HAL_UART_Transmit+0xdc>
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	781a      	ldrb	r2, [r3, #0]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	605a      	str	r2, [r3, #4]
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	61fb      	str	r3, [r7, #28]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	84da      	strh	r2, [r3, #38]	; 0x26
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1cf      	bne.n	8006c08 <HAL_UART_Transmit+0x94>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2140      	movs	r1, #64	; 0x40
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 fae7 	bl	8007246 <UART_WaitOnFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <HAL_UART_Transmit+0x10e>
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e006      	b.n	8006c90 <HAL_UART_Transmit+0x11c>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e000      	b.n	8006c90 <HAL_UART_Transmit+0x11c>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	4618      	mov	r0, r3
 8006c92:	3720      	adds	r7, #32
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_UART_Receive_IT>:
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	80fb      	strh	r3, [r7, #6]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b20      	cmp	r3, #32
 8006cb0:	d11d      	bne.n	8006cee <HAL_UART_Receive_IT+0x56>
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <HAL_UART_Receive_IT+0x26>
 8006cb8:	88fb      	ldrh	r3, [r7, #6]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_UART_Receive_IT+0x2a>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e016      	b.n	8006cf0 <HAL_UART_Receive_IT+0x58>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d101      	bne.n	8006cd0 <HAL_UART_Receive_IT+0x38>
 8006ccc:	2302      	movs	r3, #2
 8006cce:	e00f      	b.n	8006cf0 <HAL_UART_Receive_IT+0x58>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8006cde:	88fb      	ldrh	r3, [r7, #6]
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 faf8 	bl	80072da <UART_Start_Receive_IT>
 8006cea:	4603      	mov	r3, r0
 8006cec:	e000      	b.n	8006cf0 <HAL_UART_Receive_IT+0x58>
 8006cee:	2302      	movs	r3, #2
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_UART_Receive_DMA>:
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	4613      	mov	r3, r2
 8006d04:	80fb      	strh	r3, [r7, #6]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d11d      	bne.n	8006d4e <HAL_UART_Receive_DMA+0x56>
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d002      	beq.n	8006d1e <HAL_UART_Receive_DMA+0x26>
 8006d18:	88fb      	ldrh	r3, [r7, #6]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_UART_Receive_DMA+0x2a>
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e016      	b.n	8006d50 <HAL_UART_Receive_DMA+0x58>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d101      	bne.n	8006d30 <HAL_UART_Receive_DMA+0x38>
 8006d2c:	2302      	movs	r3, #2
 8006d2e:	e00f      	b.n	8006d50 <HAL_UART_Receive_DMA+0x58>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	461a      	mov	r2, r3
 8006d42:	68b9      	ldr	r1, [r7, #8]
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 fb01 	bl	800734c <UART_Start_Receive_DMA>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	e000      	b.n	8006d50 <HAL_UART_Receive_DMA+0x58>
 8006d4e:	2302      	movs	r3, #2
 8006d50:	4618      	mov	r0, r3
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <HAL_UART_IRQHandler>:
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b08a      	sub	sp, #40	; 0x28
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	627b      	str	r3, [r7, #36]	; 0x24
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	623b      	str	r3, [r7, #32]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	61fb      	str	r3, [r7, #28]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61bb      	str	r3, [r7, #24]
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	617b      	str	r3, [r7, #20]
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	f003 030f 	and.w	r3, r3, #15
 8006d86:	61bb      	str	r3, [r7, #24]
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10d      	bne.n	8006daa <HAL_UART_IRQHandler+0x52>
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	f003 0320 	and.w	r3, r3, #32
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d008      	beq.n	8006daa <HAL_UART_IRQHandler+0x52>
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	f003 0320 	and.w	r3, r3, #32
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_UART_IRQHandler+0x52>
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fbf2 	bl	800758c <UART_Receive_IT>
 8006da8:	e17b      	b.n	80070a2 <HAL_UART_IRQHandler+0x34a>
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 80b1 	beq.w	8006f14 <HAL_UART_IRQHandler+0x1bc>
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	f003 0301 	and.w	r3, r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d105      	bne.n	8006dc8 <HAL_UART_IRQHandler+0x70>
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	f000 80a6 	beq.w	8006f14 <HAL_UART_IRQHandler+0x1bc>
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <HAL_UART_IRQHandler+0x90>
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <HAL_UART_IRQHandler+0x90>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	f043 0201 	orr.w	r2, r3, #1
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	641a      	str	r2, [r3, #64]	; 0x40
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <HAL_UART_IRQHandler+0xb0>
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	f003 0301 	and.w	r3, r3, #1
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d005      	beq.n	8006e08 <HAL_UART_IRQHandler+0xb0>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e00:	f043 0202 	orr.w	r2, r3, #2
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	641a      	str	r2, [r3, #64]	; 0x40
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <HAL_UART_IRQHandler+0xd0>
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d005      	beq.n	8006e28 <HAL_UART_IRQHandler+0xd0>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e20:	f043 0204 	orr.w	r2, r3, #4
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	641a      	str	r2, [r3, #64]	; 0x40
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d00f      	beq.n	8006e52 <HAL_UART_IRQHandler+0xfa>
 8006e32:	6a3b      	ldr	r3, [r7, #32]
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <HAL_UART_IRQHandler+0xee>
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d005      	beq.n	8006e52 <HAL_UART_IRQHandler+0xfa>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4a:	f043 0208 	orr.w	r2, r3, #8
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	641a      	str	r2, [r3, #64]	; 0x40
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 811e 	beq.w	8007098 <HAL_UART_IRQHandler+0x340>
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d007      	beq.n	8006e76 <HAL_UART_IRQHandler+0x11e>
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	f003 0320 	and.w	r3, r3, #32
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <HAL_UART_IRQHandler+0x11e>
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fb8b 	bl	800758c <UART_Receive_IT>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	bf14      	ite	ne
 8006e84:	2301      	movne	r3, #1
 8006e86:	2300      	moveq	r3, #0
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	617b      	str	r3, [r7, #20]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e90:	f003 0308 	and.w	r3, r3, #8
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d102      	bne.n	8006e9e <HAL_UART_IRQHandler+0x146>
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d031      	beq.n	8006f02 <HAL_UART_IRQHandler+0x1aa>
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 facd 	bl	800743e <UART_EndRxTransfer>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d023      	beq.n	8006efa <HAL_UART_IRQHandler+0x1a2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	695a      	ldr	r2, [r3, #20]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ec0:	615a      	str	r2, [r3, #20]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d013      	beq.n	8006ef2 <HAL_UART_IRQHandler+0x19a>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ece:	4a76      	ldr	r2, [pc, #472]	; (80070a8 <HAL_UART_IRQHandler+0x350>)
 8006ed0:	635a      	str	r2, [r3, #52]	; 0x34
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fd fa28 	bl	800432c <HAL_DMA_Abort_IT>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d016      	beq.n	8006f10 <HAL_UART_IRQHandler+0x1b8>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006eec:	4610      	mov	r0, r2
 8006eee:	4798      	blx	r3
 8006ef0:	e00e      	b.n	8006f10 <HAL_UART_IRQHandler+0x1b8>
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fc faec 	bl	80034d0 <HAL_UART_ErrorCallback>
 8006ef8:	e00a      	b.n	8006f10 <HAL_UART_IRQHandler+0x1b8>
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fc fae8 	bl	80034d0 <HAL_UART_ErrorCallback>
 8006f00:	e006      	b.n	8006f10 <HAL_UART_IRQHandler+0x1b8>
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7fc fae4 	bl	80034d0 <HAL_UART_ErrorCallback>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	641a      	str	r2, [r3, #64]	; 0x40
 8006f0e:	e0c3      	b.n	8007098 <HAL_UART_IRQHandler+0x340>
 8006f10:	bf00      	nop
 8006f12:	e0c1      	b.n	8007098 <HAL_UART_IRQHandler+0x340>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	f040 80a1 	bne.w	8007060 <HAL_UART_IRQHandler+0x308>
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	f003 0310 	and.w	r3, r3, #16
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 809b 	beq.w	8007060 <HAL_UART_IRQHandler+0x308>
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	f003 0310 	and.w	r3, r3, #16
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 8095 	beq.w	8007060 <HAL_UART_IRQHandler+0x308>
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60fb      	str	r3, [r7, #12]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	695b      	ldr	r3, [r3, #20]
 8006f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d04e      	beq.n	8006ff8 <HAL_UART_IRQHandler+0x2a0>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	823b      	strh	r3, [r7, #16]
 8006f64:	8a3b      	ldrh	r3, [r7, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 8098 	beq.w	800709c <HAL_UART_IRQHandler+0x344>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f70:	8a3a      	ldrh	r2, [r7, #16]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	f080 8092 	bcs.w	800709c <HAL_UART_IRQHandler+0x344>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8a3a      	ldrh	r2, [r7, #16]
 8006f7c:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	2b20      	cmp	r3, #32
 8006f86:	d02b      	beq.n	8006fe0 <HAL_UART_IRQHandler+0x288>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68da      	ldr	r2, [r3, #12]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f96:	60da      	str	r2, [r3, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	695a      	ldr	r2, [r3, #20]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f022 0201 	bic.w	r2, r2, #1
 8006fa6:	615a      	str	r2, [r3, #20]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	695a      	ldr	r2, [r3, #20]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fb6:	615a      	str	r2, [r3, #20]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	631a      	str	r2, [r3, #48]	; 0x30
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68da      	ldr	r2, [r3, #12]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 0210 	bic.w	r2, r2, #16
 8006fd4:	60da      	str	r2, [r3, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7fd f96b 	bl	80042b6 <HAL_DMA_Abort>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f86d 	bl	80070d0 <HAL_UARTEx_RxEventCallback>
 8006ff6:	e051      	b.n	800709c <HAL_UART_IRQHandler+0x344>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007000:	b29b      	uxth	r3, r3
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	827b      	strh	r3, [r7, #18]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800700a:	b29b      	uxth	r3, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d047      	beq.n	80070a0 <HAL_UART_IRQHandler+0x348>
 8007010:	8a7b      	ldrh	r3, [r7, #18]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d044      	beq.n	80070a0 <HAL_UART_IRQHandler+0x348>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68da      	ldr	r2, [r3, #12]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007024:	60da      	str	r2, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	695a      	ldr	r2, [r3, #20]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0201 	bic.w	r2, r2, #1
 8007034:	615a      	str	r2, [r3, #20]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2220      	movs	r2, #32
 800703a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68da      	ldr	r2, [r3, #12]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f022 0210 	bic.w	r2, r2, #16
 8007052:	60da      	str	r2, [r3, #12]
 8007054:	8a7b      	ldrh	r3, [r7, #18]
 8007056:	4619      	mov	r1, r3
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f839 	bl	80070d0 <HAL_UARTEx_RxEventCallback>
 800705e:	e01f      	b.n	80070a0 <HAL_UART_IRQHandler+0x348>
 8007060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007066:	2b00      	cmp	r3, #0
 8007068:	d008      	beq.n	800707c <HAL_UART_IRQHandler+0x324>
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007070:	2b00      	cmp	r3, #0
 8007072:	d003      	beq.n	800707c <HAL_UART_IRQHandler+0x324>
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fa22 	bl	80074be <UART_Transmit_IT>
 800707a:	e012      	b.n	80070a2 <HAL_UART_IRQHandler+0x34a>
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00d      	beq.n	80070a2 <HAL_UART_IRQHandler+0x34a>
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800708c:	2b00      	cmp	r3, #0
 800708e:	d008      	beq.n	80070a2 <HAL_UART_IRQHandler+0x34a>
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fa63 	bl	800755c <UART_EndTransmit_IT>
 8007096:	e004      	b.n	80070a2 <HAL_UART_IRQHandler+0x34a>
 8007098:	bf00      	nop
 800709a:	e002      	b.n	80070a2 <HAL_UART_IRQHandler+0x34a>
 800709c:	bf00      	nop
 800709e:	e000      	b.n	80070a2 <HAL_UART_IRQHandler+0x34a>
 80070a0:	bf00      	nop
 80070a2:	3728      	adds	r7, #40	; 0x28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	08007497 	.word	0x08007497

080070ac <HAL_UART_TxCpltCallback>:
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	bf00      	nop
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc80      	pop	{r7}
 80070bc:	4770      	bx	lr

080070be <HAL_UART_RxHalfCpltCallback>:
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
 80070c6:	bf00      	nop
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bc80      	pop	{r7}
 80070ce:	4770      	bx	lr

080070d0 <HAL_UARTEx_RxEventCallback>:
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	460b      	mov	r3, r1
 80070da:	807b      	strh	r3, [r7, #2]
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr

080070e6 <UART_DMAReceiveCplt>:
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b084      	sub	sp, #16
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 0320 	and.w	r3, r3, #32
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d12a      	bne.n	8007158 <UART_DMAReceiveCplt+0x72>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	85da      	strh	r2, [r3, #46]	; 0x2e
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007116:	60da      	str	r2, [r3, #12]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	695a      	ldr	r2, [r3, #20]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0201 	bic.w	r2, r2, #1
 8007126:	615a      	str	r2, [r3, #20]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	695a      	ldr	r2, [r3, #20]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007136:	615a      	str	r2, [r3, #20]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007144:	2b01      	cmp	r3, #1
 8007146:	d107      	bne.n	8007158 <UART_DMAReceiveCplt+0x72>
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0210 	bic.w	r2, r2, #16
 8007156:	60da      	str	r2, [r3, #12]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800715c:	2b01      	cmp	r3, #1
 800715e:	d106      	bne.n	800716e <UART_DMAReceiveCplt+0x88>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007164:	4619      	mov	r1, r3
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f7ff ffb2 	bl	80070d0 <HAL_UARTEx_RxEventCallback>
 800716c:	e002      	b.n	8007174 <UART_DMAReceiveCplt+0x8e>
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f7fc f992 	bl	8003498 <HAL_UART_RxCpltCallback>
 8007174:	bf00      	nop
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <UART_DMARxHalfCplt>:
 800717c:	b580      	push	{r7, lr}
 800717e:	b084      	sub	sp, #16
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	2b01      	cmp	r3, #1
 8007190:	d108      	bne.n	80071a4 <UART_DMARxHalfCplt+0x28>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007196:	085b      	lsrs	r3, r3, #1
 8007198:	b29b      	uxth	r3, r3
 800719a:	4619      	mov	r1, r3
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff ff97 	bl	80070d0 <HAL_UARTEx_RxEventCallback>
 80071a2:	e002      	b.n	80071aa <UART_DMARxHalfCplt+0x2e>
 80071a4:	68f8      	ldr	r0, [r7, #12]
 80071a6:	f7ff ff8a 	bl	80070be <HAL_UART_RxHalfCpltCallback>
 80071aa:	bf00      	nop
 80071ac:	3710      	adds	r7, #16
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <UART_DMAError>:
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	2300      	movs	r3, #0
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c2:	60bb      	str	r3, [r7, #8]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	695b      	ldr	r3, [r3, #20]
 80071ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bf14      	ite	ne
 80071d2:	2301      	movne	r3, #1
 80071d4:	2300      	moveq	r3, #0
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b21      	cmp	r3, #33	; 0x21
 80071e4:	d108      	bne.n	80071f8 <UART_DMAError+0x46>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d005      	beq.n	80071f8 <UART_DMAError+0x46>
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	2200      	movs	r2, #0
 80071f0:	84da      	strh	r2, [r3, #38]	; 0x26
 80071f2:	68b8      	ldr	r0, [r7, #8]
 80071f4:	f000 f90e 	bl	8007414 <UART_EndTxTransfer>
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007202:	2b00      	cmp	r3, #0
 8007204:	bf14      	ite	ne
 8007206:	2301      	movne	r3, #1
 8007208:	2300      	moveq	r3, #0
 800720a:	b2db      	uxtb	r3, r3
 800720c:	60fb      	str	r3, [r7, #12]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007214:	b2db      	uxtb	r3, r3
 8007216:	2b22      	cmp	r3, #34	; 0x22
 8007218:	d108      	bne.n	800722c <UART_DMAError+0x7a>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <UART_DMAError+0x7a>
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2200      	movs	r2, #0
 8007224:	85da      	strh	r2, [r3, #46]	; 0x2e
 8007226:	68b8      	ldr	r0, [r7, #8]
 8007228:	f000 f909 	bl	800743e <UART_EndRxTransfer>
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007230:	f043 0210 	orr.w	r2, r3, #16
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	641a      	str	r2, [r3, #64]	; 0x40
 8007238:	68b8      	ldr	r0, [r7, #8]
 800723a:	f7fc f949 	bl	80034d0 <HAL_UART_ErrorCallback>
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <UART_WaitOnFlagUntilTimeout>:
 8007246:	b580      	push	{r7, lr}
 8007248:	b084      	sub	sp, #16
 800724a:	af00      	add	r7, sp, #0
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	603b      	str	r3, [r7, #0]
 8007252:	4613      	mov	r3, r2
 8007254:	71fb      	strb	r3, [r7, #7]
 8007256:	e02c      	b.n	80072b2 <UART_WaitOnFlagUntilTimeout+0x6c>
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725e:	d028      	beq.n	80072b2 <UART_WaitOnFlagUntilTimeout+0x6c>
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d007      	beq.n	8007276 <UART_WaitOnFlagUntilTimeout+0x30>
 8007266:	f7fc fe15 	bl	8003e94 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	429a      	cmp	r2, r3
 8007274:	d21d      	bcs.n	80072b2 <UART_WaitOnFlagUntilTimeout+0x6c>
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007284:	60da      	str	r2, [r3, #12]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	695a      	ldr	r2, [r3, #20]
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0201 	bic.w	r2, r2, #1
 8007294:	615a      	str	r2, [r3, #20]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2220      	movs	r2, #32
 800729a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80072ae:	2303      	movs	r3, #3
 80072b0:	e00f      	b.n	80072d2 <UART_WaitOnFlagUntilTimeout+0x8c>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4013      	ands	r3, r2
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	429a      	cmp	r2, r3
 80072c0:	bf0c      	ite	eq
 80072c2:	2301      	moveq	r3, #1
 80072c4:	2300      	movne	r3, #0
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d0c3      	beq.n	8007258 <UART_WaitOnFlagUntilTimeout+0x12>
 80072d0:	2300      	movs	r3, #0
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <UART_Start_Receive_IT>:
 80072da:	b480      	push	{r7}
 80072dc:	b085      	sub	sp, #20
 80072de:	af00      	add	r7, sp, #0
 80072e0:	60f8      	str	r0, [r7, #12]
 80072e2:	60b9      	str	r1, [r7, #8]
 80072e4:	4613      	mov	r3, r2
 80072e6:	80fb      	strh	r3, [r7, #6]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	629a      	str	r2, [r3, #40]	; 0x28
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	88fa      	ldrh	r2, [r7, #6]
 80072f2:	859a      	strh	r2, [r3, #44]	; 0x2c
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	88fa      	ldrh	r2, [r7, #6]
 80072f8:	85da      	strh	r2, [r3, #46]	; 0x2e
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	641a      	str	r2, [r3, #64]	; 0x40
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2222      	movs	r2, #34	; 0x22
 8007304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800731e:	60da      	str	r2, [r3, #12]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695a      	ldr	r2, [r3, #20]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f042 0201 	orr.w	r2, r2, #1
 800732e:	615a      	str	r2, [r3, #20]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68da      	ldr	r2, [r3, #12]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0220 	orr.w	r2, r2, #32
 800733e:	60da      	str	r2, [r3, #12]
 8007340:	2300      	movs	r3, #0
 8007342:	4618      	mov	r0, r3
 8007344:	3714      	adds	r7, #20
 8007346:	46bd      	mov	sp, r7
 8007348:	bc80      	pop	{r7}
 800734a:	4770      	bx	lr

0800734c <UART_Start_Receive_DMA>:
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	60f8      	str	r0, [r7, #12]
 8007354:	60b9      	str	r1, [r7, #8]
 8007356:	4613      	mov	r3, r2
 8007358:	80fb      	strh	r3, [r7, #6]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	629a      	str	r2, [r3, #40]	; 0x28
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	88fa      	ldrh	r2, [r7, #6]
 8007364:	859a      	strh	r2, [r3, #44]	; 0x2c
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	641a      	str	r2, [r3, #64]	; 0x40
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2222      	movs	r2, #34	; 0x22
 8007370:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	4a23      	ldr	r2, [pc, #140]	; (8007408 <UART_Start_Receive_DMA+0xbc>)
 800737a:	629a      	str	r2, [r3, #40]	; 0x28
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007380:	4a22      	ldr	r2, [pc, #136]	; (800740c <UART_Start_Receive_DMA+0xc0>)
 8007382:	62da      	str	r2, [r3, #44]	; 0x2c
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	4a21      	ldr	r2, [pc, #132]	; (8007410 <UART_Start_Receive_DMA+0xc4>)
 800738a:	631a      	str	r2, [r3, #48]	; 0x30
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007390:	2200      	movs	r2, #0
 8007392:	635a      	str	r2, [r3, #52]	; 0x34
 8007394:	f107 0308 	add.w	r3, r7, #8
 8007398:	617b      	str	r3, [r7, #20]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3304      	adds	r3, #4
 80073a4:	4619      	mov	r1, r3
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	88fb      	ldrh	r3, [r7, #6]
 80073ac:	f7fc ff24 	bl	80041f8 <HAL_DMA_Start_IT>
 80073b0:	2300      	movs	r3, #0
 80073b2:	613b      	str	r3, [r7, #16]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	613b      	str	r3, [r7, #16]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073dc:	60da      	str	r2, [r3, #12]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	695a      	ldr	r2, [r3, #20]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0201 	orr.w	r2, r2, #1
 80073ec:	615a      	str	r2, [r3, #20]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	695a      	ldr	r2, [r3, #20]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073fc:	615a      	str	r2, [r3, #20]
 80073fe:	2300      	movs	r3, #0
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	080070e7 	.word	0x080070e7
 800740c:	0800717d 	.word	0x0800717d
 8007410:	080071b3 	.word	0x080071b3

08007414 <UART_EndTxTransfer>:
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68da      	ldr	r2, [r3, #12]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800742a:	60da      	str	r2, [r3, #12]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2220      	movs	r2, #32
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr

0800743e <UART_EndRxTransfer>:
 800743e:	b480      	push	{r7}
 8007440:	b083      	sub	sp, #12
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68da      	ldr	r2, [r3, #12]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007454:	60da      	str	r2, [r3, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	695a      	ldr	r2, [r3, #20]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0201 	bic.w	r2, r2, #1
 8007464:	615a      	str	r2, [r3, #20]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746a:	2b01      	cmp	r3, #1
 800746c:	d107      	bne.n	800747e <UART_EndRxTransfer+0x40>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68da      	ldr	r2, [r3, #12]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0210 	bic.w	r2, r2, #16
 800747c:	60da      	str	r2, [r3, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2220      	movs	r2, #32
 8007482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	631a      	str	r2, [r3, #48]	; 0x30
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	bc80      	pop	{r7}
 8007494:	4770      	bx	lr

08007496 <UART_DMAAbortOnError>:
 8007496:	b580      	push	{r7, lr}
 8007498:	b084      	sub	sp, #16
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2200      	movs	r2, #0
 80074a8:	85da      	strh	r2, [r3, #46]	; 0x2e
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	84da      	strh	r2, [r3, #38]	; 0x26
 80074b0:	68f8      	ldr	r0, [r7, #12]
 80074b2:	f7fc f80d 	bl	80034d0 <HAL_UART_ErrorCallback>
 80074b6:	bf00      	nop
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <UART_Transmit_IT>:
 80074be:	b480      	push	{r7}
 80074c0:	b085      	sub	sp, #20
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b21      	cmp	r3, #33	; 0x21
 80074d0:	d13e      	bne.n	8007550 <UART_Transmit_IT+0x92>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074da:	d114      	bne.n	8007506 <UART_Transmit_IT+0x48>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	691b      	ldr	r3, [r3, #16]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d110      	bne.n	8007506 <UART_Transmit_IT+0x48>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a1b      	ldr	r3, [r3, #32]
 80074e8:	60fb      	str	r3, [r7, #12]
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	881b      	ldrh	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074f8:	605a      	str	r2, [r3, #4]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	1c9a      	adds	r2, r3, #2
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	621a      	str	r2, [r3, #32]
 8007504:	e008      	b.n	8007518 <UART_Transmit_IT+0x5a>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	1c59      	adds	r1, r3, #1
 800750c:	687a      	ldr	r2, [r7, #4]
 800750e:	6211      	str	r1, [r2, #32]
 8007510:	781a      	ldrb	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	605a      	str	r2, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800751c:	b29b      	uxth	r3, r3
 800751e:	3b01      	subs	r3, #1
 8007520:	b29b      	uxth	r3, r3
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	4619      	mov	r1, r3
 8007526:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10f      	bne.n	800754c <UART_Transmit_IT+0x8e>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	68da      	ldr	r2, [r3, #12]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800753a:	60da      	str	r2, [r3, #12]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68da      	ldr	r2, [r3, #12]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800754a:	60da      	str	r2, [r3, #12]
 800754c:	2300      	movs	r3, #0
 800754e:	e000      	b.n	8007552 <UART_Transmit_IT+0x94>
 8007550:	2302      	movs	r3, #2
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	bc80      	pop	{r7}
 800755a:	4770      	bx	lr

0800755c <UART_EndTransmit_IT>:
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	68da      	ldr	r2, [r3, #12]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007572:	60da      	str	r2, [r3, #12]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2220      	movs	r2, #32
 8007578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff fd95 	bl	80070ac <HAL_UART_TxCpltCallback>
 8007582:	2300      	movs	r3, #0
 8007584:	4618      	mov	r0, r3
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <UART_Receive_IT>:
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b22      	cmp	r3, #34	; 0x22
 800759e:	f040 8099 	bne.w	80076d4 <UART_Receive_IT+0x148>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075aa:	d117      	bne.n	80075dc <UART_Receive_IT+0x50>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d113      	bne.n	80075dc <UART_Receive_IT+0x50>
 80075b4:	2300      	movs	r3, #0
 80075b6:	617b      	str	r3, [r7, #20]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	801a      	strh	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075d4:	1c9a      	adds	r2, r3, #2
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	629a      	str	r2, [r3, #40]	; 0x28
 80075da:	e026      	b.n	800762a <UART_Receive_IT+0x9e>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	2300      	movs	r3, #0
 80075e4:	613b      	str	r3, [r7, #16]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ee:	d007      	beq.n	8007600 <UART_Receive_IT+0x74>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d10a      	bne.n	800760e <UART_Receive_IT+0x82>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d106      	bne.n	800760e <UART_Receive_IT+0x82>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	b2da      	uxtb	r2, r3
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	701a      	strb	r2, [r3, #0]
 800760c:	e008      	b.n	8007620 <UART_Receive_IT+0x94>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	b2db      	uxtb	r3, r3
 8007616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800761a:	b2da      	uxtb	r2, r3
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	701a      	strb	r2, [r3, #0]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	629a      	str	r2, [r3, #40]	; 0x28
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800762e:	b29b      	uxth	r3, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	b29b      	uxth	r3, r3
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	4619      	mov	r1, r3
 8007638:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800763a:	2b00      	cmp	r3, #0
 800763c:	d148      	bne.n	80076d0 <UART_Receive_IT+0x144>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 0220 	bic.w	r2, r2, #32
 800764c:	60da      	str	r2, [r3, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68da      	ldr	r2, [r3, #12]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800765c:	60da      	str	r2, [r3, #12]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	695a      	ldr	r2, [r3, #20]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0201 	bic.w	r2, r2, #1
 800766c:	615a      	str	r2, [r3, #20]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2220      	movs	r2, #32
 8007672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767a:	2b01      	cmp	r3, #1
 800767c:	d123      	bne.n	80076c6 <UART_Receive_IT+0x13a>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	631a      	str	r2, [r3, #48]	; 0x30
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f022 0210 	bic.w	r2, r2, #16
 8007692:	60da      	str	r2, [r3, #12]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f003 0310 	and.w	r3, r3, #16
 800769e:	2b10      	cmp	r3, #16
 80076a0:	d10a      	bne.n	80076b8 <UART_Receive_IT+0x12c>
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	60fb      	str	r3, [r7, #12]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	60fb      	str	r3, [r7, #12]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076bc:	4619      	mov	r1, r3
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f7ff fd06 	bl	80070d0 <HAL_UARTEx_RxEventCallback>
 80076c4:	e002      	b.n	80076cc <UART_Receive_IT+0x140>
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7fb fee6 	bl	8003498 <HAL_UART_RxCpltCallback>
 80076cc:	2300      	movs	r3, #0
 80076ce:	e002      	b.n	80076d6 <UART_Receive_IT+0x14a>
 80076d0:	2300      	movs	r3, #0
 80076d2:	e000      	b.n	80076d6 <UART_Receive_IT+0x14a>
 80076d4:	2302      	movs	r3, #2
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <UART_SetConfig>:
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68da      	ldr	r2, [r3, #12]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	430a      	orrs	r2, r1
 80076fc:	611a      	str	r2, [r3, #16]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	689a      	ldr	r2, [r3, #8]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	4313      	orrs	r3, r2
 800770e:	60bb      	str	r3, [r7, #8]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800771a:	f023 030c 	bic.w	r3, r3, #12
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	6812      	ldr	r2, [r2, #0]
 8007722:	68b9      	ldr	r1, [r7, #8]
 8007724:	430b      	orrs	r3, r1
 8007726:	60d3      	str	r3, [r2, #12]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	699a      	ldr	r2, [r3, #24]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	615a      	str	r2, [r3, #20]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a2c      	ldr	r2, [pc, #176]	; (80077f4 <UART_SetConfig+0x114>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d103      	bne.n	8007750 <UART_SetConfig+0x70>
 8007748:	f7fe f83c 	bl	80057c4 <HAL_RCC_GetPCLK2Freq>
 800774c:	60f8      	str	r0, [r7, #12]
 800774e:	e002      	b.n	8007756 <UART_SetConfig+0x76>
 8007750:	f7fe f824 	bl	800579c <HAL_RCC_GetPCLK1Freq>
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	4613      	mov	r3, r2
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	009a      	lsls	r2, r3, #2
 8007760:	441a      	add	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	fbb2 f3f3 	udiv	r3, r2, r3
 800776c:	4a22      	ldr	r2, [pc, #136]	; (80077f8 <UART_SetConfig+0x118>)
 800776e:	fba2 2303 	umull	r2, r3, r2, r3
 8007772:	095b      	lsrs	r3, r3, #5
 8007774:	0119      	lsls	r1, r3, #4
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009a      	lsls	r2, r3, #2
 8007780:	441a      	add	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	fbb2 f2f3 	udiv	r2, r2, r3
 800778c:	4b1a      	ldr	r3, [pc, #104]	; (80077f8 <UART_SetConfig+0x118>)
 800778e:	fba3 0302 	umull	r0, r3, r3, r2
 8007792:	095b      	lsrs	r3, r3, #5
 8007794:	2064      	movs	r0, #100	; 0x64
 8007796:	fb00 f303 	mul.w	r3, r0, r3
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	011b      	lsls	r3, r3, #4
 800779e:	3332      	adds	r3, #50	; 0x32
 80077a0:	4a15      	ldr	r2, [pc, #84]	; (80077f8 <UART_SetConfig+0x118>)
 80077a2:	fba2 2303 	umull	r2, r3, r2, r3
 80077a6:	095b      	lsrs	r3, r3, #5
 80077a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80077ac:	4419      	add	r1, r3
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4613      	mov	r3, r2
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	009a      	lsls	r2, r3, #2
 80077b8:	441a      	add	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80077c4:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <UART_SetConfig+0x118>)
 80077c6:	fba3 0302 	umull	r0, r3, r3, r2
 80077ca:	095b      	lsrs	r3, r3, #5
 80077cc:	2064      	movs	r0, #100	; 0x64
 80077ce:	fb00 f303 	mul.w	r3, r0, r3
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	3332      	adds	r3, #50	; 0x32
 80077d8:	4a07      	ldr	r2, [pc, #28]	; (80077f8 <UART_SetConfig+0x118>)
 80077da:	fba2 2303 	umull	r2, r3, r2, r3
 80077de:	095b      	lsrs	r3, r3, #5
 80077e0:	f003 020f 	and.w	r2, r3, #15
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	440a      	add	r2, r1
 80077ea:	609a      	str	r2, [r3, #8]
 80077ec:	bf00      	nop
 80077ee:	3710      	adds	r7, #16
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	40013800 	.word	0x40013800
 80077f8:	51eb851f 	.word	0x51eb851f

080077fc <__assert_func>:
 80077fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077fe:	4614      	mov	r4, r2
 8007800:	461a      	mov	r2, r3
 8007802:	4b09      	ldr	r3, [pc, #36]	; (8007828 <__assert_func+0x2c>)
 8007804:	4605      	mov	r5, r0
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68d8      	ldr	r0, [r3, #12]
 800780a:	b14c      	cbz	r4, 8007820 <__assert_func+0x24>
 800780c:	4b07      	ldr	r3, [pc, #28]	; (800782c <__assert_func+0x30>)
 800780e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007812:	9100      	str	r1, [sp, #0]
 8007814:	462b      	mov	r3, r5
 8007816:	4906      	ldr	r1, [pc, #24]	; (8007830 <__assert_func+0x34>)
 8007818:	f000 f814 	bl	8007844 <fiprintf>
 800781c:	f000 fbfe 	bl	800801c <abort>
 8007820:	4b04      	ldr	r3, [pc, #16]	; (8007834 <__assert_func+0x38>)
 8007822:	461c      	mov	r4, r3
 8007824:	e7f3      	b.n	800780e <__assert_func+0x12>
 8007826:	bf00      	nop
 8007828:	20000010 	.word	0x20000010
 800782c:	080099cc 	.word	0x080099cc
 8007830:	080099d9 	.word	0x080099d9
 8007834:	08009a07 	.word	0x08009a07

08007838 <__errno>:
 8007838:	4b01      	ldr	r3, [pc, #4]	; (8007840 <__errno+0x8>)
 800783a:	6818      	ldr	r0, [r3, #0]
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	20000010 	.word	0x20000010

08007844 <fiprintf>:
 8007844:	b40e      	push	{r1, r2, r3}
 8007846:	b503      	push	{r0, r1, lr}
 8007848:	4601      	mov	r1, r0
 800784a:	ab03      	add	r3, sp, #12
 800784c:	4805      	ldr	r0, [pc, #20]	; (8007864 <fiprintf+0x20>)
 800784e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007852:	6800      	ldr	r0, [r0, #0]
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	f000 f85b 	bl	8007910 <_vfiprintf_r>
 800785a:	b002      	add	sp, #8
 800785c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007860:	b003      	add	sp, #12
 8007862:	4770      	bx	lr
 8007864:	20000010 	.word	0x20000010

08007868 <__libc_init_array>:
 8007868:	b570      	push	{r4, r5, r6, lr}
 800786a:	2600      	movs	r6, #0
 800786c:	4d0c      	ldr	r5, [pc, #48]	; (80078a0 <__libc_init_array+0x38>)
 800786e:	4c0d      	ldr	r4, [pc, #52]	; (80078a4 <__libc_init_array+0x3c>)
 8007870:	1b64      	subs	r4, r4, r5
 8007872:	10a4      	asrs	r4, r4, #2
 8007874:	42a6      	cmp	r6, r4
 8007876:	d109      	bne.n	800788c <__libc_init_array+0x24>
 8007878:	f002 f850 	bl	800991c <_init>
 800787c:	2600      	movs	r6, #0
 800787e:	4d0a      	ldr	r5, [pc, #40]	; (80078a8 <__libc_init_array+0x40>)
 8007880:	4c0a      	ldr	r4, [pc, #40]	; (80078ac <__libc_init_array+0x44>)
 8007882:	1b64      	subs	r4, r4, r5
 8007884:	10a4      	asrs	r4, r4, #2
 8007886:	42a6      	cmp	r6, r4
 8007888:	d105      	bne.n	8007896 <__libc_init_array+0x2e>
 800788a:	bd70      	pop	{r4, r5, r6, pc}
 800788c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007890:	4798      	blx	r3
 8007892:	3601      	adds	r6, #1
 8007894:	e7ee      	b.n	8007874 <__libc_init_array+0xc>
 8007896:	f855 3b04 	ldr.w	r3, [r5], #4
 800789a:	4798      	blx	r3
 800789c:	3601      	adds	r6, #1
 800789e:	e7f2      	b.n	8007886 <__libc_init_array+0x1e>
 80078a0:	08009c78 	.word	0x08009c78
 80078a4:	08009c78 	.word	0x08009c78
 80078a8:	08009c78 	.word	0x08009c78
 80078ac:	08009c7c 	.word	0x08009c7c

080078b0 <memset>:
 80078b0:	4603      	mov	r3, r0
 80078b2:	4402      	add	r2, r0
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d100      	bne.n	80078ba <memset+0xa>
 80078b8:	4770      	bx	lr
 80078ba:	f803 1b01 	strb.w	r1, [r3], #1
 80078be:	e7f9      	b.n	80078b4 <memset+0x4>

080078c0 <__sfputc_r>:
 80078c0:	6893      	ldr	r3, [r2, #8]
 80078c2:	b410      	push	{r4}
 80078c4:	3b01      	subs	r3, #1
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	6093      	str	r3, [r2, #8]
 80078ca:	da07      	bge.n	80078dc <__sfputc_r+0x1c>
 80078cc:	6994      	ldr	r4, [r2, #24]
 80078ce:	42a3      	cmp	r3, r4
 80078d0:	db01      	blt.n	80078d6 <__sfputc_r+0x16>
 80078d2:	290a      	cmp	r1, #10
 80078d4:	d102      	bne.n	80078dc <__sfputc_r+0x1c>
 80078d6:	bc10      	pop	{r4}
 80078d8:	f000 bae0 	b.w	8007e9c <__swbuf_r>
 80078dc:	6813      	ldr	r3, [r2, #0]
 80078de:	1c58      	adds	r0, r3, #1
 80078e0:	6010      	str	r0, [r2, #0]
 80078e2:	7019      	strb	r1, [r3, #0]
 80078e4:	4608      	mov	r0, r1
 80078e6:	bc10      	pop	{r4}
 80078e8:	4770      	bx	lr

080078ea <__sfputs_r>:
 80078ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ec:	4606      	mov	r6, r0
 80078ee:	460f      	mov	r7, r1
 80078f0:	4614      	mov	r4, r2
 80078f2:	18d5      	adds	r5, r2, r3
 80078f4:	42ac      	cmp	r4, r5
 80078f6:	d101      	bne.n	80078fc <__sfputs_r+0x12>
 80078f8:	2000      	movs	r0, #0
 80078fa:	e007      	b.n	800790c <__sfputs_r+0x22>
 80078fc:	463a      	mov	r2, r7
 80078fe:	4630      	mov	r0, r6
 8007900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007904:	f7ff ffdc 	bl	80078c0 <__sfputc_r>
 8007908:	1c43      	adds	r3, r0, #1
 800790a:	d1f3      	bne.n	80078f4 <__sfputs_r+0xa>
 800790c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007910 <_vfiprintf_r>:
 8007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	460d      	mov	r5, r1
 8007916:	4614      	mov	r4, r2
 8007918:	4698      	mov	r8, r3
 800791a:	4606      	mov	r6, r0
 800791c:	b09d      	sub	sp, #116	; 0x74
 800791e:	b118      	cbz	r0, 8007928 <_vfiprintf_r+0x18>
 8007920:	6983      	ldr	r3, [r0, #24]
 8007922:	b90b      	cbnz	r3, 8007928 <_vfiprintf_r+0x18>
 8007924:	f000 fc98 	bl	8008258 <__sinit>
 8007928:	4b89      	ldr	r3, [pc, #548]	; (8007b50 <_vfiprintf_r+0x240>)
 800792a:	429d      	cmp	r5, r3
 800792c:	d11b      	bne.n	8007966 <_vfiprintf_r+0x56>
 800792e:	6875      	ldr	r5, [r6, #4]
 8007930:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007932:	07d9      	lsls	r1, r3, #31
 8007934:	d405      	bmi.n	8007942 <_vfiprintf_r+0x32>
 8007936:	89ab      	ldrh	r3, [r5, #12]
 8007938:	059a      	lsls	r2, r3, #22
 800793a:	d402      	bmi.n	8007942 <_vfiprintf_r+0x32>
 800793c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800793e:	f000 fd29 	bl	8008394 <__retarget_lock_acquire_recursive>
 8007942:	89ab      	ldrh	r3, [r5, #12]
 8007944:	071b      	lsls	r3, r3, #28
 8007946:	d501      	bpl.n	800794c <_vfiprintf_r+0x3c>
 8007948:	692b      	ldr	r3, [r5, #16]
 800794a:	b9eb      	cbnz	r3, 8007988 <_vfiprintf_r+0x78>
 800794c:	4629      	mov	r1, r5
 800794e:	4630      	mov	r0, r6
 8007950:	f000 faf6 	bl	8007f40 <__swsetup_r>
 8007954:	b1c0      	cbz	r0, 8007988 <_vfiprintf_r+0x78>
 8007956:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007958:	07dc      	lsls	r4, r3, #31
 800795a:	d50e      	bpl.n	800797a <_vfiprintf_r+0x6a>
 800795c:	f04f 30ff 	mov.w	r0, #4294967295
 8007960:	b01d      	add	sp, #116	; 0x74
 8007962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007966:	4b7b      	ldr	r3, [pc, #492]	; (8007b54 <_vfiprintf_r+0x244>)
 8007968:	429d      	cmp	r5, r3
 800796a:	d101      	bne.n	8007970 <_vfiprintf_r+0x60>
 800796c:	68b5      	ldr	r5, [r6, #8]
 800796e:	e7df      	b.n	8007930 <_vfiprintf_r+0x20>
 8007970:	4b79      	ldr	r3, [pc, #484]	; (8007b58 <_vfiprintf_r+0x248>)
 8007972:	429d      	cmp	r5, r3
 8007974:	bf08      	it	eq
 8007976:	68f5      	ldreq	r5, [r6, #12]
 8007978:	e7da      	b.n	8007930 <_vfiprintf_r+0x20>
 800797a:	89ab      	ldrh	r3, [r5, #12]
 800797c:	0598      	lsls	r0, r3, #22
 800797e:	d4ed      	bmi.n	800795c <_vfiprintf_r+0x4c>
 8007980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007982:	f000 fd08 	bl	8008396 <__retarget_lock_release_recursive>
 8007986:	e7e9      	b.n	800795c <_vfiprintf_r+0x4c>
 8007988:	2300      	movs	r3, #0
 800798a:	9309      	str	r3, [sp, #36]	; 0x24
 800798c:	2320      	movs	r3, #32
 800798e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007992:	2330      	movs	r3, #48	; 0x30
 8007994:	f04f 0901 	mov.w	r9, #1
 8007998:	f8cd 800c 	str.w	r8, [sp, #12]
 800799c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007b5c <_vfiprintf_r+0x24c>
 80079a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079a4:	4623      	mov	r3, r4
 80079a6:	469a      	mov	sl, r3
 80079a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079ac:	b10a      	cbz	r2, 80079b2 <_vfiprintf_r+0xa2>
 80079ae:	2a25      	cmp	r2, #37	; 0x25
 80079b0:	d1f9      	bne.n	80079a6 <_vfiprintf_r+0x96>
 80079b2:	ebba 0b04 	subs.w	fp, sl, r4
 80079b6:	d00b      	beq.n	80079d0 <_vfiprintf_r+0xc0>
 80079b8:	465b      	mov	r3, fp
 80079ba:	4622      	mov	r2, r4
 80079bc:	4629      	mov	r1, r5
 80079be:	4630      	mov	r0, r6
 80079c0:	f7ff ff93 	bl	80078ea <__sfputs_r>
 80079c4:	3001      	adds	r0, #1
 80079c6:	f000 80aa 	beq.w	8007b1e <_vfiprintf_r+0x20e>
 80079ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079cc:	445a      	add	r2, fp
 80079ce:	9209      	str	r2, [sp, #36]	; 0x24
 80079d0:	f89a 3000 	ldrb.w	r3, [sl]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	f000 80a2 	beq.w	8007b1e <_vfiprintf_r+0x20e>
 80079da:	2300      	movs	r3, #0
 80079dc:	f04f 32ff 	mov.w	r2, #4294967295
 80079e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e4:	f10a 0a01 	add.w	sl, sl, #1
 80079e8:	9304      	str	r3, [sp, #16]
 80079ea:	9307      	str	r3, [sp, #28]
 80079ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079f0:	931a      	str	r3, [sp, #104]	; 0x68
 80079f2:	4654      	mov	r4, sl
 80079f4:	2205      	movs	r2, #5
 80079f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fa:	4858      	ldr	r0, [pc, #352]	; (8007b5c <_vfiprintf_r+0x24c>)
 80079fc:	f000 fd32 	bl	8008464 <memchr>
 8007a00:	9a04      	ldr	r2, [sp, #16]
 8007a02:	b9d8      	cbnz	r0, 8007a3c <_vfiprintf_r+0x12c>
 8007a04:	06d1      	lsls	r1, r2, #27
 8007a06:	bf44      	itt	mi
 8007a08:	2320      	movmi	r3, #32
 8007a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a0e:	0713      	lsls	r3, r2, #28
 8007a10:	bf44      	itt	mi
 8007a12:	232b      	movmi	r3, #43	; 0x2b
 8007a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a18:	f89a 3000 	ldrb.w	r3, [sl]
 8007a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8007a1e:	d015      	beq.n	8007a4c <_vfiprintf_r+0x13c>
 8007a20:	4654      	mov	r4, sl
 8007a22:	2000      	movs	r0, #0
 8007a24:	f04f 0c0a 	mov.w	ip, #10
 8007a28:	9a07      	ldr	r2, [sp, #28]
 8007a2a:	4621      	mov	r1, r4
 8007a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a30:	3b30      	subs	r3, #48	; 0x30
 8007a32:	2b09      	cmp	r3, #9
 8007a34:	d94e      	bls.n	8007ad4 <_vfiprintf_r+0x1c4>
 8007a36:	b1b0      	cbz	r0, 8007a66 <_vfiprintf_r+0x156>
 8007a38:	9207      	str	r2, [sp, #28]
 8007a3a:	e014      	b.n	8007a66 <_vfiprintf_r+0x156>
 8007a3c:	eba0 0308 	sub.w	r3, r0, r8
 8007a40:	fa09 f303 	lsl.w	r3, r9, r3
 8007a44:	4313      	orrs	r3, r2
 8007a46:	46a2      	mov	sl, r4
 8007a48:	9304      	str	r3, [sp, #16]
 8007a4a:	e7d2      	b.n	80079f2 <_vfiprintf_r+0xe2>
 8007a4c:	9b03      	ldr	r3, [sp, #12]
 8007a4e:	1d19      	adds	r1, r3, #4
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	9103      	str	r1, [sp, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	bfbb      	ittet	lt
 8007a58:	425b      	neglt	r3, r3
 8007a5a:	f042 0202 	orrlt.w	r2, r2, #2
 8007a5e:	9307      	strge	r3, [sp, #28]
 8007a60:	9307      	strlt	r3, [sp, #28]
 8007a62:	bfb8      	it	lt
 8007a64:	9204      	strlt	r2, [sp, #16]
 8007a66:	7823      	ldrb	r3, [r4, #0]
 8007a68:	2b2e      	cmp	r3, #46	; 0x2e
 8007a6a:	d10c      	bne.n	8007a86 <_vfiprintf_r+0x176>
 8007a6c:	7863      	ldrb	r3, [r4, #1]
 8007a6e:	2b2a      	cmp	r3, #42	; 0x2a
 8007a70:	d135      	bne.n	8007ade <_vfiprintf_r+0x1ce>
 8007a72:	9b03      	ldr	r3, [sp, #12]
 8007a74:	3402      	adds	r4, #2
 8007a76:	1d1a      	adds	r2, r3, #4
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	9203      	str	r2, [sp, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	bfb8      	it	lt
 8007a80:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a84:	9305      	str	r3, [sp, #20]
 8007a86:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007b60 <_vfiprintf_r+0x250>
 8007a8a:	2203      	movs	r2, #3
 8007a8c:	4650      	mov	r0, sl
 8007a8e:	7821      	ldrb	r1, [r4, #0]
 8007a90:	f000 fce8 	bl	8008464 <memchr>
 8007a94:	b140      	cbz	r0, 8007aa8 <_vfiprintf_r+0x198>
 8007a96:	2340      	movs	r3, #64	; 0x40
 8007a98:	eba0 000a 	sub.w	r0, r0, sl
 8007a9c:	fa03 f000 	lsl.w	r0, r3, r0
 8007aa0:	9b04      	ldr	r3, [sp, #16]
 8007aa2:	3401      	adds	r4, #1
 8007aa4:	4303      	orrs	r3, r0
 8007aa6:	9304      	str	r3, [sp, #16]
 8007aa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aac:	2206      	movs	r2, #6
 8007aae:	482d      	ldr	r0, [pc, #180]	; (8007b64 <_vfiprintf_r+0x254>)
 8007ab0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ab4:	f000 fcd6 	bl	8008464 <memchr>
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	d03f      	beq.n	8007b3c <_vfiprintf_r+0x22c>
 8007abc:	4b2a      	ldr	r3, [pc, #168]	; (8007b68 <_vfiprintf_r+0x258>)
 8007abe:	bb1b      	cbnz	r3, 8007b08 <_vfiprintf_r+0x1f8>
 8007ac0:	9b03      	ldr	r3, [sp, #12]
 8007ac2:	3307      	adds	r3, #7
 8007ac4:	f023 0307 	bic.w	r3, r3, #7
 8007ac8:	3308      	adds	r3, #8
 8007aca:	9303      	str	r3, [sp, #12]
 8007acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ace:	443b      	add	r3, r7
 8007ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad2:	e767      	b.n	80079a4 <_vfiprintf_r+0x94>
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	2001      	movs	r0, #1
 8007ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007adc:	e7a5      	b.n	8007a2a <_vfiprintf_r+0x11a>
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f04f 0c0a 	mov.w	ip, #10
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	3401      	adds	r4, #1
 8007ae8:	9305      	str	r3, [sp, #20]
 8007aea:	4620      	mov	r0, r4
 8007aec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007af0:	3a30      	subs	r2, #48	; 0x30
 8007af2:	2a09      	cmp	r2, #9
 8007af4:	d903      	bls.n	8007afe <_vfiprintf_r+0x1ee>
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0c5      	beq.n	8007a86 <_vfiprintf_r+0x176>
 8007afa:	9105      	str	r1, [sp, #20]
 8007afc:	e7c3      	b.n	8007a86 <_vfiprintf_r+0x176>
 8007afe:	4604      	mov	r4, r0
 8007b00:	2301      	movs	r3, #1
 8007b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b06:	e7f0      	b.n	8007aea <_vfiprintf_r+0x1da>
 8007b08:	ab03      	add	r3, sp, #12
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	462a      	mov	r2, r5
 8007b0e:	4630      	mov	r0, r6
 8007b10:	4b16      	ldr	r3, [pc, #88]	; (8007b6c <_vfiprintf_r+0x25c>)
 8007b12:	a904      	add	r1, sp, #16
 8007b14:	f3af 8000 	nop.w
 8007b18:	4607      	mov	r7, r0
 8007b1a:	1c78      	adds	r0, r7, #1
 8007b1c:	d1d6      	bne.n	8007acc <_vfiprintf_r+0x1bc>
 8007b1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b20:	07d9      	lsls	r1, r3, #31
 8007b22:	d405      	bmi.n	8007b30 <_vfiprintf_r+0x220>
 8007b24:	89ab      	ldrh	r3, [r5, #12]
 8007b26:	059a      	lsls	r2, r3, #22
 8007b28:	d402      	bmi.n	8007b30 <_vfiprintf_r+0x220>
 8007b2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b2c:	f000 fc33 	bl	8008396 <__retarget_lock_release_recursive>
 8007b30:	89ab      	ldrh	r3, [r5, #12]
 8007b32:	065b      	lsls	r3, r3, #25
 8007b34:	f53f af12 	bmi.w	800795c <_vfiprintf_r+0x4c>
 8007b38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b3a:	e711      	b.n	8007960 <_vfiprintf_r+0x50>
 8007b3c:	ab03      	add	r3, sp, #12
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	462a      	mov	r2, r5
 8007b42:	4630      	mov	r0, r6
 8007b44:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <_vfiprintf_r+0x25c>)
 8007b46:	a904      	add	r1, sp, #16
 8007b48:	f000 f882 	bl	8007c50 <_printf_i>
 8007b4c:	e7e4      	b.n	8007b18 <_vfiprintf_r+0x208>
 8007b4e:	bf00      	nop
 8007b50:	08009a60 	.word	0x08009a60
 8007b54:	08009a80 	.word	0x08009a80
 8007b58:	08009a40 	.word	0x08009a40
 8007b5c:	08009a0c 	.word	0x08009a0c
 8007b60:	08009a12 	.word	0x08009a12
 8007b64:	08009a16 	.word	0x08009a16
 8007b68:	00000000 	.word	0x00000000
 8007b6c:	080078eb 	.word	0x080078eb

08007b70 <_printf_common>:
 8007b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b74:	4616      	mov	r6, r2
 8007b76:	4699      	mov	r9, r3
 8007b78:	688a      	ldr	r2, [r1, #8]
 8007b7a:	690b      	ldr	r3, [r1, #16]
 8007b7c:	4607      	mov	r7, r0
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	bfb8      	it	lt
 8007b82:	4613      	movlt	r3, r2
 8007b84:	6033      	str	r3, [r6, #0]
 8007b86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b8a:	460c      	mov	r4, r1
 8007b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b90:	b10a      	cbz	r2, 8007b96 <_printf_common+0x26>
 8007b92:	3301      	adds	r3, #1
 8007b94:	6033      	str	r3, [r6, #0]
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	0699      	lsls	r1, r3, #26
 8007b9a:	bf42      	ittt	mi
 8007b9c:	6833      	ldrmi	r3, [r6, #0]
 8007b9e:	3302      	addmi	r3, #2
 8007ba0:	6033      	strmi	r3, [r6, #0]
 8007ba2:	6825      	ldr	r5, [r4, #0]
 8007ba4:	f015 0506 	ands.w	r5, r5, #6
 8007ba8:	d106      	bne.n	8007bb8 <_printf_common+0x48>
 8007baa:	f104 0a19 	add.w	sl, r4, #25
 8007bae:	68e3      	ldr	r3, [r4, #12]
 8007bb0:	6832      	ldr	r2, [r6, #0]
 8007bb2:	1a9b      	subs	r3, r3, r2
 8007bb4:	42ab      	cmp	r3, r5
 8007bb6:	dc28      	bgt.n	8007c0a <_printf_common+0x9a>
 8007bb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007bbc:	1e13      	subs	r3, r2, #0
 8007bbe:	6822      	ldr	r2, [r4, #0]
 8007bc0:	bf18      	it	ne
 8007bc2:	2301      	movne	r3, #1
 8007bc4:	0692      	lsls	r2, r2, #26
 8007bc6:	d42d      	bmi.n	8007c24 <_printf_common+0xb4>
 8007bc8:	4649      	mov	r1, r9
 8007bca:	4638      	mov	r0, r7
 8007bcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bd0:	47c0      	blx	r8
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	d020      	beq.n	8007c18 <_printf_common+0xa8>
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	68e5      	ldr	r5, [r4, #12]
 8007bda:	f003 0306 	and.w	r3, r3, #6
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	bf18      	it	ne
 8007be2:	2500      	movne	r5, #0
 8007be4:	6832      	ldr	r2, [r6, #0]
 8007be6:	f04f 0600 	mov.w	r6, #0
 8007bea:	68a3      	ldr	r3, [r4, #8]
 8007bec:	bf08      	it	eq
 8007bee:	1aad      	subeq	r5, r5, r2
 8007bf0:	6922      	ldr	r2, [r4, #16]
 8007bf2:	bf08      	it	eq
 8007bf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	bfc4      	itt	gt
 8007bfc:	1a9b      	subgt	r3, r3, r2
 8007bfe:	18ed      	addgt	r5, r5, r3
 8007c00:	341a      	adds	r4, #26
 8007c02:	42b5      	cmp	r5, r6
 8007c04:	d11a      	bne.n	8007c3c <_printf_common+0xcc>
 8007c06:	2000      	movs	r0, #0
 8007c08:	e008      	b.n	8007c1c <_printf_common+0xac>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	4652      	mov	r2, sl
 8007c0e:	4649      	mov	r1, r9
 8007c10:	4638      	mov	r0, r7
 8007c12:	47c0      	blx	r8
 8007c14:	3001      	adds	r0, #1
 8007c16:	d103      	bne.n	8007c20 <_printf_common+0xb0>
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c20:	3501      	adds	r5, #1
 8007c22:	e7c4      	b.n	8007bae <_printf_common+0x3e>
 8007c24:	2030      	movs	r0, #48	; 0x30
 8007c26:	18e1      	adds	r1, r4, r3
 8007c28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c2c:	1c5a      	adds	r2, r3, #1
 8007c2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c32:	4422      	add	r2, r4
 8007c34:	3302      	adds	r3, #2
 8007c36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c3a:	e7c5      	b.n	8007bc8 <_printf_common+0x58>
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	4622      	mov	r2, r4
 8007c40:	4649      	mov	r1, r9
 8007c42:	4638      	mov	r0, r7
 8007c44:	47c0      	blx	r8
 8007c46:	3001      	adds	r0, #1
 8007c48:	d0e6      	beq.n	8007c18 <_printf_common+0xa8>
 8007c4a:	3601      	adds	r6, #1
 8007c4c:	e7d9      	b.n	8007c02 <_printf_common+0x92>
	...

08007c50 <_printf_i>:
 8007c50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c54:	7e0f      	ldrb	r7, [r1, #24]
 8007c56:	4691      	mov	r9, r2
 8007c58:	2f78      	cmp	r7, #120	; 0x78
 8007c5a:	4680      	mov	r8, r0
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	469a      	mov	sl, r3
 8007c60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c66:	d807      	bhi.n	8007c78 <_printf_i+0x28>
 8007c68:	2f62      	cmp	r7, #98	; 0x62
 8007c6a:	d80a      	bhi.n	8007c82 <_printf_i+0x32>
 8007c6c:	2f00      	cmp	r7, #0
 8007c6e:	f000 80d9 	beq.w	8007e24 <_printf_i+0x1d4>
 8007c72:	2f58      	cmp	r7, #88	; 0x58
 8007c74:	f000 80a4 	beq.w	8007dc0 <_printf_i+0x170>
 8007c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c80:	e03a      	b.n	8007cf8 <_printf_i+0xa8>
 8007c82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c86:	2b15      	cmp	r3, #21
 8007c88:	d8f6      	bhi.n	8007c78 <_printf_i+0x28>
 8007c8a:	a101      	add	r1, pc, #4	; (adr r1, 8007c90 <_printf_i+0x40>)
 8007c8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c90:	08007ce9 	.word	0x08007ce9
 8007c94:	08007cfd 	.word	0x08007cfd
 8007c98:	08007c79 	.word	0x08007c79
 8007c9c:	08007c79 	.word	0x08007c79
 8007ca0:	08007c79 	.word	0x08007c79
 8007ca4:	08007c79 	.word	0x08007c79
 8007ca8:	08007cfd 	.word	0x08007cfd
 8007cac:	08007c79 	.word	0x08007c79
 8007cb0:	08007c79 	.word	0x08007c79
 8007cb4:	08007c79 	.word	0x08007c79
 8007cb8:	08007c79 	.word	0x08007c79
 8007cbc:	08007e0b 	.word	0x08007e0b
 8007cc0:	08007d2d 	.word	0x08007d2d
 8007cc4:	08007ded 	.word	0x08007ded
 8007cc8:	08007c79 	.word	0x08007c79
 8007ccc:	08007c79 	.word	0x08007c79
 8007cd0:	08007e2d 	.word	0x08007e2d
 8007cd4:	08007c79 	.word	0x08007c79
 8007cd8:	08007d2d 	.word	0x08007d2d
 8007cdc:	08007c79 	.word	0x08007c79
 8007ce0:	08007c79 	.word	0x08007c79
 8007ce4:	08007df5 	.word	0x08007df5
 8007ce8:	682b      	ldr	r3, [r5, #0]
 8007cea:	1d1a      	adds	r2, r3, #4
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	602a      	str	r2, [r5, #0]
 8007cf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e0a4      	b.n	8007e46 <_printf_i+0x1f6>
 8007cfc:	6820      	ldr	r0, [r4, #0]
 8007cfe:	6829      	ldr	r1, [r5, #0]
 8007d00:	0606      	lsls	r6, r0, #24
 8007d02:	f101 0304 	add.w	r3, r1, #4
 8007d06:	d50a      	bpl.n	8007d1e <_printf_i+0xce>
 8007d08:	680e      	ldr	r6, [r1, #0]
 8007d0a:	602b      	str	r3, [r5, #0]
 8007d0c:	2e00      	cmp	r6, #0
 8007d0e:	da03      	bge.n	8007d18 <_printf_i+0xc8>
 8007d10:	232d      	movs	r3, #45	; 0x2d
 8007d12:	4276      	negs	r6, r6
 8007d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d18:	230a      	movs	r3, #10
 8007d1a:	485e      	ldr	r0, [pc, #376]	; (8007e94 <_printf_i+0x244>)
 8007d1c:	e019      	b.n	8007d52 <_printf_i+0x102>
 8007d1e:	680e      	ldr	r6, [r1, #0]
 8007d20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d24:	602b      	str	r3, [r5, #0]
 8007d26:	bf18      	it	ne
 8007d28:	b236      	sxthne	r6, r6
 8007d2a:	e7ef      	b.n	8007d0c <_printf_i+0xbc>
 8007d2c:	682b      	ldr	r3, [r5, #0]
 8007d2e:	6820      	ldr	r0, [r4, #0]
 8007d30:	1d19      	adds	r1, r3, #4
 8007d32:	6029      	str	r1, [r5, #0]
 8007d34:	0601      	lsls	r1, r0, #24
 8007d36:	d501      	bpl.n	8007d3c <_printf_i+0xec>
 8007d38:	681e      	ldr	r6, [r3, #0]
 8007d3a:	e002      	b.n	8007d42 <_printf_i+0xf2>
 8007d3c:	0646      	lsls	r6, r0, #25
 8007d3e:	d5fb      	bpl.n	8007d38 <_printf_i+0xe8>
 8007d40:	881e      	ldrh	r6, [r3, #0]
 8007d42:	2f6f      	cmp	r7, #111	; 0x6f
 8007d44:	bf0c      	ite	eq
 8007d46:	2308      	moveq	r3, #8
 8007d48:	230a      	movne	r3, #10
 8007d4a:	4852      	ldr	r0, [pc, #328]	; (8007e94 <_printf_i+0x244>)
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d52:	6865      	ldr	r5, [r4, #4]
 8007d54:	2d00      	cmp	r5, #0
 8007d56:	bfa8      	it	ge
 8007d58:	6821      	ldrge	r1, [r4, #0]
 8007d5a:	60a5      	str	r5, [r4, #8]
 8007d5c:	bfa4      	itt	ge
 8007d5e:	f021 0104 	bicge.w	r1, r1, #4
 8007d62:	6021      	strge	r1, [r4, #0]
 8007d64:	b90e      	cbnz	r6, 8007d6a <_printf_i+0x11a>
 8007d66:	2d00      	cmp	r5, #0
 8007d68:	d04d      	beq.n	8007e06 <_printf_i+0x1b6>
 8007d6a:	4615      	mov	r5, r2
 8007d6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d70:	fb03 6711 	mls	r7, r3, r1, r6
 8007d74:	5dc7      	ldrb	r7, [r0, r7]
 8007d76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d7a:	4637      	mov	r7, r6
 8007d7c:	42bb      	cmp	r3, r7
 8007d7e:	460e      	mov	r6, r1
 8007d80:	d9f4      	bls.n	8007d6c <_printf_i+0x11c>
 8007d82:	2b08      	cmp	r3, #8
 8007d84:	d10b      	bne.n	8007d9e <_printf_i+0x14e>
 8007d86:	6823      	ldr	r3, [r4, #0]
 8007d88:	07de      	lsls	r6, r3, #31
 8007d8a:	d508      	bpl.n	8007d9e <_printf_i+0x14e>
 8007d8c:	6923      	ldr	r3, [r4, #16]
 8007d8e:	6861      	ldr	r1, [r4, #4]
 8007d90:	4299      	cmp	r1, r3
 8007d92:	bfde      	ittt	le
 8007d94:	2330      	movle	r3, #48	; 0x30
 8007d96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007d9e:	1b52      	subs	r2, r2, r5
 8007da0:	6122      	str	r2, [r4, #16]
 8007da2:	464b      	mov	r3, r9
 8007da4:	4621      	mov	r1, r4
 8007da6:	4640      	mov	r0, r8
 8007da8:	f8cd a000 	str.w	sl, [sp]
 8007dac:	aa03      	add	r2, sp, #12
 8007dae:	f7ff fedf 	bl	8007b70 <_printf_common>
 8007db2:	3001      	adds	r0, #1
 8007db4:	d14c      	bne.n	8007e50 <_printf_i+0x200>
 8007db6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dba:	b004      	add	sp, #16
 8007dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc0:	4834      	ldr	r0, [pc, #208]	; (8007e94 <_printf_i+0x244>)
 8007dc2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007dc6:	6829      	ldr	r1, [r5, #0]
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	f851 6b04 	ldr.w	r6, [r1], #4
 8007dce:	6029      	str	r1, [r5, #0]
 8007dd0:	061d      	lsls	r5, r3, #24
 8007dd2:	d514      	bpl.n	8007dfe <_printf_i+0x1ae>
 8007dd4:	07df      	lsls	r7, r3, #31
 8007dd6:	bf44      	itt	mi
 8007dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8007ddc:	6023      	strmi	r3, [r4, #0]
 8007dde:	b91e      	cbnz	r6, 8007de8 <_printf_i+0x198>
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	f023 0320 	bic.w	r3, r3, #32
 8007de6:	6023      	str	r3, [r4, #0]
 8007de8:	2310      	movs	r3, #16
 8007dea:	e7af      	b.n	8007d4c <_printf_i+0xfc>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	f043 0320 	orr.w	r3, r3, #32
 8007df2:	6023      	str	r3, [r4, #0]
 8007df4:	2378      	movs	r3, #120	; 0x78
 8007df6:	4828      	ldr	r0, [pc, #160]	; (8007e98 <_printf_i+0x248>)
 8007df8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007dfc:	e7e3      	b.n	8007dc6 <_printf_i+0x176>
 8007dfe:	0659      	lsls	r1, r3, #25
 8007e00:	bf48      	it	mi
 8007e02:	b2b6      	uxthmi	r6, r6
 8007e04:	e7e6      	b.n	8007dd4 <_printf_i+0x184>
 8007e06:	4615      	mov	r5, r2
 8007e08:	e7bb      	b.n	8007d82 <_printf_i+0x132>
 8007e0a:	682b      	ldr	r3, [r5, #0]
 8007e0c:	6826      	ldr	r6, [r4, #0]
 8007e0e:	1d18      	adds	r0, r3, #4
 8007e10:	6961      	ldr	r1, [r4, #20]
 8007e12:	6028      	str	r0, [r5, #0]
 8007e14:	0635      	lsls	r5, r6, #24
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	d501      	bpl.n	8007e1e <_printf_i+0x1ce>
 8007e1a:	6019      	str	r1, [r3, #0]
 8007e1c:	e002      	b.n	8007e24 <_printf_i+0x1d4>
 8007e1e:	0670      	lsls	r0, r6, #25
 8007e20:	d5fb      	bpl.n	8007e1a <_printf_i+0x1ca>
 8007e22:	8019      	strh	r1, [r3, #0]
 8007e24:	2300      	movs	r3, #0
 8007e26:	4615      	mov	r5, r2
 8007e28:	6123      	str	r3, [r4, #16]
 8007e2a:	e7ba      	b.n	8007da2 <_printf_i+0x152>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	2100      	movs	r1, #0
 8007e30:	1d1a      	adds	r2, r3, #4
 8007e32:	602a      	str	r2, [r5, #0]
 8007e34:	681d      	ldr	r5, [r3, #0]
 8007e36:	6862      	ldr	r2, [r4, #4]
 8007e38:	4628      	mov	r0, r5
 8007e3a:	f000 fb13 	bl	8008464 <memchr>
 8007e3e:	b108      	cbz	r0, 8007e44 <_printf_i+0x1f4>
 8007e40:	1b40      	subs	r0, r0, r5
 8007e42:	6060      	str	r0, [r4, #4]
 8007e44:	6863      	ldr	r3, [r4, #4]
 8007e46:	6123      	str	r3, [r4, #16]
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e4e:	e7a8      	b.n	8007da2 <_printf_i+0x152>
 8007e50:	462a      	mov	r2, r5
 8007e52:	4649      	mov	r1, r9
 8007e54:	4640      	mov	r0, r8
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	47d0      	blx	sl
 8007e5a:	3001      	adds	r0, #1
 8007e5c:	d0ab      	beq.n	8007db6 <_printf_i+0x166>
 8007e5e:	6823      	ldr	r3, [r4, #0]
 8007e60:	079b      	lsls	r3, r3, #30
 8007e62:	d413      	bmi.n	8007e8c <_printf_i+0x23c>
 8007e64:	68e0      	ldr	r0, [r4, #12]
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	4298      	cmp	r0, r3
 8007e6a:	bfb8      	it	lt
 8007e6c:	4618      	movlt	r0, r3
 8007e6e:	e7a4      	b.n	8007dba <_printf_i+0x16a>
 8007e70:	2301      	movs	r3, #1
 8007e72:	4632      	mov	r2, r6
 8007e74:	4649      	mov	r1, r9
 8007e76:	4640      	mov	r0, r8
 8007e78:	47d0      	blx	sl
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	d09b      	beq.n	8007db6 <_printf_i+0x166>
 8007e7e:	3501      	adds	r5, #1
 8007e80:	68e3      	ldr	r3, [r4, #12]
 8007e82:	9903      	ldr	r1, [sp, #12]
 8007e84:	1a5b      	subs	r3, r3, r1
 8007e86:	42ab      	cmp	r3, r5
 8007e88:	dcf2      	bgt.n	8007e70 <_printf_i+0x220>
 8007e8a:	e7eb      	b.n	8007e64 <_printf_i+0x214>
 8007e8c:	2500      	movs	r5, #0
 8007e8e:	f104 0619 	add.w	r6, r4, #25
 8007e92:	e7f5      	b.n	8007e80 <_printf_i+0x230>
 8007e94:	08009a1d 	.word	0x08009a1d
 8007e98:	08009a2e 	.word	0x08009a2e

08007e9c <__swbuf_r>:
 8007e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9e:	460e      	mov	r6, r1
 8007ea0:	4614      	mov	r4, r2
 8007ea2:	4605      	mov	r5, r0
 8007ea4:	b118      	cbz	r0, 8007eae <__swbuf_r+0x12>
 8007ea6:	6983      	ldr	r3, [r0, #24]
 8007ea8:	b90b      	cbnz	r3, 8007eae <__swbuf_r+0x12>
 8007eaa:	f000 f9d5 	bl	8008258 <__sinit>
 8007eae:	4b21      	ldr	r3, [pc, #132]	; (8007f34 <__swbuf_r+0x98>)
 8007eb0:	429c      	cmp	r4, r3
 8007eb2:	d12b      	bne.n	8007f0c <__swbuf_r+0x70>
 8007eb4:	686c      	ldr	r4, [r5, #4]
 8007eb6:	69a3      	ldr	r3, [r4, #24]
 8007eb8:	60a3      	str	r3, [r4, #8]
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	071a      	lsls	r2, r3, #28
 8007ebe:	d52f      	bpl.n	8007f20 <__swbuf_r+0x84>
 8007ec0:	6923      	ldr	r3, [r4, #16]
 8007ec2:	b36b      	cbz	r3, 8007f20 <__swbuf_r+0x84>
 8007ec4:	6923      	ldr	r3, [r4, #16]
 8007ec6:	6820      	ldr	r0, [r4, #0]
 8007ec8:	b2f6      	uxtb	r6, r6
 8007eca:	1ac0      	subs	r0, r0, r3
 8007ecc:	6963      	ldr	r3, [r4, #20]
 8007ece:	4637      	mov	r7, r6
 8007ed0:	4283      	cmp	r3, r0
 8007ed2:	dc04      	bgt.n	8007ede <__swbuf_r+0x42>
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f000 f92a 	bl	8008130 <_fflush_r>
 8007edc:	bb30      	cbnz	r0, 8007f2c <__swbuf_r+0x90>
 8007ede:	68a3      	ldr	r3, [r4, #8]
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	3b01      	subs	r3, #1
 8007ee4:	60a3      	str	r3, [r4, #8]
 8007ee6:	6823      	ldr	r3, [r4, #0]
 8007ee8:	1c5a      	adds	r2, r3, #1
 8007eea:	6022      	str	r2, [r4, #0]
 8007eec:	701e      	strb	r6, [r3, #0]
 8007eee:	6963      	ldr	r3, [r4, #20]
 8007ef0:	4283      	cmp	r3, r0
 8007ef2:	d004      	beq.n	8007efe <__swbuf_r+0x62>
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	07db      	lsls	r3, r3, #31
 8007ef8:	d506      	bpl.n	8007f08 <__swbuf_r+0x6c>
 8007efa:	2e0a      	cmp	r6, #10
 8007efc:	d104      	bne.n	8007f08 <__swbuf_r+0x6c>
 8007efe:	4621      	mov	r1, r4
 8007f00:	4628      	mov	r0, r5
 8007f02:	f000 f915 	bl	8008130 <_fflush_r>
 8007f06:	b988      	cbnz	r0, 8007f2c <__swbuf_r+0x90>
 8007f08:	4638      	mov	r0, r7
 8007f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f0c:	4b0a      	ldr	r3, [pc, #40]	; (8007f38 <__swbuf_r+0x9c>)
 8007f0e:	429c      	cmp	r4, r3
 8007f10:	d101      	bne.n	8007f16 <__swbuf_r+0x7a>
 8007f12:	68ac      	ldr	r4, [r5, #8]
 8007f14:	e7cf      	b.n	8007eb6 <__swbuf_r+0x1a>
 8007f16:	4b09      	ldr	r3, [pc, #36]	; (8007f3c <__swbuf_r+0xa0>)
 8007f18:	429c      	cmp	r4, r3
 8007f1a:	bf08      	it	eq
 8007f1c:	68ec      	ldreq	r4, [r5, #12]
 8007f1e:	e7ca      	b.n	8007eb6 <__swbuf_r+0x1a>
 8007f20:	4621      	mov	r1, r4
 8007f22:	4628      	mov	r0, r5
 8007f24:	f000 f80c 	bl	8007f40 <__swsetup_r>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d0cb      	beq.n	8007ec4 <__swbuf_r+0x28>
 8007f2c:	f04f 37ff 	mov.w	r7, #4294967295
 8007f30:	e7ea      	b.n	8007f08 <__swbuf_r+0x6c>
 8007f32:	bf00      	nop
 8007f34:	08009a60 	.word	0x08009a60
 8007f38:	08009a80 	.word	0x08009a80
 8007f3c:	08009a40 	.word	0x08009a40

08007f40 <__swsetup_r>:
 8007f40:	4b32      	ldr	r3, [pc, #200]	; (800800c <__swsetup_r+0xcc>)
 8007f42:	b570      	push	{r4, r5, r6, lr}
 8007f44:	681d      	ldr	r5, [r3, #0]
 8007f46:	4606      	mov	r6, r0
 8007f48:	460c      	mov	r4, r1
 8007f4a:	b125      	cbz	r5, 8007f56 <__swsetup_r+0x16>
 8007f4c:	69ab      	ldr	r3, [r5, #24]
 8007f4e:	b913      	cbnz	r3, 8007f56 <__swsetup_r+0x16>
 8007f50:	4628      	mov	r0, r5
 8007f52:	f000 f981 	bl	8008258 <__sinit>
 8007f56:	4b2e      	ldr	r3, [pc, #184]	; (8008010 <__swsetup_r+0xd0>)
 8007f58:	429c      	cmp	r4, r3
 8007f5a:	d10f      	bne.n	8007f7c <__swsetup_r+0x3c>
 8007f5c:	686c      	ldr	r4, [r5, #4]
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f64:	0719      	lsls	r1, r3, #28
 8007f66:	d42c      	bmi.n	8007fc2 <__swsetup_r+0x82>
 8007f68:	06dd      	lsls	r5, r3, #27
 8007f6a:	d411      	bmi.n	8007f90 <__swsetup_r+0x50>
 8007f6c:	2309      	movs	r3, #9
 8007f6e:	6033      	str	r3, [r6, #0]
 8007f70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007f74:	f04f 30ff 	mov.w	r0, #4294967295
 8007f78:	81a3      	strh	r3, [r4, #12]
 8007f7a:	e03e      	b.n	8007ffa <__swsetup_r+0xba>
 8007f7c:	4b25      	ldr	r3, [pc, #148]	; (8008014 <__swsetup_r+0xd4>)
 8007f7e:	429c      	cmp	r4, r3
 8007f80:	d101      	bne.n	8007f86 <__swsetup_r+0x46>
 8007f82:	68ac      	ldr	r4, [r5, #8]
 8007f84:	e7eb      	b.n	8007f5e <__swsetup_r+0x1e>
 8007f86:	4b24      	ldr	r3, [pc, #144]	; (8008018 <__swsetup_r+0xd8>)
 8007f88:	429c      	cmp	r4, r3
 8007f8a:	bf08      	it	eq
 8007f8c:	68ec      	ldreq	r4, [r5, #12]
 8007f8e:	e7e6      	b.n	8007f5e <__swsetup_r+0x1e>
 8007f90:	0758      	lsls	r0, r3, #29
 8007f92:	d512      	bpl.n	8007fba <__swsetup_r+0x7a>
 8007f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f96:	b141      	cbz	r1, 8007faa <__swsetup_r+0x6a>
 8007f98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f9c:	4299      	cmp	r1, r3
 8007f9e:	d002      	beq.n	8007fa6 <__swsetup_r+0x66>
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	f000 fa6d 	bl	8008480 <_free_r>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	6363      	str	r3, [r4, #52]	; 0x34
 8007faa:	89a3      	ldrh	r3, [r4, #12]
 8007fac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007fb0:	81a3      	strh	r3, [r4, #12]
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	6063      	str	r3, [r4, #4]
 8007fb6:	6923      	ldr	r3, [r4, #16]
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	89a3      	ldrh	r3, [r4, #12]
 8007fbc:	f043 0308 	orr.w	r3, r3, #8
 8007fc0:	81a3      	strh	r3, [r4, #12]
 8007fc2:	6923      	ldr	r3, [r4, #16]
 8007fc4:	b94b      	cbnz	r3, 8007fda <__swsetup_r+0x9a>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fd0:	d003      	beq.n	8007fda <__swsetup_r+0x9a>
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	f000 fa05 	bl	80083e4 <__smakebuf_r>
 8007fda:	89a0      	ldrh	r0, [r4, #12]
 8007fdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fe0:	f010 0301 	ands.w	r3, r0, #1
 8007fe4:	d00a      	beq.n	8007ffc <__swsetup_r+0xbc>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	60a3      	str	r3, [r4, #8]
 8007fea:	6963      	ldr	r3, [r4, #20]
 8007fec:	425b      	negs	r3, r3
 8007fee:	61a3      	str	r3, [r4, #24]
 8007ff0:	6923      	ldr	r3, [r4, #16]
 8007ff2:	b943      	cbnz	r3, 8008006 <__swsetup_r+0xc6>
 8007ff4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007ff8:	d1ba      	bne.n	8007f70 <__swsetup_r+0x30>
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
 8007ffc:	0781      	lsls	r1, r0, #30
 8007ffe:	bf58      	it	pl
 8008000:	6963      	ldrpl	r3, [r4, #20]
 8008002:	60a3      	str	r3, [r4, #8]
 8008004:	e7f4      	b.n	8007ff0 <__swsetup_r+0xb0>
 8008006:	2000      	movs	r0, #0
 8008008:	e7f7      	b.n	8007ffa <__swsetup_r+0xba>
 800800a:	bf00      	nop
 800800c:	20000010 	.word	0x20000010
 8008010:	08009a60 	.word	0x08009a60
 8008014:	08009a80 	.word	0x08009a80
 8008018:	08009a40 	.word	0x08009a40

0800801c <abort>:
 800801c:	2006      	movs	r0, #6
 800801e:	b508      	push	{r3, lr}
 8008020:	f000 fb42 	bl	80086a8 <raise>
 8008024:	2001      	movs	r0, #1
 8008026:	f7fb fe08 	bl	8003c3a <_exit>
	...

0800802c <__sflush_r>:
 800802c:	898a      	ldrh	r2, [r1, #12]
 800802e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008030:	4605      	mov	r5, r0
 8008032:	0710      	lsls	r0, r2, #28
 8008034:	460c      	mov	r4, r1
 8008036:	d457      	bmi.n	80080e8 <__sflush_r+0xbc>
 8008038:	684b      	ldr	r3, [r1, #4]
 800803a:	2b00      	cmp	r3, #0
 800803c:	dc04      	bgt.n	8008048 <__sflush_r+0x1c>
 800803e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008040:	2b00      	cmp	r3, #0
 8008042:	dc01      	bgt.n	8008048 <__sflush_r+0x1c>
 8008044:	2000      	movs	r0, #0
 8008046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800804a:	2e00      	cmp	r6, #0
 800804c:	d0fa      	beq.n	8008044 <__sflush_r+0x18>
 800804e:	2300      	movs	r3, #0
 8008050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008054:	682f      	ldr	r7, [r5, #0]
 8008056:	602b      	str	r3, [r5, #0]
 8008058:	d032      	beq.n	80080c0 <__sflush_r+0x94>
 800805a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	075a      	lsls	r2, r3, #29
 8008060:	d505      	bpl.n	800806e <__sflush_r+0x42>
 8008062:	6863      	ldr	r3, [r4, #4]
 8008064:	1ac0      	subs	r0, r0, r3
 8008066:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008068:	b10b      	cbz	r3, 800806e <__sflush_r+0x42>
 800806a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800806c:	1ac0      	subs	r0, r0, r3
 800806e:	2300      	movs	r3, #0
 8008070:	4602      	mov	r2, r0
 8008072:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008074:	4628      	mov	r0, r5
 8008076:	6a21      	ldr	r1, [r4, #32]
 8008078:	47b0      	blx	r6
 800807a:	1c43      	adds	r3, r0, #1
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	d106      	bne.n	800808e <__sflush_r+0x62>
 8008080:	6829      	ldr	r1, [r5, #0]
 8008082:	291d      	cmp	r1, #29
 8008084:	d82c      	bhi.n	80080e0 <__sflush_r+0xb4>
 8008086:	4a29      	ldr	r2, [pc, #164]	; (800812c <__sflush_r+0x100>)
 8008088:	40ca      	lsrs	r2, r1
 800808a:	07d6      	lsls	r6, r2, #31
 800808c:	d528      	bpl.n	80080e0 <__sflush_r+0xb4>
 800808e:	2200      	movs	r2, #0
 8008090:	6062      	str	r2, [r4, #4]
 8008092:	6922      	ldr	r2, [r4, #16]
 8008094:	04d9      	lsls	r1, r3, #19
 8008096:	6022      	str	r2, [r4, #0]
 8008098:	d504      	bpl.n	80080a4 <__sflush_r+0x78>
 800809a:	1c42      	adds	r2, r0, #1
 800809c:	d101      	bne.n	80080a2 <__sflush_r+0x76>
 800809e:	682b      	ldr	r3, [r5, #0]
 80080a0:	b903      	cbnz	r3, 80080a4 <__sflush_r+0x78>
 80080a2:	6560      	str	r0, [r4, #84]	; 0x54
 80080a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080a6:	602f      	str	r7, [r5, #0]
 80080a8:	2900      	cmp	r1, #0
 80080aa:	d0cb      	beq.n	8008044 <__sflush_r+0x18>
 80080ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080b0:	4299      	cmp	r1, r3
 80080b2:	d002      	beq.n	80080ba <__sflush_r+0x8e>
 80080b4:	4628      	mov	r0, r5
 80080b6:	f000 f9e3 	bl	8008480 <_free_r>
 80080ba:	2000      	movs	r0, #0
 80080bc:	6360      	str	r0, [r4, #52]	; 0x34
 80080be:	e7c2      	b.n	8008046 <__sflush_r+0x1a>
 80080c0:	6a21      	ldr	r1, [r4, #32]
 80080c2:	2301      	movs	r3, #1
 80080c4:	4628      	mov	r0, r5
 80080c6:	47b0      	blx	r6
 80080c8:	1c41      	adds	r1, r0, #1
 80080ca:	d1c7      	bne.n	800805c <__sflush_r+0x30>
 80080cc:	682b      	ldr	r3, [r5, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0c4      	beq.n	800805c <__sflush_r+0x30>
 80080d2:	2b1d      	cmp	r3, #29
 80080d4:	d001      	beq.n	80080da <__sflush_r+0xae>
 80080d6:	2b16      	cmp	r3, #22
 80080d8:	d101      	bne.n	80080de <__sflush_r+0xb2>
 80080da:	602f      	str	r7, [r5, #0]
 80080dc:	e7b2      	b.n	8008044 <__sflush_r+0x18>
 80080de:	89a3      	ldrh	r3, [r4, #12]
 80080e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080e4:	81a3      	strh	r3, [r4, #12]
 80080e6:	e7ae      	b.n	8008046 <__sflush_r+0x1a>
 80080e8:	690f      	ldr	r7, [r1, #16]
 80080ea:	2f00      	cmp	r7, #0
 80080ec:	d0aa      	beq.n	8008044 <__sflush_r+0x18>
 80080ee:	0793      	lsls	r3, r2, #30
 80080f0:	bf18      	it	ne
 80080f2:	2300      	movne	r3, #0
 80080f4:	680e      	ldr	r6, [r1, #0]
 80080f6:	bf08      	it	eq
 80080f8:	694b      	ldreq	r3, [r1, #20]
 80080fa:	1bf6      	subs	r6, r6, r7
 80080fc:	600f      	str	r7, [r1, #0]
 80080fe:	608b      	str	r3, [r1, #8]
 8008100:	2e00      	cmp	r6, #0
 8008102:	dd9f      	ble.n	8008044 <__sflush_r+0x18>
 8008104:	4633      	mov	r3, r6
 8008106:	463a      	mov	r2, r7
 8008108:	4628      	mov	r0, r5
 800810a:	6a21      	ldr	r1, [r4, #32]
 800810c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008110:	47e0      	blx	ip
 8008112:	2800      	cmp	r0, #0
 8008114:	dc06      	bgt.n	8008124 <__sflush_r+0xf8>
 8008116:	89a3      	ldrh	r3, [r4, #12]
 8008118:	f04f 30ff 	mov.w	r0, #4294967295
 800811c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008120:	81a3      	strh	r3, [r4, #12]
 8008122:	e790      	b.n	8008046 <__sflush_r+0x1a>
 8008124:	4407      	add	r7, r0
 8008126:	1a36      	subs	r6, r6, r0
 8008128:	e7ea      	b.n	8008100 <__sflush_r+0xd4>
 800812a:	bf00      	nop
 800812c:	20400001 	.word	0x20400001

08008130 <_fflush_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	690b      	ldr	r3, [r1, #16]
 8008134:	4605      	mov	r5, r0
 8008136:	460c      	mov	r4, r1
 8008138:	b913      	cbnz	r3, 8008140 <_fflush_r+0x10>
 800813a:	2500      	movs	r5, #0
 800813c:	4628      	mov	r0, r5
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	b118      	cbz	r0, 800814a <_fflush_r+0x1a>
 8008142:	6983      	ldr	r3, [r0, #24]
 8008144:	b90b      	cbnz	r3, 800814a <_fflush_r+0x1a>
 8008146:	f000 f887 	bl	8008258 <__sinit>
 800814a:	4b14      	ldr	r3, [pc, #80]	; (800819c <_fflush_r+0x6c>)
 800814c:	429c      	cmp	r4, r3
 800814e:	d11b      	bne.n	8008188 <_fflush_r+0x58>
 8008150:	686c      	ldr	r4, [r5, #4]
 8008152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d0ef      	beq.n	800813a <_fflush_r+0xa>
 800815a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800815c:	07d0      	lsls	r0, r2, #31
 800815e:	d404      	bmi.n	800816a <_fflush_r+0x3a>
 8008160:	0599      	lsls	r1, r3, #22
 8008162:	d402      	bmi.n	800816a <_fflush_r+0x3a>
 8008164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008166:	f000 f915 	bl	8008394 <__retarget_lock_acquire_recursive>
 800816a:	4628      	mov	r0, r5
 800816c:	4621      	mov	r1, r4
 800816e:	f7ff ff5d 	bl	800802c <__sflush_r>
 8008172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008174:	4605      	mov	r5, r0
 8008176:	07da      	lsls	r2, r3, #31
 8008178:	d4e0      	bmi.n	800813c <_fflush_r+0xc>
 800817a:	89a3      	ldrh	r3, [r4, #12]
 800817c:	059b      	lsls	r3, r3, #22
 800817e:	d4dd      	bmi.n	800813c <_fflush_r+0xc>
 8008180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008182:	f000 f908 	bl	8008396 <__retarget_lock_release_recursive>
 8008186:	e7d9      	b.n	800813c <_fflush_r+0xc>
 8008188:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <_fflush_r+0x70>)
 800818a:	429c      	cmp	r4, r3
 800818c:	d101      	bne.n	8008192 <_fflush_r+0x62>
 800818e:	68ac      	ldr	r4, [r5, #8]
 8008190:	e7df      	b.n	8008152 <_fflush_r+0x22>
 8008192:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <_fflush_r+0x74>)
 8008194:	429c      	cmp	r4, r3
 8008196:	bf08      	it	eq
 8008198:	68ec      	ldreq	r4, [r5, #12]
 800819a:	e7da      	b.n	8008152 <_fflush_r+0x22>
 800819c:	08009a60 	.word	0x08009a60
 80081a0:	08009a80 	.word	0x08009a80
 80081a4:	08009a40 	.word	0x08009a40

080081a8 <std>:
 80081a8:	2300      	movs	r3, #0
 80081aa:	b510      	push	{r4, lr}
 80081ac:	4604      	mov	r4, r0
 80081ae:	e9c0 3300 	strd	r3, r3, [r0]
 80081b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081b6:	6083      	str	r3, [r0, #8]
 80081b8:	8181      	strh	r1, [r0, #12]
 80081ba:	6643      	str	r3, [r0, #100]	; 0x64
 80081bc:	81c2      	strh	r2, [r0, #14]
 80081be:	6183      	str	r3, [r0, #24]
 80081c0:	4619      	mov	r1, r3
 80081c2:	2208      	movs	r2, #8
 80081c4:	305c      	adds	r0, #92	; 0x5c
 80081c6:	f7ff fb73 	bl	80078b0 <memset>
 80081ca:	4b05      	ldr	r3, [pc, #20]	; (80081e0 <std+0x38>)
 80081cc:	6224      	str	r4, [r4, #32]
 80081ce:	6263      	str	r3, [r4, #36]	; 0x24
 80081d0:	4b04      	ldr	r3, [pc, #16]	; (80081e4 <std+0x3c>)
 80081d2:	62a3      	str	r3, [r4, #40]	; 0x28
 80081d4:	4b04      	ldr	r3, [pc, #16]	; (80081e8 <std+0x40>)
 80081d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081d8:	4b04      	ldr	r3, [pc, #16]	; (80081ec <std+0x44>)
 80081da:	6323      	str	r3, [r4, #48]	; 0x30
 80081dc:	bd10      	pop	{r4, pc}
 80081de:	bf00      	nop
 80081e0:	080086e1 	.word	0x080086e1
 80081e4:	08008703 	.word	0x08008703
 80081e8:	0800873b 	.word	0x0800873b
 80081ec:	0800875f 	.word	0x0800875f

080081f0 <_cleanup_r>:
 80081f0:	4901      	ldr	r1, [pc, #4]	; (80081f8 <_cleanup_r+0x8>)
 80081f2:	f000 b8af 	b.w	8008354 <_fwalk_reent>
 80081f6:	bf00      	nop
 80081f8:	08008131 	.word	0x08008131

080081fc <__sfmoreglue>:
 80081fc:	2268      	movs	r2, #104	; 0x68
 80081fe:	b570      	push	{r4, r5, r6, lr}
 8008200:	1e4d      	subs	r5, r1, #1
 8008202:	4355      	muls	r5, r2
 8008204:	460e      	mov	r6, r1
 8008206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800820a:	f000 f9a1 	bl	8008550 <_malloc_r>
 800820e:	4604      	mov	r4, r0
 8008210:	b140      	cbz	r0, 8008224 <__sfmoreglue+0x28>
 8008212:	2100      	movs	r1, #0
 8008214:	e9c0 1600 	strd	r1, r6, [r0]
 8008218:	300c      	adds	r0, #12
 800821a:	60a0      	str	r0, [r4, #8]
 800821c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008220:	f7ff fb46 	bl	80078b0 <memset>
 8008224:	4620      	mov	r0, r4
 8008226:	bd70      	pop	{r4, r5, r6, pc}

08008228 <__sfp_lock_acquire>:
 8008228:	4801      	ldr	r0, [pc, #4]	; (8008230 <__sfp_lock_acquire+0x8>)
 800822a:	f000 b8b3 	b.w	8008394 <__retarget_lock_acquire_recursive>
 800822e:	bf00      	nop
 8008230:	20000bdd 	.word	0x20000bdd

08008234 <__sfp_lock_release>:
 8008234:	4801      	ldr	r0, [pc, #4]	; (800823c <__sfp_lock_release+0x8>)
 8008236:	f000 b8ae 	b.w	8008396 <__retarget_lock_release_recursive>
 800823a:	bf00      	nop
 800823c:	20000bdd 	.word	0x20000bdd

08008240 <__sinit_lock_acquire>:
 8008240:	4801      	ldr	r0, [pc, #4]	; (8008248 <__sinit_lock_acquire+0x8>)
 8008242:	f000 b8a7 	b.w	8008394 <__retarget_lock_acquire_recursive>
 8008246:	bf00      	nop
 8008248:	20000bde 	.word	0x20000bde

0800824c <__sinit_lock_release>:
 800824c:	4801      	ldr	r0, [pc, #4]	; (8008254 <__sinit_lock_release+0x8>)
 800824e:	f000 b8a2 	b.w	8008396 <__retarget_lock_release_recursive>
 8008252:	bf00      	nop
 8008254:	20000bde 	.word	0x20000bde

08008258 <__sinit>:
 8008258:	b510      	push	{r4, lr}
 800825a:	4604      	mov	r4, r0
 800825c:	f7ff fff0 	bl	8008240 <__sinit_lock_acquire>
 8008260:	69a3      	ldr	r3, [r4, #24]
 8008262:	b11b      	cbz	r3, 800826c <__sinit+0x14>
 8008264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008268:	f7ff bff0 	b.w	800824c <__sinit_lock_release>
 800826c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008270:	6523      	str	r3, [r4, #80]	; 0x50
 8008272:	4b13      	ldr	r3, [pc, #76]	; (80082c0 <__sinit+0x68>)
 8008274:	4a13      	ldr	r2, [pc, #76]	; (80082c4 <__sinit+0x6c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	62a2      	str	r2, [r4, #40]	; 0x28
 800827a:	42a3      	cmp	r3, r4
 800827c:	bf08      	it	eq
 800827e:	2301      	moveq	r3, #1
 8008280:	4620      	mov	r0, r4
 8008282:	bf08      	it	eq
 8008284:	61a3      	streq	r3, [r4, #24]
 8008286:	f000 f81f 	bl	80082c8 <__sfp>
 800828a:	6060      	str	r0, [r4, #4]
 800828c:	4620      	mov	r0, r4
 800828e:	f000 f81b 	bl	80082c8 <__sfp>
 8008292:	60a0      	str	r0, [r4, #8]
 8008294:	4620      	mov	r0, r4
 8008296:	f000 f817 	bl	80082c8 <__sfp>
 800829a:	2200      	movs	r2, #0
 800829c:	2104      	movs	r1, #4
 800829e:	60e0      	str	r0, [r4, #12]
 80082a0:	6860      	ldr	r0, [r4, #4]
 80082a2:	f7ff ff81 	bl	80081a8 <std>
 80082a6:	2201      	movs	r2, #1
 80082a8:	2109      	movs	r1, #9
 80082aa:	68a0      	ldr	r0, [r4, #8]
 80082ac:	f7ff ff7c 	bl	80081a8 <std>
 80082b0:	2202      	movs	r2, #2
 80082b2:	2112      	movs	r1, #18
 80082b4:	68e0      	ldr	r0, [r4, #12]
 80082b6:	f7ff ff77 	bl	80081a8 <std>
 80082ba:	2301      	movs	r3, #1
 80082bc:	61a3      	str	r3, [r4, #24]
 80082be:	e7d1      	b.n	8008264 <__sinit+0xc>
 80082c0:	08009a08 	.word	0x08009a08
 80082c4:	080081f1 	.word	0x080081f1

080082c8 <__sfp>:
 80082c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ca:	4607      	mov	r7, r0
 80082cc:	f7ff ffac 	bl	8008228 <__sfp_lock_acquire>
 80082d0:	4b1e      	ldr	r3, [pc, #120]	; (800834c <__sfp+0x84>)
 80082d2:	681e      	ldr	r6, [r3, #0]
 80082d4:	69b3      	ldr	r3, [r6, #24]
 80082d6:	b913      	cbnz	r3, 80082de <__sfp+0x16>
 80082d8:	4630      	mov	r0, r6
 80082da:	f7ff ffbd 	bl	8008258 <__sinit>
 80082de:	3648      	adds	r6, #72	; 0x48
 80082e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082e4:	3b01      	subs	r3, #1
 80082e6:	d503      	bpl.n	80082f0 <__sfp+0x28>
 80082e8:	6833      	ldr	r3, [r6, #0]
 80082ea:	b30b      	cbz	r3, 8008330 <__sfp+0x68>
 80082ec:	6836      	ldr	r6, [r6, #0]
 80082ee:	e7f7      	b.n	80082e0 <__sfp+0x18>
 80082f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80082f4:	b9d5      	cbnz	r5, 800832c <__sfp+0x64>
 80082f6:	4b16      	ldr	r3, [pc, #88]	; (8008350 <__sfp+0x88>)
 80082f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80082fc:	60e3      	str	r3, [r4, #12]
 80082fe:	6665      	str	r5, [r4, #100]	; 0x64
 8008300:	f000 f847 	bl	8008392 <__retarget_lock_init_recursive>
 8008304:	f7ff ff96 	bl	8008234 <__sfp_lock_release>
 8008308:	2208      	movs	r2, #8
 800830a:	4629      	mov	r1, r5
 800830c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008310:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008314:	6025      	str	r5, [r4, #0]
 8008316:	61a5      	str	r5, [r4, #24]
 8008318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800831c:	f7ff fac8 	bl	80078b0 <memset>
 8008320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008328:	4620      	mov	r0, r4
 800832a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800832c:	3468      	adds	r4, #104	; 0x68
 800832e:	e7d9      	b.n	80082e4 <__sfp+0x1c>
 8008330:	2104      	movs	r1, #4
 8008332:	4638      	mov	r0, r7
 8008334:	f7ff ff62 	bl	80081fc <__sfmoreglue>
 8008338:	4604      	mov	r4, r0
 800833a:	6030      	str	r0, [r6, #0]
 800833c:	2800      	cmp	r0, #0
 800833e:	d1d5      	bne.n	80082ec <__sfp+0x24>
 8008340:	f7ff ff78 	bl	8008234 <__sfp_lock_release>
 8008344:	230c      	movs	r3, #12
 8008346:	603b      	str	r3, [r7, #0]
 8008348:	e7ee      	b.n	8008328 <__sfp+0x60>
 800834a:	bf00      	nop
 800834c:	08009a08 	.word	0x08009a08
 8008350:	ffff0001 	.word	0xffff0001

08008354 <_fwalk_reent>:
 8008354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008358:	4606      	mov	r6, r0
 800835a:	4688      	mov	r8, r1
 800835c:	2700      	movs	r7, #0
 800835e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008362:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008366:	f1b9 0901 	subs.w	r9, r9, #1
 800836a:	d505      	bpl.n	8008378 <_fwalk_reent+0x24>
 800836c:	6824      	ldr	r4, [r4, #0]
 800836e:	2c00      	cmp	r4, #0
 8008370:	d1f7      	bne.n	8008362 <_fwalk_reent+0xe>
 8008372:	4638      	mov	r0, r7
 8008374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008378:	89ab      	ldrh	r3, [r5, #12]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d907      	bls.n	800838e <_fwalk_reent+0x3a>
 800837e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008382:	3301      	adds	r3, #1
 8008384:	d003      	beq.n	800838e <_fwalk_reent+0x3a>
 8008386:	4629      	mov	r1, r5
 8008388:	4630      	mov	r0, r6
 800838a:	47c0      	blx	r8
 800838c:	4307      	orrs	r7, r0
 800838e:	3568      	adds	r5, #104	; 0x68
 8008390:	e7e9      	b.n	8008366 <_fwalk_reent+0x12>

08008392 <__retarget_lock_init_recursive>:
 8008392:	4770      	bx	lr

08008394 <__retarget_lock_acquire_recursive>:
 8008394:	4770      	bx	lr

08008396 <__retarget_lock_release_recursive>:
 8008396:	4770      	bx	lr

08008398 <__swhatbuf_r>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	460e      	mov	r6, r1
 800839c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a0:	4614      	mov	r4, r2
 80083a2:	2900      	cmp	r1, #0
 80083a4:	461d      	mov	r5, r3
 80083a6:	b096      	sub	sp, #88	; 0x58
 80083a8:	da08      	bge.n	80083bc <__swhatbuf_r+0x24>
 80083aa:	2200      	movs	r2, #0
 80083ac:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80083b0:	602a      	str	r2, [r5, #0]
 80083b2:	061a      	lsls	r2, r3, #24
 80083b4:	d410      	bmi.n	80083d8 <__swhatbuf_r+0x40>
 80083b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083ba:	e00e      	b.n	80083da <__swhatbuf_r+0x42>
 80083bc:	466a      	mov	r2, sp
 80083be:	f000 f9f5 	bl	80087ac <_fstat_r>
 80083c2:	2800      	cmp	r0, #0
 80083c4:	dbf1      	blt.n	80083aa <__swhatbuf_r+0x12>
 80083c6:	9a01      	ldr	r2, [sp, #4]
 80083c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80083cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80083d0:	425a      	negs	r2, r3
 80083d2:	415a      	adcs	r2, r3
 80083d4:	602a      	str	r2, [r5, #0]
 80083d6:	e7ee      	b.n	80083b6 <__swhatbuf_r+0x1e>
 80083d8:	2340      	movs	r3, #64	; 0x40
 80083da:	2000      	movs	r0, #0
 80083dc:	6023      	str	r3, [r4, #0]
 80083de:	b016      	add	sp, #88	; 0x58
 80083e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080083e4 <__smakebuf_r>:
 80083e4:	898b      	ldrh	r3, [r1, #12]
 80083e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083e8:	079d      	lsls	r5, r3, #30
 80083ea:	4606      	mov	r6, r0
 80083ec:	460c      	mov	r4, r1
 80083ee:	d507      	bpl.n	8008400 <__smakebuf_r+0x1c>
 80083f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	6123      	str	r3, [r4, #16]
 80083f8:	2301      	movs	r3, #1
 80083fa:	6163      	str	r3, [r4, #20]
 80083fc:	b002      	add	sp, #8
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	466a      	mov	r2, sp
 8008402:	ab01      	add	r3, sp, #4
 8008404:	f7ff ffc8 	bl	8008398 <__swhatbuf_r>
 8008408:	9900      	ldr	r1, [sp, #0]
 800840a:	4605      	mov	r5, r0
 800840c:	4630      	mov	r0, r6
 800840e:	f000 f89f 	bl	8008550 <_malloc_r>
 8008412:	b948      	cbnz	r0, 8008428 <__smakebuf_r+0x44>
 8008414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008418:	059a      	lsls	r2, r3, #22
 800841a:	d4ef      	bmi.n	80083fc <__smakebuf_r+0x18>
 800841c:	f023 0303 	bic.w	r3, r3, #3
 8008420:	f043 0302 	orr.w	r3, r3, #2
 8008424:	81a3      	strh	r3, [r4, #12]
 8008426:	e7e3      	b.n	80083f0 <__smakebuf_r+0xc>
 8008428:	4b0d      	ldr	r3, [pc, #52]	; (8008460 <__smakebuf_r+0x7c>)
 800842a:	62b3      	str	r3, [r6, #40]	; 0x28
 800842c:	89a3      	ldrh	r3, [r4, #12]
 800842e:	6020      	str	r0, [r4, #0]
 8008430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008434:	81a3      	strh	r3, [r4, #12]
 8008436:	9b00      	ldr	r3, [sp, #0]
 8008438:	6120      	str	r0, [r4, #16]
 800843a:	6163      	str	r3, [r4, #20]
 800843c:	9b01      	ldr	r3, [sp, #4]
 800843e:	b15b      	cbz	r3, 8008458 <__smakebuf_r+0x74>
 8008440:	4630      	mov	r0, r6
 8008442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008446:	f000 f9c3 	bl	80087d0 <_isatty_r>
 800844a:	b128      	cbz	r0, 8008458 <__smakebuf_r+0x74>
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	f023 0303 	bic.w	r3, r3, #3
 8008452:	f043 0301 	orr.w	r3, r3, #1
 8008456:	81a3      	strh	r3, [r4, #12]
 8008458:	89a0      	ldrh	r0, [r4, #12]
 800845a:	4305      	orrs	r5, r0
 800845c:	81a5      	strh	r5, [r4, #12]
 800845e:	e7cd      	b.n	80083fc <__smakebuf_r+0x18>
 8008460:	080081f1 	.word	0x080081f1

08008464 <memchr>:
 8008464:	4603      	mov	r3, r0
 8008466:	b510      	push	{r4, lr}
 8008468:	b2c9      	uxtb	r1, r1
 800846a:	4402      	add	r2, r0
 800846c:	4293      	cmp	r3, r2
 800846e:	4618      	mov	r0, r3
 8008470:	d101      	bne.n	8008476 <memchr+0x12>
 8008472:	2000      	movs	r0, #0
 8008474:	e003      	b.n	800847e <memchr+0x1a>
 8008476:	7804      	ldrb	r4, [r0, #0]
 8008478:	3301      	adds	r3, #1
 800847a:	428c      	cmp	r4, r1
 800847c:	d1f6      	bne.n	800846c <memchr+0x8>
 800847e:	bd10      	pop	{r4, pc}

08008480 <_free_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4605      	mov	r5, r0
 8008484:	2900      	cmp	r1, #0
 8008486:	d040      	beq.n	800850a <_free_r+0x8a>
 8008488:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800848c:	1f0c      	subs	r4, r1, #4
 800848e:	2b00      	cmp	r3, #0
 8008490:	bfb8      	it	lt
 8008492:	18e4      	addlt	r4, r4, r3
 8008494:	f000 f9be 	bl	8008814 <__malloc_lock>
 8008498:	4a1c      	ldr	r2, [pc, #112]	; (800850c <_free_r+0x8c>)
 800849a:	6813      	ldr	r3, [r2, #0]
 800849c:	b933      	cbnz	r3, 80084ac <_free_r+0x2c>
 800849e:	6063      	str	r3, [r4, #4]
 80084a0:	6014      	str	r4, [r2, #0]
 80084a2:	4628      	mov	r0, r5
 80084a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084a8:	f000 b9ba 	b.w	8008820 <__malloc_unlock>
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	d908      	bls.n	80084c2 <_free_r+0x42>
 80084b0:	6820      	ldr	r0, [r4, #0]
 80084b2:	1821      	adds	r1, r4, r0
 80084b4:	428b      	cmp	r3, r1
 80084b6:	bf01      	itttt	eq
 80084b8:	6819      	ldreq	r1, [r3, #0]
 80084ba:	685b      	ldreq	r3, [r3, #4]
 80084bc:	1809      	addeq	r1, r1, r0
 80084be:	6021      	streq	r1, [r4, #0]
 80084c0:	e7ed      	b.n	800849e <_free_r+0x1e>
 80084c2:	461a      	mov	r2, r3
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	b10b      	cbz	r3, 80084cc <_free_r+0x4c>
 80084c8:	42a3      	cmp	r3, r4
 80084ca:	d9fa      	bls.n	80084c2 <_free_r+0x42>
 80084cc:	6811      	ldr	r1, [r2, #0]
 80084ce:	1850      	adds	r0, r2, r1
 80084d0:	42a0      	cmp	r0, r4
 80084d2:	d10b      	bne.n	80084ec <_free_r+0x6c>
 80084d4:	6820      	ldr	r0, [r4, #0]
 80084d6:	4401      	add	r1, r0
 80084d8:	1850      	adds	r0, r2, r1
 80084da:	4283      	cmp	r3, r0
 80084dc:	6011      	str	r1, [r2, #0]
 80084de:	d1e0      	bne.n	80084a2 <_free_r+0x22>
 80084e0:	6818      	ldr	r0, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	4401      	add	r1, r0
 80084e6:	6011      	str	r1, [r2, #0]
 80084e8:	6053      	str	r3, [r2, #4]
 80084ea:	e7da      	b.n	80084a2 <_free_r+0x22>
 80084ec:	d902      	bls.n	80084f4 <_free_r+0x74>
 80084ee:	230c      	movs	r3, #12
 80084f0:	602b      	str	r3, [r5, #0]
 80084f2:	e7d6      	b.n	80084a2 <_free_r+0x22>
 80084f4:	6820      	ldr	r0, [r4, #0]
 80084f6:	1821      	adds	r1, r4, r0
 80084f8:	428b      	cmp	r3, r1
 80084fa:	bf01      	itttt	eq
 80084fc:	6819      	ldreq	r1, [r3, #0]
 80084fe:	685b      	ldreq	r3, [r3, #4]
 8008500:	1809      	addeq	r1, r1, r0
 8008502:	6021      	streq	r1, [r4, #0]
 8008504:	6063      	str	r3, [r4, #4]
 8008506:	6054      	str	r4, [r2, #4]
 8008508:	e7cb      	b.n	80084a2 <_free_r+0x22>
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	20000be0 	.word	0x20000be0

08008510 <sbrk_aligned>:
 8008510:	b570      	push	{r4, r5, r6, lr}
 8008512:	4e0e      	ldr	r6, [pc, #56]	; (800854c <sbrk_aligned+0x3c>)
 8008514:	460c      	mov	r4, r1
 8008516:	6831      	ldr	r1, [r6, #0]
 8008518:	4605      	mov	r5, r0
 800851a:	b911      	cbnz	r1, 8008522 <sbrk_aligned+0x12>
 800851c:	f000 f88c 	bl	8008638 <_sbrk_r>
 8008520:	6030      	str	r0, [r6, #0]
 8008522:	4621      	mov	r1, r4
 8008524:	4628      	mov	r0, r5
 8008526:	f000 f887 	bl	8008638 <_sbrk_r>
 800852a:	1c43      	adds	r3, r0, #1
 800852c:	d00a      	beq.n	8008544 <sbrk_aligned+0x34>
 800852e:	1cc4      	adds	r4, r0, #3
 8008530:	f024 0403 	bic.w	r4, r4, #3
 8008534:	42a0      	cmp	r0, r4
 8008536:	d007      	beq.n	8008548 <sbrk_aligned+0x38>
 8008538:	1a21      	subs	r1, r4, r0
 800853a:	4628      	mov	r0, r5
 800853c:	f000 f87c 	bl	8008638 <_sbrk_r>
 8008540:	3001      	adds	r0, #1
 8008542:	d101      	bne.n	8008548 <sbrk_aligned+0x38>
 8008544:	f04f 34ff 	mov.w	r4, #4294967295
 8008548:	4620      	mov	r0, r4
 800854a:	bd70      	pop	{r4, r5, r6, pc}
 800854c:	20000be4 	.word	0x20000be4

08008550 <_malloc_r>:
 8008550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008554:	1ccd      	adds	r5, r1, #3
 8008556:	f025 0503 	bic.w	r5, r5, #3
 800855a:	3508      	adds	r5, #8
 800855c:	2d0c      	cmp	r5, #12
 800855e:	bf38      	it	cc
 8008560:	250c      	movcc	r5, #12
 8008562:	2d00      	cmp	r5, #0
 8008564:	4607      	mov	r7, r0
 8008566:	db01      	blt.n	800856c <_malloc_r+0x1c>
 8008568:	42a9      	cmp	r1, r5
 800856a:	d905      	bls.n	8008578 <_malloc_r+0x28>
 800856c:	230c      	movs	r3, #12
 800856e:	2600      	movs	r6, #0
 8008570:	603b      	str	r3, [r7, #0]
 8008572:	4630      	mov	r0, r6
 8008574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008578:	4e2e      	ldr	r6, [pc, #184]	; (8008634 <_malloc_r+0xe4>)
 800857a:	f000 f94b 	bl	8008814 <__malloc_lock>
 800857e:	6833      	ldr	r3, [r6, #0]
 8008580:	461c      	mov	r4, r3
 8008582:	bb34      	cbnz	r4, 80085d2 <_malloc_r+0x82>
 8008584:	4629      	mov	r1, r5
 8008586:	4638      	mov	r0, r7
 8008588:	f7ff ffc2 	bl	8008510 <sbrk_aligned>
 800858c:	1c43      	adds	r3, r0, #1
 800858e:	4604      	mov	r4, r0
 8008590:	d14d      	bne.n	800862e <_malloc_r+0xde>
 8008592:	6834      	ldr	r4, [r6, #0]
 8008594:	4626      	mov	r6, r4
 8008596:	2e00      	cmp	r6, #0
 8008598:	d140      	bne.n	800861c <_malloc_r+0xcc>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	4631      	mov	r1, r6
 800859e:	4638      	mov	r0, r7
 80085a0:	eb04 0803 	add.w	r8, r4, r3
 80085a4:	f000 f848 	bl	8008638 <_sbrk_r>
 80085a8:	4580      	cmp	r8, r0
 80085aa:	d13a      	bne.n	8008622 <_malloc_r+0xd2>
 80085ac:	6821      	ldr	r1, [r4, #0]
 80085ae:	3503      	adds	r5, #3
 80085b0:	1a6d      	subs	r5, r5, r1
 80085b2:	f025 0503 	bic.w	r5, r5, #3
 80085b6:	3508      	adds	r5, #8
 80085b8:	2d0c      	cmp	r5, #12
 80085ba:	bf38      	it	cc
 80085bc:	250c      	movcc	r5, #12
 80085be:	4638      	mov	r0, r7
 80085c0:	4629      	mov	r1, r5
 80085c2:	f7ff ffa5 	bl	8008510 <sbrk_aligned>
 80085c6:	3001      	adds	r0, #1
 80085c8:	d02b      	beq.n	8008622 <_malloc_r+0xd2>
 80085ca:	6823      	ldr	r3, [r4, #0]
 80085cc:	442b      	add	r3, r5
 80085ce:	6023      	str	r3, [r4, #0]
 80085d0:	e00e      	b.n	80085f0 <_malloc_r+0xa0>
 80085d2:	6822      	ldr	r2, [r4, #0]
 80085d4:	1b52      	subs	r2, r2, r5
 80085d6:	d41e      	bmi.n	8008616 <_malloc_r+0xc6>
 80085d8:	2a0b      	cmp	r2, #11
 80085da:	d916      	bls.n	800860a <_malloc_r+0xba>
 80085dc:	1961      	adds	r1, r4, r5
 80085de:	42a3      	cmp	r3, r4
 80085e0:	6025      	str	r5, [r4, #0]
 80085e2:	bf18      	it	ne
 80085e4:	6059      	strne	r1, [r3, #4]
 80085e6:	6863      	ldr	r3, [r4, #4]
 80085e8:	bf08      	it	eq
 80085ea:	6031      	streq	r1, [r6, #0]
 80085ec:	5162      	str	r2, [r4, r5]
 80085ee:	604b      	str	r3, [r1, #4]
 80085f0:	4638      	mov	r0, r7
 80085f2:	f104 060b 	add.w	r6, r4, #11
 80085f6:	f000 f913 	bl	8008820 <__malloc_unlock>
 80085fa:	f026 0607 	bic.w	r6, r6, #7
 80085fe:	1d23      	adds	r3, r4, #4
 8008600:	1af2      	subs	r2, r6, r3
 8008602:	d0b6      	beq.n	8008572 <_malloc_r+0x22>
 8008604:	1b9b      	subs	r3, r3, r6
 8008606:	50a3      	str	r3, [r4, r2]
 8008608:	e7b3      	b.n	8008572 <_malloc_r+0x22>
 800860a:	6862      	ldr	r2, [r4, #4]
 800860c:	42a3      	cmp	r3, r4
 800860e:	bf0c      	ite	eq
 8008610:	6032      	streq	r2, [r6, #0]
 8008612:	605a      	strne	r2, [r3, #4]
 8008614:	e7ec      	b.n	80085f0 <_malloc_r+0xa0>
 8008616:	4623      	mov	r3, r4
 8008618:	6864      	ldr	r4, [r4, #4]
 800861a:	e7b2      	b.n	8008582 <_malloc_r+0x32>
 800861c:	4634      	mov	r4, r6
 800861e:	6876      	ldr	r6, [r6, #4]
 8008620:	e7b9      	b.n	8008596 <_malloc_r+0x46>
 8008622:	230c      	movs	r3, #12
 8008624:	4638      	mov	r0, r7
 8008626:	603b      	str	r3, [r7, #0]
 8008628:	f000 f8fa 	bl	8008820 <__malloc_unlock>
 800862c:	e7a1      	b.n	8008572 <_malloc_r+0x22>
 800862e:	6025      	str	r5, [r4, #0]
 8008630:	e7de      	b.n	80085f0 <_malloc_r+0xa0>
 8008632:	bf00      	nop
 8008634:	20000be0 	.word	0x20000be0

08008638 <_sbrk_r>:
 8008638:	b538      	push	{r3, r4, r5, lr}
 800863a:	2300      	movs	r3, #0
 800863c:	4d05      	ldr	r5, [pc, #20]	; (8008654 <_sbrk_r+0x1c>)
 800863e:	4604      	mov	r4, r0
 8008640:	4608      	mov	r0, r1
 8008642:	602b      	str	r3, [r5, #0]
 8008644:	f7fb fb6c 	bl	8003d20 <_sbrk>
 8008648:	1c43      	adds	r3, r0, #1
 800864a:	d102      	bne.n	8008652 <_sbrk_r+0x1a>
 800864c:	682b      	ldr	r3, [r5, #0]
 800864e:	b103      	cbz	r3, 8008652 <_sbrk_r+0x1a>
 8008650:	6023      	str	r3, [r4, #0]
 8008652:	bd38      	pop	{r3, r4, r5, pc}
 8008654:	20000be8 	.word	0x20000be8

08008658 <_raise_r>:
 8008658:	291f      	cmp	r1, #31
 800865a:	b538      	push	{r3, r4, r5, lr}
 800865c:	4604      	mov	r4, r0
 800865e:	460d      	mov	r5, r1
 8008660:	d904      	bls.n	800866c <_raise_r+0x14>
 8008662:	2316      	movs	r3, #22
 8008664:	6003      	str	r3, [r0, #0]
 8008666:	f04f 30ff 	mov.w	r0, #4294967295
 800866a:	bd38      	pop	{r3, r4, r5, pc}
 800866c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800866e:	b112      	cbz	r2, 8008676 <_raise_r+0x1e>
 8008670:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008674:	b94b      	cbnz	r3, 800868a <_raise_r+0x32>
 8008676:	4620      	mov	r0, r4
 8008678:	f000 f830 	bl	80086dc <_getpid_r>
 800867c:	462a      	mov	r2, r5
 800867e:	4601      	mov	r1, r0
 8008680:	4620      	mov	r0, r4
 8008682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008686:	f000 b817 	b.w	80086b8 <_kill_r>
 800868a:	2b01      	cmp	r3, #1
 800868c:	d00a      	beq.n	80086a4 <_raise_r+0x4c>
 800868e:	1c59      	adds	r1, r3, #1
 8008690:	d103      	bne.n	800869a <_raise_r+0x42>
 8008692:	2316      	movs	r3, #22
 8008694:	6003      	str	r3, [r0, #0]
 8008696:	2001      	movs	r0, #1
 8008698:	e7e7      	b.n	800866a <_raise_r+0x12>
 800869a:	2400      	movs	r4, #0
 800869c:	4628      	mov	r0, r5
 800869e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80086a2:	4798      	blx	r3
 80086a4:	2000      	movs	r0, #0
 80086a6:	e7e0      	b.n	800866a <_raise_r+0x12>

080086a8 <raise>:
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <raise+0xc>)
 80086aa:	4601      	mov	r1, r0
 80086ac:	6818      	ldr	r0, [r3, #0]
 80086ae:	f7ff bfd3 	b.w	8008658 <_raise_r>
 80086b2:	bf00      	nop
 80086b4:	20000010 	.word	0x20000010

080086b8 <_kill_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	2300      	movs	r3, #0
 80086bc:	4d06      	ldr	r5, [pc, #24]	; (80086d8 <_kill_r+0x20>)
 80086be:	4604      	mov	r4, r0
 80086c0:	4608      	mov	r0, r1
 80086c2:	4611      	mov	r1, r2
 80086c4:	602b      	str	r3, [r5, #0]
 80086c6:	f7fb faa8 	bl	8003c1a <_kill>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	d102      	bne.n	80086d4 <_kill_r+0x1c>
 80086ce:	682b      	ldr	r3, [r5, #0]
 80086d0:	b103      	cbz	r3, 80086d4 <_kill_r+0x1c>
 80086d2:	6023      	str	r3, [r4, #0]
 80086d4:	bd38      	pop	{r3, r4, r5, pc}
 80086d6:	bf00      	nop
 80086d8:	20000be8 	.word	0x20000be8

080086dc <_getpid_r>:
 80086dc:	f7fb ba96 	b.w	8003c0c <_getpid>

080086e0 <__sread>:
 80086e0:	b510      	push	{r4, lr}
 80086e2:	460c      	mov	r4, r1
 80086e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086e8:	f000 f8a0 	bl	800882c <_read_r>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	bfab      	itete	ge
 80086f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086f2:	89a3      	ldrhlt	r3, [r4, #12]
 80086f4:	181b      	addge	r3, r3, r0
 80086f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086fa:	bfac      	ite	ge
 80086fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80086fe:	81a3      	strhlt	r3, [r4, #12]
 8008700:	bd10      	pop	{r4, pc}

08008702 <__swrite>:
 8008702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008706:	461f      	mov	r7, r3
 8008708:	898b      	ldrh	r3, [r1, #12]
 800870a:	4605      	mov	r5, r0
 800870c:	05db      	lsls	r3, r3, #23
 800870e:	460c      	mov	r4, r1
 8008710:	4616      	mov	r6, r2
 8008712:	d505      	bpl.n	8008720 <__swrite+0x1e>
 8008714:	2302      	movs	r3, #2
 8008716:	2200      	movs	r2, #0
 8008718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871c:	f000 f868 	bl	80087f0 <_lseek_r>
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	4632      	mov	r2, r6
 8008724:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008728:	81a3      	strh	r3, [r4, #12]
 800872a:	4628      	mov	r0, r5
 800872c:	463b      	mov	r3, r7
 800872e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008736:	f000 b817 	b.w	8008768 <_write_r>

0800873a <__sseek>:
 800873a:	b510      	push	{r4, lr}
 800873c:	460c      	mov	r4, r1
 800873e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008742:	f000 f855 	bl	80087f0 <_lseek_r>
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	bf15      	itete	ne
 800874c:	6560      	strne	r0, [r4, #84]	; 0x54
 800874e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008756:	81a3      	strheq	r3, [r4, #12]
 8008758:	bf18      	it	ne
 800875a:	81a3      	strhne	r3, [r4, #12]
 800875c:	bd10      	pop	{r4, pc}

0800875e <__sclose>:
 800875e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008762:	f000 b813 	b.w	800878c <_close_r>
	...

08008768 <_write_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4604      	mov	r4, r0
 800876c:	4608      	mov	r0, r1
 800876e:	4611      	mov	r1, r2
 8008770:	2200      	movs	r2, #0
 8008772:	4d05      	ldr	r5, [pc, #20]	; (8008788 <_write_r+0x20>)
 8008774:	602a      	str	r2, [r5, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	f7fb fa86 	bl	8003c88 <_write>
 800877c:	1c43      	adds	r3, r0, #1
 800877e:	d102      	bne.n	8008786 <_write_r+0x1e>
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	b103      	cbz	r3, 8008786 <_write_r+0x1e>
 8008784:	6023      	str	r3, [r4, #0]
 8008786:	bd38      	pop	{r3, r4, r5, pc}
 8008788:	20000be8 	.word	0x20000be8

0800878c <_close_r>:
 800878c:	b538      	push	{r3, r4, r5, lr}
 800878e:	2300      	movs	r3, #0
 8008790:	4d05      	ldr	r5, [pc, #20]	; (80087a8 <_close_r+0x1c>)
 8008792:	4604      	mov	r4, r0
 8008794:	4608      	mov	r0, r1
 8008796:	602b      	str	r3, [r5, #0]
 8008798:	f7fb fa92 	bl	8003cc0 <_close>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	d102      	bne.n	80087a6 <_close_r+0x1a>
 80087a0:	682b      	ldr	r3, [r5, #0]
 80087a2:	b103      	cbz	r3, 80087a6 <_close_r+0x1a>
 80087a4:	6023      	str	r3, [r4, #0]
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	20000be8 	.word	0x20000be8

080087ac <_fstat_r>:
 80087ac:	b538      	push	{r3, r4, r5, lr}
 80087ae:	2300      	movs	r3, #0
 80087b0:	4d06      	ldr	r5, [pc, #24]	; (80087cc <_fstat_r+0x20>)
 80087b2:	4604      	mov	r4, r0
 80087b4:	4608      	mov	r0, r1
 80087b6:	4611      	mov	r1, r2
 80087b8:	602b      	str	r3, [r5, #0]
 80087ba:	f7fb fa8c 	bl	8003cd6 <_fstat>
 80087be:	1c43      	adds	r3, r0, #1
 80087c0:	d102      	bne.n	80087c8 <_fstat_r+0x1c>
 80087c2:	682b      	ldr	r3, [r5, #0]
 80087c4:	b103      	cbz	r3, 80087c8 <_fstat_r+0x1c>
 80087c6:	6023      	str	r3, [r4, #0]
 80087c8:	bd38      	pop	{r3, r4, r5, pc}
 80087ca:	bf00      	nop
 80087cc:	20000be8 	.word	0x20000be8

080087d0 <_isatty_r>:
 80087d0:	b538      	push	{r3, r4, r5, lr}
 80087d2:	2300      	movs	r3, #0
 80087d4:	4d05      	ldr	r5, [pc, #20]	; (80087ec <_isatty_r+0x1c>)
 80087d6:	4604      	mov	r4, r0
 80087d8:	4608      	mov	r0, r1
 80087da:	602b      	str	r3, [r5, #0]
 80087dc:	f7fb fa8a 	bl	8003cf4 <_isatty>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d102      	bne.n	80087ea <_isatty_r+0x1a>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	b103      	cbz	r3, 80087ea <_isatty_r+0x1a>
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	20000be8 	.word	0x20000be8

080087f0 <_lseek_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	4611      	mov	r1, r2
 80087f8:	2200      	movs	r2, #0
 80087fa:	4d05      	ldr	r5, [pc, #20]	; (8008810 <_lseek_r+0x20>)
 80087fc:	602a      	str	r2, [r5, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	f7fb fa82 	bl	8003d08 <_lseek>
 8008804:	1c43      	adds	r3, r0, #1
 8008806:	d102      	bne.n	800880e <_lseek_r+0x1e>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	b103      	cbz	r3, 800880e <_lseek_r+0x1e>
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	bd38      	pop	{r3, r4, r5, pc}
 8008810:	20000be8 	.word	0x20000be8

08008814 <__malloc_lock>:
 8008814:	4801      	ldr	r0, [pc, #4]	; (800881c <__malloc_lock+0x8>)
 8008816:	f7ff bdbd 	b.w	8008394 <__retarget_lock_acquire_recursive>
 800881a:	bf00      	nop
 800881c:	20000bdc 	.word	0x20000bdc

08008820 <__malloc_unlock>:
 8008820:	4801      	ldr	r0, [pc, #4]	; (8008828 <__malloc_unlock+0x8>)
 8008822:	f7ff bdb8 	b.w	8008396 <__retarget_lock_release_recursive>
 8008826:	bf00      	nop
 8008828:	20000bdc 	.word	0x20000bdc

0800882c <_read_r>:
 800882c:	b538      	push	{r3, r4, r5, lr}
 800882e:	4604      	mov	r4, r0
 8008830:	4608      	mov	r0, r1
 8008832:	4611      	mov	r1, r2
 8008834:	2200      	movs	r2, #0
 8008836:	4d05      	ldr	r5, [pc, #20]	; (800884c <_read_r+0x20>)
 8008838:	602a      	str	r2, [r5, #0]
 800883a:	461a      	mov	r2, r3
 800883c:	f7fb fa07 	bl	8003c4e <_read>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d102      	bne.n	800884a <_read_r+0x1e>
 8008844:	682b      	ldr	r3, [r5, #0]
 8008846:	b103      	cbz	r3, 800884a <_read_r+0x1e>
 8008848:	6023      	str	r3, [r4, #0]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	20000be8 	.word	0x20000be8

08008850 <cos>:
 8008850:	b530      	push	{r4, r5, lr}
 8008852:	4a20      	ldr	r2, [pc, #128]	; (80088d4 <cos+0x84>)
 8008854:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008858:	4293      	cmp	r3, r2
 800885a:	b087      	sub	sp, #28
 800885c:	dc06      	bgt.n	800886c <cos+0x1c>
 800885e:	2200      	movs	r2, #0
 8008860:	2300      	movs	r3, #0
 8008862:	b007      	add	sp, #28
 8008864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008868:	f000 baa2 	b.w	8008db0 <__kernel_cos>
 800886c:	4a1a      	ldr	r2, [pc, #104]	; (80088d8 <cos+0x88>)
 800886e:	4293      	cmp	r3, r2
 8008870:	dd05      	ble.n	800887e <cos+0x2e>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	f7f7 fcdb 	bl	8000230 <__aeabi_dsub>
 800887a:	b007      	add	sp, #28
 800887c:	bd30      	pop	{r4, r5, pc}
 800887e:	aa02      	add	r2, sp, #8
 8008880:	f000 f89e 	bl	80089c0 <__ieee754_rem_pio2>
 8008884:	f000 0003 	and.w	r0, r0, #3
 8008888:	2801      	cmp	r0, #1
 800888a:	d009      	beq.n	80088a0 <cos+0x50>
 800888c:	2802      	cmp	r0, #2
 800888e:	d011      	beq.n	80088b4 <cos+0x64>
 8008890:	b9b8      	cbnz	r0, 80088c2 <cos+0x72>
 8008892:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008896:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800889a:	f000 fa89 	bl	8008db0 <__kernel_cos>
 800889e:	e7ec      	b.n	800887a <cos+0x2a>
 80088a0:	9000      	str	r0, [sp, #0]
 80088a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088aa:	f000 fe81 	bl	80095b0 <__kernel_sin>
 80088ae:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80088b2:	e7e2      	b.n	800887a <cos+0x2a>
 80088b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088bc:	f000 fa78 	bl	8008db0 <__kernel_cos>
 80088c0:	e7f5      	b.n	80088ae <cos+0x5e>
 80088c2:	2301      	movs	r3, #1
 80088c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088ce:	f000 fe6f 	bl	80095b0 <__kernel_sin>
 80088d2:	e7d2      	b.n	800887a <cos+0x2a>
 80088d4:	3fe921fb 	.word	0x3fe921fb
 80088d8:	7fefffff 	.word	0x7fefffff

080088dc <fabs>:
 80088dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80088e0:	4770      	bx	lr
	...

080088e4 <sin>:
 80088e4:	b530      	push	{r4, r5, lr}
 80088e6:	4a20      	ldr	r2, [pc, #128]	; (8008968 <sin+0x84>)
 80088e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80088ec:	4293      	cmp	r3, r2
 80088ee:	b087      	sub	sp, #28
 80088f0:	dc06      	bgt.n	8008900 <sin+0x1c>
 80088f2:	2300      	movs	r3, #0
 80088f4:	2200      	movs	r2, #0
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	2300      	movs	r3, #0
 80088fa:	f000 fe59 	bl	80095b0 <__kernel_sin>
 80088fe:	e006      	b.n	800890e <sin+0x2a>
 8008900:	4a1a      	ldr	r2, [pc, #104]	; (800896c <sin+0x88>)
 8008902:	4293      	cmp	r3, r2
 8008904:	dd05      	ble.n	8008912 <sin+0x2e>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	f7f7 fc91 	bl	8000230 <__aeabi_dsub>
 800890e:	b007      	add	sp, #28
 8008910:	bd30      	pop	{r4, r5, pc}
 8008912:	aa02      	add	r2, sp, #8
 8008914:	f000 f854 	bl	80089c0 <__ieee754_rem_pio2>
 8008918:	f000 0003 	and.w	r0, r0, #3
 800891c:	2801      	cmp	r0, #1
 800891e:	d009      	beq.n	8008934 <sin+0x50>
 8008920:	2802      	cmp	r0, #2
 8008922:	d00e      	beq.n	8008942 <sin+0x5e>
 8008924:	b9c0      	cbnz	r0, 8008958 <sin+0x74>
 8008926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800892a:	2301      	movs	r3, #1
 800892c:	9300      	str	r3, [sp, #0]
 800892e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008932:	e7e2      	b.n	80088fa <sin+0x16>
 8008934:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008938:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800893c:	f000 fa38 	bl	8008db0 <__kernel_cos>
 8008940:	e7e5      	b.n	800890e <sin+0x2a>
 8008942:	2301      	movs	r3, #1
 8008944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800894e:	f000 fe2f 	bl	80095b0 <__kernel_sin>
 8008952:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008956:	e7da      	b.n	800890e <sin+0x2a>
 8008958:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800895c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008960:	f000 fa26 	bl	8008db0 <__kernel_cos>
 8008964:	e7f5      	b.n	8008952 <sin+0x6e>
 8008966:	bf00      	nop
 8008968:	3fe921fb 	.word	0x3fe921fb
 800896c:	7fefffff 	.word	0x7fefffff

08008970 <roundf>:
 8008970:	b508      	push	{r3, lr}
 8008972:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008976:	3b7f      	subs	r3, #127	; 0x7f
 8008978:	2b16      	cmp	r3, #22
 800897a:	4601      	mov	r1, r0
 800897c:	4602      	mov	r2, r0
 800897e:	dc14      	bgt.n	80089aa <roundf+0x3a>
 8008980:	2b00      	cmp	r3, #0
 8008982:	da07      	bge.n	8008994 <roundf+0x24>
 8008984:	3301      	adds	r3, #1
 8008986:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800898a:	d101      	bne.n	8008990 <roundf+0x20>
 800898c:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8008990:	4608      	mov	r0, r1
 8008992:	bd08      	pop	{r3, pc}
 8008994:	4808      	ldr	r0, [pc, #32]	; (80089b8 <roundf+0x48>)
 8008996:	4118      	asrs	r0, r3
 8008998:	4201      	tst	r1, r0
 800899a:	d0f9      	beq.n	8008990 <roundf+0x20>
 800899c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089a0:	4119      	asrs	r1, r3
 80089a2:	4411      	add	r1, r2
 80089a4:	ea21 0100 	bic.w	r1, r1, r0
 80089a8:	e7f2      	b.n	8008990 <roundf+0x20>
 80089aa:	2b80      	cmp	r3, #128	; 0x80
 80089ac:	d1f0      	bne.n	8008990 <roundf+0x20>
 80089ae:	f7f8 f90f 	bl	8000bd0 <__addsf3>
 80089b2:	4601      	mov	r1, r0
 80089b4:	e7ec      	b.n	8008990 <roundf+0x20>
 80089b6:	bf00      	nop
 80089b8:	007fffff 	.word	0x007fffff
 80089bc:	00000000 	.word	0x00000000

080089c0 <__ieee754_rem_pio2>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	4614      	mov	r4, r2
 80089c6:	4ac4      	ldr	r2, [pc, #784]	; (8008cd8 <__ieee754_rem_pio2+0x318>)
 80089c8:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 80089cc:	b08d      	sub	sp, #52	; 0x34
 80089ce:	4592      	cmp	sl, r2
 80089d0:	9104      	str	r1, [sp, #16]
 80089d2:	dc07      	bgt.n	80089e4 <__ieee754_rem_pio2+0x24>
 80089d4:	2200      	movs	r2, #0
 80089d6:	2300      	movs	r3, #0
 80089d8:	e9c4 0100 	strd	r0, r1, [r4]
 80089dc:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80089e0:	2500      	movs	r5, #0
 80089e2:	e024      	b.n	8008a2e <__ieee754_rem_pio2+0x6e>
 80089e4:	4abd      	ldr	r2, [pc, #756]	; (8008cdc <__ieee754_rem_pio2+0x31c>)
 80089e6:	4592      	cmp	sl, r2
 80089e8:	dc72      	bgt.n	8008ad0 <__ieee754_rem_pio2+0x110>
 80089ea:	9b04      	ldr	r3, [sp, #16]
 80089ec:	4dbc      	ldr	r5, [pc, #752]	; (8008ce0 <__ieee754_rem_pio2+0x320>)
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	a3ab      	add	r3, pc, #684	; (adr r3, 8008ca0 <__ieee754_rem_pio2+0x2e0>)
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	dd36      	ble.n	8008a66 <__ieee754_rem_pio2+0xa6>
 80089f8:	f7f7 fc1a 	bl	8000230 <__aeabi_dsub>
 80089fc:	45aa      	cmp	sl, r5
 80089fe:	4606      	mov	r6, r0
 8008a00:	460f      	mov	r7, r1
 8008a02:	d018      	beq.n	8008a36 <__ieee754_rem_pio2+0x76>
 8008a04:	a3a8      	add	r3, pc, #672	; (adr r3, 8008ca8 <__ieee754_rem_pio2+0x2e8>)
 8008a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0a:	f7f7 fc11 	bl	8000230 <__aeabi_dsub>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	460b      	mov	r3, r1
 8008a12:	4630      	mov	r0, r6
 8008a14:	e9c4 2300 	strd	r2, r3, [r4]
 8008a18:	4639      	mov	r1, r7
 8008a1a:	f7f7 fc09 	bl	8000230 <__aeabi_dsub>
 8008a1e:	a3a2      	add	r3, pc, #648	; (adr r3, 8008ca8 <__ieee754_rem_pio2+0x2e8>)
 8008a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a24:	f7f7 fc04 	bl	8000230 <__aeabi_dsub>
 8008a28:	2501      	movs	r5, #1
 8008a2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a2e:	4628      	mov	r0, r5
 8008a30:	b00d      	add	sp, #52	; 0x34
 8008a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a36:	a39e      	add	r3, pc, #632	; (adr r3, 8008cb0 <__ieee754_rem_pio2+0x2f0>)
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	f7f7 fbf8 	bl	8000230 <__aeabi_dsub>
 8008a40:	a39d      	add	r3, pc, #628	; (adr r3, 8008cb8 <__ieee754_rem_pio2+0x2f8>)
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	4606      	mov	r6, r0
 8008a48:	460f      	mov	r7, r1
 8008a4a:	f7f7 fbf1 	bl	8000230 <__aeabi_dsub>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4630      	mov	r0, r6
 8008a54:	e9c4 2300 	strd	r2, r3, [r4]
 8008a58:	4639      	mov	r1, r7
 8008a5a:	f7f7 fbe9 	bl	8000230 <__aeabi_dsub>
 8008a5e:	a396      	add	r3, pc, #600	; (adr r3, 8008cb8 <__ieee754_rem_pio2+0x2f8>)
 8008a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a64:	e7de      	b.n	8008a24 <__ieee754_rem_pio2+0x64>
 8008a66:	f7f7 fbe5 	bl	8000234 <__adddf3>
 8008a6a:	45aa      	cmp	sl, r5
 8008a6c:	4606      	mov	r6, r0
 8008a6e:	460f      	mov	r7, r1
 8008a70:	d016      	beq.n	8008aa0 <__ieee754_rem_pio2+0xe0>
 8008a72:	a38d      	add	r3, pc, #564	; (adr r3, 8008ca8 <__ieee754_rem_pio2+0x2e8>)
 8008a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a78:	f7f7 fbdc 	bl	8000234 <__adddf3>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	4630      	mov	r0, r6
 8008a82:	e9c4 2300 	strd	r2, r3, [r4]
 8008a86:	4639      	mov	r1, r7
 8008a88:	f7f7 fbd2 	bl	8000230 <__aeabi_dsub>
 8008a8c:	a386      	add	r3, pc, #536	; (adr r3, 8008ca8 <__ieee754_rem_pio2+0x2e8>)
 8008a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a92:	f7f7 fbcf 	bl	8000234 <__adddf3>
 8008a96:	f04f 35ff 	mov.w	r5, #4294967295
 8008a9a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008a9e:	e7c6      	b.n	8008a2e <__ieee754_rem_pio2+0x6e>
 8008aa0:	a383      	add	r3, pc, #524	; (adr r3, 8008cb0 <__ieee754_rem_pio2+0x2f0>)
 8008aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa6:	f7f7 fbc5 	bl	8000234 <__adddf3>
 8008aaa:	a383      	add	r3, pc, #524	; (adr r3, 8008cb8 <__ieee754_rem_pio2+0x2f8>)
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	4606      	mov	r6, r0
 8008ab2:	460f      	mov	r7, r1
 8008ab4:	f7f7 fbbe 	bl	8000234 <__adddf3>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	460b      	mov	r3, r1
 8008abc:	4630      	mov	r0, r6
 8008abe:	e9c4 2300 	strd	r2, r3, [r4]
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	f7f7 fbb4 	bl	8000230 <__aeabi_dsub>
 8008ac8:	a37b      	add	r3, pc, #492	; (adr r3, 8008cb8 <__ieee754_rem_pio2+0x2f8>)
 8008aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ace:	e7e0      	b.n	8008a92 <__ieee754_rem_pio2+0xd2>
 8008ad0:	4a84      	ldr	r2, [pc, #528]	; (8008ce4 <__ieee754_rem_pio2+0x324>)
 8008ad2:	4592      	cmp	sl, r2
 8008ad4:	f300 80d5 	bgt.w	8008c82 <__ieee754_rem_pio2+0x2c2>
 8008ad8:	f7ff ff00 	bl	80088dc <fabs>
 8008adc:	a378      	add	r3, pc, #480	; (adr r3, 8008cc0 <__ieee754_rem_pio2+0x300>)
 8008ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae2:	4606      	mov	r6, r0
 8008ae4:	460f      	mov	r7, r1
 8008ae6:	f7f7 fd5b 	bl	80005a0 <__aeabi_dmul>
 8008aea:	2200      	movs	r2, #0
 8008aec:	4b7e      	ldr	r3, [pc, #504]	; (8008ce8 <__ieee754_rem_pio2+0x328>)
 8008aee:	f7f7 fba1 	bl	8000234 <__adddf3>
 8008af2:	f7f7 ffef 	bl	8000ad4 <__aeabi_d2iz>
 8008af6:	4605      	mov	r5, r0
 8008af8:	f7f7 fce8 	bl	80004cc <__aeabi_i2d>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b04:	a366      	add	r3, pc, #408	; (adr r3, 8008ca0 <__ieee754_rem_pio2+0x2e0>)
 8008b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0a:	f7f7 fd49 	bl	80005a0 <__aeabi_dmul>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	4630      	mov	r0, r6
 8008b14:	4639      	mov	r1, r7
 8008b16:	f7f7 fb8b 	bl	8000230 <__aeabi_dsub>
 8008b1a:	a363      	add	r3, pc, #396	; (adr r3, 8008ca8 <__ieee754_rem_pio2+0x2e8>)
 8008b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b20:	4680      	mov	r8, r0
 8008b22:	4689      	mov	r9, r1
 8008b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b28:	f7f7 fd3a 	bl	80005a0 <__aeabi_dmul>
 8008b2c:	2d1f      	cmp	r5, #31
 8008b2e:	4606      	mov	r6, r0
 8008b30:	460f      	mov	r7, r1
 8008b32:	dc0e      	bgt.n	8008b52 <__ieee754_rem_pio2+0x192>
 8008b34:	4b6d      	ldr	r3, [pc, #436]	; (8008cec <__ieee754_rem_pio2+0x32c>)
 8008b36:	1e6a      	subs	r2, r5, #1
 8008b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3c:	4553      	cmp	r3, sl
 8008b3e:	d008      	beq.n	8008b52 <__ieee754_rem_pio2+0x192>
 8008b40:	4632      	mov	r2, r6
 8008b42:	463b      	mov	r3, r7
 8008b44:	4640      	mov	r0, r8
 8008b46:	4649      	mov	r1, r9
 8008b48:	f7f7 fb72 	bl	8000230 <__aeabi_dsub>
 8008b4c:	e9c4 0100 	strd	r0, r1, [r4]
 8008b50:	e013      	b.n	8008b7a <__ieee754_rem_pio2+0x1ba>
 8008b52:	463b      	mov	r3, r7
 8008b54:	4632      	mov	r2, r6
 8008b56:	4640      	mov	r0, r8
 8008b58:	4649      	mov	r1, r9
 8008b5a:	f7f7 fb69 	bl	8000230 <__aeabi_dsub>
 8008b5e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8008b62:	9305      	str	r3, [sp, #20]
 8008b64:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008b68:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 8008b6c:	f1ba 0f10 	cmp.w	sl, #16
 8008b70:	dc1f      	bgt.n	8008bb2 <__ieee754_rem_pio2+0x1f2>
 8008b72:	4602      	mov	r2, r0
 8008b74:	460b      	mov	r3, r1
 8008b76:	e9c4 2300 	strd	r2, r3, [r4]
 8008b7a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 8008b7e:	4640      	mov	r0, r8
 8008b80:	4653      	mov	r3, sl
 8008b82:	4649      	mov	r1, r9
 8008b84:	f7f7 fb54 	bl	8000230 <__aeabi_dsub>
 8008b88:	4632      	mov	r2, r6
 8008b8a:	463b      	mov	r3, r7
 8008b8c:	f7f7 fb50 	bl	8000230 <__aeabi_dsub>
 8008b90:	460b      	mov	r3, r1
 8008b92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b96:	9904      	ldr	r1, [sp, #16]
 8008b98:	4602      	mov	r2, r0
 8008b9a:	2900      	cmp	r1, #0
 8008b9c:	f6bf af47 	bge.w	8008a2e <__ieee754_rem_pio2+0x6e>
 8008ba0:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8008ba4:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008ba8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008bac:	60e3      	str	r3, [r4, #12]
 8008bae:	426d      	negs	r5, r5
 8008bb0:	e73d      	b.n	8008a2e <__ieee754_rem_pio2+0x6e>
 8008bb2:	a33f      	add	r3, pc, #252	; (adr r3, 8008cb0 <__ieee754_rem_pio2+0x2f0>)
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bbc:	f7f7 fcf0 	bl	80005a0 <__aeabi_dmul>
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	460f      	mov	r7, r1
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	4640      	mov	r0, r8
 8008bca:	4649      	mov	r1, r9
 8008bcc:	f7f7 fb30 	bl	8000230 <__aeabi_dsub>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	4682      	mov	sl, r0
 8008bd6:	468b      	mov	fp, r1
 8008bd8:	4640      	mov	r0, r8
 8008bda:	4649      	mov	r1, r9
 8008bdc:	f7f7 fb28 	bl	8000230 <__aeabi_dsub>
 8008be0:	4632      	mov	r2, r6
 8008be2:	463b      	mov	r3, r7
 8008be4:	f7f7 fb24 	bl	8000230 <__aeabi_dsub>
 8008be8:	a333      	add	r3, pc, #204	; (adr r3, 8008cb8 <__ieee754_rem_pio2+0x2f8>)
 8008bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bee:	4606      	mov	r6, r0
 8008bf0:	460f      	mov	r7, r1
 8008bf2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bf6:	f7f7 fcd3 	bl	80005a0 <__aeabi_dmul>
 8008bfa:	4632      	mov	r2, r6
 8008bfc:	463b      	mov	r3, r7
 8008bfe:	f7f7 fb17 	bl	8000230 <__aeabi_dsub>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4606      	mov	r6, r0
 8008c08:	460f      	mov	r7, r1
 8008c0a:	4650      	mov	r0, sl
 8008c0c:	4659      	mov	r1, fp
 8008c0e:	f7f7 fb0f 	bl	8000230 <__aeabi_dsub>
 8008c12:	9a05      	ldr	r2, [sp, #20]
 8008c14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c18:	1ad3      	subs	r3, r2, r3
 8008c1a:	2b31      	cmp	r3, #49	; 0x31
 8008c1c:	dc06      	bgt.n	8008c2c <__ieee754_rem_pio2+0x26c>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	460b      	mov	r3, r1
 8008c22:	46d0      	mov	r8, sl
 8008c24:	46d9      	mov	r9, fp
 8008c26:	e9c4 2300 	strd	r2, r3, [r4]
 8008c2a:	e7a6      	b.n	8008b7a <__ieee754_rem_pio2+0x1ba>
 8008c2c:	a326      	add	r3, pc, #152	; (adr r3, 8008cc8 <__ieee754_rem_pio2+0x308>)
 8008c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c36:	f7f7 fcb3 	bl	80005a0 <__aeabi_dmul>
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	460f      	mov	r7, r1
 8008c3e:	4602      	mov	r2, r0
 8008c40:	460b      	mov	r3, r1
 8008c42:	4650      	mov	r0, sl
 8008c44:	4659      	mov	r1, fp
 8008c46:	f7f7 faf3 	bl	8000230 <__aeabi_dsub>
 8008c4a:	4602      	mov	r2, r0
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	4680      	mov	r8, r0
 8008c50:	4689      	mov	r9, r1
 8008c52:	4650      	mov	r0, sl
 8008c54:	4659      	mov	r1, fp
 8008c56:	f7f7 faeb 	bl	8000230 <__aeabi_dsub>
 8008c5a:	4632      	mov	r2, r6
 8008c5c:	463b      	mov	r3, r7
 8008c5e:	f7f7 fae7 	bl	8000230 <__aeabi_dsub>
 8008c62:	a31b      	add	r3, pc, #108	; (adr r3, 8008cd0 <__ieee754_rem_pio2+0x310>)
 8008c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c68:	4606      	mov	r6, r0
 8008c6a:	460f      	mov	r7, r1
 8008c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c70:	f7f7 fc96 	bl	80005a0 <__aeabi_dmul>
 8008c74:	4632      	mov	r2, r6
 8008c76:	463b      	mov	r3, r7
 8008c78:	f7f7 fada 	bl	8000230 <__aeabi_dsub>
 8008c7c:	4606      	mov	r6, r0
 8008c7e:	460f      	mov	r7, r1
 8008c80:	e75e      	b.n	8008b40 <__ieee754_rem_pio2+0x180>
 8008c82:	4a1b      	ldr	r2, [pc, #108]	; (8008cf0 <__ieee754_rem_pio2+0x330>)
 8008c84:	4592      	cmp	sl, r2
 8008c86:	dd35      	ble.n	8008cf4 <__ieee754_rem_pio2+0x334>
 8008c88:	4602      	mov	r2, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	f7f7 fad0 	bl	8000230 <__aeabi_dsub>
 8008c90:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008c94:	e9c4 0100 	strd	r0, r1, [r4]
 8008c98:	e6a2      	b.n	80089e0 <__ieee754_rem_pio2+0x20>
 8008c9a:	bf00      	nop
 8008c9c:	f3af 8000 	nop.w
 8008ca0:	54400000 	.word	0x54400000
 8008ca4:	3ff921fb 	.word	0x3ff921fb
 8008ca8:	1a626331 	.word	0x1a626331
 8008cac:	3dd0b461 	.word	0x3dd0b461
 8008cb0:	1a600000 	.word	0x1a600000
 8008cb4:	3dd0b461 	.word	0x3dd0b461
 8008cb8:	2e037073 	.word	0x2e037073
 8008cbc:	3ba3198a 	.word	0x3ba3198a
 8008cc0:	6dc9c883 	.word	0x6dc9c883
 8008cc4:	3fe45f30 	.word	0x3fe45f30
 8008cc8:	2e000000 	.word	0x2e000000
 8008ccc:	3ba3198a 	.word	0x3ba3198a
 8008cd0:	252049c1 	.word	0x252049c1
 8008cd4:	397b839a 	.word	0x397b839a
 8008cd8:	3fe921fb 	.word	0x3fe921fb
 8008cdc:	4002d97b 	.word	0x4002d97b
 8008ce0:	3ff921fb 	.word	0x3ff921fb
 8008ce4:	413921fb 	.word	0x413921fb
 8008ce8:	3fe00000 	.word	0x3fe00000
 8008cec:	08009aa0 	.word	0x08009aa0
 8008cf0:	7fefffff 	.word	0x7fefffff
 8008cf4:	ea4f 552a 	mov.w	r5, sl, asr #20
 8008cf8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008cfc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8008d00:	460f      	mov	r7, r1
 8008d02:	4606      	mov	r6, r0
 8008d04:	f7f7 fee6 	bl	8000ad4 <__aeabi_d2iz>
 8008d08:	f7f7 fbe0 	bl	80004cc <__aeabi_i2d>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	4630      	mov	r0, r6
 8008d12:	4639      	mov	r1, r7
 8008d14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008d18:	f7f7 fa8a 	bl	8000230 <__aeabi_dsub>
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	4b22      	ldr	r3, [pc, #136]	; (8008da8 <__ieee754_rem_pio2+0x3e8>)
 8008d20:	f7f7 fc3e 	bl	80005a0 <__aeabi_dmul>
 8008d24:	460f      	mov	r7, r1
 8008d26:	4606      	mov	r6, r0
 8008d28:	f7f7 fed4 	bl	8000ad4 <__aeabi_d2iz>
 8008d2c:	f7f7 fbce 	bl	80004cc <__aeabi_i2d>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4630      	mov	r0, r6
 8008d36:	4639      	mov	r1, r7
 8008d38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008d3c:	f7f7 fa78 	bl	8000230 <__aeabi_dsub>
 8008d40:	2200      	movs	r2, #0
 8008d42:	4b19      	ldr	r3, [pc, #100]	; (8008da8 <__ieee754_rem_pio2+0x3e8>)
 8008d44:	f7f7 fc2c 	bl	80005a0 <__aeabi_dmul>
 8008d48:	f04f 0803 	mov.w	r8, #3
 8008d4c:	2600      	movs	r6, #0
 8008d4e:	2700      	movs	r7, #0
 8008d50:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008d54:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008d58:	4632      	mov	r2, r6
 8008d5a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 8008d5e:	463b      	mov	r3, r7
 8008d60:	46c2      	mov	sl, r8
 8008d62:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d66:	f7f7 fe83 	bl	8000a70 <__aeabi_dcmpeq>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	d1f4      	bne.n	8008d58 <__ieee754_rem_pio2+0x398>
 8008d6e:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <__ieee754_rem_pio2+0x3ec>)
 8008d70:	462a      	mov	r2, r5
 8008d72:	9301      	str	r3, [sp, #4]
 8008d74:	2302      	movs	r3, #2
 8008d76:	4621      	mov	r1, r4
 8008d78:	9300      	str	r3, [sp, #0]
 8008d7a:	a806      	add	r0, sp, #24
 8008d7c:	4653      	mov	r3, sl
 8008d7e:	f000 f8d5 	bl	8008f2c <__kernel_rem_pio2>
 8008d82:	9b04      	ldr	r3, [sp, #16]
 8008d84:	4605      	mov	r5, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f6bf ae51 	bge.w	8008a2e <__ieee754_rem_pio2+0x6e>
 8008d8c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008d90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d94:	e9c4 2300 	strd	r2, r3, [r4]
 8008d98:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8008d9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008da0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008da4:	e703      	b.n	8008bae <__ieee754_rem_pio2+0x1ee>
 8008da6:	bf00      	nop
 8008da8:	41700000 	.word	0x41700000
 8008dac:	08009b20 	.word	0x08009b20

08008db0 <__kernel_cos>:
 8008db0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008db8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008dbc:	4680      	mov	r8, r0
 8008dbe:	460f      	mov	r7, r1
 8008dc0:	e9cd 2300 	strd	r2, r3, [sp]
 8008dc4:	da04      	bge.n	8008dd0 <__kernel_cos+0x20>
 8008dc6:	f7f7 fe85 	bl	8000ad4 <__aeabi_d2iz>
 8008dca:	2800      	cmp	r0, #0
 8008dcc:	f000 8086 	beq.w	8008edc <__kernel_cos+0x12c>
 8008dd0:	4642      	mov	r2, r8
 8008dd2:	463b      	mov	r3, r7
 8008dd4:	4640      	mov	r0, r8
 8008dd6:	4639      	mov	r1, r7
 8008dd8:	f7f7 fbe2 	bl	80005a0 <__aeabi_dmul>
 8008ddc:	2200      	movs	r2, #0
 8008dde:	4b4e      	ldr	r3, [pc, #312]	; (8008f18 <__kernel_cos+0x168>)
 8008de0:	4604      	mov	r4, r0
 8008de2:	460d      	mov	r5, r1
 8008de4:	f7f7 fbdc 	bl	80005a0 <__aeabi_dmul>
 8008de8:	a33f      	add	r3, pc, #252	; (adr r3, 8008ee8 <__kernel_cos+0x138>)
 8008dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dee:	4682      	mov	sl, r0
 8008df0:	468b      	mov	fp, r1
 8008df2:	4620      	mov	r0, r4
 8008df4:	4629      	mov	r1, r5
 8008df6:	f7f7 fbd3 	bl	80005a0 <__aeabi_dmul>
 8008dfa:	a33d      	add	r3, pc, #244	; (adr r3, 8008ef0 <__kernel_cos+0x140>)
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	f7f7 fa18 	bl	8000234 <__adddf3>
 8008e04:	4622      	mov	r2, r4
 8008e06:	462b      	mov	r3, r5
 8008e08:	f7f7 fbca 	bl	80005a0 <__aeabi_dmul>
 8008e0c:	a33a      	add	r3, pc, #232	; (adr r3, 8008ef8 <__kernel_cos+0x148>)
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	f7f7 fa0d 	bl	8000230 <__aeabi_dsub>
 8008e16:	4622      	mov	r2, r4
 8008e18:	462b      	mov	r3, r5
 8008e1a:	f7f7 fbc1 	bl	80005a0 <__aeabi_dmul>
 8008e1e:	a338      	add	r3, pc, #224	; (adr r3, 8008f00 <__kernel_cos+0x150>)
 8008e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e24:	f7f7 fa06 	bl	8000234 <__adddf3>
 8008e28:	4622      	mov	r2, r4
 8008e2a:	462b      	mov	r3, r5
 8008e2c:	f7f7 fbb8 	bl	80005a0 <__aeabi_dmul>
 8008e30:	a335      	add	r3, pc, #212	; (adr r3, 8008f08 <__kernel_cos+0x158>)
 8008e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e36:	f7f7 f9fb 	bl	8000230 <__aeabi_dsub>
 8008e3a:	4622      	mov	r2, r4
 8008e3c:	462b      	mov	r3, r5
 8008e3e:	f7f7 fbaf 	bl	80005a0 <__aeabi_dmul>
 8008e42:	a333      	add	r3, pc, #204	; (adr r3, 8008f10 <__kernel_cos+0x160>)
 8008e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e48:	f7f7 f9f4 	bl	8000234 <__adddf3>
 8008e4c:	4622      	mov	r2, r4
 8008e4e:	462b      	mov	r3, r5
 8008e50:	f7f7 fba6 	bl	80005a0 <__aeabi_dmul>
 8008e54:	4622      	mov	r2, r4
 8008e56:	462b      	mov	r3, r5
 8008e58:	f7f7 fba2 	bl	80005a0 <__aeabi_dmul>
 8008e5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e60:	4604      	mov	r4, r0
 8008e62:	460d      	mov	r5, r1
 8008e64:	4640      	mov	r0, r8
 8008e66:	4639      	mov	r1, r7
 8008e68:	f7f7 fb9a 	bl	80005a0 <__aeabi_dmul>
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	4602      	mov	r2, r0
 8008e70:	4629      	mov	r1, r5
 8008e72:	4620      	mov	r0, r4
 8008e74:	f7f7 f9dc 	bl	8000230 <__aeabi_dsub>
 8008e78:	4b28      	ldr	r3, [pc, #160]	; (8008f1c <__kernel_cos+0x16c>)
 8008e7a:	4680      	mov	r8, r0
 8008e7c:	429e      	cmp	r6, r3
 8008e7e:	4689      	mov	r9, r1
 8008e80:	dc0e      	bgt.n	8008ea0 <__kernel_cos+0xf0>
 8008e82:	4602      	mov	r2, r0
 8008e84:	460b      	mov	r3, r1
 8008e86:	4650      	mov	r0, sl
 8008e88:	4659      	mov	r1, fp
 8008e8a:	f7f7 f9d1 	bl	8000230 <__aeabi_dsub>
 8008e8e:	4602      	mov	r2, r0
 8008e90:	2000      	movs	r0, #0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4922      	ldr	r1, [pc, #136]	; (8008f20 <__kernel_cos+0x170>)
 8008e96:	f7f7 f9cb 	bl	8000230 <__aeabi_dsub>
 8008e9a:	b003      	add	sp, #12
 8008e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea0:	2400      	movs	r4, #0
 8008ea2:	4b20      	ldr	r3, [pc, #128]	; (8008f24 <__kernel_cos+0x174>)
 8008ea4:	4622      	mov	r2, r4
 8008ea6:	429e      	cmp	r6, r3
 8008ea8:	bfcc      	ite	gt
 8008eaa:	4d1f      	ldrgt	r5, [pc, #124]	; (8008f28 <__kernel_cos+0x178>)
 8008eac:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008eb0:	462b      	mov	r3, r5
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	491a      	ldr	r1, [pc, #104]	; (8008f20 <__kernel_cos+0x170>)
 8008eb6:	f7f7 f9bb 	bl	8000230 <__aeabi_dsub>
 8008eba:	4622      	mov	r2, r4
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	460f      	mov	r7, r1
 8008ec0:	462b      	mov	r3, r5
 8008ec2:	4650      	mov	r0, sl
 8008ec4:	4659      	mov	r1, fp
 8008ec6:	f7f7 f9b3 	bl	8000230 <__aeabi_dsub>
 8008eca:	4642      	mov	r2, r8
 8008ecc:	464b      	mov	r3, r9
 8008ece:	f7f7 f9af 	bl	8000230 <__aeabi_dsub>
 8008ed2:	4602      	mov	r2, r0
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	4639      	mov	r1, r7
 8008eda:	e7dc      	b.n	8008e96 <__kernel_cos+0xe6>
 8008edc:	2000      	movs	r0, #0
 8008ede:	4910      	ldr	r1, [pc, #64]	; (8008f20 <__kernel_cos+0x170>)
 8008ee0:	e7db      	b.n	8008e9a <__kernel_cos+0xea>
 8008ee2:	bf00      	nop
 8008ee4:	f3af 8000 	nop.w
 8008ee8:	be8838d4 	.word	0xbe8838d4
 8008eec:	bda8fae9 	.word	0xbda8fae9
 8008ef0:	bdb4b1c4 	.word	0xbdb4b1c4
 8008ef4:	3e21ee9e 	.word	0x3e21ee9e
 8008ef8:	809c52ad 	.word	0x809c52ad
 8008efc:	3e927e4f 	.word	0x3e927e4f
 8008f00:	19cb1590 	.word	0x19cb1590
 8008f04:	3efa01a0 	.word	0x3efa01a0
 8008f08:	16c15177 	.word	0x16c15177
 8008f0c:	3f56c16c 	.word	0x3f56c16c
 8008f10:	5555554c 	.word	0x5555554c
 8008f14:	3fa55555 	.word	0x3fa55555
 8008f18:	3fe00000 	.word	0x3fe00000
 8008f1c:	3fd33332 	.word	0x3fd33332
 8008f20:	3ff00000 	.word	0x3ff00000
 8008f24:	3fe90000 	.word	0x3fe90000
 8008f28:	3fd20000 	.word	0x3fd20000

08008f2c <__kernel_rem_pio2>:
 8008f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f30:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008f34:	9308      	str	r3, [sp, #32]
 8008f36:	9106      	str	r1, [sp, #24]
 8008f38:	4bb6      	ldr	r3, [pc, #728]	; (8009214 <__kernel_rem_pio2+0x2e8>)
 8008f3a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8008f3c:	f112 0f14 	cmn.w	r2, #20
 8008f40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f44:	bfa8      	it	ge
 8008f46:	1ed4      	subge	r4, r2, #3
 8008f48:	9302      	str	r3, [sp, #8]
 8008f4a:	9b08      	ldr	r3, [sp, #32]
 8008f4c:	bfb8      	it	lt
 8008f4e:	2400      	movlt	r4, #0
 8008f50:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f54:	9307      	str	r3, [sp, #28]
 8008f56:	bfa4      	itt	ge
 8008f58:	2318      	movge	r3, #24
 8008f5a:	fb94 f4f3 	sdivge	r4, r4, r3
 8008f5e:	f06f 0317 	mvn.w	r3, #23
 8008f62:	fb04 3303 	mla	r3, r4, r3, r3
 8008f66:	eb03 0b02 	add.w	fp, r3, r2
 8008f6a:	9a07      	ldr	r2, [sp, #28]
 8008f6c:	9b02      	ldr	r3, [sp, #8]
 8008f6e:	1aa7      	subs	r7, r4, r2
 8008f70:	eb03 0802 	add.w	r8, r3, r2
 8008f74:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008f76:	2500      	movs	r5, #0
 8008f78:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2300      	movs	r3, #0
 8008f80:	9009      	str	r0, [sp, #36]	; 0x24
 8008f82:	ae20      	add	r6, sp, #128	; 0x80
 8008f84:	4545      	cmp	r5, r8
 8008f86:	dd14      	ble.n	8008fb2 <__kernel_rem_pio2+0x86>
 8008f88:	f04f 0800 	mov.w	r8, #0
 8008f8c:	9a08      	ldr	r2, [sp, #32]
 8008f8e:	ab20      	add	r3, sp, #128	; 0x80
 8008f90:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8008f94:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8008f98:	9b02      	ldr	r3, [sp, #8]
 8008f9a:	4598      	cmp	r8, r3
 8008f9c:	dc35      	bgt.n	800900a <__kernel_rem_pio2+0xde>
 8008f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f1a3 0908 	sub.w	r9, r3, #8
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	462f      	mov	r7, r5
 8008faa:	2600      	movs	r6, #0
 8008fac:	e9cd 2300 	strd	r2, r3, [sp]
 8008fb0:	e01f      	b.n	8008ff2 <__kernel_rem_pio2+0xc6>
 8008fb2:	42ef      	cmn	r7, r5
 8008fb4:	d40b      	bmi.n	8008fce <__kernel_rem_pio2+0xa2>
 8008fb6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008fba:	e9cd 2300 	strd	r2, r3, [sp]
 8008fbe:	f7f7 fa85 	bl	80004cc <__aeabi_i2d>
 8008fc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fc6:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008fca:	3501      	adds	r5, #1
 8008fcc:	e7da      	b.n	8008f84 <__kernel_rem_pio2+0x58>
 8008fce:	4610      	mov	r0, r2
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	e7f8      	b.n	8008fc6 <__kernel_rem_pio2+0x9a>
 8008fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fd8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8008fdc:	f7f7 fae0 	bl	80005a0 <__aeabi_dmul>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fe8:	f7f7 f924 	bl	8000234 <__adddf3>
 8008fec:	e9cd 0100 	strd	r0, r1, [sp]
 8008ff0:	3601      	adds	r6, #1
 8008ff2:	9b07      	ldr	r3, [sp, #28]
 8008ff4:	3f08      	subs	r7, #8
 8008ff6:	429e      	cmp	r6, r3
 8008ff8:	ddec      	ble.n	8008fd4 <__kernel_rem_pio2+0xa8>
 8008ffa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ffe:	f108 0801 	add.w	r8, r8, #1
 8009002:	e8ea 2302 	strd	r2, r3, [sl], #8
 8009006:	3508      	adds	r5, #8
 8009008:	e7c6      	b.n	8008f98 <__kernel_rem_pio2+0x6c>
 800900a:	9b02      	ldr	r3, [sp, #8]
 800900c:	aa0c      	add	r2, sp, #48	; 0x30
 800900e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009012:	930b      	str	r3, [sp, #44]	; 0x2c
 8009014:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8009016:	9e02      	ldr	r6, [sp, #8]
 8009018:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800901c:	930a      	str	r3, [sp, #40]	; 0x28
 800901e:	ab98      	add	r3, sp, #608	; 0x260
 8009020:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009024:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 8009028:	ab70      	add	r3, sp, #448	; 0x1c0
 800902a:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800902e:	46d0      	mov	r8, sl
 8009030:	46b1      	mov	r9, r6
 8009032:	af0c      	add	r7, sp, #48	; 0x30
 8009034:	9700      	str	r7, [sp, #0]
 8009036:	f1b9 0f00 	cmp.w	r9, #0
 800903a:	f1a8 0808 	sub.w	r8, r8, #8
 800903e:	dc71      	bgt.n	8009124 <__kernel_rem_pio2+0x1f8>
 8009040:	465a      	mov	r2, fp
 8009042:	4620      	mov	r0, r4
 8009044:	4629      	mov	r1, r5
 8009046:	f000 fbeb 	bl	8009820 <scalbn>
 800904a:	2200      	movs	r2, #0
 800904c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009050:	4604      	mov	r4, r0
 8009052:	460d      	mov	r5, r1
 8009054:	f7f7 faa4 	bl	80005a0 <__aeabi_dmul>
 8009058:	f000 fb62 	bl	8009720 <floor>
 800905c:	2200      	movs	r2, #0
 800905e:	4b6e      	ldr	r3, [pc, #440]	; (8009218 <__kernel_rem_pio2+0x2ec>)
 8009060:	f7f7 fa9e 	bl	80005a0 <__aeabi_dmul>
 8009064:	4602      	mov	r2, r0
 8009066:	460b      	mov	r3, r1
 8009068:	4620      	mov	r0, r4
 800906a:	4629      	mov	r1, r5
 800906c:	f7f7 f8e0 	bl	8000230 <__aeabi_dsub>
 8009070:	460d      	mov	r5, r1
 8009072:	4604      	mov	r4, r0
 8009074:	f7f7 fd2e 	bl	8000ad4 <__aeabi_d2iz>
 8009078:	9004      	str	r0, [sp, #16]
 800907a:	f7f7 fa27 	bl	80004cc <__aeabi_i2d>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4620      	mov	r0, r4
 8009084:	4629      	mov	r1, r5
 8009086:	f7f7 f8d3 	bl	8000230 <__aeabi_dsub>
 800908a:	f1bb 0f00 	cmp.w	fp, #0
 800908e:	4680      	mov	r8, r0
 8009090:	4689      	mov	r9, r1
 8009092:	dd70      	ble.n	8009176 <__kernel_rem_pio2+0x24a>
 8009094:	1e72      	subs	r2, r6, #1
 8009096:	ab0c      	add	r3, sp, #48	; 0x30
 8009098:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800909c:	9c04      	ldr	r4, [sp, #16]
 800909e:	f1cb 0118 	rsb	r1, fp, #24
 80090a2:	fa40 f301 	asr.w	r3, r0, r1
 80090a6:	441c      	add	r4, r3
 80090a8:	408b      	lsls	r3, r1
 80090aa:	1ac0      	subs	r0, r0, r3
 80090ac:	ab0c      	add	r3, sp, #48	; 0x30
 80090ae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80090b2:	f1cb 0317 	rsb	r3, fp, #23
 80090b6:	9404      	str	r4, [sp, #16]
 80090b8:	fa40 f303 	asr.w	r3, r0, r3
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	9b00      	ldr	r3, [sp, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	dd66      	ble.n	8009192 <__kernel_rem_pio2+0x266>
 80090c4:	2200      	movs	r2, #0
 80090c6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80090ca:	4614      	mov	r4, r2
 80090cc:	9b04      	ldr	r3, [sp, #16]
 80090ce:	3301      	adds	r3, #1
 80090d0:	9304      	str	r3, [sp, #16]
 80090d2:	4296      	cmp	r6, r2
 80090d4:	f300 80ac 	bgt.w	8009230 <__kernel_rem_pio2+0x304>
 80090d8:	f1bb 0f00 	cmp.w	fp, #0
 80090dc:	dd07      	ble.n	80090ee <__kernel_rem_pio2+0x1c2>
 80090de:	f1bb 0f01 	cmp.w	fp, #1
 80090e2:	f000 80b4 	beq.w	800924e <__kernel_rem_pio2+0x322>
 80090e6:	f1bb 0f02 	cmp.w	fp, #2
 80090ea:	f000 80ba 	beq.w	8009262 <__kernel_rem_pio2+0x336>
 80090ee:	9b00      	ldr	r3, [sp, #0]
 80090f0:	2b02      	cmp	r3, #2
 80090f2:	d14e      	bne.n	8009192 <__kernel_rem_pio2+0x266>
 80090f4:	4642      	mov	r2, r8
 80090f6:	464b      	mov	r3, r9
 80090f8:	2000      	movs	r0, #0
 80090fa:	4948      	ldr	r1, [pc, #288]	; (800921c <__kernel_rem_pio2+0x2f0>)
 80090fc:	f7f7 f898 	bl	8000230 <__aeabi_dsub>
 8009100:	4680      	mov	r8, r0
 8009102:	4689      	mov	r9, r1
 8009104:	2c00      	cmp	r4, #0
 8009106:	d044      	beq.n	8009192 <__kernel_rem_pio2+0x266>
 8009108:	465a      	mov	r2, fp
 800910a:	2000      	movs	r0, #0
 800910c:	4943      	ldr	r1, [pc, #268]	; (800921c <__kernel_rem_pio2+0x2f0>)
 800910e:	f000 fb87 	bl	8009820 <scalbn>
 8009112:	4602      	mov	r2, r0
 8009114:	460b      	mov	r3, r1
 8009116:	4640      	mov	r0, r8
 8009118:	4649      	mov	r1, r9
 800911a:	f7f7 f889 	bl	8000230 <__aeabi_dsub>
 800911e:	4680      	mov	r8, r0
 8009120:	4689      	mov	r9, r1
 8009122:	e036      	b.n	8009192 <__kernel_rem_pio2+0x266>
 8009124:	2200      	movs	r2, #0
 8009126:	4b3e      	ldr	r3, [pc, #248]	; (8009220 <__kernel_rem_pio2+0x2f4>)
 8009128:	4620      	mov	r0, r4
 800912a:	4629      	mov	r1, r5
 800912c:	f7f7 fa38 	bl	80005a0 <__aeabi_dmul>
 8009130:	f7f7 fcd0 	bl	8000ad4 <__aeabi_d2iz>
 8009134:	f7f7 f9ca 	bl	80004cc <__aeabi_i2d>
 8009138:	4602      	mov	r2, r0
 800913a:	460b      	mov	r3, r1
 800913c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009140:	2200      	movs	r2, #0
 8009142:	4b38      	ldr	r3, [pc, #224]	; (8009224 <__kernel_rem_pio2+0x2f8>)
 8009144:	f7f7 fa2c 	bl	80005a0 <__aeabi_dmul>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4620      	mov	r0, r4
 800914e:	4629      	mov	r1, r5
 8009150:	f7f7 f86e 	bl	8000230 <__aeabi_dsub>
 8009154:	f7f7 fcbe 	bl	8000ad4 <__aeabi_d2iz>
 8009158:	9b00      	ldr	r3, [sp, #0]
 800915a:	f109 39ff 	add.w	r9, r9, #4294967295
 800915e:	f843 0b04 	str.w	r0, [r3], #4
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009168:	e9d8 2300 	ldrd	r2, r3, [r8]
 800916c:	f7f7 f862 	bl	8000234 <__adddf3>
 8009170:	4604      	mov	r4, r0
 8009172:	460d      	mov	r5, r1
 8009174:	e75f      	b.n	8009036 <__kernel_rem_pio2+0x10a>
 8009176:	d105      	bne.n	8009184 <__kernel_rem_pio2+0x258>
 8009178:	1e73      	subs	r3, r6, #1
 800917a:	aa0c      	add	r2, sp, #48	; 0x30
 800917c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009180:	15c3      	asrs	r3, r0, #23
 8009182:	e79b      	b.n	80090bc <__kernel_rem_pio2+0x190>
 8009184:	2200      	movs	r2, #0
 8009186:	4b28      	ldr	r3, [pc, #160]	; (8009228 <__kernel_rem_pio2+0x2fc>)
 8009188:	f7f7 fc90 	bl	8000aac <__aeabi_dcmpge>
 800918c:	2800      	cmp	r0, #0
 800918e:	d13e      	bne.n	800920e <__kernel_rem_pio2+0x2e2>
 8009190:	9000      	str	r0, [sp, #0]
 8009192:	2200      	movs	r2, #0
 8009194:	2300      	movs	r3, #0
 8009196:	4640      	mov	r0, r8
 8009198:	4649      	mov	r1, r9
 800919a:	f7f7 fc69 	bl	8000a70 <__aeabi_dcmpeq>
 800919e:	2800      	cmp	r0, #0
 80091a0:	f000 80b1 	beq.w	8009306 <__kernel_rem_pio2+0x3da>
 80091a4:	1e74      	subs	r4, r6, #1
 80091a6:	4623      	mov	r3, r4
 80091a8:	2200      	movs	r2, #0
 80091aa:	9902      	ldr	r1, [sp, #8]
 80091ac:	428b      	cmp	r3, r1
 80091ae:	da5f      	bge.n	8009270 <__kernel_rem_pio2+0x344>
 80091b0:	2a00      	cmp	r2, #0
 80091b2:	d074      	beq.n	800929e <__kernel_rem_pio2+0x372>
 80091b4:	ab0c      	add	r3, sp, #48	; 0x30
 80091b6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80091ba:	f1ab 0b18 	sub.w	fp, fp, #24
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 809f 	beq.w	8009302 <__kernel_rem_pio2+0x3d6>
 80091c4:	465a      	mov	r2, fp
 80091c6:	2000      	movs	r0, #0
 80091c8:	4914      	ldr	r1, [pc, #80]	; (800921c <__kernel_rem_pio2+0x2f0>)
 80091ca:	f000 fb29 	bl	8009820 <scalbn>
 80091ce:	46a2      	mov	sl, r4
 80091d0:	4606      	mov	r6, r0
 80091d2:	460f      	mov	r7, r1
 80091d4:	f04f 0800 	mov.w	r8, #0
 80091d8:	ab70      	add	r3, sp, #448	; 0x1c0
 80091da:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8009220 <__kernel_rem_pio2+0x2f4>
 80091de:	00e5      	lsls	r5, r4, #3
 80091e0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80091e4:	f1ba 0f00 	cmp.w	sl, #0
 80091e8:	f280 80c3 	bge.w	8009372 <__kernel_rem_pio2+0x446>
 80091ec:	4626      	mov	r6, r4
 80091ee:	2e00      	cmp	r6, #0
 80091f0:	f2c0 80f5 	blt.w	80093de <__kernel_rem_pio2+0x4b2>
 80091f4:	4b0d      	ldr	r3, [pc, #52]	; (800922c <__kernel_rem_pio2+0x300>)
 80091f6:	f04f 0a00 	mov.w	sl, #0
 80091fa:	9307      	str	r3, [sp, #28]
 80091fc:	ab70      	add	r3, sp, #448	; 0x1c0
 80091fe:	f04f 0b00 	mov.w	fp, #0
 8009202:	f04f 0800 	mov.w	r8, #0
 8009206:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800920a:	1ba7      	subs	r7, r4, r6
 800920c:	e0db      	b.n	80093c6 <__kernel_rem_pio2+0x49a>
 800920e:	2302      	movs	r3, #2
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	e757      	b.n	80090c4 <__kernel_rem_pio2+0x198>
 8009214:	08009c68 	.word	0x08009c68
 8009218:	40200000 	.word	0x40200000
 800921c:	3ff00000 	.word	0x3ff00000
 8009220:	3e700000 	.word	0x3e700000
 8009224:	41700000 	.word	0x41700000
 8009228:	3fe00000 	.word	0x3fe00000
 800922c:	08009c28 	.word	0x08009c28
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	b944      	cbnz	r4, 8009246 <__kernel_rem_pio2+0x31a>
 8009234:	b11b      	cbz	r3, 800923e <__kernel_rem_pio2+0x312>
 8009236:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	2301      	movs	r3, #1
 800923e:	461c      	mov	r4, r3
 8009240:	3201      	adds	r2, #1
 8009242:	3704      	adds	r7, #4
 8009244:	e745      	b.n	80090d2 <__kernel_rem_pio2+0x1a6>
 8009246:	1acb      	subs	r3, r1, r3
 8009248:	603b      	str	r3, [r7, #0]
 800924a:	4623      	mov	r3, r4
 800924c:	e7f7      	b.n	800923e <__kernel_rem_pio2+0x312>
 800924e:	1e72      	subs	r2, r6, #1
 8009250:	ab0c      	add	r3, sp, #48	; 0x30
 8009252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009256:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800925a:	a90c      	add	r1, sp, #48	; 0x30
 800925c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009260:	e745      	b.n	80090ee <__kernel_rem_pio2+0x1c2>
 8009262:	1e72      	subs	r2, r6, #1
 8009264:	ab0c      	add	r3, sp, #48	; 0x30
 8009266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800926e:	e7f4      	b.n	800925a <__kernel_rem_pio2+0x32e>
 8009270:	a90c      	add	r1, sp, #48	; 0x30
 8009272:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009276:	3b01      	subs	r3, #1
 8009278:	430a      	orrs	r2, r1
 800927a:	e796      	b.n	80091aa <__kernel_rem_pio2+0x27e>
 800927c:	3401      	adds	r4, #1
 800927e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009282:	2a00      	cmp	r2, #0
 8009284:	d0fa      	beq.n	800927c <__kernel_rem_pio2+0x350>
 8009286:	9b08      	ldr	r3, [sp, #32]
 8009288:	f106 0801 	add.w	r8, r6, #1
 800928c:	18f5      	adds	r5, r6, r3
 800928e:	ab20      	add	r3, sp, #128	; 0x80
 8009290:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009294:	4434      	add	r4, r6
 8009296:	4544      	cmp	r4, r8
 8009298:	da04      	bge.n	80092a4 <__kernel_rem_pio2+0x378>
 800929a:	4626      	mov	r6, r4
 800929c:	e6bf      	b.n	800901e <__kernel_rem_pio2+0xf2>
 800929e:	2401      	movs	r4, #1
 80092a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092a2:	e7ec      	b.n	800927e <__kernel_rem_pio2+0x352>
 80092a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092a6:	f04f 0900 	mov.w	r9, #0
 80092aa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80092ae:	f7f7 f90d 	bl	80004cc <__aeabi_i2d>
 80092b2:	2600      	movs	r6, #0
 80092b4:	2700      	movs	r7, #0
 80092b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b8:	e9c5 0100 	strd	r0, r1, [r5]
 80092bc:	3b08      	subs	r3, #8
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	9504      	str	r5, [sp, #16]
 80092c2:	9b07      	ldr	r3, [sp, #28]
 80092c4:	4599      	cmp	r9, r3
 80092c6:	dd05      	ble.n	80092d4 <__kernel_rem_pio2+0x3a8>
 80092c8:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 80092cc:	f108 0801 	add.w	r8, r8, #1
 80092d0:	3508      	adds	r5, #8
 80092d2:	e7e0      	b.n	8009296 <__kernel_rem_pio2+0x36a>
 80092d4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80092d8:	9900      	ldr	r1, [sp, #0]
 80092da:	f109 0901 	add.w	r9, r9, #1
 80092de:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80092e2:	9100      	str	r1, [sp, #0]
 80092e4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80092e8:	f8cd c010 	str.w	ip, [sp, #16]
 80092ec:	f7f7 f958 	bl	80005a0 <__aeabi_dmul>
 80092f0:	4602      	mov	r2, r0
 80092f2:	460b      	mov	r3, r1
 80092f4:	4630      	mov	r0, r6
 80092f6:	4639      	mov	r1, r7
 80092f8:	f7f6 ff9c 	bl	8000234 <__adddf3>
 80092fc:	4606      	mov	r6, r0
 80092fe:	460f      	mov	r7, r1
 8009300:	e7df      	b.n	80092c2 <__kernel_rem_pio2+0x396>
 8009302:	3c01      	subs	r4, #1
 8009304:	e756      	b.n	80091b4 <__kernel_rem_pio2+0x288>
 8009306:	f1cb 0200 	rsb	r2, fp, #0
 800930a:	4640      	mov	r0, r8
 800930c:	4649      	mov	r1, r9
 800930e:	f000 fa87 	bl	8009820 <scalbn>
 8009312:	2200      	movs	r2, #0
 8009314:	4ba4      	ldr	r3, [pc, #656]	; (80095a8 <__kernel_rem_pio2+0x67c>)
 8009316:	4604      	mov	r4, r0
 8009318:	460d      	mov	r5, r1
 800931a:	f7f7 fbc7 	bl	8000aac <__aeabi_dcmpge>
 800931e:	b1f8      	cbz	r0, 8009360 <__kernel_rem_pio2+0x434>
 8009320:	2200      	movs	r2, #0
 8009322:	4ba2      	ldr	r3, [pc, #648]	; (80095ac <__kernel_rem_pio2+0x680>)
 8009324:	4620      	mov	r0, r4
 8009326:	4629      	mov	r1, r5
 8009328:	f7f7 f93a 	bl	80005a0 <__aeabi_dmul>
 800932c:	f7f7 fbd2 	bl	8000ad4 <__aeabi_d2iz>
 8009330:	4607      	mov	r7, r0
 8009332:	f7f7 f8cb 	bl	80004cc <__aeabi_i2d>
 8009336:	2200      	movs	r2, #0
 8009338:	4b9b      	ldr	r3, [pc, #620]	; (80095a8 <__kernel_rem_pio2+0x67c>)
 800933a:	f7f7 f931 	bl	80005a0 <__aeabi_dmul>
 800933e:	460b      	mov	r3, r1
 8009340:	4602      	mov	r2, r0
 8009342:	4629      	mov	r1, r5
 8009344:	4620      	mov	r0, r4
 8009346:	f7f6 ff73 	bl	8000230 <__aeabi_dsub>
 800934a:	f7f7 fbc3 	bl	8000ad4 <__aeabi_d2iz>
 800934e:	1c74      	adds	r4, r6, #1
 8009350:	ab0c      	add	r3, sp, #48	; 0x30
 8009352:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009356:	f10b 0b18 	add.w	fp, fp, #24
 800935a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800935e:	e731      	b.n	80091c4 <__kernel_rem_pio2+0x298>
 8009360:	4620      	mov	r0, r4
 8009362:	4629      	mov	r1, r5
 8009364:	f7f7 fbb6 	bl	8000ad4 <__aeabi_d2iz>
 8009368:	ab0c      	add	r3, sp, #48	; 0x30
 800936a:	4634      	mov	r4, r6
 800936c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8009370:	e728      	b.n	80091c4 <__kernel_rem_pio2+0x298>
 8009372:	ab0c      	add	r3, sp, #48	; 0x30
 8009374:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8009378:	f7f7 f8a8 	bl	80004cc <__aeabi_i2d>
 800937c:	4632      	mov	r2, r6
 800937e:	463b      	mov	r3, r7
 8009380:	f7f7 f90e 	bl	80005a0 <__aeabi_dmul>
 8009384:	4642      	mov	r2, r8
 8009386:	e86b 0102 	strd	r0, r1, [fp], #-8
 800938a:	464b      	mov	r3, r9
 800938c:	4630      	mov	r0, r6
 800938e:	4639      	mov	r1, r7
 8009390:	f7f7 f906 	bl	80005a0 <__aeabi_dmul>
 8009394:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009398:	4606      	mov	r6, r0
 800939a:	460f      	mov	r7, r1
 800939c:	e722      	b.n	80091e4 <__kernel_rem_pio2+0x2b8>
 800939e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80093a2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80093a6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80093aa:	f8cd c01c 	str.w	ip, [sp, #28]
 80093ae:	f7f7 f8f7 	bl	80005a0 <__aeabi_dmul>
 80093b2:	4602      	mov	r2, r0
 80093b4:	460b      	mov	r3, r1
 80093b6:	4650      	mov	r0, sl
 80093b8:	4659      	mov	r1, fp
 80093ba:	f7f6 ff3b 	bl	8000234 <__adddf3>
 80093be:	4682      	mov	sl, r0
 80093c0:	468b      	mov	fp, r1
 80093c2:	f108 0801 	add.w	r8, r8, #1
 80093c6:	9b02      	ldr	r3, [sp, #8]
 80093c8:	4598      	cmp	r8, r3
 80093ca:	dc01      	bgt.n	80093d0 <__kernel_rem_pio2+0x4a4>
 80093cc:	45b8      	cmp	r8, r7
 80093ce:	dde6      	ble.n	800939e <__kernel_rem_pio2+0x472>
 80093d0:	ab48      	add	r3, sp, #288	; 0x120
 80093d2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80093d6:	e9c7 ab00 	strd	sl, fp, [r7]
 80093da:	3e01      	subs	r6, #1
 80093dc:	e707      	b.n	80091ee <__kernel_rem_pio2+0x2c2>
 80093de:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80093e0:	2b02      	cmp	r3, #2
 80093e2:	dc09      	bgt.n	80093f8 <__kernel_rem_pio2+0x4cc>
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	dc32      	bgt.n	800944e <__kernel_rem_pio2+0x522>
 80093e8:	d05a      	beq.n	80094a0 <__kernel_rem_pio2+0x574>
 80093ea:	9b04      	ldr	r3, [sp, #16]
 80093ec:	f003 0007 	and.w	r0, r3, #7
 80093f0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80093f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80093fa:	2b03      	cmp	r3, #3
 80093fc:	d1f5      	bne.n	80093ea <__kernel_rem_pio2+0x4be>
 80093fe:	ab48      	add	r3, sp, #288	; 0x120
 8009400:	441d      	add	r5, r3
 8009402:	46aa      	mov	sl, r5
 8009404:	46a3      	mov	fp, r4
 8009406:	f1bb 0f00 	cmp.w	fp, #0
 800940a:	dc76      	bgt.n	80094fa <__kernel_rem_pio2+0x5ce>
 800940c:	46aa      	mov	sl, r5
 800940e:	46a3      	mov	fp, r4
 8009410:	f1bb 0f01 	cmp.w	fp, #1
 8009414:	f300 8090 	bgt.w	8009538 <__kernel_rem_pio2+0x60c>
 8009418:	2700      	movs	r7, #0
 800941a:	463e      	mov	r6, r7
 800941c:	2c01      	cmp	r4, #1
 800941e:	f300 80aa 	bgt.w	8009576 <__kernel_rem_pio2+0x64a>
 8009422:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 8009426:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800942a:	9b00      	ldr	r3, [sp, #0]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f040 80ac 	bne.w	800958a <__kernel_rem_pio2+0x65e>
 8009432:	4603      	mov	r3, r0
 8009434:	462a      	mov	r2, r5
 8009436:	9806      	ldr	r0, [sp, #24]
 8009438:	e9c0 2300 	strd	r2, r3, [r0]
 800943c:	4622      	mov	r2, r4
 800943e:	460b      	mov	r3, r1
 8009440:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8009444:	463a      	mov	r2, r7
 8009446:	4633      	mov	r3, r6
 8009448:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800944c:	e7cd      	b.n	80093ea <__kernel_rem_pio2+0x4be>
 800944e:	2000      	movs	r0, #0
 8009450:	46a0      	mov	r8, r4
 8009452:	4601      	mov	r1, r0
 8009454:	ab48      	add	r3, sp, #288	; 0x120
 8009456:	441d      	add	r5, r3
 8009458:	f1b8 0f00 	cmp.w	r8, #0
 800945c:	da3a      	bge.n	80094d4 <__kernel_rem_pio2+0x5a8>
 800945e:	9b00      	ldr	r3, [sp, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d03e      	beq.n	80094e2 <__kernel_rem_pio2+0x5b6>
 8009464:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8009468:	4602      	mov	r2, r0
 800946a:	462b      	mov	r3, r5
 800946c:	9d06      	ldr	r5, [sp, #24]
 800946e:	2601      	movs	r6, #1
 8009470:	e9c5 2300 	strd	r2, r3, [r5]
 8009474:	460b      	mov	r3, r1
 8009476:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800947a:	f7f6 fed9 	bl	8000230 <__aeabi_dsub>
 800947e:	4684      	mov	ip, r0
 8009480:	460f      	mov	r7, r1
 8009482:	ad48      	add	r5, sp, #288	; 0x120
 8009484:	42b4      	cmp	r4, r6
 8009486:	f105 0508 	add.w	r5, r5, #8
 800948a:	da2c      	bge.n	80094e6 <__kernel_rem_pio2+0x5ba>
 800948c:	9b00      	ldr	r3, [sp, #0]
 800948e:	b10b      	cbz	r3, 8009494 <__kernel_rem_pio2+0x568>
 8009490:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8009494:	4662      	mov	r2, ip
 8009496:	463b      	mov	r3, r7
 8009498:	9906      	ldr	r1, [sp, #24]
 800949a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800949e:	e7a4      	b.n	80093ea <__kernel_rem_pio2+0x4be>
 80094a0:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 80094a2:	ab48      	add	r3, sp, #288	; 0x120
 80094a4:	4637      	mov	r7, r6
 80094a6:	441d      	add	r5, r3
 80094a8:	2c00      	cmp	r4, #0
 80094aa:	da09      	bge.n	80094c0 <__kernel_rem_pio2+0x594>
 80094ac:	9b00      	ldr	r3, [sp, #0]
 80094ae:	b10b      	cbz	r3, 80094b4 <__kernel_rem_pio2+0x588>
 80094b0:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 80094b4:	4632      	mov	r2, r6
 80094b6:	463b      	mov	r3, r7
 80094b8:	9906      	ldr	r1, [sp, #24]
 80094ba:	e9c1 2300 	strd	r2, r3, [r1]
 80094be:	e794      	b.n	80093ea <__kernel_rem_pio2+0x4be>
 80094c0:	4630      	mov	r0, r6
 80094c2:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80094c6:	4639      	mov	r1, r7
 80094c8:	f7f6 feb4 	bl	8000234 <__adddf3>
 80094cc:	3c01      	subs	r4, #1
 80094ce:	4606      	mov	r6, r0
 80094d0:	460f      	mov	r7, r1
 80094d2:	e7e9      	b.n	80094a8 <__kernel_rem_pio2+0x57c>
 80094d4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80094d8:	f7f6 feac 	bl	8000234 <__adddf3>
 80094dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80094e0:	e7ba      	b.n	8009458 <__kernel_rem_pio2+0x52c>
 80094e2:	460d      	mov	r5, r1
 80094e4:	e7c0      	b.n	8009468 <__kernel_rem_pio2+0x53c>
 80094e6:	4660      	mov	r0, ip
 80094e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094ec:	4639      	mov	r1, r7
 80094ee:	f7f6 fea1 	bl	8000234 <__adddf3>
 80094f2:	3601      	adds	r6, #1
 80094f4:	4684      	mov	ip, r0
 80094f6:	460f      	mov	r7, r1
 80094f8:	e7c4      	b.n	8009484 <__kernel_rem_pio2+0x558>
 80094fa:	e9da 6700 	ldrd	r6, r7, [sl]
 80094fe:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8009502:	4632      	mov	r2, r6
 8009504:	463b      	mov	r3, r7
 8009506:	4640      	mov	r0, r8
 8009508:	4649      	mov	r1, r9
 800950a:	f7f6 fe93 	bl	8000234 <__adddf3>
 800950e:	4602      	mov	r2, r0
 8009510:	460b      	mov	r3, r1
 8009512:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009516:	4640      	mov	r0, r8
 8009518:	4649      	mov	r1, r9
 800951a:	f7f6 fe89 	bl	8000230 <__aeabi_dsub>
 800951e:	4632      	mov	r2, r6
 8009520:	463b      	mov	r3, r7
 8009522:	f7f6 fe87 	bl	8000234 <__adddf3>
 8009526:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800952a:	e86a 0102 	strd	r0, r1, [sl], #-8
 800952e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009532:	e9ca 2300 	strd	r2, r3, [sl]
 8009536:	e766      	b.n	8009406 <__kernel_rem_pio2+0x4da>
 8009538:	e9da 8900 	ldrd	r8, r9, [sl]
 800953c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8009540:	4642      	mov	r2, r8
 8009542:	464b      	mov	r3, r9
 8009544:	4630      	mov	r0, r6
 8009546:	4639      	mov	r1, r7
 8009548:	f7f6 fe74 	bl	8000234 <__adddf3>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009554:	4630      	mov	r0, r6
 8009556:	4639      	mov	r1, r7
 8009558:	f7f6 fe6a 	bl	8000230 <__aeabi_dsub>
 800955c:	4642      	mov	r2, r8
 800955e:	464b      	mov	r3, r9
 8009560:	f7f6 fe68 	bl	8000234 <__adddf3>
 8009564:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009568:	e86a 0102 	strd	r0, r1, [sl], #-8
 800956c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009570:	e9ca 2300 	strd	r2, r3, [sl]
 8009574:	e74c      	b.n	8009410 <__kernel_rem_pio2+0x4e4>
 8009576:	4638      	mov	r0, r7
 8009578:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800957c:	4631      	mov	r1, r6
 800957e:	f7f6 fe59 	bl	8000234 <__adddf3>
 8009582:	3c01      	subs	r4, #1
 8009584:	4607      	mov	r7, r0
 8009586:	460e      	mov	r6, r1
 8009588:	e748      	b.n	800941c <__kernel_rem_pio2+0x4f0>
 800958a:	9b06      	ldr	r3, [sp, #24]
 800958c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8009590:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009594:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8009598:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800959c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 80095a0:	601d      	str	r5, [r3, #0]
 80095a2:	615e      	str	r6, [r3, #20]
 80095a4:	e721      	b.n	80093ea <__kernel_rem_pio2+0x4be>
 80095a6:	bf00      	nop
 80095a8:	41700000 	.word	0x41700000
 80095ac:	3e700000 	.word	0x3e700000

080095b0 <__kernel_sin>:
 80095b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095b4:	b086      	sub	sp, #24
 80095b6:	e9cd 2300 	strd	r2, r3, [sp]
 80095ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095be:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80095c2:	4682      	mov	sl, r0
 80095c4:	460c      	mov	r4, r1
 80095c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80095c8:	da03      	bge.n	80095d2 <__kernel_sin+0x22>
 80095ca:	f7f7 fa83 	bl	8000ad4 <__aeabi_d2iz>
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d050      	beq.n	8009674 <__kernel_sin+0xc4>
 80095d2:	4652      	mov	r2, sl
 80095d4:	4623      	mov	r3, r4
 80095d6:	4650      	mov	r0, sl
 80095d8:	4621      	mov	r1, r4
 80095da:	f7f6 ffe1 	bl	80005a0 <__aeabi_dmul>
 80095de:	4606      	mov	r6, r0
 80095e0:	460f      	mov	r7, r1
 80095e2:	4602      	mov	r2, r0
 80095e4:	460b      	mov	r3, r1
 80095e6:	4650      	mov	r0, sl
 80095e8:	4621      	mov	r1, r4
 80095ea:	f7f6 ffd9 	bl	80005a0 <__aeabi_dmul>
 80095ee:	a33e      	add	r3, pc, #248	; (adr r3, 80096e8 <__kernel_sin+0x138>)
 80095f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f4:	4680      	mov	r8, r0
 80095f6:	4689      	mov	r9, r1
 80095f8:	4630      	mov	r0, r6
 80095fa:	4639      	mov	r1, r7
 80095fc:	f7f6 ffd0 	bl	80005a0 <__aeabi_dmul>
 8009600:	a33b      	add	r3, pc, #236	; (adr r3, 80096f0 <__kernel_sin+0x140>)
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f7f6 fe13 	bl	8000230 <__aeabi_dsub>
 800960a:	4632      	mov	r2, r6
 800960c:	463b      	mov	r3, r7
 800960e:	f7f6 ffc7 	bl	80005a0 <__aeabi_dmul>
 8009612:	a339      	add	r3, pc, #228	; (adr r3, 80096f8 <__kernel_sin+0x148>)
 8009614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009618:	f7f6 fe0c 	bl	8000234 <__adddf3>
 800961c:	4632      	mov	r2, r6
 800961e:	463b      	mov	r3, r7
 8009620:	f7f6 ffbe 	bl	80005a0 <__aeabi_dmul>
 8009624:	a336      	add	r3, pc, #216	; (adr r3, 8009700 <__kernel_sin+0x150>)
 8009626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962a:	f7f6 fe01 	bl	8000230 <__aeabi_dsub>
 800962e:	4632      	mov	r2, r6
 8009630:	463b      	mov	r3, r7
 8009632:	f7f6 ffb5 	bl	80005a0 <__aeabi_dmul>
 8009636:	a334      	add	r3, pc, #208	; (adr r3, 8009708 <__kernel_sin+0x158>)
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f7f6 fdfa 	bl	8000234 <__adddf3>
 8009640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009644:	b9dd      	cbnz	r5, 800967e <__kernel_sin+0xce>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	4630      	mov	r0, r6
 800964c:	4639      	mov	r1, r7
 800964e:	f7f6 ffa7 	bl	80005a0 <__aeabi_dmul>
 8009652:	a32f      	add	r3, pc, #188	; (adr r3, 8009710 <__kernel_sin+0x160>)
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	f7f6 fdea 	bl	8000230 <__aeabi_dsub>
 800965c:	4642      	mov	r2, r8
 800965e:	464b      	mov	r3, r9
 8009660:	f7f6 ff9e 	bl	80005a0 <__aeabi_dmul>
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	4650      	mov	r0, sl
 800966a:	4621      	mov	r1, r4
 800966c:	f7f6 fde2 	bl	8000234 <__adddf3>
 8009670:	4682      	mov	sl, r0
 8009672:	460c      	mov	r4, r1
 8009674:	4650      	mov	r0, sl
 8009676:	4621      	mov	r1, r4
 8009678:	b006      	add	sp, #24
 800967a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967e:	2200      	movs	r2, #0
 8009680:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009684:	4b24      	ldr	r3, [pc, #144]	; (8009718 <__kernel_sin+0x168>)
 8009686:	f7f6 ff8b 	bl	80005a0 <__aeabi_dmul>
 800968a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800968e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009692:	4640      	mov	r0, r8
 8009694:	4649      	mov	r1, r9
 8009696:	f7f6 ff83 	bl	80005a0 <__aeabi_dmul>
 800969a:	4602      	mov	r2, r0
 800969c:	460b      	mov	r3, r1
 800969e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096a2:	f7f6 fdc5 	bl	8000230 <__aeabi_dsub>
 80096a6:	4632      	mov	r2, r6
 80096a8:	463b      	mov	r3, r7
 80096aa:	f7f6 ff79 	bl	80005a0 <__aeabi_dmul>
 80096ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096b2:	f7f6 fdbd 	bl	8000230 <__aeabi_dsub>
 80096b6:	a316      	add	r3, pc, #88	; (adr r3, 8009710 <__kernel_sin+0x160>)
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	4606      	mov	r6, r0
 80096be:	460f      	mov	r7, r1
 80096c0:	4640      	mov	r0, r8
 80096c2:	4649      	mov	r1, r9
 80096c4:	f7f6 ff6c 	bl	80005a0 <__aeabi_dmul>
 80096c8:	4602      	mov	r2, r0
 80096ca:	460b      	mov	r3, r1
 80096cc:	4630      	mov	r0, r6
 80096ce:	4639      	mov	r1, r7
 80096d0:	f7f6 fdb0 	bl	8000234 <__adddf3>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4650      	mov	r0, sl
 80096da:	4621      	mov	r1, r4
 80096dc:	f7f6 fda8 	bl	8000230 <__aeabi_dsub>
 80096e0:	e7c6      	b.n	8009670 <__kernel_sin+0xc0>
 80096e2:	bf00      	nop
 80096e4:	f3af 8000 	nop.w
 80096e8:	5acfd57c 	.word	0x5acfd57c
 80096ec:	3de5d93a 	.word	0x3de5d93a
 80096f0:	8a2b9ceb 	.word	0x8a2b9ceb
 80096f4:	3e5ae5e6 	.word	0x3e5ae5e6
 80096f8:	57b1fe7d 	.word	0x57b1fe7d
 80096fc:	3ec71de3 	.word	0x3ec71de3
 8009700:	19c161d5 	.word	0x19c161d5
 8009704:	3f2a01a0 	.word	0x3f2a01a0
 8009708:	1110f8a6 	.word	0x1110f8a6
 800970c:	3f811111 	.word	0x3f811111
 8009710:	55555549 	.word	0x55555549
 8009714:	3fc55555 	.word	0x3fc55555
 8009718:	3fe00000 	.word	0x3fe00000
 800971c:	00000000 	.word	0x00000000

08009720 <floor>:
 8009720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009724:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8009728:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800972c:	2e13      	cmp	r6, #19
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	4607      	mov	r7, r0
 8009734:	460c      	mov	r4, r1
 8009736:	4605      	mov	r5, r0
 8009738:	dc33      	bgt.n	80097a2 <floor+0x82>
 800973a:	2e00      	cmp	r6, #0
 800973c:	da14      	bge.n	8009768 <floor+0x48>
 800973e:	a334      	add	r3, pc, #208	; (adr r3, 8009810 <floor+0xf0>)
 8009740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009744:	f7f6 fd76 	bl	8000234 <__adddf3>
 8009748:	2200      	movs	r2, #0
 800974a:	2300      	movs	r3, #0
 800974c:	f7f7 f9b8 	bl	8000ac0 <__aeabi_dcmpgt>
 8009750:	b138      	cbz	r0, 8009762 <floor+0x42>
 8009752:	2c00      	cmp	r4, #0
 8009754:	da58      	bge.n	8009808 <floor+0xe8>
 8009756:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800975a:	431d      	orrs	r5, r3
 800975c:	d001      	beq.n	8009762 <floor+0x42>
 800975e:	2500      	movs	r5, #0
 8009760:	4c2d      	ldr	r4, [pc, #180]	; (8009818 <floor+0xf8>)
 8009762:	4623      	mov	r3, r4
 8009764:	462f      	mov	r7, r5
 8009766:	e025      	b.n	80097b4 <floor+0x94>
 8009768:	4a2c      	ldr	r2, [pc, #176]	; (800981c <floor+0xfc>)
 800976a:	fa42 f806 	asr.w	r8, r2, r6
 800976e:	ea01 0208 	and.w	r2, r1, r8
 8009772:	4302      	orrs	r2, r0
 8009774:	d01e      	beq.n	80097b4 <floor+0x94>
 8009776:	a326      	add	r3, pc, #152	; (adr r3, 8009810 <floor+0xf0>)
 8009778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977c:	f7f6 fd5a 	bl	8000234 <__adddf3>
 8009780:	2200      	movs	r2, #0
 8009782:	2300      	movs	r3, #0
 8009784:	f7f7 f99c 	bl	8000ac0 <__aeabi_dcmpgt>
 8009788:	2800      	cmp	r0, #0
 800978a:	d0ea      	beq.n	8009762 <floor+0x42>
 800978c:	2c00      	cmp	r4, #0
 800978e:	bfbe      	ittt	lt
 8009790:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009794:	fa43 f606 	asrlt.w	r6, r3, r6
 8009798:	19a4      	addlt	r4, r4, r6
 800979a:	2500      	movs	r5, #0
 800979c:	ea24 0408 	bic.w	r4, r4, r8
 80097a0:	e7df      	b.n	8009762 <floor+0x42>
 80097a2:	2e33      	cmp	r6, #51	; 0x33
 80097a4:	dd0a      	ble.n	80097bc <floor+0x9c>
 80097a6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80097aa:	d103      	bne.n	80097b4 <floor+0x94>
 80097ac:	f7f6 fd42 	bl	8000234 <__adddf3>
 80097b0:	4607      	mov	r7, r0
 80097b2:	460b      	mov	r3, r1
 80097b4:	4638      	mov	r0, r7
 80097b6:	4619      	mov	r1, r3
 80097b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097bc:	f04f 32ff 	mov.w	r2, #4294967295
 80097c0:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80097c4:	fa22 f808 	lsr.w	r8, r2, r8
 80097c8:	ea18 0f00 	tst.w	r8, r0
 80097cc:	d0f2      	beq.n	80097b4 <floor+0x94>
 80097ce:	a310      	add	r3, pc, #64	; (adr r3, 8009810 <floor+0xf0>)
 80097d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d4:	f7f6 fd2e 	bl	8000234 <__adddf3>
 80097d8:	2200      	movs	r2, #0
 80097da:	2300      	movs	r3, #0
 80097dc:	f7f7 f970 	bl	8000ac0 <__aeabi_dcmpgt>
 80097e0:	2800      	cmp	r0, #0
 80097e2:	d0be      	beq.n	8009762 <floor+0x42>
 80097e4:	2c00      	cmp	r4, #0
 80097e6:	da02      	bge.n	80097ee <floor+0xce>
 80097e8:	2e14      	cmp	r6, #20
 80097ea:	d103      	bne.n	80097f4 <floor+0xd4>
 80097ec:	3401      	adds	r4, #1
 80097ee:	ea25 0508 	bic.w	r5, r5, r8
 80097f2:	e7b6      	b.n	8009762 <floor+0x42>
 80097f4:	2301      	movs	r3, #1
 80097f6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80097fa:	fa03 f606 	lsl.w	r6, r3, r6
 80097fe:	4435      	add	r5, r6
 8009800:	42bd      	cmp	r5, r7
 8009802:	bf38      	it	cc
 8009804:	18e4      	addcc	r4, r4, r3
 8009806:	e7f2      	b.n	80097ee <floor+0xce>
 8009808:	2500      	movs	r5, #0
 800980a:	462c      	mov	r4, r5
 800980c:	e7a9      	b.n	8009762 <floor+0x42>
 800980e:	bf00      	nop
 8009810:	8800759c 	.word	0x8800759c
 8009814:	7e37e43c 	.word	0x7e37e43c
 8009818:	bff00000 	.word	0xbff00000
 800981c:	000fffff 	.word	0x000fffff

08009820 <scalbn>:
 8009820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009822:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009826:	4604      	mov	r4, r0
 8009828:	460d      	mov	r5, r1
 800982a:	4617      	mov	r7, r2
 800982c:	460b      	mov	r3, r1
 800982e:	b996      	cbnz	r6, 8009856 <scalbn+0x36>
 8009830:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009834:	4303      	orrs	r3, r0
 8009836:	d039      	beq.n	80098ac <scalbn+0x8c>
 8009838:	4b33      	ldr	r3, [pc, #204]	; (8009908 <scalbn+0xe8>)
 800983a:	2200      	movs	r2, #0
 800983c:	f7f6 feb0 	bl	80005a0 <__aeabi_dmul>
 8009840:	4b32      	ldr	r3, [pc, #200]	; (800990c <scalbn+0xec>)
 8009842:	4604      	mov	r4, r0
 8009844:	429f      	cmp	r7, r3
 8009846:	460d      	mov	r5, r1
 8009848:	da0f      	bge.n	800986a <scalbn+0x4a>
 800984a:	a32b      	add	r3, pc, #172	; (adr r3, 80098f8 <scalbn+0xd8>)
 800984c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009850:	f7f6 fea6 	bl	80005a0 <__aeabi_dmul>
 8009854:	e006      	b.n	8009864 <scalbn+0x44>
 8009856:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800985a:	4296      	cmp	r6, r2
 800985c:	d10a      	bne.n	8009874 <scalbn+0x54>
 800985e:	4602      	mov	r2, r0
 8009860:	f7f6 fce8 	bl	8000234 <__adddf3>
 8009864:	4604      	mov	r4, r0
 8009866:	460d      	mov	r5, r1
 8009868:	e020      	b.n	80098ac <scalbn+0x8c>
 800986a:	460b      	mov	r3, r1
 800986c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009870:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009874:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009878:	19b9      	adds	r1, r7, r6
 800987a:	4291      	cmp	r1, r2
 800987c:	dd0e      	ble.n	800989c <scalbn+0x7c>
 800987e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009882:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009886:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800988a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800988e:	4820      	ldr	r0, [pc, #128]	; (8009910 <scalbn+0xf0>)
 8009890:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009894:	a31a      	add	r3, pc, #104	; (adr r3, 8009900 <scalbn+0xe0>)
 8009896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989a:	e7d9      	b.n	8009850 <scalbn+0x30>
 800989c:	2900      	cmp	r1, #0
 800989e:	dd08      	ble.n	80098b2 <scalbn+0x92>
 80098a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098a8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80098ac:	4620      	mov	r0, r4
 80098ae:	4629      	mov	r1, r5
 80098b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80098b2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 80098b6:	da12      	bge.n	80098de <scalbn+0xbe>
 80098b8:	f24c 3350 	movw	r3, #50000	; 0xc350
 80098bc:	429f      	cmp	r7, r3
 80098be:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 80098c2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 80098c6:	dcdc      	bgt.n	8009882 <scalbn+0x62>
 80098c8:	a30b      	add	r3, pc, #44	; (adr r3, 80098f8 <scalbn+0xd8>)
 80098ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ce:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80098d2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80098d6:	480f      	ldr	r0, [pc, #60]	; (8009914 <scalbn+0xf4>)
 80098d8:	f041 011f 	orr.w	r1, r1, #31
 80098dc:	e7b8      	b.n	8009850 <scalbn+0x30>
 80098de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80098e2:	3136      	adds	r1, #54	; 0x36
 80098e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80098e8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 80098ec:	4620      	mov	r0, r4
 80098ee:	4629      	mov	r1, r5
 80098f0:	2200      	movs	r2, #0
 80098f2:	4b09      	ldr	r3, [pc, #36]	; (8009918 <scalbn+0xf8>)
 80098f4:	e7ac      	b.n	8009850 <scalbn+0x30>
 80098f6:	bf00      	nop
 80098f8:	c2f8f359 	.word	0xc2f8f359
 80098fc:	01a56e1f 	.word	0x01a56e1f
 8009900:	8800759c 	.word	0x8800759c
 8009904:	7e37e43c 	.word	0x7e37e43c
 8009908:	43500000 	.word	0x43500000
 800990c:	ffff3cb0 	.word	0xffff3cb0
 8009910:	8800759c 	.word	0x8800759c
 8009914:	c2f8f359 	.word	0xc2f8f359
 8009918:	3c900000 	.word	0x3c900000

0800991c <_init>:
 800991c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800991e:	bf00      	nop
 8009920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009922:	bc08      	pop	{r3}
 8009924:	469e      	mov	lr, r3
 8009926:	4770      	bx	lr

08009928 <_fini>:
 8009928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992a:	bf00      	nop
 800992c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800992e:	bc08      	pop	{r3}
 8009930:	469e      	mov	lr, r3
 8009932:	4770      	bx	lr
