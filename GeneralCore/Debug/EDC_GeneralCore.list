
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6ec  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  0800c8d8  0800c8d8  0001c8d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d250  0800d250  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800d250  0800d250  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d250  0800d250  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d250  0800d250  0001d250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d254  0800d254  0001d254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800d258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007f40  2000007c  0800d2d4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007fbc  0800d2d4  00027fbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015262  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003690  00000000  00000000  00035307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  00038998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b8  00000000  00000000  00039d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca67  00000000  00000000  0003b030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001983a  00000000  00000000  00057a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e391  00000000  00000000  000712d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f662  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f0  00000000  00000000  0010f6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000007c 	.word	0x2000007c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800c8bc 	.word	0x0800c8bc

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000080 	.word	0x20000080
 8000224:	0800c8bc 	.word	0x0800c8bc

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fmul>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d06f      	beq.n	8000ed8 <__aeabi_fmul+0xf8>
 8000df8:	441a      	add	r2, r3
 8000dfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dfe:	0240      	lsls	r0, r0, #9
 8000e00:	bf18      	it	ne
 8000e02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e06:	d01e      	beq.n	8000e46 <__aeabi_fmul+0x66>
 8000e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e14:	fba0 3101 	umull	r3, r1, r0, r1
 8000e18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e20:	bf3e      	ittt	cc
 8000e22:	0049      	lslcc	r1, r1, #1
 8000e24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	ea40 0001 	orr.w	r0, r0, r1
 8000e2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e32:	2afd      	cmp	r2, #253	; 0xfd
 8000e34:	d81d      	bhi.n	8000e72 <__aeabi_fmul+0x92>
 8000e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3e:	bf08      	it	eq
 8000e40:	f020 0001 	biceq.w	r0, r0, #1
 8000e44:	4770      	bx	lr
 8000e46:	f090 0f00 	teq	r0, #0
 8000e4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e4e:	bf08      	it	eq
 8000e50:	0249      	lsleq	r1, r1, #9
 8000e52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e5a:	3a7f      	subs	r2, #127	; 0x7f
 8000e5c:	bfc2      	ittt	gt
 8000e5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e66:	4770      	bxgt	lr
 8000e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	3a01      	subs	r2, #1
 8000e72:	dc5d      	bgt.n	8000f30 <__aeabi_fmul+0x150>
 8000e74:	f112 0f19 	cmn.w	r2, #25
 8000e78:	bfdc      	itt	le
 8000e7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e7e:	4770      	bxle	lr
 8000e80:	f1c2 0200 	rsb	r2, r2, #0
 8000e84:	0041      	lsls	r1, r0, #1
 8000e86:	fa21 f102 	lsr.w	r1, r1, r2
 8000e8a:	f1c2 0220 	rsb	r2, r2, #32
 8000e8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e96:	f140 0000 	adc.w	r0, r0, #0
 8000e9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e9e:	bf08      	it	eq
 8000ea0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea4:	4770      	bx	lr
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xce>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fmul+0xe6>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e78f      	b.n	8000df8 <__aeabi_fmul+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	bf18      	it	ne
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d00a      	beq.n	8000efe <__aeabi_fmul+0x11e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1d8      	bne.n	8000ea6 <__aeabi_fmul+0xc6>
 8000ef4:	ea80 0001 	eor.w	r0, r0, r1
 8000ef8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000efc:	4770      	bx	lr
 8000efe:	f090 0f00 	teq	r0, #0
 8000f02:	bf17      	itett	ne
 8000f04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f08:	4608      	moveq	r0, r1
 8000f0a:	f091 0f00 	teqne	r1, #0
 8000f0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f12:	d014      	beq.n	8000f3e <__aeabi_fmul+0x15e>
 8000f14:	ea92 0f0c 	teq	r2, ip
 8000f18:	d101      	bne.n	8000f1e <__aeabi_fmul+0x13e>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d10f      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f1e:	ea93 0f0c 	teq	r3, ip
 8000f22:	d103      	bne.n	8000f2c <__aeabi_fmul+0x14c>
 8000f24:	024b      	lsls	r3, r1, #9
 8000f26:	bf18      	it	ne
 8000f28:	4608      	movne	r0, r1
 8000f2a:	d108      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f2c:	ea80 0001 	eor.w	r0, r0, r1
 8000f30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3c:	4770      	bx	lr
 8000f3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f46:	4770      	bx	lr

08000f48 <__aeabi_fdiv>:
 8000f48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f50:	bf1e      	ittt	ne
 8000f52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f56:	ea92 0f0c 	teqne	r2, ip
 8000f5a:	ea93 0f0c 	teqne	r3, ip
 8000f5e:	d069      	beq.n	8001034 <__aeabi_fdiv+0xec>
 8000f60:	eba2 0203 	sub.w	r2, r2, r3
 8000f64:	ea80 0c01 	eor.w	ip, r0, r1
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f6e:	d037      	beq.n	8000fe0 <__aeabi_fdiv+0x98>
 8000f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f80:	428b      	cmp	r3, r1
 8000f82:	bf38      	it	cc
 8000f84:	005b      	lslcc	r3, r3, #1
 8000f86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	bf24      	itt	cs
 8000f92:	1a5b      	subcs	r3, r3, r1
 8000f94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fa2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fa6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000faa:	bf24      	itt	cs
 8000fac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fbe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	bf18      	it	ne
 8000fc6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fca:	d1e0      	bne.n	8000f8e <__aeabi_fdiv+0x46>
 8000fcc:	2afd      	cmp	r2, #253	; 0xfd
 8000fce:	f63f af50 	bhi.w	8000e72 <__aeabi_fmul+0x92>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fd8:	bf08      	it	eq
 8000fda:	f020 0001 	biceq.w	r0, r0, #1
 8000fde:	4770      	bx	lr
 8000fe0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fe4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fe8:	327f      	adds	r2, #127	; 0x7f
 8000fea:	bfc2      	ittt	gt
 8000fec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ff4:	4770      	bxgt	lr
 8000ff6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	3a01      	subs	r2, #1
 8001000:	e737      	b.n	8000e72 <__aeabi_fmul+0x92>
 8001002:	f092 0f00 	teq	r2, #0
 8001006:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0040      	lsleq	r0, r0, #1
 800100e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001012:	3a01      	subeq	r2, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xc2>
 8001016:	ea40 000c 	orr.w	r0, r0, ip
 800101a:	f093 0f00 	teq	r3, #0
 800101e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001022:	bf02      	ittt	eq
 8001024:	0049      	lsleq	r1, r1, #1
 8001026:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800102a:	3b01      	subeq	r3, #1
 800102c:	d0f9      	beq.n	8001022 <__aeabi_fdiv+0xda>
 800102e:	ea41 010c 	orr.w	r1, r1, ip
 8001032:	e795      	b.n	8000f60 <__aeabi_fdiv+0x18>
 8001034:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001038:	ea92 0f0c 	teq	r2, ip
 800103c:	d108      	bne.n	8001050 <__aeabi_fdiv+0x108>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	f47f af7d 	bne.w	8000f3e <__aeabi_fmul+0x15e>
 8001044:	ea93 0f0c 	teq	r3, ip
 8001048:	f47f af70 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 800104c:	4608      	mov	r0, r1
 800104e:	e776      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001050:	ea93 0f0c 	teq	r3, ip
 8001054:	d104      	bne.n	8001060 <__aeabi_fdiv+0x118>
 8001056:	024b      	lsls	r3, r1, #9
 8001058:	f43f af4c 	beq.w	8000ef4 <__aeabi_fmul+0x114>
 800105c:	4608      	mov	r0, r1
 800105e:	e76e      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001060:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001064:	bf18      	it	ne
 8001066:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800106a:	d1ca      	bne.n	8001002 <__aeabi_fdiv+0xba>
 800106c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001070:	f47f af5c 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 8001074:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001078:	f47f af3c 	bne.w	8000ef4 <__aeabi_fmul+0x114>
 800107c:	e75f      	b.n	8000f3e <__aeabi_fmul+0x15e>
 800107e:	bf00      	nop

08001080 <__gesf2>:
 8001080:	f04f 3cff 	mov.w	ip, #4294967295
 8001084:	e006      	b.n	8001094 <__cmpsf2+0x4>
 8001086:	bf00      	nop

08001088 <__lesf2>:
 8001088:	f04f 0c01 	mov.w	ip, #1
 800108c:	e002      	b.n	8001094 <__cmpsf2+0x4>
 800108e:	bf00      	nop

08001090 <__cmpsf2>:
 8001090:	f04f 0c01 	mov.w	ip, #1
 8001094:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001098:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800109c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a4:	bf18      	it	ne
 80010a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010aa:	d011      	beq.n	80010d0 <__cmpsf2+0x40>
 80010ac:	b001      	add	sp, #4
 80010ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010b2:	bf18      	it	ne
 80010b4:	ea90 0f01 	teqne	r0, r1
 80010b8:	bf58      	it	pl
 80010ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80010be:	bf88      	it	hi
 80010c0:	17c8      	asrhi	r0, r1, #31
 80010c2:	bf38      	it	cc
 80010c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010c8:	bf18      	it	ne
 80010ca:	f040 0001 	orrne.w	r0, r0, #1
 80010ce:	4770      	bx	lr
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__cmpsf2+0x4c>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d105      	bne.n	80010e8 <__cmpsf2+0x58>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d1e4      	bne.n	80010ac <__cmpsf2+0x1c>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d0e1      	beq.n	80010ac <__cmpsf2+0x1c>
 80010e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_cfrcmple>:
 80010f0:	4684      	mov	ip, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4661      	mov	r1, ip
 80010f6:	e7ff      	b.n	80010f8 <__aeabi_cfcmpeq>

080010f8 <__aeabi_cfcmpeq>:
 80010f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010fa:	f7ff ffc9 	bl	8001090 <__cmpsf2>
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf48      	it	mi
 8001102:	f110 0f00 	cmnmi.w	r0, #0
 8001106:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001108 <__aeabi_fcmpeq>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff fff4 	bl	80010f8 <__aeabi_cfcmpeq>
 8001110:	bf0c      	ite	eq
 8001112:	2001      	moveq	r0, #1
 8001114:	2000      	movne	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmplt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffea 	bl	80010f8 <__aeabi_cfcmpeq>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmple>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffe0 	bl	80010f8 <__aeabi_cfcmpeq>
 8001138:	bf94      	ite	ls
 800113a:	2001      	movls	r0, #1
 800113c:	2000      	movhi	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpge>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffd2 	bl	80010f0 <__aeabi_cfrcmple>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmpgt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffc8 	bl	80010f0 <__aeabi_cfrcmple>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_f2iz>:
 800116c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001174:	d30f      	bcc.n	8001196 <__aeabi_f2iz+0x2a>
 8001176:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d90d      	bls.n	800119c <__aeabi_f2iz+0x30>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001188:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800118c:	fa23 f002 	lsr.w	r0, r3, r2
 8001190:	bf18      	it	ne
 8001192:	4240      	negne	r0, r0
 8001194:	4770      	bx	lr
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	4770      	bx	lr
 800119c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011a0:	d101      	bne.n	80011a6 <__aeabi_f2iz+0x3a>
 80011a2:	0242      	lsls	r2, r0, #9
 80011a4:	d105      	bne.n	80011b2 <__aeabi_f2iz+0x46>
 80011a6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011aa:	bf08      	it	eq
 80011ac:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011b0:	4770      	bx	lr
 80011b2:	f04f 0000 	mov.w	r0, #0
 80011b6:	4770      	bx	lr

080011b8 <__aeabi_f2uiz>:
 80011b8:	0042      	lsls	r2, r0, #1
 80011ba:	d20e      	bcs.n	80011da <__aeabi_f2uiz+0x22>
 80011bc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c0:	d30b      	bcc.n	80011da <__aeabi_f2uiz+0x22>
 80011c2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011c6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ca:	d409      	bmi.n	80011e0 <__aeabi_f2uiz+0x28>
 80011cc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d4:	fa23 f002 	lsr.w	r0, r3, r2
 80011d8:	4770      	bx	lr
 80011da:	f04f 0000 	mov.w	r0, #0
 80011de:	4770      	bx	lr
 80011e0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011e4:	d101      	bne.n	80011ea <__aeabi_f2uiz+0x32>
 80011e6:	0242      	lsls	r2, r0, #9
 80011e8:	d102      	bne.n	80011f0 <__aeabi_f2uiz+0x38>
 80011ea:	f04f 30ff 	mov.w	r0, #4294967295
 80011ee:	4770      	bx	lr
 80011f0:	f04f 0000 	mov.w	r0, #0
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop

080011f8 <Find_crash>:
 80011f8:	b490      	push	{r4, r7}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	460a      	mov	r2, r1
 8001202:	80fb      	strh	r3, [r7, #6]
 8001204:	4613      	mov	r3, r2
 8001206:	717b      	strb	r3, [r7, #5]
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	0a1b      	lsrs	r3, r3, #8
 800120c:	81bb      	strh	r3, [r7, #12]
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	817b      	strh	r3, [r7, #10]
 8001214:	797b      	ldrb	r3, [r7, #5]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <Find_crash+0x26>
 800121a:	2301      	movs	r3, #1
 800121c:	e109      	b.n	8001432 <Find_crash+0x23a>
 800121e:	797b      	ldrb	r3, [r7, #5]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d151      	bne.n	80012c8 <Find_crash+0xd0>
 8001224:	89bb      	ldrh	r3, [r7, #12]
 8001226:	2b25      	cmp	r3, #37	; 0x25
 8001228:	d910      	bls.n	800124c <Find_crash+0x54>
 800122a:	89bb      	ldrh	r3, [r7, #12]
 800122c:	2b28      	cmp	r3, #40	; 0x28
 800122e:	d80d      	bhi.n	800124c <Find_crash+0x54>
 8001230:	897b      	ldrh	r3, [r7, #10]
 8001232:	2b25      	cmp	r3, #37	; 0x25
 8001234:	d902      	bls.n	800123c <Find_crash+0x44>
 8001236:	897b      	ldrh	r3, [r7, #10]
 8001238:	2b6b      	cmp	r3, #107	; 0x6b
 800123a:	d905      	bls.n	8001248 <Find_crash+0x50>
 800123c:	897b      	ldrh	r3, [r7, #10]
 800123e:	2b92      	cmp	r3, #146	; 0x92
 8001240:	d904      	bls.n	800124c <Find_crash+0x54>
 8001242:	897b      	ldrh	r3, [r7, #10]
 8001244:	2bd8      	cmp	r3, #216	; 0xd8
 8001246:	d801      	bhi.n	800124c <Find_crash+0x54>
 8001248:	2300      	movs	r3, #0
 800124a:	e0f2      	b.n	8001432 <Find_crash+0x23a>
 800124c:	89bb      	ldrh	r3, [r7, #12]
 800124e:	2bd5      	cmp	r3, #213	; 0xd5
 8001250:	d910      	bls.n	8001274 <Find_crash+0x7c>
 8001252:	89bb      	ldrh	r3, [r7, #12]
 8001254:	2bd8      	cmp	r3, #216	; 0xd8
 8001256:	d80d      	bhi.n	8001274 <Find_crash+0x7c>
 8001258:	897b      	ldrh	r3, [r7, #10]
 800125a:	2b25      	cmp	r3, #37	; 0x25
 800125c:	d902      	bls.n	8001264 <Find_crash+0x6c>
 800125e:	897b      	ldrh	r3, [r7, #10]
 8001260:	2b6b      	cmp	r3, #107	; 0x6b
 8001262:	d905      	bls.n	8001270 <Find_crash+0x78>
 8001264:	897b      	ldrh	r3, [r7, #10]
 8001266:	2b92      	cmp	r3, #146	; 0x92
 8001268:	d904      	bls.n	8001274 <Find_crash+0x7c>
 800126a:	897b      	ldrh	r3, [r7, #10]
 800126c:	2bd8      	cmp	r3, #216	; 0xd8
 800126e:	d801      	bhi.n	8001274 <Find_crash+0x7c>
 8001270:	2300      	movs	r3, #0
 8001272:	e0de      	b.n	8001432 <Find_crash+0x23a>
 8001274:	897b      	ldrh	r3, [r7, #10]
 8001276:	2b25      	cmp	r3, #37	; 0x25
 8001278:	d910      	bls.n	800129c <Find_crash+0xa4>
 800127a:	897b      	ldrh	r3, [r7, #10]
 800127c:	2b28      	cmp	r3, #40	; 0x28
 800127e:	d80d      	bhi.n	800129c <Find_crash+0xa4>
 8001280:	89bb      	ldrh	r3, [r7, #12]
 8001282:	2b25      	cmp	r3, #37	; 0x25
 8001284:	d902      	bls.n	800128c <Find_crash+0x94>
 8001286:	89bb      	ldrh	r3, [r7, #12]
 8001288:	2b6b      	cmp	r3, #107	; 0x6b
 800128a:	d905      	bls.n	8001298 <Find_crash+0xa0>
 800128c:	89bb      	ldrh	r3, [r7, #12]
 800128e:	2b92      	cmp	r3, #146	; 0x92
 8001290:	d904      	bls.n	800129c <Find_crash+0xa4>
 8001292:	89bb      	ldrh	r3, [r7, #12]
 8001294:	2bd8      	cmp	r3, #216	; 0xd8
 8001296:	d801      	bhi.n	800129c <Find_crash+0xa4>
 8001298:	2300      	movs	r3, #0
 800129a:	e0ca      	b.n	8001432 <Find_crash+0x23a>
 800129c:	897b      	ldrh	r3, [r7, #10]
 800129e:	2bd5      	cmp	r3, #213	; 0xd5
 80012a0:	d910      	bls.n	80012c4 <Find_crash+0xcc>
 80012a2:	897b      	ldrh	r3, [r7, #10]
 80012a4:	2bd8      	cmp	r3, #216	; 0xd8
 80012a6:	d80d      	bhi.n	80012c4 <Find_crash+0xcc>
 80012a8:	89bb      	ldrh	r3, [r7, #12]
 80012aa:	2b25      	cmp	r3, #37	; 0x25
 80012ac:	d902      	bls.n	80012b4 <Find_crash+0xbc>
 80012ae:	89bb      	ldrh	r3, [r7, #12]
 80012b0:	2b6b      	cmp	r3, #107	; 0x6b
 80012b2:	d905      	bls.n	80012c0 <Find_crash+0xc8>
 80012b4:	89bb      	ldrh	r3, [r7, #12]
 80012b6:	2b92      	cmp	r3, #146	; 0x92
 80012b8:	d904      	bls.n	80012c4 <Find_crash+0xcc>
 80012ba:	89bb      	ldrh	r3, [r7, #12]
 80012bc:	2bd8      	cmp	r3, #216	; 0xd8
 80012be:	d801      	bhi.n	80012c4 <Find_crash+0xcc>
 80012c0:	2300      	movs	r3, #0
 80012c2:	e0b6      	b.n	8001432 <Find_crash+0x23a>
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0b4      	b.n	8001432 <Find_crash+0x23a>
 80012c8:	89bb      	ldrh	r3, [r7, #12]
 80012ca:	2b25      	cmp	r3, #37	; 0x25
 80012cc:	d910      	bls.n	80012f0 <Find_crash+0xf8>
 80012ce:	89bb      	ldrh	r3, [r7, #12]
 80012d0:	2b28      	cmp	r3, #40	; 0x28
 80012d2:	d80d      	bhi.n	80012f0 <Find_crash+0xf8>
 80012d4:	897b      	ldrh	r3, [r7, #10]
 80012d6:	2b25      	cmp	r3, #37	; 0x25
 80012d8:	d902      	bls.n	80012e0 <Find_crash+0xe8>
 80012da:	897b      	ldrh	r3, [r7, #10]
 80012dc:	2b6b      	cmp	r3, #107	; 0x6b
 80012de:	d905      	bls.n	80012ec <Find_crash+0xf4>
 80012e0:	897b      	ldrh	r3, [r7, #10]
 80012e2:	2b92      	cmp	r3, #146	; 0x92
 80012e4:	d904      	bls.n	80012f0 <Find_crash+0xf8>
 80012e6:	897b      	ldrh	r3, [r7, #10]
 80012e8:	2bd8      	cmp	r3, #216	; 0xd8
 80012ea:	d801      	bhi.n	80012f0 <Find_crash+0xf8>
 80012ec:	2300      	movs	r3, #0
 80012ee:	e0a0      	b.n	8001432 <Find_crash+0x23a>
 80012f0:	89bb      	ldrh	r3, [r7, #12]
 80012f2:	2bd5      	cmp	r3, #213	; 0xd5
 80012f4:	d910      	bls.n	8001318 <Find_crash+0x120>
 80012f6:	89bb      	ldrh	r3, [r7, #12]
 80012f8:	2bd8      	cmp	r3, #216	; 0xd8
 80012fa:	d80d      	bhi.n	8001318 <Find_crash+0x120>
 80012fc:	897b      	ldrh	r3, [r7, #10]
 80012fe:	2b25      	cmp	r3, #37	; 0x25
 8001300:	d902      	bls.n	8001308 <Find_crash+0x110>
 8001302:	897b      	ldrh	r3, [r7, #10]
 8001304:	2b6b      	cmp	r3, #107	; 0x6b
 8001306:	d905      	bls.n	8001314 <Find_crash+0x11c>
 8001308:	897b      	ldrh	r3, [r7, #10]
 800130a:	2b92      	cmp	r3, #146	; 0x92
 800130c:	d904      	bls.n	8001318 <Find_crash+0x120>
 800130e:	897b      	ldrh	r3, [r7, #10]
 8001310:	2bd8      	cmp	r3, #216	; 0xd8
 8001312:	d801      	bhi.n	8001318 <Find_crash+0x120>
 8001314:	2300      	movs	r3, #0
 8001316:	e08c      	b.n	8001432 <Find_crash+0x23a>
 8001318:	897b      	ldrh	r3, [r7, #10]
 800131a:	2b25      	cmp	r3, #37	; 0x25
 800131c:	d910      	bls.n	8001340 <Find_crash+0x148>
 800131e:	897b      	ldrh	r3, [r7, #10]
 8001320:	2b28      	cmp	r3, #40	; 0x28
 8001322:	d80d      	bhi.n	8001340 <Find_crash+0x148>
 8001324:	89bb      	ldrh	r3, [r7, #12]
 8001326:	2b25      	cmp	r3, #37	; 0x25
 8001328:	d902      	bls.n	8001330 <Find_crash+0x138>
 800132a:	89bb      	ldrh	r3, [r7, #12]
 800132c:	2b6b      	cmp	r3, #107	; 0x6b
 800132e:	d905      	bls.n	800133c <Find_crash+0x144>
 8001330:	89bb      	ldrh	r3, [r7, #12]
 8001332:	2b92      	cmp	r3, #146	; 0x92
 8001334:	d904      	bls.n	8001340 <Find_crash+0x148>
 8001336:	89bb      	ldrh	r3, [r7, #12]
 8001338:	2bd8      	cmp	r3, #216	; 0xd8
 800133a:	d801      	bhi.n	8001340 <Find_crash+0x148>
 800133c:	2300      	movs	r3, #0
 800133e:	e078      	b.n	8001432 <Find_crash+0x23a>
 8001340:	897b      	ldrh	r3, [r7, #10]
 8001342:	2bd5      	cmp	r3, #213	; 0xd5
 8001344:	d910      	bls.n	8001368 <Find_crash+0x170>
 8001346:	897b      	ldrh	r3, [r7, #10]
 8001348:	2bd8      	cmp	r3, #216	; 0xd8
 800134a:	d80d      	bhi.n	8001368 <Find_crash+0x170>
 800134c:	89bb      	ldrh	r3, [r7, #12]
 800134e:	2b25      	cmp	r3, #37	; 0x25
 8001350:	d902      	bls.n	8001358 <Find_crash+0x160>
 8001352:	89bb      	ldrh	r3, [r7, #12]
 8001354:	2b6b      	cmp	r3, #107	; 0x6b
 8001356:	d905      	bls.n	8001364 <Find_crash+0x16c>
 8001358:	89bb      	ldrh	r3, [r7, #12]
 800135a:	2b92      	cmp	r3, #146	; 0x92
 800135c:	d904      	bls.n	8001368 <Find_crash+0x170>
 800135e:	89bb      	ldrh	r3, [r7, #12]
 8001360:	2bd8      	cmp	r3, #216	; 0xd8
 8001362:	d801      	bhi.n	8001368 <Find_crash+0x170>
 8001364:	2300      	movs	r3, #0
 8001366:	e064      	b.n	8001432 <Find_crash+0x23a>
 8001368:	2300      	movs	r3, #0
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e026      	b.n	80013bc <Find_crash+0x1c4>
 800136e:	89bb      	ldrh	r3, [r7, #12]
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	4932      	ldr	r1, [pc, #200]	; (800143c <Find_crash+0x244>)
 8001374:	f931 2032 	ldrsh.w	r2, [r1, r2, lsl #3]
 8001378:	4293      	cmp	r3, r2
 800137a:	db1c      	blt.n	80013b6 <Find_crash+0x1be>
 800137c:	897a      	ldrh	r2, [r7, #10]
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	492e      	ldr	r1, [pc, #184]	; (800143c <Find_crash+0x244>)
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	440b      	add	r3, r1
 8001386:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800138a:	429a      	cmp	r2, r3
 800138c:	db13      	blt.n	80013b6 <Find_crash+0x1be>
 800138e:	89ba      	ldrh	r2, [r7, #12]
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	492a      	ldr	r1, [pc, #168]	; (800143c <Find_crash+0x244>)
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	440b      	add	r3, r1
 8001398:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800139c:	429a      	cmp	r2, r3
 800139e:	dc0a      	bgt.n	80013b6 <Find_crash+0x1be>
 80013a0:	897a      	ldrh	r2, [r7, #10]
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	4925      	ldr	r1, [pc, #148]	; (800143c <Find_crash+0x244>)
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	440b      	add	r3, r1
 80013aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	dc01      	bgt.n	80013b6 <Find_crash+0x1be>
 80013b2:	2300      	movs	r3, #0
 80013b4:	e03d      	b.n	8001432 <Find_crash+0x23a>
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3301      	adds	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b04      	cmp	r3, #4
 80013c0:	d9d5      	bls.n	800136e <Find_crash+0x176>
 80013c2:	2300      	movs	r3, #0
 80013c4:	73bb      	strb	r3, [r7, #14]
 80013c6:	e030      	b.n	800142a <Find_crash+0x232>
 80013c8:	89bb      	ldrh	r3, [r7, #12]
 80013ca:	7bba      	ldrb	r2, [r7, #14]
 80013cc:	491c      	ldr	r1, [pc, #112]	; (8001440 <Find_crash+0x248>)
 80013ce:	f931 2022 	ldrsh.w	r2, [r1, r2, lsl #2]
 80013d2:	1a9b      	subs	r3, r3, r2
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	89ba      	ldrh	r2, [r7, #12]
 80013d8:	7bb9      	ldrb	r1, [r7, #14]
 80013da:	4819      	ldr	r0, [pc, #100]	; (8001440 <Find_crash+0x248>)
 80013dc:	f930 1021 	ldrsh.w	r1, [r0, r1, lsl #2]
 80013e0:	1a52      	subs	r2, r2, r1
 80013e2:	b292      	uxth	r2, r2
 80013e4:	fb02 f303 	mul.w	r3, r2, r3
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	8979      	ldrh	r1, [r7, #10]
 80013ec:	7bbb      	ldrb	r3, [r7, #14]
 80013ee:	4814      	ldr	r0, [pc, #80]	; (8001440 <Find_crash+0x248>)
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4403      	add	r3, r0
 80013f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80013f8:	1acb      	subs	r3, r1, r3
 80013fa:	b299      	uxth	r1, r3
 80013fc:	8978      	ldrh	r0, [r7, #10]
 80013fe:	7bbb      	ldrb	r3, [r7, #14]
 8001400:	4c0f      	ldr	r4, [pc, #60]	; (8001440 <Find_crash+0x248>)
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4423      	add	r3, r4
 8001406:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800140a:	1ac3      	subs	r3, r0, r3
 800140c:	b29b      	uxth	r3, r3
 800140e:	fb01 f303 	mul.w	r3, r1, r3
 8001412:	b29b      	uxth	r3, r3
 8001414:	4413      	add	r3, r2
 8001416:	813b      	strh	r3, [r7, #8]
 8001418:	893b      	ldrh	r3, [r7, #8]
 800141a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800141e:	d801      	bhi.n	8001424 <Find_crash+0x22c>
 8001420:	2300      	movs	r3, #0
 8001422:	e006      	b.n	8001432 <Find_crash+0x23a>
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	3301      	adds	r3, #1
 8001428:	73bb      	strb	r3, [r7, #14]
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d9cb      	bls.n	80013c8 <Find_crash+0x1d0>
 8001430:	2301      	movs	r3, #1
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bc90      	pop	{r4, r7}
 800143a:	4770      	bx	lr
 800143c:	20000b7c 	.word	0x20000b7c
 8001440:	20000bb0 	.word	0x20000bb0

08001444 <cal_H>:
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	460a      	mov	r2, r1
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	4613      	mov	r3, r2
 8001452:	80bb      	strh	r3, [r7, #4]
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	0a1b      	lsrs	r3, r3, #8
 8001458:	81fb      	strh	r3, [r7, #14]
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	81bb      	strh	r3, [r7, #12]
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	817b      	strh	r3, [r7, #10]
 8001466:	88bb      	ldrh	r3, [r7, #4]
 8001468:	b2db      	uxtb	r3, r3
 800146a:	813b      	strh	r3, [r7, #8]
 800146c:	89fa      	ldrh	r2, [r7, #14]
 800146e:	897b      	ldrh	r3, [r7, #10]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	bfb8      	it	lt
 8001476:	425b      	neglt	r3, r3
 8001478:	b29a      	uxth	r2, r3
 800147a:	89b9      	ldrh	r1, [r7, #12]
 800147c:	893b      	ldrh	r3, [r7, #8]
 800147e:	1acb      	subs	r3, r1, r3
 8001480:	2b00      	cmp	r3, #0
 8001482:	bfb8      	it	lt
 8001484:	425b      	neglt	r3, r3
 8001486:	b29b      	uxth	r3, r3
 8001488:	4413      	add	r3, r2
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	bc80      	pop	{r7}
 8001494:	4770      	bx	lr

08001496 <dir>:
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	460a      	mov	r2, r1
 80014a0:	80fb      	strh	r3, [r7, #6]
 80014a2:	4613      	mov	r3, r2
 80014a4:	80bb      	strh	r3, [r7, #4]
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	81fb      	strh	r3, [r7, #14]
 80014ac:	88fb      	ldrh	r3, [r7, #6]
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	81bb      	strh	r3, [r7, #12]
 80014b2:	88bb      	ldrh	r3, [r7, #4]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	817b      	strh	r3, [r7, #10]
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	813b      	strh	r3, [r7, #8]
 80014be:	897b      	ldrh	r3, [r7, #10]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	8939      	ldrh	r1, [r7, #8]
 80014cc:	89bb      	ldrh	r3, [r7, #12]
 80014ce:	1acb      	subs	r3, r1, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	4413      	add	r3, r2
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	b25b      	sxtb	r3, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <findend>:
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	80fb      	strh	r3, [r7, #6]
 80014f0:	460b      	mov	r3, r1
 80014f2:	80bb      	strh	r3, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	70fb      	strb	r3, [r7, #3]
 80014f8:	88fb      	ldrh	r3, [r7, #6]
 80014fa:	0a1b      	lsrs	r3, r3, #8
 80014fc:	81fb      	strh	r3, [r7, #14]
 80014fe:	88fb      	ldrh	r3, [r7, #6]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	81bb      	strh	r3, [r7, #12]
 8001504:	88bb      	ldrh	r3, [r7, #4]
 8001506:	0a1b      	lsrs	r3, r3, #8
 8001508:	817b      	strh	r3, [r7, #10]
 800150a:	88bb      	ldrh	r3, [r7, #4]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	813b      	strh	r3, [r7, #8]
 8001510:	897a      	ldrh	r2, [r7, #10]
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800151a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800151e:	78fb      	ldrb	r3, [r7, #3]
 8001520:	429a      	cmp	r2, r3
 8001522:	da0b      	bge.n	800153c <findend+0x56>
 8001524:	893a      	ldrh	r2, [r7, #8]
 8001526:	89bb      	ldrh	r3, [r7, #12]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800152e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001532:	78fb      	ldrb	r3, [r7, #3]
 8001534:	429a      	cmp	r2, r3
 8001536:	da01      	bge.n	800153c <findend+0x56>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <findend+0x58>
 800153c:	2300      	movs	r3, #0
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr

08001548 <Find_around_node>:
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b099      	sub	sp, #100	; 0x64
 800154c:	af00      	add	r7, sp, #0
 800154e:	603a      	str	r2, [r7, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4603      	mov	r3, r0
 8001554:	80fb      	strh	r3, [r7, #6]
 8001556:	460b      	mov	r3, r1
 8001558:	717b      	strb	r3, [r7, #5]
 800155a:	4613      	mov	r3, r2
 800155c:	713b      	strb	r3, [r7, #4]
 800155e:	88fa      	ldrh	r2, [r7, #6]
 8001560:	49b3      	ldr	r1, [pc, #716]	; (8001830 <Find_around_node+0x2e8>)
 8001562:	4613      	mov	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	3304      	adds	r3, #4
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	0a1b      	lsrs	r3, r3, #8
 8001572:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8001576:	88fa      	ldrh	r2, [r7, #6]
 8001578:	49ad      	ldr	r1, [pc, #692]	; (8001830 <Find_around_node+0x2e8>)
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3304      	adds	r3, #4
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800158e:	2301      	movs	r3, #1
 8001590:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 8001594:	793b      	ldrb	r3, [r7, #4]
 8001596:	b29b      	uxth	r3, r3
 8001598:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800159c:	429a      	cmp	r2, r3
 800159e:	f0c0 80a3 	bcc.w	80016e8 <Find_around_node+0x1a0>
 80015a2:	793b      	ldrb	r3, [r7, #4]
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80015b0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80015b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80015b8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b29a      	uxth	r2, r3
 80015c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80015c4:	4413      	add	r3, r2
 80015c6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80015ca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80015ce:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fe0f 	bl	80011f8 <Find_crash>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8083 	beq.w	80016e8 <Find_around_node+0x1a0>
 80015e2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015e6:	4618      	mov	r0, r3
 80015e8:	f003 f962 	bl	80048b0 <findin_list>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d17a      	bne.n	80016e8 <Find_around_node+0x1a0>
 80015f2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80015f6:	4618      	mov	r0, r3
 80015f8:	f003 f92c 	bl	8004854 <findin_queue>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8001602:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001606:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	86fb      	strh	r3, [r7, #54]	; 0x36
 800160c:	88fa      	ldrh	r2, [r7, #6]
 800160e:	4988      	ldr	r1, [pc, #544]	; (8001830 <Find_around_node+0x2e8>)
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	f8d3 4006 	ldr.w	r4, [r3, #6]
 800161e:	4623      	mov	r3, r4
 8001620:	461c      	mov	r4, r3
 8001622:	793b      	ldrb	r3, [r7, #4]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff fb87 	bl	8000d38 <__aeabi_i2f>
 800162a:	4603      	mov	r3, r0
 800162c:	4619      	mov	r1, r3
 800162e:	4620      	mov	r0, r4
 8001630:	f7ff face 	bl	8000bd0 <__addsf3>
 8001634:	4603      	mov	r3, r0
 8001636:	f8c7 302e 	str.w	r3, [r7, #46]	; 0x2e
 800163a:	f8d7 402e 	ldr.w	r4, [r7, #46]	; 0x2e
 800163e:	4623      	mov	r3, r4
 8001640:	461c      	mov	r4, r3
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	881a      	ldrh	r2, [r3, #0]
 8001646:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fef9 	bl	8001444 <cal_H>
 8001652:	4603      	mov	r3, r0
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fb6f 	bl	8000d38 <__aeabi_i2f>
 800165a:	4603      	mov	r3, r0
 800165c:	4619      	mov	r1, r3
 800165e:	4620      	mov	r0, r4
 8001660:	f7ff fab6 	bl	8000bd0 <__addsf3>
 8001664:	4603      	mov	r3, r0
 8001666:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
 800166a:	88fa      	ldrh	r2, [r7, #6]
 800166c:	4970      	ldr	r1, [pc, #448]	; (8001830 <Find_around_node+0x2e8>)
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	3304      	adds	r3, #4
 800167a:	881b      	ldrh	r3, [r3, #0]
 800167c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff ff07 	bl	8001496 <dir>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001690:	4293      	cmp	r3, r2
 8001692:	d017      	beq.n	80016c4 <Find_around_node+0x17c>
 8001694:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d013      	beq.n	80016c4 <Find_around_node+0x17c>
 800169c:	f8d7 4032 	ldr.w	r4, [r7, #50]	; 0x32
 80016a0:	4623      	mov	r3, r4
 80016a2:	461c      	mov	r4, r3
 80016a4:	793a      	ldrb	r2, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fb42 	bl	8000d38 <__aeabi_i2f>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4619      	mov	r1, r3
 80016b8:	4620      	mov	r0, r4
 80016ba:	f7ff fa89 	bl	8000bd0 <__addsf3>
 80016be:	4603      	mov	r3, r0
 80016c0:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
 80016c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <Find_around_node+0x190>
 80016cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 ffe7 	bl	80046a4 <queue_append>
 80016d6:	e007      	b.n	80016e8 <Find_around_node+0x1a0>
 80016d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80016dc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 f90a 	bl	80048fc <editcost>
 80016e8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80016ec:	793b      	ldrb	r3, [r7, #4]
 80016ee:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80016f2:	429a      	cmp	r2, r3
 80016f4:	f300 80a6 	bgt.w	8001844 <Find_around_node+0x2fc>
 80016f8:	793b      	ldrb	r3, [r7, #4]
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001700:	4413      	add	r3, r2
 8001702:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001706:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800170a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800170e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001712:	021b      	lsls	r3, r3, #8
 8001714:	b29a      	uxth	r2, r3
 8001716:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800171a:	4413      	add	r3, r2
 800171c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001720:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001724:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff fd64 	bl	80011f8 <Find_crash>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	f000 8086 	beq.w	8001844 <Find_around_node+0x2fc>
 8001738:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800173c:	4618      	mov	r0, r3
 800173e:	f003 f8b7 	bl	80048b0 <findin_list>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d17d      	bne.n	8001844 <Find_around_node+0x2fc>
 8001748:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800174c:	4618      	mov	r0, r3
 800174e:	f003 f881 	bl	8004854 <findin_queue>
 8001752:	4603      	mov	r3, r0
 8001754:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8001758:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800175c:	843b      	strh	r3, [r7, #32]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001762:	88fa      	ldrh	r2, [r7, #6]
 8001764:	4932      	ldr	r1, [pc, #200]	; (8001830 <Find_around_node+0x2e8>)
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001774:	4623      	mov	r3, r4
 8001776:	461c      	mov	r4, r3
 8001778:	793b      	ldrb	r3, [r7, #4]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fadc 	bl	8000d38 <__aeabi_i2f>
 8001780:	4603      	mov	r3, r0
 8001782:	4619      	mov	r1, r3
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff fa23 	bl	8000bd0 <__addsf3>
 800178a:	4603      	mov	r3, r0
 800178c:	f8c7 3022 	str.w	r3, [r7, #34]	; 0x22
 8001790:	f8d7 4022 	ldr.w	r4, [r7, #34]	; 0x22
 8001794:	4623      	mov	r3, r4
 8001796:	461c      	mov	r4, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	881a      	ldrh	r2, [r3, #0]
 800179c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80017a0:	4611      	mov	r1, r2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff fe4e 	bl	8001444 <cal_H>
 80017a8:	4603      	mov	r3, r0
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff fac4 	bl	8000d38 <__aeabi_i2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4619      	mov	r1, r3
 80017b4:	4620      	mov	r0, r4
 80017b6:	f7ff fa0b 	bl	8000bd0 <__addsf3>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	491b      	ldr	r1, [pc, #108]	; (8001830 <Find_around_node+0x2e8>)
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	3304      	adds	r3, #4
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80017d6:	4611      	mov	r1, r2
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fe5c 	bl	8001496 <dir>
 80017de:	4603      	mov	r3, r0
 80017e0:	461a      	mov	r2, r3
 80017e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d017      	beq.n	800181a <Find_around_node+0x2d2>
 80017ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d013      	beq.n	800181a <Find_around_node+0x2d2>
 80017f2:	f8d7 4026 	ldr.w	r4, [r7, #38]	; 0x26
 80017f6:	4623      	mov	r3, r4
 80017f8:	461c      	mov	r4, r3
 80017fa:	793a      	ldrb	r2, [r7, #4]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fa97 	bl	8000d38 <__aeabi_i2f>
 800180a:	4603      	mov	r3, r0
 800180c:	4619      	mov	r1, r3
 800180e:	4620      	mov	r0, r4
 8001810:	f7ff f9de 	bl	8000bd0 <__addsf3>
 8001814:	4603      	mov	r3, r0
 8001816:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
 800181a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800181e:	2b00      	cmp	r3, #0
 8001820:	d108      	bne.n	8001834 <Find_around_node+0x2ec>
 8001822:	f107 0320 	add.w	r3, r7, #32
 8001826:	4618      	mov	r0, r3
 8001828:	f002 ff3c 	bl	80046a4 <queue_append>
 800182c:	e00a      	b.n	8001844 <Find_around_node+0x2fc>
 800182e:	bf00      	nop
 8001830:	20000c18 	.word	0x20000c18
 8001834:	f107 0220 	add.w	r2, r7, #32
 8001838:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f003 f85c 	bl	80048fc <editcost>
 8001844:	793b      	ldrb	r3, [r7, #4]
 8001846:	b29b      	uxth	r3, r3
 8001848:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800184c:	429a      	cmp	r2, r3
 800184e:	f0c0 80a3 	bcc.w	8001998 <Find_around_node+0x450>
 8001852:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001856:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800185a:	793b      	ldrb	r3, [r7, #4]
 800185c:	b29b      	uxth	r3, r3
 800185e:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001868:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800186c:	021b      	lsls	r3, r3, #8
 800186e:	b29a      	uxth	r2, r3
 8001870:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001874:	4413      	add	r3, r2
 8001876:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800187a:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 800187e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fcb7 	bl	80011f8 <Find_crash>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8083 	beq.w	8001998 <Find_around_node+0x450>
 8001892:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001896:	4618      	mov	r0, r3
 8001898:	f003 f80a 	bl	80048b0 <findin_list>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d17a      	bne.n	8001998 <Find_around_node+0x450>
 80018a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018a6:	4618      	mov	r0, r3
 80018a8:	f002 ffd4 	bl	8004854 <findin_queue>
 80018ac:	4603      	mov	r3, r0
 80018ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80018b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018b6:	82bb      	strh	r3, [r7, #20]
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	83fb      	strh	r3, [r7, #30]
 80018bc:	88fa      	ldrh	r2, [r7, #6]
 80018be:	4987      	ldr	r1, [pc, #540]	; (8001adc <Find_around_node+0x594>)
 80018c0:	4613      	mov	r3, r2
 80018c2:	005b      	lsls	r3, r3, #1
 80018c4:	4413      	add	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	f8d3 4006 	ldr.w	r4, [r3, #6]
 80018ce:	4623      	mov	r3, r4
 80018d0:	461c      	mov	r4, r3
 80018d2:	793b      	ldrb	r3, [r7, #4]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fa2f 	bl	8000d38 <__aeabi_i2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	4619      	mov	r1, r3
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff f976 	bl	8000bd0 <__addsf3>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f8c7 3016 	str.w	r3, [r7, #22]
 80018ea:	f8d7 4016 	ldr.w	r4, [r7, #22]
 80018ee:	4623      	mov	r3, r4
 80018f0:	461c      	mov	r4, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	881a      	ldrh	r2, [r3, #0]
 80018f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80018fa:	4611      	mov	r1, r2
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fda1 	bl	8001444 <cal_H>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fa17 	bl	8000d38 <__aeabi_i2f>
 800190a:	4603      	mov	r3, r0
 800190c:	4619      	mov	r1, r3
 800190e:	4620      	mov	r0, r4
 8001910:	f7ff f95e 	bl	8000bd0 <__addsf3>
 8001914:	4603      	mov	r3, r0
 8001916:	f8c7 301a 	str.w	r3, [r7, #26]
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	496f      	ldr	r1, [pc, #444]	; (8001adc <Find_around_node+0x594>)
 800191e:	4613      	mov	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	4413      	add	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	3304      	adds	r3, #4
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001930:	4611      	mov	r1, r2
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fdaf 	bl	8001496 <dir>
 8001938:	4603      	mov	r3, r0
 800193a:	461a      	mov	r2, r3
 800193c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001940:	4293      	cmp	r3, r2
 8001942:	d017      	beq.n	8001974 <Find_around_node+0x42c>
 8001944:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <Find_around_node+0x42c>
 800194c:	f8d7 401a 	ldr.w	r4, [r7, #26]
 8001950:	4623      	mov	r3, r4
 8001952:	461c      	mov	r4, r3
 8001954:	793a      	ldrb	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff f9ea 	bl	8000d38 <__aeabi_i2f>
 8001964:	4603      	mov	r3, r0
 8001966:	4619      	mov	r1, r3
 8001968:	4620      	mov	r0, r4
 800196a:	f7ff f931 	bl	8000bd0 <__addsf3>
 800196e:	4603      	mov	r3, r0
 8001970:	f8c7 301a 	str.w	r3, [r7, #26]
 8001974:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001978:	2b00      	cmp	r3, #0
 800197a:	d105      	bne.n	8001988 <Find_around_node+0x440>
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4618      	mov	r0, r3
 8001982:	f002 fe8f 	bl	80046a4 <queue_append>
 8001986:	e007      	b.n	8001998 <Find_around_node+0x450>
 8001988:	f107 0214 	add.w	r2, r7, #20
 800198c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f002 ffb2 	bl	80048fc <editcost>
 8001998:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800199c:	793b      	ldrb	r3, [r7, #4]
 800199e:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80019a2:	429a      	cmp	r2, r3
 80019a4:	f300 8096 	bgt.w	8001ad4 <Find_around_node+0x58c>
 80019a8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80019ac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80019b0:	793b      	ldrb	r3, [r7, #4]
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80019b8:	4413      	add	r3, r2
 80019ba:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80019bc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019c6:	4413      	add	r3, r2
 80019c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80019ca:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80019ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff fc10 	bl	80011f8 <Find_crash>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d07a      	beq.n	8001ad4 <Find_around_node+0x58c>
 80019de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 ff65 	bl	80048b0 <findin_list>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d173      	bne.n	8001ad4 <Find_around_node+0x58c>
 80019ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 ff30 	bl	8004854 <findin_queue>
 80019f4:	4603      	mov	r3, r0
 80019f6:	877b      	strh	r3, [r7, #58]	; 0x3a
 80019f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019fa:	813b      	strh	r3, [r7, #8]
 80019fc:	88fb      	ldrh	r3, [r7, #6]
 80019fe:	827b      	strh	r3, [r7, #18]
 8001a00:	88fa      	ldrh	r2, [r7, #6]
 8001a02:	4936      	ldr	r1, [pc, #216]	; (8001adc <Find_around_node+0x594>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001a12:	4623      	mov	r3, r4
 8001a14:	461c      	mov	r4, r3
 8001a16:	793b      	ldrb	r3, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff f98d 	bl	8000d38 <__aeabi_i2f>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4619      	mov	r1, r3
 8001a22:	4620      	mov	r0, r4
 8001a24:	f7ff f8d4 	bl	8000bd0 <__addsf3>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	f8c7 300a 	str.w	r3, [r7, #10]
 8001a2e:	f8d7 400a 	ldr.w	r4, [r7, #10]
 8001a32:	4623      	mov	r3, r4
 8001a34:	461c      	mov	r4, r3
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	881a      	ldrh	r2, [r3, #0]
 8001a3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fd00 	bl	8001444 <cal_H>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f976 	bl	8000d38 <__aeabi_i2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4620      	mov	r0, r4
 8001a52:	f7ff f8bd 	bl	8000bd0 <__addsf3>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f8c7 300e 	str.w	r3, [r7, #14]
 8001a5c:	88fa      	ldrh	r2, [r7, #6]
 8001a5e:	491f      	ldr	r1, [pc, #124]	; (8001adc <Find_around_node+0x594>)
 8001a60:	4613      	mov	r3, r2
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	4413      	add	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	440b      	add	r3, r1
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fd0f 	bl	8001496 <dir>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d017      	beq.n	8001ab4 <Find_around_node+0x56c>
 8001a84:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <Find_around_node+0x56c>
 8001a8c:	f8d7 400e 	ldr.w	r4, [r7, #14]
 8001a90:	4623      	mov	r3, r4
 8001a92:	461c      	mov	r4, r3
 8001a94:	793a      	ldrb	r2, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff f94a 	bl	8000d38 <__aeabi_i2f>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	f7ff f891 	bl	8000bd0 <__addsf3>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f8c7 300e 	str.w	r3, [r7, #14]
 8001ab4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d105      	bne.n	8001ac6 <Find_around_node+0x57e>
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fdf0 	bl	80046a4 <queue_append>
 8001ac4:	e006      	b.n	8001ad4 <Find_around_node+0x58c>
 8001ac6:	f107 0208 	add.w	r2, r7, #8
 8001aca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001acc:	4611      	mov	r1, r2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 ff14 	bl	80048fc <editcost>
 8001ad4:	bf00      	nop
 8001ad6:	3764      	adds	r7, #100	; 0x64
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	20000c18 	.word	0x20000c18

08001ae0 <A_Star_main>:
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b09e      	sub	sp, #120	; 0x78
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	4613      	mov	r3, r2
 8001aec:	71fb      	strb	r3, [r7, #7]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	b29b      	uxth	r3, r3
 8001af6:	021b      	lsls	r3, r3, #8
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	4413      	add	r3, r2
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8001b26:	f04f 0300 	mov.w	r3, #0
 8001b2a:	f8c7 305e 	str.w	r3, [r7, #94]	; 0x5e
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	f8c7 3062 	str.w	r3, [r7, #98]	; 0x62
 8001b36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b3a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8001b3e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b42:	4618      	mov	r0, r3
 8001b44:	f002 fdae 	bl	80046a4 <queue_append>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001b54:	2300      	movs	r3, #0
 8001b56:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001b5a:	f002 fe5b 	bl	8004814 <queue_top>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8001b64:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d101      	bne.n	8001b74 <A_Star_main+0x94>
 8001b70:	2300      	movs	r3, #0
 8001b72:	e148      	b.n	8001e06 <A_Star_main+0x326>
 8001b74:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b78:	49a5      	ldr	r1, [pc, #660]	; (8001e10 <A_Star_main+0x330>)
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	005b      	lsls	r3, r3, #1
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	330e      	adds	r3, #14
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d022      	beq.n	8001bd6 <A_Star_main+0xf6>
 8001b90:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001b94:	499e      	ldr	r1, [pc, #632]	; (8001e10 <A_Star_main+0x330>)
 8001b96:	4613      	mov	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	440b      	add	r3, r1
 8001ba0:	330e      	adds	r3, #14
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4a9a      	ldr	r2, [pc, #616]	; (8001e10 <A_Star_main+0x330>)
 8001ba8:	460b      	mov	r3, r1
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	440b      	add	r3, r1
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	8818      	ldrh	r0, [r3, #0]
 8001bb6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bba:	4995      	ldr	r1, [pc, #596]	; (8001e10 <A_Star_main+0x330>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3304      	adds	r3, #4
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	4619      	mov	r1, r3
 8001bcc:	f7ff fc63 	bl	8001496 <dir>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001bd6:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bda:	498d      	ldr	r1, [pc, #564]	; (8001e10 <A_Star_main+0x330>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	3304      	adds	r3, #4
 8001be8:	881b      	ldrh	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 fde4 	bl	80047b8 <list_append>
 8001bf0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001bf4:	4986      	ldr	r1, [pc, #536]	; (8001e10 <A_Star_main+0x330>)
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3304      	adds	r3, #4
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8001c08:	79fa      	ldrb	r2, [r7, #7]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fc6b 	bl	80014e6 <findend>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d022      	beq.n	8001c5c <A_Star_main+0x17c>
 8001c16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001c1a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8001c1e:	bf00      	nop
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8001c34:	230e      	movs	r3, #14
 8001c36:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001c3a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001c3e:	4613      	mov	r3, r2
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4a72      	ldr	r2, [pc, #456]	; (8001e10 <A_Star_main+0x330>)
 8001c48:	4413      	add	r3, r2
 8001c4a:	3304      	adds	r3, #4
 8001c4c:	673b      	str	r3, [r7, #112]	; 0x70
 8001c4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c50:	881a      	ldrh	r2, [r3, #0]
 8001c52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d027      	beq.n	8001caa <A_Star_main+0x1ca>
 8001c5a:	e009      	b.n	8001c70 <A_Star_main+0x190>
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001c62:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8001c66:	f8b7 006e 	ldrh.w	r0, [r7, #110]	; 0x6e
 8001c6a:	f7ff fc6d 	bl	8001548 <Find_around_node>
 8001c6e:	e774      	b.n	8001b5a <A_Star_main+0x7a>
 8001c70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	0a1b      	lsrs	r3, r3, #8
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c7c:	b212      	sxth	r2, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3378      	adds	r3, #120	; 0x78
 8001c82:	443b      	add	r3, r7
 8001c84:	f823 2c68 	strh.w	r2, [r3, #-104]
 8001c88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	b212      	sxth	r2, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	3378      	adds	r3, #120	; 0x78
 8001c9a:	443b      	add	r3, r7
 8001c9c:	f823 2c66 	strh.w	r2, [r3, #-102]
 8001ca0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001ca4:	3b01      	subs	r3, #1
 8001ca6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cac:	895b      	ldrh	r3, [r3, #10]
 8001cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d07a      	beq.n	8001dac <A_Star_main+0x2cc>
 8001cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb8:	895b      	ldrh	r3, [r3, #10]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4a54      	ldr	r2, [pc, #336]	; (8001e10 <A_Star_main+0x330>)
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	440b      	add	r3, r1
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	3304      	adds	r3, #4
 8001cca:	881a      	ldrh	r2, [r3, #0]
 8001ccc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	f7ff fbdf 	bl	8001496 <dir>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001cde:	e065      	b.n	8001dac <A_Star_main+0x2cc>
 8001ce0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce2:	895b      	ldrh	r3, [r3, #10]
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4a4a      	ldr	r2, [pc, #296]	; (8001e10 <A_Star_main+0x330>)
 8001ce8:	460b      	mov	r3, r1
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	440b      	add	r3, r1
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	3304      	adds	r3, #4
 8001cf4:	881a      	ldrh	r2, [r3, #0]
 8001cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f7ff fbca 	bl	8001496 <dir>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461a      	mov	r2, r3
 8001d06:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d043      	beq.n	8001d96 <A_Star_main+0x2b6>
 8001d0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	0a1b      	lsrs	r3, r3, #8
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d1a:	b212      	sxth	r2, r2
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	3378      	adds	r3, #120	; 0x78
 8001d20:	443b      	add	r3, r7
 8001d22:	f823 2c68 	strh.w	r2, [r3, #-104]
 8001d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	b212      	sxth	r2, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	3378      	adds	r3, #120	; 0x78
 8001d38:	443b      	add	r3, r7
 8001d3a:	f823 2c66 	strh.w	r2, [r3, #-102]
 8001d3e:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10e      	bne.n	8001d64 <A_Star_main+0x284>
 8001d46:	2300      	movs	r3, #0
 8001d48:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d4e:	895b      	ldrh	r3, [r3, #10]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4a2d      	ldr	r2, [pc, #180]	; (8001e10 <A_Star_main+0x330>)
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	673b      	str	r3, [r7, #112]	; 0x70
 8001d62:	e029      	b.n	8001db8 <A_Star_main+0x2d8>
 8001d64:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8001d6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d70:	895b      	ldrh	r3, [r3, #10]
 8001d72:	4619      	mov	r1, r3
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <A_Star_main+0x330>)
 8001d76:	460b      	mov	r3, r1
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	440b      	add	r3, r1
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	3304      	adds	r3, #4
 8001d82:	881a      	ldrh	r2, [r3, #0]
 8001d84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	f7ff fb83 	bl	8001496 <dir>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8001d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d98:	895b      	ldrh	r3, [r3, #10]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4a1a      	ldr	r2, [pc, #104]	; (8001e10 <A_Star_main+0x330>)
 8001da6:	4413      	add	r3, r2
 8001da8:	3304      	adds	r3, #4
 8001daa:	673b      	str	r3, [r7, #112]	; 0x70
 8001dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dae:	895b      	ldrh	r3, [r3, #10]
 8001db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d193      	bne.n	8001ce0 <A_Star_main+0x200>
 8001db8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001dc4:	b212      	sxth	r2, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	3378      	adds	r3, #120	; 0x78
 8001dca:	443b      	add	r3, r7
 8001dcc:	f823 2c68 	strh.w	r2, [r3, #-104]
 8001dd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	b21a      	sxth	r2, r3
 8001dd6:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	b212      	sxth	r2, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	3378      	adds	r3, #120	; 0x78
 8001de2:	443b      	add	r3, r7
 8001de4:	f823 2c66 	strh.w	r2, [r3, #-102]
 8001de8:	f002 fc4e 	bl	8004688 <Lane_init>
 8001dec:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001df0:	f107 0310 	add.w	r3, r7, #16
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f002 fdca 	bl	8004990 <Insert_inLane>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
 8001e02:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001e06:	4618      	mov	r0, r3
 8001e08:	3778      	adds	r7, #120	; 0x78
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000c18 	.word	0x20000c18
 8001e14:	00000000 	.word	0x00000000

08001e18 <chao_move_angle>:
 8001e18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
 8001e24:	4984      	ldr	r1, [pc, #528]	; (8002038 <chao_move_angle+0x220>)
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff f88e 	bl	8000f48 <__aeabi_fdiv>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb5e 	bl	80004f0 <__aeabi_f2d>
 8001e34:	a37e      	add	r3, pc, #504	; (adr r3, 8002030 <chao_move_angle+0x218>)
 8001e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3a:	f7fe fbb1 	bl	80005a0 <__aeabi_dmul>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	f7fe fe6d 	bl	8000b24 <__aeabi_d2f>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	6838      	ldr	r0, [r7, #0]
 8001e50:	f7fe fb4e 	bl	80004f0 <__aeabi_f2d>
 8001e54:	4604      	mov	r4, r0
 8001e56:	460d      	mov	r5, r1
 8001e58:	68f8      	ldr	r0, [r7, #12]
 8001e5a:	f7fe fb49 	bl	80004f0 <__aeabi_f2d>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	f009 fcc5 	bl	800b7f4 <cos>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4620      	mov	r0, r4
 8001e70:	4629      	mov	r1, r5
 8001e72:	f7fe fb95 	bl	80005a0 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4690      	mov	r8, r2
 8001e7c:	4699      	mov	r9, r3
 8001e7e:	6838      	ldr	r0, [r7, #0]
 8001e80:	f7fe fb36 	bl	80004f0 <__aeabi_f2d>
 8001e84:	4604      	mov	r4, r0
 8001e86:	460d      	mov	r5, r1
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7fe fb31 	bl	80004f0 <__aeabi_f2d>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4610      	mov	r0, r2
 8001e94:	4619      	mov	r1, r3
 8001e96:	f009 fcf7 	bl	800b888 <sin>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4620      	mov	r0, r4
 8001ea0:	4629      	mov	r1, r5
 8001ea2:	f7fe fb7d 	bl	80005a0 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4640      	mov	r0, r8
 8001eac:	4649      	mov	r1, r9
 8001eae:	f7fe f9c1 	bl	8000234 <__adddf3>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f7fe fe33 	bl	8000b24 <__aeabi_d2f>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	4a5e      	ldr	r2, [pc, #376]	; (800203c <chao_move_angle+0x224>)
 8001ec2:	6393      	str	r3, [r2, #56]	; 0x38
 8001ec4:	6838      	ldr	r0, [r7, #0]
 8001ec6:	f7fe fb13 	bl	80004f0 <__aeabi_f2d>
 8001eca:	4604      	mov	r4, r0
 8001ecc:	460d      	mov	r5, r1
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7fe fb0e 	bl	80004f0 <__aeabi_f2d>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f009 fc8a 	bl	800b7f4 <cos>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe fb5a 	bl	80005a0 <__aeabi_dmul>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4690      	mov	r8, r2
 8001ef2:	4699      	mov	r9, r3
 8001ef4:	6838      	ldr	r0, [r7, #0]
 8001ef6:	f7fe fafb 	bl	80004f0 <__aeabi_f2d>
 8001efa:	4604      	mov	r4, r0
 8001efc:	460d      	mov	r5, r1
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f7fe faf6 	bl	80004f0 <__aeabi_f2d>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4610      	mov	r0, r2
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f009 fcbc 	bl	800b888 <sin>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	f7fe fb42 	bl	80005a0 <__aeabi_dmul>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	4640      	mov	r0, r8
 8001f22:	4649      	mov	r1, r9
 8001f24:	f7fe f984 	bl	8000230 <__aeabi_dsub>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f7fe fdf8 	bl	8000b24 <__aeabi_d2f>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4a42      	ldr	r2, [pc, #264]	; (8002040 <chao_move_angle+0x228>)
 8001f38:	6393      	str	r3, [r2, #56]	; 0x38
 8001f3a:	6838      	ldr	r0, [r7, #0]
 8001f3c:	f7fe fad8 	bl	80004f0 <__aeabi_f2d>
 8001f40:	4604      	mov	r4, r0
 8001f42:	460d      	mov	r5, r1
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f7fe fad3 	bl	80004f0 <__aeabi_f2d>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	f009 fc4f 	bl	800b7f4 <cos>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	f7fe fb1f 	bl	80005a0 <__aeabi_dmul>
 8001f62:	4602      	mov	r2, r0
 8001f64:	460b      	mov	r3, r1
 8001f66:	4690      	mov	r8, r2
 8001f68:	4699      	mov	r9, r3
 8001f6a:	6838      	ldr	r0, [r7, #0]
 8001f6c:	f7fe fac0 	bl	80004f0 <__aeabi_f2d>
 8001f70:	4604      	mov	r4, r0
 8001f72:	460d      	mov	r5, r1
 8001f74:	68f8      	ldr	r0, [r7, #12]
 8001f76:	f7fe fabb 	bl	80004f0 <__aeabi_f2d>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	f009 fc81 	bl	800b888 <sin>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7fe fb07 	bl	80005a0 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4640      	mov	r0, r8
 8001f98:	4649      	mov	r1, r9
 8001f9a:	f7fe f949 	bl	8000230 <__aeabi_dsub>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fdbd 	bl	8000b24 <__aeabi_d2f>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4a25      	ldr	r2, [pc, #148]	; (8002044 <chao_move_angle+0x22c>)
 8001fae:	6393      	str	r3, [r2, #56]	; 0x38
 8001fb0:	6838      	ldr	r0, [r7, #0]
 8001fb2:	f7fe fa9d 	bl	80004f0 <__aeabi_f2d>
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	460d      	mov	r5, r1
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f7fe fa98 	bl	80004f0 <__aeabi_f2d>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f009 fc14 	bl	800b7f4 <cos>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	460b      	mov	r3, r1
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f7fe fae4 	bl	80005a0 <__aeabi_dmul>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4690      	mov	r8, r2
 8001fde:	4699      	mov	r9, r3
 8001fe0:	6838      	ldr	r0, [r7, #0]
 8001fe2:	f7fe fa85 	bl	80004f0 <__aeabi_f2d>
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	460d      	mov	r5, r1
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f7fe fa80 	bl	80004f0 <__aeabi_f2d>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	4610      	mov	r0, r2
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f009 fc46 	bl	800b888 <sin>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	460b      	mov	r3, r1
 8002000:	4620      	mov	r0, r4
 8002002:	4629      	mov	r1, r5
 8002004:	f7fe facc 	bl	80005a0 <__aeabi_dmul>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4640      	mov	r0, r8
 800200e:	4649      	mov	r1, r9
 8002010:	f7fe f910 	bl	8000234 <__adddf3>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	4610      	mov	r0, r2
 800201a:	4619      	mov	r1, r3
 800201c:	f7fe fd82 	bl	8000b24 <__aeabi_d2f>
 8002020:	4603      	mov	r3, r0
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <chao_move_angle+0x230>)
 8002024:	6393      	str	r3, [r2, #56]	; 0x38
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002030:	54442d18 	.word	0x54442d18
 8002034:	400921fb 	.word	0x400921fb
 8002038:	43340000 	.word	0x43340000
 800203c:	20000994 	.word	0x20000994
 8002040:	200009d0 	.word	0x200009d0
 8002044:	20000a0c 	.word	0x20000a0c
 8002048:	20000a48 	.word	0x20000a48

0800204c <mingyan_pathfind_avoidObstacle>:
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	2205      	movs	r2, #5
 8002058:	6839      	ldr	r1, [r7, #0]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fd40 	bl	8001ae0 <A_Star_main>
 8002060:	4603      	mov	r3, r0
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <huansic_jy62_init>:
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <huansic_jy62_init+0x12>
 800207a:	2301      	movs	r3, #1
 800207c:	e026      	b.n	80020cc <huansic_jy62_init+0x60>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <huansic_jy62_init+0x1e>
 8002086:	2301      	movs	r3, #1
 8002088:	e020      	b.n	80020cc <huansic_jy62_init+0x60>
 800208a:	2003      	movs	r0, #3
 800208c:	f004 f864 	bl	8006158 <HAL_Delay>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	230a      	movs	r3, #10
 8002096:	2203      	movs	r2, #3
 8002098:	490e      	ldr	r1, [pc, #56]	; (80020d4 <huansic_jy62_init+0x68>)
 800209a:	f007 f9d9 	bl	8009450 <HAL_UART_Transmit>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6818      	ldr	r0, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3334      	adds	r3, #52	; 0x34
 80020ae:	2221      	movs	r2, #33	; 0x21
 80020b0:	4619      	mov	r1, r3
 80020b2:	f007 fa8f 	bl	80095d4 <HAL_UART_Receive_DMA>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0204 	bic.w	r2, r2, #4
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	2300      	movs	r3, #0
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20000000 	.word	0x20000000

080020d8 <huansic_jy62_dma_isr>:
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <huansic_jy62_dma_isr+0x12>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e112      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
 80020ea:	2300      	movs	r3, #0
 80020ec:	73fb      	strb	r3, [r7, #15]
 80020ee:	2300      	movs	r3, #0
 80020f0:	73bb      	strb	r3, [r7, #14]
 80020f2:	e0ed      	b.n	80022d0 <huansic_jy62_dma_isr+0x1f8>
 80020f4:	7bbb      	ldrb	r3, [r7, #14]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020fe:	2b55      	cmp	r3, #85	; 0x55
 8002100:	d01c      	beq.n	800213c <huansic_jy62_dma_isr+0x64>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3334      	adds	r3, #52	; 0x34
 8002112:	2201      	movs	r2, #1
 8002114:	4619      	mov	r1, r3
 8002116:	f007 fa2d 	bl	8009574 <HAL_UART_Receive_IT>
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d00b      	beq.n	8002138 <huansic_jy62_dma_isr+0x60>
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	3b01      	subs	r3, #1
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fa69 	bl	8002600 <__huansic_jy62_decode_temp>
 800212e:	f004 f809 	bl	8006144 <HAL_GetTick>
 8002132:	4602      	mov	r2, r0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
 8002138:	2305      	movs	r3, #5
 800213a:	e0e9      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002146:	737b      	strb	r3, [r7, #13]
 8002148:	7bbb      	ldrb	r3, [r7, #14]
 800214a:	3301      	adds	r3, #1
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002154:	7b7b      	ldrb	r3, [r7, #13]
 8002156:	4413      	add	r3, r2
 8002158:	737b      	strb	r3, [r7, #13]
 800215a:	7bbb      	ldrb	r3, [r7, #14]
 800215c:	3302      	adds	r3, #2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002166:	7b7b      	ldrb	r3, [r7, #13]
 8002168:	4413      	add	r3, r2
 800216a:	737b      	strb	r3, [r7, #13]
 800216c:	7bbb      	ldrb	r3, [r7, #14]
 800216e:	3303      	adds	r3, #3
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	4413      	add	r3, r2
 8002174:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8002178:	7b7b      	ldrb	r3, [r7, #13]
 800217a:	4413      	add	r3, r2
 800217c:	737b      	strb	r3, [r7, #13]
 800217e:	7bbb      	ldrb	r3, [r7, #14]
 8002180:	3304      	adds	r3, #4
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4413      	add	r3, r2
 8002186:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800218a:	7b7b      	ldrb	r3, [r7, #13]
 800218c:	4413      	add	r3, r2
 800218e:	737b      	strb	r3, [r7, #13]
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	3305      	adds	r3, #5
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	4413      	add	r3, r2
 8002198:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800219c:	7b7b      	ldrb	r3, [r7, #13]
 800219e:	4413      	add	r3, r2
 80021a0:	737b      	strb	r3, [r7, #13]
 80021a2:	7bbb      	ldrb	r3, [r7, #14]
 80021a4:	3306      	adds	r3, #6
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021ae:	7b7b      	ldrb	r3, [r7, #13]
 80021b0:	4413      	add	r3, r2
 80021b2:	737b      	strb	r3, [r7, #13]
 80021b4:	7bbb      	ldrb	r3, [r7, #14]
 80021b6:	3307      	adds	r3, #7
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4413      	add	r3, r2
 80021bc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021c0:	7b7b      	ldrb	r3, [r7, #13]
 80021c2:	4413      	add	r3, r2
 80021c4:	737b      	strb	r3, [r7, #13]
 80021c6:	7bbb      	ldrb	r3, [r7, #14]
 80021c8:	3308      	adds	r3, #8
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021d2:	7b7b      	ldrb	r3, [r7, #13]
 80021d4:	4413      	add	r3, r2
 80021d6:	737b      	strb	r3, [r7, #13]
 80021d8:	7bbb      	ldrb	r3, [r7, #14]
 80021da:	3309      	adds	r3, #9
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80021e4:	7b7b      	ldrb	r3, [r7, #13]
 80021e6:	4413      	add	r3, r2
 80021e8:	737b      	strb	r3, [r7, #13]
 80021ea:	7bbb      	ldrb	r3, [r7, #14]
 80021ec:	330a      	adds	r3, #10
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021f6:	7b7a      	ldrb	r2, [r7, #13]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d01c      	beq.n	8002236 <huansic_jy62_dma_isr+0x15e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6818      	ldr	r0, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3334      	adds	r3, #52	; 0x34
 800220c:	2201      	movs	r2, #1
 800220e:	4619      	mov	r1, r3
 8002210:	f007 f9b0 	bl	8009574 <HAL_UART_Receive_IT>
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <huansic_jy62_dma_isr+0x15a>
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	3b01      	subs	r3, #1
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4619      	mov	r1, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f9ec 	bl	8002600 <__huansic_jy62_decode_temp>
 8002228:	f003 ff8c 	bl	8006144 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	631a      	str	r2, [r3, #48]	; 0x30
 8002232:	2304      	movs	r3, #4
 8002234:	e06c      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	3301      	adds	r3, #1
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002242:	2b51      	cmp	r3, #81	; 0x51
 8002244:	d105      	bne.n	8002252 <huansic_jy62_dma_isr+0x17a>
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	4619      	mov	r1, r3
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8c4 	bl	80023d8 <__huansic_jy62_decode_accel>
 8002250:	e038      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
 8002252:	7bbb      	ldrb	r3, [r7, #14]
 8002254:	3301      	adds	r3, #1
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800225e:	2b52      	cmp	r3, #82	; 0x52
 8002260:	d105      	bne.n	800226e <huansic_jy62_dma_isr+0x196>
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f920 	bl	80024ac <__huansic_jy62_decode_omega>
 800226c:	e02a      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
 800226e:	7bbb      	ldrb	r3, [r7, #14]
 8002270:	3301      	adds	r3, #1
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800227a:	2b53      	cmp	r3, #83	; 0x53
 800227c:	d105      	bne.n	800228a <huansic_jy62_dma_isr+0x1b2>
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f966 	bl	8002554 <__huansic_jy62_decode_theta>
 8002288:	e01c      	b.n	80022c4 <huansic_jy62_dma_isr+0x1ec>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3334      	adds	r3, #52	; 0x34
 800229a:	2201      	movs	r2, #1
 800229c:	4619      	mov	r1, r3
 800229e:	f007 f969 	bl	8009574 <HAL_UART_Receive_IT>
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00b      	beq.n	80022c0 <huansic_jy62_dma_isr+0x1e8>
 80022a8:	7bfb      	ldrb	r3, [r7, #15]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	4619      	mov	r1, r3
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f9a5 	bl	8002600 <__huansic_jy62_decode_temp>
 80022b6:	f003 ff45 	bl	8006144 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	631a      	str	r2, [r3, #48]	; 0x30
 80022c0:	2306      	movs	r3, #6
 80022c2:	e025      	b.n	8002310 <huansic_jy62_dma_isr+0x238>
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	3301      	adds	r3, #1
 80022c8:	73fb      	strb	r3, [r7, #15]
 80022ca:	7bbb      	ldrb	r3, [r7, #14]
 80022cc:	330b      	adds	r3, #11
 80022ce:	73bb      	strb	r3, [r7, #14]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	f67f af0e 	bls.w	80020f4 <huansic_jy62_dma_isr+0x1c>
 80022d8:	f003 ff34 	bl	8006144 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
 80022e2:	2102      	movs	r1, #2
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f98b 	bl	8002600 <__huansic_jy62_decode_temp>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	3334      	adds	r3, #52	; 0x34
 80022f2:	2221      	movs	r2, #33	; 0x21
 80022f4:	4619      	mov	r1, r3
 80022f6:	f007 f96d 	bl	80095d4 <HAL_UART_Receive_DMA>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f022 0204 	bic.w	r2, r2, #4
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	2300      	movs	r3, #0
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <huansic_jy62_isr>:
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <huansic_jy62_isr+0x12>
 8002326:	2301      	movs	r3, #1
 8002328:	e029      	b.n	800237e <huansic_jy62_isr+0x66>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002330:	2b55      	cmp	r3, #85	; 0x55
 8002332:	d00d      	beq.n	8002350 <huansic_jy62_isr+0x38>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2201      	movs	r2, #1
 8002338:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3334      	adds	r3, #52	; 0x34
 8002344:	2201      	movs	r2, #1
 8002346:	4619      	mov	r1, r3
 8002348:	f007 f914 	bl	8009574 <HAL_UART_Receive_IT>
 800234c:	2305      	movs	r3, #5
 800234e:	e016      	b.n	800237e <huansic_jy62_isr+0x66>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3335      	adds	r3, #53	; 0x35
 8002360:	2220      	movs	r2, #32
 8002362:	4619      	mov	r1, r3
 8002364:	f007 f936 	bl	80095d4 <HAL_UART_Receive_DMA>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0204 	bic.w	r2, r2, #4
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	2300      	movs	r3, #0
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <huansic_jy62_dma_error>:
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3334      	adds	r3, #52	; 0x34
 800239e:	2201      	movs	r2, #1
 80023a0:	4619      	mov	r1, r3
 80023a2:	f007 f8e7 	bl	8009574 <HAL_UART_Receive_IT>
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <huansic_jy62_error>:
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3334      	adds	r3, #52	; 0x34
 80023c6:	2201      	movs	r2, #1
 80023c8:	4619      	mov	r1, r3
 80023ca:	f007 f8d3 	bl	8009574 <HAL_UART_Receive_IT>
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <__huansic_jy62_decode_accel>:
 80023d8:	b590      	push	{r4, r7, lr}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	460b      	mov	r3, r1
 80023e2:	70fb      	strb	r3, [r7, #3]
 80023e4:	2300      	movs	r3, #0
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e050      	b.n	800248c <__huansic_jy62_decode_accel+0xb4>
 80023ea:	7bfb      	ldrb	r3, [r7, #15]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	1cd9      	adds	r1, r3, #3
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	440b      	add	r3, r1
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	4413      	add	r3, r2
 8002402:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002406:	81bb      	strh	r3, [r7, #12]
 8002408:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800240c:	021b      	lsls	r3, r3, #8
 800240e:	81bb      	strh	r3, [r7, #12]
 8002410:	7bfb      	ldrb	r3, [r7, #15]
 8002412:	3301      	adds	r3, #1
 8002414:	0059      	lsls	r1, r3, #1
 8002416:	78fa      	ldrb	r2, [r7, #3]
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	440b      	add	r3, r1
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800242c:	b21a      	sxth	r2, r3
 800242e:	89bb      	ldrh	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	81bb      	strh	r3, [r7, #12]
 8002434:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fc7d 	bl	8000d38 <__aeabi_i2f>
 800243e:	4603      	mov	r3, r0
 8002440:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fccb 	bl	8000de0 <__aeabi_fmul>
 800244a:	4603      	mov	r3, r0
 800244c:	4618      	mov	r0, r3
 800244e:	f7fe f84f 	bl	80004f0 <__aeabi_f2d>
 8002452:	a313      	add	r3, pc, #76	; (adr r3, 80024a0 <__huansic_jy62_decode_accel+0xc8>)
 8002454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002458:	f7fe f8a2 	bl	80005a0 <__aeabi_dmul>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <__huansic_jy62_decode_accel+0xd0>)
 800246a:	f7fe f9c3 	bl	80007f4 <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	7bfc      	ldrb	r4, [r7, #15]
 8002474:	4610      	mov	r0, r2
 8002476:	4619      	mov	r1, r3
 8002478:	f7fe fb54 	bl	8000b24 <__aeabi_d2f>
 800247c:	4601      	mov	r1, r0
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	1ca2      	adds	r2, r4, #2
 8002482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	3301      	adds	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d9ab      	bls.n	80023ea <__huansic_jy62_decode_accel+0x12>
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	f3af 8000 	nop.w
 80024a0:	9999999a 	.word	0x9999999a
 80024a4:	40239999 	.word	0x40239999
 80024a8:	40e00000 	.word	0x40e00000

080024ac <__huansic_jy62_decode_omega>:
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	70fb      	strb	r3, [r7, #3]
 80024b8:	2300      	movs	r3, #0
 80024ba:	73fb      	strb	r3, [r7, #15]
 80024bc:	e03f      	b.n	800253e <__huansic_jy62_decode_omega+0x92>
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	1cd9      	adds	r1, r3, #3
 80024c4:	78fa      	ldrb	r2, [r7, #3]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	4413      	add	r3, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	4413      	add	r3, r2
 80024d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80024da:	81bb      	strh	r3, [r7, #12]
 80024dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80024e0:	021b      	lsls	r3, r3, #8
 80024e2:	81bb      	strh	r3, [r7, #12]
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
 80024e6:	3301      	adds	r3, #1
 80024e8:	0059      	lsls	r1, r3, #1
 80024ea:	78fa      	ldrb	r2, [r7, #3]
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	005b      	lsls	r3, r3, #1
 80024f4:	4413      	add	r3, r2
 80024f6:	440b      	add	r3, r1
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002500:	b21a      	sxth	r2, r3
 8002502:	89bb      	ldrh	r3, [r7, #12]
 8002504:	4313      	orrs	r3, r2
 8002506:	81bb      	strh	r3, [r7, #12]
 8002508:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe fc13 	bl	8000d38 <__aeabi_i2f>
 8002512:	4603      	mov	r3, r0
 8002514:	490e      	ldr	r1, [pc, #56]	; (8002550 <__huansic_jy62_decode_omega+0xa4>)
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fc62 	bl	8000de0 <__aeabi_fmul>
 800251c:	4603      	mov	r3, r0
 800251e:	7bfc      	ldrb	r4, [r7, #15]
 8002520:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe fd0f 	bl	8000f48 <__aeabi_fdiv>
 800252a:	4603      	mov	r3, r0
 800252c:	4619      	mov	r1, r3
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	1d23      	adds	r3, r4, #4
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4413      	add	r3, r2
 8002536:	6059      	str	r1, [r3, #4]
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	3301      	adds	r3, #1
 800253c:	73fb      	strb	r3, [r7, #15]
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b02      	cmp	r3, #2
 8002542:	d9bc      	bls.n	80024be <__huansic_jy62_decode_omega+0x12>
 8002544:	bf00      	nop
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	bd90      	pop	{r4, r7, pc}
 800254e:	bf00      	nop
 8002550:	44fa0000 	.word	0x44fa0000

08002554 <__huansic_jy62_decode_theta>:
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
 8002560:	2300      	movs	r3, #0
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	e03f      	b.n	80025e6 <__huansic_jy62_decode_theta+0x92>
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	1cd9      	adds	r1, r3, #3
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4413      	add	r3, r2
 8002578:	440b      	add	r3, r1
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002582:	81bb      	strh	r3, [r7, #12]
 8002584:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	81bb      	strh	r3, [r7, #12]
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	3301      	adds	r3, #1
 8002590:	0059      	lsls	r1, r3, #1
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	440b      	add	r3, r1
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025a8:	b21a      	sxth	r2, r3
 80025aa:	89bb      	ldrh	r3, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	81bb      	strh	r3, [r7, #12]
 80025b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fbbf 	bl	8000d38 <__aeabi_i2f>
 80025ba:	4603      	mov	r3, r0
 80025bc:	490e      	ldr	r1, [pc, #56]	; (80025f8 <__huansic_jy62_decode_theta+0xa4>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fc0e 	bl	8000de0 <__aeabi_fmul>
 80025c4:	4603      	mov	r3, r0
 80025c6:	7bfc      	ldrb	r4, [r7, #15]
 80025c8:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fcbb 	bl	8000f48 <__aeabi_fdiv>
 80025d2:	4603      	mov	r3, r0
 80025d4:	4619      	mov	r1, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f104 0208 	add.w	r2, r4, #8
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	3301      	adds	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d9bc      	bls.n	8002566 <__huansic_jy62_decode_theta+0x12>
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	3714      	adds	r7, #20
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	bf00      	nop
 80025f8:	43340000 	.word	0x43340000
 80025fc:	00000000 	.word	0x00000000

08002600 <__huansic_jy62_decode_temp>:
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	70fb      	strb	r3, [r7, #3]
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	3308      	adds	r3, #8
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4413      	add	r3, r2
 800261e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002622:	81fb      	strh	r3, [r7, #14]
 8002624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002628:	021b      	lsls	r3, r3, #8
 800262a:	81fb      	strh	r3, [r7, #14]
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	4613      	mov	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4413      	add	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	3309      	adds	r3, #9
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4413      	add	r3, r2
 800263e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002642:	b21a      	sxth	r2, r3
 8002644:	89fb      	ldrh	r3, [r7, #14]
 8002646:	4313      	orrs	r3, r2
 8002648:	81fb      	strh	r3, [r7, #14]
 800264a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fb72 	bl	8000d38 <__aeabi_i2f>
 8002654:	4603      	mov	r3, r0
 8002656:	4910      	ldr	r1, [pc, #64]	; (8002698 <__huansic_jy62_decode_temp+0x98>)
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fc75 	bl	8000f48 <__aeabi_fdiv>
 800265e:	4603      	mov	r3, r0
 8002660:	4618      	mov	r0, r3
 8002662:	f7fd ff45 	bl	80004f0 <__aeabi_f2d>
 8002666:	a30a      	add	r3, pc, #40	; (adr r3, 8002690 <__huansic_jy62_decode_temp+0x90>)
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	f7fd fde2 	bl	8000234 <__adddf3>
 8002670:	4602      	mov	r2, r0
 8002672:	460b      	mov	r3, r1
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	f7fe fa54 	bl	8000b24 <__aeabi_d2f>
 800267c:	4602      	mov	r2, r0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	f3af 8000 	nop.w
 8002690:	0a3d70a4 	.word	0x0a3d70a4
 8002694:	404243d7 	.word	0x404243d7
 8002698:	43aa0000 	.word	0x43aa0000

0800269c <custom_order_free_fault>:
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bc80      	pop	{r7}
 80026ac:	4770      	bx	lr
	...

080026b0 <huansic_order_new>:
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	71fb      	strb	r3, [r7, #7]
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d101      	bne.n	80026c8 <huansic_order_new+0x18>
 80026c4:	2300      	movs	r3, #0
 80026c6:	e046      	b.n	8002756 <huansic_order_new+0xa6>
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]
 80026cc:	e017      	b.n	80026fe <huansic_order_new+0x4e>
 80026ce:	7bfa      	ldrb	r2, [r7, #15]
 80026d0:	4923      	ldr	r1, [pc, #140]	; (8002760 <huansic_order_new+0xb0>)
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	3310      	adds	r3, #16
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d107      	bne.n	80026f8 <huansic_order_new+0x48>
 80026e8:	7bfa      	ldrb	r2, [r7, #15]
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	4a1b      	ldr	r2, [pc, #108]	; (8002760 <huansic_order_new+0xb0>)
 80026f4:	4413      	add	r3, r2
 80026f6:	e02e      	b.n	8002756 <huansic_order_new+0xa6>
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	3301      	adds	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	2b3b      	cmp	r3, #59	; 0x3b
 8002702:	d9e4      	bls.n	80026ce <huansic_order_new+0x1e>
 8002704:	2300      	movs	r3, #0
 8002706:	73fb      	strb	r3, [r7, #15]
 8002708:	e021      	b.n	800274e <huansic_order_new+0x9e>
 800270a:	7bfa      	ldrb	r2, [r7, #15]
 800270c:	4914      	ldr	r1, [pc, #80]	; (8002760 <huansic_order_new+0xb0>)
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	440b      	add	r3, r1
 8002718:	3310      	adds	r3, #16
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002720:	d112      	bne.n	8002748 <huansic_order_new+0x98>
 8002722:	7bfa      	ldrb	r2, [r7, #15]
 8002724:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002728:	480d      	ldr	r0, [pc, #52]	; (8002760 <huansic_order_new+0xb0>)
 800272a:	4613      	mov	r3, r2
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4413      	add	r3, r2
 8002730:	00db      	lsls	r3, r3, #3
 8002732:	4403      	add	r3, r0
 8002734:	3310      	adds	r3, #16
 8002736:	6019      	str	r1, [r3, #0]
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4a07      	ldr	r2, [pc, #28]	; (8002760 <huansic_order_new+0xb0>)
 8002744:	4413      	add	r3, r2
 8002746:	e006      	b.n	8002756 <huansic_order_new+0xa6>
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	3301      	adds	r3, #1
 800274c:	73fb      	strb	r3, [r7, #15]
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b3b      	cmp	r3, #59	; 0x3b
 8002752:	d9da      	bls.n	800270a <huansic_order_new+0x5a>
 8002754:	2300      	movs	r3, #0
 8002756:	4618      	mov	r0, r3
 8002758:	3714      	adds	r7, #20
 800275a:	46bd      	mov	sp, r7
 800275c:	bc80      	pop	{r7}
 800275e:	4770      	bx	lr
 8002760:	20000098 	.word	0x20000098

08002764 <huansic_order_delete>:
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d103      	bne.n	800277e <huansic_order_delete+0x1a>
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff90 	bl	800269c <custom_order_free_fault>
 800277c:	e003      	b.n	8002786 <huansic_order_delete+0x22>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f04f 32ff 	mov.w	r2, #4294967295
 8002784:	611a      	str	r2, [r3, #16]
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <huansic_motor_init>:
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d105      	bne.n	80027ac <huansic_motor_init+0x1c>
 80027a0:	4b55      	ldr	r3, [pc, #340]	; (80028f8 <huansic_motor_init+0x168>)
 80027a2:	4a56      	ldr	r2, [pc, #344]	; (80028fc <huansic_motor_init+0x16c>)
 80027a4:	210c      	movs	r1, #12
 80027a6:	4856      	ldr	r0, [pc, #344]	; (8002900 <huansic_motor_init+0x170>)
 80027a8:	f007 fc96 	bl	800a0d8 <__assert_func>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d105      	bne.n	80027c0 <huansic_motor_init+0x30>
 80027b4:	4b53      	ldr	r3, [pc, #332]	; (8002904 <huansic_motor_init+0x174>)
 80027b6:	4a51      	ldr	r2, [pc, #324]	; (80028fc <huansic_motor_init+0x16c>)
 80027b8:	210d      	movs	r1, #13
 80027ba:	4851      	ldr	r0, [pc, #324]	; (8002900 <huansic_motor_init+0x170>)
 80027bc:	f007 fc8c 	bl	800a0d8 <__assert_func>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	f04f 0100 	mov.w	r1, #0
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7fe fc9d 	bl	8001108 <__aeabi_fcmpeq>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <huansic_motor_init+0x50>
 80027d4:	4b4c      	ldr	r3, [pc, #304]	; (8002908 <huansic_motor_init+0x178>)
 80027d6:	4a49      	ldr	r2, [pc, #292]	; (80028fc <huansic_motor_init+0x16c>)
 80027d8:	210e      	movs	r1, #14
 80027da:	4849      	ldr	r0, [pc, #292]	; (8002900 <huansic_motor_init+0x170>)
 80027dc:	f007 fc7c 	bl	800a0d8 <__assert_func>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	84da      	strh	r2, [r3, #38]	; 0x26
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	631a      	str	r2, [r3, #48]	; 0x30
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f04f 0200 	mov.w	r2, #0
 8002804:	635a      	str	r2, [r3, #52]	; 0x34
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f04f 0200 	mov.w	r2, #0
 800280c:	639a      	str	r2, [r3, #56]	; 0x38
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2200      	movs	r2, #0
 8002816:	625a      	str	r2, [r3, #36]	; 0x24
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d105      	bne.n	800282c <huansic_motor_init+0x9c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2200      	movs	r2, #0
 8002828:	635a      	str	r2, [r3, #52]	; 0x34
 800282a:	e01c      	b.n	8002866 <huansic_motor_init+0xd6>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d105      	bne.n	8002840 <huansic_motor_init+0xb0>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2200      	movs	r2, #0
 800283c:	639a      	str	r2, [r3, #56]	; 0x38
 800283e:	e012      	b.n	8002866 <huansic_motor_init+0xd6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b08      	cmp	r3, #8
 8002846:	d105      	bne.n	8002854 <huansic_motor_init+0xc4>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	63da      	str	r2, [r3, #60]	; 0x3c
 8002852:	e008      	b.n	8002866 <huansic_motor_init+0xd6>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b0c      	cmp	r3, #12
 800285a:	d104      	bne.n	8002866 <huansic_motor_init+0xd6>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2200      	movs	r2, #0
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d026      	beq.n	80028bc <huansic_motor_init+0x12c>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d105      	bne.n	8002882 <huansic_motor_init+0xf2>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2200      	movs	r2, #0
 800287e:	635a      	str	r2, [r3, #52]	; 0x34
 8002880:	e01c      	b.n	80028bc <huansic_motor_init+0x12c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b04      	cmp	r3, #4
 8002888:	d105      	bne.n	8002896 <huansic_motor_init+0x106>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2200      	movs	r2, #0
 8002892:	639a      	str	r2, [r3, #56]	; 0x38
 8002894:	e012      	b.n	80028bc <huansic_motor_init+0x12c>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	2b08      	cmp	r3, #8
 800289c:	d105      	bne.n	80028aa <huansic_motor_init+0x11a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2200      	movs	r2, #0
 80028a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80028a8:	e008      	b.n	80028bc <huansic_motor_init+0x12c>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	2b0c      	cmp	r3, #12
 80028b0:	d104      	bne.n	80028bc <huansic_motor_init+0x12c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2200      	movs	r2, #0
 80028ba:	641a      	str	r2, [r3, #64]	; 0x40
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	213c      	movs	r1, #60	; 0x3c
 80028c2:	4618      	mov	r0, r3
 80028c4:	f005 fe82 	bl	80085cc <HAL_TIM_Encoder_Start>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4619      	mov	r1, r3
 80028d2:	4610      	mov	r0, r2
 80028d4:	f005 fd1e 	bl	8008314 <HAL_TIM_PWM_Start>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <huansic_motor_init+0x160>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f005 fd12 	bl	8008314 <HAL_TIM_PWM_Start>
 80028f0:	bf00      	nop
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	0800c8d8 	.word	0x0800c8d8
 80028fc:	0800c948 	.word	0x0800c948
 8002900:	0800c8e8 	.word	0x0800c8e8
 8002904:	0800c908 	.word	0x0800c908
 8002908:	0800c91c 	.word	0x0800c91c

0800290c <huansic_motor_pid>:
 800290c:	b5b0      	push	{r4, r5, r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	82fb      	strh	r3, [r7, #22]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <huansic_motor_pid+0x24>
 8002928:	8afb      	ldrh	r3, [r7, #22]
 800292a:	425b      	negs	r3, r3
 800292c:	b29b      	uxth	r3, r3
 800292e:	82fb      	strh	r3, [r7, #22]
 8002930:	8afa      	ldrh	r2, [r7, #22]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	b29b      	uxth	r3, r3
 800293a:	82bb      	strh	r3, [r7, #20]
 800293c:	8afa      	ldrh	r2, [r7, #22]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	84da      	strh	r2, [r3, #38]	; 0x26
 8002942:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe f9f6 	bl	8000d38 <__aeabi_i2f>
 800294c:	4602      	mov	r2, r0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	4619      	mov	r1, r3
 8002954:	4610      	mov	r0, r2
 8002956:	f7fe faf7 	bl	8000f48 <__aeabi_fdiv>
 800295a:	4603      	mov	r3, r0
 800295c:	461a      	mov	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	62da      	str	r2, [r3, #44]	; 0x2c
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fdc2 	bl	80004f0 <__aeabi_f2d>
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	4b93      	ldr	r3, [pc, #588]	; (8002bc0 <huansic_motor_pid+0x2b4>)
 8002972:	f7fd fe15 	bl	80005a0 <__aeabi_dmul>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4614      	mov	r4, r2
 800297c:	461d      	mov	r5, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002982:	4618      	mov	r0, r3
 8002984:	f7fd fdb4 	bl	80004f0 <__aeabi_f2d>
 8002988:	4602      	mov	r2, r0
 800298a:	460b      	mov	r3, r1
 800298c:	4620      	mov	r0, r4
 800298e:	4629      	mov	r1, r5
 8002990:	f7fd fc50 	bl	8000234 <__adddf3>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4610      	mov	r0, r2
 800299a:	4619      	mov	r1, r3
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	4b88      	ldr	r3, [pc, #544]	; (8002bc4 <huansic_motor_pid+0x2b8>)
 80029a2:	f7fd ff27 	bl	80007f4 <__aeabi_ddiv>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	f7fe f8b9 	bl	8000b24 <__aeabi_d2f>
 80029b2:	4602      	mov	r2, r0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	631a      	str	r2, [r3, #48]	; 0x30
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	4619      	mov	r1, r3
 80029c6:	4610      	mov	r0, r2
 80029c8:	f7fe f900 	bl	8000bcc <__aeabi_fsub>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4619      	mov	r1, r3
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7fe f8fb 	bl	8000bcc <__aeabi_fsub>
 80029d6:	4603      	mov	r3, r0
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	4619      	mov	r1, r3
 80029e4:	4610      	mov	r0, r2
 80029e6:	f7fe f8f1 	bl	8000bcc <__aeabi_fsub>
 80029ea:	4603      	mov	r3, r0
 80029ec:	461a      	mov	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	629a      	str	r2, [r3, #40]	; 0x28
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	4619      	mov	r1, r3
 80029fc:	4610      	mov	r0, r2
 80029fe:	f7fe f8e7 	bl	8000bd0 <__addsf3>
 8002a02:	4603      	mov	r3, r0
 8002a04:	461a      	mov	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	635a      	str	r2, [r3, #52]	; 0x34
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	4619      	mov	r1, r3
 8002a14:	4610      	mov	r0, r2
 8002a16:	f7fe f9e3 	bl	8000de0 <__aeabi_fmul>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461c      	mov	r4, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a26:	4619      	mov	r1, r3
 8002a28:	4610      	mov	r0, r2
 8002a2a:	f7fe f9d9 	bl	8000de0 <__aeabi_fmul>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4619      	mov	r1, r3
 8002a32:	4620      	mov	r0, r4
 8002a34:	f7fe f8cc 	bl	8000bd0 <__addsf3>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461c      	mov	r4, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	6939      	ldr	r1, [r7, #16]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fe f9cc 	bl	8000de0 <__aeabi_fmul>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7fe f8bf 	bl	8000bd0 <__addsf3>
 8002a52:	4603      	mov	r3, r0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7fe fb7c 	bl	8001158 <__aeabi_fcmpgt>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <huansic_motor_pid+0x160>
 8002a66:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002a6a:	e009      	b.n	8002a80 <huansic_motor_pid+0x174>
 8002a6c:	4956      	ldr	r1, [pc, #344]	; (8002bc8 <huansic_motor_pid+0x2bc>)
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7fe fb54 	bl	800111c <__aeabi_fcmplt>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <huansic_motor_pid+0x172>
 8002a7a:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <huansic_motor_pid+0x2bc>)
 8002a7c:	e000      	b.n	8002a80 <huansic_motor_pid+0x174>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	f04f 0100 	mov.w	r1, #0
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f7fe fb66 	bl	8001158 <__aeabi_fcmpgt>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d019      	beq.n	8002ac6 <huansic_motor_pid+0x1ba>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fe f945 	bl	8000d30 <__aeabi_ui2f>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4620      	mov	r0, r4
 8002aac:	f7fe f998 	bl	8000de0 <__aeabi_fmul>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f008 ff2e 	bl	800b914 <roundf>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fb7c 	bl	80011b8 <__aeabi_f2uiz>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	e000      	b.n	8002ac8 <huansic_motor_pid+0x1bc>
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	817b      	strh	r3, [r7, #10]
 8002aca:	f04f 0100 	mov.w	r1, #0
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f7fe fb24 	bl	800111c <__aeabi_fcmplt>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d019      	beq.n	8002b0e <huansic_motor_pid+0x202>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fe f921 	bl	8000d30 <__aeabi_ui2f>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4619      	mov	r1, r3
 8002af2:	4620      	mov	r0, r4
 8002af4:	f7fe f974 	bl	8000de0 <__aeabi_fmul>
 8002af8:	4603      	mov	r3, r0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f008 ff0a 	bl	800b914 <roundf>
 8002b00:	4603      	mov	r3, r0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7fe fb58 	bl	80011b8 <__aeabi_f2uiz>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	e000      	b.n	8002b10 <huansic_motor_pid+0x204>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	813b      	strh	r3, [r7, #8]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <huansic_motor_pid+0x21a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	897a      	ldrh	r2, [r7, #10]
 8002b22:	635a      	str	r2, [r3, #52]	; 0x34
 8002b24:	e01c      	b.n	8002b60 <huansic_motor_pid+0x254>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d105      	bne.n	8002b3a <huansic_motor_pid+0x22e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	897a      	ldrh	r2, [r7, #10]
 8002b36:	639a      	str	r2, [r3, #56]	; 0x38
 8002b38:	e012      	b.n	8002b60 <huansic_motor_pid+0x254>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d105      	bne.n	8002b4e <huansic_motor_pid+0x242>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	897a      	ldrh	r2, [r7, #10]
 8002b4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b4c:	e008      	b.n	8002b60 <huansic_motor_pid+0x254>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	2b0c      	cmp	r3, #12
 8002b54:	d104      	bne.n	8002b60 <huansic_motor_pid+0x254>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	897a      	ldrh	r2, [r7, #10]
 8002b5e:	641a      	str	r2, [r3, #64]	; 0x40
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d026      	beq.n	8002bb6 <huansic_motor_pid+0x2aa>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d105      	bne.n	8002b7c <huansic_motor_pid+0x270>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	893a      	ldrh	r2, [r7, #8]
 8002b78:	635a      	str	r2, [r3, #52]	; 0x34
 8002b7a:	e01c      	b.n	8002bb6 <huansic_motor_pid+0x2aa>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d105      	bne.n	8002b90 <huansic_motor_pid+0x284>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	893a      	ldrh	r2, [r7, #8]
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38
 8002b8e:	e012      	b.n	8002bb6 <huansic_motor_pid+0x2aa>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d105      	bne.n	8002ba4 <huansic_motor_pid+0x298>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	893a      	ldrh	r2, [r7, #8]
 8002ba0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ba2:	e008      	b.n	8002bb6 <huansic_motor_pid+0x2aa>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	2b0c      	cmp	r3, #12
 8002baa:	d104      	bne.n	8002bb6 <huansic_motor_pid+0x2aa>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	893a      	ldrh	r2, [r7, #8]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
 8002bb6:	bf00      	nop
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40100000 	.word	0x40100000
 8002bc4:	40140000 	.word	0x40140000
 8002bc8:	bf800000 	.word	0xbf800000

08002bcc <custom_order_new_failed>:
// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms
extern uint8_t CoordinateUpdate;
extern uint8_t delivering_num;

__weak void custom_order_new_failed(uint8_t id) {
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	71fb      	strb	r3, [r7, #7]

}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
	hxb->pending_alignment = 0;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	hxb->nextPackageID = 0x00;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	731a      	strb	r2, [r3, #12]
	hxb->nextPackageLength = 6;		// header length
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2206      	movs	r2, #6
 8002bfa:	735a      	strb	r2, [r3, #13]
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6818      	ldr	r0, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f103 010e 	add.w	r1, r3, #14
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	7b5b      	ldrb	r3, [r3, #13]
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f006 fce1 	bl	80095d4 <HAL_UART_Receive_DMA>
	hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0204 	bic.w	r2, r2, #4
 8002c24:	601a      	str	r2, [r3, #0]
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <huansic_xb_decodeHeader>:

enum XB_STATUS huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b082      	sub	sp, #8
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
	// checksum
	if (hxb->buffer[5]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7cda      	ldrb	r2, [r3, #19]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	7b99      	ldrb	r1, [r3, #14]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7bdb      	ldrb	r3, [r3, #15]
 8002c42:	404b      	eors	r3, r1
 8002c44:	b2d9      	uxtb	r1, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7c1b      	ldrb	r3, [r3, #16]
 8002c4a:	404b      	eors	r3, r1
 8002c4c:	b2d9      	uxtb	r1, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7c5b      	ldrb	r3, [r3, #17]
 8002c52:	404b      	eors	r3, r1
 8002c54:	b2d9      	uxtb	r1, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7c9b      	ldrb	r3, [r3, #18]
 8002c5a:	404b      	eors	r3, r1
 8002c5c:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d001      	beq.n	8002c66 <huansic_xb_decodeHeader+0x38>
		return XB_SUM_ERROR;
 8002c62:	2304      	movs	r3, #4
 8002c64:	e01d      	b.n	8002ca2 <huansic_xb_decodeHeader+0x74>

	// get and check packet ID
	if (hxb->buffer[2] != 0x01 && hxb->buffer[2] != 0x05)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	7c1b      	ldrb	r3, [r3, #16]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d005      	beq.n	8002c7a <huansic_xb_decodeHeader+0x4c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	7c1b      	ldrb	r3, [r3, #16]
 8002c72:	2b05      	cmp	r3, #5
 8002c74:	d001      	beq.n	8002c7a <huansic_xb_decodeHeader+0x4c>
		return XB_ID_ERROR;
 8002c76:	2306      	movs	r3, #6
 8002c78:	e013      	b.n	8002ca2 <huansic_xb_decodeHeader+0x74>
	hxb->nextPackageID = hxb->buffer[2];
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7c1a      	ldrb	r2, [r3, #16]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	731a      	strb	r2, [r3, #12]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	7c9a      	ldrb	r2, [r3, #18]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	735a      	strb	r2, [r3, #13]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6818      	ldr	r0, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f103 010e 	add.w	r1, r3, #14
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	7b5b      	ldrb	r3, [r3, #13]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f006 fc9a 	bl	80095d4 <HAL_UART_Receive_DMA>
	return XB_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <huansic_xb_decodeBody>:

enum XB_STATUS huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	76fb      	strb	r3, [r7, #27]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	777b      	strb	r3, [r7, #29]
	uint32_t temp;
	if (hxb->nextPackageID == 0x01) {		// game information
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	7b1b      	ldrb	r3, [r3, #12]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	f040 816d 	bne.w	8002fa0 <huansic_xb_decodeBody+0x2f4>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8002cc6:	7f7b      	ldrb	r3, [r7, #29]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	777a      	strb	r2, [r7, #29]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4413      	add	r3, r2
 8002cd2:	7b9a      	ldrb	r2, [r3, #14]
 8002cd4:	4b8c      	ldr	r3, [pc, #560]	; (8002f08 <huansic_xb_decodeBody+0x25c>)
 8002cd6:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8002cd8:	7f7b      	ldrb	r3, [r7, #29]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8002cde:	2300      	movs	r3, #0
 8002ce0:	77fb      	strb	r3, [r7, #31]
 8002ce2:	e075      	b.n	8002dd0 <huansic_xb_decodeBody+0x124>
			index += 2;
 8002ce4:	7f7b      	ldrb	r3, [r7, #29]
 8002ce6:	3302      	adds	r3, #2
 8002ce8:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index++] << 8;
 8002cea:	7f7b      	ldrb	r3, [r7, #29]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	777a      	strb	r2, [r7, #29]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	7b9b      	ldrb	r3, [r3, #14]
 8002cf8:	021a      	lsls	r2, r3, #8
 8002cfa:	7ffb      	ldrb	r3, [r7, #31]
 8002cfc:	b211      	sxth	r1, r2
 8002cfe:	4a83      	ldr	r2, [pc, #524]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002d00:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index++];
 8002d04:	7f7b      	ldrb	r3, [r7, #29]
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	777a      	strb	r2, [r7, #29]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4413      	add	r3, r2
 8002d10:	7b9a      	ldrb	r2, [r3, #14]
 8002d12:	7ffb      	ldrb	r3, [r7, #31]
 8002d14:	b211      	sxth	r1, r2
 8002d16:	4a7d      	ldr	r2, [pc, #500]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002d18:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 8002d1c:	7f7b      	ldrb	r3, [r7, #29]
 8002d1e:	3302      	adds	r3, #2
 8002d20:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index++] << 8;
 8002d22:	7f7b      	ldrb	r3, [r7, #29]
 8002d24:	1c5a      	adds	r2, r3, #1
 8002d26:	777a      	strb	r2, [r7, #29]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	7b9b      	ldrb	r3, [r3, #14]
 8002d30:	021a      	lsls	r2, r3, #8
 8002d32:	7ffb      	ldrb	r3, [r7, #31]
 8002d34:	b211      	sxth	r1, r2
 8002d36:	4a75      	ldr	r2, [pc, #468]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	460a      	mov	r2, r1
 8002d3e:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 8002d40:	7f7b      	ldrb	r3, [r7, #29]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	7b9a      	ldrb	r2, [r3, #14]
 8002d48:	7ffb      	ldrb	r3, [r7, #31]
 8002d4a:	b211      	sxth	r1, r2
 8002d4c:	4a6f      	ldr	r2, [pc, #444]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4413      	add	r3, r2
 8002d52:	460a      	mov	r2, r1
 8002d54:	805a      	strh	r2, [r3, #2]
			index += 2;
 8002d56:	7f7b      	ldrb	r3, [r7, #29]
 8002d58:	3302      	adds	r3, #2
 8002d5a:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index++] << 8;
 8002d5c:	7f7b      	ldrb	r3, [r7, #29]
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	777a      	strb	r2, [r7, #29]
 8002d62:	461a      	mov	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4413      	add	r3, r2
 8002d68:	7b9b      	ldrb	r3, [r3, #14]
 8002d6a:	021a      	lsls	r2, r3, #8
 8002d6c:	7ffb      	ldrb	r3, [r7, #31]
 8002d6e:	b211      	sxth	r1, r2
 8002d70:	4a66      	ldr	r2, [pc, #408]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4413      	add	r3, r2
 8002d76:	460a      	mov	r2, r1
 8002d78:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8002d7a:	7f7b      	ldrb	r3, [r7, #29]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	4413      	add	r3, r2
 8002d80:	7b9a      	ldrb	r2, [r3, #14]
 8002d82:	7ffb      	ldrb	r3, [r7, #31]
 8002d84:	b211      	sxth	r1, r2
 8002d86:	4a61      	ldr	r2, [pc, #388]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	460a      	mov	r2, r1
 8002d8e:	809a      	strh	r2, [r3, #4]
			index += 2;
 8002d90:	7f7b      	ldrb	r3, [r7, #29]
 8002d92:	3302      	adds	r3, #2
 8002d94:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index++] << 8;
 8002d96:	7f7b      	ldrb	r3, [r7, #29]
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	777a      	strb	r2, [r7, #29]
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	7b9b      	ldrb	r3, [r3, #14]
 8002da4:	021a      	lsls	r2, r3, #8
 8002da6:	7ffb      	ldrb	r3, [r7, #31]
 8002da8:	b211      	sxth	r1, r2
 8002daa:	4a58      	ldr	r2, [pc, #352]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002dac:	00db      	lsls	r3, r3, #3
 8002dae:	4413      	add	r3, r2
 8002db0:	460a      	mov	r2, r1
 8002db2:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 8002db4:	7f7b      	ldrb	r3, [r7, #29]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	7b9a      	ldrb	r2, [r3, #14]
 8002dbc:	7ffb      	ldrb	r3, [r7, #31]
 8002dbe:	b211      	sxth	r1, r2
 8002dc0:	4a52      	ldr	r2, [pc, #328]	; (8002f0c <huansic_xb_decodeBody+0x260>)
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4413      	add	r3, r2
 8002dc6:	460a      	mov	r2, r1
 8002dc8:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 8002dca:	7ffb      	ldrb	r3, [r7, #31]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	77fb      	strb	r3, [r7, #31]
 8002dd0:	7ffb      	ldrb	r3, [r7, #31]
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d986      	bls.n	8002ce4 <huansic_xb_decodeBody+0x38>
		}

		/* total time of this round */
		index++;
 8002dd6:	7f7b      	ldrb	r3, [r7, #29]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	777b      	strb	r3, [r7, #29]
		gameStageTimeLimit = hxb->buffer[index++];
 8002ddc:	7f7b      	ldrb	r3, [r7, #29]
 8002dde:	1c5a      	adds	r2, r3, #1
 8002de0:	777a      	strb	r2, [r7, #29]
 8002de2:	461a      	mov	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4413      	add	r3, r2
 8002de8:	7b9b      	ldrb	r3, [r3, #14]
 8002dea:	461a      	mov	r2, r3
 8002dec:	4b48      	ldr	r3, [pc, #288]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002dee:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8002df0:	4b47      	ldr	r3, [pc, #284]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	021b      	lsls	r3, r3, #8
 8002df6:	4a46      	ldr	r2, [pc, #280]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002df8:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002dfa:	7f7b      	ldrb	r3, [r7, #29]
 8002dfc:	1c5a      	adds	r2, r3, #1
 8002dfe:	777a      	strb	r2, [r7, #29]
 8002e00:	461a      	mov	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4413      	add	r3, r2
 8002e06:	7b9b      	ldrb	r3, [r3, #14]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b41      	ldr	r3, [pc, #260]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	4a3f      	ldr	r2, [pc, #252]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e12:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002e14:	4b3e      	ldr	r3, [pc, #248]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	4a3d      	ldr	r2, [pc, #244]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e1c:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002e1e:	7f7b      	ldrb	r3, [r7, #29]
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	777a      	strb	r2, [r7, #29]
 8002e24:	461a      	mov	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4413      	add	r3, r2
 8002e2a:	7b9b      	ldrb	r3, [r3, #14]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b38      	ldr	r3, [pc, #224]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	4a36      	ldr	r2, [pc, #216]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e36:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8002e38:	4b35      	ldr	r3, [pc, #212]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	021b      	lsls	r3, r3, #8
 8002e3e:	4a34      	ldr	r2, [pc, #208]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e40:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002e42:	7f7b      	ldrb	r3, [r7, #29]
 8002e44:	1c5a      	adds	r2, r3, #1
 8002e46:	777a      	strb	r2, [r7, #29]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	7b9b      	ldrb	r3, [r3, #14]
 8002e50:	461a      	mov	r2, r3
 8002e52:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	4a2d      	ldr	r2, [pc, #180]	; (8002f10 <huansic_xb_decodeBody+0x264>)
 8002e5a:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 8002e5c:	7f7b      	ldrb	r3, [r7, #29]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	7b9b      	ldrb	r3, [r3, #14]
 8002e64:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002e66:	2300      	movs	r3, #0
 8002e68:	77fb      	strb	r3, [r7, #31]
 8002e6a:	e03e      	b.n	8002eea <huansic_xb_decodeBody+0x23e>
			index += 2;
 8002e6c:	7f7b      	ldrb	r3, [r7, #29]
 8002e6e:	3302      	adds	r3, #2
 8002e70:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8002e72:	7f7b      	ldrb	r3, [r7, #29]
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	777a      	strb	r2, [r7, #29]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	7b9b      	ldrb	r3, [r3, #14]
 8002e80:	021a      	lsls	r2, r3, #8
 8002e82:	7ffb      	ldrb	r3, [r7, #31]
 8002e84:	b211      	sxth	r1, r2
 8002e86:	4a23      	ldr	r2, [pc, #140]	; (8002f14 <huansic_xb_decodeBody+0x268>)
 8002e88:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x = hxb->buffer[index++];
 8002e8c:	7f7b      	ldrb	r3, [r7, #29]
 8002e8e:	1c5a      	adds	r2, r3, #1
 8002e90:	777a      	strb	r2, [r7, #29]
 8002e92:	461a      	mov	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4413      	add	r3, r2
 8002e98:	7b9a      	ldrb	r2, [r3, #14]
 8002e9a:	7ffb      	ldrb	r3, [r7, #31]
 8002e9c:	b211      	sxth	r1, r2
 8002e9e:	4a1d      	ldr	r2, [pc, #116]	; (8002f14 <huansic_xb_decodeBody+0x268>)
 8002ea0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002ea4:	7f7b      	ldrb	r3, [r7, #29]
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002eaa:	7f7b      	ldrb	r3, [r7, #29]
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	777a      	strb	r2, [r7, #29]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	7b9b      	ldrb	r3, [r3, #14]
 8002eb8:	021a      	lsls	r2, r3, #8
 8002eba:	7ffb      	ldrb	r3, [r7, #31]
 8002ebc:	b211      	sxth	r1, r2
 8002ebe:	4a15      	ldr	r2, [pc, #84]	; (8002f14 <huansic_xb_decodeBody+0x268>)
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	460a      	mov	r2, r1
 8002ec6:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y = hxb->buffer[index++];
 8002ec8:	7f7b      	ldrb	r3, [r7, #29]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	777a      	strb	r2, [r7, #29]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	7b9a      	ldrb	r2, [r3, #14]
 8002ed6:	7ffb      	ldrb	r3, [r7, #31]
 8002ed8:	b211      	sxth	r1, r2
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <huansic_xb_decodeBody+0x268>)
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	460a      	mov	r2, r1
 8002ee2:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8002ee4:	7ffb      	ldrb	r3, [r7, #31]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	77fb      	strb	r3, [r7, #31]
 8002eea:	7ffa      	ldrb	r2, [r7, #31]
 8002eec:	7efb      	ldrb	r3, [r7, #27]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d3bc      	bcc.n	8002e6c <huansic_xb_decodeBody+0x1c0>
		}

		/* opponent beacons */
		index++;
 8002ef2:	7f7b      	ldrb	r3, [r7, #29]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	777b      	strb	r3, [r7, #29]
		listLength = hxb->buffer[index];
 8002ef8:	7f7b      	ldrb	r3, [r7, #29]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	7b9b      	ldrb	r3, [r3, #14]
 8002f00:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002f02:	2300      	movs	r3, #0
 8002f04:	77fb      	strb	r3, [r7, #31]
 8002f06:	e046      	b.n	8002f96 <huansic_xb_decodeBody+0x2ea>
 8002f08:	20000b70 	.word	0x20000b70
 8002f0c:	20000b7c 	.word	0x20000b7c
 8002f10:	20000b74 	.word	0x20000b74
 8002f14:	20000ba4 	.word	0x20000ba4
			index += 2;
 8002f18:	7f7b      	ldrb	r3, [r7, #29]
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8002f1e:	7f7b      	ldrb	r3, [r7, #29]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	777a      	strb	r2, [r7, #29]
 8002f24:	461a      	mov	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	7b9b      	ldrb	r3, [r3, #14]
 8002f2c:	021a      	lsls	r2, r3, #8
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
 8002f30:	b211      	sxth	r1, r2
 8002f32:	4aa2      	ldr	r2, [pc, #648]	; (80031bc <huansic_xb_decodeBody+0x510>)
 8002f34:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x = hxb->buffer[index++];
 8002f38:	7f7b      	ldrb	r3, [r7, #29]
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	777a      	strb	r2, [r7, #29]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4413      	add	r3, r2
 8002f44:	7b9a      	ldrb	r2, [r3, #14]
 8002f46:	7ffb      	ldrb	r3, [r7, #31]
 8002f48:	b211      	sxth	r1, r2
 8002f4a:	4a9c      	ldr	r2, [pc, #624]	; (80031bc <huansic_xb_decodeBody+0x510>)
 8002f4c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002f50:	7f7b      	ldrb	r3, [r7, #29]
 8002f52:	3302      	adds	r3, #2
 8002f54:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002f56:	7f7b      	ldrb	r3, [r7, #29]
 8002f58:	1c5a      	adds	r2, r3, #1
 8002f5a:	777a      	strb	r2, [r7, #29]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4413      	add	r3, r2
 8002f62:	7b9b      	ldrb	r3, [r3, #14]
 8002f64:	021a      	lsls	r2, r3, #8
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	b211      	sxth	r1, r2
 8002f6a:	4a94      	ldr	r2, [pc, #592]	; (80031bc <huansic_xb_decodeBody+0x510>)
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4413      	add	r3, r2
 8002f70:	460a      	mov	r2, r1
 8002f72:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8002f74:	7f7b      	ldrb	r3, [r7, #29]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	777a      	strb	r2, [r7, #29]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	7b9a      	ldrb	r2, [r3, #14]
 8002f82:	7ffb      	ldrb	r3, [r7, #31]
 8002f84:	b211      	sxth	r1, r2
 8002f86:	4a8d      	ldr	r2, [pc, #564]	; (80031bc <huansic_xb_decodeBody+0x510>)
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4413      	add	r3, r2
 8002f8c:	460a      	mov	r2, r1
 8002f8e:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8002f90:	7ffb      	ldrb	r3, [r7, #31]
 8002f92:	3301      	adds	r3, #1
 8002f94:	77fb      	strb	r3, [r7, #31]
 8002f96:	7ffa      	ldrb	r2, [r7, #31]
 8002f98:	7efb      	ldrb	r3, [r7, #27]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d3bc      	bcc.n	8002f18 <huansic_xb_decodeBody+0x26c>
 8002f9e:	e32a      	b.n	80035f6 <huansic_xb_decodeBody+0x94a>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	7b1b      	ldrb	r3, [r3, #12]
 8002fa4:	2b05      	cmp	r3, #5
 8002fa6:	f040 8324 	bne.w	80035f2 <huansic_xb_decodeBody+0x946>
		/* game status */
		gameStatus = hxb->buffer[index++];
 8002faa:	7f7b      	ldrb	r3, [r7, #29]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	777a      	strb	r2, [r7, #29]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	7b9a      	ldrb	r2, [r3, #14]
 8002fb8:	4b81      	ldr	r3, [pc, #516]	; (80031c0 <huansic_xb_decodeBody+0x514>)
 8002fba:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 8002fbc:	7f7b      	ldrb	r3, [r7, #29]
 8002fbe:	1c5a      	adds	r2, r3, #1
 8002fc0:	777a      	strb	r2, [r7, #29]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	7b9b      	ldrb	r3, [r3, #14]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	4b7d      	ldr	r3, [pc, #500]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8002fce:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 8002fd0:	4b7c      	ldr	r3, [pc, #496]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	4a7b      	ldr	r2, [pc, #492]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8002fd8:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8002fda:	7f7b      	ldrb	r3, [r7, #29]
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	777a      	strb	r2, [r7, #29]
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	7b9b      	ldrb	r3, [r3, #14]
 8002fe8:	461a      	mov	r2, r3
 8002fea:	4b76      	ldr	r3, [pc, #472]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	4a74      	ldr	r2, [pc, #464]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8002ff2:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8002ff4:	4b73      	ldr	r3, [pc, #460]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	4a72      	ldr	r2, [pc, #456]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8002ffc:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8002ffe:	7f7b      	ldrb	r3, [r7, #29]
 8003000:	1c5a      	adds	r2, r3, #1
 8003002:	777a      	strb	r2, [r7, #29]
 8003004:	461a      	mov	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4413      	add	r3, r2
 800300a:	7b9b      	ldrb	r3, [r3, #14]
 800300c:	461a      	mov	r2, r3
 800300e:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4313      	orrs	r3, r2
 8003014:	4a6b      	ldr	r2, [pc, #428]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8003016:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8003018:	4b6a      	ldr	r3, [pc, #424]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	4a69      	ldr	r2, [pc, #420]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8003020:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8003022:	7f7b      	ldrb	r3, [r7, #29]
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	777a      	strb	r2, [r7, #29]
 8003028:	461a      	mov	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4413      	add	r3, r2
 800302e:	7b9b      	ldrb	r3, [r3, #14]
 8003030:	461a      	mov	r2, r3
 8003032:	4b64      	ldr	r3, [pc, #400]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4313      	orrs	r3, r2
 8003038:	4a62      	ldr	r2, [pc, #392]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 800303a:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 800303c:	4b62      	ldr	r3, [pc, #392]	; (80031c8 <huansic_xb_decodeBody+0x51c>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b60      	ldr	r3, [pc, #384]	; (80031c4 <huansic_xb_decodeBody+0x518>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	4a61      	ldr	r2, [pc, #388]	; (80031cc <huansic_xb_decodeBody+0x520>)
 8003048:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 800304a:	7f7b      	ldrb	r3, [r7, #29]
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	777a      	strb	r2, [r7, #29]
 8003050:	461a      	mov	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	7b9b      	ldrb	r3, [r3, #14]
 8003058:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	021b      	lsls	r3, r3, #8
 800305e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8003060:	7f7b      	ldrb	r3, [r7, #29]
 8003062:	1c5a      	adds	r2, r3, #1
 8003064:	777a      	strb	r2, [r7, #29]
 8003066:	461a      	mov	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4413      	add	r3, r2
 800306c:	7b9b      	ldrb	r3, [r3, #14]
 800306e:	461a      	mov	r2, r3
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800307c:	7f7b      	ldrb	r3, [r7, #29]
 800307e:	1c5a      	adds	r2, r3, #1
 8003080:	777a      	strb	r2, [r7, #29]
 8003082:	461a      	mov	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4413      	add	r3, r2
 8003088:	7b9b      	ldrb	r3, [r3, #14]
 800308a:	461a      	mov	r2, r3
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4313      	orrs	r3, r2
 8003090:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	021b      	lsls	r3, r3, #8
 8003096:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8003098:	7f7b      	ldrb	r3, [r7, #29]
 800309a:	1c5a      	adds	r2, r3, #1
 800309c:	777a      	strb	r2, [r7, #29]
 800309e:	461a      	mov	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	7b9b      	ldrb	r3, [r3, #14]
 80030a6:	461a      	mov	r2, r3
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 80030ae:	f107 0310 	add.w	r3, r7, #16
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a46      	ldr	r2, [pc, #280]	; (80031d0 <huansic_xb_decodeBody+0x524>)
 80030b6:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 2;
 80030b8:	7f7b      	ldrb	r3, [r7, #29]
 80030ba:	3302      	adds	r3, #2
 80030bc:	777b      	strb	r3, [r7, #29]
		myCoord.x = (uint16_t) hxb->buffer[index++] << 8;
 80030be:	7f7b      	ldrb	r3, [r7, #29]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	777a      	strb	r2, [r7, #29]
 80030c4:	461a      	mov	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	7b9b      	ldrb	r3, [r3, #14]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	b21a      	sxth	r2, r3
 80030d0:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <huansic_xb_decodeBody+0x528>)
 80030d2:	801a      	strh	r2, [r3, #0]
		myCoord.x = hxb->buffer[index++];
 80030d4:	7f7b      	ldrb	r3, [r7, #29]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	777a      	strb	r2, [r7, #29]
 80030da:	461a      	mov	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4413      	add	r3, r2
 80030e0:	7b9b      	ldrb	r3, [r3, #14]
 80030e2:	b21a      	sxth	r2, r3
 80030e4:	4b3b      	ldr	r3, [pc, #236]	; (80031d4 <huansic_xb_decodeBody+0x528>)
 80030e6:	801a      	strh	r2, [r3, #0]
		index += 2;
 80030e8:	7f7b      	ldrb	r3, [r7, #29]
 80030ea:	3302      	adds	r3, #2
 80030ec:	777b      	strb	r3, [r7, #29]
		myCoord.y = (uint16_t) hxb->buffer[index++] << 8;
 80030ee:	7f7b      	ldrb	r3, [r7, #29]
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	777a      	strb	r2, [r7, #29]
 80030f4:	461a      	mov	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	7b9b      	ldrb	r3, [r3, #14]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	b21a      	sxth	r2, r3
 8003100:	4b34      	ldr	r3, [pc, #208]	; (80031d4 <huansic_xb_decodeBody+0x528>)
 8003102:	805a      	strh	r2, [r3, #2]
		myCoord.y = hxb->buffer[index++];
 8003104:	7f7b      	ldrb	r3, [r7, #29]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	777a      	strb	r2, [r7, #29]
 800310a:	461a      	mov	r2, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4413      	add	r3, r2
 8003110:	7b9b      	ldrb	r3, [r3, #14]
 8003112:	b21a      	sxth	r2, r3
 8003114:	4b2f      	ldr	r3, [pc, #188]	; (80031d4 <huansic_xb_decodeBody+0x528>)
 8003116:	805a      	strh	r2, [r3, #2]
		CoordinateUpdate = 1;
 8003118:	4b2f      	ldr	r3, [pc, #188]	; (80031d8 <huansic_xb_decodeBody+0x52c>)
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]

		/* fetch battery */
		temp = hxb->buffer[index++];
 800311e:	7f7b      	ldrb	r3, [r7, #29]
 8003120:	1c5a      	adds	r2, r3, #1
 8003122:	777a      	strb	r2, [r7, #29]
 8003124:	461a      	mov	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	7b9b      	ldrb	r3, [r3, #14]
 800312c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	021b      	lsls	r3, r3, #8
 8003132:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8003134:	7f7b      	ldrb	r3, [r7, #29]
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	777a      	strb	r2, [r7, #29]
 800313a:	461a      	mov	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4413      	add	r3, r2
 8003140:	7b9b      	ldrb	r3, [r3, #14]
 8003142:	461a      	mov	r2, r3
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	021b      	lsls	r3, r3, #8
 800314e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8003150:	7f7b      	ldrb	r3, [r7, #29]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	777a      	strb	r2, [r7, #29]
 8003156:	461a      	mov	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	7b9b      	ldrb	r3, [r3, #14]
 800315e:	461a      	mov	r2, r3
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	021b      	lsls	r3, r3, #8
 800316a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800316c:	7f7b      	ldrb	r3, [r7, #29]
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	777a      	strb	r2, [r7, #29]
 8003172:	461a      	mov	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	7b9b      	ldrb	r3, [r3, #14]
 800317a:	461a      	mov	r2, r3
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 8003182:	f107 0310 	add.w	r3, r7, #16
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a14      	ldr	r2, [pc, #80]	; (80031dc <huansic_xb_decodeBody+0x530>)
 800318a:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 800318c:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <huansic_xb_decodeBody+0x534>)
 800318e:	f107 0308 	add.w	r3, r7, #8
 8003192:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003196:	6018      	str	r0, [r3, #0]
 8003198:	3304      	adds	r3, #4
 800319a:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 80031a0:	7f7b      	ldrb	r3, [r7, #29]
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	777a      	strb	r2, [r7, #29]
 80031a6:	461a      	mov	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4413      	add	r3, r2
 80031ac:	7b9b      	ldrb	r3, [r3, #14]
 80031ae:	76fb      	strb	r3, [r7, #27]
		delivering_num = listLength;
 80031b0:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <huansic_xb_decodeBody+0x538>)
 80031b2:	7efb      	ldrb	r3, [r7, #27]
 80031b4:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < listLength; i++) {
 80031b6:	2300      	movs	r3, #0
 80031b8:	77fb      	strb	r3, [r7, #31]
 80031ba:	e101      	b.n	80033c0 <huansic_xb_decodeBody+0x714>
 80031bc:	20000bb0 	.word	0x20000bb0
 80031c0:	20000b71 	.word	0x20000b71
 80031c4:	20000b78 	.word	0x20000b78
 80031c8:	20000b74 	.word	0x20000b74
 80031cc:	20000bfc 	.word	0x20000bfc
 80031d0:	20000bf4 	.word	0x20000bf4
 80031d4:	20000be0 	.word	0x20000be0
 80031d8:	20000bec 	.word	0x20000bec
 80031dc:	20000bf8 	.word	0x20000bf8
 80031e0:	0800c928 	.word	0x0800c928
 80031e4:	20000bdc 	.word	0x20000bdc
			temp = hxb->buffer[index + 24];
 80031e8:	7f7b      	ldrb	r3, [r7, #29]
 80031ea:	3318      	adds	r3, #24
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	7b9b      	ldrb	r3, [r3, #14]
 80031f2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 25];
 80031fa:	7f7b      	ldrb	r3, [r7, #29]
 80031fc:	3319      	adds	r3, #25
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	7b9b      	ldrb	r3, [r3, #14]
 8003204:	461a      	mov	r2, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 26];
 8003212:	7f7b      	ldrb	r3, [r7, #29]
 8003214:	331a      	adds	r3, #26
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	7b9b      	ldrb	r3, [r3, #14]
 800321c:	461a      	mov	r2, r3
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 27];
 800322a:	7f7b      	ldrb	r3, [r7, #29]
 800322c:	331b      	adds	r3, #27
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	7b9b      	ldrb	r3, [r3, #14]
 8003234:	461a      	mov	r2, r3
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	4313      	orrs	r3, r2
 800323a:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	b25b      	sxtb	r3, r3
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fa35 	bl	80026b0 <huansic_order_new>
 8003246:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d108      	bne.n	8003260 <huansic_xb_decodeBody+0x5b4>
				index += 28;
 800324e:	7f7b      	ldrb	r3, [r7, #29]
 8003250:	331c      	adds	r3, #28
 8003252:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	b2db      	uxtb	r3, r3
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fcb7 	bl	8002bcc <custom_order_new_failed>
				continue;
 800325e:	e0ac      	b.n	80033ba <huansic_xb_decodeBody+0x70e>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8003260:	7f7b      	ldrb	r3, [r7, #29]
 8003262:	3302      	adds	r3, #2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	4413      	add	r3, r2
 8003268:	7b9b      	ldrb	r3, [r3, #14]
 800326a:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 800326c:	b21a      	sxth	r2, r3
 800326e:	7f7b      	ldrb	r3, [r7, #29]
 8003270:	3303      	adds	r3, #3
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	440b      	add	r3, r1
 8003276:	7b9b      	ldrb	r3, [r3, #14]
 8003278:	b21b      	sxth	r3, r3
 800327a:	4313      	orrs	r3, r2
 800327c:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8003282:	7f7b      	ldrb	r3, [r7, #29]
 8003284:	3306      	adds	r3, #6
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	7b9b      	ldrb	r3, [r3, #14]
 800328c:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 800328e:	b21a      	sxth	r2, r3
 8003290:	7f7b      	ldrb	r3, [r7, #29]
 8003292:	3307      	adds	r3, #7
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	440b      	add	r3, r1
 8003298:	7b9b      	ldrb	r3, [r3, #14]
 800329a:	b21b      	sxth	r3, r3
 800329c:	4313      	orrs	r3, r2
 800329e:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80032a4:	7f7b      	ldrb	r3, [r7, #29]
 80032a6:	330a      	adds	r3, #10
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	4413      	add	r3, r2
 80032ac:	7b9b      	ldrb	r3, [r3, #14]
 80032ae:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 80032b0:	b21a      	sxth	r2, r3
 80032b2:	7f7b      	ldrb	r3, [r7, #29]
 80032b4:	330b      	adds	r3, #11
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	440b      	add	r3, r1
 80032ba:	7b9b      	ldrb	r3, [r3, #14]
 80032bc:	b21b      	sxth	r3, r3
 80032be:	4313      	orrs	r3, r2
 80032c0:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80032c6:	7f7b      	ldrb	r3, [r7, #29]
 80032c8:	330e      	adds	r3, #14
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	7b9b      	ldrb	r3, [r3, #14]
 80032d0:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 80032d2:	b21a      	sxth	r2, r3
 80032d4:	7f7b      	ldrb	r3, [r7, #29]
 80032d6:	330f      	adds	r3, #15
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	440b      	add	r3, r1
 80032dc:	7b9b      	ldrb	r3, [r3, #14]
 80032de:	b21b      	sxth	r3, r3
 80032e0:	4313      	orrs	r3, r2
 80032e2:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 80032e8:	7f7b      	ldrb	r3, [r7, #29]
 80032ea:	3310      	adds	r3, #16
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	4413      	add	r3, r2
 80032f0:	7b9b      	ldrb	r3, [r3, #14]
 80032f2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 80032fa:	7f7b      	ldrb	r3, [r7, #29]
 80032fc:	3311      	adds	r3, #17
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	7b9b      	ldrb	r3, [r3, #14]
 8003304:	461a      	mov	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 8003312:	7f7b      	ldrb	r3, [r7, #29]
 8003314:	3312      	adds	r3, #18
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4413      	add	r3, r2
 800331a:	7b9b      	ldrb	r3, [r3, #14]
 800331c:	461a      	mov	r2, r3
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 800332a:	7f7b      	ldrb	r3, [r7, #29]
 800332c:	3313      	adds	r3, #19
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4413      	add	r3, r2
 8003332:	7b9b      	ldrb	r3, [r3, #14]
 8003334:	461a      	mov	r2, r3
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8003342:	7f7b      	ldrb	r3, [r7, #29]
 8003344:	3314      	adds	r3, #20
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	4413      	add	r3, r2
 800334a:	7b9b      	ldrb	r3, [r3, #14]
 800334c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	021b      	lsls	r3, r3, #8
 8003352:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 8003354:	7f7b      	ldrb	r3, [r7, #29]
 8003356:	3315      	adds	r3, #21
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	4413      	add	r3, r2
 800335c:	7b9b      	ldrb	r3, [r3, #14]
 800335e:	461a      	mov	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 800336c:	7f7b      	ldrb	r3, [r7, #29]
 800336e:	3316      	adds	r3, #22
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	4413      	add	r3, r2
 8003374:	7b9b      	ldrb	r3, [r3, #14]
 8003376:	461a      	mov	r2, r3
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4313      	orrs	r3, r2
 800337c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	021b      	lsls	r3, r3, #8
 8003382:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 8003384:	7f7b      	ldrb	r3, [r7, #29]
 8003386:	3317      	adds	r3, #23
 8003388:	687a      	ldr	r2, [r7, #4]
 800338a:	4413      	add	r3, r2
 800338c:	7b9b      	ldrb	r3, [r3, #14]
 800338e:	461a      	mov	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 8003396:	f107 0310 	add.w	r3, r7, #16
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 28;
 80033a0:	7f7b      	ldrb	r3, [r7, #29]
 80033a2:	331c      	adds	r3, #28
 80033a4:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	7f3b      	ldrb	r3, [r7, #28]
 80033ac:	1c59      	adds	r1, r3, #1
 80033ae:	7739      	strb	r1, [r7, #28]
 80033b0:	b252      	sxtb	r2, r2
 80033b2:	3320      	adds	r3, #32
 80033b4:	443b      	add	r3, r7
 80033b6:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 80033ba:	7ffb      	ldrb	r3, [r7, #31]
 80033bc:	3301      	adds	r3, #1
 80033be:	77fb      	strb	r3, [r7, #31]
 80033c0:	7ffa      	ldrb	r2, [r7, #31]
 80033c2:	7efb      	ldrb	r3, [r7, #27]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	f4ff af0f 	bcc.w	80031e8 <huansic_xb_decodeBody+0x53c>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 80033ca:	2300      	movs	r3, #0
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e02d      	b.n	800342c <huansic_xb_decodeBody+0x780>
			if (delivering[i]->id != -1) {
 80033d0:	7ffb      	ldrb	r3, [r7, #31]
 80033d2:	4a9b      	ldr	r2, [pc, #620]	; (8003640 <huansic_xb_decodeBody+0x994>)
 80033d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033de:	d022      	beq.n	8003426 <huansic_xb_decodeBody+0x77a>
				for (j = 0; j < updatedOrderIndex; j++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	77bb      	strb	r3, [r7, #30]
 80033e4:	e011      	b.n	800340a <huansic_xb_decodeBody+0x75e>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 80033e6:	7ffb      	ldrb	r3, [r7, #31]
 80033e8:	4a95      	ldr	r2, [pc, #596]	; (8003640 <huansic_xb_decodeBody+0x994>)
 80033ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	7fba      	ldrb	r2, [r7, #30]
 80033f2:	3220      	adds	r2, #32
 80033f4:	443a      	add	r2, r7
 80033f6:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d102      	bne.n	8003404 <huansic_xb_decodeBody+0x758>
						j = 255;
 80033fe:	23ff      	movs	r3, #255	; 0xff
 8003400:	77bb      	strb	r3, [r7, #30]
						break;
 8003402:	e006      	b.n	8003412 <huansic_xb_decodeBody+0x766>
				for (j = 0; j < updatedOrderIndex; j++)
 8003404:	7fbb      	ldrb	r3, [r7, #30]
 8003406:	3301      	adds	r3, #1
 8003408:	77bb      	strb	r3, [r7, #30]
 800340a:	7fba      	ldrb	r2, [r7, #30]
 800340c:	7f3b      	ldrb	r3, [r7, #28]
 800340e:	429a      	cmp	r2, r3
 8003410:	d3e9      	bcc.n	80033e6 <huansic_xb_decodeBody+0x73a>
					}
				if (j != 255)
 8003412:	7fbb      	ldrb	r3, [r7, #30]
 8003414:	2bff      	cmp	r3, #255	; 0xff
 8003416:	d006      	beq.n	8003426 <huansic_xb_decodeBody+0x77a>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 8003418:	7ffb      	ldrb	r3, [r7, #31]
 800341a:	4a89      	ldr	r2, [pc, #548]	; (8003640 <huansic_xb_decodeBody+0x994>)
 800341c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff f99f 	bl	8002764 <huansic_order_delete>
		for (i = 0; i < 5; i++)
 8003426:	7ffb      	ldrb	r3, [r7, #31]
 8003428:	3301      	adds	r3, #1
 800342a:	77fb      	strb	r3, [r7, #31]
 800342c:	7ffb      	ldrb	r3, [r7, #31]
 800342e:	2b04      	cmp	r3, #4
 8003430:	d9ce      	bls.n	80033d0 <huansic_xb_decodeBody+0x724>
			}

		/* record latest order */
		temp = hxb->buffer[index + 24];
 8003432:	7f7b      	ldrb	r3, [r7, #29]
 8003434:	3318      	adds	r3, #24
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4413      	add	r3, r2
 800343a:	7b9b      	ldrb	r3, [r3, #14]
 800343c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 25];
 8003444:	7f7b      	ldrb	r3, [r7, #29]
 8003446:	3319      	adds	r3, #25
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	7b9b      	ldrb	r3, [r3, #14]
 800344e:	461a      	mov	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 26];
 800345c:	7f7b      	ldrb	r3, [r7, #29]
 800345e:	331a      	adds	r3, #26
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	4413      	add	r3, r2
 8003464:	7b9b      	ldrb	r3, [r3, #14]
 8003466:	461a      	mov	r2, r3
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	021b      	lsls	r3, r3, #8
 8003472:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 27];
 8003474:	7f7b      	ldrb	r3, [r7, #29]
 8003476:	331b      	adds	r3, #27
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	7b9b      	ldrb	r3, [r3, #14]
 800347e:	461a      	mov	r2, r3
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	b25b      	sxtb	r3, r3
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff f910 	bl	80026b0 <huansic_order_new>
 8003490:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d108      	bne.n	80034aa <huansic_xb_decodeBody+0x7fe>
			index += 28;
 8003498:	7f7b      	ldrb	r3, [r7, #29]
 800349a:	331c      	adds	r3, #28
 800349c:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fb92 	bl	8002bcc <custom_order_new_failed>
 80034a8:	e0a5      	b.n	80035f6 <huansic_xb_decodeBody+0x94a>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80034aa:	7f7b      	ldrb	r3, [r7, #29]
 80034ac:	3302      	adds	r3, #2
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	7b9b      	ldrb	r3, [r3, #14]
 80034b4:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 80034b6:	b21a      	sxth	r2, r3
 80034b8:	7f7b      	ldrb	r3, [r7, #29]
 80034ba:	3303      	adds	r3, #3
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	440b      	add	r3, r1
 80034c0:	7b9b      	ldrb	r3, [r3, #14]
 80034c2:	b21b      	sxth	r3, r3
 80034c4:	4313      	orrs	r3, r2
 80034c6:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80034cc:	7f7b      	ldrb	r3, [r7, #29]
 80034ce:	3306      	adds	r3, #6
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	7b9b      	ldrb	r3, [r3, #14]
 80034d6:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 80034d8:	b21a      	sxth	r2, r3
 80034da:	7f7b      	ldrb	r3, [r7, #29]
 80034dc:	3307      	adds	r3, #7
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	440b      	add	r3, r1
 80034e2:	7b9b      	ldrb	r3, [r3, #14]
 80034e4:	b21b      	sxth	r3, r3
 80034e6:	4313      	orrs	r3, r2
 80034e8:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	805a      	strh	r2, [r3, #2]
			order_append(tempOrder);
 80034ee:	6978      	ldr	r0, [r7, #20]
 80034f0:	f001 fa94 	bl	8004a1c <order_append>
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80034f4:	7f7b      	ldrb	r3, [r7, #29]
 80034f6:	330a      	adds	r3, #10
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	4413      	add	r3, r2
 80034fc:	7b9b      	ldrb	r3, [r3, #14]
 80034fe:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 8003500:	b21a      	sxth	r2, r3
 8003502:	7f7b      	ldrb	r3, [r7, #29]
 8003504:	330b      	adds	r3, #11
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	440b      	add	r3, r1
 800350a:	7b9b      	ldrb	r3, [r3, #14]
 800350c:	b21b      	sxth	r3, r3
 800350e:	4313      	orrs	r3, r2
 8003510:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8003516:	7f7b      	ldrb	r3, [r7, #29]
 8003518:	330e      	adds	r3, #14
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	4413      	add	r3, r2
 800351e:	7b9b      	ldrb	r3, [r3, #14]
 8003520:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 8003522:	b21a      	sxth	r2, r3
 8003524:	7f7b      	ldrb	r3, [r7, #29]
 8003526:	330f      	adds	r3, #15
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	440b      	add	r3, r1
 800352c:	7b9b      	ldrb	r3, [r3, #14]
 800352e:	b21b      	sxth	r3, r3
 8003530:	4313      	orrs	r3, r2
 8003532:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 8003538:	7f7b      	ldrb	r3, [r7, #29]
 800353a:	3310      	adds	r3, #16
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	4413      	add	r3, r2
 8003540:	7b9b      	ldrb	r3, [r3, #14]
 8003542:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 800354a:	7f7b      	ldrb	r3, [r7, #29]
 800354c:	3311      	adds	r3, #17
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	7b9b      	ldrb	r3, [r3, #14]
 8003554:	461a      	mov	r2, r3
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	021b      	lsls	r3, r3, #8
 8003560:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 8003562:	7f7b      	ldrb	r3, [r7, #29]
 8003564:	3312      	adds	r3, #18
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	7b9b      	ldrb	r3, [r3, #14]
 800356c:	461a      	mov	r2, r3
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	021b      	lsls	r3, r3, #8
 8003578:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 800357a:	7f7b      	ldrb	r3, [r7, #29]
 800357c:	3313      	adds	r3, #19
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	7b9b      	ldrb	r3, [r3, #14]
 8003584:	461a      	mov	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8003592:	7f7b      	ldrb	r3, [r7, #29]
 8003594:	3314      	adds	r3, #20
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	4413      	add	r3, r2
 800359a:	7b9b      	ldrb	r3, [r3, #14]
 800359c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 80035a4:	7f7b      	ldrb	r3, [r7, #29]
 80035a6:	3315      	adds	r3, #21
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	4413      	add	r3, r2
 80035ac:	7b9b      	ldrb	r3, [r3, #14]
 80035ae:	461a      	mov	r2, r3
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	021b      	lsls	r3, r3, #8
 80035ba:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 80035bc:	7f7b      	ldrb	r3, [r7, #29]
 80035be:	3316      	adds	r3, #22
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	4413      	add	r3, r2
 80035c4:	7b9b      	ldrb	r3, [r3, #14]
 80035c6:	461a      	mov	r2, r3
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 80035d4:	7f7b      	ldrb	r3, [r7, #29]
 80035d6:	3317      	adds	r3, #23
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	4413      	add	r3, r2
 80035dc:	7b9b      	ldrb	r3, [r3, #14]
 80035de:	461a      	mov	r2, r3
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 80035e6:	f107 0310 	add.w	r3, r7, #16
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	615a      	str	r2, [r3, #20]
 80035f0:	e001      	b.n	80035f6 <huansic_xb_decodeBody+0x94a>
		}
	} else {
		return XB_ID_ERROR;
 80035f2:	2306      	movs	r3, #6
 80035f4:	e020      	b.n	8003638 <huansic_xb_decodeBody+0x98c>
	}

	// set up next DMA
	hxb->lastUpdated = HAL_GetTick();		// update last updated time stamp
 80035f6:	f002 fda5 	bl	8006144 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	609a      	str	r2, [r3, #8]
	hxb->nextPackageLength = 6;		// header length
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2206      	movs	r2, #6
 8003604:	735a      	strb	r2, [r3, #13]
	hxb->nextPackageID = 0x00;		// the next one is header
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	731a      	strb	r2, [r3, #12]
	HAL_UART_Receive_DMA(hxb->huart, hxb->buffer, hxb->nextPackageLength);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f103 010e 	add.w	r1, r3, #14
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	7b5b      	ldrb	r3, [r3, #13]
 800361a:	b29b      	uxth	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	f005 ffd9 	bl	80095d4 <HAL_UART_Receive_DMA>
	hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0204 	bic.w	r2, r2, #4
 8003634:	601a      	str	r2, [r3, #0]
	return XB_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3720      	adds	r7, #32
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000bc8 	.word	0x20000bc8

08003644 <huansic_xb_setBeacon>:
void huansic_xb_requestGameInfo(XB_HandleTypeDef *hxb) {
	uint8_t buffer = 0x00;
	HAL_UART_Transmit(hxb->huart, &buffer, 1, 10);
}

void huansic_xb_setBeacon(XB_HandleTypeDef *hxb) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	uint8_t buffer = 0x02;
 800364c:	2302      	movs	r3, #2
 800364e:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(hxb->huart, &buffer, 1, 10);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	f107 010f 	add.w	r1, r7, #15
 8003658:	230a      	movs	r3, #10
 800365a:	2201      	movs	r2, #1
 800365c:	f005 fef8 	bl	8009450 <HAL_UART_Transmit>
}
 8003660:	bf00      	nop
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <huansic_xb_dma_error>:

void huansic_xb_dma_error(XB_HandleTypeDef *hxb) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	hxb->pending_alignment = 1;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	330e      	adds	r3, #14
 8003680:	2201      	movs	r2, #1
 8003682:	4619      	mov	r1, r3
 8003684:	f005 ff76 	bl	8009574 <HAL_UART_Receive_IT>
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <huansic_xb_it_error>:

void huansic_xb_it_error(XB_HandleTypeDef *hxb) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	hxb->pending_alignment = 1;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6818      	ldr	r0, [r3, #0]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	330e      	adds	r3, #14
 80036a8:	2201      	movs	r2, #1
 80036aa:	4619      	mov	r1, r3
 80036ac:	f005 ff62 	bl	8009574 <HAL_UART_Receive_IT>
}
 80036b0:	bf00      	nop
 80036b2:	3708      	adds	r7, #8
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <huansic_xb_isr>:

enum XB_STATUS huansic_xb_isr(XB_HandleTypeDef *hxb) {
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	if (!hxb)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <huansic_xb_isr+0x12>
		return XB_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e035      	b.n	8003736 <huansic_xb_isr+0x7e>

	if (hxb->buffer[0] == 0xAA && hxb->lastByte == 0x55) {		// if aligned (look for header)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	7b9b      	ldrb	r3, [r3, #14]
 80036ce:	2baa      	cmp	r3, #170	; 0xaa
 80036d0:	d11f      	bne.n	8003712 <huansic_xb_isr+0x5a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80036d8:	2b55      	cmp	r3, #85	; 0x55
 80036da:	d11a      	bne.n	8003712 <huansic_xb_isr+0x5a>
		hxb->pending_alignment = 0;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->nextPackageID = 0x00;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	731a      	strb	r2, [r3, #12]
		HAL_UART_Receive_DMA(hxb->huart, &hxb->buffer[2], 4);		// receive the rest of header
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	3310      	adds	r3, #16
 80036f2:	2204      	movs	r2, #4
 80036f4:	4619      	mov	r1, r3
 80036f6:	f005 ff6d 	bl	80095d4 <HAL_UART_Receive_DMA>
		hxb->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0204 	bic.w	r2, r2, #4
 800370c:	601a      	str	r2, [r3, #0]
		return XB_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	e011      	b.n	8003736 <huansic_xb_isr+0x7e>
	} else {
		hxb->pending_alignment = 1;		// enter aligning mode if not already
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
		hxb->lastByte = hxb->buffer[0];
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	7b9a      	ldrb	r2, [r3, #14]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
		HAL_UART_Receive_IT(hxb->huart, &hxb->buffer[0], 1);		// check next byte
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6818      	ldr	r0, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	330e      	adds	r3, #14
 800372c:	2201      	movs	r2, #1
 800372e:	4619      	mov	r1, r3
 8003730:	f005 ff20 	bl	8009574 <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 8003734:	2305      	movs	r3, #5
	}
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <huansic_xb_dma_isr>:

enum XB_STATUS huansic_xb_dma_isr(XB_HandleTypeDef *hxb) {
 800373e:	b580      	push	{r7, lr}
 8003740:	b082      	sub	sp, #8
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
	if (!hxb)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <huansic_xb_dma_isr+0x12>
		return XB_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e00c      	b.n	800376a <huansic_xb_dma_isr+0x2c>

	if (hxb->nextPackageID == 0x00)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	7b1b      	ldrb	r3, [r3, #12]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d104      	bne.n	8003762 <huansic_xb_dma_isr+0x24>
		return huansic_xb_decodeHeader(hxb);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff fa68 	bl	8002c2e <huansic_xb_decodeHeader>
 800375e:	4603      	mov	r3, r0
 8003760:	e003      	b.n	800376a <huansic_xb_dma_isr+0x2c>
	else
		return huansic_xb_decodeBody(hxb);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff faa2 	bl	8002cac <huansic_xb_decodeBody>
 8003768:	4603      	mov	r3, r0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800377a:	f002 fc8b 	bl	8006094 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800377e:	f000 f9d3 	bl	8003b28 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003782:	f000 fdcd 	bl	8004320 <MX_GPIO_Init>
	MX_DMA_Init();
 8003786:	f000 fda5 	bl	80042d4 <MX_DMA_Init>
	MX_I2C1_Init();
 800378a:	f000 fa13 	bl	8003bb4 <MX_I2C1_Init>
	MX_TIM1_Init();
 800378e:	f000 fa3f 	bl	8003c10 <MX_TIM1_Init>
	MX_TIM2_Init();
 8003792:	f000 fb01 	bl	8003d98 <MX_TIM2_Init>
	MX_TIM3_Init();
 8003796:	f000 fb53 	bl	8003e40 <MX_TIM3_Init>
	MX_TIM4_Init();
 800379a:	f000 fba5 	bl	8003ee8 <MX_TIM4_Init>
	MX_TIM5_Init();
 800379e:	f000 fbf7 	bl	8003f90 <MX_TIM5_Init>
	MX_TIM8_Init();
 80037a2:	f000 fc7f 	bl	80040a4 <MX_TIM8_Init>
	MX_USART2_UART_Init();
 80037a6:	f000 fd41 	bl	800422c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 80037aa:	f000 fd69 	bl	8004280 <MX_USART3_UART_Init>
	MX_TIM6_Init();
 80037ae:	f000 fc43 	bl	8004038 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	//Motor init
	cmotor_lf.encoderInverted = 1;
 80037b2:	4ba5      	ldr	r3, [pc, #660]	; (8003a48 <main+0x2d4>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.encoderInverted = 1;
 80037ba:	4ba4      	ldr	r3, [pc, #656]	; (8003a4c <main+0x2d8>)
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	HUAN_MOTOR1_Init();
 80037c2:	f000 fe03 	bl	80043cc <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 80037c6:	f000 fe35 	bl	8004434 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 80037ca:	f000 fe67 	bl	800449c <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 80037ce:	f000 fe99 	bl	8004504 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 80037d2:	f000 fecb 	bl	800456c <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 80037d6:	f000 fedd 	bl	8004594 <HUAN_ZIGBEE_Init>
	order_list_init();
 80037da:	f001 f911 	bl	8004a00 <order_list_init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer after data stables
	HAL_Delay(20);
 80037de:	2014      	movs	r0, #20
 80037e0:	f002 fcba 	bl	8006158 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 80037e4:	489a      	ldr	r0, [pc, #616]	; (8003a50 <main+0x2dc>)
 80037e6:	f004 fcdd 	bl	80081a4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	sprintf(firstLine, "Good");
 80037ea:	499a      	ldr	r1, [pc, #616]	; (8003a54 <main+0x2e0>)
 80037ec:	489a      	ldr	r0, [pc, #616]	; (8003a58 <main+0x2e4>)
 80037ee:	f006 ffd1 	bl	800a794 <siprintf>
	ssd1306_WriteString(firstLine, Font_6x8, White);
 80037f2:	4a9a      	ldr	r2, [pc, #616]	; (8003a5c <main+0x2e8>)
 80037f4:	2301      	movs	r3, #1
 80037f6:	ca06      	ldmia	r2, {r1, r2}
 80037f8:	4897      	ldr	r0, [pc, #604]	; (8003a58 <main+0x2e4>)
 80037fa:	f001 fe2b 	bl	8005454 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80037fe:	f001 fd27 	bl	8005250 <ssd1306_UpdateScreen>

	// test A*
	myCoord.x = 0;
 8003802:	4b97      	ldr	r3, [pc, #604]	; (8003a60 <main+0x2ec>)
 8003804:	2200      	movs	r2, #0
 8003806:	801a      	strh	r2, [r3, #0]
	myCoord.y = 0;
 8003808:	4b95      	ldr	r3, [pc, #596]	; (8003a60 <main+0x2ec>)
 800380a:	2200      	movs	r2, #0
 800380c:	805a      	strh	r2, [r3, #2]
	Coordinate goal;
	goal.x = 50;
 800380e:	2332      	movs	r3, #50	; 0x32
 8003810:	80bb      	strh	r3, [r7, #4]
	goal.y = 10;
 8003812:	230a      	movs	r3, #10
 8003814:	80fb      	strh	r3, [r7, #6]
	EstiCoord.x = (float)myCoord.x;
 8003816:	4b92      	ldr	r3, [pc, #584]	; (8003a60 <main+0x2ec>)
 8003818:	f9b3 3000 	ldrsh.w	r3, [r3]
 800381c:	4618      	mov	r0, r3
 800381e:	f7fd fa8b 	bl	8000d38 <__aeabi_i2f>
 8003822:	4603      	mov	r3, r0
 8003824:	4a8f      	ldr	r2, [pc, #572]	; (8003a64 <main+0x2f0>)
 8003826:	6013      	str	r3, [r2, #0]
	EstiCoord.y = (float)myCoord.y;
 8003828:	4b8d      	ldr	r3, [pc, #564]	; (8003a60 <main+0x2ec>)
 800382a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800382e:	4618      	mov	r0, r3
 8003830:	f7fd fa82 	bl	8000d38 <__aeabi_i2f>
 8003834:	4603      	mov	r3, r0
 8003836:	4a8b      	ldr	r2, [pc, #556]	; (8003a64 <main+0x2f0>)
 8003838:	6053      	str	r3, [r2, #4]
	CoordinateUpdate = 0;
 800383a:	4b8b      	ldr	r3, [pc, #556]	; (8003a68 <main+0x2f4>)
 800383c:	2200      	movs	r2, #0
 800383e:	701a      	strb	r2, [r3, #0]
//	uint8_t flag = mingyan_pathfind_avoidObstacle(&myCoord, &goal);
//	Position_P(&myCoord, &goal);
	GotoDestination(goal, 0);
 8003840:	2100      	movs	r1, #0
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f001 f9ae 	bl	8004ba4 <GotoDestination>
//		HAL_Delay(1000);
//		chao_move_angle(180, 2000);
//		HAL_Delay(1000);
//		chao_move_angle(270, 2000);

		if(gameStatus == 0){		// if the game is not running
 8003848:	4b88      	ldr	r3, [pc, #544]	; (8003a6c <main+0x2f8>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11f      	bne.n	8003890 <main+0x11c>
	    	LED1_ON;
 8003850:	2201      	movs	r2, #1
 8003852:	2101      	movs	r1, #1
 8003854:	4886      	ldr	r0, [pc, #536]	; (8003a70 <main+0x2fc>)
 8003856:	f003 fbc7 	bl	8006fe8 <HAL_GPIO_WritePin>
	    	HAL_Delay(1000);
 800385a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800385e:	f002 fc7b 	bl	8006158 <HAL_Delay>
	    	LED1_OFF;
 8003862:	2200      	movs	r2, #0
 8003864:	2101      	movs	r1, #1
 8003866:	4882      	ldr	r0, [pc, #520]	; (8003a70 <main+0x2fc>)
 8003868:	f003 fbbe 	bl	8006fe8 <HAL_GPIO_WritePin>
 800386c:	e7ec      	b.n	8003848 <main+0xd4>
		}
		else
		{
			while (gameStage == 0) {		// pre-match
				chao_move_angle(0, 0);
 800386e:	f04f 0100 	mov.w	r1, #0
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f7fe facf 	bl	8001e18 <chao_move_angle>
				// find angle offset
				initangleZ = -himu.theta[2];
 800387a:	4b7e      	ldr	r3, [pc, #504]	; (8003a74 <main+0x300>)
 800387c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800387e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003882:	4a7d      	ldr	r2, [pc, #500]	; (8003a78 <main+0x304>)
 8003884:	6013      	str	r3, [r2, #0]
				// do some initialization
				// get obstacle list
				Cal_Battery_Coord();
 8003886:	f002 fa85 	bl	8005d94 <Cal_Battery_Coord>
				task_mode = 0;
 800388a:	4b7c      	ldr	r3, [pc, #496]	; (8003a7c <main+0x308>)
 800388c:	2200      	movs	r2, #0
 800388e:	701a      	strb	r2, [r3, #0]
			while (gameStage == 0) {		// pre-match
 8003890:	4b7b      	ldr	r3, [pc, #492]	; (8003a80 <main+0x30c>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ea      	beq.n	800386e <main+0xfa>
			}

			while (gameStage == 1){			// first-half
 8003898:	e089      	b.n	80039ae <main+0x23a>
				if(task_mode==0){
 800389a:	4b78      	ldr	r3, [pc, #480]	; (8003a7c <main+0x308>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d105      	bne.n	80038ae <main+0x13a>
					//setChargingPile
					set_Beacons();
 80038a2:	f002 fa55 	bl	8005d50 <set_Beacons>
					task_mode = 1;
 80038a6:	4b75      	ldr	r3, [pc, #468]	; (8003a7c <main+0x308>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
 80038ac:	e07f      	b.n	80039ae <main+0x23a>
				}
				else {
					if(myCharge < 200){
 80038ae:	4b75      	ldr	r3, [pc, #468]	; (8003a84 <main+0x310>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2bc7      	cmp	r3, #199	; 0xc7
 80038b4:	dc02      	bgt.n	80038bc <main+0x148>
						task_mode = 3;
 80038b6:	4b71      	ldr	r3, [pc, #452]	; (8003a7c <main+0x308>)
 80038b8:	2203      	movs	r2, #3
 80038ba:	701a      	strb	r2, [r3, #0]
					}
					if(task_mode == 1){
 80038bc:	4b6f      	ldr	r3, [pc, #444]	; (8003a7c <main+0x308>)
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d107      	bne.n	80038d4 <main+0x160>
						Get_packet(merchant);
 80038c4:	4b70      	ldr	r3, [pc, #448]	; (8003a88 <main+0x314>)
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	f002 fafa 	bl	8005ec0 <Get_packet>
						task_mode = 4;
 80038cc:	4b6b      	ldr	r3, [pc, #428]	; (8003a7c <main+0x308>)
 80038ce:	2204      	movs	r2, #4
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	e06c      	b.n	80039ae <main+0x23a>
					}
					else if(task_mode == 2){
 80038d4:	4b69      	ldr	r3, [pc, #420]	; (8003a7c <main+0x308>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d107      	bne.n	80038ec <main+0x178>
						Send_packet(consumer);
 80038dc:	4b6b      	ldr	r3, [pc, #428]	; (8003a8c <main+0x318>)
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	f002 fafa 	bl	8005ed8 <Send_packet>
						task_mode = 4;
 80038e4:	4b65      	ldr	r3, [pc, #404]	; (8003a7c <main+0x308>)
 80038e6:	2204      	movs	r2, #4
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	e060      	b.n	80039ae <main+0x23a>
					}
					else if(task_mode == 3){
 80038ec:	4b63      	ldr	r3, [pc, #396]	; (8003a7c <main+0x308>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b03      	cmp	r3, #3
 80038f2:	d109      	bne.n	8003908 <main+0x194>
						go_Charge();
 80038f4:	f002 fa1c 	bl	8005d30 <go_Charge>
						HAL_Delay(1000);
 80038f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038fc:	f002 fc2c 	bl	8006158 <HAL_Delay>
						task_mode = 4;
 8003900:	4b5e      	ldr	r3, [pc, #376]	; (8003a7c <main+0x308>)
 8003902:	2204      	movs	r2, #4
 8003904:	701a      	strb	r2, [r3, #0]
 8003906:	e052      	b.n	80039ae <main+0x23a>
					}
					else
					{
						merchant = Get_nearest_order();
 8003908:	f001 f8cc 	bl	8004aa4 <Get_nearest_order>
 800390c:	4603      	mov	r3, r0
 800390e:	4a5e      	ldr	r2, [pc, #376]	; (8003a88 <main+0x314>)
 8003910:	6013      	str	r3, [r2, #0]
						consumer = Get_nearest_consumer();
 8003912:	f002 faed 	bl	8005ef0 <Get_nearest_consumer>
 8003916:	4603      	mov	r3, r0
 8003918:	4a5c      	ldr	r2, [pc, #368]	; (8003a8c <main+0x318>)
 800391a:	6013      	str	r3, [r2, #0]
						if(delivering_num > 3){
 800391c:	4b5c      	ldr	r3, [pc, #368]	; (8003a90 <main+0x31c>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b03      	cmp	r3, #3
 8003922:	d903      	bls.n	800392c <main+0x1b8>
							task_mode = 2;
 8003924:	4b55      	ldr	r3, [pc, #340]	; (8003a7c <main+0x308>)
 8003926:	2202      	movs	r2, #2
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e040      	b.n	80039ae <main+0x23a>
						}
						else if(delivering_num == 0){
 800392c:	4b58      	ldr	r3, [pc, #352]	; (8003a90 <main+0x31c>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d103      	bne.n	800393c <main+0x1c8>
							task_mode = 1;
 8003934:	4b51      	ldr	r3, [pc, #324]	; (8003a7c <main+0x308>)
 8003936:	2201      	movs	r2, #1
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	e038      	b.n	80039ae <main+0x23a>
						}
						else if((abs(merchant.x-myCoord.x)+abs(merchant.y-myCoord.y))<(abs(consumer.x-myCoord.x)+abs(consumer.y-myCoord.y))){
 800393c:	4b52      	ldr	r3, [pc, #328]	; (8003a88 <main+0x314>)
 800393e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003942:	461a      	mov	r2, r3
 8003944:	4b46      	ldr	r3, [pc, #280]	; (8003a60 <main+0x2ec>)
 8003946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003950:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003954:	4b4c      	ldr	r3, [pc, #304]	; (8003a88 <main+0x314>)
 8003956:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800395a:	4619      	mov	r1, r3
 800395c:	4b40      	ldr	r3, [pc, #256]	; (8003a60 <main+0x2ec>)
 800395e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003962:	1acb      	subs	r3, r1, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	bfb8      	it	lt
 8003968:	425b      	neglt	r3, r3
 800396a:	441a      	add	r2, r3
 800396c:	4b47      	ldr	r3, [pc, #284]	; (8003a8c <main+0x318>)
 800396e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003972:	4619      	mov	r1, r3
 8003974:	4b3a      	ldr	r3, [pc, #232]	; (8003a60 <main+0x2ec>)
 8003976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800397a:	1acb      	subs	r3, r1, r3
 800397c:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8003980:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003984:	4b41      	ldr	r3, [pc, #260]	; (8003a8c <main+0x318>)
 8003986:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800398a:	4618      	mov	r0, r3
 800398c:	4b34      	ldr	r3, [pc, #208]	; (8003a60 <main+0x2ec>)
 800398e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003992:	1ac3      	subs	r3, r0, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	bfb8      	it	lt
 8003998:	425b      	neglt	r3, r3
 800399a:	440b      	add	r3, r1
 800399c:	429a      	cmp	r2, r3
 800399e:	da03      	bge.n	80039a8 <main+0x234>
							task_mode = 1;
 80039a0:	4b36      	ldr	r3, [pc, #216]	; (8003a7c <main+0x308>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	e002      	b.n	80039ae <main+0x23a>
						}
						else{
							task_mode = 2;
 80039a8:	4b34      	ldr	r3, [pc, #208]	; (8003a7c <main+0x308>)
 80039aa:	2202      	movs	r2, #2
 80039ac:	701a      	strb	r2, [r3, #0]
			while (gameStage == 1){			// first-half
 80039ae:	4b34      	ldr	r3, [pc, #208]	; (8003a80 <main+0x30c>)
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	f43f af71 	beq.w	800389a <main+0x126>
					}
				}

			}

			while (gameStage == 2){			// second-half
 80039b8:	e0a5      	b.n	8003b06 <main+0x392>
				if(myCharge < 200){
 80039ba:	4b32      	ldr	r3, [pc, #200]	; (8003a84 <main+0x310>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2bc7      	cmp	r3, #199	; 0xc7
 80039c0:	dc02      	bgt.n	80039c8 <main+0x254>
					task_mode = 3;
 80039c2:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <main+0x308>)
 80039c4:	2203      	movs	r2, #3
 80039c6:	701a      	strb	r2, [r3, #0]
				}
				if(task_mode == 1){
 80039c8:	4b2c      	ldr	r3, [pc, #176]	; (8003a7c <main+0x308>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d107      	bne.n	80039e0 <main+0x26c>
					Get_packet(merchant);
 80039d0:	4b2d      	ldr	r3, [pc, #180]	; (8003a88 <main+0x314>)
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	f002 fa74 	bl	8005ec0 <Get_packet>
					task_mode = 4;
 80039d8:	4b28      	ldr	r3, [pc, #160]	; (8003a7c <main+0x308>)
 80039da:	2204      	movs	r2, #4
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	e092      	b.n	8003b06 <main+0x392>
				}
				else if(task_mode == 2){
 80039e0:	4b26      	ldr	r3, [pc, #152]	; (8003a7c <main+0x308>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d107      	bne.n	80039f8 <main+0x284>
					Send_packet(consumer);
 80039e8:	4b28      	ldr	r3, [pc, #160]	; (8003a8c <main+0x318>)
 80039ea:	6818      	ldr	r0, [r3, #0]
 80039ec:	f002 fa74 	bl	8005ed8 <Send_packet>
					task_mode = 4;
 80039f0:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <main+0x308>)
 80039f2:	2204      	movs	r2, #4
 80039f4:	701a      	strb	r2, [r3, #0]
 80039f6:	e086      	b.n	8003b06 <main+0x392>
				}
				else if(task_mode == 3){
 80039f8:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <main+0x308>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d109      	bne.n	8003a14 <main+0x2a0>
					go_Charge();
 8003a00:	f002 f996 	bl	8005d30 <go_Charge>
					HAL_Delay(1000);
 8003a04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a08:	f002 fba6 	bl	8006158 <HAL_Delay>
					task_mode = 4;
 8003a0c:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <main+0x308>)
 8003a0e:	2204      	movs	r2, #4
 8003a10:	701a      	strb	r2, [r3, #0]
 8003a12:	e078      	b.n	8003b06 <main+0x392>
				}
				else
				{
					merchant = Get_nearest_order();
 8003a14:	f001 f846 	bl	8004aa4 <Get_nearest_order>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <main+0x314>)
 8003a1c:	6013      	str	r3, [r2, #0]
					consumer = Get_nearest_consumer();
 8003a1e:	f002 fa67 	bl	8005ef0 <Get_nearest_consumer>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4a19      	ldr	r2, [pc, #100]	; (8003a8c <main+0x318>)
 8003a26:	6013      	str	r3, [r2, #0]
					if(delivering_num > 3){
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <main+0x31c>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d903      	bls.n	8003a38 <main+0x2c4>
						task_mode = 2;
 8003a30:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <main+0x308>)
 8003a32:	2202      	movs	r2, #2
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e066      	b.n	8003b06 <main+0x392>
					}
					else if(delivering_num == 0){
 8003a38:	4b15      	ldr	r3, [pc, #84]	; (8003a90 <main+0x31c>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d129      	bne.n	8003a94 <main+0x320>
						task_mode = 1;
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <main+0x308>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
 8003a46:	e05e      	b.n	8003b06 <main+0x392>
 8003a48:	20000994 	.word	0x20000994
 8003a4c:	20000a0c 	.word	0x20000a0c
 8003a50:	200007f4 	.word	0x200007f4
 8003a54:	0800c930 	.word	0x0800c930
 8003a58:	20000c00 	.word	0x20000c00
 8003a5c:	20000004 	.word	0x20000004
 8003a60:	20000be0 	.word	0x20000be0
 8003a64:	20000be4 	.word	0x20000be4
 8003a68:	20000bec 	.word	0x20000bec
 8003a6c:	20000b71 	.word	0x20000b71
 8003a70:	40010c00 	.word	0x40010c00
 8003a74:	20000a84 	.word	0x20000a84
 8003a78:	20000bf0 	.word	0x20000bf0
 8003a7c:	20000b72 	.word	0x20000b72
 8003a80:	20000b70 	.word	0x20000b70
 8003a84:	20000bf8 	.word	0x20000bf8
 8003a88:	20000c10 	.word	0x20000c10
 8003a8c:	20000c14 	.word	0x20000c14
 8003a90:	20000bdc 	.word	0x20000bdc
					}
					else if((abs(merchant.x-myCoord.x)+abs(merchant.y-myCoord.y))<(abs(consumer.x-myCoord.x)+abs(consumer.y-myCoord.y))){
 8003a94:	4b1f      	ldr	r3, [pc, #124]	; (8003b14 <main+0x3a0>)
 8003a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <main+0x3a4>)
 8003a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003aa8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003aac:	4b19      	ldr	r3, [pc, #100]	; (8003b14 <main+0x3a0>)
 8003aae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4b18      	ldr	r3, [pc, #96]	; (8003b18 <main+0x3a4>)
 8003ab6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003aba:	1acb      	subs	r3, r1, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bfb8      	it	lt
 8003ac0:	425b      	neglt	r3, r3
 8003ac2:	441a      	add	r2, r3
 8003ac4:	4b15      	ldr	r3, [pc, #84]	; (8003b1c <main+0x3a8>)
 8003ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aca:	4619      	mov	r1, r3
 8003acc:	4b12      	ldr	r3, [pc, #72]	; (8003b18 <main+0x3a4>)
 8003ace:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ad2:	1acb      	subs	r3, r1, r3
 8003ad4:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8003ad8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003adc:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <main+0x3a8>)
 8003ade:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <main+0x3a4>)
 8003ae6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003aea:	1ac3      	subs	r3, r0, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	bfb8      	it	lt
 8003af0:	425b      	neglt	r3, r3
 8003af2:	440b      	add	r3, r1
 8003af4:	429a      	cmp	r2, r3
 8003af6:	da03      	bge.n	8003b00 <main+0x38c>
						task_mode = 1;
 8003af8:	4b09      	ldr	r3, [pc, #36]	; (8003b20 <main+0x3ac>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	701a      	strb	r2, [r3, #0]
 8003afe:	e002      	b.n	8003b06 <main+0x392>
					}
					else{
						task_mode = 2;
 8003b00:	4b07      	ldr	r3, [pc, #28]	; (8003b20 <main+0x3ac>)
 8003b02:	2202      	movs	r2, #2
 8003b04:	701a      	strb	r2, [r3, #0]
			while (gameStage == 2){			// second-half
 8003b06:	4b07      	ldr	r3, [pc, #28]	; (8003b24 <main+0x3b0>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	f43f af55 	beq.w	80039ba <main+0x246>
		if(gameStatus == 0){		// if the game is not running
 8003b10:	e69a      	b.n	8003848 <main+0xd4>
 8003b12:	bf00      	nop
 8003b14:	20000c10 	.word	0x20000c10
 8003b18:	20000be0 	.word	0x20000be0
 8003b1c:	20000c14 	.word	0x20000c14
 8003b20:	20000b72 	.word	0x20000b72
 8003b24:	20000b70 	.word	0x20000b70

08003b28 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b090      	sub	sp, #64	; 0x40
 8003b2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8003b2e:	f107 0318 	add.w	r3, r7, #24
 8003b32:	2228      	movs	r2, #40	; 0x28
 8003b34:	2100      	movs	r1, #0
 8003b36:	4618      	mov	r0, r3
 8003b38:	f006 fb36 	bl	800a1a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003b3c:	1d3b      	adds	r3, r7, #4
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	605a      	str	r2, [r3, #4]
 8003b44:	609a      	str	r2, [r3, #8]
 8003b46:	60da      	str	r2, [r3, #12]
 8003b48:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b52:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b58:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b5e:	2302      	movs	r3, #2
 8003b60:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b66:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003b68:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b6e:	f107 0318 	add.w	r3, r7, #24
 8003b72:	4618      	mov	r0, r3
 8003b74:	f003 feaa 	bl	80078cc <HAL_RCC_OscConfig>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d001      	beq.n	8003b82 <SystemClock_Config+0x5a>
			{
		Error_Handler();
 8003b7e:	f000 fd7d 	bl	800467c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003b82:	230f      	movs	r3, #15
 8003b84:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b86:	2302      	movs	r3, #2
 8003b88:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b92:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003b98:	1d3b      	adds	r3, r7, #4
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f004 f917 	bl	8007dd0 <HAL_RCC_ClockConfig>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d001      	beq.n	8003bac <SystemClock_Config+0x84>
			{
		Error_Handler();
 8003ba8:	f000 fd68 	bl	800467c <Error_Handler>
	}
}
 8003bac:	bf00      	nop
 8003bae:	3740      	adds	r7, #64	; 0x40
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003bb8:	4b12      	ldr	r3, [pc, #72]	; (8003c04 <MX_I2C1_Init+0x50>)
 8003bba:	4a13      	ldr	r2, [pc, #76]	; (8003c08 <MX_I2C1_Init+0x54>)
 8003bbc:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8003bbe:	4b11      	ldr	r3, [pc, #68]	; (8003c04 <MX_I2C1_Init+0x50>)
 8003bc0:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <MX_I2C1_Init+0x58>)
 8003bc2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <MX_I2C1_Init+0x50>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8003bca:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <MX_I2C1_Init+0x50>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	; (8003c04 <MX_I2C1_Init+0x50>)
 8003bd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bd6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bd8:	4b0a      	ldr	r3, [pc, #40]	; (8003c04 <MX_I2C1_Init+0x50>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8003bde:	4b09      	ldr	r3, [pc, #36]	; (8003c04 <MX_I2C1_Init+0x50>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003be4:	4b07      	ldr	r3, [pc, #28]	; (8003c04 <MX_I2C1_Init+0x50>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bea:	4b06      	ldr	r3, [pc, #24]	; (8003c04 <MX_I2C1_Init+0x50>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003bf0:	4804      	ldr	r0, [pc, #16]	; (8003c04 <MX_I2C1_Init+0x50>)
 8003bf2:	f003 fa11 	bl	8007018 <HAL_I2C_Init>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <MX_I2C1_Init+0x4c>
			{
		Error_Handler();
 8003bfc:	f000 fd3e 	bl	800467c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8003c00:	bf00      	nop
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	20000638 	.word	0x20000638
 8003c08:	40005400 	.word	0x40005400
 8003c0c:	000186a0 	.word	0x000186a0

08003c10 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b096      	sub	sp, #88	; 0x58
 8003c14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003c16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	605a      	str	r2, [r3, #4]
 8003c20:	609a      	str	r2, [r3, #8]
 8003c22:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003c24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c32:	2200      	movs	r2, #0
 8003c34:	601a      	str	r2, [r3, #0]
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	609a      	str	r2, [r3, #8]
 8003c3a:	60da      	str	r2, [r3, #12]
 8003c3c:	611a      	str	r2, [r3, #16]
 8003c3e:	615a      	str	r2, [r3, #20]
 8003c40:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8003c42:	1d3b      	adds	r3, r7, #4
 8003c44:	2220      	movs	r2, #32
 8003c46:	2100      	movs	r1, #0
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f006 faad 	bl	800a1a8 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8003c4e:	4b50      	ldr	r3, [pc, #320]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003c50:	4a50      	ldr	r2, [pc, #320]	; (8003d94 <MX_TIM1_Init+0x184>)
 8003c52:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8003c54:	4b4e      	ldr	r3, [pc, #312]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c5a:	4b4d      	ldr	r3, [pc, #308]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8003c60:	4b4b      	ldr	r3, [pc, #300]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003c62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c66:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c68:	4b49      	ldr	r3, [pc, #292]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8003c6e:	4b48      	ldr	r3, [pc, #288]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c74:	4b46      	ldr	r3, [pc, #280]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003c7a:	4845      	ldr	r0, [pc, #276]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003c7c:	f004 fa42 	bl	8008104 <HAL_TIM_Base_Init>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <MX_TIM1_Init+0x7a>
			{
		Error_Handler();
 8003c86:	f000 fcf9 	bl	800467c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c8e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003c90:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c94:	4619      	mov	r1, r3
 8003c96:	483e      	ldr	r0, [pc, #248]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003c98:	f004 feec 	bl	8008a74 <HAL_TIM_ConfigClockSource>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <MX_TIM1_Init+0x96>
			{
		Error_Handler();
 8003ca2:	f000 fceb 	bl	800467c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ca6:	483a      	ldr	r0, [pc, #232]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003ca8:	f004 fadc 	bl	8008264 <HAL_TIM_PWM_Init>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <MX_TIM1_Init+0xa6>
			{
		Error_Handler();
 8003cb2:	f000 fce3 	bl	800467c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003cbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	4832      	ldr	r0, [pc, #200]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003cc6:	f005 faa7 	bl	8009218 <HAL_TIMEx_MasterConfigSynchronization>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <MX_TIM1_Init+0xc4>
			{
		Error_Handler();
 8003cd0:	f000 fcd4 	bl	800467c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003cd4:	2360      	movs	r3, #96	; 0x60
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003cec:	2300      	movs	r3, #0
 8003cee:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	4825      	ldr	r0, [pc, #148]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003cfa:	f004 fdfd 	bl	80088f8 <HAL_TIM_PWM_ConfigChannel>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <MX_TIM1_Init+0xf8>
			{
		Error_Handler();
 8003d04:	f000 fcba 	bl	800467c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	4619      	mov	r1, r3
 8003d10:	481f      	ldr	r0, [pc, #124]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003d12:	f004 fdf1 	bl	80088f8 <HAL_TIM_PWM_ConfigChannel>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <MX_TIM1_Init+0x110>
			{
		Error_Handler();
 8003d1c:	f000 fcae 	bl	800467c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d24:	2208      	movs	r2, #8
 8003d26:	4619      	mov	r1, r3
 8003d28:	4819      	ldr	r0, [pc, #100]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003d2a:	f004 fde5 	bl	80088f8 <HAL_TIM_PWM_ConfigChannel>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <MX_TIM1_Init+0x128>
			{
		Error_Handler();
 8003d34:	f000 fca2 	bl	800467c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d3c:	220c      	movs	r2, #12
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4813      	ldr	r0, [pc, #76]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003d42:	f004 fdd9 	bl	80088f8 <HAL_TIM_PWM_ConfigChannel>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_TIM1_Init+0x140>
			{
		Error_Handler();
 8003d4c:	f000 fc96 	bl	800467c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d60:	2300      	movs	r3, #0
 8003d62:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d68:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d6e:	1d3b      	adds	r3, r7, #4
 8003d70:	4619      	mov	r1, r3
 8003d72:	4807      	ldr	r0, [pc, #28]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003d74:	f005 fabc 	bl	80092f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <MX_TIM1_Init+0x172>
			{
		Error_Handler();
 8003d7e:	f000 fc7d 	bl	800467c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8003d82:	4803      	ldr	r0, [pc, #12]	; (8003d90 <MX_TIM1_Init+0x180>)
 8003d84:	f001 fd4c 	bl	8005820 <HAL_TIM_MspPostInit>

}
 8003d88:	bf00      	nop
 8003d8a:	3758      	adds	r7, #88	; 0x58
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	2000068c 	.word	0x2000068c
 8003d94:	40012c00 	.word	0x40012c00

08003d98 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08c      	sub	sp, #48	; 0x30
 8003d9c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003d9e:	f107 030c 	add.w	r3, r7, #12
 8003da2:	2224      	movs	r2, #36	; 0x24
 8003da4:	2100      	movs	r1, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	f006 f9fe 	bl	800a1a8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003dac:	1d3b      	adds	r3, r7, #4
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003db4:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003dba:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8003dbc:	4b1f      	ldr	r3, [pc, #124]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8003dc8:	4b1c      	ldr	r3, [pc, #112]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dce:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dd6:	4b19      	ldr	r3, [pc, #100]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003de4:	2301      	movs	r3, #1
 8003de6:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003df0:	2300      	movs	r3, #0
 8003df2:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003df4:	2301      	movs	r3, #1
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003e00:	f107 030c 	add.w	r3, r7, #12
 8003e04:	4619      	mov	r1, r3
 8003e06:	480d      	ldr	r0, [pc, #52]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003e08:	f004 fb3e 	bl	8008488 <HAL_TIM_Encoder_Init>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <MX_TIM2_Init+0x7e>
			{
		Error_Handler();
 8003e12:	f000 fc33 	bl	800467c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e16:	2300      	movs	r3, #0
 8003e18:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e1e:	1d3b      	adds	r3, r7, #4
 8003e20:	4619      	mov	r1, r3
 8003e22:	4806      	ldr	r0, [pc, #24]	; (8003e3c <MX_TIM2_Init+0xa4>)
 8003e24:	f005 f9f8 	bl	8009218 <HAL_TIMEx_MasterConfigSynchronization>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <MX_TIM2_Init+0x9a>
			{
		Error_Handler();
 8003e2e:	f000 fc25 	bl	800467c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8003e32:	bf00      	nop
 8003e34:	3730      	adds	r7, #48	; 0x30
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	200006d4 	.word	0x200006d4

08003e40 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08c      	sub	sp, #48	; 0x30
 8003e44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003e46:	f107 030c 	add.w	r3, r7, #12
 8003e4a:	2224      	movs	r2, #36	; 0x24
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f006 f9aa 	bl	800a1a8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e54:	1d3b      	adds	r3, r7, #4
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003e5c:	4b20      	ldr	r3, [pc, #128]	; (8003ee0 <MX_TIM3_Init+0xa0>)
 8003e5e:	4a21      	ldr	r2, [pc, #132]	; (8003ee4 <MX_TIM3_Init+0xa4>)
 8003e60:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8003e62:	4b1f      	ldr	r3, [pc, #124]	; (8003ee0 <MX_TIM3_Init+0xa0>)
 8003e64:	2200      	movs	r2, #0
 8003e66:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e68:	4b1d      	ldr	r3, [pc, #116]	; (8003ee0 <MX_TIM3_Init+0xa0>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8003e6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ee0 <MX_TIM3_Init+0xa0>)
 8003e70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e74:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e76:	4b1a      	ldr	r3, [pc, #104]	; (8003ee0 <MX_TIM3_Init+0xa0>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e7c:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <MX_TIM3_Init+0xa0>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003e82:	2301      	movs	r3, #1
 8003e84:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003e86:	2300      	movs	r3, #0
 8003e88:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003e92:	2300      	movs	r3, #0
 8003e94:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003e96:	2300      	movs	r3, #0
 8003e98:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003ea6:	f107 030c 	add.w	r3, r7, #12
 8003eaa:	4619      	mov	r1, r3
 8003eac:	480c      	ldr	r0, [pc, #48]	; (8003ee0 <MX_TIM3_Init+0xa0>)
 8003eae:	f004 faeb 	bl	8008488 <HAL_TIM_Encoder_Init>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <MX_TIM3_Init+0x7c>
			{
		Error_Handler();
 8003eb8:	f000 fbe0 	bl	800467c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ec4:	1d3b      	adds	r3, r7, #4
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4805      	ldr	r0, [pc, #20]	; (8003ee0 <MX_TIM3_Init+0xa0>)
 8003eca:	f005 f9a5 	bl	8009218 <HAL_TIMEx_MasterConfigSynchronization>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_TIM3_Init+0x98>
			{
		Error_Handler();
 8003ed4:	f000 fbd2 	bl	800467c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8003ed8:	bf00      	nop
 8003eda:	3730      	adds	r7, #48	; 0x30
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	2000071c 	.word	0x2000071c
 8003ee4:	40000400 	.word	0x40000400

08003ee8 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	; 0x30
 8003eec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	2224      	movs	r2, #36	; 0x24
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f006 f956 	bl	800a1a8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003efc:	1d3b      	adds	r3, r7, #4
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8003f04:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <MX_TIM4_Init+0xa0>)
 8003f06:	4a21      	ldr	r2, [pc, #132]	; (8003f8c <MX_TIM4_Init+0xa4>)
 8003f08:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	; (8003f88 <MX_TIM4_Init+0xa0>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f10:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <MX_TIM4_Init+0xa0>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003f16:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <MX_TIM4_Init+0xa0>)
 8003f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f1c:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f1e:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <MX_TIM4_Init+0xa0>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f24:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <MX_TIM4_Init+0xa0>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003f32:	2301      	movs	r3, #1
 8003f34:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003f42:	2301      	movs	r3, #1
 8003f44:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003f46:	2300      	movs	r3, #0
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8003f4e:	f107 030c 	add.w	r3, r7, #12
 8003f52:	4619      	mov	r1, r3
 8003f54:	480c      	ldr	r0, [pc, #48]	; (8003f88 <MX_TIM4_Init+0xa0>)
 8003f56:	f004 fa97 	bl	8008488 <HAL_TIM_Encoder_Init>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <MX_TIM4_Init+0x7c>
			{
		Error_Handler();
 8003f60:	f000 fb8c 	bl	800467c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f64:	2300      	movs	r3, #0
 8003f66:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003f6c:	1d3b      	adds	r3, r7, #4
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4805      	ldr	r0, [pc, #20]	; (8003f88 <MX_TIM4_Init+0xa0>)
 8003f72:	f005 f951 	bl	8009218 <HAL_TIMEx_MasterConfigSynchronization>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_TIM4_Init+0x98>
			{
		Error_Handler();
 8003f7c:	f000 fb7e 	bl	800467c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8003f80:	bf00      	nop
 8003f82:	3730      	adds	r7, #48	; 0x30
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	20000764 	.word	0x20000764
 8003f8c:	40000800 	.word	0x40000800

08003f90 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08c      	sub	sp, #48	; 0x30
 8003f94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8003f96:	f107 030c 	add.w	r3, r7, #12
 8003f9a:	2224      	movs	r2, #36	; 0x24
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f006 f902 	bl	800a1a8 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003fa4:	1d3b      	adds	r3, r7, #4
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8003fac:	4b20      	ldr	r3, [pc, #128]	; (8004030 <MX_TIM5_Init+0xa0>)
 8003fae:	4a21      	ldr	r2, [pc, #132]	; (8004034 <MX_TIM5_Init+0xa4>)
 8003fb0:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 8003fb2:	4b1f      	ldr	r3, [pc, #124]	; (8004030 <MX_TIM5_Init+0xa0>)
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <MX_TIM5_Init+0xa0>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 8003fbe:	4b1c      	ldr	r3, [pc, #112]	; (8004030 <MX_TIM5_Init+0xa0>)
 8003fc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fc4:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fc6:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <MX_TIM5_Init+0xa0>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fcc:	4b18      	ldr	r3, [pc, #96]	; (8004030 <MX_TIM5_Init+0xa0>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003fea:	2301      	movs	r3, #1
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8003ff6:	f107 030c 	add.w	r3, r7, #12
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	480c      	ldr	r0, [pc, #48]	; (8004030 <MX_TIM5_Init+0xa0>)
 8003ffe:	f004 fa43 	bl	8008488 <HAL_TIM_Encoder_Init>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d001      	beq.n	800400c <MX_TIM5_Init+0x7c>
			{
		Error_Handler();
 8004008:	f000 fb38 	bl	800467c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800400c:	2300      	movs	r3, #0
 800400e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004010:	2300      	movs	r3, #0
 8004012:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004014:	1d3b      	adds	r3, r7, #4
 8004016:	4619      	mov	r1, r3
 8004018:	4805      	ldr	r0, [pc, #20]	; (8004030 <MX_TIM5_Init+0xa0>)
 800401a:	f005 f8fd 	bl	8009218 <HAL_TIMEx_MasterConfigSynchronization>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM5_Init+0x98>
			{
		Error_Handler();
 8004024:	f000 fb2a 	bl	800467c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8004028:	bf00      	nop
 800402a:	3730      	adds	r7, #48	; 0x30
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	200007ac 	.word	0x200007ac
 8004034:	40000c00 	.word	0x40000c00

08004038 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800403e:	463b      	mov	r3, r7
 8004040:	2200      	movs	r2, #0
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8004046:	4b15      	ldr	r3, [pc, #84]	; (800409c <MX_TIM6_Init+0x64>)
 8004048:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <MX_TIM6_Init+0x68>)
 800404a:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 72 - 1;
 800404c:	4b13      	ldr	r3, [pc, #76]	; (800409c <MX_TIM6_Init+0x64>)
 800404e:	2247      	movs	r2, #71	; 0x47
 8004050:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004052:	4b12      	ldr	r3, [pc, #72]	; (800409c <MX_TIM6_Init+0x64>)
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 50000;
 8004058:	4b10      	ldr	r3, [pc, #64]	; (800409c <MX_TIM6_Init+0x64>)
 800405a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800405e:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004060:	4b0e      	ldr	r3, [pc, #56]	; (800409c <MX_TIM6_Init+0x64>)
 8004062:	2200      	movs	r2, #0
 8004064:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004066:	480d      	ldr	r0, [pc, #52]	; (800409c <MX_TIM6_Init+0x64>)
 8004068:	f004 f84c 	bl	8008104 <HAL_TIM_Base_Init>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <MX_TIM6_Init+0x3e>
			{
		Error_Handler();
 8004072:	f000 fb03 	bl	800467c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004076:	2300      	movs	r3, #0
 8004078:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800407a:	2300      	movs	r3, #0
 800407c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800407e:	463b      	mov	r3, r7
 8004080:	4619      	mov	r1, r3
 8004082:	4806      	ldr	r0, [pc, #24]	; (800409c <MX_TIM6_Init+0x64>)
 8004084:	f005 f8c8 	bl	8009218 <HAL_TIMEx_MasterConfigSynchronization>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <MX_TIM6_Init+0x5a>
			{
		Error_Handler();
 800408e:	f000 faf5 	bl	800467c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8004092:	bf00      	nop
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	200007f4 	.word	0x200007f4
 80040a0:	40001000 	.word	0x40001000

080040a4 <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b096      	sub	sp, #88	; 0x58
 80040a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80040aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	609a      	str	r2, [r3, #8]
 80040b6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80040b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80040c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	609a      	str	r2, [r3, #8]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	611a      	str	r2, [r3, #16]
 80040d2:	615a      	str	r2, [r3, #20]
 80040d4:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80040d6:	1d3b      	adds	r3, r7, #4
 80040d8:	2220      	movs	r2, #32
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f006 f863 	bl	800a1a8 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80040e2:	4b50      	ldr	r3, [pc, #320]	; (8004224 <MX_TIM8_Init+0x180>)
 80040e4:	4a50      	ldr	r2, [pc, #320]	; (8004228 <MX_TIM8_Init+0x184>)
 80040e6:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80040e8:	4b4e      	ldr	r3, [pc, #312]	; (8004224 <MX_TIM8_Init+0x180>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040ee:	4b4d      	ldr	r3, [pc, #308]	; (8004224 <MX_TIM8_Init+0x180>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 80040f4:	4b4b      	ldr	r3, [pc, #300]	; (8004224 <MX_TIM8_Init+0x180>)
 80040f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040fa:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040fc:	4b49      	ldr	r3, [pc, #292]	; (8004224 <MX_TIM8_Init+0x180>)
 80040fe:	2200      	movs	r2, #0
 8004100:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8004102:	4b48      	ldr	r3, [pc, #288]	; (8004224 <MX_TIM8_Init+0x180>)
 8004104:	2200      	movs	r2, #0
 8004106:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004108:	4b46      	ldr	r3, [pc, #280]	; (8004224 <MX_TIM8_Init+0x180>)
 800410a:	2200      	movs	r2, #0
 800410c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800410e:	4845      	ldr	r0, [pc, #276]	; (8004224 <MX_TIM8_Init+0x180>)
 8004110:	f003 fff8 	bl	8008104 <HAL_TIM_Base_Init>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d001      	beq.n	800411e <MX_TIM8_Init+0x7a>
			{
		Error_Handler();
 800411a:	f000 faaf 	bl	800467c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800411e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004122:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004124:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004128:	4619      	mov	r1, r3
 800412a:	483e      	ldr	r0, [pc, #248]	; (8004224 <MX_TIM8_Init+0x180>)
 800412c:	f004 fca2 	bl	8008a74 <HAL_TIM_ConfigClockSource>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d001      	beq.n	800413a <MX_TIM8_Init+0x96>
			{
		Error_Handler();
 8004136:	f000 faa1 	bl	800467c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800413a:	483a      	ldr	r0, [pc, #232]	; (8004224 <MX_TIM8_Init+0x180>)
 800413c:	f004 f892 	bl	8008264 <HAL_TIM_PWM_Init>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM8_Init+0xa6>
			{
		Error_Handler();
 8004146:	f000 fa99 	bl	800467c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800414a:	2300      	movs	r3, #0
 800414c:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800414e:	2300      	movs	r3, #0
 8004150:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004152:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004156:	4619      	mov	r1, r3
 8004158:	4832      	ldr	r0, [pc, #200]	; (8004224 <MX_TIM8_Init+0x180>)
 800415a:	f005 f85d 	bl	8009218 <HAL_TIMEx_MasterConfigSynchronization>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_TIM8_Init+0xc4>
			{
		Error_Handler();
 8004164:	f000 fa8a 	bl	800467c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004168:	2360      	movs	r3, #96	; 0x60
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004170:	2300      	movs	r3, #0
 8004172:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004174:	2300      	movs	r3, #0
 8004176:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004178:	2300      	movs	r3, #0
 800417a:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800417c:	2300      	movs	r3, #0
 800417e:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004180:	2300      	movs	r3, #0
 8004182:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004188:	2200      	movs	r2, #0
 800418a:	4619      	mov	r1, r3
 800418c:	4825      	ldr	r0, [pc, #148]	; (8004224 <MX_TIM8_Init+0x180>)
 800418e:	f004 fbb3 	bl	80088f8 <HAL_TIM_PWM_ConfigChannel>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <MX_TIM8_Init+0xf8>
			{
		Error_Handler();
 8004198:	f000 fa70 	bl	800467c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800419c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041a0:	2204      	movs	r2, #4
 80041a2:	4619      	mov	r1, r3
 80041a4:	481f      	ldr	r0, [pc, #124]	; (8004224 <MX_TIM8_Init+0x180>)
 80041a6:	f004 fba7 	bl	80088f8 <HAL_TIM_PWM_ConfigChannel>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <MX_TIM8_Init+0x110>
			{
		Error_Handler();
 80041b0:	f000 fa64 	bl	800467c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041b8:	2208      	movs	r2, #8
 80041ba:	4619      	mov	r1, r3
 80041bc:	4819      	ldr	r0, [pc, #100]	; (8004224 <MX_TIM8_Init+0x180>)
 80041be:	f004 fb9b 	bl	80088f8 <HAL_TIM_PWM_ConfigChannel>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d001      	beq.n	80041cc <MX_TIM8_Init+0x128>
			{
		Error_Handler();
 80041c8:	f000 fa58 	bl	800467c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80041cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041d0:	220c      	movs	r2, #12
 80041d2:	4619      	mov	r1, r3
 80041d4:	4813      	ldr	r0, [pc, #76]	; (8004224 <MX_TIM8_Init+0x180>)
 80041d6:	f004 fb8f 	bl	80088f8 <HAL_TIM_PWM_ConfigChannel>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <MX_TIM8_Init+0x140>
			{
		Error_Handler();
 80041e0:	f000 fa4c 	bl	800467c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80041e4:	2300      	movs	r3, #0
 80041e6:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80041e8:	2300      	movs	r3, #0
 80041ea:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80041ec:	2300      	movs	r3, #0
 80041ee:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80041f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041fc:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80041fe:	2300      	movs	r3, #0
 8004200:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004202:	1d3b      	adds	r3, r7, #4
 8004204:	4619      	mov	r1, r3
 8004206:	4807      	ldr	r0, [pc, #28]	; (8004224 <MX_TIM8_Init+0x180>)
 8004208:	f005 f872 	bl	80092f0 <HAL_TIMEx_ConfigBreakDeadTime>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <MX_TIM8_Init+0x172>
			{
		Error_Handler();
 8004212:	f000 fa33 	bl	800467c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8004216:	4803      	ldr	r0, [pc, #12]	; (8004224 <MX_TIM8_Init+0x180>)
 8004218:	f001 fb02 	bl	8005820 <HAL_TIM_MspPostInit>

}
 800421c:	bf00      	nop
 800421e:	3758      	adds	r7, #88	; 0x58
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	2000083c 	.word	0x2000083c
 8004228:	40013400 	.word	0x40013400

0800422c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004230:	4b11      	ldr	r3, [pc, #68]	; (8004278 <MX_USART2_UART_Init+0x4c>)
 8004232:	4a12      	ldr	r2, [pc, #72]	; (800427c <MX_USART2_UART_Init+0x50>)
 8004234:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8004236:	4b10      	ldr	r3, [pc, #64]	; (8004278 <MX_USART2_UART_Init+0x4c>)
 8004238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800423c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <MX_USART2_UART_Init+0x4c>)
 8004240:	2200      	movs	r2, #0
 8004242:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004244:	4b0c      	ldr	r3, [pc, #48]	; (8004278 <MX_USART2_UART_Init+0x4c>)
 8004246:	2200      	movs	r2, #0
 8004248:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <MX_USART2_UART_Init+0x4c>)
 800424c:	2200      	movs	r2, #0
 800424e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004250:	4b09      	ldr	r3, [pc, #36]	; (8004278 <MX_USART2_UART_Init+0x4c>)
 8004252:	220c      	movs	r2, #12
 8004254:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004256:	4b08      	ldr	r3, [pc, #32]	; (8004278 <MX_USART2_UART_Init+0x4c>)
 8004258:	2200      	movs	r2, #0
 800425a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800425c:	4b06      	ldr	r3, [pc, #24]	; (8004278 <MX_USART2_UART_Init+0x4c>)
 800425e:	2200      	movs	r2, #0
 8004260:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8004262:	4805      	ldr	r0, [pc, #20]	; (8004278 <MX_USART2_UART_Init+0x4c>)
 8004264:	f005 f8a7 	bl	80093b6 <HAL_UART_Init>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <MX_USART2_UART_Init+0x46>
			{
		Error_Handler();
 800426e:	f000 fa05 	bl	800467c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	20000884 	.word	0x20000884
 800427c:	40004400 	.word	0x40004400

08004280 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8004284:	4b11      	ldr	r3, [pc, #68]	; (80042cc <MX_USART3_UART_Init+0x4c>)
 8004286:	4a12      	ldr	r2, [pc, #72]	; (80042d0 <MX_USART3_UART_Init+0x50>)
 8004288:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 800428a:	4b10      	ldr	r3, [pc, #64]	; (80042cc <MX_USART3_UART_Init+0x4c>)
 800428c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004290:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004292:	4b0e      	ldr	r3, [pc, #56]	; (80042cc <MX_USART3_UART_Init+0x4c>)
 8004294:	2200      	movs	r2, #0
 8004296:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8004298:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <MX_USART3_UART_Init+0x4c>)
 800429a:	2200      	movs	r2, #0
 800429c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800429e:	4b0b      	ldr	r3, [pc, #44]	; (80042cc <MX_USART3_UART_Init+0x4c>)
 80042a0:	2200      	movs	r2, #0
 80042a2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80042a4:	4b09      	ldr	r3, [pc, #36]	; (80042cc <MX_USART3_UART_Init+0x4c>)
 80042a6:	220c      	movs	r2, #12
 80042a8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042aa:	4b08      	ldr	r3, [pc, #32]	; (80042cc <MX_USART3_UART_Init+0x4c>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80042b0:	4b06      	ldr	r3, [pc, #24]	; (80042cc <MX_USART3_UART_Init+0x4c>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80042b6:	4805      	ldr	r0, [pc, #20]	; (80042cc <MX_USART3_UART_Init+0x4c>)
 80042b8:	f005 f87d 	bl	80093b6 <HAL_UART_Init>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <MX_USART3_UART_Init+0x46>
			{
		Error_Handler();
 80042c2:	f000 f9db 	bl	800467c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80042c6:	bf00      	nop
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200008c8 	.word	0x200008c8
 80042d0:	40004800 	.word	0x40004800

080042d4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80042da:	4b10      	ldr	r3, [pc, #64]	; (800431c <MX_DMA_Init+0x48>)
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	4a0f      	ldr	r2, [pc, #60]	; (800431c <MX_DMA_Init+0x48>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	6153      	str	r3, [r2, #20]
 80042e6:	4b0d      	ldr	r3, [pc, #52]	; (800431c <MX_DMA_Init+0x48>)
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	607b      	str	r3, [r7, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 3, 0);
 80042f2:	2200      	movs	r2, #0
 80042f4:	2103      	movs	r1, #3
 80042f6:	200d      	movs	r0, #13
 80042f8:	f002 f829 	bl	800634e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80042fc:	200d      	movs	r0, #13
 80042fe:	f002 f842 	bl	8006386 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 3, 0);
 8004302:	2200      	movs	r2, #0
 8004304:	2103      	movs	r1, #3
 8004306:	2010      	movs	r0, #16
 8004308:	f002 f821 	bl	800634e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800430c:	2010      	movs	r0, #16
 800430e:	f002 f83a 	bl	8006386 <HAL_NVIC_EnableIRQ>

}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40021000 	.word	0x40021000

08004320 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004326:	f107 0310 	add.w	r3, r7, #16
 800432a:	2200      	movs	r2, #0
 800432c:	601a      	str	r2, [r3, #0]
 800432e:	605a      	str	r2, [r3, #4]
 8004330:	609a      	str	r2, [r3, #8]
 8004332:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004334:	4b23      	ldr	r3, [pc, #140]	; (80043c4 <MX_GPIO_Init+0xa4>)
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	4a22      	ldr	r2, [pc, #136]	; (80043c4 <MX_GPIO_Init+0xa4>)
 800433a:	f043 0320 	orr.w	r3, r3, #32
 800433e:	6193      	str	r3, [r2, #24]
 8004340:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <MX_GPIO_Init+0xa4>)
 8004342:	699b      	ldr	r3, [r3, #24]
 8004344:	f003 0320 	and.w	r3, r3, #32
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800434c:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <MX_GPIO_Init+0xa4>)
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	4a1c      	ldr	r2, [pc, #112]	; (80043c4 <MX_GPIO_Init+0xa4>)
 8004352:	f043 0304 	orr.w	r3, r3, #4
 8004356:	6193      	str	r3, [r2, #24]
 8004358:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <MX_GPIO_Init+0xa4>)
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004364:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <MX_GPIO_Init+0xa4>)
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	4a16      	ldr	r2, [pc, #88]	; (80043c4 <MX_GPIO_Init+0xa4>)
 800436a:	f043 0308 	orr.w	r3, r3, #8
 800436e:	6193      	str	r3, [r2, #24]
 8004370:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <MX_GPIO_Init+0xa4>)
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	f003 0308 	and.w	r3, r3, #8
 8004378:	607b      	str	r3, [r7, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <MX_GPIO_Init+0xa4>)
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	4a10      	ldr	r2, [pc, #64]	; (80043c4 <MX_GPIO_Init+0xa4>)
 8004382:	f043 0310 	orr.w	r3, r3, #16
 8004386:	6193      	str	r3, [r2, #24]
 8004388:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <MX_GPIO_Init+0xa4>)
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f003 0310 	and.w	r3, r3, #16
 8004390:	603b      	str	r3, [r7, #0]
 8004392:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 8004394:	2200      	movs	r2, #0
 8004396:	2107      	movs	r1, #7
 8004398:	480b      	ldr	r0, [pc, #44]	; (80043c8 <MX_GPIO_Init+0xa8>)
 800439a:	f002 fe25 	bl	8006fe8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 800439e:	2307      	movs	r3, #7
 80043a0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043a2:	2301      	movs	r3, #1
 80043a4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043aa:	2302      	movs	r3, #2
 80043ac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ae:	f107 0310 	add.w	r3, r7, #16
 80043b2:	4619      	mov	r1, r3
 80043b4:	4804      	ldr	r0, [pc, #16]	; (80043c8 <MX_GPIO_Init+0xa8>)
 80043b6:	f002 fc83 	bl	8006cc0 <HAL_GPIO_Init>

}
 80043ba:	bf00      	nop
 80043bc:	3720      	adds	r7, #32
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40021000 	.word	0x40021000
 80043c8:	40010c00 	.word	0x40010c00

080043cc <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 80043d0:	4b11      	ldr	r3, [pc, #68]	; (8004418 <HUAN_MOTOR1_Init+0x4c>)
 80043d2:	4a12      	ldr	r2, [pc, #72]	; (800441c <HUAN_MOTOR1_Init+0x50>)
 80043d4:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HUAN_MOTOR1_Init+0x4c>)
 80043d8:	4a11      	ldr	r2, [pc, #68]	; (8004420 <HUAN_MOTOR1_Init+0x54>)
 80043da:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 80043dc:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <HUAN_MOTOR1_Init+0x4c>)
 80043de:	4a11      	ldr	r2, [pc, #68]	; (8004424 <HUAN_MOTOR1_Init+0x58>)
 80043e0:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 80043e2:	4b0d      	ldr	r3, [pc, #52]	; (8004418 <HUAN_MOTOR1_Init+0x4c>)
 80043e4:	220c      	movs	r2, #12
 80043e6:	60da      	str	r2, [r3, #12]
//	cmotor_lf.pos_channel = TIM_CHANNEL_3;
	cmotor_lf.negTimer = &htim1;
 80043e8:	4b0b      	ldr	r3, [pc, #44]	; (8004418 <HUAN_MOTOR1_Init+0x4c>)
 80043ea:	4a0e      	ldr	r2, [pc, #56]	; (8004424 <HUAN_MOTOR1_Init+0x58>)
 80043ec:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 80043ee:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <HUAN_MOTOR1_Init+0x4c>)
 80043f0:	2208      	movs	r2, #8
 80043f2:	611a      	str	r2, [r3, #16]
//	cmotor_lf.neg_channel = TIM_CHANNEL_4;
	cmotor_lf.encoderInverted = 1;
 80043f4:	4b08      	ldr	r3, [pc, #32]	; (8004418 <HUAN_MOTOR1_Init+0x4c>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lf.kp = 0.0003;
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HUAN_MOTOR1_Init+0x4c>)
 80043fe:	4a0a      	ldr	r2, [pc, #40]	; (8004428 <HUAN_MOTOR1_Init+0x5c>)
 8004400:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 8004402:	4b05      	ldr	r3, [pc, #20]	; (8004418 <HUAN_MOTOR1_Init+0x4c>)
 8004404:	4a09      	ldr	r2, [pc, #36]	; (800442c <HUAN_MOTOR1_Init+0x60>)
 8004406:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 8004408:	4b03      	ldr	r3, [pc, #12]	; (8004418 <HUAN_MOTOR1_Init+0x4c>)
 800440a:	4a09      	ldr	r2, [pc, #36]	; (8004430 <HUAN_MOTOR1_Init+0x64>)
 800440c:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 800440e:	4802      	ldr	r0, [pc, #8]	; (8004418 <HUAN_MOTOR1_Init+0x4c>)
 8004410:	f7fe f9be 	bl	8002790 <huansic_motor_init>
}
 8004414:	bf00      	nop
 8004416:	bd80      	pop	{r7, pc}
 8004418:	20000994 	.word	0x20000994
 800441c:	200006d4 	.word	0x200006d4
 8004420:	3d4ccccd 	.word	0x3d4ccccd
 8004424:	2000068c 	.word	0x2000068c
 8004428:	399d4952 	.word	0x399d4952
 800442c:	37a7c5ac 	.word	0x37a7c5ac
 8004430:	387ba882 	.word	0x387ba882

08004434 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <HUAN_MOTOR2_Init+0x4c>)
 800443a:	4a12      	ldr	r2, [pc, #72]	; (8004484 <HUAN_MOTOR2_Init+0x50>)
 800443c:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 800443e:	4b10      	ldr	r3, [pc, #64]	; (8004480 <HUAN_MOTOR2_Init+0x4c>)
 8004440:	4a11      	ldr	r2, [pc, #68]	; (8004488 <HUAN_MOTOR2_Init+0x54>)
 8004442:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 8004444:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <HUAN_MOTOR2_Init+0x4c>)
 8004446:	4a11      	ldr	r2, [pc, #68]	; (800448c <HUAN_MOTOR2_Init+0x58>)
 8004448:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <HUAN_MOTOR2_Init+0x4c>)
 800444c:	2200      	movs	r2, #0
 800444e:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 8004450:	4b0b      	ldr	r3, [pc, #44]	; (8004480 <HUAN_MOTOR2_Init+0x4c>)
 8004452:	4a0e      	ldr	r2, [pc, #56]	; (800448c <HUAN_MOTOR2_Init+0x58>)
 8004454:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 8004456:	4b0a      	ldr	r3, [pc, #40]	; (8004480 <HUAN_MOTOR2_Init+0x4c>)
 8004458:	2204      	movs	r2, #4
 800445a:	611a      	str	r2, [r3, #16]
	cmotor_rf.encoderInverted = 0;
 800445c:	4b08      	ldr	r3, [pc, #32]	; (8004480 <HUAN_MOTOR2_Init+0x4c>)
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rf.kp = 0.0003;
 8004464:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HUAN_MOTOR2_Init+0x4c>)
 8004466:	4a0a      	ldr	r2, [pc, #40]	; (8004490 <HUAN_MOTOR2_Init+0x5c>)
 8004468:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HUAN_MOTOR2_Init+0x4c>)
 800446c:	4a09      	ldr	r2, [pc, #36]	; (8004494 <HUAN_MOTOR2_Init+0x60>)
 800446e:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 8004470:	4b03      	ldr	r3, [pc, #12]	; (8004480 <HUAN_MOTOR2_Init+0x4c>)
 8004472:	4a09      	ldr	r2, [pc, #36]	; (8004498 <HUAN_MOTOR2_Init+0x64>)
 8004474:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 8004476:	4802      	ldr	r0, [pc, #8]	; (8004480 <HUAN_MOTOR2_Init+0x4c>)
 8004478:	f7fe f98a 	bl	8002790 <huansic_motor_init>
}
 800447c:	bf00      	nop
 800447e:	bd80      	pop	{r7, pc}
 8004480:	200009d0 	.word	0x200009d0
 8004484:	20000764 	.word	0x20000764
 8004488:	3d4ccccd 	.word	0x3d4ccccd
 800448c:	2000068c 	.word	0x2000068c
 8004490:	399d4952 	.word	0x399d4952
 8004494:	37a7c5ac 	.word	0x37a7c5ac
 8004498:	387ba882 	.word	0x387ba882

0800449c <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <HUAN_MOTOR3_Init+0x4c>)
 80044a2:	4a12      	ldr	r2, [pc, #72]	; (80044ec <HUAN_MOTOR3_Init+0x50>)
 80044a4:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 80044a6:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <HUAN_MOTOR3_Init+0x4c>)
 80044a8:	4a11      	ldr	r2, [pc, #68]	; (80044f0 <HUAN_MOTOR3_Init+0x54>)
 80044aa:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 80044ac:	4b0e      	ldr	r3, [pc, #56]	; (80044e8 <HUAN_MOTOR3_Init+0x4c>)
 80044ae:	4a11      	ldr	r2, [pc, #68]	; (80044f4 <HUAN_MOTOR3_Init+0x58>)
 80044b0:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 80044b2:	4b0d      	ldr	r3, [pc, #52]	; (80044e8 <HUAN_MOTOR3_Init+0x4c>)
 80044b4:	220c      	movs	r2, #12
 80044b6:	60da      	str	r2, [r3, #12]
//	cmotor_lb.pos_channel = TIM_CHANNEL_3;
	cmotor_lb.negTimer = &htim8;
 80044b8:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HUAN_MOTOR3_Init+0x4c>)
 80044ba:	4a0e      	ldr	r2, [pc, #56]	; (80044f4 <HUAN_MOTOR3_Init+0x58>)
 80044bc:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <HUAN_MOTOR3_Init+0x4c>)
 80044c0:	2208      	movs	r2, #8
 80044c2:	611a      	str	r2, [r3, #16]
//	cmotor_lb.neg_channel = TIM_CHANNEL_4;
	cmotor_lb.encoderInverted = 1;
 80044c4:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <HUAN_MOTOR3_Init+0x4c>)
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.kp = 0.0003;
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HUAN_MOTOR3_Init+0x4c>)
 80044ce:	4a0a      	ldr	r2, [pc, #40]	; (80044f8 <HUAN_MOTOR3_Init+0x5c>)
 80044d0:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HUAN_MOTOR3_Init+0x4c>)
 80044d4:	4a09      	ldr	r2, [pc, #36]	; (80044fc <HUAN_MOTOR3_Init+0x60>)
 80044d6:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 80044d8:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <HUAN_MOTOR3_Init+0x4c>)
 80044da:	4a09      	ldr	r2, [pc, #36]	; (8004500 <HUAN_MOTOR3_Init+0x64>)
 80044dc:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 80044de:	4802      	ldr	r0, [pc, #8]	; (80044e8 <HUAN_MOTOR3_Init+0x4c>)
 80044e0:	f7fe f956 	bl	8002790 <huansic_motor_init>
}
 80044e4:	bf00      	nop
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20000a0c 	.word	0x20000a0c
 80044ec:	2000071c 	.word	0x2000071c
 80044f0:	3d4ccccd 	.word	0x3d4ccccd
 80044f4:	2000083c 	.word	0x2000083c
 80044f8:	399d4952 	.word	0x399d4952
 80044fc:	37a7c5ac 	.word	0x37a7c5ac
 8004500:	387ba882 	.word	0x387ba882

08004504 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 8004508:	4b11      	ldr	r3, [pc, #68]	; (8004550 <HUAN_MOTOR4_Init+0x4c>)
 800450a:	4a12      	ldr	r2, [pc, #72]	; (8004554 <HUAN_MOTOR4_Init+0x50>)
 800450c:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 800450e:	4b10      	ldr	r3, [pc, #64]	; (8004550 <HUAN_MOTOR4_Init+0x4c>)
 8004510:	4a11      	ldr	r2, [pc, #68]	; (8004558 <HUAN_MOTOR4_Init+0x54>)
 8004512:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 8004514:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <HUAN_MOTOR4_Init+0x4c>)
 8004516:	4a11      	ldr	r2, [pc, #68]	; (800455c <HUAN_MOTOR4_Init+0x58>)
 8004518:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 800451a:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <HUAN_MOTOR4_Init+0x4c>)
 800451c:	2200      	movs	r2, #0
 800451e:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 8004520:	4b0b      	ldr	r3, [pc, #44]	; (8004550 <HUAN_MOTOR4_Init+0x4c>)
 8004522:	4a0e      	ldr	r2, [pc, #56]	; (800455c <HUAN_MOTOR4_Init+0x58>)
 8004524:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 8004526:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HUAN_MOTOR4_Init+0x4c>)
 8004528:	2204      	movs	r2, #4
 800452a:	611a      	str	r2, [r3, #16]
	cmotor_rb.encoderInverted = 0;
 800452c:	4b08      	ldr	r3, [pc, #32]	; (8004550 <HUAN_MOTOR4_Init+0x4c>)
 800452e:	2200      	movs	r2, #0
 8004530:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rb.kp = 0.0003;
 8004534:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HUAN_MOTOR4_Init+0x4c>)
 8004536:	4a0a      	ldr	r2, [pc, #40]	; (8004560 <HUAN_MOTOR4_Init+0x5c>)
 8004538:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 800453a:	4b05      	ldr	r3, [pc, #20]	; (8004550 <HUAN_MOTOR4_Init+0x4c>)
 800453c:	4a09      	ldr	r2, [pc, #36]	; (8004564 <HUAN_MOTOR4_Init+0x60>)
 800453e:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 8004540:	4b03      	ldr	r3, [pc, #12]	; (8004550 <HUAN_MOTOR4_Init+0x4c>)
 8004542:	4a09      	ldr	r2, [pc, #36]	; (8004568 <HUAN_MOTOR4_Init+0x64>)
 8004544:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 8004546:	4802      	ldr	r0, [pc, #8]	; (8004550 <HUAN_MOTOR4_Init+0x4c>)
 8004548:	f7fe f922 	bl	8002790 <huansic_motor_init>
}
 800454c:	bf00      	nop
 800454e:	bd80      	pop	{r7, pc}
 8004550:	20000a48 	.word	0x20000a48
 8004554:	200007ac 	.word	0x200007ac
 8004558:	3d4ccccd 	.word	0x3d4ccccd
 800455c:	2000083c 	.word	0x2000083c
 8004560:	399d4952 	.word	0x399d4952
 8004564:	37a7c5ac 	.word	0x37a7c5ac
 8004568:	387ba882 	.word	0x387ba882

0800456c <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
	himu.huart = &huart3;
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HUAN_IMU_Init+0x1c>)
 8004572:	4a06      	ldr	r2, [pc, #24]	; (800458c <HUAN_IMU_Init+0x20>)
 8004574:	601a      	str	r2, [r3, #0]
	himu.hdma = &hdma_usart3_rx;
 8004576:	4b04      	ldr	r3, [pc, #16]	; (8004588 <HUAN_IMU_Init+0x1c>)
 8004578:	4a05      	ldr	r2, [pc, #20]	; (8004590 <HUAN_IMU_Init+0x24>)
 800457a:	605a      	str	r2, [r3, #4]
	huansic_jy62_init(&himu);
 800457c:	4802      	ldr	r0, [pc, #8]	; (8004588 <HUAN_IMU_Init+0x1c>)
 800457e:	f7fd fd75 	bl	800206c <huansic_jy62_init>
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000a84 	.word	0x20000a84
 800458c:	200008c8 	.word	0x200008c8
 8004590:	20000950 	.word	0x20000950

08004594 <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
	hxb.huart = &huart2;
 8004598:	4b05      	ldr	r3, [pc, #20]	; (80045b0 <HUAN_ZIGBEE_Init+0x1c>)
 800459a:	4a06      	ldr	r2, [pc, #24]	; (80045b4 <HUAN_ZIGBEE_Init+0x20>)
 800459c:	601a      	str	r2, [r3, #0]
	hxb.hdma = &hdma_usart2_rx;
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <HUAN_ZIGBEE_Init+0x1c>)
 80045a0:	4a05      	ldr	r2, [pc, #20]	; (80045b8 <HUAN_ZIGBEE_Init+0x24>)
 80045a2:	605a      	str	r2, [r3, #4]
	huansic_xb_init(&hxb);
 80045a4:	4802      	ldr	r0, [pc, #8]	; (80045b0 <HUAN_ZIGBEE_Init+0x1c>)
 80045a6:	f7fe fb1b 	bl	8002be0 <huansic_xb_init>
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000adc 	.word	0x20000adc
 80045b4:	20000884 	.word	0x20000884
 80045b8:	2000090c 	.word	0x2000090c

080045bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 80045c4:	4b13      	ldr	r3, [pc, #76]	; (8004614 <HAL_UART_RxCpltCallback+0x58>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d10c      	bne.n	80045e8 <HAL_UART_RxCpltCallback+0x2c>
		if (himu.pending_alignment)
 80045ce:	4b11      	ldr	r3, [pc, #68]	; (8004614 <HAL_UART_RxCpltCallback+0x58>)
 80045d0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_UART_RxCpltCallback+0x24>
			huansic_jy62_isr(&himu);
 80045d8:	480e      	ldr	r0, [pc, #56]	; (8004614 <HAL_UART_RxCpltCallback+0x58>)
 80045da:	f7fd fe9d 	bl	8002318 <huansic_jy62_isr>
		if(hxb.pending_alignment)
			huansic_xb_isr(&hxb);
		else
			huansic_xb_dma_isr(&hxb);
	}
}
 80045de:	e014      	b.n	800460a <HAL_UART_RxCpltCallback+0x4e>
			huansic_jy62_dma_isr(&himu);
 80045e0:	480c      	ldr	r0, [pc, #48]	; (8004614 <HAL_UART_RxCpltCallback+0x58>)
 80045e2:	f7fd fd79 	bl	80020d8 <huansic_jy62_dma_isr>
}
 80045e6:	e010      	b.n	800460a <HAL_UART_RxCpltCallback+0x4e>
	} else if (hxb.huart == huart) {
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <HAL_UART_RxCpltCallback+0x5c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d10b      	bne.n	800460a <HAL_UART_RxCpltCallback+0x4e>
		if(hxb.pending_alignment)
 80045f2:	4b09      	ldr	r3, [pc, #36]	; (8004618 <HAL_UART_RxCpltCallback+0x5c>)
 80045f4:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_UART_RxCpltCallback+0x48>
			huansic_xb_isr(&hxb);
 80045fc:	4806      	ldr	r0, [pc, #24]	; (8004618 <HAL_UART_RxCpltCallback+0x5c>)
 80045fe:	f7ff f85b 	bl	80036b8 <huansic_xb_isr>
}
 8004602:	e002      	b.n	800460a <HAL_UART_RxCpltCallback+0x4e>
			huansic_xb_dma_isr(&hxb);
 8004604:	4804      	ldr	r0, [pc, #16]	; (8004618 <HAL_UART_RxCpltCallback+0x5c>)
 8004606:	f7ff f89a 	bl	800373e <huansic_xb_dma_isr>
}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000a84 	.word	0x20000a84
 8004618:	20000adc 	.word	0x20000adc

0800461c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8004624:	4b13      	ldr	r3, [pc, #76]	; (8004674 <HAL_UART_ErrorCallback+0x58>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	429a      	cmp	r2, r3
 800462c:	d10c      	bne.n	8004648 <HAL_UART_ErrorCallback+0x2c>
		if (himu.pending_alignment)
 800462e:	4b11      	ldr	r3, [pc, #68]	; (8004674 <HAL_UART_ErrorCallback+0x58>)
 8004630:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <HAL_UART_ErrorCallback+0x24>
			huansic_jy62_error(&himu);
 8004638:	480e      	ldr	r0, [pc, #56]	; (8004674 <HAL_UART_ErrorCallback+0x58>)
 800463a:	f7fd feb8 	bl	80023ae <huansic_jy62_error>
		if (hxb.pending_alignment)
			huansic_xb_it_error(&hxb);
		else
			huansic_xb_dma_error(&hxb);
	}
}
 800463e:	e014      	b.n	800466a <HAL_UART_ErrorCallback+0x4e>
			huansic_jy62_dma_error(&himu);
 8004640:	480c      	ldr	r0, [pc, #48]	; (8004674 <HAL_UART_ErrorCallback+0x58>)
 8004642:	f7fd fea0 	bl	8002386 <huansic_jy62_dma_error>
}
 8004646:	e010      	b.n	800466a <HAL_UART_ErrorCallback+0x4e>
	} else if (hxb.huart == huart) {
 8004648:	4b0b      	ldr	r3, [pc, #44]	; (8004678 <HAL_UART_ErrorCallback+0x5c>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	429a      	cmp	r2, r3
 8004650:	d10b      	bne.n	800466a <HAL_UART_ErrorCallback+0x4e>
		if (hxb.pending_alignment)
 8004652:	4b09      	ldr	r3, [pc, #36]	; (8004678 <HAL_UART_ErrorCallback+0x5c>)
 8004654:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_UART_ErrorCallback+0x48>
			huansic_xb_it_error(&hxb);
 800465c:	4806      	ldr	r0, [pc, #24]	; (8004678 <HAL_UART_ErrorCallback+0x5c>)
 800465e:	f7ff f817 	bl	8003690 <huansic_xb_it_error>
}
 8004662:	e002      	b.n	800466a <HAL_UART_ErrorCallback+0x4e>
			huansic_xb_dma_error(&hxb);
 8004664:	4804      	ldr	r0, [pc, #16]	; (8004678 <HAL_UART_ErrorCallback+0x5c>)
 8004666:	f7fe ffff 	bl	8003668 <huansic_xb_dma_error>
}
 800466a:	bf00      	nop
 800466c:	3708      	adds	r7, #8
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	20000a84 	.word	0x20000a84
 8004678:	20000adc 	.word	0x20000adc

0800467c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800467c:	b480      	push	{r7}
 800467e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004680:	b672      	cpsid	i
}
 8004682:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004684:	e7fe      	b.n	8004684 <Error_Handler+0x8>
	...

08004688 <Lane_init>:
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
 800468c:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <Lane_init+0x18>)
 800468e:	2200      	movs	r2, #0
 8004690:	801a      	strh	r2, [r3, #0]
 8004692:	4b03      	ldr	r3, [pc, #12]	; (80046a0 <Lane_init+0x18>)
 8004694:	2200      	movs	r2, #0
 8004696:	805a      	strh	r2, [r3, #2]
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	bc80      	pop	{r7}
 800469e:	4770      	bx	lr
 80046a0:	20007c24 	.word	0x20007c24

080046a4 <queue_append>:
 80046a4:	b590      	push	{r4, r7, lr}
 80046a6:	b087      	sub	sp, #28
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	4b41      	ldr	r3, [pc, #260]	; (80047b4 <queue_append+0x110>)
 80046ae:	885b      	ldrh	r3, [r3, #2]
 80046b0:	461a      	mov	r2, r3
 80046b2:	4b40      	ldr	r3, [pc, #256]	; (80047b4 <queue_append+0x110>)
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	4413      	add	r3, r2
 80046b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046bc:	db01      	blt.n	80046c2 <queue_append+0x1e>
 80046be:	2300      	movs	r3, #0
 80046c0:	e073      	b.n	80047aa <queue_append+0x106>
 80046c2:	2300      	movs	r3, #0
 80046c4:	82fb      	strh	r3, [r7, #22]
 80046c6:	e052      	b.n	800476e <queue_append+0xca>
 80046c8:	8afb      	ldrh	r3, [r7, #22]
 80046ca:	4a3a      	ldr	r2, [pc, #232]	; (80047b4 <queue_append+0x110>)
 80046cc:	8812      	ldrh	r2, [r2, #0]
 80046ce:	441a      	add	r2, r3
 80046d0:	4938      	ldr	r1, [pc, #224]	; (80047b4 <queue_append+0x110>)
 80046d2:	4613      	mov	r3, r2
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	4413      	add	r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	f8d3 300a 	ldr.w	r3, [r3, #10]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	f8d2 2006 	ldr.w	r2, [r2, #6]
 80046e6:	4611      	mov	r1, r2
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fc fd21 	bl	8001130 <__aeabi_fcmple>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d003      	beq.n	80046fc <queue_append+0x58>
 80046f4:	8afb      	ldrh	r3, [r7, #22]
 80046f6:	3301      	adds	r3, #1
 80046f8:	82fb      	strh	r3, [r7, #22]
 80046fa:	e038      	b.n	800476e <queue_append+0xca>
 80046fc:	e02a      	b.n	8004754 <queue_append+0xb0>
 80046fe:	8afb      	ldrh	r3, [r7, #22]
 8004700:	4a2c      	ldr	r2, [pc, #176]	; (80047b4 <queue_append+0x110>)
 8004702:	8812      	ldrh	r2, [r2, #0]
 8004704:	441a      	add	r2, r3
 8004706:	492b      	ldr	r1, [pc, #172]	; (80047b4 <queue_append+0x110>)
 8004708:	4613      	mov	r3, r2
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	18ca      	adds	r2, r1, r3
 8004712:	f107 0308 	add.w	r3, r7, #8
 8004716:	3204      	adds	r2, #4
 8004718:	ca07      	ldmia	r2, {r0, r1, r2}
 800471a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800471e:	8afb      	ldrh	r3, [r7, #22]
 8004720:	4a24      	ldr	r2, [pc, #144]	; (80047b4 <queue_append+0x110>)
 8004722:	8812      	ldrh	r2, [r2, #0]
 8004724:	441a      	add	r2, r3
 8004726:	4923      	ldr	r1, [pc, #140]	; (80047b4 <queue_append+0x110>)
 8004728:	4613      	mov	r3, r2
 800472a:	005b      	lsls	r3, r3, #1
 800472c:	4413      	add	r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	3304      	adds	r3, #4
 8004736:	6810      	ldr	r0, [r2, #0]
 8004738:	6851      	ldr	r1, [r2, #4]
 800473a:	6892      	ldr	r2, [r2, #8]
 800473c:	c307      	stmia	r3!, {r0, r1, r2}
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	461c      	mov	r4, r3
 8004742:	f107 0308 	add.w	r3, r7, #8
 8004746:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004748:	6020      	str	r0, [r4, #0]
 800474a:	6061      	str	r1, [r4, #4]
 800474c:	60a2      	str	r2, [r4, #8]
 800474e:	8afb      	ldrh	r3, [r7, #22]
 8004750:	3301      	adds	r3, #1
 8004752:	82fb      	strh	r3, [r7, #22]
 8004754:	4b17      	ldr	r3, [pc, #92]	; (80047b4 <queue_append+0x110>)
 8004756:	885b      	ldrh	r3, [r3, #2]
 8004758:	8afa      	ldrh	r2, [r7, #22]
 800475a:	429a      	cmp	r2, r3
 800475c:	d9cf      	bls.n	80046fe <queue_append+0x5a>
 800475e:	4b15      	ldr	r3, [pc, #84]	; (80047b4 <queue_append+0x110>)
 8004760:	885b      	ldrh	r3, [r3, #2]
 8004762:	3301      	adds	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	4b13      	ldr	r3, [pc, #76]	; (80047b4 <queue_append+0x110>)
 8004768:	805a      	strh	r2, [r3, #2]
 800476a:	2301      	movs	r3, #1
 800476c:	e01d      	b.n	80047aa <queue_append+0x106>
 800476e:	4b11      	ldr	r3, [pc, #68]	; (80047b4 <queue_append+0x110>)
 8004770:	885b      	ldrh	r3, [r3, #2]
 8004772:	8afa      	ldrh	r2, [r7, #22]
 8004774:	429a      	cmp	r2, r3
 8004776:	d3a7      	bcc.n	80046c8 <queue_append+0x24>
 8004778:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <queue_append+0x110>)
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	4b0d      	ldr	r3, [pc, #52]	; (80047b4 <queue_append+0x110>)
 8004780:	885b      	ldrh	r3, [r3, #2]
 8004782:	441a      	add	r2, r3
 8004784:	490b      	ldr	r1, [pc, #44]	; (80047b4 <queue_append+0x110>)
 8004786:	4613      	mov	r3, r2
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	4413      	add	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	440b      	add	r3, r1
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	6810      	ldr	r0, [r2, #0]
 8004796:	6851      	ldr	r1, [r2, #4]
 8004798:	6892      	ldr	r2, [r2, #8]
 800479a:	c307      	stmia	r3!, {r0, r1, r2}
 800479c:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <queue_append+0x110>)
 800479e:	885b      	ldrh	r3, [r3, #2]
 80047a0:	3301      	adds	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	4b03      	ldr	r3, [pc, #12]	; (80047b4 <queue_append+0x110>)
 80047a6:	805a      	strh	r2, [r3, #2]
 80047a8:	2301      	movs	r3, #1
 80047aa:	4618      	mov	r0, r3
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd90      	pop	{r4, r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000c18 	.word	0x20000c18

080047b8 <list_append>:
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	80fb      	strh	r3, [r7, #6]
 80047c2:	4b13      	ldr	r3, [pc, #76]	; (8004810 <list_append+0x58>)
 80047c4:	889b      	ldrh	r3, [r3, #4]
 80047c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ca:	d301      	bcc.n	80047d0 <list_append+0x18>
 80047cc:	2300      	movs	r3, #0
 80047ce:	e01a      	b.n	8004806 <list_append+0x4e>
 80047d0:	4b0f      	ldr	r3, [pc, #60]	; (8004810 <list_append+0x58>)
 80047d2:	885b      	ldrh	r3, [r3, #2]
 80047d4:	4a0e      	ldr	r2, [pc, #56]	; (8004810 <list_append+0x58>)
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	4413      	add	r3, r2
 80047da:	88fa      	ldrh	r2, [r7, #6]
 80047dc:	80da      	strh	r2, [r3, #6]
 80047de:	4b0c      	ldr	r3, [pc, #48]	; (8004810 <list_append+0x58>)
 80047e0:	885b      	ldrh	r3, [r3, #2]
 80047e2:	3301      	adds	r3, #1
 80047e4:	425a      	negs	r2, r3
 80047e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047ea:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80047ee:	bf58      	it	pl
 80047f0:	4253      	negpl	r3, r2
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	4b06      	ldr	r3, [pc, #24]	; (8004810 <list_append+0x58>)
 80047f6:	805a      	strh	r2, [r3, #2]
 80047f8:	4b05      	ldr	r3, [pc, #20]	; (8004810 <list_append+0x58>)
 80047fa:	889b      	ldrh	r3, [r3, #4]
 80047fc:	3301      	adds	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	4b03      	ldr	r3, [pc, #12]	; (8004810 <list_append+0x58>)
 8004802:	809a      	strh	r2, [r3, #4]
 8004804:	2301      	movs	r3, #1
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr
 8004810:	20006c1c 	.word	0x20006c1c

08004814 <queue_top>:
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
 8004818:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <queue_top+0x3c>)
 800481a:	885b      	ldrh	r3, [r3, #2]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d010      	beq.n	8004842 <queue_top+0x2e>
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <queue_top+0x3c>)
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	3301      	adds	r3, #1
 8004826:	b29a      	uxth	r2, r3
 8004828:	4b09      	ldr	r3, [pc, #36]	; (8004850 <queue_top+0x3c>)
 800482a:	801a      	strh	r2, [r3, #0]
 800482c:	4b08      	ldr	r3, [pc, #32]	; (8004850 <queue_top+0x3c>)
 800482e:	885b      	ldrh	r3, [r3, #2]
 8004830:	3b01      	subs	r3, #1
 8004832:	b29a      	uxth	r2, r3
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <queue_top+0x3c>)
 8004836:	805a      	strh	r2, [r3, #2]
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <queue_top+0x3c>)
 800483a:	881b      	ldrh	r3, [r3, #0]
 800483c:	3b01      	subs	r3, #1
 800483e:	b29b      	uxth	r3, r3
 8004840:	e001      	b.n	8004846 <queue_top+0x32>
 8004842:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004846:	4618      	mov	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	bc80      	pop	{r7}
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	20000c18 	.word	0x20000c18

08004854 <findin_queue>:
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	80fb      	strh	r3, [r7, #6]
 800485e:	2300      	movs	r3, #0
 8004860:	81fb      	strh	r3, [r7, #14]
 8004862:	e017      	b.n	8004894 <findin_queue+0x40>
 8004864:	89fb      	ldrh	r3, [r7, #14]
 8004866:	4a11      	ldr	r2, [pc, #68]	; (80048ac <findin_queue+0x58>)
 8004868:	8812      	ldrh	r2, [r2, #0]
 800486a:	441a      	add	r2, r3
 800486c:	490f      	ldr	r1, [pc, #60]	; (80048ac <findin_queue+0x58>)
 800486e:	4613      	mov	r3, r2
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	4413      	add	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	3304      	adds	r3, #4
 800487a:	881b      	ldrh	r3, [r3, #0]
 800487c:	88fa      	ldrh	r2, [r7, #6]
 800487e:	429a      	cmp	r2, r3
 8004880:	d105      	bne.n	800488e <findin_queue+0x3a>
 8004882:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <findin_queue+0x58>)
 8004884:	881a      	ldrh	r2, [r3, #0]
 8004886:	89fb      	ldrh	r3, [r7, #14]
 8004888:	4413      	add	r3, r2
 800488a:	b29b      	uxth	r3, r3
 800488c:	e008      	b.n	80048a0 <findin_queue+0x4c>
 800488e:	89fb      	ldrh	r3, [r7, #14]
 8004890:	3301      	adds	r3, #1
 8004892:	81fb      	strh	r3, [r7, #14]
 8004894:	4b05      	ldr	r3, [pc, #20]	; (80048ac <findin_queue+0x58>)
 8004896:	885b      	ldrh	r3, [r3, #2]
 8004898:	89fa      	ldrh	r2, [r7, #14]
 800489a:	429a      	cmp	r2, r3
 800489c:	d3e2      	bcc.n	8004864 <findin_queue+0x10>
 800489e:	2300      	movs	r3, #0
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000c18 	.word	0x20000c18

080048b0 <findin_list>:
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	80fb      	strh	r3, [r7, #6]
 80048ba:	2300      	movs	r3, #0
 80048bc:	81fb      	strh	r3, [r7, #14]
 80048be:	e00f      	b.n	80048e0 <findin_list+0x30>
 80048c0:	89fb      	ldrh	r3, [r7, #14]
 80048c2:	4a0d      	ldr	r2, [pc, #52]	; (80048f8 <findin_list+0x48>)
 80048c4:	8812      	ldrh	r2, [r2, #0]
 80048c6:	4413      	add	r3, r2
 80048c8:	4a0b      	ldr	r2, [pc, #44]	; (80048f8 <findin_list+0x48>)
 80048ca:	005b      	lsls	r3, r3, #1
 80048cc:	4413      	add	r3, r2
 80048ce:	88db      	ldrh	r3, [r3, #6]
 80048d0:	88fa      	ldrh	r2, [r7, #6]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d101      	bne.n	80048da <findin_list+0x2a>
 80048d6:	2301      	movs	r3, #1
 80048d8:	e008      	b.n	80048ec <findin_list+0x3c>
 80048da:	89fb      	ldrh	r3, [r7, #14]
 80048dc:	3301      	adds	r3, #1
 80048de:	81fb      	strh	r3, [r7, #14]
 80048e0:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <findin_list+0x48>)
 80048e2:	889b      	ldrh	r3, [r3, #4]
 80048e4:	89fa      	ldrh	r2, [r7, #14]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d3ea      	bcc.n	80048c0 <findin_list+0x10>
 80048ea:	2300      	movs	r3, #0
 80048ec:	4618      	mov	r0, r3
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bc80      	pop	{r7}
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	20006c1c 	.word	0x20006c1c

080048fc <editcost>:
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	4603      	mov	r3, r0
 8004904:	6039      	str	r1, [r7, #0]
 8004906:	80fb      	strh	r3, [r7, #6]
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	4920      	ldr	r1, [pc, #128]	; (800498c <editcost+0x90>)
 800490c:	4613      	mov	r3, r2
 800490e:	005b      	lsls	r3, r3, #1
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	440b      	add	r3, r1
 8004916:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	f8d2 2006 	ldr.w	r2, [r2, #6]
 8004920:	4611      	mov	r1, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f7fc fc18 	bl	8001158 <__aeabi_fcmpgt>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d100      	bne.n	8004930 <editcost+0x34>
 800492e:	e029      	b.n	8004984 <editcost+0x88>
 8004930:	88fa      	ldrh	r2, [r7, #6]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	f8d3 1006 	ldr.w	r1, [r3, #6]
 8004938:	460b      	mov	r3, r1
 800493a:	4619      	mov	r1, r3
 800493c:	4813      	ldr	r0, [pc, #76]	; (800498c <editcost+0x90>)
 800493e:	4613      	mov	r3, r2
 8004940:	005b      	lsls	r3, r3, #1
 8004942:	4413      	add	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4403      	add	r3, r0
 8004948:	460a      	mov	r2, r1
 800494a:	f8c3 200a 	str.w	r2, [r3, #10]
 800494e:	88fa      	ldrh	r2, [r7, #6]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f8d3 1002 	ldr.w	r1, [r3, #2]
 8004956:	460b      	mov	r3, r1
 8004958:	4619      	mov	r1, r3
 800495a:	480c      	ldr	r0, [pc, #48]	; (800498c <editcost+0x90>)
 800495c:	4613      	mov	r3, r2
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	4413      	add	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4403      	add	r3, r0
 8004966:	460a      	mov	r2, r1
 8004968:	f8c3 2006 	str.w	r2, [r3, #6]
 800496c:	88fa      	ldrh	r2, [r7, #6]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	8958      	ldrh	r0, [r3, #10]
 8004972:	4906      	ldr	r1, [pc, #24]	; (800498c <editcost+0x90>)
 8004974:	4613      	mov	r3, r2
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	330e      	adds	r3, #14
 8004980:	4602      	mov	r2, r0
 8004982:	801a      	strh	r2, [r3, #0]
 8004984:	bf00      	nop
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	20000c18 	.word	0x20000c18

08004990 <Insert_inLane>:
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	70fb      	strb	r3, [r7, #3]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <Insert_inLane+0x16>
 80049a2:	2300      	movs	r3, #0
 80049a4:	e025      	b.n	80049f2 <Insert_inLane+0x62>
 80049a6:	4b15      	ldr	r3, [pc, #84]	; (80049fc <Insert_inLane+0x6c>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	801a      	strh	r2, [r3, #0]
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f1c3 0310 	rsb	r3, r3, #16
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	4b11      	ldr	r3, [pc, #68]	; (80049fc <Insert_inLane+0x6c>)
 80049b8:	805a      	strh	r2, [r3, #2]
 80049ba:	78fb      	ldrb	r3, [r7, #3]
 80049bc:	73fb      	strb	r3, [r7, #15]
 80049be:	e014      	b.n	80049ea <Insert_inLane+0x5a>
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	18d1      	adds	r1, r2, r3
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <Insert_inLane+0x6c>)
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	461a      	mov	r2, r3
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	441a      	add	r2, r3
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	4a09      	ldr	r2, [pc, #36]	; (80049fc <Insert_inLane+0x6c>)
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	3304      	adds	r3, #4
 80049de:	460a      	mov	r2, r1
 80049e0:	6810      	ldr	r0, [r2, #0]
 80049e2:	6018      	str	r0, [r3, #0]
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	3301      	adds	r3, #1
 80049e8:	73fb      	strb	r3, [r7, #15]
 80049ea:	7bfb      	ldrb	r3, [r7, #15]
 80049ec:	2b0f      	cmp	r3, #15
 80049ee:	d9e7      	bls.n	80049c0 <Insert_inLane+0x30>
 80049f0:	2301      	movs	r3, #1
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	20007c24 	.word	0x20007c24

08004a00 <order_list_init>:
 8004a00:	b480      	push	{r7}
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <order_list_init+0x18>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
 8004a0a:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <order_list_init+0x18>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	705a      	strb	r2, [r3, #1]
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr
 8004a18:	20007ca8 	.word	0x20007ca8

08004a1c <order_append>:
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004a2a:	4b1d      	ldr	r3, [pc, #116]	; (8004aa0 <order_append+0x84>)
 8004a2c:	785b      	ldrb	r3, [r3, #1]
 8004a2e:	491c      	ldr	r1, [pc, #112]	; (8004aa0 <order_append+0x84>)
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d10b      	bne.n	8004a54 <order_append+0x38>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8004a42:	4b17      	ldr	r3, [pc, #92]	; (8004aa0 <order_append+0x84>)
 8004a44:	785b      	ldrb	r3, [r3, #1]
 8004a46:	4916      	ldr	r1, [pc, #88]	; (8004aa0 <order_append+0x84>)
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d01f      	beq.n	8004a94 <order_append+0x78>
 8004a54:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <order_append+0x84>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004a60:	4a0f      	ldr	r2, [pc, #60]	; (8004aa0 <order_append+0x84>)
 8004a62:	0083      	lsls	r3, r0, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	460a      	mov	r2, r1
 8004a68:	805a      	strh	r2, [r3, #2]
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <order_append+0x84>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8004a76:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <order_append+0x84>)
 8004a78:	0083      	lsls	r3, r0, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	460a      	mov	r2, r1
 8004a7e:	809a      	strh	r2, [r3, #4]
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <order_append+0x84>)
 8004a82:	781a      	ldrb	r2, [r3, #0]
 8004a84:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <order_append+0x84>)
 8004a86:	705a      	strb	r2, [r3, #1]
 8004a88:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <order_append+0x84>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	4b03      	ldr	r3, [pc, #12]	; (8004aa0 <order_append+0x84>)
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20007ca8 	.word	0x20007ca8

08004aa4 <Get_nearest_order>:
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4b3c      	ldr	r3, [pc, #240]	; (8004b9c <Get_nearest_order+0xf8>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d104      	bne.n	8004abc <Get_nearest_order+0x18>
 8004ab2:	4a3b      	ldr	r2, [pc, #236]	; (8004ba0 <Get_nearest_order+0xfc>)
 8004ab4:	1d3b      	adds	r3, r7, #4
 8004ab6:	6810      	ldr	r0, [r2, #0]
 8004ab8:	6018      	str	r0, [r3, #0]
 8004aba:	e063      	b.n	8004b84 <Get_nearest_order+0xe0>
 8004abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ac0:	81bb      	strh	r3, [r7, #12]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	72fb      	strb	r3, [r7, #11]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	73fb      	strb	r3, [r7, #15]
 8004aca:	e02d      	b.n	8004b28 <Get_nearest_order+0x84>
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	4a33      	ldr	r2, [pc, #204]	; (8004b9c <Get_nearest_order+0xf8>)
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4b31      	ldr	r3, [pc, #196]	; (8004ba0 <Get_nearest_order+0xfc>)
 8004adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	bfb8      	it	lt
 8004ae6:	425b      	neglt	r3, r3
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
 8004aec:	492b      	ldr	r1, [pc, #172]	; (8004b9c <Get_nearest_order+0xf8>)
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004af6:	4619      	mov	r1, r3
 8004af8:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <Get_nearest_order+0xfc>)
 8004afa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004afe:	1acb      	subs	r3, r1, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bfb8      	it	lt
 8004b04:	425b      	neglt	r3, r3
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	4413      	add	r3, r2
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	813b      	strh	r3, [r7, #8]
 8004b0e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8004b12:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	da03      	bge.n	8004b22 <Get_nearest_order+0x7e>
 8004b1a:	893b      	ldrh	r3, [r7, #8]
 8004b1c:	81bb      	strh	r3, [r7, #12]
 8004b1e:	7bfb      	ldrb	r3, [r7, #15]
 8004b20:	72fb      	strb	r3, [r7, #11]
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	3301      	adds	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
 8004b28:	4b1c      	ldr	r3, [pc, #112]	; (8004b9c <Get_nearest_order+0xf8>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	7bfa      	ldrb	r2, [r7, #15]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d3cc      	bcc.n	8004acc <Get_nearest_order+0x28>
 8004b32:	7afb      	ldrb	r3, [r7, #11]
 8004b34:	4a19      	ldr	r2, [pc, #100]	; (8004b9c <Get_nearest_order+0xf8>)
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	463a      	mov	r2, r7
 8004b3c:	3302      	adds	r3, #2
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	6010      	str	r0, [r2, #0]
 8004b42:	7afb      	ldrb	r3, [r7, #11]
 8004b44:	3301      	adds	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
 8004b48:	e00f      	b.n	8004b6a <Get_nearest_order+0xc6>
 8004b4a:	7bfb      	ldrb	r3, [r7, #15]
 8004b4c:	7bfa      	ldrb	r2, [r7, #15]
 8004b4e:	3a01      	subs	r2, #1
 8004b50:	4912      	ldr	r1, [pc, #72]	; (8004b9c <Get_nearest_order+0xf8>)
 8004b52:	0092      	lsls	r2, r2, #2
 8004b54:	440a      	add	r2, r1
 8004b56:	4911      	ldr	r1, [pc, #68]	; (8004b9c <Get_nearest_order+0xf8>)
 8004b58:	009b      	lsls	r3, r3, #2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	3202      	adds	r2, #2
 8004b5e:	3302      	adds	r3, #2
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	6013      	str	r3, [r2, #0]
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	3301      	adds	r3, #1
 8004b68:	73fb      	strb	r3, [r7, #15]
 8004b6a:	4b0c      	ldr	r3, [pc, #48]	; (8004b9c <Get_nearest_order+0xf8>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	7bfa      	ldrb	r2, [r7, #15]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d3ea      	bcc.n	8004b4a <Get_nearest_order+0xa6>
 8004b74:	4b09      	ldr	r3, [pc, #36]	; (8004b9c <Get_nearest_order+0xf8>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b2da      	uxtb	r2, r3
 8004b7c:	4b07      	ldr	r3, [pc, #28]	; (8004b9c <Get_nearest_order+0xf8>)
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	607b      	str	r3, [r7, #4]
 8004b84:	2300      	movs	r3, #0
 8004b86:	88ba      	ldrh	r2, [r7, #4]
 8004b88:	f362 030f 	bfi	r3, r2, #0, #16
 8004b8c:	88fa      	ldrh	r2, [r7, #6]
 8004b8e:	f362 431f 	bfi	r3, r2, #16, #16
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr
 8004b9c:	20007ca8 	.word	0x20007ca8
 8004ba0:	20000be0 	.word	0x20000be0

08004ba4 <GotoDestination>:
extern JY62_HandleTypeDef himu;
extern Motor_HandleTypeDef cmotor_lf, cmotor_rf, cmotor_lb, cmotor_rb;
extern Lane pathlane;

uint8_t GotoDestination(Coordinate Destination, uint8_t mode)
{
 8004ba4:	b5b0      	push	{r4, r5, r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	460b      	mov	r3, r1
 8004bae:	70fb      	strb	r3, [r7, #3]
	if(mode == 1)
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	f040 80a2 	bne.w	8004cfc <GotoDestination+0x158>
	{
		uint8_t isGetAroad = mingyan_pathfind_avoidObstacle(&myCoord, &Destination);
 8004bb8:	1d3b      	adds	r3, r7, #4
 8004bba:	4619      	mov	r1, r3
 8004bbc:	486f      	ldr	r0, [pc, #444]	; (8004d7c <GotoDestination+0x1d8>)
 8004bbe:	f7fd fa45 	bl	800204c <mingyan_pathfind_avoidObstacle>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	73fb      	strb	r3, [r7, #15]
		if(isGetAroad != 0)
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d05c      	beq.n	8004c86 <GotoDestination+0xe2>
		{
			// success get a road
			for(uint8_t i = 0; i < pathlane.Length; i ++)
 8004bcc:	2300      	movs	r3, #0
 8004bce:	73bb      	strb	r3, [r7, #14]
 8004bd0:	bf00      	nop
 8004bd2:	7bbb      	ldrb	r3, [r7, #14]
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	4b6a      	ldr	r3, [pc, #424]	; (8004d80 <GotoDestination+0x1dc>)
 8004bd8:	885b      	ldrh	r3, [r3, #2]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	f080 80c9 	bcs.w	8004d72 <GotoDestination+0x1ce>
			{
				while(1)
				{
					Position_P(&EstiCoord, &pathlane.buffer[pathlane.Head + i]);
 8004be0:	4b67      	ldr	r3, [pc, #412]	; (8004d80 <GotoDestination+0x1dc>)
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	461a      	mov	r2, r3
 8004be6:	7bbb      	ldrb	r3, [r7, #14]
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4a64      	ldr	r2, [pc, #400]	; (8004d80 <GotoDestination+0x1dc>)
 8004bee:	4413      	add	r3, r2
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4863      	ldr	r0, [pc, #396]	; (8004d84 <GotoDestination+0x1e0>)
 8004bf6:	f000 f957 	bl	8004ea8 <Position_P>
					CheckCoord();
 8004bfa:	f000 f92f 	bl	8004e5c <CheckCoord>
					if(abs(EstiCoord.x - pathlane.buffer[pathlane.Head + i].x) + abs(EstiCoord.y - pathlane.buffer[pathlane.Head + i].y) <= PATH_PID_TOLERANCE)
 8004bfe:	4b61      	ldr	r3, [pc, #388]	; (8004d84 <GotoDestination+0x1e0>)
 8004c00:	681c      	ldr	r4, [r3, #0]
 8004c02:	4b5f      	ldr	r3, [pc, #380]	; (8004d80 <GotoDestination+0x1dc>)
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	7bbb      	ldrb	r3, [r7, #14]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	4a5c      	ldr	r2, [pc, #368]	; (8004d80 <GotoDestination+0x1dc>)
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	4413      	add	r3, r2
 8004c12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fc f88e 	bl	8000d38 <__aeabi_i2f>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4620      	mov	r0, r4
 8004c22:	f7fb ffd3 	bl	8000bcc <__aeabi_fsub>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fc fa9f 	bl	800116c <__aeabi_f2iz>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004c34:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004c38:	4b52      	ldr	r3, [pc, #328]	; (8004d84 <GotoDestination+0x1e0>)
 8004c3a:	685d      	ldr	r5, [r3, #4]
 8004c3c:	4b50      	ldr	r3, [pc, #320]	; (8004d80 <GotoDestination+0x1dc>)
 8004c3e:	881b      	ldrh	r3, [r3, #0]
 8004c40:	461a      	mov	r2, r3
 8004c42:	7bbb      	ldrb	r3, [r7, #14]
 8004c44:	4413      	add	r3, r2
 8004c46:	4a4e      	ldr	r2, [pc, #312]	; (8004d80 <GotoDestination+0x1dc>)
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7fc f871 	bl	8000d38 <__aeabi_i2f>
 8004c56:	4603      	mov	r3, r0
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	f7fb ffb6 	bl	8000bcc <__aeabi_fsub>
 8004c60:	4603      	mov	r3, r0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fc fa82 	bl	800116c <__aeabi_f2iz>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	bfb8      	it	lt
 8004c6e:	425b      	neglt	r3, r3
 8004c70:	4423      	add	r3, r4
 8004c72:	2b0a      	cmp	r3, #10
 8004c74:	dcb4      	bgt.n	8004be0 <GotoDestination+0x3c>
					{
						chao_move_angle(0,0);
 8004c76:	f04f 0100 	mov.w	r1, #0
 8004c7a:	f04f 0000 	mov.w	r0, #0
 8004c7e:	f7fd f8cb 	bl	8001e18 <chao_move_angle>
						return 1;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e076      	b.n	8004d74 <GotoDestination+0x1d0>
		}
		else
		{
			while(1)
			{
				Position_P(&EstiCoord, &Destination);
 8004c86:	1d3b      	adds	r3, r7, #4
 8004c88:	4619      	mov	r1, r3
 8004c8a:	483e      	ldr	r0, [pc, #248]	; (8004d84 <GotoDestination+0x1e0>)
 8004c8c:	f000 f90c 	bl	8004ea8 <Position_P>
				CheckCoord();
 8004c90:	f000 f8e4 	bl	8004e5c <CheckCoord>
				if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE)
 8004c94:	4b3b      	ldr	r3, [pc, #236]	; (8004d84 <GotoDestination+0x1e0>)
 8004c96:	681c      	ldr	r4, [r3, #0]
 8004c98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fc f84b 	bl	8000d38 <__aeabi_i2f>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f7fb ff90 	bl	8000bcc <__aeabi_fsub>
 8004cac:	4603      	mov	r3, r0
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fc fa5c 	bl	800116c <__aeabi_f2iz>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004cba:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004cbe:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <GotoDestination+0x1e0>)
 8004cc0:	685d      	ldr	r5, [r3, #4]
 8004cc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fc f836 	bl	8000d38 <__aeabi_i2f>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4628      	mov	r0, r5
 8004cd2:	f7fb ff7b 	bl	8000bcc <__aeabi_fsub>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fc fa47 	bl	800116c <__aeabi_f2iz>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	bfb8      	it	lt
 8004ce4:	425b      	neglt	r3, r3
 8004ce6:	4423      	add	r3, r4
 8004ce8:	2b0a      	cmp	r3, #10
 8004cea:	dccc      	bgt.n	8004c86 <GotoDestination+0xe2>
				{
					chao_move_angle(0,0);
 8004cec:	f04f 0100 	mov.w	r1, #0
 8004cf0:	f04f 0000 	mov.w	r0, #0
 8004cf4:	f7fd f890 	bl	8001e18 <chao_move_angle>
					return 1;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e03b      	b.n	8004d74 <GotoDestination+0x1d0>
	}
	else
	{
		while(1)
		{
			Position_P(&EstiCoord, &Destination);
 8004cfc:	1d3b      	adds	r3, r7, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4820      	ldr	r0, [pc, #128]	; (8004d84 <GotoDestination+0x1e0>)
 8004d02:	f000 f8d1 	bl	8004ea8 <Position_P>
			CheckCoord();
 8004d06:	f000 f8a9 	bl	8004e5c <CheckCoord>
			if(abs(EstiCoord.x - Destination.x) + abs(EstiCoord.y - Destination.y) <= PATH_PID_TOLERANCE)
 8004d0a:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <GotoDestination+0x1e0>)
 8004d0c:	681c      	ldr	r4, [r3, #0]
 8004d0e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fc f810 	bl	8000d38 <__aeabi_i2f>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	f7fb ff55 	bl	8000bcc <__aeabi_fsub>
 8004d22:	4603      	mov	r3, r0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fc fa21 	bl	800116c <__aeabi_f2iz>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 8004d30:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 8004d34:	4b13      	ldr	r3, [pc, #76]	; (8004d84 <GotoDestination+0x1e0>)
 8004d36:	685d      	ldr	r5, [r3, #4]
 8004d38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f7fb fffb 	bl	8000d38 <__aeabi_i2f>
 8004d42:	4603      	mov	r3, r0
 8004d44:	4619      	mov	r1, r3
 8004d46:	4628      	mov	r0, r5
 8004d48:	f7fb ff40 	bl	8000bcc <__aeabi_fsub>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fc fa0c 	bl	800116c <__aeabi_f2iz>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	bfb8      	it	lt
 8004d5a:	425b      	neglt	r3, r3
 8004d5c:	4423      	add	r3, r4
 8004d5e:	2b0a      	cmp	r3, #10
 8004d60:	dccc      	bgt.n	8004cfc <GotoDestination+0x158>
			{
				chao_move_angle(0,0);
 8004d62:	f04f 0100 	mov.w	r1, #0
 8004d66:	f04f 0000 	mov.w	r0, #0
 8004d6a:	f7fd f855 	bl	8001e18 <chao_move_angle>
				return 1;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e000      	b.n	8004d74 <GotoDestination+0x1d0>
			}
		}
	}
	return 0;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8004d7c:	20000be0 	.word	0x20000be0
 8004d80:	20007c24 	.word	0x20007c24
 8004d84:	20000be4 	.word	0x20000be4

08004d88 <Angle_normalization>:

float Angle_normalization(float angle)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
	float raw_angle = angle;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	60fb      	str	r3, [r7, #12]
	while(raw_angle < 0)
 8004d94:	e005      	b.n	8004da2 <Angle_normalization+0x1a>
	{
		raw_angle += 360;
 8004d96:	4910      	ldr	r1, [pc, #64]	; (8004dd8 <Angle_normalization+0x50>)
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7fb ff19 	bl	8000bd0 <__addsf3>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	60fb      	str	r3, [r7, #12]
	while(raw_angle < 0)
 8004da2:	f04f 0100 	mov.w	r1, #0
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f7fc f9b8 	bl	800111c <__aeabi_fcmplt>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1f1      	bne.n	8004d96 <Angle_normalization+0xe>
	}
	while(raw_angle > 360)
 8004db2:	e005      	b.n	8004dc0 <Angle_normalization+0x38>
	{
		raw_angle -= 360;
 8004db4:	4908      	ldr	r1, [pc, #32]	; (8004dd8 <Angle_normalization+0x50>)
 8004db6:	68f8      	ldr	r0, [r7, #12]
 8004db8:	f7fb ff08 	bl	8000bcc <__aeabi_fsub>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	60fb      	str	r3, [r7, #12]
	while(raw_angle > 360)
 8004dc0:	4905      	ldr	r1, [pc, #20]	; (8004dd8 <Angle_normalization+0x50>)
 8004dc2:	68f8      	ldr	r0, [r7, #12]
 8004dc4:	f7fc f9c8 	bl	8001158 <__aeabi_fcmpgt>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f2      	bne.n	8004db4 <Angle_normalization+0x2c>
	}
	return raw_angle;
 8004dce:	68fb      	ldr	r3, [r7, #12]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	43b40000 	.word	0x43b40000

08004ddc <CalSpeed>:

float CalSpeed(int16_t x, int16_t y)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	460a      	mov	r2, r1
 8004de6:	80fb      	strh	r3, [r7, #6]
 8004de8:	4613      	mov	r3, r2
 8004dea:	80bb      	strh	r3, [r7, #4]
	float kp = 10.0;
 8004dec:	4b18      	ldr	r3, [pc, #96]	; (8004e50 <CalSpeed+0x74>)
 8004dee:	60bb      	str	r3, [r7, #8]

	float Speed = kp * (abs(x) + abs(y));
 8004df0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	bfb8      	it	lt
 8004df8:	425b      	neglt	r3, r3
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bfb8      	it	lt
 8004e06:	425b      	neglt	r3, r3
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	4413      	add	r3, r2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fb ff93 	bl	8000d38 <__aeabi_i2f>
 8004e12:	4603      	mov	r3, r0
 8004e14:	4619      	mov	r1, r3
 8004e16:	68b8      	ldr	r0, [r7, #8]
 8004e18:	f7fb ffe2 	bl	8000de0 <__aeabi_fmul>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	60fb      	str	r3, [r7, #12]
	if(Speed > MAX_SPEED)
 8004e20:	490c      	ldr	r1, [pc, #48]	; (8004e54 <CalSpeed+0x78>)
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f7fc f998 	bl	8001158 <__aeabi_fcmpgt>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <CalSpeed+0x56>
	{
		Speed = MAX_SPEED;
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <CalSpeed+0x78>)
 8004e30:	60fb      	str	r3, [r7, #12]
	}
	if(Speed < MIN_SPEED)
 8004e32:	4909      	ldr	r1, [pc, #36]	; (8004e58 <CalSpeed+0x7c>)
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7fc f971 	bl	800111c <__aeabi_fcmplt>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <CalSpeed+0x68>
	{
		Speed = MIN_SPEED;
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <CalSpeed+0x7c>)
 8004e42:	60fb      	str	r3, [r7, #12]
	}
	return Speed;
 8004e44:	68fb      	ldr	r3, [r7, #12]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	41200000 	.word	0x41200000
 8004e54:	447a0000 	.word	0x447a0000
 8004e58:	43fa0000 	.word	0x43fa0000

08004e5c <CheckCoord>:

uint8_t CheckCoord(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
	if(CoordinateUpdate == 1)
 8004e60:	4b0e      	ldr	r3, [pc, #56]	; (8004e9c <CheckCoord+0x40>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d116      	bne.n	8004e96 <CheckCoord+0x3a>
	{
		EstiCoord.x = myCoord.x;
 8004e68:	4b0d      	ldr	r3, [pc, #52]	; (8004ea0 <CheckCoord+0x44>)
 8004e6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fb ff62 	bl	8000d38 <__aeabi_i2f>
 8004e74:	4603      	mov	r3, r0
 8004e76:	4a0b      	ldr	r2, [pc, #44]	; (8004ea4 <CheckCoord+0x48>)
 8004e78:	6013      	str	r3, [r2, #0]
		EstiCoord.y = myCoord.y;
 8004e7a:	4b09      	ldr	r3, [pc, #36]	; (8004ea0 <CheckCoord+0x44>)
 8004e7c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fb ff59 	bl	8000d38 <__aeabi_i2f>
 8004e86:	4603      	mov	r3, r0
 8004e88:	4a06      	ldr	r2, [pc, #24]	; (8004ea4 <CheckCoord+0x48>)
 8004e8a:	6053      	str	r3, [r2, #4]
		CoordinateUpdate = 0;
 8004e8c:	4b03      	ldr	r3, [pc, #12]	; (8004e9c <CheckCoord+0x40>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	701a      	strb	r2, [r3, #0]
		return 1;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <CheckCoord+0x3c>
	}
	return 0;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20000bec 	.word	0x20000bec
 8004ea0:	20000be0 	.word	0x20000be0
 8004ea4:	20000be4 	.word	0x20000be4

08004ea8 <Position_P>:
	float v_y = (cmotor_rf.lastSpeed + cmotor_lf.lastSpeed + cmotor_lb.lastSpeed + cmotor_rb.lastSpeed) * 60.0 / 20000;
	return v_y;
}

void Position_P(fCoordinate* cur, Coordinate* goal)
{
 8004ea8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004eac:	b08e      	sub	sp, #56	; 0x38
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
 8004eb2:	6039      	str	r1, [r7, #0]
	float x_error = goal->x - cur->x;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fb ff3c 	bl	8000d38 <__aeabi_i2f>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f7fb fe7f 	bl	8000bcc <__aeabi_fsub>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	633b      	str	r3, [r7, #48]	; 0x30
	float y_error = goal->y - cur->y;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fb ff2d 	bl	8000d38 <__aeabi_i2f>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f7fb fe70 	bl	8000bcc <__aeabi_fsub>
 8004eec:	4603      	mov	r3, r0
 8004eee:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (y_error == 0)
 8004ef0:	f04f 0100 	mov.w	r1, #0
 8004ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ef6:	f7fc f907 	bl	8001108 <__aeabi_fcmpeq>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d034      	beq.n	8004f6a <Position_P+0xc2>
	{
		if(x_error < 0)
 8004f00:	f04f 0100 	mov.w	r1, #0
 8004f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f06:	f7fc f909 	bl	800111c <__aeabi_fcmplt>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00e      	beq.n	8004f2e <Position_P+0x86>
		{
			chao_move_angle(270, CalSpeed(x_error, 0));
 8004f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f12:	f7fc f92b 	bl	800116c <__aeabi_f2iz>
 8004f16:	4603      	mov	r3, r0
 8004f18:	b21b      	sxth	r3, r3
 8004f1a:	2100      	movs	r1, #0
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff ff5d 	bl	8004ddc <CalSpeed>
 8004f22:	4603      	mov	r3, r0
 8004f24:	4619      	mov	r1, r3
 8004f26:	48a6      	ldr	r0, [pc, #664]	; (80051c0 <Position_P+0x318>)
 8004f28:	f7fc ff76 	bl	8001e18 <chao_move_angle>
 8004f2c:	e092      	b.n	8005054 <Position_P+0x1ac>
		}
		else if(x_error > 0)
 8004f2e:	f04f 0100 	mov.w	r1, #0
 8004f32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f34:	f7fc f910 	bl	8001158 <__aeabi_fcmpgt>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00e      	beq.n	8004f5c <Position_P+0xb4>
		{
			chao_move_angle(90, CalSpeed(x_error, 0));
 8004f3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f40:	f7fc f914 	bl	800116c <__aeabi_f2iz>
 8004f44:	4603      	mov	r3, r0
 8004f46:	b21b      	sxth	r3, r3
 8004f48:	2100      	movs	r1, #0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7ff ff46 	bl	8004ddc <CalSpeed>
 8004f50:	4603      	mov	r3, r0
 8004f52:	4619      	mov	r1, r3
 8004f54:	489b      	ldr	r0, [pc, #620]	; (80051c4 <Position_P+0x31c>)
 8004f56:	f7fc ff5f 	bl	8001e18 <chao_move_angle>
 8004f5a:	e07b      	b.n	8005054 <Position_P+0x1ac>
		}
		else
		{
			chao_move_angle(0, 0);
 8004f5c:	f04f 0100 	mov.w	r1, #0
 8004f60:	f04f 0000 	mov.w	r0, #0
 8004f64:	f7fc ff58 	bl	8001e18 <chao_move_angle>
 8004f68:	e074      	b.n	8005054 <Position_P+0x1ac>
		}
	}
	else
	{
		float azimuth = atan((float)(x_error)/(y_error));
 8004f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f6e:	f7fb ffeb 	bl	8000f48 <__aeabi_fdiv>
 8004f72:	4603      	mov	r3, r0
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7fb fabb 	bl	80004f0 <__aeabi_f2d>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4619      	mov	r1, r3
 8004f82:	f006 faad 	bl	800b4e0 <atan>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4610      	mov	r0, r2
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	f7fb fdc9 	bl	8000b24 <__aeabi_d2f>
 8004f92:	4603      	mov	r3, r0
 8004f94:	637b      	str	r3, [r7, #52]	; 0x34
		if(y_error < 0)
 8004f96:	f04f 0100 	mov.w	r1, #0
 8004f9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004f9c:	f7fc f8be 	bl	800111c <__aeabi_fcmplt>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00f      	beq.n	8004fc6 <Position_P+0x11e>
		{
			azimuth += M_PI;
 8004fa6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004fa8:	f7fb faa2 	bl	80004f0 <__aeabi_f2d>
 8004fac:	a37e      	add	r3, pc, #504	; (adr r3, 80051a8 <Position_P+0x300>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	f7fb f93f 	bl	8000234 <__adddf3>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4610      	mov	r0, r2
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	f7fb fdb1 	bl	8000b24 <__aeabi_d2f>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	637b      	str	r3, [r7, #52]	; 0x34
		}
		azimuth = azimuth * 360.0 / (2 * M_PI);
 8004fc6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004fc8:	f7fb fa92 	bl	80004f0 <__aeabi_f2d>
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	4b7d      	ldr	r3, [pc, #500]	; (80051c8 <Position_P+0x320>)
 8004fd2:	f7fb fae5 	bl	80005a0 <__aeabi_dmul>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4610      	mov	r0, r2
 8004fdc:	4619      	mov	r1, r3
 8004fde:	a374      	add	r3, pc, #464	; (adr r3, 80051b0 <Position_P+0x308>)
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f7fb fc06 	bl	80007f4 <__aeabi_ddiv>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4610      	mov	r0, r2
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f7fb fd98 	bl	8000b24 <__aeabi_d2f>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	637b      	str	r3, [r7, #52]	; 0x34
		azimuth = Angle_normalization(azimuth);
 8004ff8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ffa:	f7ff fec5 	bl	8004d88 <Angle_normalization>
 8004ffe:	6378      	str	r0, [r7, #52]	; 0x34
		float angle = azimuth - Angle_normalization(initangleZ - himu.theta[2]);
 8005000:	4b72      	ldr	r3, [pc, #456]	; (80051cc <Position_P+0x324>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a72      	ldr	r2, [pc, #456]	; (80051d0 <Position_P+0x328>)
 8005006:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005008:	4611      	mov	r1, r2
 800500a:	4618      	mov	r0, r3
 800500c:	f7fb fdde 	bl	8000bcc <__aeabi_fsub>
 8005010:	4603      	mov	r3, r0
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff feb8 	bl	8004d88 <Angle_normalization>
 8005018:	4603      	mov	r3, r0
 800501a:	4619      	mov	r1, r3
 800501c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800501e:	f7fb fdd5 	bl	8000bcc <__aeabi_fsub>
 8005022:	4603      	mov	r3, r0
 8005024:	62bb      	str	r3, [r7, #40]	; 0x28
		angle = Angle_normalization(angle);
 8005026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005028:	f7ff feae 	bl	8004d88 <Angle_normalization>
 800502c:	62b8      	str	r0, [r7, #40]	; 0x28
		chao_move_angle(angle, CalSpeed(x_error, y_error));
 800502e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005030:	f7fc f89c 	bl	800116c <__aeabi_f2iz>
 8005034:	4603      	mov	r3, r0
 8005036:	b21c      	sxth	r4, r3
 8005038:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800503a:	f7fc f897 	bl	800116c <__aeabi_f2iz>
 800503e:	4603      	mov	r3, r0
 8005040:	b21b      	sxth	r3, r3
 8005042:	4619      	mov	r1, r3
 8005044:	4620      	mov	r0, r4
 8005046:	f7ff fec9 	bl	8004ddc <CalSpeed>
 800504a:	4603      	mov	r3, r0
 800504c:	4619      	mov	r1, r3
 800504e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005050:	f7fc fee2 	bl	8001e18 <chao_move_angle>
	}
	CheckCoord();
 8005054:	f7ff ff02 	bl	8004e5c <CheckCoord>
	uint32_t timestart = HAL_GetTick();
 8005058:	f001 f874 	bl	8006144 <HAL_GetTick>
 800505c:	6278      	str	r0, [r7, #36]	; 0x24
	HAL_Delay(10); // delay 10 ms = 100 Hz
 800505e:	200a      	movs	r0, #10
 8005060:	f001 f87a 	bl	8006158 <HAL_Delay>
	if(CheckCoord() == 0)
 8005064:	f7ff fefa 	bl	8004e5c <CheckCoord>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	f040 8097 	bne.w	800519e <Position_P+0x2f6>
	{
		float lf_v = cmotor_lf.lastSpeed;
 8005070:	4b58      	ldr	r3, [pc, #352]	; (80051d4 <Position_P+0x32c>)
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	623b      	str	r3, [r7, #32]
		float lb_v = cmotor_lb.lastSpeed;
 8005076:	4b58      	ldr	r3, [pc, #352]	; (80051d8 <Position_P+0x330>)
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	61fb      	str	r3, [r7, #28]
		float rf_v = cmotor_rf.lastSpeed;
 800507c:	4b57      	ldr	r3, [pc, #348]	; (80051dc <Position_P+0x334>)
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	61bb      	str	r3, [r7, #24]
		float rb_v = cmotor_rb.lastSpeed;
 8005082:	4b57      	ldr	r3, [pc, #348]	; (80051e0 <Position_P+0x338>)
 8005084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005086:	617b      	str	r3, [r7, #20]
		float v_x = -((rf_v - lf_v + lb_v - rb_v) / 500);
 8005088:	6a39      	ldr	r1, [r7, #32]
 800508a:	69b8      	ldr	r0, [r7, #24]
 800508c:	f7fb fd9e 	bl	8000bcc <__aeabi_fsub>
 8005090:	4603      	mov	r3, r0
 8005092:	69f9      	ldr	r1, [r7, #28]
 8005094:	4618      	mov	r0, r3
 8005096:	f7fb fd9b 	bl	8000bd0 <__addsf3>
 800509a:	4603      	mov	r3, r0
 800509c:	6979      	ldr	r1, [r7, #20]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fb fd94 	bl	8000bcc <__aeabi_fsub>
 80050a4:	4603      	mov	r3, r0
 80050a6:	494f      	ldr	r1, [pc, #316]	; (80051e4 <Position_P+0x33c>)
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fb ff4d 	bl	8000f48 <__aeabi_fdiv>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80050b4:	613b      	str	r3, [r7, #16]
		float v_y = ((rf_v + lf_v + lb_v + rb_v) / 500);
 80050b6:	6a39      	ldr	r1, [r7, #32]
 80050b8:	69b8      	ldr	r0, [r7, #24]
 80050ba:	f7fb fd89 	bl	8000bd0 <__addsf3>
 80050be:	4603      	mov	r3, r0
 80050c0:	69f9      	ldr	r1, [r7, #28]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fb fd84 	bl	8000bd0 <__addsf3>
 80050c8:	4603      	mov	r3, r0
 80050ca:	6979      	ldr	r1, [r7, #20]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fb fd7f 	bl	8000bd0 <__addsf3>
 80050d2:	4603      	mov	r3, r0
 80050d4:	4943      	ldr	r1, [pc, #268]	; (80051e4 <Position_P+0x33c>)
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7fb ff36 	bl	8000f48 <__aeabi_fdiv>
 80050dc:	4603      	mov	r3, r0
 80050de:	60fb      	str	r3, [r7, #12]
		uint32_t timeend = HAL_GetTick();
 80050e0:	f001 f830 	bl	8006144 <HAL_GetTick>
 80050e4:	60b8      	str	r0, [r7, #8]
		EstiCoord.x = EstiCoord.x + (timeend - timestart) * 0.001 * v_x;
 80050e6:	4b40      	ldr	r3, [pc, #256]	; (80051e8 <Position_P+0x340>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fb fa00 	bl	80004f0 <__aeabi_f2d>
 80050f0:	4604      	mov	r4, r0
 80050f2:	460d      	mov	r5, r1
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fb f9d6 	bl	80004ac <__aeabi_ui2d>
 8005100:	a32d      	add	r3, pc, #180	; (adr r3, 80051b8 <Position_P+0x310>)
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	f7fb fa4b 	bl	80005a0 <__aeabi_dmul>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	4690      	mov	r8, r2
 8005110:	4699      	mov	r9, r3
 8005112:	6938      	ldr	r0, [r7, #16]
 8005114:	f7fb f9ec 	bl	80004f0 <__aeabi_f2d>
 8005118:	4602      	mov	r2, r0
 800511a:	460b      	mov	r3, r1
 800511c:	4640      	mov	r0, r8
 800511e:	4649      	mov	r1, r9
 8005120:	f7fb fa3e 	bl	80005a0 <__aeabi_dmul>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4620      	mov	r0, r4
 800512a:	4629      	mov	r1, r5
 800512c:	f7fb f882 	bl	8000234 <__adddf3>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	4610      	mov	r0, r2
 8005136:	4619      	mov	r1, r3
 8005138:	f7fb fcf4 	bl	8000b24 <__aeabi_d2f>
 800513c:	4603      	mov	r3, r0
 800513e:	4a2a      	ldr	r2, [pc, #168]	; (80051e8 <Position_P+0x340>)
 8005140:	6013      	str	r3, [r2, #0]
		EstiCoord.y = EstiCoord.y + (timeend - timestart) * 0.001 * v_y;
 8005142:	4b29      	ldr	r3, [pc, #164]	; (80051e8 <Position_P+0x340>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	4618      	mov	r0, r3
 8005148:	f7fb f9d2 	bl	80004f0 <__aeabi_f2d>
 800514c:	4604      	mov	r4, r0
 800514e:	460d      	mov	r5, r1
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	4618      	mov	r0, r3
 8005158:	f7fb f9a8 	bl	80004ac <__aeabi_ui2d>
 800515c:	a316      	add	r3, pc, #88	; (adr r3, 80051b8 <Position_P+0x310>)
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	f7fb fa1d 	bl	80005a0 <__aeabi_dmul>
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4690      	mov	r8, r2
 800516c:	4699      	mov	r9, r3
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f7fb f9be 	bl	80004f0 <__aeabi_f2d>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4640      	mov	r0, r8
 800517a:	4649      	mov	r1, r9
 800517c:	f7fb fa10 	bl	80005a0 <__aeabi_dmul>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4620      	mov	r0, r4
 8005186:	4629      	mov	r1, r5
 8005188:	f7fb f854 	bl	8000234 <__adddf3>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4610      	mov	r0, r2
 8005192:	4619      	mov	r1, r3
 8005194:	f7fb fcc6 	bl	8000b24 <__aeabi_d2f>
 8005198:	4603      	mov	r3, r0
 800519a:	4a13      	ldr	r2, [pc, #76]	; (80051e8 <Position_P+0x340>)
 800519c:	6053      	str	r3, [r2, #4]
	}
}
 800519e:	bf00      	nop
 80051a0:	3738      	adds	r7, #56	; 0x38
 80051a2:	46bd      	mov	sp, r7
 80051a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80051a8:	54442d18 	.word	0x54442d18
 80051ac:	400921fb 	.word	0x400921fb
 80051b0:	54442d18 	.word	0x54442d18
 80051b4:	401921fb 	.word	0x401921fb
 80051b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80051bc:	3f50624d 	.word	0x3f50624d
 80051c0:	43870000 	.word	0x43870000
 80051c4:	42b40000 	.word	0x42b40000
 80051c8:	40768000 	.word	0x40768000
 80051cc:	20000bf0 	.word	0x20000bf0
 80051d0:	20000a84 	.word	0x20000a84
 80051d4:	20000994 	.word	0x20000994
 80051d8:	20000a0c 	.word	0x20000a0c
 80051dc:	200009d0 	.word	0x200009d0
 80051e0:	20000a48 	.word	0x20000a48
 80051e4:	43fa0000 	.word	0x43fa0000
 80051e8:	20000be4 	.word	0x20000be4

080051ec <ssd1306_WriteCommand>:
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b086      	sub	sp, #24
 80051f0:	af04      	add	r7, sp, #16
 80051f2:	4603      	mov	r3, r0
 80051f4:	71fb      	strb	r3, [r7, #7]
 80051f6:	f04f 33ff 	mov.w	r3, #4294967295
 80051fa:	9302      	str	r3, [sp, #8]
 80051fc:	2301      	movs	r3, #1
 80051fe:	9301      	str	r3, [sp, #4]
 8005200:	1dfb      	adds	r3, r7, #7
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	2301      	movs	r3, #1
 8005206:	2200      	movs	r2, #0
 8005208:	2178      	movs	r1, #120	; 0x78
 800520a:	4803      	ldr	r0, [pc, #12]	; (8005218 <ssd1306_WriteCommand+0x2c>)
 800520c:	f002 f848 	bl	80072a0 <HAL_I2C_Mem_Write>
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000638 	.word	0x20000638

0800521c <ssd1306_WriteData>:
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af04      	add	r7, sp, #16
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	b29b      	uxth	r3, r3
 800522a:	f04f 32ff 	mov.w	r2, #4294967295
 800522e:	9202      	str	r2, [sp, #8]
 8005230:	9301      	str	r3, [sp, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	2301      	movs	r3, #1
 8005238:	2240      	movs	r2, #64	; 0x40
 800523a:	2178      	movs	r1, #120	; 0x78
 800523c:	4803      	ldr	r0, [pc, #12]	; (800524c <ssd1306_WriteData+0x30>)
 800523e:	f002 f82f 	bl	80072a0 <HAL_I2C_Mem_Write>
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	20000638 	.word	0x20000638

08005250 <ssd1306_UpdateScreen>:
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	2300      	movs	r3, #0
 8005258:	71fb      	strb	r3, [r7, #7]
 800525a:	e016      	b.n	800528a <ssd1306_UpdateScreen+0x3a>
 800525c:	79fb      	ldrb	r3, [r7, #7]
 800525e:	3b50      	subs	r3, #80	; 0x50
 8005260:	b2db      	uxtb	r3, r3
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ffc2 	bl	80051ec <ssd1306_WriteCommand>
 8005268:	2000      	movs	r0, #0
 800526a:	f7ff ffbf 	bl	80051ec <ssd1306_WriteCommand>
 800526e:	2010      	movs	r0, #16
 8005270:	f7ff ffbc 	bl	80051ec <ssd1306_WriteCommand>
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	01db      	lsls	r3, r3, #7
 8005278:	4a08      	ldr	r2, [pc, #32]	; (800529c <ssd1306_UpdateScreen+0x4c>)
 800527a:	4413      	add	r3, r2
 800527c:	2180      	movs	r1, #128	; 0x80
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff ffcc 	bl	800521c <ssd1306_WriteData>
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	3301      	adds	r3, #1
 8005288:	71fb      	strb	r3, [r7, #7]
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	2b03      	cmp	r3, #3
 800528e:	d9e5      	bls.n	800525c <ssd1306_UpdateScreen+0xc>
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20007d9c 	.word	0x20007d9c

080052a0 <ssd1306_DrawPixel>:
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	4603      	mov	r3, r0
 80052a8:	71fb      	strb	r3, [r7, #7]
 80052aa:	460b      	mov	r3, r1
 80052ac:	71bb      	strb	r3, [r7, #6]
 80052ae:	4613      	mov	r3, r2
 80052b0:	717b      	strb	r3, [r7, #5]
 80052b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	db3d      	blt.n	8005336 <ssd1306_DrawPixel+0x96>
 80052ba:	79bb      	ldrb	r3, [r7, #6]
 80052bc:	2b1f      	cmp	r3, #31
 80052be:	d83a      	bhi.n	8005336 <ssd1306_DrawPixel+0x96>
 80052c0:	797b      	ldrb	r3, [r7, #5]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d11a      	bne.n	80052fc <ssd1306_DrawPixel+0x5c>
 80052c6:	79fa      	ldrb	r2, [r7, #7]
 80052c8:	79bb      	ldrb	r3, [r7, #6]
 80052ca:	08db      	lsrs	r3, r3, #3
 80052cc:	b2d8      	uxtb	r0, r3
 80052ce:	4603      	mov	r3, r0
 80052d0:	01db      	lsls	r3, r3, #7
 80052d2:	4413      	add	r3, r2
 80052d4:	4a1a      	ldr	r2, [pc, #104]	; (8005340 <ssd1306_DrawPixel+0xa0>)
 80052d6:	5cd3      	ldrb	r3, [r2, r3]
 80052d8:	b25a      	sxtb	r2, r3
 80052da:	79bb      	ldrb	r3, [r7, #6]
 80052dc:	f003 0307 	and.w	r3, r3, #7
 80052e0:	2101      	movs	r1, #1
 80052e2:	fa01 f303 	lsl.w	r3, r1, r3
 80052e6:	b25b      	sxtb	r3, r3
 80052e8:	4313      	orrs	r3, r2
 80052ea:	b259      	sxtb	r1, r3
 80052ec:	79fa      	ldrb	r2, [r7, #7]
 80052ee:	4603      	mov	r3, r0
 80052f0:	01db      	lsls	r3, r3, #7
 80052f2:	4413      	add	r3, r2
 80052f4:	b2c9      	uxtb	r1, r1
 80052f6:	4a12      	ldr	r2, [pc, #72]	; (8005340 <ssd1306_DrawPixel+0xa0>)
 80052f8:	54d1      	strb	r1, [r2, r3]
 80052fa:	e01d      	b.n	8005338 <ssd1306_DrawPixel+0x98>
 80052fc:	79fa      	ldrb	r2, [r7, #7]
 80052fe:	79bb      	ldrb	r3, [r7, #6]
 8005300:	08db      	lsrs	r3, r3, #3
 8005302:	b2d8      	uxtb	r0, r3
 8005304:	4603      	mov	r3, r0
 8005306:	01db      	lsls	r3, r3, #7
 8005308:	4413      	add	r3, r2
 800530a:	4a0d      	ldr	r2, [pc, #52]	; (8005340 <ssd1306_DrawPixel+0xa0>)
 800530c:	5cd3      	ldrb	r3, [r2, r3]
 800530e:	b25a      	sxtb	r2, r3
 8005310:	79bb      	ldrb	r3, [r7, #6]
 8005312:	f003 0307 	and.w	r3, r3, #7
 8005316:	2101      	movs	r1, #1
 8005318:	fa01 f303 	lsl.w	r3, r1, r3
 800531c:	b25b      	sxtb	r3, r3
 800531e:	43db      	mvns	r3, r3
 8005320:	b25b      	sxtb	r3, r3
 8005322:	4013      	ands	r3, r2
 8005324:	b259      	sxtb	r1, r3
 8005326:	79fa      	ldrb	r2, [r7, #7]
 8005328:	4603      	mov	r3, r0
 800532a:	01db      	lsls	r3, r3, #7
 800532c:	4413      	add	r3, r2
 800532e:	b2c9      	uxtb	r1, r1
 8005330:	4a03      	ldr	r2, [pc, #12]	; (8005340 <ssd1306_DrawPixel+0xa0>)
 8005332:	54d1      	strb	r1, [r2, r3]
 8005334:	e000      	b.n	8005338 <ssd1306_DrawPixel+0x98>
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	bc80      	pop	{r7}
 800533e:	4770      	bx	lr
 8005340:	20007d9c 	.word	0x20007d9c

08005344 <ssd1306_WriteChar>:
 8005344:	b590      	push	{r4, r7, lr}
 8005346:	b089      	sub	sp, #36	; 0x24
 8005348:	af00      	add	r7, sp, #0
 800534a:	4604      	mov	r4, r0
 800534c:	1d38      	adds	r0, r7, #4
 800534e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005352:	461a      	mov	r2, r3
 8005354:	4623      	mov	r3, r4
 8005356:	73fb      	strb	r3, [r7, #15]
 8005358:	4613      	mov	r3, r2
 800535a:	73bb      	strb	r3, [r7, #14]
 800535c:	7bfb      	ldrb	r3, [r7, #15]
 800535e:	2b1f      	cmp	r3, #31
 8005360:	d902      	bls.n	8005368 <ssd1306_WriteChar+0x24>
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	2b7e      	cmp	r3, #126	; 0x7e
 8005366:	d901      	bls.n	800536c <ssd1306_WriteChar+0x28>
 8005368:	2300      	movs	r3, #0
 800536a:	e06d      	b.n	8005448 <ssd1306_WriteChar+0x104>
 800536c:	4b38      	ldr	r3, [pc, #224]	; (8005450 <ssd1306_WriteChar+0x10c>)
 800536e:	881b      	ldrh	r3, [r3, #0]
 8005370:	461a      	mov	r2, r3
 8005372:	793b      	ldrb	r3, [r7, #4]
 8005374:	4413      	add	r3, r2
 8005376:	2b80      	cmp	r3, #128	; 0x80
 8005378:	dc06      	bgt.n	8005388 <ssd1306_WriteChar+0x44>
 800537a:	4b35      	ldr	r3, [pc, #212]	; (8005450 <ssd1306_WriteChar+0x10c>)
 800537c:	885b      	ldrh	r3, [r3, #2]
 800537e:	461a      	mov	r2, r3
 8005380:	797b      	ldrb	r3, [r7, #5]
 8005382:	4413      	add	r3, r2
 8005384:	2b20      	cmp	r3, #32
 8005386:	dd01      	ble.n	800538c <ssd1306_WriteChar+0x48>
 8005388:	2300      	movs	r3, #0
 800538a:	e05d      	b.n	8005448 <ssd1306_WriteChar+0x104>
 800538c:	2300      	movs	r3, #0
 800538e:	61fb      	str	r3, [r7, #28]
 8005390:	e04c      	b.n	800542c <ssd1306_WriteChar+0xe8>
 8005392:	68ba      	ldr	r2, [r7, #8]
 8005394:	7bfb      	ldrb	r3, [r7, #15]
 8005396:	3b20      	subs	r3, #32
 8005398:	7979      	ldrb	r1, [r7, #5]
 800539a:	fb01 f303 	mul.w	r3, r1, r3
 800539e:	4619      	mov	r1, r3
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	440b      	add	r3, r1
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	4413      	add	r3, r2
 80053a8:	881b      	ldrh	r3, [r3, #0]
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	2300      	movs	r3, #0
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	e034      	b.n	800541c <ssd1306_WriteChar+0xd8>
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d012      	beq.n	80053e8 <ssd1306_WriteChar+0xa4>
 80053c2:	4b23      	ldr	r3, [pc, #140]	; (8005450 <ssd1306_WriteChar+0x10c>)
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	69bb      	ldr	r3, [r7, #24]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	4413      	add	r3, r2
 80053ce:	b2d8      	uxtb	r0, r3
 80053d0:	4b1f      	ldr	r3, [pc, #124]	; (8005450 <ssd1306_WriteChar+0x10c>)
 80053d2:	885b      	ldrh	r3, [r3, #2]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	4413      	add	r3, r2
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	7bba      	ldrb	r2, [r7, #14]
 80053e0:	4619      	mov	r1, r3
 80053e2:	f7ff ff5d 	bl	80052a0 <ssd1306_DrawPixel>
 80053e6:	e016      	b.n	8005416 <ssd1306_WriteChar+0xd2>
 80053e8:	4b19      	ldr	r3, [pc, #100]	; (8005450 <ssd1306_WriteChar+0x10c>)
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	4413      	add	r3, r2
 80053f4:	b2d8      	uxtb	r0, r3
 80053f6:	4b16      	ldr	r3, [pc, #88]	; (8005450 <ssd1306_WriteChar+0x10c>)
 80053f8:	885b      	ldrh	r3, [r3, #2]
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	4413      	add	r3, r2
 8005402:	b2d9      	uxtb	r1, r3
 8005404:	7bbb      	ldrb	r3, [r7, #14]
 8005406:	2b00      	cmp	r3, #0
 8005408:	bf0c      	ite	eq
 800540a:	2301      	moveq	r3, #1
 800540c:	2300      	movne	r3, #0
 800540e:	b2db      	uxtb	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	f7ff ff45 	bl	80052a0 <ssd1306_DrawPixel>
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	3301      	adds	r3, #1
 800541a:	61bb      	str	r3, [r7, #24]
 800541c:	793b      	ldrb	r3, [r7, #4]
 800541e:	461a      	mov	r2, r3
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	4293      	cmp	r3, r2
 8005424:	d3c5      	bcc.n	80053b2 <ssd1306_WriteChar+0x6e>
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	3301      	adds	r3, #1
 800542a:	61fb      	str	r3, [r7, #28]
 800542c:	797b      	ldrb	r3, [r7, #5]
 800542e:	461a      	mov	r2, r3
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	4293      	cmp	r3, r2
 8005434:	d3ad      	bcc.n	8005392 <ssd1306_WriteChar+0x4e>
 8005436:	4b06      	ldr	r3, [pc, #24]	; (8005450 <ssd1306_WriteChar+0x10c>)
 8005438:	881a      	ldrh	r2, [r3, #0]
 800543a:	793b      	ldrb	r3, [r7, #4]
 800543c:	b29b      	uxth	r3, r3
 800543e:	4413      	add	r3, r2
 8005440:	b29a      	uxth	r2, r3
 8005442:	4b03      	ldr	r3, [pc, #12]	; (8005450 <ssd1306_WriteChar+0x10c>)
 8005444:	801a      	strh	r2, [r3, #0]
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	4618      	mov	r0, r3
 800544a:	3724      	adds	r7, #36	; 0x24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd90      	pop	{r4, r7, pc}
 8005450:	20007f9c 	.word	0x20007f9c

08005454 <ssd1306_WriteString>:
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	1d38      	adds	r0, r7, #4
 800545e:	e880 0006 	stmia.w	r0, {r1, r2}
 8005462:	70fb      	strb	r3, [r7, #3]
 8005464:	e012      	b.n	800548c <ssd1306_WriteString+0x38>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	7818      	ldrb	r0, [r3, #0]
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	1d3a      	adds	r2, r7, #4
 800546e:	ca06      	ldmia	r2, {r1, r2}
 8005470:	f7ff ff68 	bl	8005344 <ssd1306_WriteChar>
 8005474:	4603      	mov	r3, r0
 8005476:	461a      	mov	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d002      	beq.n	8005486 <ssd1306_WriteString+0x32>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	e008      	b.n	8005498 <ssd1306_WriteString+0x44>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3301      	adds	r3, #1
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1e8      	bne.n	8005466 <ssd1306_WriteString+0x12>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	4618      	mov	r0, r3
 800549a:	3710      	adds	r7, #16
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80054a6:	4b15      	ldr	r3, [pc, #84]	; (80054fc <HAL_MspInit+0x5c>)
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	4a14      	ldr	r2, [pc, #80]	; (80054fc <HAL_MspInit+0x5c>)
 80054ac:	f043 0301 	orr.w	r3, r3, #1
 80054b0:	6193      	str	r3, [r2, #24]
 80054b2:	4b12      	ldr	r3, [pc, #72]	; (80054fc <HAL_MspInit+0x5c>)
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	60bb      	str	r3, [r7, #8]
 80054bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054be:	4b0f      	ldr	r3, [pc, #60]	; (80054fc <HAL_MspInit+0x5c>)
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	4a0e      	ldr	r2, [pc, #56]	; (80054fc <HAL_MspInit+0x5c>)
 80054c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c8:	61d3      	str	r3, [r2, #28]
 80054ca:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <HAL_MspInit+0x5c>)
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d2:	607b      	str	r3, [r7, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80054d6:	4b0a      	ldr	r3, [pc, #40]	; (8005500 <HAL_MspInit+0x60>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80054e2:	60fb      	str	r3, [r7, #12]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	4a04      	ldr	r2, [pc, #16]	; (8005500 <HAL_MspInit+0x60>)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054f2:	bf00      	nop
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr
 80054fc:	40021000 	.word	0x40021000
 8005500:	40010000 	.word	0x40010000

08005504 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08a      	sub	sp, #40	; 0x28
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800550c:	f107 0314 	add.w	r3, r7, #20
 8005510:	2200      	movs	r2, #0
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	605a      	str	r2, [r3, #4]
 8005516:	609a      	str	r2, [r3, #8]
 8005518:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1d      	ldr	r2, [pc, #116]	; (8005594 <HAL_I2C_MspInit+0x90>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d132      	bne.n	800558a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005524:	4b1c      	ldr	r3, [pc, #112]	; (8005598 <HAL_I2C_MspInit+0x94>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	4a1b      	ldr	r2, [pc, #108]	; (8005598 <HAL_I2C_MspInit+0x94>)
 800552a:	f043 0308 	orr.w	r3, r3, #8
 800552e:	6193      	str	r3, [r2, #24]
 8005530:	4b19      	ldr	r3, [pc, #100]	; (8005598 <HAL_I2C_MspInit+0x94>)
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	f003 0308 	and.w	r3, r3, #8
 8005538:	613b      	str	r3, [r7, #16]
 800553a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800553c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005542:	2312      	movs	r3, #18
 8005544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005546:	2303      	movs	r3, #3
 8005548:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800554a:	f107 0314 	add.w	r3, r7, #20
 800554e:	4619      	mov	r1, r3
 8005550:	4812      	ldr	r0, [pc, #72]	; (800559c <HAL_I2C_MspInit+0x98>)
 8005552:	f001 fbb5 	bl	8006cc0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8005556:	4b12      	ldr	r3, [pc, #72]	; (80055a0 <HAL_I2C_MspInit+0x9c>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	f043 0302 	orr.w	r3, r3, #2
 800556a:	627b      	str	r3, [r7, #36]	; 0x24
 800556c:	4a0c      	ldr	r2, [pc, #48]	; (80055a0 <HAL_I2C_MspInit+0x9c>)
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005572:	4b09      	ldr	r3, [pc, #36]	; (8005598 <HAL_I2C_MspInit+0x94>)
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	4a08      	ldr	r2, [pc, #32]	; (8005598 <HAL_I2C_MspInit+0x94>)
 8005578:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800557c:	61d3      	str	r3, [r2, #28]
 800557e:	4b06      	ldr	r3, [pc, #24]	; (8005598 <HAL_I2C_MspInit+0x94>)
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800558a:	bf00      	nop
 800558c:	3728      	adds	r7, #40	; 0x28
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	40005400 	.word	0x40005400
 8005598:	40021000 	.word	0x40021000
 800559c:	40010c00 	.word	0x40010c00
 80055a0:	40010000 	.word	0x40010000

080055a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1f      	ldr	r2, [pc, #124]	; (8005630 <HAL_TIM_Base_MspInit+0x8c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d10c      	bne.n	80055d0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80055b6:	4b1f      	ldr	r3, [pc, #124]	; (8005634 <HAL_TIM_Base_MspInit+0x90>)
 80055b8:	699b      	ldr	r3, [r3, #24]
 80055ba:	4a1e      	ldr	r2, [pc, #120]	; (8005634 <HAL_TIM_Base_MspInit+0x90>)
 80055bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80055c0:	6193      	str	r3, [r2, #24]
 80055c2:	4b1c      	ldr	r3, [pc, #112]	; (8005634 <HAL_TIM_Base_MspInit+0x90>)
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ca:	617b      	str	r3, [r7, #20]
 80055cc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80055ce:	e02a      	b.n	8005626 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a18      	ldr	r2, [pc, #96]	; (8005638 <HAL_TIM_Base_MspInit+0x94>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d114      	bne.n	8005604 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80055da:	4b16      	ldr	r3, [pc, #88]	; (8005634 <HAL_TIM_Base_MspInit+0x90>)
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	4a15      	ldr	r2, [pc, #84]	; (8005634 <HAL_TIM_Base_MspInit+0x90>)
 80055e0:	f043 0310 	orr.w	r3, r3, #16
 80055e4:	61d3      	str	r3, [r2, #28]
 80055e6:	4b13      	ldr	r3, [pc, #76]	; (8005634 <HAL_TIM_Base_MspInit+0x90>)
 80055e8:	69db      	ldr	r3, [r3, #28]
 80055ea:	f003 0310 	and.w	r3, r3, #16
 80055ee:	613b      	str	r3, [r7, #16]
 80055f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 80055f2:	2200      	movs	r2, #0
 80055f4:	2101      	movs	r1, #1
 80055f6:	2036      	movs	r0, #54	; 0x36
 80055f8:	f000 fea9 	bl	800634e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80055fc:	2036      	movs	r0, #54	; 0x36
 80055fe:	f000 fec2 	bl	8006386 <HAL_NVIC_EnableIRQ>
}
 8005602:	e010      	b.n	8005626 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a0c      	ldr	r2, [pc, #48]	; (800563c <HAL_TIM_Base_MspInit+0x98>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d10b      	bne.n	8005626 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800560e:	4b09      	ldr	r3, [pc, #36]	; (8005634 <HAL_TIM_Base_MspInit+0x90>)
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	4a08      	ldr	r2, [pc, #32]	; (8005634 <HAL_TIM_Base_MspInit+0x90>)
 8005614:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005618:	6193      	str	r3, [r2, #24]
 800561a:	4b06      	ldr	r3, [pc, #24]	; (8005634 <HAL_TIM_Base_MspInit+0x90>)
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
}
 8005626:	bf00      	nop
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	40012c00 	.word	0x40012c00
 8005634:	40021000 	.word	0x40021000
 8005638:	40001000 	.word	0x40001000
 800563c:	40013400 	.word	0x40013400

08005640 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b090      	sub	sp, #64	; 0x40
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	609a      	str	r2, [r3, #8]
 8005654:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565e:	d14f      	bne.n	8005700 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005660:	4b68      	ldr	r3, [pc, #416]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005662:	69db      	ldr	r3, [r3, #28]
 8005664:	4a67      	ldr	r2, [pc, #412]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	61d3      	str	r3, [r2, #28]
 800566c:	4b65      	ldr	r3, [pc, #404]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800566e:	69db      	ldr	r3, [r3, #28]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	62bb      	str	r3, [r7, #40]	; 0x28
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005678:	4b62      	ldr	r3, [pc, #392]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	4a61      	ldr	r2, [pc, #388]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800567e:	f043 0304 	orr.w	r3, r3, #4
 8005682:	6193      	str	r3, [r2, #24]
 8005684:	4b5f      	ldr	r3, [pc, #380]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005690:	4b5c      	ldr	r3, [pc, #368]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	4a5b      	ldr	r2, [pc, #364]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005696:	f043 0308 	orr.w	r3, r3, #8
 800569a:	6193      	str	r3, [r2, #24]
 800569c:	4b59      	ldr	r3, [pc, #356]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	f003 0308 	and.w	r3, r3, #8
 80056a4:	623b      	str	r3, [r7, #32]
 80056a6:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80056a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056ae:	2300      	movs	r3, #0
 80056b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056ba:	4619      	mov	r1, r3
 80056bc:	4852      	ldr	r0, [pc, #328]	; (8005808 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80056be:	f001 faff 	bl	8006cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80056c2:	2308      	movs	r3, #8
 80056c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056c6:	2300      	movs	r3, #0
 80056c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80056d2:	4619      	mov	r1, r3
 80056d4:	484d      	ldr	r0, [pc, #308]	; (800580c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80056d6:	f001 faf3 	bl	8006cc0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80056da:	4b4d      	ldr	r3, [pc, #308]	; (8005810 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056ea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80056ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056f8:	4a45      	ldr	r2, [pc, #276]	; (8005810 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80056fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056fc:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80056fe:	e07c      	b.n	80057fa <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a43      	ldr	r2, [pc, #268]	; (8005814 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d124      	bne.n	8005754 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800570a:	4b3e      	ldr	r3, [pc, #248]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800570c:	69db      	ldr	r3, [r3, #28]
 800570e:	4a3d      	ldr	r2, [pc, #244]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005710:	f043 0302 	orr.w	r3, r3, #2
 8005714:	61d3      	str	r3, [r2, #28]
 8005716:	4b3b      	ldr	r3, [pc, #236]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005722:	4b38      	ldr	r3, [pc, #224]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	4a37      	ldr	r2, [pc, #220]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005728:	f043 0304 	orr.w	r3, r3, #4
 800572c:	6193      	str	r3, [r2, #24]
 800572e:	4b35      	ldr	r3, [pc, #212]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	f003 0304 	and.w	r3, r3, #4
 8005736:	61bb      	str	r3, [r7, #24]
 8005738:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800573a:	23c0      	movs	r3, #192	; 0xc0
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800573e:	2300      	movs	r3, #0
 8005740:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005742:	2300      	movs	r3, #0
 8005744:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005746:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800574a:	4619      	mov	r1, r3
 800574c:	482e      	ldr	r0, [pc, #184]	; (8005808 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800574e:	f001 fab7 	bl	8006cc0 <HAL_GPIO_Init>
}
 8005752:	e052      	b.n	80057fa <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a2f      	ldr	r2, [pc, #188]	; (8005818 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d124      	bne.n	80057a8 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800575e:	4b29      	ldr	r3, [pc, #164]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	4a28      	ldr	r2, [pc, #160]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005764:	f043 0304 	orr.w	r3, r3, #4
 8005768:	61d3      	str	r3, [r2, #28]
 800576a:	4b26      	ldr	r3, [pc, #152]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	f003 0304 	and.w	r3, r3, #4
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005776:	4b23      	ldr	r3, [pc, #140]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	4a22      	ldr	r2, [pc, #136]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800577c:	f043 0308 	orr.w	r3, r3, #8
 8005780:	6193      	str	r3, [r2, #24]
 8005782:	4b20      	ldr	r3, [pc, #128]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	f003 0308 	and.w	r3, r3, #8
 800578a:	613b      	str	r3, [r7, #16]
 800578c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800578e:	23c0      	movs	r3, #192	; 0xc0
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005792:	2300      	movs	r3, #0
 8005794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005796:	2300      	movs	r3, #0
 8005798:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800579a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800579e:	4619      	mov	r1, r3
 80057a0:	481a      	ldr	r0, [pc, #104]	; (800580c <HAL_TIM_Encoder_MspInit+0x1cc>)
 80057a2:	f001 fa8d 	bl	8006cc0 <HAL_GPIO_Init>
}
 80057a6:	e028      	b.n	80057fa <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a1b      	ldr	r2, [pc, #108]	; (800581c <HAL_TIM_Encoder_MspInit+0x1dc>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d123      	bne.n	80057fa <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80057b2:	4b14      	ldr	r3, [pc, #80]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	4a13      	ldr	r2, [pc, #76]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057b8:	f043 0308 	orr.w	r3, r3, #8
 80057bc:	61d3      	str	r3, [r2, #28]
 80057be:	4b11      	ldr	r3, [pc, #68]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057ca:	4b0e      	ldr	r3, [pc, #56]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	4a0d      	ldr	r2, [pc, #52]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057d0:	f043 0304 	orr.w	r3, r3, #4
 80057d4:	6193      	str	r3, [r2, #24]
 80057d6:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	60bb      	str	r3, [r7, #8]
 80057e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80057e2:	2303      	movs	r3, #3
 80057e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80057e6:	2300      	movs	r3, #0
 80057e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80057f2:	4619      	mov	r1, r3
 80057f4:	4804      	ldr	r0, [pc, #16]	; (8005808 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80057f6:	f001 fa63 	bl	8006cc0 <HAL_GPIO_Init>
}
 80057fa:	bf00      	nop
 80057fc:	3740      	adds	r7, #64	; 0x40
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000
 8005808:	40010800 	.word	0x40010800
 800580c:	40010c00 	.word	0x40010c00
 8005810:	40010000 	.word	0x40010000
 8005814:	40000400 	.word	0x40000400
 8005818:	40000800 	.word	0x40000800
 800581c:	40000c00 	.word	0x40000c00

08005820 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b088      	sub	sp, #32
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005828:	f107 0310 	add.w	r3, r7, #16
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	605a      	str	r2, [r3, #4]
 8005832:	609a      	str	r2, [r3, #8]
 8005834:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1f      	ldr	r2, [pc, #124]	; (80058b8 <HAL_TIM_MspPostInit+0x98>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d119      	bne.n	8005874 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005840:	4b1e      	ldr	r3, [pc, #120]	; (80058bc <HAL_TIM_MspPostInit+0x9c>)
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	4a1d      	ldr	r2, [pc, #116]	; (80058bc <HAL_TIM_MspPostInit+0x9c>)
 8005846:	f043 0304 	orr.w	r3, r3, #4
 800584a:	6193      	str	r3, [r2, #24]
 800584c:	4b1b      	ldr	r3, [pc, #108]	; (80058bc <HAL_TIM_MspPostInit+0x9c>)
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	f003 0304 	and.w	r3, r3, #4
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8005858:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800585c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800585e:	2302      	movs	r3, #2
 8005860:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005862:	2302      	movs	r3, #2
 8005864:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005866:	f107 0310 	add.w	r3, r7, #16
 800586a:	4619      	mov	r1, r3
 800586c:	4814      	ldr	r0, [pc, #80]	; (80058c0 <HAL_TIM_MspPostInit+0xa0>)
 800586e:	f001 fa27 	bl	8006cc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8005872:	e01d      	b.n	80058b0 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a12      	ldr	r2, [pc, #72]	; (80058c4 <HAL_TIM_MspPostInit+0xa4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d118      	bne.n	80058b0 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800587e:	4b0f      	ldr	r3, [pc, #60]	; (80058bc <HAL_TIM_MspPostInit+0x9c>)
 8005880:	699b      	ldr	r3, [r3, #24]
 8005882:	4a0e      	ldr	r2, [pc, #56]	; (80058bc <HAL_TIM_MspPostInit+0x9c>)
 8005884:	f043 0310 	orr.w	r3, r3, #16
 8005888:	6193      	str	r3, [r2, #24]
 800588a:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <HAL_TIM_MspPostInit+0x9c>)
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	60bb      	str	r3, [r7, #8]
 8005894:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8005896:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800589a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800589c:	2302      	movs	r3, #2
 800589e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058a0:	2302      	movs	r3, #2
 80058a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058a4:	f107 0310 	add.w	r3, r7, #16
 80058a8:	4619      	mov	r1, r3
 80058aa:	4807      	ldr	r0, [pc, #28]	; (80058c8 <HAL_TIM_MspPostInit+0xa8>)
 80058ac:	f001 fa08 	bl	8006cc0 <HAL_GPIO_Init>
}
 80058b0:	bf00      	nop
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40012c00 	.word	0x40012c00
 80058bc:	40021000 	.word	0x40021000
 80058c0:	40010800 	.word	0x40010800
 80058c4:	40013400 	.word	0x40013400
 80058c8:	40011000 	.word	0x40011000

080058cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b08c      	sub	sp, #48	; 0x30
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058d4:	f107 031c 	add.w	r3, r7, #28
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	609a      	str	r2, [r3, #8]
 80058e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a6e      	ldr	r2, [pc, #440]	; (8005aa0 <HAL_UART_MspInit+0x1d4>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d15e      	bne.n	80059aa <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80058ec:	4b6d      	ldr	r3, [pc, #436]	; (8005aa4 <HAL_UART_MspInit+0x1d8>)
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	4a6c      	ldr	r2, [pc, #432]	; (8005aa4 <HAL_UART_MspInit+0x1d8>)
 80058f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058f6:	61d3      	str	r3, [r2, #28]
 80058f8:	4b6a      	ldr	r3, [pc, #424]	; (8005aa4 <HAL_UART_MspInit+0x1d8>)
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005904:	4b67      	ldr	r3, [pc, #412]	; (8005aa4 <HAL_UART_MspInit+0x1d8>)
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	4a66      	ldr	r2, [pc, #408]	; (8005aa4 <HAL_UART_MspInit+0x1d8>)
 800590a:	f043 0304 	orr.w	r3, r3, #4
 800590e:	6193      	str	r3, [r2, #24]
 8005910:	4b64      	ldr	r3, [pc, #400]	; (8005aa4 <HAL_UART_MspInit+0x1d8>)
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 800591c:	2304      	movs	r3, #4
 800591e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005920:	2302      	movs	r3, #2
 8005922:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005924:	2303      	movs	r3, #3
 8005926:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 8005928:	f107 031c 	add.w	r3, r7, #28
 800592c:	4619      	mov	r1, r3
 800592e:	485e      	ldr	r0, [pc, #376]	; (8005aa8 <HAL_UART_MspInit+0x1dc>)
 8005930:	f001 f9c6 	bl	8006cc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 8005934:	2308      	movs	r3, #8
 8005936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005938:	2300      	movs	r3, #0
 800593a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800593c:	2300      	movs	r3, #0
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8005940:	f107 031c 	add.w	r3, r7, #28
 8005944:	4619      	mov	r1, r3
 8005946:	4858      	ldr	r0, [pc, #352]	; (8005aa8 <HAL_UART_MspInit+0x1dc>)
 8005948:	f001 f9ba 	bl	8006cc0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800594c:	4b57      	ldr	r3, [pc, #348]	; (8005aac <HAL_UART_MspInit+0x1e0>)
 800594e:	4a58      	ldr	r2, [pc, #352]	; (8005ab0 <HAL_UART_MspInit+0x1e4>)
 8005950:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005952:	4b56      	ldr	r3, [pc, #344]	; (8005aac <HAL_UART_MspInit+0x1e0>)
 8005954:	2200      	movs	r2, #0
 8005956:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005958:	4b54      	ldr	r3, [pc, #336]	; (8005aac <HAL_UART_MspInit+0x1e0>)
 800595a:	2200      	movs	r2, #0
 800595c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800595e:	4b53      	ldr	r3, [pc, #332]	; (8005aac <HAL_UART_MspInit+0x1e0>)
 8005960:	2280      	movs	r2, #128	; 0x80
 8005962:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005964:	4b51      	ldr	r3, [pc, #324]	; (8005aac <HAL_UART_MspInit+0x1e0>)
 8005966:	2200      	movs	r2, #0
 8005968:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800596a:	4b50      	ldr	r3, [pc, #320]	; (8005aac <HAL_UART_MspInit+0x1e0>)
 800596c:	2200      	movs	r2, #0
 800596e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005970:	4b4e      	ldr	r3, [pc, #312]	; (8005aac <HAL_UART_MspInit+0x1e0>)
 8005972:	2200      	movs	r2, #0
 8005974:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005976:	4b4d      	ldr	r3, [pc, #308]	; (8005aac <HAL_UART_MspInit+0x1e0>)
 8005978:	2200      	movs	r2, #0
 800597a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800597c:	484b      	ldr	r0, [pc, #300]	; (8005aac <HAL_UART_MspInit+0x1e0>)
 800597e:	f000 fd1d 	bl	80063bc <HAL_DMA_Init>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8005988:	f7fe fe78 	bl	800467c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a47      	ldr	r2, [pc, #284]	; (8005aac <HAL_UART_MspInit+0x1e0>)
 8005990:	639a      	str	r2, [r3, #56]	; 0x38
 8005992:	4a46      	ldr	r2, [pc, #280]	; (8005aac <HAL_UART_MspInit+0x1e0>)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8005998:	2200      	movs	r2, #0
 800599a:	2102      	movs	r1, #2
 800599c:	2026      	movs	r0, #38	; 0x26
 800599e:	f000 fcd6 	bl	800634e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80059a2:	2026      	movs	r0, #38	; 0x26
 80059a4:	f000 fcef 	bl	8006386 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80059a8:	e076      	b.n	8005a98 <HAL_UART_MspInit+0x1cc>
  else if(huart->Instance==USART3)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a41      	ldr	r2, [pc, #260]	; (8005ab4 <HAL_UART_MspInit+0x1e8>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d171      	bne.n	8005a98 <HAL_UART_MspInit+0x1cc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80059b4:	4b3b      	ldr	r3, [pc, #236]	; (8005aa4 <HAL_UART_MspInit+0x1d8>)
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	4a3a      	ldr	r2, [pc, #232]	; (8005aa4 <HAL_UART_MspInit+0x1d8>)
 80059ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059be:	61d3      	str	r3, [r2, #28]
 80059c0:	4b38      	ldr	r3, [pc, #224]	; (8005aa4 <HAL_UART_MspInit+0x1d8>)
 80059c2:	69db      	ldr	r3, [r3, #28]
 80059c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80059cc:	4b35      	ldr	r3, [pc, #212]	; (8005aa4 <HAL_UART_MspInit+0x1d8>)
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	4a34      	ldr	r2, [pc, #208]	; (8005aa4 <HAL_UART_MspInit+0x1d8>)
 80059d2:	f043 0310 	orr.w	r3, r3, #16
 80059d6:	6193      	str	r3, [r2, #24]
 80059d8:	4b32      	ldr	r3, [pc, #200]	; (8005aa4 <HAL_UART_MspInit+0x1d8>)
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 80059e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059ea:	2302      	movs	r3, #2
 80059ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80059ee:	2303      	movs	r3, #3
 80059f0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 80059f2:	f107 031c 	add.w	r3, r7, #28
 80059f6:	4619      	mov	r1, r3
 80059f8:	482f      	ldr	r0, [pc, #188]	; (8005ab8 <HAL_UART_MspInit+0x1ec>)
 80059fa:	f001 f961 	bl	8006cc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 80059fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a04:	2300      	movs	r3, #0
 8005a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8005a0c:	f107 031c 	add.w	r3, r7, #28
 8005a10:	4619      	mov	r1, r3
 8005a12:	4829      	ldr	r0, [pc, #164]	; (8005ab8 <HAL_UART_MspInit+0x1ec>)
 8005a14:	f001 f954 	bl	8006cc0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8005a18:	4b28      	ldr	r3, [pc, #160]	; (8005abc <HAL_UART_MspInit+0x1f0>)
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a20:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	f043 0310 	orr.w	r3, r3, #16
 8005a34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a36:	4a21      	ldr	r2, [pc, #132]	; (8005abc <HAL_UART_MspInit+0x1f0>)
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8005a3c:	4b20      	ldr	r3, [pc, #128]	; (8005ac0 <HAL_UART_MspInit+0x1f4>)
 8005a3e:	4a21      	ldr	r2, [pc, #132]	; (8005ac4 <HAL_UART_MspInit+0x1f8>)
 8005a40:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a42:	4b1f      	ldr	r3, [pc, #124]	; (8005ac0 <HAL_UART_MspInit+0x1f4>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a48:	4b1d      	ldr	r3, [pc, #116]	; (8005ac0 <HAL_UART_MspInit+0x1f4>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a4e:	4b1c      	ldr	r3, [pc, #112]	; (8005ac0 <HAL_UART_MspInit+0x1f4>)
 8005a50:	2280      	movs	r2, #128	; 0x80
 8005a52:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a54:	4b1a      	ldr	r3, [pc, #104]	; (8005ac0 <HAL_UART_MspInit+0x1f4>)
 8005a56:	2200      	movs	r2, #0
 8005a58:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a5a:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <HAL_UART_MspInit+0x1f4>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8005a60:	4b17      	ldr	r3, [pc, #92]	; (8005ac0 <HAL_UART_MspInit+0x1f4>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a66:	4b16      	ldr	r3, [pc, #88]	; (8005ac0 <HAL_UART_MspInit+0x1f4>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005a6c:	4814      	ldr	r0, [pc, #80]	; (8005ac0 <HAL_UART_MspInit+0x1f4>)
 8005a6e:	f000 fca5 	bl	80063bc <HAL_DMA_Init>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d001      	beq.n	8005a7c <HAL_UART_MspInit+0x1b0>
      Error_Handler();
 8005a78:	f7fe fe00 	bl	800467c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a10      	ldr	r2, [pc, #64]	; (8005ac0 <HAL_UART_MspInit+0x1f4>)
 8005a80:	639a      	str	r2, [r3, #56]	; 0x38
 8005a82:	4a0f      	ldr	r2, [pc, #60]	; (8005ac0 <HAL_UART_MspInit+0x1f4>)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8005a88:	2200      	movs	r2, #0
 8005a8a:	2102      	movs	r1, #2
 8005a8c:	2027      	movs	r0, #39	; 0x27
 8005a8e:	f000 fc5e 	bl	800634e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005a92:	2027      	movs	r0, #39	; 0x27
 8005a94:	f000 fc77 	bl	8006386 <HAL_NVIC_EnableIRQ>
}
 8005a98:	bf00      	nop
 8005a9a:	3730      	adds	r7, #48	; 0x30
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}
 8005aa0:	40004400 	.word	0x40004400
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40010800 	.word	0x40010800
 8005aac:	2000090c 	.word	0x2000090c
 8005ab0:	4002006c 	.word	0x4002006c
 8005ab4:	40004800 	.word	0x40004800
 8005ab8:	40011000 	.word	0x40011000
 8005abc:	40010000 	.word	0x40010000
 8005ac0:	20000950 	.word	0x20000950
 8005ac4:	40020030 	.word	0x40020030

08005ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8005acc:	e7fe      	b.n	8005acc <NMI_Handler+0x4>

08005ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ad2:	e7fe      	b.n	8005ad2 <HardFault_Handler+0x4>

08005ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005ad8:	e7fe      	b.n	8005ad8 <MemManage_Handler+0x4>

08005ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005ada:	b480      	push	{r7}
 8005adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005ade:	e7fe      	b.n	8005ade <BusFault_Handler+0x4>

08005ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ae4:	e7fe      	b.n	8005ae4 <UsageFault_Handler+0x4>

08005ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005aea:	bf00      	nop
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc80      	pop	{r7}
 8005af0:	4770      	bx	lr

08005af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005af2:	b480      	push	{r7}
 8005af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005af6:	bf00      	nop
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr

08005afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005afe:	b480      	push	{r7}
 8005b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005b02:	bf00      	nop
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bc80      	pop	{r7}
 8005b08:	4770      	bx	lr

08005b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005b0e:	f000 fb07 	bl	8006120 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005b12:	bf00      	nop
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005b1c:	4802      	ldr	r0, [pc, #8]	; (8005b28 <DMA1_Channel3_IRQHandler+0x10>)
 8005b1e:	f000 fe65 	bl	80067ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005b22:	bf00      	nop
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	20000950 	.word	0x20000950

08005b2c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005b30:	4802      	ldr	r0, [pc, #8]	; (8005b3c <DMA1_Channel6_IRQHandler+0x10>)
 8005b32:	f000 fe5b 	bl	80067ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005b36:	bf00      	nop
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	2000090c 	.word	0x2000090c

08005b40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005b44:	4802      	ldr	r0, [pc, #8]	; (8005b50 <USART2_IRQHandler+0x10>)
 8005b46:	f003 fd75 	bl	8009634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005b4a:	bf00      	nop
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000884 	.word	0x20000884

08005b54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005b58:	4802      	ldr	r0, [pc, #8]	; (8005b64 <USART3_IRQHandler+0x10>)
 8005b5a:	f003 fd6b 	bl	8009634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005b5e:	bf00      	nop
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	200008c8 	.word	0x200008c8

08005b68 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 8005b6c:	4808      	ldr	r0, [pc, #32]	; (8005b90 <TIM6_IRQHandler+0x28>)
 8005b6e:	f7fc fecd 	bl	800290c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 8005b72:	4808      	ldr	r0, [pc, #32]	; (8005b94 <TIM6_IRQHandler+0x2c>)
 8005b74:	f7fc feca 	bl	800290c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 8005b78:	4807      	ldr	r0, [pc, #28]	; (8005b98 <TIM6_IRQHandler+0x30>)
 8005b7a:	f7fc fec7 	bl	800290c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 8005b7e:	4807      	ldr	r0, [pc, #28]	; (8005b9c <TIM6_IRQHandler+0x34>)
 8005b80:	f7fc fec4 	bl	800290c <huansic_motor_pid>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005b84:	4806      	ldr	r0, [pc, #24]	; (8005ba0 <TIM6_IRQHandler+0x38>)
 8005b86:	f002 fdaf 	bl	80086e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8005b8a:	bf00      	nop
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	20000994 	.word	0x20000994
 8005b94:	200009d0 	.word	0x200009d0
 8005b98:	20000a0c 	.word	0x20000a0c
 8005b9c:	20000a48 	.word	0x20000a48
 8005ba0:	200007f4 	.word	0x200007f4

08005ba4 <_getpid>:
 8005ba4:	b480      	push	{r7}
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	2301      	movs	r3, #1
 8005baa:	4618      	mov	r0, r3
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr

08005bb2 <_kill>:
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b082      	sub	sp, #8
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
 8005bbc:	f004 faaa 	bl	800a114 <__errno>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2216      	movs	r2, #22
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <_exit>:
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	f04f 31ff 	mov.w	r1, #4294967295
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff ffe7 	bl	8005bb2 <_kill>
 8005be4:	e7fe      	b.n	8005be4 <_exit+0x12>

08005be6 <_read>:
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b086      	sub	sp, #24
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	60f8      	str	r0, [r7, #12]
 8005bee:	60b9      	str	r1, [r7, #8]
 8005bf0:	607a      	str	r2, [r7, #4]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	e00a      	b.n	8005c0e <_read+0x28>
 8005bf8:	f3af 8000 	nop.w
 8005bfc:	4601      	mov	r1, r0
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	60ba      	str	r2, [r7, #8]
 8005c04:	b2ca      	uxtb	r2, r1
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	dbf0      	blt.n	8005bf8 <_read+0x12>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3718      	adds	r7, #24
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <_write>:
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	e009      	b.n	8005c46 <_write+0x26>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	1c5a      	adds	r2, r3, #1
 8005c36:	60ba      	str	r2, [r7, #8]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f3af 8000 	nop.w
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	3301      	adds	r3, #1
 8005c44:	617b      	str	r3, [r7, #20]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	dbf1      	blt.n	8005c32 <_write+0x12>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4618      	mov	r0, r3
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <_close>:
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	f04f 33ff 	mov.w	r3, #4294967295
 8005c64:	4618      	mov	r0, r3
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bc80      	pop	{r7}
 8005c6c:	4770      	bx	lr

08005c6e <_fstat>:
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c7e:	605a      	str	r2, [r3, #4]
 8005c80:	2300      	movs	r3, #0
 8005c82:	4618      	mov	r0, r3
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bc80      	pop	{r7}
 8005c8a:	4770      	bx	lr

08005c8c <_isatty>:
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	2301      	movs	r3, #1
 8005c96:	4618      	mov	r0, r3
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr

08005ca0 <_lseek>:
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	2300      	movs	r3, #0
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3714      	adds	r7, #20
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bc80      	pop	{r7}
 8005cb6:	4770      	bx	lr

08005cb8 <_sbrk>:
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	4a14      	ldr	r2, [pc, #80]	; (8005d14 <_sbrk+0x5c>)
 8005cc2:	4b15      	ldr	r3, [pc, #84]	; (8005d18 <_sbrk+0x60>)
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	4b13      	ldr	r3, [pc, #76]	; (8005d1c <_sbrk+0x64>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d102      	bne.n	8005cda <_sbrk+0x22>
 8005cd4:	4b11      	ldr	r3, [pc, #68]	; (8005d1c <_sbrk+0x64>)
 8005cd6:	4a12      	ldr	r2, [pc, #72]	; (8005d20 <_sbrk+0x68>)
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	4b10      	ldr	r3, [pc, #64]	; (8005d1c <_sbrk+0x64>)
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	693a      	ldr	r2, [r7, #16]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d207      	bcs.n	8005cf8 <_sbrk+0x40>
 8005ce8:	f004 fa14 	bl	800a114 <__errno>
 8005cec:	4603      	mov	r3, r0
 8005cee:	220c      	movs	r2, #12
 8005cf0:	601a      	str	r2, [r3, #0]
 8005cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf6:	e009      	b.n	8005d0c <_sbrk+0x54>
 8005cf8:	4b08      	ldr	r3, [pc, #32]	; (8005d1c <_sbrk+0x64>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	4b07      	ldr	r3, [pc, #28]	; (8005d1c <_sbrk+0x64>)
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	4413      	add	r3, r2
 8005d06:	4a05      	ldr	r2, [pc, #20]	; (8005d1c <_sbrk+0x64>)
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3718      	adds	r7, #24
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	2000c000 	.word	0x2000c000
 8005d18:	00000400 	.word	0x00000400
 8005d1c:	20007fa4 	.word	0x20007fa4
 8005d20:	20007fc0 	.word	0x20007fc0

08005d24 <SystemInit>:
 8005d24:	b480      	push	{r7}
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	bf00      	nop
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bc80      	pop	{r7}
 8005d2e:	4770      	bx	lr

08005d30 <go_Charge>:
extern Order *delivering[5];
extern uint8_t delivering_num;
extern XB_HandleTypeDef hxb;

void go_Charge(void)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
	Coordinate Beacon;
	Beacon = Get_nearest_Beacon();
 8005d36:	f000 f933 	bl	8005fa0 <Get_nearest_Beacon>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	607b      	str	r3, [r7, #4]
	GotoDestination(Beacon,1);
 8005d3e:	2101      	movs	r1, #1
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f7fe ff2f 	bl	8004ba4 <GotoDestination>
}
 8005d46:	bf00      	nop
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <set_Beacons>:

void set_Beacons(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af00      	add	r7, sp, #0
	uint8_t i;
	for(i = 0;i < 3; i++){
 8005d56:	2300      	movs	r3, #0
 8005d58:	71fb      	strb	r3, [r7, #7]
 8005d5a:	e00e      	b.n	8005d7a <set_Beacons+0x2a>
		GotoDestination(want_allyBeacons[i], 1);
 8005d5c:	79fb      	ldrb	r3, [r7, #7]
 8005d5e:	4a0b      	ldr	r2, [pc, #44]	; (8005d8c <set_Beacons+0x3c>)
 8005d60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d64:	4613      	mov	r3, r2
 8005d66:	2101      	movs	r1, #1
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fe ff1b 	bl	8004ba4 <GotoDestination>
		huansic_xb_setBeacon(&hxb);
 8005d6e:	4808      	ldr	r0, [pc, #32]	; (8005d90 <set_Beacons+0x40>)
 8005d70:	f7fd fc68 	bl	8003644 <huansic_xb_setBeacon>
	for(i = 0;i < 3; i++){
 8005d74:	79fb      	ldrb	r3, [r7, #7]
 8005d76:	3301      	adds	r3, #1
 8005d78:	71fb      	strb	r3, [r7, #7]
 8005d7a:	79fb      	ldrb	r3, [r7, #7]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d9ed      	bls.n	8005d5c <set_Beacons+0xc>
	}
}
 8005d80:	bf00      	nop
 8005d82:	bf00      	nop
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20000bbc 	.word	0x20000bbc
 8005d90:	20000adc 	.word	0x20000adc

08005d94 <Cal_Battery_Coord>:

void Cal_Battery_Coord(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
	uint8_t seted = 0;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	71fb      	strb	r3, [r7, #7]
	if(Find_crash(32552, 2))
 8005d9e:	2102      	movs	r1, #2
 8005da0:	f647 7028 	movw	r0, #32552	; 0x7f28
 8005da4:	f7fb fa28 	bl	80011f8 <Find_crash>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00d      	beq.n	8005dca <Cal_Battery_Coord+0x36>
	{
		//set a signal
		want_allyBeacons[seted].x = 127;
 8005dae:	79fb      	ldrb	r3, [r7, #7]
 8005db0:	4a42      	ldr	r2, [pc, #264]	; (8005ebc <Cal_Battery_Coord+0x128>)
 8005db2:	217f      	movs	r1, #127	; 0x7f
 8005db4:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		want_allyBeacons[seted].y = 40;
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	4a40      	ldr	r2, [pc, #256]	; (8005ebc <Cal_Battery_Coord+0x128>)
 8005dbc:	009b      	lsls	r3, r3, #2
 8005dbe:	4413      	add	r3, r2
 8005dc0:	2228      	movs	r2, #40	; 0x28
 8005dc2:	805a      	strh	r2, [r3, #2]
		seted += 1;
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	71fb      	strb	r3, [r7, #7]
	}
	if(Find_crash(32726, 2))
 8005dca:	2102      	movs	r1, #2
 8005dcc:	f647 70d6 	movw	r0, #32726	; 0x7fd6
 8005dd0:	f7fb fa12 	bl	80011f8 <Find_crash>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00d      	beq.n	8005df6 <Cal_Battery_Coord+0x62>
	{
		//set a signal
		want_allyBeacons[seted].x = 127;
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	4a37      	ldr	r2, [pc, #220]	; (8005ebc <Cal_Battery_Coord+0x128>)
 8005dde:	217f      	movs	r1, #127	; 0x7f
 8005de0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		want_allyBeacons[seted].y = 214;
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	4a35      	ldr	r2, [pc, #212]	; (8005ebc <Cal_Battery_Coord+0x128>)
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	22d6      	movs	r2, #214	; 0xd6
 8005dee:	805a      	strh	r2, [r3, #2]
		seted += 1;
 8005df0:	79fb      	ldrb	r3, [r7, #7]
 8005df2:	3301      	adds	r3, #1
 8005df4:	71fb      	strb	r3, [r7, #7]
	}
	if(Find_crash(10367, 2))
 8005df6:	2102      	movs	r1, #2
 8005df8:	f642 007f 	movw	r0, #10367	; 0x287f
 8005dfc:	f7fb f9fc 	bl	80011f8 <Find_crash>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00d      	beq.n	8005e22 <Cal_Battery_Coord+0x8e>
	{
		//set a signal
		want_allyBeacons[seted].x = 40;
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	4a2c      	ldr	r2, [pc, #176]	; (8005ebc <Cal_Battery_Coord+0x128>)
 8005e0a:	2128      	movs	r1, #40	; 0x28
 8005e0c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
		want_allyBeacons[seted].y = 127;
 8005e10:	79fb      	ldrb	r3, [r7, #7]
 8005e12:	4a2a      	ldr	r2, [pc, #168]	; (8005ebc <Cal_Battery_Coord+0x128>)
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	227f      	movs	r2, #127	; 0x7f
 8005e1a:	805a      	strh	r2, [r3, #2]
		seted += 1;
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	71fb      	strb	r3, [r7, #7]
	}
	if(seted != 3)
 8005e22:	79fb      	ldrb	r3, [r7, #7]
 8005e24:	2b03      	cmp	r3, #3
 8005e26:	d015      	beq.n	8005e54 <Cal_Battery_Coord+0xc0>
	{
		if(Find_crash(54911, 2))
 8005e28:	2102      	movs	r1, #2
 8005e2a:	f24d 607f 	movw	r0, #54911	; 0xd67f
 8005e2e:	f7fb f9e3 	bl	80011f8 <Find_crash>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00d      	beq.n	8005e54 <Cal_Battery_Coord+0xc0>
		{
			//set a signal
			want_allyBeacons[seted].x = 214;
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	4a20      	ldr	r2, [pc, #128]	; (8005ebc <Cal_Battery_Coord+0x128>)
 8005e3c:	21d6      	movs	r1, #214	; 0xd6
 8005e3e:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			want_allyBeacons[seted].y = 127;
 8005e42:	79fb      	ldrb	r3, [r7, #7]
 8005e44:	4a1d      	ldr	r2, [pc, #116]	; (8005ebc <Cal_Battery_Coord+0x128>)
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	227f      	movs	r2, #127	; 0x7f
 8005e4c:	805a      	strh	r2, [r3, #2]
			seted += 1;
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	3301      	adds	r3, #1
 8005e52:	71fb      	strb	r3, [r7, #7]
		}
	}
	uint8_t x_i = 127;
 8005e54:	237f      	movs	r3, #127	; 0x7f
 8005e56:	71bb      	strb	r3, [r7, #6]
	uint8_t y_i = 127;
 8005e58:	237f      	movs	r3, #127	; 0x7f
 8005e5a:	717b      	strb	r3, [r7, #5]
	while(seted != 3)
 8005e5c:	e026      	b.n	8005eac <Cal_Battery_Coord+0x118>
	{
		if(Find_crash(x_i * 256 + y_i, 2))
 8005e5e:	79bb      	ldrb	r3, [r7, #6]
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	021b      	lsls	r3, r3, #8
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	797b      	ldrb	r3, [r7, #5]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2102      	movs	r1, #2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fb f9c1 	bl	80011f8 <Find_crash>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d011      	beq.n	8005ea0 <Cal_Battery_Coord+0x10c>
		{
			want_allyBeacons[seted].x = x_i;
 8005e7c:	79fb      	ldrb	r3, [r7, #7]
 8005e7e:	79ba      	ldrb	r2, [r7, #6]
 8005e80:	b211      	sxth	r1, r2
 8005e82:	4a0e      	ldr	r2, [pc, #56]	; (8005ebc <Cal_Battery_Coord+0x128>)
 8005e84:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			want_allyBeacons[seted].y = y_i;
 8005e88:	79fb      	ldrb	r3, [r7, #7]
 8005e8a:	797a      	ldrb	r2, [r7, #5]
 8005e8c:	b211      	sxth	r1, r2
 8005e8e:	4a0b      	ldr	r2, [pc, #44]	; (8005ebc <Cal_Battery_Coord+0x128>)
 8005e90:	009b      	lsls	r3, r3, #2
 8005e92:	4413      	add	r3, r2
 8005e94:	460a      	mov	r2, r1
 8005e96:	805a      	strh	r2, [r3, #2]
			seted += 1;
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	3301      	adds	r3, #1
 8005e9c:	71fb      	strb	r3, [r7, #7]
 8005e9e:	e005      	b.n	8005eac <Cal_Battery_Coord+0x118>
		}
		else
		{
			x_i -= 5;
 8005ea0:	79bb      	ldrb	r3, [r7, #6]
 8005ea2:	3b05      	subs	r3, #5
 8005ea4:	71bb      	strb	r3, [r7, #6]
			y_i -= 5;
 8005ea6:	797b      	ldrb	r3, [r7, #5]
 8005ea8:	3b05      	subs	r3, #5
 8005eaa:	717b      	strb	r3, [r7, #5]
	while(seted != 3)
 8005eac:	79fb      	ldrb	r3, [r7, #7]
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	d1d5      	bne.n	8005e5e <Cal_Battery_Coord+0xca>
		}
	}
}
 8005eb2:	bf00      	nop
 8005eb4:	bf00      	nop
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20000bbc 	.word	0x20000bbc

08005ec0 <Get_packet>:

void Get_packet(Coordinate merchant)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
	GotoDestination(merchant,1);
 8005ec8:	2101      	movs	r1, #1
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7fe fe6a 	bl	8004ba4 <GotoDestination>
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <Send_packet>:

void Send_packet(Coordinate consumer)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b082      	sub	sp, #8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
	GotoDestination(consumer,1);
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fe fe5e 	bl	8004ba4 <GotoDestination>
}
 8005ee8:	bf00      	nop
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <Get_nearest_consumer>:

Coordinate Get_nearest_consumer(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
	int16_t mindis = 512;
 8005ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005efa:	81fb      	strh	r3, [r7, #14]
	int16_t distance;
	uint8_t minindex = 0;
 8005efc:	2300      	movs	r3, #0
 8005efe:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < delivering_num; i++)
 8005f00:	2300      	movs	r3, #0
 8005f02:	733b      	strb	r3, [r7, #12]
 8005f04:	e02d      	b.n	8005f62 <Get_nearest_consumer+0x72>
	{
		distance = abs(myCoord.x - delivering[i]->destCoord.x) + abs(myCoord.y - delivering[i]->destCoord.y);
 8005f06:	4b23      	ldr	r3, [pc, #140]	; (8005f94 <Get_nearest_consumer+0xa4>)
 8005f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	7b3b      	ldrb	r3, [r7, #12]
 8005f10:	4a21      	ldr	r2, [pc, #132]	; (8005f98 <Get_nearest_consumer+0xa8>)
 8005f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f16:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005f1a:	1acb      	subs	r3, r1, r3
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	bfb8      	it	lt
 8005f20:	425b      	neglt	r3, r3
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	4b1b      	ldr	r3, [pc, #108]	; (8005f94 <Get_nearest_consumer+0xa4>)
 8005f26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	7b3b      	ldrb	r3, [r7, #12]
 8005f2e:	491a      	ldr	r1, [pc, #104]	; (8005f98 <Get_nearest_consumer+0xa8>)
 8005f30:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f34:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005f38:	1ac3      	subs	r3, r0, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	bfb8      	it	lt
 8005f3e:	425b      	neglt	r3, r3
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	4413      	add	r3, r2
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	817b      	strh	r3, [r7, #10]
		if(distance < mindis){
 8005f48:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005f4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	da03      	bge.n	8005f5c <Get_nearest_consumer+0x6c>
			mindis = distance;
 8005f54:	897b      	ldrh	r3, [r7, #10]
 8005f56:	81fb      	strh	r3, [r7, #14]
			minindex = i;
 8005f58:	7b3b      	ldrb	r3, [r7, #12]
 8005f5a:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < delivering_num; i++)
 8005f5c:	7b3b      	ldrb	r3, [r7, #12]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	733b      	strb	r3, [r7, #12]
 8005f62:	4b0e      	ldr	r3, [pc, #56]	; (8005f9c <Get_nearest_consumer+0xac>)
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	7b3a      	ldrb	r2, [r7, #12]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d3cc      	bcc.n	8005f06 <Get_nearest_consumer+0x16>
		}
	}
	Coordinate nearest = delivering[minindex]->destCoord;
 8005f6c:	7b7b      	ldrb	r3, [r7, #13]
 8005f6e:	4a0a      	ldr	r2, [pc, #40]	; (8005f98 <Get_nearest_consumer+0xa8>)
 8005f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	603b      	str	r3, [r7, #0]
	return nearest;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	607b      	str	r3, [r7, #4]
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	88ba      	ldrh	r2, [r7, #4]
 8005f80:	f362 030f 	bfi	r3, r2, #0, #16
 8005f84:	88fa      	ldrh	r2, [r7, #6]
 8005f86:	f362 431f 	bfi	r3, r2, #16, #16

}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr
 8005f94:	20000be0 	.word	0x20000be0
 8005f98:	20000bc8 	.word	0x20000bc8
 8005f9c:	20000bdc 	.word	0x20000bdc

08005fa0 <Get_nearest_Beacon>:

Coordinate Get_nearest_Beacon(void){
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
	int16_t mindis = 512;
 8005fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005faa:	81fb      	strh	r3, [r7, #14]
	int16_t distance;
	uint8_t minindex = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < 3;i++)
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	733b      	strb	r3, [r7, #12]
 8005fb4:	e02b      	b.n	800600e <Get_nearest_Beacon+0x6e>
	{

		distance = abs(myCoord.x - allyBeacons[i].x) + abs(myCoord.y - allyBeacons[i].y);
 8005fb6:	4b22      	ldr	r3, [pc, #136]	; (8006040 <Get_nearest_Beacon+0xa0>)
 8005fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	7b3b      	ldrb	r3, [r7, #12]
 8005fc0:	4a20      	ldr	r2, [pc, #128]	; (8006044 <Get_nearest_Beacon+0xa4>)
 8005fc2:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 8005fc6:	1acb      	subs	r3, r1, r3
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bfb8      	it	lt
 8005fcc:	425b      	neglt	r3, r3
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <Get_nearest_Beacon+0xa0>)
 8005fd2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	7b3b      	ldrb	r3, [r7, #12]
 8005fda:	491a      	ldr	r1, [pc, #104]	; (8006044 <Get_nearest_Beacon+0xa4>)
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	440b      	add	r3, r1
 8005fe0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005fe4:	1ac3      	subs	r3, r0, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bfb8      	it	lt
 8005fea:	425b      	neglt	r3, r3
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	4413      	add	r3, r2
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	817b      	strh	r3, [r7, #10]
		if(distance < mindis){
 8005ff4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005ff8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	da03      	bge.n	8006008 <Get_nearest_Beacon+0x68>
			mindis = distance;
 8006000:	897b      	ldrh	r3, [r7, #10]
 8006002:	81fb      	strh	r3, [r7, #14]
			minindex = i;
 8006004:	7b3b      	ldrb	r3, [r7, #12]
 8006006:	737b      	strb	r3, [r7, #13]
	for(uint8_t i = 0;i < 3;i++)
 8006008:	7b3b      	ldrb	r3, [r7, #12]
 800600a:	3301      	adds	r3, #1
 800600c:	733b      	strb	r3, [r7, #12]
 800600e:	7b3b      	ldrb	r3, [r7, #12]
 8006010:	2b02      	cmp	r3, #2
 8006012:	d9d0      	bls.n	8005fb6 <Get_nearest_Beacon+0x16>
		}
	}
	Coordinate nearest = allyBeacons[minindex];
 8006014:	7b7b      	ldrb	r3, [r7, #13]
 8006016:	490b      	ldr	r1, [pc, #44]	; (8006044 <Get_nearest_Beacon+0xa4>)
 8006018:	463a      	mov	r2, r7
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	6818      	ldr	r0, [r3, #0]
 8006020:	6010      	str	r0, [r2, #0]
	return nearest;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	607b      	str	r3, [r7, #4]
 8006026:	2300      	movs	r3, #0
 8006028:	88ba      	ldrh	r2, [r7, #4]
 800602a:	f362 030f 	bfi	r3, r2, #0, #16
 800602e:	88fa      	ldrh	r2, [r7, #6]
 8006030:	f362 431f 	bfi	r3, r2, #16, #16
}
 8006034:	4618      	mov	r0, r3
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	bc80      	pop	{r7}
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000be0 	.word	0x20000be0
 8006044:	20000ba4 	.word	0x20000ba4

08006048 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006048:	480c      	ldr	r0, [pc, #48]	; (800607c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800604a:	490d      	ldr	r1, [pc, #52]	; (8006080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800604c:	4a0d      	ldr	r2, [pc, #52]	; (8006084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800604e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006050:	e002      	b.n	8006058 <LoopCopyDataInit>

08006052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006056:	3304      	adds	r3, #4

08006058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800605a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800605c:	d3f9      	bcc.n	8006052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800605e:	4a0a      	ldr	r2, [pc, #40]	; (8006088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006060:	4c0a      	ldr	r4, [pc, #40]	; (800608c <LoopFillZerobss+0x22>)
  movs r3, #0
 8006062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006064:	e001      	b.n	800606a <LoopFillZerobss>

08006066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006068:	3204      	adds	r2, #4

0800606a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800606a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800606c:	d3fb      	bcc.n	8006066 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800606e:	f7ff fe59 	bl	8005d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006072:	f004 f867 	bl	800a144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006076:	f7fd fb7d 	bl	8003774 <main>
  bx lr
 800607a:	4770      	bx	lr
  ldr r0, =_sdata
 800607c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006080:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8006084:	0800d258 	.word	0x0800d258
  ldr r2, =_sbss
 8006088:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800608c:	20007fbc 	.word	0x20007fbc

08006090 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006090:	e7fe      	b.n	8006090 <ADC1_2_IRQHandler>
	...

08006094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006098:	4b08      	ldr	r3, [pc, #32]	; (80060bc <HAL_Init+0x28>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a07      	ldr	r2, [pc, #28]	; (80060bc <HAL_Init+0x28>)
 800609e:	f043 0310 	orr.w	r3, r3, #16
 80060a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80060a4:	2003      	movs	r0, #3
 80060a6:	f000 f947 	bl	8006338 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80060aa:	200f      	movs	r0, #15
 80060ac:	f000 f808 	bl	80060c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80060b0:	f7ff f9f6 	bl	80054a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	40022000 	.word	0x40022000

080060c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80060c8:	4b12      	ldr	r3, [pc, #72]	; (8006114 <HAL_InitTick+0x54>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	4b12      	ldr	r3, [pc, #72]	; (8006118 <HAL_InitTick+0x58>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	4619      	mov	r1, r3
 80060d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80060da:	fbb2 f3f3 	udiv	r3, r2, r3
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 f95f 	bl	80063a2 <HAL_SYSTICK_Config>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d001      	beq.n	80060ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e00e      	b.n	800610c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b0f      	cmp	r3, #15
 80060f2:	d80a      	bhi.n	800610a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80060f4:	2200      	movs	r2, #0
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	f04f 30ff 	mov.w	r0, #4294967295
 80060fc:	f000 f927 	bl	800634e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006100:	4a06      	ldr	r2, [pc, #24]	; (800611c <HAL_InitTick+0x5c>)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	e000      	b.n	800610c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
}
 800610c:	4618      	mov	r0, r3
 800610e:	3708      	adds	r7, #8
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}
 8006114:	2000000c 	.word	0x2000000c
 8006118:	20000014 	.word	0x20000014
 800611c:	20000010 	.word	0x20000010

08006120 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006124:	4b05      	ldr	r3, [pc, #20]	; (800613c <HAL_IncTick+0x1c>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	4b05      	ldr	r3, [pc, #20]	; (8006140 <HAL_IncTick+0x20>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4413      	add	r3, r2
 8006130:	4a03      	ldr	r2, [pc, #12]	; (8006140 <HAL_IncTick+0x20>)
 8006132:	6013      	str	r3, [r2, #0]
}
 8006134:	bf00      	nop
 8006136:	46bd      	mov	sp, r7
 8006138:	bc80      	pop	{r7}
 800613a:	4770      	bx	lr
 800613c:	20000014 	.word	0x20000014
 8006140:	20007fa8 	.word	0x20007fa8

08006144 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006144:	b480      	push	{r7}
 8006146:	af00      	add	r7, sp, #0
  return uwTick;
 8006148:	4b02      	ldr	r3, [pc, #8]	; (8006154 <HAL_GetTick+0x10>)
 800614a:	681b      	ldr	r3, [r3, #0]
}
 800614c:	4618      	mov	r0, r3
 800614e:	46bd      	mov	sp, r7
 8006150:	bc80      	pop	{r7}
 8006152:	4770      	bx	lr
 8006154:	20007fa8 	.word	0x20007fa8

08006158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006160:	f7ff fff0 	bl	8006144 <HAL_GetTick>
 8006164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006170:	d005      	beq.n	800617e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006172:	4b0a      	ldr	r3, [pc, #40]	; (800619c <HAL_Delay+0x44>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800617e:	bf00      	nop
 8006180:	f7ff ffe0 	bl	8006144 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	429a      	cmp	r2, r3
 800618e:	d8f7      	bhi.n	8006180 <HAL_Delay+0x28>
  {
  }
}
 8006190:	bf00      	nop
 8006192:	bf00      	nop
 8006194:	3710      	adds	r7, #16
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	20000014 	.word	0x20000014

080061a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061b0:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <__NVIC_SetPriorityGrouping+0x44>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061bc:	4013      	ands	r3, r2
 80061be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061d2:	4a04      	ldr	r2, [pc, #16]	; (80061e4 <__NVIC_SetPriorityGrouping+0x44>)
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	60d3      	str	r3, [r2, #12]
}
 80061d8:	bf00      	nop
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	bc80      	pop	{r7}
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	e000ed00 	.word	0xe000ed00

080061e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061e8:	b480      	push	{r7}
 80061ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061ec:	4b04      	ldr	r3, [pc, #16]	; (8006200 <__NVIC_GetPriorityGrouping+0x18>)
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	0a1b      	lsrs	r3, r3, #8
 80061f2:	f003 0307 	and.w	r3, r3, #7
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bc80      	pop	{r7}
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	e000ed00 	.word	0xe000ed00

08006204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	4603      	mov	r3, r0
 800620c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800620e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006212:	2b00      	cmp	r3, #0
 8006214:	db0b      	blt.n	800622e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006216:	79fb      	ldrb	r3, [r7, #7]
 8006218:	f003 021f 	and.w	r2, r3, #31
 800621c:	4906      	ldr	r1, [pc, #24]	; (8006238 <__NVIC_EnableIRQ+0x34>)
 800621e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006222:	095b      	lsrs	r3, r3, #5
 8006224:	2001      	movs	r0, #1
 8006226:	fa00 f202 	lsl.w	r2, r0, r2
 800622a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800622e:	bf00      	nop
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	bc80      	pop	{r7}
 8006236:	4770      	bx	lr
 8006238:	e000e100 	.word	0xe000e100

0800623c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	4603      	mov	r3, r0
 8006244:	6039      	str	r1, [r7, #0]
 8006246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800624c:	2b00      	cmp	r3, #0
 800624e:	db0a      	blt.n	8006266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	b2da      	uxtb	r2, r3
 8006254:	490c      	ldr	r1, [pc, #48]	; (8006288 <__NVIC_SetPriority+0x4c>)
 8006256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800625a:	0112      	lsls	r2, r2, #4
 800625c:	b2d2      	uxtb	r2, r2
 800625e:	440b      	add	r3, r1
 8006260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006264:	e00a      	b.n	800627c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	b2da      	uxtb	r2, r3
 800626a:	4908      	ldr	r1, [pc, #32]	; (800628c <__NVIC_SetPriority+0x50>)
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	f003 030f 	and.w	r3, r3, #15
 8006272:	3b04      	subs	r3, #4
 8006274:	0112      	lsls	r2, r2, #4
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	440b      	add	r3, r1
 800627a:	761a      	strb	r2, [r3, #24]
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	e000e100 	.word	0xe000e100
 800628c:	e000ed00 	.word	0xe000ed00

08006290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006290:	b480      	push	{r7}
 8006292:	b089      	sub	sp, #36	; 0x24
 8006294:	af00      	add	r7, sp, #0
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f003 0307 	and.w	r3, r3, #7
 80062a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f1c3 0307 	rsb	r3, r3, #7
 80062aa:	2b04      	cmp	r3, #4
 80062ac:	bf28      	it	cs
 80062ae:	2304      	movcs	r3, #4
 80062b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	3304      	adds	r3, #4
 80062b6:	2b06      	cmp	r3, #6
 80062b8:	d902      	bls.n	80062c0 <NVIC_EncodePriority+0x30>
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	3b03      	subs	r3, #3
 80062be:	e000      	b.n	80062c2 <NVIC_EncodePriority+0x32>
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062c4:	f04f 32ff 	mov.w	r2, #4294967295
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	fa02 f303 	lsl.w	r3, r2, r3
 80062ce:	43da      	mvns	r2, r3
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	401a      	ands	r2, r3
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062d8:	f04f 31ff 	mov.w	r1, #4294967295
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	fa01 f303 	lsl.w	r3, r1, r3
 80062e2:	43d9      	mvns	r1, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062e8:	4313      	orrs	r3, r2
         );
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3724      	adds	r7, #36	; 0x24
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bc80      	pop	{r7}
 80062f2:	4770      	bx	lr

080062f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3b01      	subs	r3, #1
 8006300:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006304:	d301      	bcc.n	800630a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006306:	2301      	movs	r3, #1
 8006308:	e00f      	b.n	800632a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800630a:	4a0a      	ldr	r2, [pc, #40]	; (8006334 <SysTick_Config+0x40>)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	3b01      	subs	r3, #1
 8006310:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006312:	210f      	movs	r1, #15
 8006314:	f04f 30ff 	mov.w	r0, #4294967295
 8006318:	f7ff ff90 	bl	800623c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800631c:	4b05      	ldr	r3, [pc, #20]	; (8006334 <SysTick_Config+0x40>)
 800631e:	2200      	movs	r2, #0
 8006320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006322:	4b04      	ldr	r3, [pc, #16]	; (8006334 <SysTick_Config+0x40>)
 8006324:	2207      	movs	r2, #7
 8006326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	e000e010 	.word	0xe000e010

08006338 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f7ff ff2d 	bl	80061a0 <__NVIC_SetPriorityGrouping>
}
 8006346:	bf00      	nop
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800634e:	b580      	push	{r7, lr}
 8006350:	b086      	sub	sp, #24
 8006352:	af00      	add	r7, sp, #0
 8006354:	4603      	mov	r3, r0
 8006356:	60b9      	str	r1, [r7, #8]
 8006358:	607a      	str	r2, [r7, #4]
 800635a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800635c:	2300      	movs	r3, #0
 800635e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006360:	f7ff ff42 	bl	80061e8 <__NVIC_GetPriorityGrouping>
 8006364:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	68b9      	ldr	r1, [r7, #8]
 800636a:	6978      	ldr	r0, [r7, #20]
 800636c:	f7ff ff90 	bl	8006290 <NVIC_EncodePriority>
 8006370:	4602      	mov	r2, r0
 8006372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006376:	4611      	mov	r1, r2
 8006378:	4618      	mov	r0, r3
 800637a:	f7ff ff5f 	bl	800623c <__NVIC_SetPriority>
}
 800637e:	bf00      	nop
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	4603      	mov	r3, r0
 800638e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff ff35 	bl	8006204 <__NVIC_EnableIRQ>
}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80063a2:	b580      	push	{r7, lr}
 80063a4:	b082      	sub	sp, #8
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff ffa2 	bl	80062f4 <SysTick_Config>
 80063b0:	4603      	mov	r3, r0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e059      	b.n	8006486 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	461a      	mov	r2, r3
 80063d8:	4b2d      	ldr	r3, [pc, #180]	; (8006490 <HAL_DMA_Init+0xd4>)
 80063da:	429a      	cmp	r2, r3
 80063dc:	d80f      	bhi.n	80063fe <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	461a      	mov	r2, r3
 80063e4:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <HAL_DMA_Init+0xd8>)
 80063e6:	4413      	add	r3, r2
 80063e8:	4a2b      	ldr	r2, [pc, #172]	; (8006498 <HAL_DMA_Init+0xdc>)
 80063ea:	fba2 2303 	umull	r2, r3, r2, r3
 80063ee:	091b      	lsrs	r3, r3, #4
 80063f0:	009a      	lsls	r2, r3, #2
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a28      	ldr	r2, [pc, #160]	; (800649c <HAL_DMA_Init+0xe0>)
 80063fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80063fc:	e00e      	b.n	800641c <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	461a      	mov	r2, r3
 8006404:	4b26      	ldr	r3, [pc, #152]	; (80064a0 <HAL_DMA_Init+0xe4>)
 8006406:	4413      	add	r3, r2
 8006408:	4a23      	ldr	r2, [pc, #140]	; (8006498 <HAL_DMA_Init+0xdc>)
 800640a:	fba2 2303 	umull	r2, r3, r2, r3
 800640e:	091b      	lsrs	r3, r3, #4
 8006410:	009a      	lsls	r2, r3, #2
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a22      	ldr	r2, [pc, #136]	; (80064a4 <HAL_DMA_Init+0xe8>)
 800641a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2202      	movs	r2, #2
 8006420:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006432:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006436:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006440:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800644c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006458:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	69db      	ldr	r3, [r3, #28]
 800645e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	bc80      	pop	{r7}
 800648e:	4770      	bx	lr
 8006490:	40020407 	.word	0x40020407
 8006494:	bffdfff8 	.word	0xbffdfff8
 8006498:	cccccccd 	.word	0xcccccccd
 800649c:	40020000 	.word	0x40020000
 80064a0:	bffdfbf8 	.word	0xbffdfbf8
 80064a4:	40020400 	.word	0x40020400

080064a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]
 80064b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d101      	bne.n	80064c8 <HAL_DMA_Start_IT+0x20>
 80064c4:	2302      	movs	r3, #2
 80064c6:	e04a      	b.n	800655e <HAL_DMA_Start_IT+0xb6>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d13a      	bne.n	8006550 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2202      	movs	r2, #2
 80064de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	68f8      	ldr	r0, [r7, #12]
 8006500:	f000 fbb0 	bl	8006c64 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	2b00      	cmp	r3, #0
 800650a:	d008      	beq.n	800651e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 020e 	orr.w	r2, r2, #14
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	e00f      	b.n	800653e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0204 	bic.w	r2, r2, #4
 800652c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 020a 	orr.w	r2, r2, #10
 800653c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f042 0201 	orr.w	r2, r2, #1
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	e005      	b.n	800655c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006558:	2302      	movs	r3, #2
 800655a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800655c:	7dfb      	ldrb	r3, [r7, #23]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006578:	2b02      	cmp	r3, #2
 800657a:	d008      	beq.n	800658e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2204      	movs	r2, #4
 8006580:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e020      	b.n	80065d0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 020e 	bic.w	r2, r2, #14
 800659c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0201 	bic.w	r2, r2, #1
 80065ac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b6:	2101      	movs	r1, #1
 80065b8:	fa01 f202 	lsl.w	r2, r1, r2
 80065bc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80065ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3714      	adds	r7, #20
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bc80      	pop	{r7}
 80065d8:	4770      	bx	lr
	...

080065dc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80065dc:	b580      	push	{r7, lr}
 80065de:	b084      	sub	sp, #16
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d005      	beq.n	80065fe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2204      	movs	r2, #4
 80065f6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	73fb      	strb	r3, [r7, #15]
 80065fc:	e0d6      	b.n	80067ac <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f022 020e 	bic.w	r2, r2, #14
 800660c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f022 0201 	bic.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	4b64      	ldr	r3, [pc, #400]	; (80067b8 <HAL_DMA_Abort_IT+0x1dc>)
 8006626:	429a      	cmp	r2, r3
 8006628:	d958      	bls.n	80066dc <HAL_DMA_Abort_IT+0x100>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a63      	ldr	r2, [pc, #396]	; (80067bc <HAL_DMA_Abort_IT+0x1e0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d04f      	beq.n	80066d4 <HAL_DMA_Abort_IT+0xf8>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a61      	ldr	r2, [pc, #388]	; (80067c0 <HAL_DMA_Abort_IT+0x1e4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d048      	beq.n	80066d0 <HAL_DMA_Abort_IT+0xf4>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a60      	ldr	r2, [pc, #384]	; (80067c4 <HAL_DMA_Abort_IT+0x1e8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d040      	beq.n	80066ca <HAL_DMA_Abort_IT+0xee>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a5e      	ldr	r2, [pc, #376]	; (80067c8 <HAL_DMA_Abort_IT+0x1ec>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d038      	beq.n	80066c4 <HAL_DMA_Abort_IT+0xe8>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a5d      	ldr	r2, [pc, #372]	; (80067cc <HAL_DMA_Abort_IT+0x1f0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d030      	beq.n	80066be <HAL_DMA_Abort_IT+0xe2>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a5b      	ldr	r2, [pc, #364]	; (80067d0 <HAL_DMA_Abort_IT+0x1f4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d028      	beq.n	80066b8 <HAL_DMA_Abort_IT+0xdc>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a53      	ldr	r2, [pc, #332]	; (80067b8 <HAL_DMA_Abort_IT+0x1dc>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d020      	beq.n	80066b2 <HAL_DMA_Abort_IT+0xd6>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a57      	ldr	r2, [pc, #348]	; (80067d4 <HAL_DMA_Abort_IT+0x1f8>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d019      	beq.n	80066ae <HAL_DMA_Abort_IT+0xd2>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a56      	ldr	r2, [pc, #344]	; (80067d8 <HAL_DMA_Abort_IT+0x1fc>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d012      	beq.n	80066aa <HAL_DMA_Abort_IT+0xce>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a54      	ldr	r2, [pc, #336]	; (80067dc <HAL_DMA_Abort_IT+0x200>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00a      	beq.n	80066a4 <HAL_DMA_Abort_IT+0xc8>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	4a53      	ldr	r2, [pc, #332]	; (80067e0 <HAL_DMA_Abort_IT+0x204>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d102      	bne.n	800669e <HAL_DMA_Abort_IT+0xc2>
 8006698:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800669c:	e01b      	b.n	80066d6 <HAL_DMA_Abort_IT+0xfa>
 800669e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066a2:	e018      	b.n	80066d6 <HAL_DMA_Abort_IT+0xfa>
 80066a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066a8:	e015      	b.n	80066d6 <HAL_DMA_Abort_IT+0xfa>
 80066aa:	2310      	movs	r3, #16
 80066ac:	e013      	b.n	80066d6 <HAL_DMA_Abort_IT+0xfa>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e011      	b.n	80066d6 <HAL_DMA_Abort_IT+0xfa>
 80066b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066b6:	e00e      	b.n	80066d6 <HAL_DMA_Abort_IT+0xfa>
 80066b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80066bc:	e00b      	b.n	80066d6 <HAL_DMA_Abort_IT+0xfa>
 80066be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80066c2:	e008      	b.n	80066d6 <HAL_DMA_Abort_IT+0xfa>
 80066c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066c8:	e005      	b.n	80066d6 <HAL_DMA_Abort_IT+0xfa>
 80066ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066ce:	e002      	b.n	80066d6 <HAL_DMA_Abort_IT+0xfa>
 80066d0:	2310      	movs	r3, #16
 80066d2:	e000      	b.n	80066d6 <HAL_DMA_Abort_IT+0xfa>
 80066d4:	2301      	movs	r3, #1
 80066d6:	4a43      	ldr	r2, [pc, #268]	; (80067e4 <HAL_DMA_Abort_IT+0x208>)
 80066d8:	6053      	str	r3, [r2, #4]
 80066da:	e057      	b.n	800678c <HAL_DMA_Abort_IT+0x1b0>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a36      	ldr	r2, [pc, #216]	; (80067bc <HAL_DMA_Abort_IT+0x1e0>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d04f      	beq.n	8006786 <HAL_DMA_Abort_IT+0x1aa>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a35      	ldr	r2, [pc, #212]	; (80067c0 <HAL_DMA_Abort_IT+0x1e4>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d048      	beq.n	8006782 <HAL_DMA_Abort_IT+0x1a6>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a33      	ldr	r2, [pc, #204]	; (80067c4 <HAL_DMA_Abort_IT+0x1e8>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d040      	beq.n	800677c <HAL_DMA_Abort_IT+0x1a0>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a32      	ldr	r2, [pc, #200]	; (80067c8 <HAL_DMA_Abort_IT+0x1ec>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d038      	beq.n	8006776 <HAL_DMA_Abort_IT+0x19a>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a30      	ldr	r2, [pc, #192]	; (80067cc <HAL_DMA_Abort_IT+0x1f0>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d030      	beq.n	8006770 <HAL_DMA_Abort_IT+0x194>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a2f      	ldr	r2, [pc, #188]	; (80067d0 <HAL_DMA_Abort_IT+0x1f4>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d028      	beq.n	800676a <HAL_DMA_Abort_IT+0x18e>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a26      	ldr	r2, [pc, #152]	; (80067b8 <HAL_DMA_Abort_IT+0x1dc>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d020      	beq.n	8006764 <HAL_DMA_Abort_IT+0x188>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a2b      	ldr	r2, [pc, #172]	; (80067d4 <HAL_DMA_Abort_IT+0x1f8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d019      	beq.n	8006760 <HAL_DMA_Abort_IT+0x184>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a29      	ldr	r2, [pc, #164]	; (80067d8 <HAL_DMA_Abort_IT+0x1fc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d012      	beq.n	800675c <HAL_DMA_Abort_IT+0x180>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a28      	ldr	r2, [pc, #160]	; (80067dc <HAL_DMA_Abort_IT+0x200>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d00a      	beq.n	8006756 <HAL_DMA_Abort_IT+0x17a>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a26      	ldr	r2, [pc, #152]	; (80067e0 <HAL_DMA_Abort_IT+0x204>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d102      	bne.n	8006750 <HAL_DMA_Abort_IT+0x174>
 800674a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800674e:	e01b      	b.n	8006788 <HAL_DMA_Abort_IT+0x1ac>
 8006750:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006754:	e018      	b.n	8006788 <HAL_DMA_Abort_IT+0x1ac>
 8006756:	f44f 7380 	mov.w	r3, #256	; 0x100
 800675a:	e015      	b.n	8006788 <HAL_DMA_Abort_IT+0x1ac>
 800675c:	2310      	movs	r3, #16
 800675e:	e013      	b.n	8006788 <HAL_DMA_Abort_IT+0x1ac>
 8006760:	2301      	movs	r3, #1
 8006762:	e011      	b.n	8006788 <HAL_DMA_Abort_IT+0x1ac>
 8006764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006768:	e00e      	b.n	8006788 <HAL_DMA_Abort_IT+0x1ac>
 800676a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800676e:	e00b      	b.n	8006788 <HAL_DMA_Abort_IT+0x1ac>
 8006770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006774:	e008      	b.n	8006788 <HAL_DMA_Abort_IT+0x1ac>
 8006776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800677a:	e005      	b.n	8006788 <HAL_DMA_Abort_IT+0x1ac>
 800677c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006780:	e002      	b.n	8006788 <HAL_DMA_Abort_IT+0x1ac>
 8006782:	2310      	movs	r3, #16
 8006784:	e000      	b.n	8006788 <HAL_DMA_Abort_IT+0x1ac>
 8006786:	2301      	movs	r3, #1
 8006788:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <HAL_DMA_Abort_IT+0x20c>)
 800678a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d003      	beq.n	80067ac <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	4798      	blx	r3
    } 
  }
  return status;
 80067ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	40020080 	.word	0x40020080
 80067bc:	40020008 	.word	0x40020008
 80067c0:	4002001c 	.word	0x4002001c
 80067c4:	40020030 	.word	0x40020030
 80067c8:	40020044 	.word	0x40020044
 80067cc:	40020058 	.word	0x40020058
 80067d0:	4002006c 	.word	0x4002006c
 80067d4:	40020408 	.word	0x40020408
 80067d8:	4002041c 	.word	0x4002041c
 80067dc:	40020430 	.word	0x40020430
 80067e0:	40020444 	.word	0x40020444
 80067e4:	40020400 	.word	0x40020400
 80067e8:	40020000 	.word	0x40020000

080067ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006808:	2204      	movs	r2, #4
 800680a:	409a      	lsls	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4013      	ands	r3, r2
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 80f1 	beq.w	80069f8 <HAL_DMA_IRQHandler+0x20c>
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 80eb 	beq.w	80069f8 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b00      	cmp	r3, #0
 800682e:	d107      	bne.n	8006840 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0204 	bic.w	r2, r2, #4
 800683e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	4b5f      	ldr	r3, [pc, #380]	; (80069c4 <HAL_DMA_IRQHandler+0x1d8>)
 8006848:	429a      	cmp	r2, r3
 800684a:	d958      	bls.n	80068fe <HAL_DMA_IRQHandler+0x112>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a5d      	ldr	r2, [pc, #372]	; (80069c8 <HAL_DMA_IRQHandler+0x1dc>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d04f      	beq.n	80068f6 <HAL_DMA_IRQHandler+0x10a>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a5c      	ldr	r2, [pc, #368]	; (80069cc <HAL_DMA_IRQHandler+0x1e0>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d048      	beq.n	80068f2 <HAL_DMA_IRQHandler+0x106>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a5a      	ldr	r2, [pc, #360]	; (80069d0 <HAL_DMA_IRQHandler+0x1e4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d040      	beq.n	80068ec <HAL_DMA_IRQHandler+0x100>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a59      	ldr	r2, [pc, #356]	; (80069d4 <HAL_DMA_IRQHandler+0x1e8>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d038      	beq.n	80068e6 <HAL_DMA_IRQHandler+0xfa>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a57      	ldr	r2, [pc, #348]	; (80069d8 <HAL_DMA_IRQHandler+0x1ec>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d030      	beq.n	80068e0 <HAL_DMA_IRQHandler+0xf4>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a56      	ldr	r2, [pc, #344]	; (80069dc <HAL_DMA_IRQHandler+0x1f0>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d028      	beq.n	80068da <HAL_DMA_IRQHandler+0xee>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a4d      	ldr	r2, [pc, #308]	; (80069c4 <HAL_DMA_IRQHandler+0x1d8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d020      	beq.n	80068d4 <HAL_DMA_IRQHandler+0xe8>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a52      	ldr	r2, [pc, #328]	; (80069e0 <HAL_DMA_IRQHandler+0x1f4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d019      	beq.n	80068d0 <HAL_DMA_IRQHandler+0xe4>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4a50      	ldr	r2, [pc, #320]	; (80069e4 <HAL_DMA_IRQHandler+0x1f8>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d012      	beq.n	80068cc <HAL_DMA_IRQHandler+0xe0>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a4f      	ldr	r2, [pc, #316]	; (80069e8 <HAL_DMA_IRQHandler+0x1fc>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d00a      	beq.n	80068c6 <HAL_DMA_IRQHandler+0xda>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a4d      	ldr	r2, [pc, #308]	; (80069ec <HAL_DMA_IRQHandler+0x200>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d102      	bne.n	80068c0 <HAL_DMA_IRQHandler+0xd4>
 80068ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068be:	e01b      	b.n	80068f8 <HAL_DMA_IRQHandler+0x10c>
 80068c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068c4:	e018      	b.n	80068f8 <HAL_DMA_IRQHandler+0x10c>
 80068c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ca:	e015      	b.n	80068f8 <HAL_DMA_IRQHandler+0x10c>
 80068cc:	2340      	movs	r3, #64	; 0x40
 80068ce:	e013      	b.n	80068f8 <HAL_DMA_IRQHandler+0x10c>
 80068d0:	2304      	movs	r3, #4
 80068d2:	e011      	b.n	80068f8 <HAL_DMA_IRQHandler+0x10c>
 80068d4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80068d8:	e00e      	b.n	80068f8 <HAL_DMA_IRQHandler+0x10c>
 80068da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80068de:	e00b      	b.n	80068f8 <HAL_DMA_IRQHandler+0x10c>
 80068e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80068e4:	e008      	b.n	80068f8 <HAL_DMA_IRQHandler+0x10c>
 80068e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068ea:	e005      	b.n	80068f8 <HAL_DMA_IRQHandler+0x10c>
 80068ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068f0:	e002      	b.n	80068f8 <HAL_DMA_IRQHandler+0x10c>
 80068f2:	2340      	movs	r3, #64	; 0x40
 80068f4:	e000      	b.n	80068f8 <HAL_DMA_IRQHandler+0x10c>
 80068f6:	2304      	movs	r3, #4
 80068f8:	4a3d      	ldr	r2, [pc, #244]	; (80069f0 <HAL_DMA_IRQHandler+0x204>)
 80068fa:	6053      	str	r3, [r2, #4]
 80068fc:	e057      	b.n	80069ae <HAL_DMA_IRQHandler+0x1c2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a31      	ldr	r2, [pc, #196]	; (80069c8 <HAL_DMA_IRQHandler+0x1dc>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d04f      	beq.n	80069a8 <HAL_DMA_IRQHandler+0x1bc>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a2f      	ldr	r2, [pc, #188]	; (80069cc <HAL_DMA_IRQHandler+0x1e0>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d048      	beq.n	80069a4 <HAL_DMA_IRQHandler+0x1b8>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4a2e      	ldr	r2, [pc, #184]	; (80069d0 <HAL_DMA_IRQHandler+0x1e4>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d040      	beq.n	800699e <HAL_DMA_IRQHandler+0x1b2>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a2c      	ldr	r2, [pc, #176]	; (80069d4 <HAL_DMA_IRQHandler+0x1e8>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d038      	beq.n	8006998 <HAL_DMA_IRQHandler+0x1ac>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a2b      	ldr	r2, [pc, #172]	; (80069d8 <HAL_DMA_IRQHandler+0x1ec>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d030      	beq.n	8006992 <HAL_DMA_IRQHandler+0x1a6>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a29      	ldr	r2, [pc, #164]	; (80069dc <HAL_DMA_IRQHandler+0x1f0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d028      	beq.n	800698c <HAL_DMA_IRQHandler+0x1a0>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a21      	ldr	r2, [pc, #132]	; (80069c4 <HAL_DMA_IRQHandler+0x1d8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d020      	beq.n	8006986 <HAL_DMA_IRQHandler+0x19a>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a25      	ldr	r2, [pc, #148]	; (80069e0 <HAL_DMA_IRQHandler+0x1f4>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d019      	beq.n	8006982 <HAL_DMA_IRQHandler+0x196>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a24      	ldr	r2, [pc, #144]	; (80069e4 <HAL_DMA_IRQHandler+0x1f8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d012      	beq.n	800697e <HAL_DMA_IRQHandler+0x192>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a22      	ldr	r2, [pc, #136]	; (80069e8 <HAL_DMA_IRQHandler+0x1fc>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00a      	beq.n	8006978 <HAL_DMA_IRQHandler+0x18c>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a21      	ldr	r2, [pc, #132]	; (80069ec <HAL_DMA_IRQHandler+0x200>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d102      	bne.n	8006972 <HAL_DMA_IRQHandler+0x186>
 800696c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006970:	e01b      	b.n	80069aa <HAL_DMA_IRQHandler+0x1be>
 8006972:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006976:	e018      	b.n	80069aa <HAL_DMA_IRQHandler+0x1be>
 8006978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800697c:	e015      	b.n	80069aa <HAL_DMA_IRQHandler+0x1be>
 800697e:	2340      	movs	r3, #64	; 0x40
 8006980:	e013      	b.n	80069aa <HAL_DMA_IRQHandler+0x1be>
 8006982:	2304      	movs	r3, #4
 8006984:	e011      	b.n	80069aa <HAL_DMA_IRQHandler+0x1be>
 8006986:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800698a:	e00e      	b.n	80069aa <HAL_DMA_IRQHandler+0x1be>
 800698c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006990:	e00b      	b.n	80069aa <HAL_DMA_IRQHandler+0x1be>
 8006992:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006996:	e008      	b.n	80069aa <HAL_DMA_IRQHandler+0x1be>
 8006998:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800699c:	e005      	b.n	80069aa <HAL_DMA_IRQHandler+0x1be>
 800699e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069a2:	e002      	b.n	80069aa <HAL_DMA_IRQHandler+0x1be>
 80069a4:	2340      	movs	r3, #64	; 0x40
 80069a6:	e000      	b.n	80069aa <HAL_DMA_IRQHandler+0x1be>
 80069a8:	2304      	movs	r3, #4
 80069aa:	4a12      	ldr	r2, [pc, #72]	; (80069f4 <HAL_DMA_IRQHandler+0x208>)
 80069ac:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 8136 	beq.w	8006c24 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80069c0:	e130      	b.n	8006c24 <HAL_DMA_IRQHandler+0x438>
 80069c2:	bf00      	nop
 80069c4:	40020080 	.word	0x40020080
 80069c8:	40020008 	.word	0x40020008
 80069cc:	4002001c 	.word	0x4002001c
 80069d0:	40020030 	.word	0x40020030
 80069d4:	40020044 	.word	0x40020044
 80069d8:	40020058 	.word	0x40020058
 80069dc:	4002006c 	.word	0x4002006c
 80069e0:	40020408 	.word	0x40020408
 80069e4:	4002041c 	.word	0x4002041c
 80069e8:	40020430 	.word	0x40020430
 80069ec:	40020444 	.word	0x40020444
 80069f0:	40020400 	.word	0x40020400
 80069f4:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fc:	2202      	movs	r2, #2
 80069fe:	409a      	lsls	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80dd 	beq.w	8006bc4 <HAL_DMA_IRQHandler+0x3d8>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 80d7 	beq.w	8006bc4 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10b      	bne.n	8006a3c <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f022 020a 	bic.w	r2, r2, #10
 8006a32:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2201      	movs	r2, #1
 8006a38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	461a      	mov	r2, r3
 8006a42:	4b7b      	ldr	r3, [pc, #492]	; (8006c30 <HAL_DMA_IRQHandler+0x444>)
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d958      	bls.n	8006afa <HAL_DMA_IRQHandler+0x30e>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a79      	ldr	r2, [pc, #484]	; (8006c34 <HAL_DMA_IRQHandler+0x448>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d04f      	beq.n	8006af2 <HAL_DMA_IRQHandler+0x306>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a78      	ldr	r2, [pc, #480]	; (8006c38 <HAL_DMA_IRQHandler+0x44c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d048      	beq.n	8006aee <HAL_DMA_IRQHandler+0x302>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a76      	ldr	r2, [pc, #472]	; (8006c3c <HAL_DMA_IRQHandler+0x450>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d040      	beq.n	8006ae8 <HAL_DMA_IRQHandler+0x2fc>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a75      	ldr	r2, [pc, #468]	; (8006c40 <HAL_DMA_IRQHandler+0x454>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d038      	beq.n	8006ae2 <HAL_DMA_IRQHandler+0x2f6>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a73      	ldr	r2, [pc, #460]	; (8006c44 <HAL_DMA_IRQHandler+0x458>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d030      	beq.n	8006adc <HAL_DMA_IRQHandler+0x2f0>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a72      	ldr	r2, [pc, #456]	; (8006c48 <HAL_DMA_IRQHandler+0x45c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d028      	beq.n	8006ad6 <HAL_DMA_IRQHandler+0x2ea>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a69      	ldr	r2, [pc, #420]	; (8006c30 <HAL_DMA_IRQHandler+0x444>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d020      	beq.n	8006ad0 <HAL_DMA_IRQHandler+0x2e4>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a6e      	ldr	r2, [pc, #440]	; (8006c4c <HAL_DMA_IRQHandler+0x460>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d019      	beq.n	8006acc <HAL_DMA_IRQHandler+0x2e0>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a6c      	ldr	r2, [pc, #432]	; (8006c50 <HAL_DMA_IRQHandler+0x464>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d012      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x2dc>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a6b      	ldr	r2, [pc, #428]	; (8006c54 <HAL_DMA_IRQHandler+0x468>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d00a      	beq.n	8006ac2 <HAL_DMA_IRQHandler+0x2d6>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a69      	ldr	r2, [pc, #420]	; (8006c58 <HAL_DMA_IRQHandler+0x46c>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d102      	bne.n	8006abc <HAL_DMA_IRQHandler+0x2d0>
 8006ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006aba:	e01b      	b.n	8006af4 <HAL_DMA_IRQHandler+0x308>
 8006abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ac0:	e018      	b.n	8006af4 <HAL_DMA_IRQHandler+0x308>
 8006ac2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ac6:	e015      	b.n	8006af4 <HAL_DMA_IRQHandler+0x308>
 8006ac8:	2320      	movs	r3, #32
 8006aca:	e013      	b.n	8006af4 <HAL_DMA_IRQHandler+0x308>
 8006acc:	2302      	movs	r3, #2
 8006ace:	e011      	b.n	8006af4 <HAL_DMA_IRQHandler+0x308>
 8006ad0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ad4:	e00e      	b.n	8006af4 <HAL_DMA_IRQHandler+0x308>
 8006ad6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ada:	e00b      	b.n	8006af4 <HAL_DMA_IRQHandler+0x308>
 8006adc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006ae0:	e008      	b.n	8006af4 <HAL_DMA_IRQHandler+0x308>
 8006ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ae6:	e005      	b.n	8006af4 <HAL_DMA_IRQHandler+0x308>
 8006ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aec:	e002      	b.n	8006af4 <HAL_DMA_IRQHandler+0x308>
 8006aee:	2320      	movs	r3, #32
 8006af0:	e000      	b.n	8006af4 <HAL_DMA_IRQHandler+0x308>
 8006af2:	2302      	movs	r3, #2
 8006af4:	4a59      	ldr	r2, [pc, #356]	; (8006c5c <HAL_DMA_IRQHandler+0x470>)
 8006af6:	6053      	str	r3, [r2, #4]
 8006af8:	e057      	b.n	8006baa <HAL_DMA_IRQHandler+0x3be>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a4d      	ldr	r2, [pc, #308]	; (8006c34 <HAL_DMA_IRQHandler+0x448>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d04f      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x3b8>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a4b      	ldr	r2, [pc, #300]	; (8006c38 <HAL_DMA_IRQHandler+0x44c>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d048      	beq.n	8006ba0 <HAL_DMA_IRQHandler+0x3b4>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a4a      	ldr	r2, [pc, #296]	; (8006c3c <HAL_DMA_IRQHandler+0x450>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d040      	beq.n	8006b9a <HAL_DMA_IRQHandler+0x3ae>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a48      	ldr	r2, [pc, #288]	; (8006c40 <HAL_DMA_IRQHandler+0x454>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d038      	beq.n	8006b94 <HAL_DMA_IRQHandler+0x3a8>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a47      	ldr	r2, [pc, #284]	; (8006c44 <HAL_DMA_IRQHandler+0x458>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d030      	beq.n	8006b8e <HAL_DMA_IRQHandler+0x3a2>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a45      	ldr	r2, [pc, #276]	; (8006c48 <HAL_DMA_IRQHandler+0x45c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d028      	beq.n	8006b88 <HAL_DMA_IRQHandler+0x39c>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a3d      	ldr	r2, [pc, #244]	; (8006c30 <HAL_DMA_IRQHandler+0x444>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d020      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x396>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a41      	ldr	r2, [pc, #260]	; (8006c4c <HAL_DMA_IRQHandler+0x460>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d019      	beq.n	8006b7e <HAL_DMA_IRQHandler+0x392>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a40      	ldr	r2, [pc, #256]	; (8006c50 <HAL_DMA_IRQHandler+0x464>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d012      	beq.n	8006b7a <HAL_DMA_IRQHandler+0x38e>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a3e      	ldr	r2, [pc, #248]	; (8006c54 <HAL_DMA_IRQHandler+0x468>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d00a      	beq.n	8006b74 <HAL_DMA_IRQHandler+0x388>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a3d      	ldr	r2, [pc, #244]	; (8006c58 <HAL_DMA_IRQHandler+0x46c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d102      	bne.n	8006b6e <HAL_DMA_IRQHandler+0x382>
 8006b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b6c:	e01b      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x3ba>
 8006b6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b72:	e018      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x3ba>
 8006b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b78:	e015      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x3ba>
 8006b7a:	2320      	movs	r3, #32
 8006b7c:	e013      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x3ba>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e011      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x3ba>
 8006b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b86:	e00e      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x3ba>
 8006b88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006b8c:	e00b      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x3ba>
 8006b8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b92:	e008      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x3ba>
 8006b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b98:	e005      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x3ba>
 8006b9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b9e:	e002      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x3ba>
 8006ba0:	2320      	movs	r3, #32
 8006ba2:	e000      	b.n	8006ba6 <HAL_DMA_IRQHandler+0x3ba>
 8006ba4:	2302      	movs	r3, #2
 8006ba6:	4a2e      	ldr	r2, [pc, #184]	; (8006c60 <HAL_DMA_IRQHandler+0x474>)
 8006ba8:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d034      	beq.n	8006c24 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006bc2:	e02f      	b.n	8006c24 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc8:	2208      	movs	r2, #8
 8006bca:	409a      	lsls	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d028      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x43a>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	f003 0308 	and.w	r3, r3, #8
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d023      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 020e 	bic.w	r2, r2, #14
 8006bec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8006bfc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d004      	beq.n	8006c26 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	4798      	blx	r3
    }
  }
  return;
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop
}
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	40020080 	.word	0x40020080
 8006c34:	40020008 	.word	0x40020008
 8006c38:	4002001c 	.word	0x4002001c
 8006c3c:	40020030 	.word	0x40020030
 8006c40:	40020044 	.word	0x40020044
 8006c44:	40020058 	.word	0x40020058
 8006c48:	4002006c 	.word	0x4002006c
 8006c4c:	40020408 	.word	0x40020408
 8006c50:	4002041c 	.word	0x4002041c
 8006c54:	40020430 	.word	0x40020430
 8006c58:	40020444 	.word	0x40020444
 8006c5c:	40020400 	.word	0x40020400
 8006c60:	40020000 	.word	0x40020000

08006c64 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
 8006c70:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8006c80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	683a      	ldr	r2, [r7, #0]
 8006c88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	2b10      	cmp	r3, #16
 8006c90:	d108      	bne.n	8006ca4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006ca2:	e007      	b.n	8006cb4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	60da      	str	r2, [r3, #12]
}
 8006cb4:	bf00      	nop
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bc80      	pop	{r7}
 8006cbc:	4770      	bx	lr
	...

08006cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b08b      	sub	sp, #44	; 0x2c
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006cd2:	e179      	b.n	8006fc8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	f040 8168 	bne.w	8006fc2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	4a96      	ldr	r2, [pc, #600]	; (8006f50 <HAL_GPIO_Init+0x290>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d05e      	beq.n	8006dba <HAL_GPIO_Init+0xfa>
 8006cfc:	4a94      	ldr	r2, [pc, #592]	; (8006f50 <HAL_GPIO_Init+0x290>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d875      	bhi.n	8006dee <HAL_GPIO_Init+0x12e>
 8006d02:	4a94      	ldr	r2, [pc, #592]	; (8006f54 <HAL_GPIO_Init+0x294>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d058      	beq.n	8006dba <HAL_GPIO_Init+0xfa>
 8006d08:	4a92      	ldr	r2, [pc, #584]	; (8006f54 <HAL_GPIO_Init+0x294>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d86f      	bhi.n	8006dee <HAL_GPIO_Init+0x12e>
 8006d0e:	4a92      	ldr	r2, [pc, #584]	; (8006f58 <HAL_GPIO_Init+0x298>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d052      	beq.n	8006dba <HAL_GPIO_Init+0xfa>
 8006d14:	4a90      	ldr	r2, [pc, #576]	; (8006f58 <HAL_GPIO_Init+0x298>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d869      	bhi.n	8006dee <HAL_GPIO_Init+0x12e>
 8006d1a:	4a90      	ldr	r2, [pc, #576]	; (8006f5c <HAL_GPIO_Init+0x29c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d04c      	beq.n	8006dba <HAL_GPIO_Init+0xfa>
 8006d20:	4a8e      	ldr	r2, [pc, #568]	; (8006f5c <HAL_GPIO_Init+0x29c>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d863      	bhi.n	8006dee <HAL_GPIO_Init+0x12e>
 8006d26:	4a8e      	ldr	r2, [pc, #568]	; (8006f60 <HAL_GPIO_Init+0x2a0>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d046      	beq.n	8006dba <HAL_GPIO_Init+0xfa>
 8006d2c:	4a8c      	ldr	r2, [pc, #560]	; (8006f60 <HAL_GPIO_Init+0x2a0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d85d      	bhi.n	8006dee <HAL_GPIO_Init+0x12e>
 8006d32:	2b12      	cmp	r3, #18
 8006d34:	d82a      	bhi.n	8006d8c <HAL_GPIO_Init+0xcc>
 8006d36:	2b12      	cmp	r3, #18
 8006d38:	d859      	bhi.n	8006dee <HAL_GPIO_Init+0x12e>
 8006d3a:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <HAL_GPIO_Init+0x80>)
 8006d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d40:	08006dbb 	.word	0x08006dbb
 8006d44:	08006d95 	.word	0x08006d95
 8006d48:	08006da7 	.word	0x08006da7
 8006d4c:	08006de9 	.word	0x08006de9
 8006d50:	08006def 	.word	0x08006def
 8006d54:	08006def 	.word	0x08006def
 8006d58:	08006def 	.word	0x08006def
 8006d5c:	08006def 	.word	0x08006def
 8006d60:	08006def 	.word	0x08006def
 8006d64:	08006def 	.word	0x08006def
 8006d68:	08006def 	.word	0x08006def
 8006d6c:	08006def 	.word	0x08006def
 8006d70:	08006def 	.word	0x08006def
 8006d74:	08006def 	.word	0x08006def
 8006d78:	08006def 	.word	0x08006def
 8006d7c:	08006def 	.word	0x08006def
 8006d80:	08006def 	.word	0x08006def
 8006d84:	08006d9d 	.word	0x08006d9d
 8006d88:	08006db1 	.word	0x08006db1
 8006d8c:	4a75      	ldr	r2, [pc, #468]	; (8006f64 <HAL_GPIO_Init+0x2a4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d013      	beq.n	8006dba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006d92:	e02c      	b.n	8006dee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	623b      	str	r3, [r7, #32]
          break;
 8006d9a:	e029      	b.n	8006df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	3304      	adds	r3, #4
 8006da2:	623b      	str	r3, [r7, #32]
          break;
 8006da4:	e024      	b.n	8006df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	3308      	adds	r3, #8
 8006dac:	623b      	str	r3, [r7, #32]
          break;
 8006dae:	e01f      	b.n	8006df0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	330c      	adds	r3, #12
 8006db6:	623b      	str	r3, [r7, #32]
          break;
 8006db8:	e01a      	b.n	8006df0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d102      	bne.n	8006dc8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006dc2:	2304      	movs	r3, #4
 8006dc4:	623b      	str	r3, [r7, #32]
          break;
 8006dc6:	e013      	b.n	8006df0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d105      	bne.n	8006ddc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	611a      	str	r2, [r3, #16]
          break;
 8006dda:	e009      	b.n	8006df0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006ddc:	2308      	movs	r3, #8
 8006dde:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	69fa      	ldr	r2, [r7, #28]
 8006de4:	615a      	str	r2, [r3, #20]
          break;
 8006de6:	e003      	b.n	8006df0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006de8:	2300      	movs	r3, #0
 8006dea:	623b      	str	r3, [r7, #32]
          break;
 8006dec:	e000      	b.n	8006df0 <HAL_GPIO_Init+0x130>
          break;
 8006dee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	2bff      	cmp	r3, #255	; 0xff
 8006df4:	d801      	bhi.n	8006dfa <HAL_GPIO_Init+0x13a>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	e001      	b.n	8006dfe <HAL_GPIO_Init+0x13e>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2bff      	cmp	r3, #255	; 0xff
 8006e04:	d802      	bhi.n	8006e0c <HAL_GPIO_Init+0x14c>
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	e002      	b.n	8006e12 <HAL_GPIO_Init+0x152>
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	3b08      	subs	r3, #8
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	210f      	movs	r1, #15
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006e20:	43db      	mvns	r3, r3
 8006e22:	401a      	ands	r2, r3
 8006e24:	6a39      	ldr	r1, [r7, #32]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f000 80c1 	beq.w	8006fc2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006e40:	4b49      	ldr	r3, [pc, #292]	; (8006f68 <HAL_GPIO_Init+0x2a8>)
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	4a48      	ldr	r2, [pc, #288]	; (8006f68 <HAL_GPIO_Init+0x2a8>)
 8006e46:	f043 0301 	orr.w	r3, r3, #1
 8006e4a:	6193      	str	r3, [r2, #24]
 8006e4c:	4b46      	ldr	r3, [pc, #280]	; (8006f68 <HAL_GPIO_Init+0x2a8>)
 8006e4e:	699b      	ldr	r3, [r3, #24]
 8006e50:	f003 0301 	and.w	r3, r3, #1
 8006e54:	60bb      	str	r3, [r7, #8]
 8006e56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006e58:	4a44      	ldr	r2, [pc, #272]	; (8006f6c <HAL_GPIO_Init+0x2ac>)
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	089b      	lsrs	r3, r3, #2
 8006e5e:	3302      	adds	r3, #2
 8006e60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	f003 0303 	and.w	r3, r3, #3
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	220f      	movs	r2, #15
 8006e70:	fa02 f303 	lsl.w	r3, r2, r3
 8006e74:	43db      	mvns	r3, r3
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	4013      	ands	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a3c      	ldr	r2, [pc, #240]	; (8006f70 <HAL_GPIO_Init+0x2b0>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d01f      	beq.n	8006ec4 <HAL_GPIO_Init+0x204>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a3b      	ldr	r2, [pc, #236]	; (8006f74 <HAL_GPIO_Init+0x2b4>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d019      	beq.n	8006ec0 <HAL_GPIO_Init+0x200>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a3a      	ldr	r2, [pc, #232]	; (8006f78 <HAL_GPIO_Init+0x2b8>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d013      	beq.n	8006ebc <HAL_GPIO_Init+0x1fc>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a39      	ldr	r2, [pc, #228]	; (8006f7c <HAL_GPIO_Init+0x2bc>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d00d      	beq.n	8006eb8 <HAL_GPIO_Init+0x1f8>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a38      	ldr	r2, [pc, #224]	; (8006f80 <HAL_GPIO_Init+0x2c0>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d007      	beq.n	8006eb4 <HAL_GPIO_Init+0x1f4>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a37      	ldr	r2, [pc, #220]	; (8006f84 <HAL_GPIO_Init+0x2c4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d101      	bne.n	8006eb0 <HAL_GPIO_Init+0x1f0>
 8006eac:	2305      	movs	r3, #5
 8006eae:	e00a      	b.n	8006ec6 <HAL_GPIO_Init+0x206>
 8006eb0:	2306      	movs	r3, #6
 8006eb2:	e008      	b.n	8006ec6 <HAL_GPIO_Init+0x206>
 8006eb4:	2304      	movs	r3, #4
 8006eb6:	e006      	b.n	8006ec6 <HAL_GPIO_Init+0x206>
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e004      	b.n	8006ec6 <HAL_GPIO_Init+0x206>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e002      	b.n	8006ec6 <HAL_GPIO_Init+0x206>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e000      	b.n	8006ec6 <HAL_GPIO_Init+0x206>
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec8:	f002 0203 	and.w	r2, r2, #3
 8006ecc:	0092      	lsls	r2, r2, #2
 8006ece:	4093      	lsls	r3, r2
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006ed6:	4925      	ldr	r1, [pc, #148]	; (8006f6c <HAL_GPIO_Init+0x2ac>)
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eda:	089b      	lsrs	r3, r3, #2
 8006edc:	3302      	adds	r3, #2
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d006      	beq.n	8006efe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006ef0:	4b25      	ldr	r3, [pc, #148]	; (8006f88 <HAL_GPIO_Init+0x2c8>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	4924      	ldr	r1, [pc, #144]	; (8006f88 <HAL_GPIO_Init+0x2c8>)
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	600b      	str	r3, [r1, #0]
 8006efc:	e006      	b.n	8006f0c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006efe:	4b22      	ldr	r3, [pc, #136]	; (8006f88 <HAL_GPIO_Init+0x2c8>)
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	43db      	mvns	r3, r3
 8006f06:	4920      	ldr	r1, [pc, #128]	; (8006f88 <HAL_GPIO_Init+0x2c8>)
 8006f08:	4013      	ands	r3, r2
 8006f0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d006      	beq.n	8006f26 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006f18:	4b1b      	ldr	r3, [pc, #108]	; (8006f88 <HAL_GPIO_Init+0x2c8>)
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	491a      	ldr	r1, [pc, #104]	; (8006f88 <HAL_GPIO_Init+0x2c8>)
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	604b      	str	r3, [r1, #4]
 8006f24:	e006      	b.n	8006f34 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006f26:	4b18      	ldr	r3, [pc, #96]	; (8006f88 <HAL_GPIO_Init+0x2c8>)
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	43db      	mvns	r3, r3
 8006f2e:	4916      	ldr	r1, [pc, #88]	; (8006f88 <HAL_GPIO_Init+0x2c8>)
 8006f30:	4013      	ands	r3, r2
 8006f32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d025      	beq.n	8006f8c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006f40:	4b11      	ldr	r3, [pc, #68]	; (8006f88 <HAL_GPIO_Init+0x2c8>)
 8006f42:	689a      	ldr	r2, [r3, #8]
 8006f44:	4910      	ldr	r1, [pc, #64]	; (8006f88 <HAL_GPIO_Init+0x2c8>)
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	608b      	str	r3, [r1, #8]
 8006f4c:	e025      	b.n	8006f9a <HAL_GPIO_Init+0x2da>
 8006f4e:	bf00      	nop
 8006f50:	10320000 	.word	0x10320000
 8006f54:	10310000 	.word	0x10310000
 8006f58:	10220000 	.word	0x10220000
 8006f5c:	10210000 	.word	0x10210000
 8006f60:	10120000 	.word	0x10120000
 8006f64:	10110000 	.word	0x10110000
 8006f68:	40021000 	.word	0x40021000
 8006f6c:	40010000 	.word	0x40010000
 8006f70:	40010800 	.word	0x40010800
 8006f74:	40010c00 	.word	0x40010c00
 8006f78:	40011000 	.word	0x40011000
 8006f7c:	40011400 	.word	0x40011400
 8006f80:	40011800 	.word	0x40011800
 8006f84:	40011c00 	.word	0x40011c00
 8006f88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006f8c:	4b15      	ldr	r3, [pc, #84]	; (8006fe4 <HAL_GPIO_Init+0x324>)
 8006f8e:	689a      	ldr	r2, [r3, #8]
 8006f90:	69bb      	ldr	r3, [r7, #24]
 8006f92:	43db      	mvns	r3, r3
 8006f94:	4913      	ldr	r1, [pc, #76]	; (8006fe4 <HAL_GPIO_Init+0x324>)
 8006f96:	4013      	ands	r3, r2
 8006f98:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d006      	beq.n	8006fb4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006fa6:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <HAL_GPIO_Init+0x324>)
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	490e      	ldr	r1, [pc, #56]	; (8006fe4 <HAL_GPIO_Init+0x324>)
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60cb      	str	r3, [r1, #12]
 8006fb2:	e006      	b.n	8006fc2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006fb4:	4b0b      	ldr	r3, [pc, #44]	; (8006fe4 <HAL_GPIO_Init+0x324>)
 8006fb6:	68da      	ldr	r2, [r3, #12]
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	43db      	mvns	r3, r3
 8006fbc:	4909      	ldr	r1, [pc, #36]	; (8006fe4 <HAL_GPIO_Init+0x324>)
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f47f ae7e 	bne.w	8006cd4 <HAL_GPIO_Init+0x14>
  }
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	372c      	adds	r7, #44	; 0x2c
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bc80      	pop	{r7}
 8006fe2:	4770      	bx	lr
 8006fe4:	40010400 	.word	0x40010400

08006fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	807b      	strh	r3, [r7, #2]
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ff8:	787b      	ldrb	r3, [r7, #1]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ffe:	887a      	ldrh	r2, [r7, #2]
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007004:	e003      	b.n	800700e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007006:	887b      	ldrh	r3, [r7, #2]
 8007008:	041a      	lsls	r2, r3, #16
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	611a      	str	r2, [r3, #16]
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	bc80      	pop	{r7}
 8007016:	4770      	bx	lr

08007018 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d101      	bne.n	800702a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e12b      	b.n	8007282 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d106      	bne.n	8007044 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f7fe fa60 	bl	8005504 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2224      	movs	r2, #36	; 0x24
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f022 0201 	bic.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800706a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800707a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800707c:	f000 fffc 	bl	8008078 <HAL_RCC_GetPCLK1Freq>
 8007080:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	4a81      	ldr	r2, [pc, #516]	; (800728c <HAL_I2C_Init+0x274>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d807      	bhi.n	800709c <HAL_I2C_Init+0x84>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4a80      	ldr	r2, [pc, #512]	; (8007290 <HAL_I2C_Init+0x278>)
 8007090:	4293      	cmp	r3, r2
 8007092:	bf94      	ite	ls
 8007094:	2301      	movls	r3, #1
 8007096:	2300      	movhi	r3, #0
 8007098:	b2db      	uxtb	r3, r3
 800709a:	e006      	b.n	80070aa <HAL_I2C_Init+0x92>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4a7d      	ldr	r2, [pc, #500]	; (8007294 <HAL_I2C_Init+0x27c>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	bf94      	ite	ls
 80070a4:	2301      	movls	r3, #1
 80070a6:	2300      	movhi	r3, #0
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	e0e7      	b.n	8007282 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4a78      	ldr	r2, [pc, #480]	; (8007298 <HAL_I2C_Init+0x280>)
 80070b6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ba:	0c9b      	lsrs	r3, r3, #18
 80070bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	430a      	orrs	r2, r1
 80070d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	4a6a      	ldr	r2, [pc, #424]	; (800728c <HAL_I2C_Init+0x274>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d802      	bhi.n	80070ec <HAL_I2C_Init+0xd4>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	3301      	adds	r3, #1
 80070ea:	e009      	b.n	8007100 <HAL_I2C_Init+0xe8>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80070f2:	fb02 f303 	mul.w	r3, r2, r3
 80070f6:	4a69      	ldr	r2, [pc, #420]	; (800729c <HAL_I2C_Init+0x284>)
 80070f8:	fba2 2303 	umull	r2, r3, r2, r3
 80070fc:	099b      	lsrs	r3, r3, #6
 80070fe:	3301      	adds	r3, #1
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	6812      	ldr	r2, [r2, #0]
 8007104:	430b      	orrs	r3, r1
 8007106:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007112:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	495c      	ldr	r1, [pc, #368]	; (800728c <HAL_I2C_Init+0x274>)
 800711c:	428b      	cmp	r3, r1
 800711e:	d819      	bhi.n	8007154 <HAL_I2C_Init+0x13c>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	1e59      	subs	r1, r3, #1
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	fbb1 f3f3 	udiv	r3, r1, r3
 800712e:	1c59      	adds	r1, r3, #1
 8007130:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007134:	400b      	ands	r3, r1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <HAL_I2C_Init+0x138>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1e59      	subs	r1, r3, #1
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	005b      	lsls	r3, r3, #1
 8007144:	fbb1 f3f3 	udiv	r3, r1, r3
 8007148:	3301      	adds	r3, #1
 800714a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800714e:	e051      	b.n	80071f4 <HAL_I2C_Init+0x1dc>
 8007150:	2304      	movs	r3, #4
 8007152:	e04f      	b.n	80071f4 <HAL_I2C_Init+0x1dc>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d111      	bne.n	8007180 <HAL_I2C_Init+0x168>
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	1e58      	subs	r0, r3, #1
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6859      	ldr	r1, [r3, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	440b      	add	r3, r1
 800716a:	fbb0 f3f3 	udiv	r3, r0, r3
 800716e:	3301      	adds	r3, #1
 8007170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007174:	2b00      	cmp	r3, #0
 8007176:	bf0c      	ite	eq
 8007178:	2301      	moveq	r3, #1
 800717a:	2300      	movne	r3, #0
 800717c:	b2db      	uxtb	r3, r3
 800717e:	e012      	b.n	80071a6 <HAL_I2C_Init+0x18e>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	1e58      	subs	r0, r3, #1
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6859      	ldr	r1, [r3, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	440b      	add	r3, r1
 800718e:	0099      	lsls	r1, r3, #2
 8007190:	440b      	add	r3, r1
 8007192:	fbb0 f3f3 	udiv	r3, r0, r3
 8007196:	3301      	adds	r3, #1
 8007198:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800719c:	2b00      	cmp	r3, #0
 800719e:	bf0c      	ite	eq
 80071a0:	2301      	moveq	r3, #1
 80071a2:	2300      	movne	r3, #0
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d001      	beq.n	80071ae <HAL_I2C_Init+0x196>
 80071aa:	2301      	movs	r3, #1
 80071ac:	e022      	b.n	80071f4 <HAL_I2C_Init+0x1dc>
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d10e      	bne.n	80071d4 <HAL_I2C_Init+0x1bc>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	1e58      	subs	r0, r3, #1
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6859      	ldr	r1, [r3, #4]
 80071be:	460b      	mov	r3, r1
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	440b      	add	r3, r1
 80071c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80071c8:	3301      	adds	r3, #1
 80071ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d2:	e00f      	b.n	80071f4 <HAL_I2C_Init+0x1dc>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	1e58      	subs	r0, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6859      	ldr	r1, [r3, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	440b      	add	r3, r1
 80071e2:	0099      	lsls	r1, r3, #2
 80071e4:	440b      	add	r3, r1
 80071e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80071ea:	3301      	adds	r3, #1
 80071ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071f4:	6879      	ldr	r1, [r7, #4]
 80071f6:	6809      	ldr	r1, [r1, #0]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	69da      	ldr	r2, [r3, #28]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	431a      	orrs	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007222:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6911      	ldr	r1, [r2, #16]
 800722a:	687a      	ldr	r2, [r7, #4]
 800722c:	68d2      	ldr	r2, [r2, #12]
 800722e:	4311      	orrs	r1, r2
 8007230:	687a      	ldr	r2, [r7, #4]
 8007232:	6812      	ldr	r2, [r2, #0]
 8007234:	430b      	orrs	r3, r1
 8007236:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	695a      	ldr	r2, [r3, #20]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0201 	orr.w	r2, r2, #1
 8007262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2220      	movs	r2, #32
 800726e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007280:	2300      	movs	r3, #0
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	000186a0 	.word	0x000186a0
 8007290:	001e847f 	.word	0x001e847f
 8007294:	003d08ff 	.word	0x003d08ff
 8007298:	431bde83 	.word	0x431bde83
 800729c:	10624dd3 	.word	0x10624dd3

080072a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b088      	sub	sp, #32
 80072a4:	af02      	add	r7, sp, #8
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	4608      	mov	r0, r1
 80072aa:	4611      	mov	r1, r2
 80072ac:	461a      	mov	r2, r3
 80072ae:	4603      	mov	r3, r0
 80072b0:	817b      	strh	r3, [r7, #10]
 80072b2:	460b      	mov	r3, r1
 80072b4:	813b      	strh	r3, [r7, #8]
 80072b6:	4613      	mov	r3, r2
 80072b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80072ba:	f7fe ff43 	bl	8006144 <HAL_GetTick>
 80072be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b20      	cmp	r3, #32
 80072ca:	f040 80d9 	bne.w	8007480 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	2319      	movs	r3, #25
 80072d4:	2201      	movs	r2, #1
 80072d6:	496d      	ldr	r1, [pc, #436]	; (800748c <HAL_I2C_Mem_Write+0x1ec>)
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f971 	bl	80075c0 <I2C_WaitOnFlagUntilTimeout>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d001      	beq.n	80072e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80072e4:	2302      	movs	r3, #2
 80072e6:	e0cc      	b.n	8007482 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d101      	bne.n	80072f6 <HAL_I2C_Mem_Write+0x56>
 80072f2:	2302      	movs	r3, #2
 80072f4:	e0c5      	b.n	8007482 <HAL_I2C_Mem_Write+0x1e2>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	2b01      	cmp	r3, #1
 800730a:	d007      	beq.n	800731c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0201 	orr.w	r2, r2, #1
 800731a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800732a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2221      	movs	r2, #33	; 0x21
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2240      	movs	r2, #64	; 0x40
 8007338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a3a      	ldr	r2, [r7, #32]
 8007346:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800734c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007352:	b29a      	uxth	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	4a4d      	ldr	r2, [pc, #308]	; (8007490 <HAL_I2C_Mem_Write+0x1f0>)
 800735c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800735e:	88f8      	ldrh	r0, [r7, #6]
 8007360:	893a      	ldrh	r2, [r7, #8]
 8007362:	8979      	ldrh	r1, [r7, #10]
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	9301      	str	r3, [sp, #4]
 8007368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800736a:	9300      	str	r3, [sp, #0]
 800736c:	4603      	mov	r3, r0
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 f890 	bl	8007494 <I2C_RequestMemoryWrite>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d052      	beq.n	8007420 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e081      	b.n	8007482 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800737e:	697a      	ldr	r2, [r7, #20]
 8007380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 f9f2 	bl	800776c <I2C_WaitOnTXEFlagUntilTimeout>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00d      	beq.n	80073aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007392:	2b04      	cmp	r3, #4
 8007394:	d107      	bne.n	80073a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e06b      	b.n	8007482 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	781a      	ldrb	r2, [r3, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c4:	3b01      	subs	r3, #1
 80073c6:	b29a      	uxth	r2, r3
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	b29a      	uxth	r2, r3
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	f003 0304 	and.w	r3, r3, #4
 80073e4:	2b04      	cmp	r3, #4
 80073e6:	d11b      	bne.n	8007420 <HAL_I2C_Mem_Write+0x180>
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d017      	beq.n	8007420 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f4:	781a      	ldrb	r2, [r3, #0]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	1c5a      	adds	r2, r3, #1
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800740a:	3b01      	subs	r3, #1
 800740c:	b29a      	uxth	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007416:	b29b      	uxth	r3, r3
 8007418:	3b01      	subs	r3, #1
 800741a:	b29a      	uxth	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1aa      	bne.n	800737e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 f9de 	bl	80077ee <I2C_WaitOnBTFFlagUntilTimeout>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00d      	beq.n	8007454 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743c:	2b04      	cmp	r3, #4
 800743e:	d107      	bne.n	8007450 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800744e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e016      	b.n	8007482 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2220      	movs	r2, #32
 8007468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800747c:	2300      	movs	r3, #0
 800747e:	e000      	b.n	8007482 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007480:	2302      	movs	r3, #2
  }
}
 8007482:	4618      	mov	r0, r3
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	00100002 	.word	0x00100002
 8007490:	ffff0000 	.word	0xffff0000

08007494 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af02      	add	r7, sp, #8
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	4608      	mov	r0, r1
 800749e:	4611      	mov	r1, r2
 80074a0:	461a      	mov	r2, r3
 80074a2:	4603      	mov	r3, r0
 80074a4:	817b      	strh	r3, [r7, #10]
 80074a6:	460b      	mov	r3, r1
 80074a8:	813b      	strh	r3, [r7, #8]
 80074aa:	4613      	mov	r3, r2
 80074ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 f878 	bl	80075c0 <I2C_WaitOnFlagUntilTimeout>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00d      	beq.n	80074f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074e4:	d103      	bne.n	80074ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e05f      	b.n	80075b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80074f2:	897b      	ldrh	r3, [r7, #10]
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	461a      	mov	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007500:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007504:	6a3a      	ldr	r2, [r7, #32]
 8007506:	492d      	ldr	r1, [pc, #180]	; (80075bc <I2C_RequestMemoryWrite+0x128>)
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 f8b0 	bl	800766e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e04c      	b.n	80075b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007518:	2300      	movs	r3, #0
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	617b      	str	r3, [r7, #20]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	617b      	str	r3, [r7, #20]
 800752c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800752e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007530:	6a39      	ldr	r1, [r7, #32]
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 f91a 	bl	800776c <I2C_WaitOnTXEFlagUntilTimeout>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00d      	beq.n	800755a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	2b04      	cmp	r3, #4
 8007544:	d107      	bne.n	8007556 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007554:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e02b      	b.n	80075b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800755a:	88fb      	ldrh	r3, [r7, #6]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d105      	bne.n	800756c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007560:	893b      	ldrh	r3, [r7, #8]
 8007562:	b2da      	uxtb	r2, r3
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	611a      	str	r2, [r3, #16]
 800756a:	e021      	b.n	80075b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800756c:	893b      	ldrh	r3, [r7, #8]
 800756e:	0a1b      	lsrs	r3, r3, #8
 8007570:	b29b      	uxth	r3, r3
 8007572:	b2da      	uxtb	r2, r3
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800757a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800757c:	6a39      	ldr	r1, [r7, #32]
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f000 f8f4 	bl	800776c <I2C_WaitOnTXEFlagUntilTimeout>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00d      	beq.n	80075a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	2b04      	cmp	r3, #4
 8007590:	d107      	bne.n	80075a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e005      	b.n	80075b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80075a6:	893b      	ldrh	r3, [r7, #8]
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3718      	adds	r7, #24
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	00010002 	.word	0x00010002

080075c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	603b      	str	r3, [r7, #0]
 80075cc:	4613      	mov	r3, r2
 80075ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075d0:	e025      	b.n	800761e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d8:	d021      	beq.n	800761e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075da:	f7fe fdb3 	bl	8006144 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d302      	bcc.n	80075f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d116      	bne.n	800761e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2220      	movs	r2, #32
 80075fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800760a:	f043 0220 	orr.w	r2, r3, #32
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e023      	b.n	8007666 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	0c1b      	lsrs	r3, r3, #16
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b01      	cmp	r3, #1
 8007626:	d10d      	bne.n	8007644 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	695b      	ldr	r3, [r3, #20]
 800762e:	43da      	mvns	r2, r3
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	4013      	ands	r3, r2
 8007634:	b29b      	uxth	r3, r3
 8007636:	2b00      	cmp	r3, #0
 8007638:	bf0c      	ite	eq
 800763a:	2301      	moveq	r3, #1
 800763c:	2300      	movne	r3, #0
 800763e:	b2db      	uxtb	r3, r3
 8007640:	461a      	mov	r2, r3
 8007642:	e00c      	b.n	800765e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	43da      	mvns	r2, r3
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	4013      	ands	r3, r2
 8007650:	b29b      	uxth	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	bf0c      	ite	eq
 8007656:	2301      	moveq	r3, #1
 8007658:	2300      	movne	r3, #0
 800765a:	b2db      	uxtb	r3, r3
 800765c:	461a      	mov	r2, r3
 800765e:	79fb      	ldrb	r3, [r7, #7]
 8007660:	429a      	cmp	r2, r3
 8007662:	d0b6      	beq.n	80075d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3710      	adds	r7, #16
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	60b9      	str	r1, [r7, #8]
 8007678:	607a      	str	r2, [r7, #4]
 800767a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800767c:	e051      	b.n	8007722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800768c:	d123      	bne.n	80076d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800769c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2220      	movs	r2, #32
 80076b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	f043 0204 	orr.w	r2, r3, #4
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e046      	b.n	8007764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076dc:	d021      	beq.n	8007722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80076de:	f7fe fd31 	bl	8006144 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d302      	bcc.n	80076f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d116      	bne.n	8007722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2220      	movs	r2, #32
 80076fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770e:	f043 0220 	orr.w	r2, r3, #32
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e020      	b.n	8007764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	0c1b      	lsrs	r3, r3, #16
 8007726:	b2db      	uxtb	r3, r3
 8007728:	2b01      	cmp	r3, #1
 800772a:	d10c      	bne.n	8007746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	43da      	mvns	r2, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	4013      	ands	r3, r2
 8007738:	b29b      	uxth	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	bf14      	ite	ne
 800773e:	2301      	movne	r3, #1
 8007740:	2300      	moveq	r3, #0
 8007742:	b2db      	uxtb	r3, r3
 8007744:	e00b      	b.n	800775e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	43da      	mvns	r2, r3
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	4013      	ands	r3, r2
 8007752:	b29b      	uxth	r3, r3
 8007754:	2b00      	cmp	r3, #0
 8007756:	bf14      	ite	ne
 8007758:	2301      	movne	r3, #1
 800775a:	2300      	moveq	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d18d      	bne.n	800767e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3710      	adds	r7, #16
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007778:	e02d      	b.n	80077d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 f878 	bl	8007870 <I2C_IsAcknowledgeFailed>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e02d      	b.n	80077e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007790:	d021      	beq.n	80077d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007792:	f7fe fcd7 	bl	8006144 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	429a      	cmp	r2, r3
 80077a0:	d302      	bcc.n	80077a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d116      	bne.n	80077d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2200      	movs	r2, #0
 80077ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	2220      	movs	r2, #32
 80077b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	f043 0220 	orr.w	r2, r3, #32
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	e007      	b.n	80077e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e0:	2b80      	cmp	r3, #128	; 0x80
 80077e2:	d1ca      	bne.n	800777a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}

080077ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b084      	sub	sp, #16
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	60f8      	str	r0, [r7, #12]
 80077f6:	60b9      	str	r1, [r7, #8]
 80077f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077fa:	e02d      	b.n	8007858 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f837 	bl	8007870 <I2C_IsAcknowledgeFailed>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d001      	beq.n	800780c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e02d      	b.n	8007868 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d021      	beq.n	8007858 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007814:	f7fe fc96 	bl	8006144 <HAL_GetTick>
 8007818:	4602      	mov	r2, r0
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	1ad3      	subs	r3, r2, r3
 800781e:	68ba      	ldr	r2, [r7, #8]
 8007820:	429a      	cmp	r2, r3
 8007822:	d302      	bcc.n	800782a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d116      	bne.n	8007858 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2220      	movs	r2, #32
 8007834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007844:	f043 0220 	orr.w	r2, r3, #32
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e007      	b.n	8007868 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	f003 0304 	and.w	r3, r3, #4
 8007862:	2b04      	cmp	r3, #4
 8007864:	d1ca      	bne.n	80077fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	695b      	ldr	r3, [r3, #20]
 800787e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007886:	d11b      	bne.n	80078c0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007890:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	f043 0204 	orr.w	r2, r3, #4
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e000      	b.n	80078c2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr

080078cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e272      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 8087 	beq.w	80079fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078ec:	4b92      	ldr	r3, [pc, #584]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f003 030c 	and.w	r3, r3, #12
 80078f4:	2b04      	cmp	r3, #4
 80078f6:	d00c      	beq.n	8007912 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80078f8:	4b8f      	ldr	r3, [pc, #572]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	f003 030c 	and.w	r3, r3, #12
 8007900:	2b08      	cmp	r3, #8
 8007902:	d112      	bne.n	800792a <HAL_RCC_OscConfig+0x5e>
 8007904:	4b8c      	ldr	r3, [pc, #560]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800790c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007910:	d10b      	bne.n	800792a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007912:	4b89      	ldr	r3, [pc, #548]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d06c      	beq.n	80079f8 <HAL_RCC_OscConfig+0x12c>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d168      	bne.n	80079f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e24c      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007932:	d106      	bne.n	8007942 <HAL_RCC_OscConfig+0x76>
 8007934:	4b80      	ldr	r3, [pc, #512]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a7f      	ldr	r2, [pc, #508]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 800793a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	e02e      	b.n	80079a0 <HAL_RCC_OscConfig+0xd4>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10c      	bne.n	8007964 <HAL_RCC_OscConfig+0x98>
 800794a:	4b7b      	ldr	r3, [pc, #492]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a7a      	ldr	r2, [pc, #488]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	4b78      	ldr	r3, [pc, #480]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a77      	ldr	r2, [pc, #476]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 800795c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	e01d      	b.n	80079a0 <HAL_RCC_OscConfig+0xd4>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800796c:	d10c      	bne.n	8007988 <HAL_RCC_OscConfig+0xbc>
 800796e:	4b72      	ldr	r3, [pc, #456]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a71      	ldr	r2, [pc, #452]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007974:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	4b6f      	ldr	r3, [pc, #444]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a6e      	ldr	r2, [pc, #440]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007980:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	e00b      	b.n	80079a0 <HAL_RCC_OscConfig+0xd4>
 8007988:	4b6b      	ldr	r3, [pc, #428]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a6a      	ldr	r2, [pc, #424]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 800798e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007992:	6013      	str	r3, [r2, #0]
 8007994:	4b68      	ldr	r3, [pc, #416]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	4a67      	ldr	r2, [pc, #412]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 800799a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800799e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d013      	beq.n	80079d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a8:	f7fe fbcc 	bl	8006144 <HAL_GetTick>
 80079ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079ae:	e008      	b.n	80079c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079b0:	f7fe fbc8 	bl	8006144 <HAL_GetTick>
 80079b4:	4602      	mov	r2, r0
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	2b64      	cmp	r3, #100	; 0x64
 80079bc:	d901      	bls.n	80079c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e200      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079c2:	4b5d      	ldr	r3, [pc, #372]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0f0      	beq.n	80079b0 <HAL_RCC_OscConfig+0xe4>
 80079ce:	e014      	b.n	80079fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079d0:	f7fe fbb8 	bl	8006144 <HAL_GetTick>
 80079d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079d6:	e008      	b.n	80079ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079d8:	f7fe fbb4 	bl	8006144 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b64      	cmp	r3, #100	; 0x64
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e1ec      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079ea:	4b53      	ldr	r3, [pc, #332]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1f0      	bne.n	80079d8 <HAL_RCC_OscConfig+0x10c>
 80079f6:	e000      	b.n	80079fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d063      	beq.n	8007ace <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007a06:	4b4c      	ldr	r3, [pc, #304]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f003 030c 	and.w	r3, r3, #12
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00b      	beq.n	8007a2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8007a12:	4b49      	ldr	r3, [pc, #292]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f003 030c 	and.w	r3, r3, #12
 8007a1a:	2b08      	cmp	r3, #8
 8007a1c:	d11c      	bne.n	8007a58 <HAL_RCC_OscConfig+0x18c>
 8007a1e:	4b46      	ldr	r3, [pc, #280]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d116      	bne.n	8007a58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a2a:	4b43      	ldr	r3, [pc, #268]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d005      	beq.n	8007a42 <HAL_RCC_OscConfig+0x176>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d001      	beq.n	8007a42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e1c0      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a42:	4b3d      	ldr	r3, [pc, #244]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	695b      	ldr	r3, [r3, #20]
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	4939      	ldr	r1, [pc, #228]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a56:	e03a      	b.n	8007ace <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d020      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a60:	4b36      	ldr	r3, [pc, #216]	; (8007b3c <HAL_RCC_OscConfig+0x270>)
 8007a62:	2201      	movs	r2, #1
 8007a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a66:	f7fe fb6d 	bl	8006144 <HAL_GetTick>
 8007a6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a6c:	e008      	b.n	8007a80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a6e:	f7fe fb69 	bl	8006144 <HAL_GetTick>
 8007a72:	4602      	mov	r2, r0
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	1ad3      	subs	r3, r2, r3
 8007a78:	2b02      	cmp	r3, #2
 8007a7a:	d901      	bls.n	8007a80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8007a7c:	2303      	movs	r3, #3
 8007a7e:	e1a1      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a80:	4b2d      	ldr	r3, [pc, #180]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d0f0      	beq.n	8007a6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a8c:	4b2a      	ldr	r3, [pc, #168]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	4927      	ldr	r1, [pc, #156]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	600b      	str	r3, [r1, #0]
 8007aa0:	e015      	b.n	8007ace <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007aa2:	4b26      	ldr	r3, [pc, #152]	; (8007b3c <HAL_RCC_OscConfig+0x270>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa8:	f7fe fb4c 	bl	8006144 <HAL_GetTick>
 8007aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007aae:	e008      	b.n	8007ac2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ab0:	f7fe fb48 	bl	8006144 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d901      	bls.n	8007ac2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8007abe:	2303      	movs	r3, #3
 8007ac0:	e180      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ac2:	4b1d      	ldr	r3, [pc, #116]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1f0      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d03a      	beq.n	8007b50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d019      	beq.n	8007b16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ae2:	4b17      	ldr	r3, [pc, #92]	; (8007b40 <HAL_RCC_OscConfig+0x274>)
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007ae8:	f7fe fb2c 	bl	8006144 <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007aee:	e008      	b.n	8007b02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007af0:	f7fe fb28 	bl	8006144 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e160      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b02:	4b0d      	ldr	r3, [pc, #52]	; (8007b38 <HAL_RCC_OscConfig+0x26c>)
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	f003 0302 	and.w	r3, r3, #2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0f0      	beq.n	8007af0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8007b0e:	2001      	movs	r0, #1
 8007b10:	f000 fada 	bl	80080c8 <RCC_Delay>
 8007b14:	e01c      	b.n	8007b50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b16:	4b0a      	ldr	r3, [pc, #40]	; (8007b40 <HAL_RCC_OscConfig+0x274>)
 8007b18:	2200      	movs	r2, #0
 8007b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b1c:	f7fe fb12 	bl	8006144 <HAL_GetTick>
 8007b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b22:	e00f      	b.n	8007b44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b24:	f7fe fb0e 	bl	8006144 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d908      	bls.n	8007b44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e146      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
 8007b36:	bf00      	nop
 8007b38:	40021000 	.word	0x40021000
 8007b3c:	42420000 	.word	0x42420000
 8007b40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b44:	4b92      	ldr	r3, [pc, #584]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d1e9      	bne.n	8007b24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0304 	and.w	r3, r3, #4
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 80a6 	beq.w	8007caa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b62:	4b8b      	ldr	r3, [pc, #556]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10d      	bne.n	8007b8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b6e:	4b88      	ldr	r3, [pc, #544]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	4a87      	ldr	r2, [pc, #540]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b78:	61d3      	str	r3, [r2, #28]
 8007b7a:	4b85      	ldr	r3, [pc, #532]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007b7c:	69db      	ldr	r3, [r3, #28]
 8007b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b82:	60bb      	str	r3, [r7, #8]
 8007b84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007b86:	2301      	movs	r3, #1
 8007b88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007b8a:	4b82      	ldr	r3, [pc, #520]	; (8007d94 <HAL_RCC_OscConfig+0x4c8>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d118      	bne.n	8007bc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007b96:	4b7f      	ldr	r3, [pc, #508]	; (8007d94 <HAL_RCC_OscConfig+0x4c8>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a7e      	ldr	r2, [pc, #504]	; (8007d94 <HAL_RCC_OscConfig+0x4c8>)
 8007b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ba0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ba2:	f7fe facf 	bl	8006144 <HAL_GetTick>
 8007ba6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ba8:	e008      	b.n	8007bbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007baa:	f7fe facb 	bl	8006144 <HAL_GetTick>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	1ad3      	subs	r3, r2, r3
 8007bb4:	2b64      	cmp	r3, #100	; 0x64
 8007bb6:	d901      	bls.n	8007bbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e103      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bbc:	4b75      	ldr	r3, [pc, #468]	; (8007d94 <HAL_RCC_OscConfig+0x4c8>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d0f0      	beq.n	8007baa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d106      	bne.n	8007bde <HAL_RCC_OscConfig+0x312>
 8007bd0:	4b6f      	ldr	r3, [pc, #444]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	4a6e      	ldr	r2, [pc, #440]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	6213      	str	r3, [r2, #32]
 8007bdc:	e02d      	b.n	8007c3a <HAL_RCC_OscConfig+0x36e>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d10c      	bne.n	8007c00 <HAL_RCC_OscConfig+0x334>
 8007be6:	4b6a      	ldr	r3, [pc, #424]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	4a69      	ldr	r2, [pc, #420]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007bec:	f023 0301 	bic.w	r3, r3, #1
 8007bf0:	6213      	str	r3, [r2, #32]
 8007bf2:	4b67      	ldr	r3, [pc, #412]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	4a66      	ldr	r2, [pc, #408]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007bf8:	f023 0304 	bic.w	r3, r3, #4
 8007bfc:	6213      	str	r3, [r2, #32]
 8007bfe:	e01c      	b.n	8007c3a <HAL_RCC_OscConfig+0x36e>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	2b05      	cmp	r3, #5
 8007c06:	d10c      	bne.n	8007c22 <HAL_RCC_OscConfig+0x356>
 8007c08:	4b61      	ldr	r3, [pc, #388]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c0a:	6a1b      	ldr	r3, [r3, #32]
 8007c0c:	4a60      	ldr	r2, [pc, #384]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c0e:	f043 0304 	orr.w	r3, r3, #4
 8007c12:	6213      	str	r3, [r2, #32]
 8007c14:	4b5e      	ldr	r3, [pc, #376]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	4a5d      	ldr	r2, [pc, #372]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c1a:	f043 0301 	orr.w	r3, r3, #1
 8007c1e:	6213      	str	r3, [r2, #32]
 8007c20:	e00b      	b.n	8007c3a <HAL_RCC_OscConfig+0x36e>
 8007c22:	4b5b      	ldr	r3, [pc, #364]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	4a5a      	ldr	r2, [pc, #360]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c28:	f023 0301 	bic.w	r3, r3, #1
 8007c2c:	6213      	str	r3, [r2, #32]
 8007c2e:	4b58      	ldr	r3, [pc, #352]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c30:	6a1b      	ldr	r3, [r3, #32]
 8007c32:	4a57      	ldr	r2, [pc, #348]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c34:	f023 0304 	bic.w	r3, r3, #4
 8007c38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d015      	beq.n	8007c6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c42:	f7fe fa7f 	bl	8006144 <HAL_GetTick>
 8007c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c48:	e00a      	b.n	8007c60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c4a:	f7fe fa7b 	bl	8006144 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e0b1      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c60:	4b4b      	ldr	r3, [pc, #300]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	f003 0302 	and.w	r3, r3, #2
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0ee      	beq.n	8007c4a <HAL_RCC_OscConfig+0x37e>
 8007c6c:	e014      	b.n	8007c98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c6e:	f7fe fa69 	bl	8006144 <HAL_GetTick>
 8007c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c74:	e00a      	b.n	8007c8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c76:	f7fe fa65 	bl	8006144 <HAL_GetTick>
 8007c7a:	4602      	mov	r2, r0
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d901      	bls.n	8007c8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e09b      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c8c:	4b40      	ldr	r3, [pc, #256]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007c8e:	6a1b      	ldr	r3, [r3, #32]
 8007c90:	f003 0302 	and.w	r3, r3, #2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d1ee      	bne.n	8007c76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d105      	bne.n	8007caa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c9e:	4b3c      	ldr	r3, [pc, #240]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	4a3b      	ldr	r2, [pc, #236]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ca8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	69db      	ldr	r3, [r3, #28]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f000 8087 	beq.w	8007dc2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007cb4:	4b36      	ldr	r3, [pc, #216]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	f003 030c 	and.w	r3, r3, #12
 8007cbc:	2b08      	cmp	r3, #8
 8007cbe:	d061      	beq.n	8007d84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d146      	bne.n	8007d56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cc8:	4b33      	ldr	r3, [pc, #204]	; (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cce:	f7fe fa39 	bl	8006144 <HAL_GetTick>
 8007cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007cd4:	e008      	b.n	8007ce8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cd6:	f7fe fa35 	bl	8006144 <HAL_GetTick>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	693b      	ldr	r3, [r7, #16]
 8007cde:	1ad3      	subs	r3, r2, r3
 8007ce0:	2b02      	cmp	r3, #2
 8007ce2:	d901      	bls.n	8007ce8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e06d      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007ce8:	4b29      	ldr	r3, [pc, #164]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1f0      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cfc:	d108      	bne.n	8007d10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007cfe:	4b24      	ldr	r3, [pc, #144]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	4921      	ldr	r1, [pc, #132]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d10:	4b1f      	ldr	r3, [pc, #124]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a19      	ldr	r1, [r3, #32]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	430b      	orrs	r3, r1
 8007d22:	491b      	ldr	r1, [pc, #108]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d28:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d2e:	f7fe fa09 	bl	8006144 <HAL_GetTick>
 8007d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007d34:	e008      	b.n	8007d48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d36:	f7fe fa05 	bl	8006144 <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d901      	bls.n	8007d48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e03d      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007d48:	4b11      	ldr	r3, [pc, #68]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d0f0      	beq.n	8007d36 <HAL_RCC_OscConfig+0x46a>
 8007d54:	e035      	b.n	8007dc2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d56:	4b10      	ldr	r3, [pc, #64]	; (8007d98 <HAL_RCC_OscConfig+0x4cc>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d5c:	f7fe f9f2 	bl	8006144 <HAL_GetTick>
 8007d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d62:	e008      	b.n	8007d76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d64:	f7fe f9ee 	bl	8006144 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d901      	bls.n	8007d76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e026      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007d76:	4b06      	ldr	r3, [pc, #24]	; (8007d90 <HAL_RCC_OscConfig+0x4c4>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1f0      	bne.n	8007d64 <HAL_RCC_OscConfig+0x498>
 8007d82:	e01e      	b.n	8007dc2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d107      	bne.n	8007d9c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e019      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
 8007d90:	40021000 	.word	0x40021000
 8007d94:	40007000 	.word	0x40007000
 8007d98:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	; (8007dcc <HAL_RCC_OscConfig+0x500>)
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	429a      	cmp	r2, r3
 8007dae:	d106      	bne.n	8007dbe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d001      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e000      	b.n	8007dc4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3718      	adds	r7, #24
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	40021000 	.word	0x40021000

08007dd0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	e0d0      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007de4:	4b6a      	ldr	r3, [pc, #424]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0307 	and.w	r3, r3, #7
 8007dec:	683a      	ldr	r2, [r7, #0]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d910      	bls.n	8007e14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007df2:	4b67      	ldr	r3, [pc, #412]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f023 0207 	bic.w	r2, r3, #7
 8007dfa:	4965      	ldr	r1, [pc, #404]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e02:	4b63      	ldr	r3, [pc, #396]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 0307 	and.w	r3, r3, #7
 8007e0a:	683a      	ldr	r2, [r7, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d001      	beq.n	8007e14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e0b8      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d020      	beq.n	8007e62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0304 	and.w	r3, r3, #4
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d005      	beq.n	8007e38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e2c:	4b59      	ldr	r3, [pc, #356]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	4a58      	ldr	r2, [pc, #352]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007e36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f003 0308 	and.w	r3, r3, #8
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e44:	4b53      	ldr	r3, [pc, #332]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	4a52      	ldr	r2, [pc, #328]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8007e4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e50:	4b50      	ldr	r3, [pc, #320]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689b      	ldr	r3, [r3, #8]
 8007e5c:	494d      	ldr	r1, [pc, #308]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 0301 	and.w	r3, r3, #1
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d040      	beq.n	8007ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	d107      	bne.n	8007e86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e76:	4b47      	ldr	r3, [pc, #284]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d115      	bne.n	8007eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e07f      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d107      	bne.n	8007e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e8e:	4b41      	ldr	r3, [pc, #260]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d109      	bne.n	8007eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e073      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e9e:	4b3d      	ldr	r3, [pc, #244]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e06b      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007eae:	4b39      	ldr	r3, [pc, #228]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f023 0203 	bic.w	r2, r3, #3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	4936      	ldr	r1, [pc, #216]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ec0:	f7fe f940 	bl	8006144 <HAL_GetTick>
 8007ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ec6:	e00a      	b.n	8007ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ec8:	f7fe f93c 	bl	8006144 <HAL_GetTick>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	1ad3      	subs	r3, r2, r3
 8007ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d901      	bls.n	8007ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e053      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ede:	4b2d      	ldr	r3, [pc, #180]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f003 020c 	and.w	r2, r3, #12
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d1eb      	bne.n	8007ec8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ef0:	4b27      	ldr	r3, [pc, #156]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	683a      	ldr	r2, [r7, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d210      	bcs.n	8007f20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007efe:	4b24      	ldr	r3, [pc, #144]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f023 0207 	bic.w	r2, r3, #7
 8007f06:	4922      	ldr	r1, [pc, #136]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f0e:	4b20      	ldr	r3, [pc, #128]	; (8007f90 <HAL_RCC_ClockConfig+0x1c0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	683a      	ldr	r2, [r7, #0]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d001      	beq.n	8007f20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e032      	b.n	8007f86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f003 0304 	and.w	r3, r3, #4
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d008      	beq.n	8007f3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f2c:	4b19      	ldr	r3, [pc, #100]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	4916      	ldr	r1, [pc, #88]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0308 	and.w	r3, r3, #8
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d009      	beq.n	8007f5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007f4a:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	490e      	ldr	r1, [pc, #56]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f5e:	f000 f821 	bl	8007fa4 <HAL_RCC_GetSysClockFreq>
 8007f62:	4602      	mov	r2, r0
 8007f64:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <HAL_RCC_ClockConfig+0x1c4>)
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	091b      	lsrs	r3, r3, #4
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	490a      	ldr	r1, [pc, #40]	; (8007f98 <HAL_RCC_ClockConfig+0x1c8>)
 8007f70:	5ccb      	ldrb	r3, [r1, r3]
 8007f72:	fa22 f303 	lsr.w	r3, r2, r3
 8007f76:	4a09      	ldr	r2, [pc, #36]	; (8007f9c <HAL_RCC_ClockConfig+0x1cc>)
 8007f78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007f7a:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <HAL_RCC_ClockConfig+0x1d0>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7fe f89e 	bl	80060c0 <HAL_InitTick>

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	40022000 	.word	0x40022000
 8007f94:	40021000 	.word	0x40021000
 8007f98:	0800cf4c 	.word	0x0800cf4c
 8007f9c:	2000000c 	.word	0x2000000c
 8007fa0:	20000010 	.word	0x20000010

08007fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fa4:	b490      	push	{r4, r7}
 8007fa6:	b08a      	sub	sp, #40	; 0x28
 8007fa8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007faa:	4b29      	ldr	r3, [pc, #164]	; (8008050 <HAL_RCC_GetSysClockFreq+0xac>)
 8007fac:	1d3c      	adds	r4, r7, #4
 8007fae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007fb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007fb4:	f240 2301 	movw	r3, #513	; 0x201
 8007fb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	61fb      	str	r3, [r7, #28]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	61bb      	str	r3, [r7, #24]
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007fce:	4b21      	ldr	r3, [pc, #132]	; (8008054 <HAL_RCC_GetSysClockFreq+0xb0>)
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	f003 030c 	and.w	r3, r3, #12
 8007fda:	2b04      	cmp	r3, #4
 8007fdc:	d002      	beq.n	8007fe4 <HAL_RCC_GetSysClockFreq+0x40>
 8007fde:	2b08      	cmp	r3, #8
 8007fe0:	d003      	beq.n	8007fea <HAL_RCC_GetSysClockFreq+0x46>
 8007fe2:	e02b      	b.n	800803c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007fe4:	4b1c      	ldr	r3, [pc, #112]	; (8008058 <HAL_RCC_GetSysClockFreq+0xb4>)
 8007fe6:	623b      	str	r3, [r7, #32]
      break;
 8007fe8:	e02b      	b.n	8008042 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	0c9b      	lsrs	r3, r3, #18
 8007fee:	f003 030f 	and.w	r3, r3, #15
 8007ff2:	3328      	adds	r3, #40	; 0x28
 8007ff4:	443b      	add	r3, r7
 8007ff6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007ffa:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d012      	beq.n	800802c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008006:	4b13      	ldr	r3, [pc, #76]	; (8008054 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	0c5b      	lsrs	r3, r3, #17
 800800c:	f003 0301 	and.w	r3, r3, #1
 8008010:	3328      	adds	r3, #40	; 0x28
 8008012:	443b      	add	r3, r7
 8008014:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008018:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	4a0e      	ldr	r2, [pc, #56]	; (8008058 <HAL_RCC_GetSysClockFreq+0xb4>)
 800801e:	fb03 f202 	mul.w	r2, r3, r2
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	fbb2 f3f3 	udiv	r3, r2, r3
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
 800802a:	e004      	b.n	8008036 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	4a0b      	ldr	r2, [pc, #44]	; (800805c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008030:	fb02 f303 	mul.w	r3, r2, r3
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	623b      	str	r3, [r7, #32]
      break;
 800803a:	e002      	b.n	8008042 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800803c:	4b08      	ldr	r3, [pc, #32]	; (8008060 <HAL_RCC_GetSysClockFreq+0xbc>)
 800803e:	623b      	str	r3, [r7, #32]
      break;
 8008040:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008042:	6a3b      	ldr	r3, [r7, #32]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3728      	adds	r7, #40	; 0x28
 8008048:	46bd      	mov	sp, r7
 800804a:	bc90      	pop	{r4, r7}
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	0800c938 	.word	0x0800c938
 8008054:	40021000 	.word	0x40021000
 8008058:	00f42400 	.word	0x00f42400
 800805c:	003d0900 	.word	0x003d0900
 8008060:	007a1200 	.word	0x007a1200

08008064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008064:	b480      	push	{r7}
 8008066:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008068:	4b02      	ldr	r3, [pc, #8]	; (8008074 <HAL_RCC_GetHCLKFreq+0x10>)
 800806a:	681b      	ldr	r3, [r3, #0]
}
 800806c:	4618      	mov	r0, r3
 800806e:	46bd      	mov	sp, r7
 8008070:	bc80      	pop	{r7}
 8008072:	4770      	bx	lr
 8008074:	2000000c 	.word	0x2000000c

08008078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800807c:	f7ff fff2 	bl	8008064 <HAL_RCC_GetHCLKFreq>
 8008080:	4602      	mov	r2, r0
 8008082:	4b05      	ldr	r3, [pc, #20]	; (8008098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	0a1b      	lsrs	r3, r3, #8
 8008088:	f003 0307 	and.w	r3, r3, #7
 800808c:	4903      	ldr	r1, [pc, #12]	; (800809c <HAL_RCC_GetPCLK1Freq+0x24>)
 800808e:	5ccb      	ldrb	r3, [r1, r3]
 8008090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008094:	4618      	mov	r0, r3
 8008096:	bd80      	pop	{r7, pc}
 8008098:	40021000 	.word	0x40021000
 800809c:	0800cf5c 	.word	0x0800cf5c

080080a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80080a4:	f7ff ffde 	bl	8008064 <HAL_RCC_GetHCLKFreq>
 80080a8:	4602      	mov	r2, r0
 80080aa:	4b05      	ldr	r3, [pc, #20]	; (80080c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	0adb      	lsrs	r3, r3, #11
 80080b0:	f003 0307 	and.w	r3, r3, #7
 80080b4:	4903      	ldr	r1, [pc, #12]	; (80080c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80080b6:	5ccb      	ldrb	r3, [r1, r3]
 80080b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80080bc:	4618      	mov	r0, r3
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	40021000 	.word	0x40021000
 80080c4:	0800cf5c 	.word	0x0800cf5c

080080c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80080d0:	4b0a      	ldr	r3, [pc, #40]	; (80080fc <RCC_Delay+0x34>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a0a      	ldr	r2, [pc, #40]	; (8008100 <RCC_Delay+0x38>)
 80080d6:	fba2 2303 	umull	r2, r3, r2, r3
 80080da:	0a5b      	lsrs	r3, r3, #9
 80080dc:	687a      	ldr	r2, [r7, #4]
 80080de:	fb02 f303 	mul.w	r3, r2, r3
 80080e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80080e4:	bf00      	nop
  }
  while (Delay --);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	1e5a      	subs	r2, r3, #1
 80080ea:	60fa      	str	r2, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d1f9      	bne.n	80080e4 <RCC_Delay+0x1c>
}
 80080f0:	bf00      	nop
 80080f2:	bf00      	nop
 80080f4:	3714      	adds	r7, #20
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bc80      	pop	{r7}
 80080fa:	4770      	bx	lr
 80080fc:	2000000c 	.word	0x2000000c
 8008100:	10624dd3 	.word	0x10624dd3

08008104 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d101      	bne.n	8008116 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	e041      	b.n	800819a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7fd fa3a 	bl	80055a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2202      	movs	r2, #2
 8008134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	3304      	adds	r3, #4
 8008140:	4619      	mov	r1, r3
 8008142:	4610      	mov	r0, r2
 8008144:	f000 fd88 	bl	8008c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2201      	movs	r2, #1
 800814c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008198:	2300      	movs	r3, #0
}
 800819a:	4618      	mov	r0, r3
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
	...

080081a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d001      	beq.n	80081bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081b8:	2301      	movs	r3, #1
 80081ba:	e044      	b.n	8008246 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2202      	movs	r2, #2
 80081c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0201 	orr.w	r2, r2, #1
 80081d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a1d      	ldr	r2, [pc, #116]	; (8008250 <HAL_TIM_Base_Start_IT+0xac>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d018      	beq.n	8008210 <HAL_TIM_Base_Start_IT+0x6c>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a1c      	ldr	r2, [pc, #112]	; (8008254 <HAL_TIM_Base_Start_IT+0xb0>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d013      	beq.n	8008210 <HAL_TIM_Base_Start_IT+0x6c>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081f0:	d00e      	beq.n	8008210 <HAL_TIM_Base_Start_IT+0x6c>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a18      	ldr	r2, [pc, #96]	; (8008258 <HAL_TIM_Base_Start_IT+0xb4>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d009      	beq.n	8008210 <HAL_TIM_Base_Start_IT+0x6c>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a16      	ldr	r2, [pc, #88]	; (800825c <HAL_TIM_Base_Start_IT+0xb8>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d004      	beq.n	8008210 <HAL_TIM_Base_Start_IT+0x6c>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a15      	ldr	r2, [pc, #84]	; (8008260 <HAL_TIM_Base_Start_IT+0xbc>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d111      	bne.n	8008234 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2b06      	cmp	r3, #6
 8008220:	d010      	beq.n	8008244 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f042 0201 	orr.w	r2, r2, #1
 8008230:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008232:	e007      	b.n	8008244 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f042 0201 	orr.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	bc80      	pop	{r7}
 800824e:	4770      	bx	lr
 8008250:	40012c00 	.word	0x40012c00
 8008254:	40013400 	.word	0x40013400
 8008258:	40000400 	.word	0x40000400
 800825c:	40000800 	.word	0x40000800
 8008260:	40000c00 	.word	0x40000c00

08008264 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e041      	b.n	80082fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800827c:	b2db      	uxtb	r3, r3
 800827e:	2b00      	cmp	r3, #0
 8008280:	d106      	bne.n	8008290 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f839 	bl	8008302 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2202      	movs	r2, #2
 8008294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3304      	adds	r3, #4
 80082a0:	4619      	mov	r1, r3
 80082a2:	4610      	mov	r0, r2
 80082a4:	f000 fcd8 	bl	8008c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800830a:	bf00      	nop
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	bc80      	pop	{r7}
 8008312:	4770      	bx	lr

08008314 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d109      	bne.n	8008338 <HAL_TIM_PWM_Start+0x24>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800832a:	b2db      	uxtb	r3, r3
 800832c:	2b01      	cmp	r3, #1
 800832e:	bf14      	ite	ne
 8008330:	2301      	movne	r3, #1
 8008332:	2300      	moveq	r3, #0
 8008334:	b2db      	uxtb	r3, r3
 8008336:	e022      	b.n	800837e <HAL_TIM_PWM_Start+0x6a>
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	2b04      	cmp	r3, #4
 800833c:	d109      	bne.n	8008352 <HAL_TIM_PWM_Start+0x3e>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008344:	b2db      	uxtb	r3, r3
 8008346:	2b01      	cmp	r3, #1
 8008348:	bf14      	ite	ne
 800834a:	2301      	movne	r3, #1
 800834c:	2300      	moveq	r3, #0
 800834e:	b2db      	uxtb	r3, r3
 8008350:	e015      	b.n	800837e <HAL_TIM_PWM_Start+0x6a>
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2b08      	cmp	r3, #8
 8008356:	d109      	bne.n	800836c <HAL_TIM_PWM_Start+0x58>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b01      	cmp	r3, #1
 8008362:	bf14      	ite	ne
 8008364:	2301      	movne	r3, #1
 8008366:	2300      	moveq	r3, #0
 8008368:	b2db      	uxtb	r3, r3
 800836a:	e008      	b.n	800837e <HAL_TIM_PWM_Start+0x6a>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b01      	cmp	r3, #1
 8008376:	bf14      	ite	ne
 8008378:	2301      	movne	r3, #1
 800837a:	2300      	moveq	r3, #0
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	e072      	b.n	800846c <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d104      	bne.n	8008396 <HAL_TIM_PWM_Start+0x82>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2202      	movs	r2, #2
 8008390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008394:	e013      	b.n	80083be <HAL_TIM_PWM_Start+0xaa>
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	2b04      	cmp	r3, #4
 800839a:	d104      	bne.n	80083a6 <HAL_TIM_PWM_Start+0x92>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083a4:	e00b      	b.n	80083be <HAL_TIM_PWM_Start+0xaa>
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	2b08      	cmp	r3, #8
 80083aa:	d104      	bne.n	80083b6 <HAL_TIM_PWM_Start+0xa2>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083b4:	e003      	b.n	80083be <HAL_TIM_PWM_Start+0xaa>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2202      	movs	r2, #2
 80083ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2201      	movs	r2, #1
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 ff02 	bl	80091d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a28      	ldr	r2, [pc, #160]	; (8008474 <HAL_TIM_PWM_Start+0x160>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d004      	beq.n	80083e0 <HAL_TIM_PWM_Start+0xcc>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a27      	ldr	r2, [pc, #156]	; (8008478 <HAL_TIM_PWM_Start+0x164>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d101      	bne.n	80083e4 <HAL_TIM_PWM_Start+0xd0>
 80083e0:	2301      	movs	r3, #1
 80083e2:	e000      	b.n	80083e6 <HAL_TIM_PWM_Start+0xd2>
 80083e4:	2300      	movs	r3, #0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80083f8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a1d      	ldr	r2, [pc, #116]	; (8008474 <HAL_TIM_PWM_Start+0x160>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d018      	beq.n	8008436 <HAL_TIM_PWM_Start+0x122>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a1b      	ldr	r2, [pc, #108]	; (8008478 <HAL_TIM_PWM_Start+0x164>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d013      	beq.n	8008436 <HAL_TIM_PWM_Start+0x122>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008416:	d00e      	beq.n	8008436 <HAL_TIM_PWM_Start+0x122>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a17      	ldr	r2, [pc, #92]	; (800847c <HAL_TIM_PWM_Start+0x168>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d009      	beq.n	8008436 <HAL_TIM_PWM_Start+0x122>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a16      	ldr	r2, [pc, #88]	; (8008480 <HAL_TIM_PWM_Start+0x16c>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d004      	beq.n	8008436 <HAL_TIM_PWM_Start+0x122>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a14      	ldr	r2, [pc, #80]	; (8008484 <HAL_TIM_PWM_Start+0x170>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d111      	bne.n	800845a <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	f003 0307 	and.w	r3, r3, #7
 8008440:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	2b06      	cmp	r3, #6
 8008446:	d010      	beq.n	800846a <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 0201 	orr.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008458:	e007      	b.n	800846a <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f042 0201 	orr.w	r2, r2, #1
 8008468:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800846a:	2300      	movs	r3, #0
}
 800846c:	4618      	mov	r0, r3
 800846e:	3710      	adds	r7, #16
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}
 8008474:	40012c00 	.word	0x40012c00
 8008478:	40013400 	.word	0x40013400
 800847c:	40000400 	.word	0x40000400
 8008480:	40000800 	.word	0x40000800
 8008484:	40000c00 	.word	0x40000c00

08008488 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	e093      	b.n	80085c4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084a2:	b2db      	uxtb	r3, r3
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d106      	bne.n	80084b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f7fd f8c5 	bl	8005640 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2202      	movs	r2, #2
 80084ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	6812      	ldr	r2, [r2, #0]
 80084c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084cc:	f023 0307 	bic.w	r3, r3, #7
 80084d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	3304      	adds	r3, #4
 80084da:	4619      	mov	r1, r3
 80084dc:	4610      	mov	r0, r2
 80084de:	f000 fbbb 	bl	8008c58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	6a1b      	ldr	r3, [r3, #32]
 80084f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	4313      	orrs	r3, r2
 8008502:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800850a:	f023 0303 	bic.w	r3, r3, #3
 800850e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	689a      	ldr	r2, [r3, #8]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	021b      	lsls	r3, r3, #8
 800851a:	4313      	orrs	r3, r2
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	4313      	orrs	r3, r2
 8008520:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008528:	f023 030c 	bic.w	r3, r3, #12
 800852c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008534:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008538:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	021b      	lsls	r3, r3, #8
 8008544:	4313      	orrs	r3, r2
 8008546:	693a      	ldr	r2, [r7, #16]
 8008548:	4313      	orrs	r3, r2
 800854a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	011a      	lsls	r2, r3, #4
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	6a1b      	ldr	r3, [r3, #32]
 8008556:	031b      	lsls	r3, r3, #12
 8008558:	4313      	orrs	r3, r2
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	4313      	orrs	r3, r2
 800855e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008566:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	695b      	ldr	r3, [r3, #20]
 8008570:	011b      	lsls	r3, r3, #4
 8008572:	4313      	orrs	r3, r2
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4313      	orrs	r3, r2
 8008578:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80085e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80085ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80085f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d110      	bne.n	800861e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	2b01      	cmp	r3, #1
 8008600:	d102      	bne.n	8008608 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008602:	7b7b      	ldrb	r3, [r7, #13]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d001      	beq.n	800860c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e069      	b.n	80086e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2202      	movs	r2, #2
 8008618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800861c:	e031      	b.n	8008682 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	2b04      	cmp	r3, #4
 8008622:	d110      	bne.n	8008646 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008624:	7bbb      	ldrb	r3, [r7, #14]
 8008626:	2b01      	cmp	r3, #1
 8008628:	d102      	bne.n	8008630 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800862a:	7b3b      	ldrb	r3, [r7, #12]
 800862c:	2b01      	cmp	r3, #1
 800862e:	d001      	beq.n	8008634 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e055      	b.n	80086e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2202      	movs	r2, #2
 8008638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2202      	movs	r2, #2
 8008640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008644:	e01d      	b.n	8008682 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d108      	bne.n	800865e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800864c:	7bbb      	ldrb	r3, [r7, #14]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d105      	bne.n	800865e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008652:	7b7b      	ldrb	r3, [r7, #13]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d102      	bne.n	800865e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008658:	7b3b      	ldrb	r3, [r7, #12]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d001      	beq.n	8008662 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e03e      	b.n	80086e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2202      	movs	r2, #2
 8008666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2202      	movs	r2, #2
 800866e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2202      	movs	r2, #2
 8008676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2202      	movs	r2, #2
 800867e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d003      	beq.n	8008690 <HAL_TIM_Encoder_Start+0xc4>
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	2b04      	cmp	r3, #4
 800868c:	d008      	beq.n	80086a0 <HAL_TIM_Encoder_Start+0xd4>
 800868e:	e00f      	b.n	80086b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2201      	movs	r2, #1
 8008696:	2100      	movs	r1, #0
 8008698:	4618      	mov	r0, r3
 800869a:	f000 fd99 	bl	80091d0 <TIM_CCxChannelCmd>
      break;
 800869e:	e016      	b.n	80086ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2201      	movs	r2, #1
 80086a6:	2104      	movs	r1, #4
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 fd91 	bl	80091d0 <TIM_CCxChannelCmd>
      break;
 80086ae:	e00e      	b.n	80086ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2201      	movs	r2, #1
 80086b6:	2100      	movs	r1, #0
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fd89 	bl	80091d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2201      	movs	r2, #1
 80086c4:	2104      	movs	r1, #4
 80086c6:	4618      	mov	r0, r3
 80086c8:	f000 fd82 	bl	80091d0 <TIM_CCxChannelCmd>
      break;
 80086cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f042 0201 	orr.w	r2, r2, #1
 80086dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	f003 0302 	and.w	r3, r3, #2
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d122      	bne.n	8008744 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b02      	cmp	r3, #2
 800870a:	d11b      	bne.n	8008744 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f06f 0202 	mvn.w	r2, #2
 8008714:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	f003 0303 	and.w	r3, r3, #3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 fa78 	bl	8008c20 <HAL_TIM_IC_CaptureCallback>
 8008730:	e005      	b.n	800873e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fa6b 	bl	8008c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fa7a 	bl	8008c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2200      	movs	r2, #0
 8008742:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	f003 0304 	and.w	r3, r3, #4
 800874e:	2b04      	cmp	r3, #4
 8008750:	d122      	bne.n	8008798 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f003 0304 	and.w	r3, r3, #4
 800875c:	2b04      	cmp	r3, #4
 800875e:	d11b      	bne.n	8008798 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f06f 0204 	mvn.w	r2, #4
 8008768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2202      	movs	r2, #2
 800876e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	699b      	ldr	r3, [r3, #24]
 8008776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800877a:	2b00      	cmp	r3, #0
 800877c:	d003      	beq.n	8008786 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fa4e 	bl	8008c20 <HAL_TIM_IC_CaptureCallback>
 8008784:	e005      	b.n	8008792 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 fa41 	bl	8008c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fa50 	bl	8008c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2200      	movs	r2, #0
 8008796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	691b      	ldr	r3, [r3, #16]
 800879e:	f003 0308 	and.w	r3, r3, #8
 80087a2:	2b08      	cmp	r3, #8
 80087a4:	d122      	bne.n	80087ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	68db      	ldr	r3, [r3, #12]
 80087ac:	f003 0308 	and.w	r3, r3, #8
 80087b0:	2b08      	cmp	r3, #8
 80087b2:	d11b      	bne.n	80087ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f06f 0208 	mvn.w	r2, #8
 80087bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2204      	movs	r2, #4
 80087c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d003      	beq.n	80087da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fa24 	bl	8008c20 <HAL_TIM_IC_CaptureCallback>
 80087d8:	e005      	b.n	80087e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fa17 	bl	8008c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fa26 	bl	8008c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	f003 0310 	and.w	r3, r3, #16
 80087f6:	2b10      	cmp	r3, #16
 80087f8:	d122      	bne.n	8008840 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68db      	ldr	r3, [r3, #12]
 8008800:	f003 0310 	and.w	r3, r3, #16
 8008804:	2b10      	cmp	r3, #16
 8008806:	d11b      	bne.n	8008840 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f06f 0210 	mvn.w	r2, #16
 8008810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2208      	movs	r2, #8
 8008816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	69db      	ldr	r3, [r3, #28]
 800881e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f9fa 	bl	8008c20 <HAL_TIM_IC_CaptureCallback>
 800882c:	e005      	b.n	800883a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 f9ed 	bl	8008c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 f9fc 	bl	8008c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	2b01      	cmp	r3, #1
 800884c:	d10e      	bne.n	800886c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	68db      	ldr	r3, [r3, #12]
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b01      	cmp	r3, #1
 800885a:	d107      	bne.n	800886c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f06f 0201 	mvn.w	r2, #1
 8008864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f000 f9c8 	bl	8008bfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	691b      	ldr	r3, [r3, #16]
 8008872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008876:	2b80      	cmp	r3, #128	; 0x80
 8008878:	d10e      	bne.n	8008898 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008884:	2b80      	cmp	r3, #128	; 0x80
 8008886:	d107      	bne.n	8008898 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 fd86 	bl	80093a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	691b      	ldr	r3, [r3, #16]
 800889e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a2:	2b40      	cmp	r3, #64	; 0x40
 80088a4:	d10e      	bne.n	80088c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b0:	2b40      	cmp	r3, #64	; 0x40
 80088b2:	d107      	bne.n	80088c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f9c0 	bl	8008c44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	691b      	ldr	r3, [r3, #16]
 80088ca:	f003 0320 	and.w	r3, r3, #32
 80088ce:	2b20      	cmp	r3, #32
 80088d0:	d10e      	bne.n	80088f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	2b20      	cmp	r3, #32
 80088de:	d107      	bne.n	80088f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f06f 0220 	mvn.w	r2, #32
 80088e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f000 fd51 	bl	8009392 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088f0:	bf00      	nop
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800890a:	2b01      	cmp	r3, #1
 800890c:	d101      	bne.n	8008912 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800890e:	2302      	movs	r3, #2
 8008910:	e0ac      	b.n	8008a6c <HAL_TIM_PWM_ConfigChannel+0x174>
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b0c      	cmp	r3, #12
 800891e:	f200 809f 	bhi.w	8008a60 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008922:	a201      	add	r2, pc, #4	; (adr r2, 8008928 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008928:	0800895d 	.word	0x0800895d
 800892c:	08008a61 	.word	0x08008a61
 8008930:	08008a61 	.word	0x08008a61
 8008934:	08008a61 	.word	0x08008a61
 8008938:	0800899d 	.word	0x0800899d
 800893c:	08008a61 	.word	0x08008a61
 8008940:	08008a61 	.word	0x08008a61
 8008944:	08008a61 	.word	0x08008a61
 8008948:	080089df 	.word	0x080089df
 800894c:	08008a61 	.word	0x08008a61
 8008950:	08008a61 	.word	0x08008a61
 8008954:	08008a61 	.word	0x08008a61
 8008958:	08008a1f 	.word	0x08008a1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68b9      	ldr	r1, [r7, #8]
 8008962:	4618      	mov	r0, r3
 8008964:	f000 f9f2 	bl	8008d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699a      	ldr	r2, [r3, #24]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f042 0208 	orr.w	r2, r2, #8
 8008976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	699a      	ldr	r2, [r3, #24]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f022 0204 	bic.w	r2, r2, #4
 8008986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6999      	ldr	r1, [r3, #24]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	691a      	ldr	r2, [r3, #16]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	430a      	orrs	r2, r1
 8008998:	619a      	str	r2, [r3, #24]
      break;
 800899a:	e062      	b.n	8008a62 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	68b9      	ldr	r1, [r7, #8]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f000 fa42 	bl	8008e2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699a      	ldr	r2, [r3, #24]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	699a      	ldr	r2, [r3, #24]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6999      	ldr	r1, [r3, #24]
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	691b      	ldr	r3, [r3, #16]
 80089d2:	021a      	lsls	r2, r3, #8
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	430a      	orrs	r2, r1
 80089da:	619a      	str	r2, [r3, #24]
      break;
 80089dc:	e041      	b.n	8008a62 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68b9      	ldr	r1, [r7, #8]
 80089e4:	4618      	mov	r0, r3
 80089e6:	f000 fa95 	bl	8008f14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	69da      	ldr	r2, [r3, #28]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f042 0208 	orr.w	r2, r2, #8
 80089f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	69da      	ldr	r2, [r3, #28]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 0204 	bic.w	r2, r2, #4
 8008a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	69d9      	ldr	r1, [r3, #28]
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	691a      	ldr	r2, [r3, #16]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	430a      	orrs	r2, r1
 8008a1a:	61da      	str	r2, [r3, #28]
      break;
 8008a1c:	e021      	b.n	8008a62 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68b9      	ldr	r1, [r7, #8]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 fae9 	bl	8008ffc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69da      	ldr	r2, [r3, #28]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69da      	ldr	r2, [r3, #28]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69d9      	ldr	r1, [r3, #28]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	691b      	ldr	r3, [r3, #16]
 8008a54:	021a      	lsls	r2, r3, #8
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	430a      	orrs	r2, r1
 8008a5c:	61da      	str	r2, [r3, #28]
      break;
 8008a5e:	e000      	b.n	8008a62 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008a60:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2200      	movs	r2, #0
 8008a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3710      	adds	r7, #16
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d101      	bne.n	8008a8c <HAL_TIM_ConfigClockSource+0x18>
 8008a88:	2302      	movs	r3, #2
 8008a8a:	e0b3      	b.n	8008bf4 <HAL_TIM_ConfigClockSource+0x180>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2202      	movs	r2, #2
 8008a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008aaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ab2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ac4:	d03e      	beq.n	8008b44 <HAL_TIM_ConfigClockSource+0xd0>
 8008ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aca:	f200 8087 	bhi.w	8008bdc <HAL_TIM_ConfigClockSource+0x168>
 8008ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad2:	f000 8085 	beq.w	8008be0 <HAL_TIM_ConfigClockSource+0x16c>
 8008ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ada:	d87f      	bhi.n	8008bdc <HAL_TIM_ConfigClockSource+0x168>
 8008adc:	2b70      	cmp	r3, #112	; 0x70
 8008ade:	d01a      	beq.n	8008b16 <HAL_TIM_ConfigClockSource+0xa2>
 8008ae0:	2b70      	cmp	r3, #112	; 0x70
 8008ae2:	d87b      	bhi.n	8008bdc <HAL_TIM_ConfigClockSource+0x168>
 8008ae4:	2b60      	cmp	r3, #96	; 0x60
 8008ae6:	d050      	beq.n	8008b8a <HAL_TIM_ConfigClockSource+0x116>
 8008ae8:	2b60      	cmp	r3, #96	; 0x60
 8008aea:	d877      	bhi.n	8008bdc <HAL_TIM_ConfigClockSource+0x168>
 8008aec:	2b50      	cmp	r3, #80	; 0x50
 8008aee:	d03c      	beq.n	8008b6a <HAL_TIM_ConfigClockSource+0xf6>
 8008af0:	2b50      	cmp	r3, #80	; 0x50
 8008af2:	d873      	bhi.n	8008bdc <HAL_TIM_ConfigClockSource+0x168>
 8008af4:	2b40      	cmp	r3, #64	; 0x40
 8008af6:	d058      	beq.n	8008baa <HAL_TIM_ConfigClockSource+0x136>
 8008af8:	2b40      	cmp	r3, #64	; 0x40
 8008afa:	d86f      	bhi.n	8008bdc <HAL_TIM_ConfigClockSource+0x168>
 8008afc:	2b30      	cmp	r3, #48	; 0x30
 8008afe:	d064      	beq.n	8008bca <HAL_TIM_ConfigClockSource+0x156>
 8008b00:	2b30      	cmp	r3, #48	; 0x30
 8008b02:	d86b      	bhi.n	8008bdc <HAL_TIM_ConfigClockSource+0x168>
 8008b04:	2b20      	cmp	r3, #32
 8008b06:	d060      	beq.n	8008bca <HAL_TIM_ConfigClockSource+0x156>
 8008b08:	2b20      	cmp	r3, #32
 8008b0a:	d867      	bhi.n	8008bdc <HAL_TIM_ConfigClockSource+0x168>
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d05c      	beq.n	8008bca <HAL_TIM_ConfigClockSource+0x156>
 8008b10:	2b10      	cmp	r3, #16
 8008b12:	d05a      	beq.n	8008bca <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008b14:	e062      	b.n	8008bdc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	6899      	ldr	r1, [r3, #8]
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	f000 fb34 	bl	8009192 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	609a      	str	r2, [r3, #8]
      break;
 8008b42:	e04e      	b.n	8008be2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6818      	ldr	r0, [r3, #0]
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	6899      	ldr	r1, [r3, #8]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	f000 fb1d 	bl	8009192 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689a      	ldr	r2, [r3, #8]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b66:	609a      	str	r2, [r3, #8]
      break;
 8008b68:	e03b      	b.n	8008be2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6818      	ldr	r0, [r3, #0]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	6859      	ldr	r1, [r3, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	461a      	mov	r2, r3
 8008b78:	f000 fa94 	bl	80090a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2150      	movs	r1, #80	; 0x50
 8008b82:	4618      	mov	r0, r3
 8008b84:	f000 faeb 	bl	800915e <TIM_ITRx_SetConfig>
      break;
 8008b88:	e02b      	b.n	8008be2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6818      	ldr	r0, [r3, #0]
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	6859      	ldr	r1, [r3, #4]
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	461a      	mov	r2, r3
 8008b98:	f000 fab2 	bl	8009100 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2160      	movs	r1, #96	; 0x60
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f000 fadb 	bl	800915e <TIM_ITRx_SetConfig>
      break;
 8008ba8:	e01b      	b.n	8008be2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6818      	ldr	r0, [r3, #0]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	6859      	ldr	r1, [r3, #4]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	f000 fa74 	bl	80090a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2140      	movs	r1, #64	; 0x40
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 facb 	bl	800915e <TIM_ITRx_SetConfig>
      break;
 8008bc8:	e00b      	b.n	8008be2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	f000 fac2 	bl	800915e <TIM_ITRx_SetConfig>
        break;
 8008bda:	e002      	b.n	8008be2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008bdc:	bf00      	nop
 8008bde:	e000      	b.n	8008be2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008be0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bc80      	pop	{r7}
 8008c0c:	4770      	bx	lr

08008c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c16:	bf00      	nop
 8008c18:	370c      	adds	r7, #12
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bc80      	pop	{r7}
 8008c1e:	4770      	bx	lr

08008c20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bc80      	pop	{r7}
 8008c30:	4770      	bx	lr

08008c32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c32:	b480      	push	{r7}
 8008c34:	b083      	sub	sp, #12
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bc80      	pop	{r7}
 8008c42:	4770      	bx	lr

08008c44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bc80      	pop	{r7}
 8008c54:	4770      	bx	lr
	...

08008c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4a33      	ldr	r2, [pc, #204]	; (8008d38 <TIM_Base_SetConfig+0xe0>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d013      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4a32      	ldr	r2, [pc, #200]	; (8008d3c <TIM_Base_SetConfig+0xe4>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d00f      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c7e:	d00b      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	4a2f      	ldr	r2, [pc, #188]	; (8008d40 <TIM_Base_SetConfig+0xe8>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d007      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a2e      	ldr	r2, [pc, #184]	; (8008d44 <TIM_Base_SetConfig+0xec>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d003      	beq.n	8008c98 <TIM_Base_SetConfig+0x40>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a2d      	ldr	r2, [pc, #180]	; (8008d48 <TIM_Base_SetConfig+0xf0>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d108      	bne.n	8008caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	68fa      	ldr	r2, [r7, #12]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a22      	ldr	r2, [pc, #136]	; (8008d38 <TIM_Base_SetConfig+0xe0>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d013      	beq.n	8008cda <TIM_Base_SetConfig+0x82>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a21      	ldr	r2, [pc, #132]	; (8008d3c <TIM_Base_SetConfig+0xe4>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d00f      	beq.n	8008cda <TIM_Base_SetConfig+0x82>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cc0:	d00b      	beq.n	8008cda <TIM_Base_SetConfig+0x82>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a1e      	ldr	r2, [pc, #120]	; (8008d40 <TIM_Base_SetConfig+0xe8>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d007      	beq.n	8008cda <TIM_Base_SetConfig+0x82>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a1d      	ldr	r2, [pc, #116]	; (8008d44 <TIM_Base_SetConfig+0xec>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d003      	beq.n	8008cda <TIM_Base_SetConfig+0x82>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a1c      	ldr	r2, [pc, #112]	; (8008d48 <TIM_Base_SetConfig+0xf0>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d108      	bne.n	8008cec <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	695b      	ldr	r3, [r3, #20]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	689a      	ldr	r2, [r3, #8]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a09      	ldr	r2, [pc, #36]	; (8008d38 <TIM_Base_SetConfig+0xe0>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d003      	beq.n	8008d20 <TIM_Base_SetConfig+0xc8>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a08      	ldr	r2, [pc, #32]	; (8008d3c <TIM_Base_SetConfig+0xe4>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d103      	bne.n	8008d28 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	691a      	ldr	r2, [r3, #16]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	615a      	str	r2, [r3, #20]
}
 8008d2e:	bf00      	nop
 8008d30:	3714      	adds	r7, #20
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bc80      	pop	{r7}
 8008d36:	4770      	bx	lr
 8008d38:	40012c00 	.word	0x40012c00
 8008d3c:	40013400 	.word	0x40013400
 8008d40:	40000400 	.word	0x40000400
 8008d44:	40000800 	.word	0x40000800
 8008d48:	40000c00 	.word	0x40000c00

08008d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b087      	sub	sp, #28
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	f023 0201 	bic.w	r2, r3, #1
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f023 0303 	bic.w	r3, r3, #3
 8008d82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	f023 0302 	bic.w	r3, r3, #2
 8008d94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	689b      	ldr	r3, [r3, #8]
 8008d9a:	697a      	ldr	r2, [r7, #20]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a20      	ldr	r2, [pc, #128]	; (8008e24 <TIM_OC1_SetConfig+0xd8>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d003      	beq.n	8008db0 <TIM_OC1_SetConfig+0x64>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a1f      	ldr	r2, [pc, #124]	; (8008e28 <TIM_OC1_SetConfig+0xdc>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d10c      	bne.n	8008dca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	f023 0308 	bic.w	r3, r3, #8
 8008db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	68db      	ldr	r3, [r3, #12]
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f023 0304 	bic.w	r3, r3, #4
 8008dc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a15      	ldr	r2, [pc, #84]	; (8008e24 <TIM_OC1_SetConfig+0xd8>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d003      	beq.n	8008dda <TIM_OC1_SetConfig+0x8e>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a14      	ldr	r2, [pc, #80]	; (8008e28 <TIM_OC1_SetConfig+0xdc>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d111      	bne.n	8008dfe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	693a      	ldr	r2, [r7, #16]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	697a      	ldr	r2, [r7, #20]
 8008e16:	621a      	str	r2, [r3, #32]
}
 8008e18:	bf00      	nop
 8008e1a:	371c      	adds	r7, #28
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bc80      	pop	{r7}
 8008e20:	4770      	bx	lr
 8008e22:	bf00      	nop
 8008e24:	40012c00 	.word	0x40012c00
 8008e28:	40013400 	.word	0x40013400

08008e2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b087      	sub	sp, #28
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	f023 0210 	bic.w	r2, r3, #16
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	021b      	lsls	r3, r3, #8
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	f023 0320 	bic.w	r3, r3, #32
 8008e76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a21      	ldr	r2, [pc, #132]	; (8008f0c <TIM_OC2_SetConfig+0xe0>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d003      	beq.n	8008e94 <TIM_OC2_SetConfig+0x68>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a20      	ldr	r2, [pc, #128]	; (8008f10 <TIM_OC2_SetConfig+0xe4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d10d      	bne.n	8008eb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	011b      	lsls	r3, r3, #4
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a16      	ldr	r2, [pc, #88]	; (8008f0c <TIM_OC2_SetConfig+0xe0>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d003      	beq.n	8008ec0 <TIM_OC2_SetConfig+0x94>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a15      	ldr	r2, [pc, #84]	; (8008f10 <TIM_OC2_SetConfig+0xe4>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d113      	bne.n	8008ee8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ec6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ece:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	693a      	ldr	r2, [r7, #16]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	009b      	lsls	r3, r3, #2
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	693a      	ldr	r2, [r7, #16]
 8008eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68fa      	ldr	r2, [r7, #12]
 8008ef2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685a      	ldr	r2, [r3, #4]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	621a      	str	r2, [r3, #32]
}
 8008f02:	bf00      	nop
 8008f04:	371c      	adds	r7, #28
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bc80      	pop	{r7}
 8008f0a:	4770      	bx	lr
 8008f0c:	40012c00 	.word	0x40012c00
 8008f10:	40013400 	.word	0x40013400

08008f14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b087      	sub	sp, #28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6a1b      	ldr	r3, [r3, #32]
 8008f22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	685b      	ldr	r3, [r3, #4]
 8008f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	69db      	ldr	r3, [r3, #28]
 8008f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f023 0303 	bic.w	r3, r3, #3
 8008f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	021b      	lsls	r3, r3, #8
 8008f64:	697a      	ldr	r2, [r7, #20]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	4a21      	ldr	r2, [pc, #132]	; (8008ff4 <TIM_OC3_SetConfig+0xe0>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d003      	beq.n	8008f7a <TIM_OC3_SetConfig+0x66>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a20      	ldr	r2, [pc, #128]	; (8008ff8 <TIM_OC3_SetConfig+0xe4>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d10d      	bne.n	8008f96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	021b      	lsls	r3, r3, #8
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a16      	ldr	r2, [pc, #88]	; (8008ff4 <TIM_OC3_SetConfig+0xe0>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d003      	beq.n	8008fa6 <TIM_OC3_SetConfig+0x92>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a15      	ldr	r2, [pc, #84]	; (8008ff8 <TIM_OC3_SetConfig+0xe4>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d113      	bne.n	8008fce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	011b      	lsls	r3, r3, #4
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	011b      	lsls	r3, r3, #4
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	68fa      	ldr	r2, [r7, #12]
 8008fd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	685a      	ldr	r2, [r3, #4]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	697a      	ldr	r2, [r7, #20]
 8008fe6:	621a      	str	r2, [r3, #32]
}
 8008fe8:	bf00      	nop
 8008fea:	371c      	adds	r7, #28
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bc80      	pop	{r7}
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	40012c00 	.word	0x40012c00
 8008ff8:	40013400 	.word	0x40013400

08008ffc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
 800900a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	69db      	ldr	r3, [r3, #28]
 8009022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800902a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	021b      	lsls	r3, r3, #8
 800903a:	68fa      	ldr	r2, [r7, #12]
 800903c:	4313      	orrs	r3, r2
 800903e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	031b      	lsls	r3, r3, #12
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	4313      	orrs	r3, r2
 8009052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	4a11      	ldr	r2, [pc, #68]	; (800909c <TIM_OC4_SetConfig+0xa0>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d003      	beq.n	8009064 <TIM_OC4_SetConfig+0x68>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a10      	ldr	r2, [pc, #64]	; (80090a0 <TIM_OC4_SetConfig+0xa4>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d109      	bne.n	8009078 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800906a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
 8009070:	019b      	lsls	r3, r3, #6
 8009072:	697a      	ldr	r2, [r7, #20]
 8009074:	4313      	orrs	r3, r2
 8009076:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	68fa      	ldr	r2, [r7, #12]
 8009082:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	685a      	ldr	r2, [r3, #4]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	621a      	str	r2, [r3, #32]
}
 8009092:	bf00      	nop
 8009094:	371c      	adds	r7, #28
 8009096:	46bd      	mov	sp, r7
 8009098:	bc80      	pop	{r7}
 800909a:	4770      	bx	lr
 800909c:	40012c00 	.word	0x40012c00
 80090a0:	40013400 	.word	0x40013400

080090a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	6a1b      	ldr	r3, [r3, #32]
 80090b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	f023 0201 	bic.w	r2, r3, #1
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	693a      	ldr	r2, [r7, #16]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f023 030a 	bic.w	r3, r3, #10
 80090e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	621a      	str	r2, [r3, #32]
}
 80090f6:	bf00      	nop
 80090f8:	371c      	adds	r7, #28
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bc80      	pop	{r7}
 80090fe:	4770      	bx	lr

08009100 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009100:	b480      	push	{r7}
 8009102:	b087      	sub	sp, #28
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6a1b      	ldr	r3, [r3, #32]
 8009110:	f023 0210 	bic.w	r2, r3, #16
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	699b      	ldr	r3, [r3, #24]
 800911c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009124:	697b      	ldr	r3, [r7, #20]
 8009126:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800912a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	031b      	lsls	r3, r3, #12
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	4313      	orrs	r3, r2
 8009134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800913c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	011b      	lsls	r3, r3, #4
 8009142:	693a      	ldr	r2, [r7, #16]
 8009144:	4313      	orrs	r3, r2
 8009146:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	621a      	str	r2, [r3, #32]
}
 8009154:	bf00      	nop
 8009156:	371c      	adds	r7, #28
 8009158:	46bd      	mov	sp, r7
 800915a:	bc80      	pop	{r7}
 800915c:	4770      	bx	lr

0800915e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800915e:	b480      	push	{r7}
 8009160:	b085      	sub	sp, #20
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
 8009166:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009174:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009176:	683a      	ldr	r2, [r7, #0]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	4313      	orrs	r3, r2
 800917c:	f043 0307 	orr.w	r3, r3, #7
 8009180:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	68fa      	ldr	r2, [r7, #12]
 8009186:	609a      	str	r2, [r3, #8]
}
 8009188:	bf00      	nop
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	bc80      	pop	{r7}
 8009190:	4770      	bx	lr

08009192 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009192:	b480      	push	{r7}
 8009194:	b087      	sub	sp, #28
 8009196:	af00      	add	r7, sp, #0
 8009198:	60f8      	str	r0, [r7, #12]
 800919a:	60b9      	str	r1, [r7, #8]
 800919c:	607a      	str	r2, [r7, #4]
 800919e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	021a      	lsls	r2, r3, #8
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	431a      	orrs	r2, r3
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	4313      	orrs	r3, r2
 80091be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	609a      	str	r2, [r3, #8]
}
 80091c6:	bf00      	nop
 80091c8:	371c      	adds	r7, #28
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bc80      	pop	{r7}
 80091ce:	4770      	bx	lr

080091d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091d0:	b480      	push	{r7}
 80091d2:	b087      	sub	sp, #28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	60f8      	str	r0, [r7, #12]
 80091d8:	60b9      	str	r1, [r7, #8]
 80091da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f003 031f 	and.w	r3, r3, #31
 80091e2:	2201      	movs	r2, #1
 80091e4:	fa02 f303 	lsl.w	r3, r2, r3
 80091e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6a1a      	ldr	r2, [r3, #32]
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	43db      	mvns	r3, r3
 80091f2:	401a      	ands	r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6a1a      	ldr	r2, [r3, #32]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f003 031f 	and.w	r3, r3, #31
 8009202:	6879      	ldr	r1, [r7, #4]
 8009204:	fa01 f303 	lsl.w	r3, r1, r3
 8009208:	431a      	orrs	r2, r3
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	621a      	str	r2, [r3, #32]
}
 800920e:	bf00      	nop
 8009210:	371c      	adds	r7, #28
 8009212:	46bd      	mov	sp, r7
 8009214:	bc80      	pop	{r7}
 8009216:	4770      	bx	lr

08009218 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009228:	2b01      	cmp	r3, #1
 800922a:	d101      	bne.n	8009230 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800922c:	2302      	movs	r3, #2
 800922e:	e050      	b.n	80092d2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2201      	movs	r2, #1
 8009234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2202      	movs	r2, #2
 800923c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009256:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	4313      	orrs	r3, r2
 8009260:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a1b      	ldr	r2, [pc, #108]	; (80092dc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009270:	4293      	cmp	r3, r2
 8009272:	d018      	beq.n	80092a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a19      	ldr	r2, [pc, #100]	; (80092e0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d013      	beq.n	80092a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009286:	d00e      	beq.n	80092a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a15      	ldr	r2, [pc, #84]	; (80092e4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d009      	beq.n	80092a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a14      	ldr	r2, [pc, #80]	; (80092e8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d004      	beq.n	80092a6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a12      	ldr	r2, [pc, #72]	; (80092ec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d10c      	bne.n	80092c0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2201      	movs	r2, #1
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2200      	movs	r2, #0
 80092cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bc80      	pop	{r7}
 80092da:	4770      	bx	lr
 80092dc:	40012c00 	.word	0x40012c00
 80092e0:	40013400 	.word	0x40013400
 80092e4:	40000400 	.word	0x40000400
 80092e8:	40000800 	.word	0x40000800
 80092ec:	40000c00 	.word	0x40000c00

080092f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b085      	sub	sp, #20
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80092fa:	2300      	movs	r3, #0
 80092fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009304:	2b01      	cmp	r3, #1
 8009306:	d101      	bne.n	800930c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009308:	2302      	movs	r3, #2
 800930a:	e03d      	b.n	8009388 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2201      	movs	r2, #1
 8009310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	4313      	orrs	r3, r2
 8009320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	4313      	orrs	r3, r2
 800932e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	4313      	orrs	r3, r2
 800933c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4313      	orrs	r3, r2
 800934a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	691b      	ldr	r3, [r3, #16]
 8009356:	4313      	orrs	r3, r2
 8009358:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	695b      	ldr	r3, [r3, #20]
 8009364:	4313      	orrs	r3, r2
 8009366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	69db      	ldr	r3, [r3, #28]
 8009372:	4313      	orrs	r3, r2
 8009374:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009386:	2300      	movs	r3, #0
}
 8009388:	4618      	mov	r0, r3
 800938a:	3714      	adds	r7, #20
 800938c:	46bd      	mov	sp, r7
 800938e:	bc80      	pop	{r7}
 8009390:	4770      	bx	lr

08009392 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	bc80      	pop	{r7}
 80093a2:	4770      	bx	lr

080093a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bc80      	pop	{r7}
 80093b4:	4770      	bx	lr

080093b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80093b6:	b580      	push	{r7, lr}
 80093b8:	b082      	sub	sp, #8
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d101      	bne.n	80093c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e03f      	b.n	8009448 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d106      	bne.n	80093e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	2200      	movs	r2, #0
 80093d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f7fc fa75 	bl	80058cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2224      	movs	r2, #36	; 0x24
 80093e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	68da      	ldr	r2, [r3, #12]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80093f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fdde 	bl	8009fbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	691a      	ldr	r2, [r3, #16]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800940e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	695a      	ldr	r2, [r3, #20]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800941e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	68da      	ldr	r2, [r3, #12]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800942e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2220      	movs	r2, #32
 800943a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2220      	movs	r2, #32
 8009442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3708      	adds	r7, #8
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b08a      	sub	sp, #40	; 0x28
 8009454:	af02      	add	r7, sp, #8
 8009456:	60f8      	str	r0, [r7, #12]
 8009458:	60b9      	str	r1, [r7, #8]
 800945a:	603b      	str	r3, [r7, #0]
 800945c:	4613      	mov	r3, r2
 800945e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009460:	2300      	movs	r3, #0
 8009462:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b20      	cmp	r3, #32
 800946e:	d17c      	bne.n	800956a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <HAL_UART_Transmit+0x2c>
 8009476:	88fb      	ldrh	r3, [r7, #6]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800947c:	2301      	movs	r3, #1
 800947e:	e075      	b.n	800956c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009486:	2b01      	cmp	r3, #1
 8009488:	d101      	bne.n	800948e <HAL_UART_Transmit+0x3e>
 800948a:	2302      	movs	r3, #2
 800948c:	e06e      	b.n	800956c <HAL_UART_Transmit+0x11c>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2200      	movs	r2, #0
 800949a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2221      	movs	r2, #33	; 0x21
 80094a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80094a4:	f7fc fe4e 	bl	8006144 <HAL_GetTick>
 80094a8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	88fa      	ldrh	r2, [r7, #6]
 80094ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	88fa      	ldrh	r2, [r7, #6]
 80094b4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094be:	d108      	bne.n	80094d2 <HAL_UART_Transmit+0x82>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d104      	bne.n	80094d2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80094c8:	2300      	movs	r3, #0
 80094ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	61bb      	str	r3, [r7, #24]
 80094d0:	e003      	b.n	80094da <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80094d6:	2300      	movs	r3, #0
 80094d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80094e2:	e02a      	b.n	800953a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	2200      	movs	r2, #0
 80094ec:	2180      	movs	r1, #128	; 0x80
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 fb17 	bl	8009b22 <UART_WaitOnFlagUntilTimeout>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80094fa:	2303      	movs	r3, #3
 80094fc:	e036      	b.n	800956c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d10b      	bne.n	800951c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	881b      	ldrh	r3, [r3, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009512:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	3302      	adds	r3, #2
 8009518:	61bb      	str	r3, [r7, #24]
 800951a:	e007      	b.n	800952c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	781a      	ldrb	r2, [r3, #0]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009526:	69fb      	ldr	r3, [r7, #28]
 8009528:	3301      	adds	r3, #1
 800952a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009530:	b29b      	uxth	r3, r3
 8009532:	3b01      	subs	r3, #1
 8009534:	b29a      	uxth	r2, r3
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800953e:	b29b      	uxth	r3, r3
 8009540:	2b00      	cmp	r3, #0
 8009542:	d1cf      	bne.n	80094e4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	697b      	ldr	r3, [r7, #20]
 800954a:	2200      	movs	r2, #0
 800954c:	2140      	movs	r1, #64	; 0x40
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f000 fae7 	bl	8009b22 <UART_WaitOnFlagUntilTimeout>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d001      	beq.n	800955e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800955a:	2303      	movs	r3, #3
 800955c:	e006      	b.n	800956c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2220      	movs	r2, #32
 8009562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009566:	2300      	movs	r3, #0
 8009568:	e000      	b.n	800956c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800956a:	2302      	movs	r3, #2
  }
}
 800956c:	4618      	mov	r0, r3
 800956e:	3720      	adds	r7, #32
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	60f8      	str	r0, [r7, #12]
 800957c:	60b9      	str	r1, [r7, #8]
 800957e:	4613      	mov	r3, r2
 8009580:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009588:	b2db      	uxtb	r3, r3
 800958a:	2b20      	cmp	r3, #32
 800958c:	d11d      	bne.n	80095ca <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d002      	beq.n	800959a <HAL_UART_Receive_IT+0x26>
 8009594:	88fb      	ldrh	r3, [r7, #6]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
 800959c:	e016      	b.n	80095cc <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d101      	bne.n	80095ac <HAL_UART_Receive_IT+0x38>
 80095a8:	2302      	movs	r3, #2
 80095aa:	e00f      	b.n	80095cc <HAL_UART_Receive_IT+0x58>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2200      	movs	r2, #0
 80095b8:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80095ba:	88fb      	ldrh	r3, [r7, #6]
 80095bc:	461a      	mov	r2, r3
 80095be:	68b9      	ldr	r1, [r7, #8]
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 faf8 	bl	8009bb6 <UART_Start_Receive_IT>
 80095c6:	4603      	mov	r3, r0
 80095c8:	e000      	b.n	80095cc <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80095ca:	2302      	movs	r3, #2
  }
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	4613      	mov	r3, r2
 80095e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b20      	cmp	r3, #32
 80095ec:	d11d      	bne.n	800962a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <HAL_UART_Receive_DMA+0x26>
 80095f4:	88fb      	ldrh	r3, [r7, #6]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e016      	b.n	800962c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009604:	2b01      	cmp	r3, #1
 8009606:	d101      	bne.n	800960c <HAL_UART_Receive_DMA+0x38>
 8009608:	2302      	movs	r3, #2
 800960a:	e00f      	b.n	800962c <HAL_UART_Receive_DMA+0x58>
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2201      	movs	r2, #1
 8009610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800961a:	88fb      	ldrh	r3, [r7, #6]
 800961c:	461a      	mov	r2, r3
 800961e:	68b9      	ldr	r1, [r7, #8]
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f000 fb01 	bl	8009c28 <UART_Start_Receive_DMA>
 8009626:	4603      	mov	r3, r0
 8009628:	e000      	b.n	800962c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800962a:	2302      	movs	r3, #2
  }
}
 800962c:	4618      	mov	r0, r3
 800962e:	3710      	adds	r7, #16
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b08a      	sub	sp, #40	; 0x28
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	695b      	ldr	r3, [r3, #20]
 8009652:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8009654:	2300      	movs	r3, #0
 8009656:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8009658:	2300      	movs	r3, #0
 800965a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	f003 030f 	and.w	r3, r3, #15
 8009662:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d10d      	bne.n	8009686 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800966a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966c:	f003 0320 	and.w	r3, r3, #32
 8009670:	2b00      	cmp	r3, #0
 8009672:	d008      	beq.n	8009686 <HAL_UART_IRQHandler+0x52>
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	f003 0320 	and.w	r3, r3, #32
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 fbf2 	bl	8009e68 <UART_Receive_IT>
      return;
 8009684:	e17b      	b.n	800997e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	2b00      	cmp	r3, #0
 800968a:	f000 80b1 	beq.w	80097f0 <HAL_UART_IRQHandler+0x1bc>
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d105      	bne.n	80096a4 <HAL_UART_IRQHandler+0x70>
 8009698:	6a3b      	ldr	r3, [r7, #32]
 800969a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800969e:	2b00      	cmp	r3, #0
 80096a0:	f000 80a6 	beq.w	80097f0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80096a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00a      	beq.n	80096c4 <HAL_UART_IRQHandler+0x90>
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d005      	beq.n	80096c4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096bc:	f043 0201 	orr.w	r2, r3, #1
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c6:	f003 0304 	and.w	r3, r3, #4
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00a      	beq.n	80096e4 <HAL_UART_IRQHandler+0xb0>
 80096ce:	69fb      	ldr	r3, [r7, #28]
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d005      	beq.n	80096e4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096dc:	f043 0202 	orr.w	r2, r3, #2
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	f003 0302 	and.w	r3, r3, #2
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00a      	beq.n	8009704 <HAL_UART_IRQHandler+0xd0>
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	f003 0301 	and.w	r3, r3, #1
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d005      	beq.n	8009704 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fc:	f043 0204 	orr.w	r2, r3, #4
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009706:	f003 0308 	and.w	r3, r3, #8
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00f      	beq.n	800972e <HAL_UART_IRQHandler+0xfa>
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	f003 0320 	and.w	r3, r3, #32
 8009714:	2b00      	cmp	r3, #0
 8009716:	d104      	bne.n	8009722 <HAL_UART_IRQHandler+0xee>
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	2b00      	cmp	r3, #0
 8009720:	d005      	beq.n	800972e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009726:	f043 0208 	orr.w	r2, r3, #8
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009732:	2b00      	cmp	r3, #0
 8009734:	f000 811e 	beq.w	8009974 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973a:	f003 0320 	and.w	r3, r3, #32
 800973e:	2b00      	cmp	r3, #0
 8009740:	d007      	beq.n	8009752 <HAL_UART_IRQHandler+0x11e>
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	f003 0320 	and.w	r3, r3, #32
 8009748:	2b00      	cmp	r3, #0
 800974a:	d002      	beq.n	8009752 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fb8b 	bl	8009e68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	695b      	ldr	r3, [r3, #20]
 8009758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975c:	2b00      	cmp	r3, #0
 800975e:	bf14      	ite	ne
 8009760:	2301      	movne	r3, #1
 8009762:	2300      	moveq	r3, #0
 8009764:	b2db      	uxtb	r3, r3
 8009766:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976c:	f003 0308 	and.w	r3, r3, #8
 8009770:	2b00      	cmp	r3, #0
 8009772:	d102      	bne.n	800977a <HAL_UART_IRQHandler+0x146>
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d031      	beq.n	80097de <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 facd 	bl	8009d1a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	695b      	ldr	r3, [r3, #20]
 8009786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800978a:	2b00      	cmp	r3, #0
 800978c:	d023      	beq.n	80097d6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	695a      	ldr	r2, [r3, #20]
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800979c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d013      	beq.n	80097ce <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097aa:	4a76      	ldr	r2, [pc, #472]	; (8009984 <HAL_UART_IRQHandler+0x350>)
 80097ac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7fc ff12 	bl	80065dc <HAL_DMA_Abort_IT>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d016      	beq.n	80097ec <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80097c8:	4610      	mov	r0, r2
 80097ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097cc:	e00e      	b.n	80097ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7fa ff24 	bl	800461c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d4:	e00a      	b.n	80097ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7fa ff20 	bl	800461c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097dc:	e006      	b.n	80097ec <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f7fa ff1c 	bl	800461c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80097ea:	e0c3      	b.n	8009974 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097ec:	bf00      	nop
    return;
 80097ee:	e0c1      	b.n	8009974 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	f040 80a1 	bne.w	800993c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	f003 0310 	and.w	r3, r3, #16
 8009800:	2b00      	cmp	r3, #0
 8009802:	f000 809b 	beq.w	800993c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8009806:	6a3b      	ldr	r3, [r7, #32]
 8009808:	f003 0310 	and.w	r3, r3, #16
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 8095 	beq.w	800993c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009812:	2300      	movs	r3, #0
 8009814:	60fb      	str	r3, [r7, #12]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	60fb      	str	r3, [r7, #12]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	60fb      	str	r3, [r7, #12]
 8009826:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009832:	2b00      	cmp	r3, #0
 8009834:	d04e      	beq.n	80098d4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8009840:	8a3b      	ldrh	r3, [r7, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 8098 	beq.w	8009978 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800984c:	8a3a      	ldrh	r2, [r7, #16]
 800984e:	429a      	cmp	r2, r3
 8009850:	f080 8092 	bcs.w	8009978 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	8a3a      	ldrh	r2, [r7, #16]
 8009858:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985e:	699b      	ldr	r3, [r3, #24]
 8009860:	2b20      	cmp	r3, #32
 8009862:	d02b      	beq.n	80098bc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009872:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	695a      	ldr	r2, [r3, #20]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 0201 	bic.w	r2, r2, #1
 8009882:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	695a      	ldr	r2, [r3, #20]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009892:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2220      	movs	r2, #32
 8009898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68da      	ldr	r2, [r3, #12]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f022 0210 	bic.w	r2, r2, #16
 80098b0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7fc fe55 	bl	8006566 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	1ad3      	subs	r3, r2, r3
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	4619      	mov	r1, r3
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f86d 	bl	80099ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80098d2:	e051      	b.n	8009978 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098dc:	b29b      	uxth	r3, r3
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d047      	beq.n	800997c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80098ec:	8a7b      	ldrh	r3, [r7, #18]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d044      	beq.n	800997c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68da      	ldr	r2, [r3, #12]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009900:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	695a      	ldr	r2, [r3, #20]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f022 0201 	bic.w	r2, r2, #1
 8009910:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2220      	movs	r2, #32
 8009916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68da      	ldr	r2, [r3, #12]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f022 0210 	bic.w	r2, r2, #16
 800992e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009930:	8a7b      	ldrh	r3, [r7, #18]
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f839 	bl	80099ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800993a:	e01f      	b.n	800997c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800993c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009942:	2b00      	cmp	r3, #0
 8009944:	d008      	beq.n	8009958 <HAL_UART_IRQHandler+0x324>
 8009946:	6a3b      	ldr	r3, [r7, #32]
 8009948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994c:	2b00      	cmp	r3, #0
 800994e:	d003      	beq.n	8009958 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8009950:	6878      	ldr	r0, [r7, #4]
 8009952:	f000 fa22 	bl	8009d9a <UART_Transmit_IT>
    return;
 8009956:	e012      	b.n	800997e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00d      	beq.n	800997e <HAL_UART_IRQHandler+0x34a>
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009968:	2b00      	cmp	r3, #0
 800996a:	d008      	beq.n	800997e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fa63 	bl	8009e38 <UART_EndTransmit_IT>
    return;
 8009972:	e004      	b.n	800997e <HAL_UART_IRQHandler+0x34a>
    return;
 8009974:	bf00      	nop
 8009976:	e002      	b.n	800997e <HAL_UART_IRQHandler+0x34a>
      return;
 8009978:	bf00      	nop
 800997a:	e000      	b.n	800997e <HAL_UART_IRQHandler+0x34a>
      return;
 800997c:	bf00      	nop
  }
}
 800997e:	3728      	adds	r7, #40	; 0x28
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	08009d73 	.word	0x08009d73

08009988 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009988:	b480      	push	{r7}
 800998a:	b083      	sub	sp, #12
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009990:	bf00      	nop
 8009992:	370c      	adds	r7, #12
 8009994:	46bd      	mov	sp, r7
 8009996:	bc80      	pop	{r7}
 8009998:	4770      	bx	lr

0800999a <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800999a:	b480      	push	{r7}
 800999c:	b083      	sub	sp, #12
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80099a2:	bf00      	nop
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bc80      	pop	{r7}
 80099aa:	4770      	bx	lr

080099ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	460b      	mov	r3, r1
 80099b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80099b8:	bf00      	nop
 80099ba:	370c      	adds	r7, #12
 80099bc:	46bd      	mov	sp, r7
 80099be:	bc80      	pop	{r7}
 80099c0:	4770      	bx	lr

080099c2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b084      	sub	sp, #16
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ce:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f003 0320 	and.w	r3, r3, #32
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d12a      	bne.n	8009a34 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2200      	movs	r2, #0
 80099e2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68da      	ldr	r2, [r3, #12]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80099f2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	695a      	ldr	r2, [r3, #20]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f022 0201 	bic.w	r2, r2, #1
 8009a02:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	695a      	ldr	r2, [r3, #20]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a12:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2220      	movs	r2, #32
 8009a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d107      	bne.n	8009a34 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68da      	ldr	r2, [r3, #12]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f022 0210 	bic.w	r2, r2, #16
 8009a32:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d106      	bne.n	8009a4a <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a40:	4619      	mov	r1, r3
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	f7ff ffb2 	bl	80099ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a48:	e002      	b.n	8009a50 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8009a4a:	68f8      	ldr	r0, [r7, #12]
 8009a4c:	f7fa fdb6 	bl	80045bc <HAL_UART_RxCpltCallback>
}
 8009a50:	bf00      	nop
 8009a52:	3710      	adds	r7, #16
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d108      	bne.n	8009a80 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009a72:	085b      	lsrs	r3, r3, #1
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	4619      	mov	r1, r3
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f7ff ff97 	bl	80099ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a7e:	e002      	b.n	8009a86 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	f7ff ff8a 	bl	800999a <HAL_UART_RxHalfCpltCallback>
}
 8009a86:	bf00      	nop
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b084      	sub	sp, #16
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009a96:	2300      	movs	r3, #0
 8009a98:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	bf14      	ite	ne
 8009aae:	2301      	movne	r3, #1
 8009ab0:	2300      	moveq	r3, #0
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b21      	cmp	r3, #33	; 0x21
 8009ac0:	d108      	bne.n	8009ad4 <UART_DMAError+0x46>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d005      	beq.n	8009ad4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	2200      	movs	r2, #0
 8009acc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8009ace:	68b8      	ldr	r0, [r7, #8]
 8009ad0:	f000 f90e 	bl	8009cf0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	695b      	ldr	r3, [r3, #20]
 8009ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	bf14      	ite	ne
 8009ae2:	2301      	movne	r3, #1
 8009ae4:	2300      	moveq	r3, #0
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	2b22      	cmp	r3, #34	; 0x22
 8009af4:	d108      	bne.n	8009b08 <UART_DMAError+0x7a>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d005      	beq.n	8009b08 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	2200      	movs	r2, #0
 8009b00:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009b02:	68b8      	ldr	r0, [r7, #8]
 8009b04:	f000 f909 	bl	8009d1a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0c:	f043 0210 	orr.w	r2, r3, #16
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b14:	68b8      	ldr	r0, [r7, #8]
 8009b16:	f7fa fd81 	bl	800461c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b1a:	bf00      	nop
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b084      	sub	sp, #16
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	60f8      	str	r0, [r7, #12]
 8009b2a:	60b9      	str	r1, [r7, #8]
 8009b2c:	603b      	str	r3, [r7, #0]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b32:	e02c      	b.n	8009b8e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b34:	69bb      	ldr	r3, [r7, #24]
 8009b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3a:	d028      	beq.n	8009b8e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d007      	beq.n	8009b52 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b42:	f7fc faff 	bl	8006144 <HAL_GetTick>
 8009b46:	4602      	mov	r2, r0
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	1ad3      	subs	r3, r2, r3
 8009b4c:	69ba      	ldr	r2, [r7, #24]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	d21d      	bcs.n	8009b8e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009b60:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	695a      	ldr	r2, [r3, #20]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f022 0201 	bic.w	r2, r2, #1
 8009b70:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2220      	movs	r2, #32
 8009b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2220      	movs	r2, #32
 8009b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e00f      	b.n	8009bae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	4013      	ands	r3, r2
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	429a      	cmp	r2, r3
 8009b9c:	bf0c      	ite	eq
 8009b9e:	2301      	moveq	r3, #1
 8009ba0:	2300      	movne	r3, #0
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	79fb      	ldrb	r3, [r7, #7]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d0c3      	beq.n	8009b34 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009bb6:	b480      	push	{r7}
 8009bb8:	b085      	sub	sp, #20
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	60f8      	str	r0, [r7, #12]
 8009bbe:	60b9      	str	r1, [r7, #8]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	88fa      	ldrh	r2, [r7, #6]
 8009bce:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	88fa      	ldrh	r2, [r7, #6]
 8009bd4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	2222      	movs	r2, #34	; 0x22
 8009be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2200      	movs	r2, #0
 8009be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	68da      	ldr	r2, [r3, #12]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bfa:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	695a      	ldr	r2, [r3, #20]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f042 0201 	orr.w	r2, r2, #1
 8009c0a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	68da      	ldr	r2, [r3, #12]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f042 0220 	orr.w	r2, r2, #32
 8009c1a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3714      	adds	r7, #20
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bc80      	pop	{r7}
 8009c26:	4770      	bx	lr

08009c28 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	4613      	mov	r3, r2
 8009c34:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	88fa      	ldrh	r2, [r7, #6]
 8009c40:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2200      	movs	r2, #0
 8009c46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2222      	movs	r2, #34	; 0x22
 8009c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c54:	4a23      	ldr	r2, [pc, #140]	; (8009ce4 <UART_Start_Receive_DMA+0xbc>)
 8009c56:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c5c:	4a22      	ldr	r2, [pc, #136]	; (8009ce8 <UART_Start_Receive_DMA+0xc0>)
 8009c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c64:	4a21      	ldr	r2, [pc, #132]	; (8009cec <UART_Start_Receive_DMA+0xc4>)
 8009c66:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009c70:	f107 0308 	add.w	r3, r7, #8
 8009c74:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	3304      	adds	r3, #4
 8009c80:	4619      	mov	r1, r3
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	88fb      	ldrh	r3, [r7, #6]
 8009c88:	f7fc fc0e 	bl	80064a8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	613b      	str	r3, [r7, #16]
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	613b      	str	r3, [r7, #16]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	613b      	str	r3, [r7, #16]
 8009ca0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	68da      	ldr	r2, [r3, #12]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cb8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	695a      	ldr	r2, [r3, #20]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f042 0201 	orr.w	r2, r2, #1
 8009cc8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	695a      	ldr	r2, [r3, #20]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009cd8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3718      	adds	r7, #24
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	080099c3 	.word	0x080099c3
 8009ce8:	08009a59 	.word	0x08009a59
 8009cec:	08009a8f 	.word	0x08009a8f

08009cf0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	68da      	ldr	r2, [r3, #12]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009d06:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009d10:	bf00      	nop
 8009d12:	370c      	adds	r7, #12
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bc80      	pop	{r7}
 8009d18:	4770      	bx	lr

08009d1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68da      	ldr	r2, [r3, #12]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009d30:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	695a      	ldr	r2, [r3, #20]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f022 0201 	bic.w	r2, r2, #1
 8009d40:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d107      	bne.n	8009d5a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68da      	ldr	r2, [r3, #12]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f022 0210 	bic.w	r2, r2, #16
 8009d58:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2220      	movs	r2, #32
 8009d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2200      	movs	r2, #0
 8009d66:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bc80      	pop	{r7}
 8009d70:	4770      	bx	lr

08009d72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d72:	b580      	push	{r7, lr}
 8009d74:	b084      	sub	sp, #16
 8009d76:	af00      	add	r7, sp, #0
 8009d78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	2200      	movs	r2, #0
 8009d84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f7fa fc45 	bl	800461c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d92:	bf00      	nop
 8009d94:	3710      	adds	r7, #16
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009d9a:	b480      	push	{r7}
 8009d9c:	b085      	sub	sp, #20
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b21      	cmp	r3, #33	; 0x21
 8009dac:	d13e      	bne.n	8009e2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	689b      	ldr	r3, [r3, #8]
 8009db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009db6:	d114      	bne.n	8009de2 <UART_Transmit_IT+0x48>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d110      	bne.n	8009de2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6a1b      	ldr	r3, [r3, #32]
 8009dc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	461a      	mov	r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dd4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6a1b      	ldr	r3, [r3, #32]
 8009dda:	1c9a      	adds	r2, r3, #2
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	621a      	str	r2, [r3, #32]
 8009de0:	e008      	b.n	8009df4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6a1b      	ldr	r3, [r3, #32]
 8009de6:	1c59      	adds	r1, r3, #1
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	6211      	str	r1, [r2, #32]
 8009dec:	781a      	ldrb	r2, [r3, #0]
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	3b01      	subs	r3, #1
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	687a      	ldr	r2, [r7, #4]
 8009e00:	4619      	mov	r1, r3
 8009e02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10f      	bne.n	8009e28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	68da      	ldr	r2, [r3, #12]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009e16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68da      	ldr	r2, [r3, #12]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009e26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	e000      	b.n	8009e2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009e2c:	2302      	movs	r3, #2
  }
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bc80      	pop	{r7}
 8009e36:	4770      	bx	lr

08009e38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68da      	ldr	r2, [r3, #12]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009e4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2220      	movs	r2, #32
 8009e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7ff fd95 	bl	8009988 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b22      	cmp	r3, #34	; 0x22
 8009e7a:	f040 8099 	bne.w	8009fb0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	689b      	ldr	r3, [r3, #8]
 8009e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e86:	d117      	bne.n	8009eb8 <UART_Receive_IT+0x50>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d113      	bne.n	8009eb8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e98:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb0:	1c9a      	adds	r2, r3, #2
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	629a      	str	r2, [r3, #40]	; 0x28
 8009eb6:	e026      	b.n	8009f06 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ebc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009eca:	d007      	beq.n	8009edc <UART_Receive_IT+0x74>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10a      	bne.n	8009eea <UART_Receive_IT+0x82>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d106      	bne.n	8009eea <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	685b      	ldr	r3, [r3, #4]
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	701a      	strb	r2, [r3, #0]
 8009ee8:	e008      	b.n	8009efc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ef6:	b2da      	uxtb	r2, r3
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f00:	1c5a      	adds	r2, r3, #1
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	3b01      	subs	r3, #1
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	4619      	mov	r1, r3
 8009f14:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d148      	bne.n	8009fac <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f022 0220 	bic.w	r2, r2, #32
 8009f28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68da      	ldr	r2, [r3, #12]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f38:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	695a      	ldr	r2, [r3, #20]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f022 0201 	bic.w	r2, r2, #1
 8009f48:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2220      	movs	r2, #32
 8009f4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d123      	bne.n	8009fa2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	68da      	ldr	r2, [r3, #12]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f022 0210 	bic.w	r2, r2, #16
 8009f6e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 0310 	and.w	r3, r3, #16
 8009f7a:	2b10      	cmp	r3, #16
 8009f7c:	d10a      	bne.n	8009f94 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60fb      	str	r3, [r7, #12]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	60fb      	str	r3, [r7, #12]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	60fb      	str	r3, [r7, #12]
 8009f92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009f98:	4619      	mov	r1, r3
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f7ff fd06 	bl	80099ac <HAL_UARTEx_RxEventCallback>
 8009fa0:	e002      	b.n	8009fa8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7fa fb0a 	bl	80045bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	e002      	b.n	8009fb2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8009fac:	2300      	movs	r3, #0
 8009fae:	e000      	b.n	8009fb2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8009fb0:	2302      	movs	r3, #2
  }
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3718      	adds	r7, #24
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	68da      	ldr	r2, [r3, #12]
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	689a      	ldr	r2, [r3, #8]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	431a      	orrs	r2, r3
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	695b      	ldr	r3, [r3, #20]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009ff6:	f023 030c 	bic.w	r3, r3, #12
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	6812      	ldr	r2, [r2, #0]
 8009ffe:	68b9      	ldr	r1, [r7, #8]
 800a000:	430b      	orrs	r3, r1
 800a002:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	695b      	ldr	r3, [r3, #20]
 800a00a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	699a      	ldr	r2, [r3, #24]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	430a      	orrs	r2, r1
 800a018:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a2c      	ldr	r2, [pc, #176]	; (800a0d0 <UART_SetConfig+0x114>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d103      	bne.n	800a02c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a024:	f7fe f83c 	bl	80080a0 <HAL_RCC_GetPCLK2Freq>
 800a028:	60f8      	str	r0, [r7, #12]
 800a02a:	e002      	b.n	800a032 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a02c:	f7fe f824 	bl	8008078 <HAL_RCC_GetPCLK1Freq>
 800a030:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	4613      	mov	r3, r2
 800a036:	009b      	lsls	r3, r3, #2
 800a038:	4413      	add	r3, r2
 800a03a:	009a      	lsls	r2, r3, #2
 800a03c:	441a      	add	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	fbb2 f3f3 	udiv	r3, r2, r3
 800a048:	4a22      	ldr	r2, [pc, #136]	; (800a0d4 <UART_SetConfig+0x118>)
 800a04a:	fba2 2303 	umull	r2, r3, r2, r3
 800a04e:	095b      	lsrs	r3, r3, #5
 800a050:	0119      	lsls	r1, r3, #4
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	4613      	mov	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	009a      	lsls	r2, r3, #2
 800a05c:	441a      	add	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	fbb2 f2f3 	udiv	r2, r2, r3
 800a068:	4b1a      	ldr	r3, [pc, #104]	; (800a0d4 <UART_SetConfig+0x118>)
 800a06a:	fba3 0302 	umull	r0, r3, r3, r2
 800a06e:	095b      	lsrs	r3, r3, #5
 800a070:	2064      	movs	r0, #100	; 0x64
 800a072:	fb00 f303 	mul.w	r3, r0, r3
 800a076:	1ad3      	subs	r3, r2, r3
 800a078:	011b      	lsls	r3, r3, #4
 800a07a:	3332      	adds	r3, #50	; 0x32
 800a07c:	4a15      	ldr	r2, [pc, #84]	; (800a0d4 <UART_SetConfig+0x118>)
 800a07e:	fba2 2303 	umull	r2, r3, r2, r3
 800a082:	095b      	lsrs	r3, r3, #5
 800a084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a088:	4419      	add	r1, r3
 800a08a:	68fa      	ldr	r2, [r7, #12]
 800a08c:	4613      	mov	r3, r2
 800a08e:	009b      	lsls	r3, r3, #2
 800a090:	4413      	add	r3, r2
 800a092:	009a      	lsls	r2, r3, #2
 800a094:	441a      	add	r2, r3
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0a0:	4b0c      	ldr	r3, [pc, #48]	; (800a0d4 <UART_SetConfig+0x118>)
 800a0a2:	fba3 0302 	umull	r0, r3, r3, r2
 800a0a6:	095b      	lsrs	r3, r3, #5
 800a0a8:	2064      	movs	r0, #100	; 0x64
 800a0aa:	fb00 f303 	mul.w	r3, r0, r3
 800a0ae:	1ad3      	subs	r3, r2, r3
 800a0b0:	011b      	lsls	r3, r3, #4
 800a0b2:	3332      	adds	r3, #50	; 0x32
 800a0b4:	4a07      	ldr	r2, [pc, #28]	; (800a0d4 <UART_SetConfig+0x118>)
 800a0b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ba:	095b      	lsrs	r3, r3, #5
 800a0bc:	f003 020f 	and.w	r2, r3, #15
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	440a      	add	r2, r1
 800a0c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800a0c8:	bf00      	nop
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	40013800 	.word	0x40013800
 800a0d4:	51eb851f 	.word	0x51eb851f

0800a0d8 <__assert_func>:
 800a0d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0da:	4614      	mov	r4, r2
 800a0dc:	461a      	mov	r2, r3
 800a0de:	4b09      	ldr	r3, [pc, #36]	; (800a104 <__assert_func+0x2c>)
 800a0e0:	4605      	mov	r5, r0
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	68d8      	ldr	r0, [r3, #12]
 800a0e6:	b14c      	cbz	r4, 800a0fc <__assert_func+0x24>
 800a0e8:	4b07      	ldr	r3, [pc, #28]	; (800a108 <__assert_func+0x30>)
 800a0ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0ee:	9100      	str	r1, [sp, #0]
 800a0f0:	462b      	mov	r3, r5
 800a0f2:	4906      	ldr	r1, [pc, #24]	; (800a10c <__assert_func+0x34>)
 800a0f4:	f000 f814 	bl	800a120 <fiprintf>
 800a0f8:	f000 fc2c 	bl	800a954 <abort>
 800a0fc:	4b04      	ldr	r3, [pc, #16]	; (800a110 <__assert_func+0x38>)
 800a0fe:	461c      	mov	r4, r3
 800a100:	e7f3      	b.n	800a0ea <__assert_func+0x12>
 800a102:	bf00      	nop
 800a104:	20000018 	.word	0x20000018
 800a108:	0800cf64 	.word	0x0800cf64
 800a10c:	0800cf71 	.word	0x0800cf71
 800a110:	0800cf9f 	.word	0x0800cf9f

0800a114 <__errno>:
 800a114:	4b01      	ldr	r3, [pc, #4]	; (800a11c <__errno+0x8>)
 800a116:	6818      	ldr	r0, [r3, #0]
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	20000018 	.word	0x20000018

0800a120 <fiprintf>:
 800a120:	b40e      	push	{r1, r2, r3}
 800a122:	b503      	push	{r0, r1, lr}
 800a124:	4601      	mov	r1, r0
 800a126:	ab03      	add	r3, sp, #12
 800a128:	4805      	ldr	r0, [pc, #20]	; (800a140 <fiprintf+0x20>)
 800a12a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a12e:	6800      	ldr	r0, [r0, #0]
 800a130:	9301      	str	r3, [sp, #4]
 800a132:	f000 f869 	bl	800a208 <_vfiprintf_r>
 800a136:	b002      	add	sp, #8
 800a138:	f85d eb04 	ldr.w	lr, [sp], #4
 800a13c:	b003      	add	sp, #12
 800a13e:	4770      	bx	lr
 800a140:	20000018 	.word	0x20000018

0800a144 <__libc_init_array>:
 800a144:	b570      	push	{r4, r5, r6, lr}
 800a146:	2600      	movs	r6, #0
 800a148:	4d0c      	ldr	r5, [pc, #48]	; (800a17c <__libc_init_array+0x38>)
 800a14a:	4c0d      	ldr	r4, [pc, #52]	; (800a180 <__libc_init_array+0x3c>)
 800a14c:	1b64      	subs	r4, r4, r5
 800a14e:	10a4      	asrs	r4, r4, #2
 800a150:	42a6      	cmp	r6, r4
 800a152:	d109      	bne.n	800a168 <__libc_init_array+0x24>
 800a154:	f002 fbb2 	bl	800c8bc <_init>
 800a158:	2600      	movs	r6, #0
 800a15a:	4d0a      	ldr	r5, [pc, #40]	; (800a184 <__libc_init_array+0x40>)
 800a15c:	4c0a      	ldr	r4, [pc, #40]	; (800a188 <__libc_init_array+0x44>)
 800a15e:	1b64      	subs	r4, r4, r5
 800a160:	10a4      	asrs	r4, r4, #2
 800a162:	42a6      	cmp	r6, r4
 800a164:	d105      	bne.n	800a172 <__libc_init_array+0x2e>
 800a166:	bd70      	pop	{r4, r5, r6, pc}
 800a168:	f855 3b04 	ldr.w	r3, [r5], #4
 800a16c:	4798      	blx	r3
 800a16e:	3601      	adds	r6, #1
 800a170:	e7ee      	b.n	800a150 <__libc_init_array+0xc>
 800a172:	f855 3b04 	ldr.w	r3, [r5], #4
 800a176:	4798      	blx	r3
 800a178:	3601      	adds	r6, #1
 800a17a:	e7f2      	b.n	800a162 <__libc_init_array+0x1e>
 800a17c:	0800d250 	.word	0x0800d250
 800a180:	0800d250 	.word	0x0800d250
 800a184:	0800d250 	.word	0x0800d250
 800a188:	0800d254 	.word	0x0800d254

0800a18c <memcpy>:
 800a18c:	440a      	add	r2, r1
 800a18e:	4291      	cmp	r1, r2
 800a190:	f100 33ff 	add.w	r3, r0, #4294967295
 800a194:	d100      	bne.n	800a198 <memcpy+0xc>
 800a196:	4770      	bx	lr
 800a198:	b510      	push	{r4, lr}
 800a19a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a19e:	4291      	cmp	r1, r2
 800a1a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1a4:	d1f9      	bne.n	800a19a <memcpy+0xe>
 800a1a6:	bd10      	pop	{r4, pc}

0800a1a8 <memset>:
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	4402      	add	r2, r0
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d100      	bne.n	800a1b2 <memset+0xa>
 800a1b0:	4770      	bx	lr
 800a1b2:	f803 1b01 	strb.w	r1, [r3], #1
 800a1b6:	e7f9      	b.n	800a1ac <memset+0x4>

0800a1b8 <__sfputc_r>:
 800a1b8:	6893      	ldr	r3, [r2, #8]
 800a1ba:	b410      	push	{r4}
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	6093      	str	r3, [r2, #8]
 800a1c2:	da07      	bge.n	800a1d4 <__sfputc_r+0x1c>
 800a1c4:	6994      	ldr	r4, [r2, #24]
 800a1c6:	42a3      	cmp	r3, r4
 800a1c8:	db01      	blt.n	800a1ce <__sfputc_r+0x16>
 800a1ca:	290a      	cmp	r1, #10
 800a1cc:	d102      	bne.n	800a1d4 <__sfputc_r+0x1c>
 800a1ce:	bc10      	pop	{r4}
 800a1d0:	f000 bb00 	b.w	800a7d4 <__swbuf_r>
 800a1d4:	6813      	ldr	r3, [r2, #0]
 800a1d6:	1c58      	adds	r0, r3, #1
 800a1d8:	6010      	str	r0, [r2, #0]
 800a1da:	7019      	strb	r1, [r3, #0]
 800a1dc:	4608      	mov	r0, r1
 800a1de:	bc10      	pop	{r4}
 800a1e0:	4770      	bx	lr

0800a1e2 <__sfputs_r>:
 800a1e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e4:	4606      	mov	r6, r0
 800a1e6:	460f      	mov	r7, r1
 800a1e8:	4614      	mov	r4, r2
 800a1ea:	18d5      	adds	r5, r2, r3
 800a1ec:	42ac      	cmp	r4, r5
 800a1ee:	d101      	bne.n	800a1f4 <__sfputs_r+0x12>
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	e007      	b.n	800a204 <__sfputs_r+0x22>
 800a1f4:	463a      	mov	r2, r7
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1fc:	f7ff ffdc 	bl	800a1b8 <__sfputc_r>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	d1f3      	bne.n	800a1ec <__sfputs_r+0xa>
 800a204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a208 <_vfiprintf_r>:
 800a208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20c:	460d      	mov	r5, r1
 800a20e:	4614      	mov	r4, r2
 800a210:	4698      	mov	r8, r3
 800a212:	4606      	mov	r6, r0
 800a214:	b09d      	sub	sp, #116	; 0x74
 800a216:	b118      	cbz	r0, 800a220 <_vfiprintf_r+0x18>
 800a218:	6983      	ldr	r3, [r0, #24]
 800a21a:	b90b      	cbnz	r3, 800a220 <_vfiprintf_r+0x18>
 800a21c:	f000 fcb8 	bl	800ab90 <__sinit>
 800a220:	4b89      	ldr	r3, [pc, #548]	; (800a448 <_vfiprintf_r+0x240>)
 800a222:	429d      	cmp	r5, r3
 800a224:	d11b      	bne.n	800a25e <_vfiprintf_r+0x56>
 800a226:	6875      	ldr	r5, [r6, #4]
 800a228:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a22a:	07d9      	lsls	r1, r3, #31
 800a22c:	d405      	bmi.n	800a23a <_vfiprintf_r+0x32>
 800a22e:	89ab      	ldrh	r3, [r5, #12]
 800a230:	059a      	lsls	r2, r3, #22
 800a232:	d402      	bmi.n	800a23a <_vfiprintf_r+0x32>
 800a234:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a236:	f000 fd49 	bl	800accc <__retarget_lock_acquire_recursive>
 800a23a:	89ab      	ldrh	r3, [r5, #12]
 800a23c:	071b      	lsls	r3, r3, #28
 800a23e:	d501      	bpl.n	800a244 <_vfiprintf_r+0x3c>
 800a240:	692b      	ldr	r3, [r5, #16]
 800a242:	b9eb      	cbnz	r3, 800a280 <_vfiprintf_r+0x78>
 800a244:	4629      	mov	r1, r5
 800a246:	4630      	mov	r0, r6
 800a248:	f000 fb16 	bl	800a878 <__swsetup_r>
 800a24c:	b1c0      	cbz	r0, 800a280 <_vfiprintf_r+0x78>
 800a24e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a250:	07dc      	lsls	r4, r3, #31
 800a252:	d50e      	bpl.n	800a272 <_vfiprintf_r+0x6a>
 800a254:	f04f 30ff 	mov.w	r0, #4294967295
 800a258:	b01d      	add	sp, #116	; 0x74
 800a25a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a25e:	4b7b      	ldr	r3, [pc, #492]	; (800a44c <_vfiprintf_r+0x244>)
 800a260:	429d      	cmp	r5, r3
 800a262:	d101      	bne.n	800a268 <_vfiprintf_r+0x60>
 800a264:	68b5      	ldr	r5, [r6, #8]
 800a266:	e7df      	b.n	800a228 <_vfiprintf_r+0x20>
 800a268:	4b79      	ldr	r3, [pc, #484]	; (800a450 <_vfiprintf_r+0x248>)
 800a26a:	429d      	cmp	r5, r3
 800a26c:	bf08      	it	eq
 800a26e:	68f5      	ldreq	r5, [r6, #12]
 800a270:	e7da      	b.n	800a228 <_vfiprintf_r+0x20>
 800a272:	89ab      	ldrh	r3, [r5, #12]
 800a274:	0598      	lsls	r0, r3, #22
 800a276:	d4ed      	bmi.n	800a254 <_vfiprintf_r+0x4c>
 800a278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a27a:	f000 fd28 	bl	800acce <__retarget_lock_release_recursive>
 800a27e:	e7e9      	b.n	800a254 <_vfiprintf_r+0x4c>
 800a280:	2300      	movs	r3, #0
 800a282:	9309      	str	r3, [sp, #36]	; 0x24
 800a284:	2320      	movs	r3, #32
 800a286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a28a:	2330      	movs	r3, #48	; 0x30
 800a28c:	f04f 0901 	mov.w	r9, #1
 800a290:	f8cd 800c 	str.w	r8, [sp, #12]
 800a294:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a454 <_vfiprintf_r+0x24c>
 800a298:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a29c:	4623      	mov	r3, r4
 800a29e:	469a      	mov	sl, r3
 800a2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2a4:	b10a      	cbz	r2, 800a2aa <_vfiprintf_r+0xa2>
 800a2a6:	2a25      	cmp	r2, #37	; 0x25
 800a2a8:	d1f9      	bne.n	800a29e <_vfiprintf_r+0x96>
 800a2aa:	ebba 0b04 	subs.w	fp, sl, r4
 800a2ae:	d00b      	beq.n	800a2c8 <_vfiprintf_r+0xc0>
 800a2b0:	465b      	mov	r3, fp
 800a2b2:	4622      	mov	r2, r4
 800a2b4:	4629      	mov	r1, r5
 800a2b6:	4630      	mov	r0, r6
 800a2b8:	f7ff ff93 	bl	800a1e2 <__sfputs_r>
 800a2bc:	3001      	adds	r0, #1
 800a2be:	f000 80aa 	beq.w	800a416 <_vfiprintf_r+0x20e>
 800a2c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2c4:	445a      	add	r2, fp
 800a2c6:	9209      	str	r2, [sp, #36]	; 0x24
 800a2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f000 80a2 	beq.w	800a416 <_vfiprintf_r+0x20e>
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2dc:	f10a 0a01 	add.w	sl, sl, #1
 800a2e0:	9304      	str	r3, [sp, #16]
 800a2e2:	9307      	str	r3, [sp, #28]
 800a2e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2e8:	931a      	str	r3, [sp, #104]	; 0x68
 800a2ea:	4654      	mov	r4, sl
 800a2ec:	2205      	movs	r2, #5
 800a2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f2:	4858      	ldr	r0, [pc, #352]	; (800a454 <_vfiprintf_r+0x24c>)
 800a2f4:	f000 fd52 	bl	800ad9c <memchr>
 800a2f8:	9a04      	ldr	r2, [sp, #16]
 800a2fa:	b9d8      	cbnz	r0, 800a334 <_vfiprintf_r+0x12c>
 800a2fc:	06d1      	lsls	r1, r2, #27
 800a2fe:	bf44      	itt	mi
 800a300:	2320      	movmi	r3, #32
 800a302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a306:	0713      	lsls	r3, r2, #28
 800a308:	bf44      	itt	mi
 800a30a:	232b      	movmi	r3, #43	; 0x2b
 800a30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a310:	f89a 3000 	ldrb.w	r3, [sl]
 800a314:	2b2a      	cmp	r3, #42	; 0x2a
 800a316:	d015      	beq.n	800a344 <_vfiprintf_r+0x13c>
 800a318:	4654      	mov	r4, sl
 800a31a:	2000      	movs	r0, #0
 800a31c:	f04f 0c0a 	mov.w	ip, #10
 800a320:	9a07      	ldr	r2, [sp, #28]
 800a322:	4621      	mov	r1, r4
 800a324:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a328:	3b30      	subs	r3, #48	; 0x30
 800a32a:	2b09      	cmp	r3, #9
 800a32c:	d94e      	bls.n	800a3cc <_vfiprintf_r+0x1c4>
 800a32e:	b1b0      	cbz	r0, 800a35e <_vfiprintf_r+0x156>
 800a330:	9207      	str	r2, [sp, #28]
 800a332:	e014      	b.n	800a35e <_vfiprintf_r+0x156>
 800a334:	eba0 0308 	sub.w	r3, r0, r8
 800a338:	fa09 f303 	lsl.w	r3, r9, r3
 800a33c:	4313      	orrs	r3, r2
 800a33e:	46a2      	mov	sl, r4
 800a340:	9304      	str	r3, [sp, #16]
 800a342:	e7d2      	b.n	800a2ea <_vfiprintf_r+0xe2>
 800a344:	9b03      	ldr	r3, [sp, #12]
 800a346:	1d19      	adds	r1, r3, #4
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	9103      	str	r1, [sp, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	bfbb      	ittet	lt
 800a350:	425b      	neglt	r3, r3
 800a352:	f042 0202 	orrlt.w	r2, r2, #2
 800a356:	9307      	strge	r3, [sp, #28]
 800a358:	9307      	strlt	r3, [sp, #28]
 800a35a:	bfb8      	it	lt
 800a35c:	9204      	strlt	r2, [sp, #16]
 800a35e:	7823      	ldrb	r3, [r4, #0]
 800a360:	2b2e      	cmp	r3, #46	; 0x2e
 800a362:	d10c      	bne.n	800a37e <_vfiprintf_r+0x176>
 800a364:	7863      	ldrb	r3, [r4, #1]
 800a366:	2b2a      	cmp	r3, #42	; 0x2a
 800a368:	d135      	bne.n	800a3d6 <_vfiprintf_r+0x1ce>
 800a36a:	9b03      	ldr	r3, [sp, #12]
 800a36c:	3402      	adds	r4, #2
 800a36e:	1d1a      	adds	r2, r3, #4
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	9203      	str	r2, [sp, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	bfb8      	it	lt
 800a378:	f04f 33ff 	movlt.w	r3, #4294967295
 800a37c:	9305      	str	r3, [sp, #20]
 800a37e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a458 <_vfiprintf_r+0x250>
 800a382:	2203      	movs	r2, #3
 800a384:	4650      	mov	r0, sl
 800a386:	7821      	ldrb	r1, [r4, #0]
 800a388:	f000 fd08 	bl	800ad9c <memchr>
 800a38c:	b140      	cbz	r0, 800a3a0 <_vfiprintf_r+0x198>
 800a38e:	2340      	movs	r3, #64	; 0x40
 800a390:	eba0 000a 	sub.w	r0, r0, sl
 800a394:	fa03 f000 	lsl.w	r0, r3, r0
 800a398:	9b04      	ldr	r3, [sp, #16]
 800a39a:	3401      	adds	r4, #1
 800a39c:	4303      	orrs	r3, r0
 800a39e:	9304      	str	r3, [sp, #16]
 800a3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a4:	2206      	movs	r2, #6
 800a3a6:	482d      	ldr	r0, [pc, #180]	; (800a45c <_vfiprintf_r+0x254>)
 800a3a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3ac:	f000 fcf6 	bl	800ad9c <memchr>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d03f      	beq.n	800a434 <_vfiprintf_r+0x22c>
 800a3b4:	4b2a      	ldr	r3, [pc, #168]	; (800a460 <_vfiprintf_r+0x258>)
 800a3b6:	bb1b      	cbnz	r3, 800a400 <_vfiprintf_r+0x1f8>
 800a3b8:	9b03      	ldr	r3, [sp, #12]
 800a3ba:	3307      	adds	r3, #7
 800a3bc:	f023 0307 	bic.w	r3, r3, #7
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	9303      	str	r3, [sp, #12]
 800a3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c6:	443b      	add	r3, r7
 800a3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ca:	e767      	b.n	800a29c <_vfiprintf_r+0x94>
 800a3cc:	460c      	mov	r4, r1
 800a3ce:	2001      	movs	r0, #1
 800a3d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3d4:	e7a5      	b.n	800a322 <_vfiprintf_r+0x11a>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f04f 0c0a 	mov.w	ip, #10
 800a3dc:	4619      	mov	r1, r3
 800a3de:	3401      	adds	r4, #1
 800a3e0:	9305      	str	r3, [sp, #20]
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3e8:	3a30      	subs	r2, #48	; 0x30
 800a3ea:	2a09      	cmp	r2, #9
 800a3ec:	d903      	bls.n	800a3f6 <_vfiprintf_r+0x1ee>
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0c5      	beq.n	800a37e <_vfiprintf_r+0x176>
 800a3f2:	9105      	str	r1, [sp, #20]
 800a3f4:	e7c3      	b.n	800a37e <_vfiprintf_r+0x176>
 800a3f6:	4604      	mov	r4, r0
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3fe:	e7f0      	b.n	800a3e2 <_vfiprintf_r+0x1da>
 800a400:	ab03      	add	r3, sp, #12
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	462a      	mov	r2, r5
 800a406:	4630      	mov	r0, r6
 800a408:	4b16      	ldr	r3, [pc, #88]	; (800a464 <_vfiprintf_r+0x25c>)
 800a40a:	a904      	add	r1, sp, #16
 800a40c:	f3af 8000 	nop.w
 800a410:	4607      	mov	r7, r0
 800a412:	1c78      	adds	r0, r7, #1
 800a414:	d1d6      	bne.n	800a3c4 <_vfiprintf_r+0x1bc>
 800a416:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a418:	07d9      	lsls	r1, r3, #31
 800a41a:	d405      	bmi.n	800a428 <_vfiprintf_r+0x220>
 800a41c:	89ab      	ldrh	r3, [r5, #12]
 800a41e:	059a      	lsls	r2, r3, #22
 800a420:	d402      	bmi.n	800a428 <_vfiprintf_r+0x220>
 800a422:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a424:	f000 fc53 	bl	800acce <__retarget_lock_release_recursive>
 800a428:	89ab      	ldrh	r3, [r5, #12]
 800a42a:	065b      	lsls	r3, r3, #25
 800a42c:	f53f af12 	bmi.w	800a254 <_vfiprintf_r+0x4c>
 800a430:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a432:	e711      	b.n	800a258 <_vfiprintf_r+0x50>
 800a434:	ab03      	add	r3, sp, #12
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	462a      	mov	r2, r5
 800a43a:	4630      	mov	r0, r6
 800a43c:	4b09      	ldr	r3, [pc, #36]	; (800a464 <_vfiprintf_r+0x25c>)
 800a43e:	a904      	add	r1, sp, #16
 800a440:	f000 f882 	bl	800a548 <_printf_i>
 800a444:	e7e4      	b.n	800a410 <_vfiprintf_r+0x208>
 800a446:	bf00      	nop
 800a448:	0800cff8 	.word	0x0800cff8
 800a44c:	0800d018 	.word	0x0800d018
 800a450:	0800cfd8 	.word	0x0800cfd8
 800a454:	0800cfa4 	.word	0x0800cfa4
 800a458:	0800cfaa 	.word	0x0800cfaa
 800a45c:	0800cfae 	.word	0x0800cfae
 800a460:	00000000 	.word	0x00000000
 800a464:	0800a1e3 	.word	0x0800a1e3

0800a468 <_printf_common>:
 800a468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a46c:	4616      	mov	r6, r2
 800a46e:	4699      	mov	r9, r3
 800a470:	688a      	ldr	r2, [r1, #8]
 800a472:	690b      	ldr	r3, [r1, #16]
 800a474:	4607      	mov	r7, r0
 800a476:	4293      	cmp	r3, r2
 800a478:	bfb8      	it	lt
 800a47a:	4613      	movlt	r3, r2
 800a47c:	6033      	str	r3, [r6, #0]
 800a47e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a482:	460c      	mov	r4, r1
 800a484:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a488:	b10a      	cbz	r2, 800a48e <_printf_common+0x26>
 800a48a:	3301      	adds	r3, #1
 800a48c:	6033      	str	r3, [r6, #0]
 800a48e:	6823      	ldr	r3, [r4, #0]
 800a490:	0699      	lsls	r1, r3, #26
 800a492:	bf42      	ittt	mi
 800a494:	6833      	ldrmi	r3, [r6, #0]
 800a496:	3302      	addmi	r3, #2
 800a498:	6033      	strmi	r3, [r6, #0]
 800a49a:	6825      	ldr	r5, [r4, #0]
 800a49c:	f015 0506 	ands.w	r5, r5, #6
 800a4a0:	d106      	bne.n	800a4b0 <_printf_common+0x48>
 800a4a2:	f104 0a19 	add.w	sl, r4, #25
 800a4a6:	68e3      	ldr	r3, [r4, #12]
 800a4a8:	6832      	ldr	r2, [r6, #0]
 800a4aa:	1a9b      	subs	r3, r3, r2
 800a4ac:	42ab      	cmp	r3, r5
 800a4ae:	dc28      	bgt.n	800a502 <_printf_common+0x9a>
 800a4b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4b4:	1e13      	subs	r3, r2, #0
 800a4b6:	6822      	ldr	r2, [r4, #0]
 800a4b8:	bf18      	it	ne
 800a4ba:	2301      	movne	r3, #1
 800a4bc:	0692      	lsls	r2, r2, #26
 800a4be:	d42d      	bmi.n	800a51c <_printf_common+0xb4>
 800a4c0:	4649      	mov	r1, r9
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4c8:	47c0      	blx	r8
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	d020      	beq.n	800a510 <_printf_common+0xa8>
 800a4ce:	6823      	ldr	r3, [r4, #0]
 800a4d0:	68e5      	ldr	r5, [r4, #12]
 800a4d2:	f003 0306 	and.w	r3, r3, #6
 800a4d6:	2b04      	cmp	r3, #4
 800a4d8:	bf18      	it	ne
 800a4da:	2500      	movne	r5, #0
 800a4dc:	6832      	ldr	r2, [r6, #0]
 800a4de:	f04f 0600 	mov.w	r6, #0
 800a4e2:	68a3      	ldr	r3, [r4, #8]
 800a4e4:	bf08      	it	eq
 800a4e6:	1aad      	subeq	r5, r5, r2
 800a4e8:	6922      	ldr	r2, [r4, #16]
 800a4ea:	bf08      	it	eq
 800a4ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	bfc4      	itt	gt
 800a4f4:	1a9b      	subgt	r3, r3, r2
 800a4f6:	18ed      	addgt	r5, r5, r3
 800a4f8:	341a      	adds	r4, #26
 800a4fa:	42b5      	cmp	r5, r6
 800a4fc:	d11a      	bne.n	800a534 <_printf_common+0xcc>
 800a4fe:	2000      	movs	r0, #0
 800a500:	e008      	b.n	800a514 <_printf_common+0xac>
 800a502:	2301      	movs	r3, #1
 800a504:	4652      	mov	r2, sl
 800a506:	4649      	mov	r1, r9
 800a508:	4638      	mov	r0, r7
 800a50a:	47c0      	blx	r8
 800a50c:	3001      	adds	r0, #1
 800a50e:	d103      	bne.n	800a518 <_printf_common+0xb0>
 800a510:	f04f 30ff 	mov.w	r0, #4294967295
 800a514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a518:	3501      	adds	r5, #1
 800a51a:	e7c4      	b.n	800a4a6 <_printf_common+0x3e>
 800a51c:	2030      	movs	r0, #48	; 0x30
 800a51e:	18e1      	adds	r1, r4, r3
 800a520:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a524:	1c5a      	adds	r2, r3, #1
 800a526:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a52a:	4422      	add	r2, r4
 800a52c:	3302      	adds	r3, #2
 800a52e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a532:	e7c5      	b.n	800a4c0 <_printf_common+0x58>
 800a534:	2301      	movs	r3, #1
 800a536:	4622      	mov	r2, r4
 800a538:	4649      	mov	r1, r9
 800a53a:	4638      	mov	r0, r7
 800a53c:	47c0      	blx	r8
 800a53e:	3001      	adds	r0, #1
 800a540:	d0e6      	beq.n	800a510 <_printf_common+0xa8>
 800a542:	3601      	adds	r6, #1
 800a544:	e7d9      	b.n	800a4fa <_printf_common+0x92>
	...

0800a548 <_printf_i>:
 800a548:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a54c:	7e0f      	ldrb	r7, [r1, #24]
 800a54e:	4691      	mov	r9, r2
 800a550:	2f78      	cmp	r7, #120	; 0x78
 800a552:	4680      	mov	r8, r0
 800a554:	460c      	mov	r4, r1
 800a556:	469a      	mov	sl, r3
 800a558:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a55a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a55e:	d807      	bhi.n	800a570 <_printf_i+0x28>
 800a560:	2f62      	cmp	r7, #98	; 0x62
 800a562:	d80a      	bhi.n	800a57a <_printf_i+0x32>
 800a564:	2f00      	cmp	r7, #0
 800a566:	f000 80d9 	beq.w	800a71c <_printf_i+0x1d4>
 800a56a:	2f58      	cmp	r7, #88	; 0x58
 800a56c:	f000 80a4 	beq.w	800a6b8 <_printf_i+0x170>
 800a570:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a574:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a578:	e03a      	b.n	800a5f0 <_printf_i+0xa8>
 800a57a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a57e:	2b15      	cmp	r3, #21
 800a580:	d8f6      	bhi.n	800a570 <_printf_i+0x28>
 800a582:	a101      	add	r1, pc, #4	; (adr r1, 800a588 <_printf_i+0x40>)
 800a584:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a588:	0800a5e1 	.word	0x0800a5e1
 800a58c:	0800a5f5 	.word	0x0800a5f5
 800a590:	0800a571 	.word	0x0800a571
 800a594:	0800a571 	.word	0x0800a571
 800a598:	0800a571 	.word	0x0800a571
 800a59c:	0800a571 	.word	0x0800a571
 800a5a0:	0800a5f5 	.word	0x0800a5f5
 800a5a4:	0800a571 	.word	0x0800a571
 800a5a8:	0800a571 	.word	0x0800a571
 800a5ac:	0800a571 	.word	0x0800a571
 800a5b0:	0800a571 	.word	0x0800a571
 800a5b4:	0800a703 	.word	0x0800a703
 800a5b8:	0800a625 	.word	0x0800a625
 800a5bc:	0800a6e5 	.word	0x0800a6e5
 800a5c0:	0800a571 	.word	0x0800a571
 800a5c4:	0800a571 	.word	0x0800a571
 800a5c8:	0800a725 	.word	0x0800a725
 800a5cc:	0800a571 	.word	0x0800a571
 800a5d0:	0800a625 	.word	0x0800a625
 800a5d4:	0800a571 	.word	0x0800a571
 800a5d8:	0800a571 	.word	0x0800a571
 800a5dc:	0800a6ed 	.word	0x0800a6ed
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	1d1a      	adds	r2, r3, #4
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	602a      	str	r2, [r5, #0]
 800a5e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e0a4      	b.n	800a73e <_printf_i+0x1f6>
 800a5f4:	6820      	ldr	r0, [r4, #0]
 800a5f6:	6829      	ldr	r1, [r5, #0]
 800a5f8:	0606      	lsls	r6, r0, #24
 800a5fa:	f101 0304 	add.w	r3, r1, #4
 800a5fe:	d50a      	bpl.n	800a616 <_printf_i+0xce>
 800a600:	680e      	ldr	r6, [r1, #0]
 800a602:	602b      	str	r3, [r5, #0]
 800a604:	2e00      	cmp	r6, #0
 800a606:	da03      	bge.n	800a610 <_printf_i+0xc8>
 800a608:	232d      	movs	r3, #45	; 0x2d
 800a60a:	4276      	negs	r6, r6
 800a60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a610:	230a      	movs	r3, #10
 800a612:	485e      	ldr	r0, [pc, #376]	; (800a78c <_printf_i+0x244>)
 800a614:	e019      	b.n	800a64a <_printf_i+0x102>
 800a616:	680e      	ldr	r6, [r1, #0]
 800a618:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a61c:	602b      	str	r3, [r5, #0]
 800a61e:	bf18      	it	ne
 800a620:	b236      	sxthne	r6, r6
 800a622:	e7ef      	b.n	800a604 <_printf_i+0xbc>
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	6820      	ldr	r0, [r4, #0]
 800a628:	1d19      	adds	r1, r3, #4
 800a62a:	6029      	str	r1, [r5, #0]
 800a62c:	0601      	lsls	r1, r0, #24
 800a62e:	d501      	bpl.n	800a634 <_printf_i+0xec>
 800a630:	681e      	ldr	r6, [r3, #0]
 800a632:	e002      	b.n	800a63a <_printf_i+0xf2>
 800a634:	0646      	lsls	r6, r0, #25
 800a636:	d5fb      	bpl.n	800a630 <_printf_i+0xe8>
 800a638:	881e      	ldrh	r6, [r3, #0]
 800a63a:	2f6f      	cmp	r7, #111	; 0x6f
 800a63c:	bf0c      	ite	eq
 800a63e:	2308      	moveq	r3, #8
 800a640:	230a      	movne	r3, #10
 800a642:	4852      	ldr	r0, [pc, #328]	; (800a78c <_printf_i+0x244>)
 800a644:	2100      	movs	r1, #0
 800a646:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a64a:	6865      	ldr	r5, [r4, #4]
 800a64c:	2d00      	cmp	r5, #0
 800a64e:	bfa8      	it	ge
 800a650:	6821      	ldrge	r1, [r4, #0]
 800a652:	60a5      	str	r5, [r4, #8]
 800a654:	bfa4      	itt	ge
 800a656:	f021 0104 	bicge.w	r1, r1, #4
 800a65a:	6021      	strge	r1, [r4, #0]
 800a65c:	b90e      	cbnz	r6, 800a662 <_printf_i+0x11a>
 800a65e:	2d00      	cmp	r5, #0
 800a660:	d04d      	beq.n	800a6fe <_printf_i+0x1b6>
 800a662:	4615      	mov	r5, r2
 800a664:	fbb6 f1f3 	udiv	r1, r6, r3
 800a668:	fb03 6711 	mls	r7, r3, r1, r6
 800a66c:	5dc7      	ldrb	r7, [r0, r7]
 800a66e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a672:	4637      	mov	r7, r6
 800a674:	42bb      	cmp	r3, r7
 800a676:	460e      	mov	r6, r1
 800a678:	d9f4      	bls.n	800a664 <_printf_i+0x11c>
 800a67a:	2b08      	cmp	r3, #8
 800a67c:	d10b      	bne.n	800a696 <_printf_i+0x14e>
 800a67e:	6823      	ldr	r3, [r4, #0]
 800a680:	07de      	lsls	r6, r3, #31
 800a682:	d508      	bpl.n	800a696 <_printf_i+0x14e>
 800a684:	6923      	ldr	r3, [r4, #16]
 800a686:	6861      	ldr	r1, [r4, #4]
 800a688:	4299      	cmp	r1, r3
 800a68a:	bfde      	ittt	le
 800a68c:	2330      	movle	r3, #48	; 0x30
 800a68e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a692:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a696:	1b52      	subs	r2, r2, r5
 800a698:	6122      	str	r2, [r4, #16]
 800a69a:	464b      	mov	r3, r9
 800a69c:	4621      	mov	r1, r4
 800a69e:	4640      	mov	r0, r8
 800a6a0:	f8cd a000 	str.w	sl, [sp]
 800a6a4:	aa03      	add	r2, sp, #12
 800a6a6:	f7ff fedf 	bl	800a468 <_printf_common>
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	d14c      	bne.n	800a748 <_printf_i+0x200>
 800a6ae:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b2:	b004      	add	sp, #16
 800a6b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6b8:	4834      	ldr	r0, [pc, #208]	; (800a78c <_printf_i+0x244>)
 800a6ba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a6be:	6829      	ldr	r1, [r5, #0]
 800a6c0:	6823      	ldr	r3, [r4, #0]
 800a6c2:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6c6:	6029      	str	r1, [r5, #0]
 800a6c8:	061d      	lsls	r5, r3, #24
 800a6ca:	d514      	bpl.n	800a6f6 <_printf_i+0x1ae>
 800a6cc:	07df      	lsls	r7, r3, #31
 800a6ce:	bf44      	itt	mi
 800a6d0:	f043 0320 	orrmi.w	r3, r3, #32
 800a6d4:	6023      	strmi	r3, [r4, #0]
 800a6d6:	b91e      	cbnz	r6, 800a6e0 <_printf_i+0x198>
 800a6d8:	6823      	ldr	r3, [r4, #0]
 800a6da:	f023 0320 	bic.w	r3, r3, #32
 800a6de:	6023      	str	r3, [r4, #0]
 800a6e0:	2310      	movs	r3, #16
 800a6e2:	e7af      	b.n	800a644 <_printf_i+0xfc>
 800a6e4:	6823      	ldr	r3, [r4, #0]
 800a6e6:	f043 0320 	orr.w	r3, r3, #32
 800a6ea:	6023      	str	r3, [r4, #0]
 800a6ec:	2378      	movs	r3, #120	; 0x78
 800a6ee:	4828      	ldr	r0, [pc, #160]	; (800a790 <_printf_i+0x248>)
 800a6f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a6f4:	e7e3      	b.n	800a6be <_printf_i+0x176>
 800a6f6:	0659      	lsls	r1, r3, #25
 800a6f8:	bf48      	it	mi
 800a6fa:	b2b6      	uxthmi	r6, r6
 800a6fc:	e7e6      	b.n	800a6cc <_printf_i+0x184>
 800a6fe:	4615      	mov	r5, r2
 800a700:	e7bb      	b.n	800a67a <_printf_i+0x132>
 800a702:	682b      	ldr	r3, [r5, #0]
 800a704:	6826      	ldr	r6, [r4, #0]
 800a706:	1d18      	adds	r0, r3, #4
 800a708:	6961      	ldr	r1, [r4, #20]
 800a70a:	6028      	str	r0, [r5, #0]
 800a70c:	0635      	lsls	r5, r6, #24
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	d501      	bpl.n	800a716 <_printf_i+0x1ce>
 800a712:	6019      	str	r1, [r3, #0]
 800a714:	e002      	b.n	800a71c <_printf_i+0x1d4>
 800a716:	0670      	lsls	r0, r6, #25
 800a718:	d5fb      	bpl.n	800a712 <_printf_i+0x1ca>
 800a71a:	8019      	strh	r1, [r3, #0]
 800a71c:	2300      	movs	r3, #0
 800a71e:	4615      	mov	r5, r2
 800a720:	6123      	str	r3, [r4, #16]
 800a722:	e7ba      	b.n	800a69a <_printf_i+0x152>
 800a724:	682b      	ldr	r3, [r5, #0]
 800a726:	2100      	movs	r1, #0
 800a728:	1d1a      	adds	r2, r3, #4
 800a72a:	602a      	str	r2, [r5, #0]
 800a72c:	681d      	ldr	r5, [r3, #0]
 800a72e:	6862      	ldr	r2, [r4, #4]
 800a730:	4628      	mov	r0, r5
 800a732:	f000 fb33 	bl	800ad9c <memchr>
 800a736:	b108      	cbz	r0, 800a73c <_printf_i+0x1f4>
 800a738:	1b40      	subs	r0, r0, r5
 800a73a:	6060      	str	r0, [r4, #4]
 800a73c:	6863      	ldr	r3, [r4, #4]
 800a73e:	6123      	str	r3, [r4, #16]
 800a740:	2300      	movs	r3, #0
 800a742:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a746:	e7a8      	b.n	800a69a <_printf_i+0x152>
 800a748:	462a      	mov	r2, r5
 800a74a:	4649      	mov	r1, r9
 800a74c:	4640      	mov	r0, r8
 800a74e:	6923      	ldr	r3, [r4, #16]
 800a750:	47d0      	blx	sl
 800a752:	3001      	adds	r0, #1
 800a754:	d0ab      	beq.n	800a6ae <_printf_i+0x166>
 800a756:	6823      	ldr	r3, [r4, #0]
 800a758:	079b      	lsls	r3, r3, #30
 800a75a:	d413      	bmi.n	800a784 <_printf_i+0x23c>
 800a75c:	68e0      	ldr	r0, [r4, #12]
 800a75e:	9b03      	ldr	r3, [sp, #12]
 800a760:	4298      	cmp	r0, r3
 800a762:	bfb8      	it	lt
 800a764:	4618      	movlt	r0, r3
 800a766:	e7a4      	b.n	800a6b2 <_printf_i+0x16a>
 800a768:	2301      	movs	r3, #1
 800a76a:	4632      	mov	r2, r6
 800a76c:	4649      	mov	r1, r9
 800a76e:	4640      	mov	r0, r8
 800a770:	47d0      	blx	sl
 800a772:	3001      	adds	r0, #1
 800a774:	d09b      	beq.n	800a6ae <_printf_i+0x166>
 800a776:	3501      	adds	r5, #1
 800a778:	68e3      	ldr	r3, [r4, #12]
 800a77a:	9903      	ldr	r1, [sp, #12]
 800a77c:	1a5b      	subs	r3, r3, r1
 800a77e:	42ab      	cmp	r3, r5
 800a780:	dcf2      	bgt.n	800a768 <_printf_i+0x220>
 800a782:	e7eb      	b.n	800a75c <_printf_i+0x214>
 800a784:	2500      	movs	r5, #0
 800a786:	f104 0619 	add.w	r6, r4, #25
 800a78a:	e7f5      	b.n	800a778 <_printf_i+0x230>
 800a78c:	0800cfb5 	.word	0x0800cfb5
 800a790:	0800cfc6 	.word	0x0800cfc6

0800a794 <siprintf>:
 800a794:	b40e      	push	{r1, r2, r3}
 800a796:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a79a:	b500      	push	{lr}
 800a79c:	b09c      	sub	sp, #112	; 0x70
 800a79e:	ab1d      	add	r3, sp, #116	; 0x74
 800a7a0:	9002      	str	r0, [sp, #8]
 800a7a2:	9006      	str	r0, [sp, #24]
 800a7a4:	9107      	str	r1, [sp, #28]
 800a7a6:	9104      	str	r1, [sp, #16]
 800a7a8:	4808      	ldr	r0, [pc, #32]	; (800a7cc <siprintf+0x38>)
 800a7aa:	4909      	ldr	r1, [pc, #36]	; (800a7d0 <siprintf+0x3c>)
 800a7ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7b0:	9105      	str	r1, [sp, #20]
 800a7b2:	6800      	ldr	r0, [r0, #0]
 800a7b4:	a902      	add	r1, sp, #8
 800a7b6:	9301      	str	r3, [sp, #4]
 800a7b8:	f000 fc7e 	bl	800b0b8 <_svfiprintf_r>
 800a7bc:	2200      	movs	r2, #0
 800a7be:	9b02      	ldr	r3, [sp, #8]
 800a7c0:	701a      	strb	r2, [r3, #0]
 800a7c2:	b01c      	add	sp, #112	; 0x70
 800a7c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7c8:	b003      	add	sp, #12
 800a7ca:	4770      	bx	lr
 800a7cc:	20000018 	.word	0x20000018
 800a7d0:	ffff0208 	.word	0xffff0208

0800a7d4 <__swbuf_r>:
 800a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d6:	460e      	mov	r6, r1
 800a7d8:	4614      	mov	r4, r2
 800a7da:	4605      	mov	r5, r0
 800a7dc:	b118      	cbz	r0, 800a7e6 <__swbuf_r+0x12>
 800a7de:	6983      	ldr	r3, [r0, #24]
 800a7e0:	b90b      	cbnz	r3, 800a7e6 <__swbuf_r+0x12>
 800a7e2:	f000 f9d5 	bl	800ab90 <__sinit>
 800a7e6:	4b21      	ldr	r3, [pc, #132]	; (800a86c <__swbuf_r+0x98>)
 800a7e8:	429c      	cmp	r4, r3
 800a7ea:	d12b      	bne.n	800a844 <__swbuf_r+0x70>
 800a7ec:	686c      	ldr	r4, [r5, #4]
 800a7ee:	69a3      	ldr	r3, [r4, #24]
 800a7f0:	60a3      	str	r3, [r4, #8]
 800a7f2:	89a3      	ldrh	r3, [r4, #12]
 800a7f4:	071a      	lsls	r2, r3, #28
 800a7f6:	d52f      	bpl.n	800a858 <__swbuf_r+0x84>
 800a7f8:	6923      	ldr	r3, [r4, #16]
 800a7fa:	b36b      	cbz	r3, 800a858 <__swbuf_r+0x84>
 800a7fc:	6923      	ldr	r3, [r4, #16]
 800a7fe:	6820      	ldr	r0, [r4, #0]
 800a800:	b2f6      	uxtb	r6, r6
 800a802:	1ac0      	subs	r0, r0, r3
 800a804:	6963      	ldr	r3, [r4, #20]
 800a806:	4637      	mov	r7, r6
 800a808:	4283      	cmp	r3, r0
 800a80a:	dc04      	bgt.n	800a816 <__swbuf_r+0x42>
 800a80c:	4621      	mov	r1, r4
 800a80e:	4628      	mov	r0, r5
 800a810:	f000 f92a 	bl	800aa68 <_fflush_r>
 800a814:	bb30      	cbnz	r0, 800a864 <__swbuf_r+0x90>
 800a816:	68a3      	ldr	r3, [r4, #8]
 800a818:	3001      	adds	r0, #1
 800a81a:	3b01      	subs	r3, #1
 800a81c:	60a3      	str	r3, [r4, #8]
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	1c5a      	adds	r2, r3, #1
 800a822:	6022      	str	r2, [r4, #0]
 800a824:	701e      	strb	r6, [r3, #0]
 800a826:	6963      	ldr	r3, [r4, #20]
 800a828:	4283      	cmp	r3, r0
 800a82a:	d004      	beq.n	800a836 <__swbuf_r+0x62>
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	07db      	lsls	r3, r3, #31
 800a830:	d506      	bpl.n	800a840 <__swbuf_r+0x6c>
 800a832:	2e0a      	cmp	r6, #10
 800a834:	d104      	bne.n	800a840 <__swbuf_r+0x6c>
 800a836:	4621      	mov	r1, r4
 800a838:	4628      	mov	r0, r5
 800a83a:	f000 f915 	bl	800aa68 <_fflush_r>
 800a83e:	b988      	cbnz	r0, 800a864 <__swbuf_r+0x90>
 800a840:	4638      	mov	r0, r7
 800a842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a844:	4b0a      	ldr	r3, [pc, #40]	; (800a870 <__swbuf_r+0x9c>)
 800a846:	429c      	cmp	r4, r3
 800a848:	d101      	bne.n	800a84e <__swbuf_r+0x7a>
 800a84a:	68ac      	ldr	r4, [r5, #8]
 800a84c:	e7cf      	b.n	800a7ee <__swbuf_r+0x1a>
 800a84e:	4b09      	ldr	r3, [pc, #36]	; (800a874 <__swbuf_r+0xa0>)
 800a850:	429c      	cmp	r4, r3
 800a852:	bf08      	it	eq
 800a854:	68ec      	ldreq	r4, [r5, #12]
 800a856:	e7ca      	b.n	800a7ee <__swbuf_r+0x1a>
 800a858:	4621      	mov	r1, r4
 800a85a:	4628      	mov	r0, r5
 800a85c:	f000 f80c 	bl	800a878 <__swsetup_r>
 800a860:	2800      	cmp	r0, #0
 800a862:	d0cb      	beq.n	800a7fc <__swbuf_r+0x28>
 800a864:	f04f 37ff 	mov.w	r7, #4294967295
 800a868:	e7ea      	b.n	800a840 <__swbuf_r+0x6c>
 800a86a:	bf00      	nop
 800a86c:	0800cff8 	.word	0x0800cff8
 800a870:	0800d018 	.word	0x0800d018
 800a874:	0800cfd8 	.word	0x0800cfd8

0800a878 <__swsetup_r>:
 800a878:	4b32      	ldr	r3, [pc, #200]	; (800a944 <__swsetup_r+0xcc>)
 800a87a:	b570      	push	{r4, r5, r6, lr}
 800a87c:	681d      	ldr	r5, [r3, #0]
 800a87e:	4606      	mov	r6, r0
 800a880:	460c      	mov	r4, r1
 800a882:	b125      	cbz	r5, 800a88e <__swsetup_r+0x16>
 800a884:	69ab      	ldr	r3, [r5, #24]
 800a886:	b913      	cbnz	r3, 800a88e <__swsetup_r+0x16>
 800a888:	4628      	mov	r0, r5
 800a88a:	f000 f981 	bl	800ab90 <__sinit>
 800a88e:	4b2e      	ldr	r3, [pc, #184]	; (800a948 <__swsetup_r+0xd0>)
 800a890:	429c      	cmp	r4, r3
 800a892:	d10f      	bne.n	800a8b4 <__swsetup_r+0x3c>
 800a894:	686c      	ldr	r4, [r5, #4]
 800a896:	89a3      	ldrh	r3, [r4, #12]
 800a898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a89c:	0719      	lsls	r1, r3, #28
 800a89e:	d42c      	bmi.n	800a8fa <__swsetup_r+0x82>
 800a8a0:	06dd      	lsls	r5, r3, #27
 800a8a2:	d411      	bmi.n	800a8c8 <__swsetup_r+0x50>
 800a8a4:	2309      	movs	r3, #9
 800a8a6:	6033      	str	r3, [r6, #0]
 800a8a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b0:	81a3      	strh	r3, [r4, #12]
 800a8b2:	e03e      	b.n	800a932 <__swsetup_r+0xba>
 800a8b4:	4b25      	ldr	r3, [pc, #148]	; (800a94c <__swsetup_r+0xd4>)
 800a8b6:	429c      	cmp	r4, r3
 800a8b8:	d101      	bne.n	800a8be <__swsetup_r+0x46>
 800a8ba:	68ac      	ldr	r4, [r5, #8]
 800a8bc:	e7eb      	b.n	800a896 <__swsetup_r+0x1e>
 800a8be:	4b24      	ldr	r3, [pc, #144]	; (800a950 <__swsetup_r+0xd8>)
 800a8c0:	429c      	cmp	r4, r3
 800a8c2:	bf08      	it	eq
 800a8c4:	68ec      	ldreq	r4, [r5, #12]
 800a8c6:	e7e6      	b.n	800a896 <__swsetup_r+0x1e>
 800a8c8:	0758      	lsls	r0, r3, #29
 800a8ca:	d512      	bpl.n	800a8f2 <__swsetup_r+0x7a>
 800a8cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8ce:	b141      	cbz	r1, 800a8e2 <__swsetup_r+0x6a>
 800a8d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8d4:	4299      	cmp	r1, r3
 800a8d6:	d002      	beq.n	800a8de <__swsetup_r+0x66>
 800a8d8:	4630      	mov	r0, r6
 800a8da:	f000 fa87 	bl	800adec <_free_r>
 800a8de:	2300      	movs	r3, #0
 800a8e0:	6363      	str	r3, [r4, #52]	; 0x34
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a8e8:	81a3      	strh	r3, [r4, #12]
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	6063      	str	r3, [r4, #4]
 800a8ee:	6923      	ldr	r3, [r4, #16]
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	89a3      	ldrh	r3, [r4, #12]
 800a8f4:	f043 0308 	orr.w	r3, r3, #8
 800a8f8:	81a3      	strh	r3, [r4, #12]
 800a8fa:	6923      	ldr	r3, [r4, #16]
 800a8fc:	b94b      	cbnz	r3, 800a912 <__swsetup_r+0x9a>
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a908:	d003      	beq.n	800a912 <__swsetup_r+0x9a>
 800a90a:	4621      	mov	r1, r4
 800a90c:	4630      	mov	r0, r6
 800a90e:	f000 fa05 	bl	800ad1c <__smakebuf_r>
 800a912:	89a0      	ldrh	r0, [r4, #12]
 800a914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a918:	f010 0301 	ands.w	r3, r0, #1
 800a91c:	d00a      	beq.n	800a934 <__swsetup_r+0xbc>
 800a91e:	2300      	movs	r3, #0
 800a920:	60a3      	str	r3, [r4, #8]
 800a922:	6963      	ldr	r3, [r4, #20]
 800a924:	425b      	negs	r3, r3
 800a926:	61a3      	str	r3, [r4, #24]
 800a928:	6923      	ldr	r3, [r4, #16]
 800a92a:	b943      	cbnz	r3, 800a93e <__swsetup_r+0xc6>
 800a92c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a930:	d1ba      	bne.n	800a8a8 <__swsetup_r+0x30>
 800a932:	bd70      	pop	{r4, r5, r6, pc}
 800a934:	0781      	lsls	r1, r0, #30
 800a936:	bf58      	it	pl
 800a938:	6963      	ldrpl	r3, [r4, #20]
 800a93a:	60a3      	str	r3, [r4, #8]
 800a93c:	e7f4      	b.n	800a928 <__swsetup_r+0xb0>
 800a93e:	2000      	movs	r0, #0
 800a940:	e7f7      	b.n	800a932 <__swsetup_r+0xba>
 800a942:	bf00      	nop
 800a944:	20000018 	.word	0x20000018
 800a948:	0800cff8 	.word	0x0800cff8
 800a94c:	0800d018 	.word	0x0800d018
 800a950:	0800cfd8 	.word	0x0800cfd8

0800a954 <abort>:
 800a954:	2006      	movs	r0, #6
 800a956:	b508      	push	{r3, lr}
 800a958:	f000 fce6 	bl	800b328 <raise>
 800a95c:	2001      	movs	r0, #1
 800a95e:	f7fb f938 	bl	8005bd2 <_exit>
	...

0800a964 <__sflush_r>:
 800a964:	898a      	ldrh	r2, [r1, #12]
 800a966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a968:	4605      	mov	r5, r0
 800a96a:	0710      	lsls	r0, r2, #28
 800a96c:	460c      	mov	r4, r1
 800a96e:	d457      	bmi.n	800aa20 <__sflush_r+0xbc>
 800a970:	684b      	ldr	r3, [r1, #4]
 800a972:	2b00      	cmp	r3, #0
 800a974:	dc04      	bgt.n	800a980 <__sflush_r+0x1c>
 800a976:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a978:	2b00      	cmp	r3, #0
 800a97a:	dc01      	bgt.n	800a980 <__sflush_r+0x1c>
 800a97c:	2000      	movs	r0, #0
 800a97e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a980:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a982:	2e00      	cmp	r6, #0
 800a984:	d0fa      	beq.n	800a97c <__sflush_r+0x18>
 800a986:	2300      	movs	r3, #0
 800a988:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a98c:	682f      	ldr	r7, [r5, #0]
 800a98e:	602b      	str	r3, [r5, #0]
 800a990:	d032      	beq.n	800a9f8 <__sflush_r+0x94>
 800a992:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a994:	89a3      	ldrh	r3, [r4, #12]
 800a996:	075a      	lsls	r2, r3, #29
 800a998:	d505      	bpl.n	800a9a6 <__sflush_r+0x42>
 800a99a:	6863      	ldr	r3, [r4, #4]
 800a99c:	1ac0      	subs	r0, r0, r3
 800a99e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a9a0:	b10b      	cbz	r3, 800a9a6 <__sflush_r+0x42>
 800a9a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a9a4:	1ac0      	subs	r0, r0, r3
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	6a21      	ldr	r1, [r4, #32]
 800a9b0:	47b0      	blx	r6
 800a9b2:	1c43      	adds	r3, r0, #1
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	d106      	bne.n	800a9c6 <__sflush_r+0x62>
 800a9b8:	6829      	ldr	r1, [r5, #0]
 800a9ba:	291d      	cmp	r1, #29
 800a9bc:	d82c      	bhi.n	800aa18 <__sflush_r+0xb4>
 800a9be:	4a29      	ldr	r2, [pc, #164]	; (800aa64 <__sflush_r+0x100>)
 800a9c0:	40ca      	lsrs	r2, r1
 800a9c2:	07d6      	lsls	r6, r2, #31
 800a9c4:	d528      	bpl.n	800aa18 <__sflush_r+0xb4>
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	6062      	str	r2, [r4, #4]
 800a9ca:	6922      	ldr	r2, [r4, #16]
 800a9cc:	04d9      	lsls	r1, r3, #19
 800a9ce:	6022      	str	r2, [r4, #0]
 800a9d0:	d504      	bpl.n	800a9dc <__sflush_r+0x78>
 800a9d2:	1c42      	adds	r2, r0, #1
 800a9d4:	d101      	bne.n	800a9da <__sflush_r+0x76>
 800a9d6:	682b      	ldr	r3, [r5, #0]
 800a9d8:	b903      	cbnz	r3, 800a9dc <__sflush_r+0x78>
 800a9da:	6560      	str	r0, [r4, #84]	; 0x54
 800a9dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9de:	602f      	str	r7, [r5, #0]
 800a9e0:	2900      	cmp	r1, #0
 800a9e2:	d0cb      	beq.n	800a97c <__sflush_r+0x18>
 800a9e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9e8:	4299      	cmp	r1, r3
 800a9ea:	d002      	beq.n	800a9f2 <__sflush_r+0x8e>
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	f000 f9fd 	bl	800adec <_free_r>
 800a9f2:	2000      	movs	r0, #0
 800a9f4:	6360      	str	r0, [r4, #52]	; 0x34
 800a9f6:	e7c2      	b.n	800a97e <__sflush_r+0x1a>
 800a9f8:	6a21      	ldr	r1, [r4, #32]
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	4628      	mov	r0, r5
 800a9fe:	47b0      	blx	r6
 800aa00:	1c41      	adds	r1, r0, #1
 800aa02:	d1c7      	bne.n	800a994 <__sflush_r+0x30>
 800aa04:	682b      	ldr	r3, [r5, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d0c4      	beq.n	800a994 <__sflush_r+0x30>
 800aa0a:	2b1d      	cmp	r3, #29
 800aa0c:	d001      	beq.n	800aa12 <__sflush_r+0xae>
 800aa0e:	2b16      	cmp	r3, #22
 800aa10:	d101      	bne.n	800aa16 <__sflush_r+0xb2>
 800aa12:	602f      	str	r7, [r5, #0]
 800aa14:	e7b2      	b.n	800a97c <__sflush_r+0x18>
 800aa16:	89a3      	ldrh	r3, [r4, #12]
 800aa18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa1c:	81a3      	strh	r3, [r4, #12]
 800aa1e:	e7ae      	b.n	800a97e <__sflush_r+0x1a>
 800aa20:	690f      	ldr	r7, [r1, #16]
 800aa22:	2f00      	cmp	r7, #0
 800aa24:	d0aa      	beq.n	800a97c <__sflush_r+0x18>
 800aa26:	0793      	lsls	r3, r2, #30
 800aa28:	bf18      	it	ne
 800aa2a:	2300      	movne	r3, #0
 800aa2c:	680e      	ldr	r6, [r1, #0]
 800aa2e:	bf08      	it	eq
 800aa30:	694b      	ldreq	r3, [r1, #20]
 800aa32:	1bf6      	subs	r6, r6, r7
 800aa34:	600f      	str	r7, [r1, #0]
 800aa36:	608b      	str	r3, [r1, #8]
 800aa38:	2e00      	cmp	r6, #0
 800aa3a:	dd9f      	ble.n	800a97c <__sflush_r+0x18>
 800aa3c:	4633      	mov	r3, r6
 800aa3e:	463a      	mov	r2, r7
 800aa40:	4628      	mov	r0, r5
 800aa42:	6a21      	ldr	r1, [r4, #32]
 800aa44:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800aa48:	47e0      	blx	ip
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	dc06      	bgt.n	800aa5c <__sflush_r+0xf8>
 800aa4e:	89a3      	ldrh	r3, [r4, #12]
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa58:	81a3      	strh	r3, [r4, #12]
 800aa5a:	e790      	b.n	800a97e <__sflush_r+0x1a>
 800aa5c:	4407      	add	r7, r0
 800aa5e:	1a36      	subs	r6, r6, r0
 800aa60:	e7ea      	b.n	800aa38 <__sflush_r+0xd4>
 800aa62:	bf00      	nop
 800aa64:	20400001 	.word	0x20400001

0800aa68 <_fflush_r>:
 800aa68:	b538      	push	{r3, r4, r5, lr}
 800aa6a:	690b      	ldr	r3, [r1, #16]
 800aa6c:	4605      	mov	r5, r0
 800aa6e:	460c      	mov	r4, r1
 800aa70:	b913      	cbnz	r3, 800aa78 <_fflush_r+0x10>
 800aa72:	2500      	movs	r5, #0
 800aa74:	4628      	mov	r0, r5
 800aa76:	bd38      	pop	{r3, r4, r5, pc}
 800aa78:	b118      	cbz	r0, 800aa82 <_fflush_r+0x1a>
 800aa7a:	6983      	ldr	r3, [r0, #24]
 800aa7c:	b90b      	cbnz	r3, 800aa82 <_fflush_r+0x1a>
 800aa7e:	f000 f887 	bl	800ab90 <__sinit>
 800aa82:	4b14      	ldr	r3, [pc, #80]	; (800aad4 <_fflush_r+0x6c>)
 800aa84:	429c      	cmp	r4, r3
 800aa86:	d11b      	bne.n	800aac0 <_fflush_r+0x58>
 800aa88:	686c      	ldr	r4, [r5, #4]
 800aa8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d0ef      	beq.n	800aa72 <_fflush_r+0xa>
 800aa92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800aa94:	07d0      	lsls	r0, r2, #31
 800aa96:	d404      	bmi.n	800aaa2 <_fflush_r+0x3a>
 800aa98:	0599      	lsls	r1, r3, #22
 800aa9a:	d402      	bmi.n	800aaa2 <_fflush_r+0x3a>
 800aa9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa9e:	f000 f915 	bl	800accc <__retarget_lock_acquire_recursive>
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	4621      	mov	r1, r4
 800aaa6:	f7ff ff5d 	bl	800a964 <__sflush_r>
 800aaaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aaac:	4605      	mov	r5, r0
 800aaae:	07da      	lsls	r2, r3, #31
 800aab0:	d4e0      	bmi.n	800aa74 <_fflush_r+0xc>
 800aab2:	89a3      	ldrh	r3, [r4, #12]
 800aab4:	059b      	lsls	r3, r3, #22
 800aab6:	d4dd      	bmi.n	800aa74 <_fflush_r+0xc>
 800aab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aaba:	f000 f908 	bl	800acce <__retarget_lock_release_recursive>
 800aabe:	e7d9      	b.n	800aa74 <_fflush_r+0xc>
 800aac0:	4b05      	ldr	r3, [pc, #20]	; (800aad8 <_fflush_r+0x70>)
 800aac2:	429c      	cmp	r4, r3
 800aac4:	d101      	bne.n	800aaca <_fflush_r+0x62>
 800aac6:	68ac      	ldr	r4, [r5, #8]
 800aac8:	e7df      	b.n	800aa8a <_fflush_r+0x22>
 800aaca:	4b04      	ldr	r3, [pc, #16]	; (800aadc <_fflush_r+0x74>)
 800aacc:	429c      	cmp	r4, r3
 800aace:	bf08      	it	eq
 800aad0:	68ec      	ldreq	r4, [r5, #12]
 800aad2:	e7da      	b.n	800aa8a <_fflush_r+0x22>
 800aad4:	0800cff8 	.word	0x0800cff8
 800aad8:	0800d018 	.word	0x0800d018
 800aadc:	0800cfd8 	.word	0x0800cfd8

0800aae0 <std>:
 800aae0:	2300      	movs	r3, #0
 800aae2:	b510      	push	{r4, lr}
 800aae4:	4604      	mov	r4, r0
 800aae6:	e9c0 3300 	strd	r3, r3, [r0]
 800aaea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aaee:	6083      	str	r3, [r0, #8]
 800aaf0:	8181      	strh	r1, [r0, #12]
 800aaf2:	6643      	str	r3, [r0, #100]	; 0x64
 800aaf4:	81c2      	strh	r2, [r0, #14]
 800aaf6:	6183      	str	r3, [r0, #24]
 800aaf8:	4619      	mov	r1, r3
 800aafa:	2208      	movs	r2, #8
 800aafc:	305c      	adds	r0, #92	; 0x5c
 800aafe:	f7ff fb53 	bl	800a1a8 <memset>
 800ab02:	4b05      	ldr	r3, [pc, #20]	; (800ab18 <std+0x38>)
 800ab04:	6224      	str	r4, [r4, #32]
 800ab06:	6263      	str	r3, [r4, #36]	; 0x24
 800ab08:	4b04      	ldr	r3, [pc, #16]	; (800ab1c <std+0x3c>)
 800ab0a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ab0c:	4b04      	ldr	r3, [pc, #16]	; (800ab20 <std+0x40>)
 800ab0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ab10:	4b04      	ldr	r3, [pc, #16]	; (800ab24 <std+0x44>)
 800ab12:	6323      	str	r3, [r4, #48]	; 0x30
 800ab14:	bd10      	pop	{r4, pc}
 800ab16:	bf00      	nop
 800ab18:	0800b361 	.word	0x0800b361
 800ab1c:	0800b383 	.word	0x0800b383
 800ab20:	0800b3bb 	.word	0x0800b3bb
 800ab24:	0800b3df 	.word	0x0800b3df

0800ab28 <_cleanup_r>:
 800ab28:	4901      	ldr	r1, [pc, #4]	; (800ab30 <_cleanup_r+0x8>)
 800ab2a:	f000 b8af 	b.w	800ac8c <_fwalk_reent>
 800ab2e:	bf00      	nop
 800ab30:	0800aa69 	.word	0x0800aa69

0800ab34 <__sfmoreglue>:
 800ab34:	2268      	movs	r2, #104	; 0x68
 800ab36:	b570      	push	{r4, r5, r6, lr}
 800ab38:	1e4d      	subs	r5, r1, #1
 800ab3a:	4355      	muls	r5, r2
 800ab3c:	460e      	mov	r6, r1
 800ab3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ab42:	f000 f9bb 	bl	800aebc <_malloc_r>
 800ab46:	4604      	mov	r4, r0
 800ab48:	b140      	cbz	r0, 800ab5c <__sfmoreglue+0x28>
 800ab4a:	2100      	movs	r1, #0
 800ab4c:	e9c0 1600 	strd	r1, r6, [r0]
 800ab50:	300c      	adds	r0, #12
 800ab52:	60a0      	str	r0, [r4, #8]
 800ab54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ab58:	f7ff fb26 	bl	800a1a8 <memset>
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	bd70      	pop	{r4, r5, r6, pc}

0800ab60 <__sfp_lock_acquire>:
 800ab60:	4801      	ldr	r0, [pc, #4]	; (800ab68 <__sfp_lock_acquire+0x8>)
 800ab62:	f000 b8b3 	b.w	800accc <__retarget_lock_acquire_recursive>
 800ab66:	bf00      	nop
 800ab68:	20007fad 	.word	0x20007fad

0800ab6c <__sfp_lock_release>:
 800ab6c:	4801      	ldr	r0, [pc, #4]	; (800ab74 <__sfp_lock_release+0x8>)
 800ab6e:	f000 b8ae 	b.w	800acce <__retarget_lock_release_recursive>
 800ab72:	bf00      	nop
 800ab74:	20007fad 	.word	0x20007fad

0800ab78 <__sinit_lock_acquire>:
 800ab78:	4801      	ldr	r0, [pc, #4]	; (800ab80 <__sinit_lock_acquire+0x8>)
 800ab7a:	f000 b8a7 	b.w	800accc <__retarget_lock_acquire_recursive>
 800ab7e:	bf00      	nop
 800ab80:	20007fae 	.word	0x20007fae

0800ab84 <__sinit_lock_release>:
 800ab84:	4801      	ldr	r0, [pc, #4]	; (800ab8c <__sinit_lock_release+0x8>)
 800ab86:	f000 b8a2 	b.w	800acce <__retarget_lock_release_recursive>
 800ab8a:	bf00      	nop
 800ab8c:	20007fae 	.word	0x20007fae

0800ab90 <__sinit>:
 800ab90:	b510      	push	{r4, lr}
 800ab92:	4604      	mov	r4, r0
 800ab94:	f7ff fff0 	bl	800ab78 <__sinit_lock_acquire>
 800ab98:	69a3      	ldr	r3, [r4, #24]
 800ab9a:	b11b      	cbz	r3, 800aba4 <__sinit+0x14>
 800ab9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aba0:	f7ff bff0 	b.w	800ab84 <__sinit_lock_release>
 800aba4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aba8:	6523      	str	r3, [r4, #80]	; 0x50
 800abaa:	4b13      	ldr	r3, [pc, #76]	; (800abf8 <__sinit+0x68>)
 800abac:	4a13      	ldr	r2, [pc, #76]	; (800abfc <__sinit+0x6c>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	62a2      	str	r2, [r4, #40]	; 0x28
 800abb2:	42a3      	cmp	r3, r4
 800abb4:	bf08      	it	eq
 800abb6:	2301      	moveq	r3, #1
 800abb8:	4620      	mov	r0, r4
 800abba:	bf08      	it	eq
 800abbc:	61a3      	streq	r3, [r4, #24]
 800abbe:	f000 f81f 	bl	800ac00 <__sfp>
 800abc2:	6060      	str	r0, [r4, #4]
 800abc4:	4620      	mov	r0, r4
 800abc6:	f000 f81b 	bl	800ac00 <__sfp>
 800abca:	60a0      	str	r0, [r4, #8]
 800abcc:	4620      	mov	r0, r4
 800abce:	f000 f817 	bl	800ac00 <__sfp>
 800abd2:	2200      	movs	r2, #0
 800abd4:	2104      	movs	r1, #4
 800abd6:	60e0      	str	r0, [r4, #12]
 800abd8:	6860      	ldr	r0, [r4, #4]
 800abda:	f7ff ff81 	bl	800aae0 <std>
 800abde:	2201      	movs	r2, #1
 800abe0:	2109      	movs	r1, #9
 800abe2:	68a0      	ldr	r0, [r4, #8]
 800abe4:	f7ff ff7c 	bl	800aae0 <std>
 800abe8:	2202      	movs	r2, #2
 800abea:	2112      	movs	r1, #18
 800abec:	68e0      	ldr	r0, [r4, #12]
 800abee:	f7ff ff77 	bl	800aae0 <std>
 800abf2:	2301      	movs	r3, #1
 800abf4:	61a3      	str	r3, [r4, #24]
 800abf6:	e7d1      	b.n	800ab9c <__sinit+0xc>
 800abf8:	0800cfa0 	.word	0x0800cfa0
 800abfc:	0800ab29 	.word	0x0800ab29

0800ac00 <__sfp>:
 800ac00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac02:	4607      	mov	r7, r0
 800ac04:	f7ff ffac 	bl	800ab60 <__sfp_lock_acquire>
 800ac08:	4b1e      	ldr	r3, [pc, #120]	; (800ac84 <__sfp+0x84>)
 800ac0a:	681e      	ldr	r6, [r3, #0]
 800ac0c:	69b3      	ldr	r3, [r6, #24]
 800ac0e:	b913      	cbnz	r3, 800ac16 <__sfp+0x16>
 800ac10:	4630      	mov	r0, r6
 800ac12:	f7ff ffbd 	bl	800ab90 <__sinit>
 800ac16:	3648      	adds	r6, #72	; 0x48
 800ac18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ac1c:	3b01      	subs	r3, #1
 800ac1e:	d503      	bpl.n	800ac28 <__sfp+0x28>
 800ac20:	6833      	ldr	r3, [r6, #0]
 800ac22:	b30b      	cbz	r3, 800ac68 <__sfp+0x68>
 800ac24:	6836      	ldr	r6, [r6, #0]
 800ac26:	e7f7      	b.n	800ac18 <__sfp+0x18>
 800ac28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ac2c:	b9d5      	cbnz	r5, 800ac64 <__sfp+0x64>
 800ac2e:	4b16      	ldr	r3, [pc, #88]	; (800ac88 <__sfp+0x88>)
 800ac30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ac34:	60e3      	str	r3, [r4, #12]
 800ac36:	6665      	str	r5, [r4, #100]	; 0x64
 800ac38:	f000 f847 	bl	800acca <__retarget_lock_init_recursive>
 800ac3c:	f7ff ff96 	bl	800ab6c <__sfp_lock_release>
 800ac40:	2208      	movs	r2, #8
 800ac42:	4629      	mov	r1, r5
 800ac44:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ac48:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ac4c:	6025      	str	r5, [r4, #0]
 800ac4e:	61a5      	str	r5, [r4, #24]
 800ac50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ac54:	f7ff faa8 	bl	800a1a8 <memset>
 800ac58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ac5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ac60:	4620      	mov	r0, r4
 800ac62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac64:	3468      	adds	r4, #104	; 0x68
 800ac66:	e7d9      	b.n	800ac1c <__sfp+0x1c>
 800ac68:	2104      	movs	r1, #4
 800ac6a:	4638      	mov	r0, r7
 800ac6c:	f7ff ff62 	bl	800ab34 <__sfmoreglue>
 800ac70:	4604      	mov	r4, r0
 800ac72:	6030      	str	r0, [r6, #0]
 800ac74:	2800      	cmp	r0, #0
 800ac76:	d1d5      	bne.n	800ac24 <__sfp+0x24>
 800ac78:	f7ff ff78 	bl	800ab6c <__sfp_lock_release>
 800ac7c:	230c      	movs	r3, #12
 800ac7e:	603b      	str	r3, [r7, #0]
 800ac80:	e7ee      	b.n	800ac60 <__sfp+0x60>
 800ac82:	bf00      	nop
 800ac84:	0800cfa0 	.word	0x0800cfa0
 800ac88:	ffff0001 	.word	0xffff0001

0800ac8c <_fwalk_reent>:
 800ac8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac90:	4606      	mov	r6, r0
 800ac92:	4688      	mov	r8, r1
 800ac94:	2700      	movs	r7, #0
 800ac96:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac9a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac9e:	f1b9 0901 	subs.w	r9, r9, #1
 800aca2:	d505      	bpl.n	800acb0 <_fwalk_reent+0x24>
 800aca4:	6824      	ldr	r4, [r4, #0]
 800aca6:	2c00      	cmp	r4, #0
 800aca8:	d1f7      	bne.n	800ac9a <_fwalk_reent+0xe>
 800acaa:	4638      	mov	r0, r7
 800acac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acb0:	89ab      	ldrh	r3, [r5, #12]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d907      	bls.n	800acc6 <_fwalk_reent+0x3a>
 800acb6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acba:	3301      	adds	r3, #1
 800acbc:	d003      	beq.n	800acc6 <_fwalk_reent+0x3a>
 800acbe:	4629      	mov	r1, r5
 800acc0:	4630      	mov	r0, r6
 800acc2:	47c0      	blx	r8
 800acc4:	4307      	orrs	r7, r0
 800acc6:	3568      	adds	r5, #104	; 0x68
 800acc8:	e7e9      	b.n	800ac9e <_fwalk_reent+0x12>

0800acca <__retarget_lock_init_recursive>:
 800acca:	4770      	bx	lr

0800accc <__retarget_lock_acquire_recursive>:
 800accc:	4770      	bx	lr

0800acce <__retarget_lock_release_recursive>:
 800acce:	4770      	bx	lr

0800acd0 <__swhatbuf_r>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	460e      	mov	r6, r1
 800acd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd8:	4614      	mov	r4, r2
 800acda:	2900      	cmp	r1, #0
 800acdc:	461d      	mov	r5, r3
 800acde:	b096      	sub	sp, #88	; 0x58
 800ace0:	da08      	bge.n	800acf4 <__swhatbuf_r+0x24>
 800ace2:	2200      	movs	r2, #0
 800ace4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ace8:	602a      	str	r2, [r5, #0]
 800acea:	061a      	lsls	r2, r3, #24
 800acec:	d410      	bmi.n	800ad10 <__swhatbuf_r+0x40>
 800acee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acf2:	e00e      	b.n	800ad12 <__swhatbuf_r+0x42>
 800acf4:	466a      	mov	r2, sp
 800acf6:	f000 fb99 	bl	800b42c <_fstat_r>
 800acfa:	2800      	cmp	r0, #0
 800acfc:	dbf1      	blt.n	800ace2 <__swhatbuf_r+0x12>
 800acfe:	9a01      	ldr	r2, [sp, #4]
 800ad00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ad04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ad08:	425a      	negs	r2, r3
 800ad0a:	415a      	adcs	r2, r3
 800ad0c:	602a      	str	r2, [r5, #0]
 800ad0e:	e7ee      	b.n	800acee <__swhatbuf_r+0x1e>
 800ad10:	2340      	movs	r3, #64	; 0x40
 800ad12:	2000      	movs	r0, #0
 800ad14:	6023      	str	r3, [r4, #0]
 800ad16:	b016      	add	sp, #88	; 0x58
 800ad18:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ad1c <__smakebuf_r>:
 800ad1c:	898b      	ldrh	r3, [r1, #12]
 800ad1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad20:	079d      	lsls	r5, r3, #30
 800ad22:	4606      	mov	r6, r0
 800ad24:	460c      	mov	r4, r1
 800ad26:	d507      	bpl.n	800ad38 <__smakebuf_r+0x1c>
 800ad28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	6123      	str	r3, [r4, #16]
 800ad30:	2301      	movs	r3, #1
 800ad32:	6163      	str	r3, [r4, #20]
 800ad34:	b002      	add	sp, #8
 800ad36:	bd70      	pop	{r4, r5, r6, pc}
 800ad38:	466a      	mov	r2, sp
 800ad3a:	ab01      	add	r3, sp, #4
 800ad3c:	f7ff ffc8 	bl	800acd0 <__swhatbuf_r>
 800ad40:	9900      	ldr	r1, [sp, #0]
 800ad42:	4605      	mov	r5, r0
 800ad44:	4630      	mov	r0, r6
 800ad46:	f000 f8b9 	bl	800aebc <_malloc_r>
 800ad4a:	b948      	cbnz	r0, 800ad60 <__smakebuf_r+0x44>
 800ad4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad50:	059a      	lsls	r2, r3, #22
 800ad52:	d4ef      	bmi.n	800ad34 <__smakebuf_r+0x18>
 800ad54:	f023 0303 	bic.w	r3, r3, #3
 800ad58:	f043 0302 	orr.w	r3, r3, #2
 800ad5c:	81a3      	strh	r3, [r4, #12]
 800ad5e:	e7e3      	b.n	800ad28 <__smakebuf_r+0xc>
 800ad60:	4b0d      	ldr	r3, [pc, #52]	; (800ad98 <__smakebuf_r+0x7c>)
 800ad62:	62b3      	str	r3, [r6, #40]	; 0x28
 800ad64:	89a3      	ldrh	r3, [r4, #12]
 800ad66:	6020      	str	r0, [r4, #0]
 800ad68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad6c:	81a3      	strh	r3, [r4, #12]
 800ad6e:	9b00      	ldr	r3, [sp, #0]
 800ad70:	6120      	str	r0, [r4, #16]
 800ad72:	6163      	str	r3, [r4, #20]
 800ad74:	9b01      	ldr	r3, [sp, #4]
 800ad76:	b15b      	cbz	r3, 800ad90 <__smakebuf_r+0x74>
 800ad78:	4630      	mov	r0, r6
 800ad7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad7e:	f000 fb67 	bl	800b450 <_isatty_r>
 800ad82:	b128      	cbz	r0, 800ad90 <__smakebuf_r+0x74>
 800ad84:	89a3      	ldrh	r3, [r4, #12]
 800ad86:	f023 0303 	bic.w	r3, r3, #3
 800ad8a:	f043 0301 	orr.w	r3, r3, #1
 800ad8e:	81a3      	strh	r3, [r4, #12]
 800ad90:	89a0      	ldrh	r0, [r4, #12]
 800ad92:	4305      	orrs	r5, r0
 800ad94:	81a5      	strh	r5, [r4, #12]
 800ad96:	e7cd      	b.n	800ad34 <__smakebuf_r+0x18>
 800ad98:	0800ab29 	.word	0x0800ab29

0800ad9c <memchr>:
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	b510      	push	{r4, lr}
 800ada0:	b2c9      	uxtb	r1, r1
 800ada2:	4402      	add	r2, r0
 800ada4:	4293      	cmp	r3, r2
 800ada6:	4618      	mov	r0, r3
 800ada8:	d101      	bne.n	800adae <memchr+0x12>
 800adaa:	2000      	movs	r0, #0
 800adac:	e003      	b.n	800adb6 <memchr+0x1a>
 800adae:	7804      	ldrb	r4, [r0, #0]
 800adb0:	3301      	adds	r3, #1
 800adb2:	428c      	cmp	r4, r1
 800adb4:	d1f6      	bne.n	800ada4 <memchr+0x8>
 800adb6:	bd10      	pop	{r4, pc}

0800adb8 <memmove>:
 800adb8:	4288      	cmp	r0, r1
 800adba:	b510      	push	{r4, lr}
 800adbc:	eb01 0402 	add.w	r4, r1, r2
 800adc0:	d902      	bls.n	800adc8 <memmove+0x10>
 800adc2:	4284      	cmp	r4, r0
 800adc4:	4623      	mov	r3, r4
 800adc6:	d807      	bhi.n	800add8 <memmove+0x20>
 800adc8:	1e43      	subs	r3, r0, #1
 800adca:	42a1      	cmp	r1, r4
 800adcc:	d008      	beq.n	800ade0 <memmove+0x28>
 800adce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800add2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800add6:	e7f8      	b.n	800adca <memmove+0x12>
 800add8:	4601      	mov	r1, r0
 800adda:	4402      	add	r2, r0
 800addc:	428a      	cmp	r2, r1
 800adde:	d100      	bne.n	800ade2 <memmove+0x2a>
 800ade0:	bd10      	pop	{r4, pc}
 800ade2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ade6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adea:	e7f7      	b.n	800addc <memmove+0x24>

0800adec <_free_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4605      	mov	r5, r0
 800adf0:	2900      	cmp	r1, #0
 800adf2:	d040      	beq.n	800ae76 <_free_r+0x8a>
 800adf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adf8:	1f0c      	subs	r4, r1, #4
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	bfb8      	it	lt
 800adfe:	18e4      	addlt	r4, r4, r3
 800ae00:	f000 fb48 	bl	800b494 <__malloc_lock>
 800ae04:	4a1c      	ldr	r2, [pc, #112]	; (800ae78 <_free_r+0x8c>)
 800ae06:	6813      	ldr	r3, [r2, #0]
 800ae08:	b933      	cbnz	r3, 800ae18 <_free_r+0x2c>
 800ae0a:	6063      	str	r3, [r4, #4]
 800ae0c:	6014      	str	r4, [r2, #0]
 800ae0e:	4628      	mov	r0, r5
 800ae10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae14:	f000 bb44 	b.w	800b4a0 <__malloc_unlock>
 800ae18:	42a3      	cmp	r3, r4
 800ae1a:	d908      	bls.n	800ae2e <_free_r+0x42>
 800ae1c:	6820      	ldr	r0, [r4, #0]
 800ae1e:	1821      	adds	r1, r4, r0
 800ae20:	428b      	cmp	r3, r1
 800ae22:	bf01      	itttt	eq
 800ae24:	6819      	ldreq	r1, [r3, #0]
 800ae26:	685b      	ldreq	r3, [r3, #4]
 800ae28:	1809      	addeq	r1, r1, r0
 800ae2a:	6021      	streq	r1, [r4, #0]
 800ae2c:	e7ed      	b.n	800ae0a <_free_r+0x1e>
 800ae2e:	461a      	mov	r2, r3
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	b10b      	cbz	r3, 800ae38 <_free_r+0x4c>
 800ae34:	42a3      	cmp	r3, r4
 800ae36:	d9fa      	bls.n	800ae2e <_free_r+0x42>
 800ae38:	6811      	ldr	r1, [r2, #0]
 800ae3a:	1850      	adds	r0, r2, r1
 800ae3c:	42a0      	cmp	r0, r4
 800ae3e:	d10b      	bne.n	800ae58 <_free_r+0x6c>
 800ae40:	6820      	ldr	r0, [r4, #0]
 800ae42:	4401      	add	r1, r0
 800ae44:	1850      	adds	r0, r2, r1
 800ae46:	4283      	cmp	r3, r0
 800ae48:	6011      	str	r1, [r2, #0]
 800ae4a:	d1e0      	bne.n	800ae0e <_free_r+0x22>
 800ae4c:	6818      	ldr	r0, [r3, #0]
 800ae4e:	685b      	ldr	r3, [r3, #4]
 800ae50:	4401      	add	r1, r0
 800ae52:	6011      	str	r1, [r2, #0]
 800ae54:	6053      	str	r3, [r2, #4]
 800ae56:	e7da      	b.n	800ae0e <_free_r+0x22>
 800ae58:	d902      	bls.n	800ae60 <_free_r+0x74>
 800ae5a:	230c      	movs	r3, #12
 800ae5c:	602b      	str	r3, [r5, #0]
 800ae5e:	e7d6      	b.n	800ae0e <_free_r+0x22>
 800ae60:	6820      	ldr	r0, [r4, #0]
 800ae62:	1821      	adds	r1, r4, r0
 800ae64:	428b      	cmp	r3, r1
 800ae66:	bf01      	itttt	eq
 800ae68:	6819      	ldreq	r1, [r3, #0]
 800ae6a:	685b      	ldreq	r3, [r3, #4]
 800ae6c:	1809      	addeq	r1, r1, r0
 800ae6e:	6021      	streq	r1, [r4, #0]
 800ae70:	6063      	str	r3, [r4, #4]
 800ae72:	6054      	str	r4, [r2, #4]
 800ae74:	e7cb      	b.n	800ae0e <_free_r+0x22>
 800ae76:	bd38      	pop	{r3, r4, r5, pc}
 800ae78:	20007fb0 	.word	0x20007fb0

0800ae7c <sbrk_aligned>:
 800ae7c:	b570      	push	{r4, r5, r6, lr}
 800ae7e:	4e0e      	ldr	r6, [pc, #56]	; (800aeb8 <sbrk_aligned+0x3c>)
 800ae80:	460c      	mov	r4, r1
 800ae82:	6831      	ldr	r1, [r6, #0]
 800ae84:	4605      	mov	r5, r0
 800ae86:	b911      	cbnz	r1, 800ae8e <sbrk_aligned+0x12>
 800ae88:	f000 fa16 	bl	800b2b8 <_sbrk_r>
 800ae8c:	6030      	str	r0, [r6, #0]
 800ae8e:	4621      	mov	r1, r4
 800ae90:	4628      	mov	r0, r5
 800ae92:	f000 fa11 	bl	800b2b8 <_sbrk_r>
 800ae96:	1c43      	adds	r3, r0, #1
 800ae98:	d00a      	beq.n	800aeb0 <sbrk_aligned+0x34>
 800ae9a:	1cc4      	adds	r4, r0, #3
 800ae9c:	f024 0403 	bic.w	r4, r4, #3
 800aea0:	42a0      	cmp	r0, r4
 800aea2:	d007      	beq.n	800aeb4 <sbrk_aligned+0x38>
 800aea4:	1a21      	subs	r1, r4, r0
 800aea6:	4628      	mov	r0, r5
 800aea8:	f000 fa06 	bl	800b2b8 <_sbrk_r>
 800aeac:	3001      	adds	r0, #1
 800aeae:	d101      	bne.n	800aeb4 <sbrk_aligned+0x38>
 800aeb0:	f04f 34ff 	mov.w	r4, #4294967295
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	bd70      	pop	{r4, r5, r6, pc}
 800aeb8:	20007fb4 	.word	0x20007fb4

0800aebc <_malloc_r>:
 800aebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aec0:	1ccd      	adds	r5, r1, #3
 800aec2:	f025 0503 	bic.w	r5, r5, #3
 800aec6:	3508      	adds	r5, #8
 800aec8:	2d0c      	cmp	r5, #12
 800aeca:	bf38      	it	cc
 800aecc:	250c      	movcc	r5, #12
 800aece:	2d00      	cmp	r5, #0
 800aed0:	4607      	mov	r7, r0
 800aed2:	db01      	blt.n	800aed8 <_malloc_r+0x1c>
 800aed4:	42a9      	cmp	r1, r5
 800aed6:	d905      	bls.n	800aee4 <_malloc_r+0x28>
 800aed8:	230c      	movs	r3, #12
 800aeda:	2600      	movs	r6, #0
 800aedc:	603b      	str	r3, [r7, #0]
 800aede:	4630      	mov	r0, r6
 800aee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aee4:	4e2e      	ldr	r6, [pc, #184]	; (800afa0 <_malloc_r+0xe4>)
 800aee6:	f000 fad5 	bl	800b494 <__malloc_lock>
 800aeea:	6833      	ldr	r3, [r6, #0]
 800aeec:	461c      	mov	r4, r3
 800aeee:	bb34      	cbnz	r4, 800af3e <_malloc_r+0x82>
 800aef0:	4629      	mov	r1, r5
 800aef2:	4638      	mov	r0, r7
 800aef4:	f7ff ffc2 	bl	800ae7c <sbrk_aligned>
 800aef8:	1c43      	adds	r3, r0, #1
 800aefa:	4604      	mov	r4, r0
 800aefc:	d14d      	bne.n	800af9a <_malloc_r+0xde>
 800aefe:	6834      	ldr	r4, [r6, #0]
 800af00:	4626      	mov	r6, r4
 800af02:	2e00      	cmp	r6, #0
 800af04:	d140      	bne.n	800af88 <_malloc_r+0xcc>
 800af06:	6823      	ldr	r3, [r4, #0]
 800af08:	4631      	mov	r1, r6
 800af0a:	4638      	mov	r0, r7
 800af0c:	eb04 0803 	add.w	r8, r4, r3
 800af10:	f000 f9d2 	bl	800b2b8 <_sbrk_r>
 800af14:	4580      	cmp	r8, r0
 800af16:	d13a      	bne.n	800af8e <_malloc_r+0xd2>
 800af18:	6821      	ldr	r1, [r4, #0]
 800af1a:	3503      	adds	r5, #3
 800af1c:	1a6d      	subs	r5, r5, r1
 800af1e:	f025 0503 	bic.w	r5, r5, #3
 800af22:	3508      	adds	r5, #8
 800af24:	2d0c      	cmp	r5, #12
 800af26:	bf38      	it	cc
 800af28:	250c      	movcc	r5, #12
 800af2a:	4638      	mov	r0, r7
 800af2c:	4629      	mov	r1, r5
 800af2e:	f7ff ffa5 	bl	800ae7c <sbrk_aligned>
 800af32:	3001      	adds	r0, #1
 800af34:	d02b      	beq.n	800af8e <_malloc_r+0xd2>
 800af36:	6823      	ldr	r3, [r4, #0]
 800af38:	442b      	add	r3, r5
 800af3a:	6023      	str	r3, [r4, #0]
 800af3c:	e00e      	b.n	800af5c <_malloc_r+0xa0>
 800af3e:	6822      	ldr	r2, [r4, #0]
 800af40:	1b52      	subs	r2, r2, r5
 800af42:	d41e      	bmi.n	800af82 <_malloc_r+0xc6>
 800af44:	2a0b      	cmp	r2, #11
 800af46:	d916      	bls.n	800af76 <_malloc_r+0xba>
 800af48:	1961      	adds	r1, r4, r5
 800af4a:	42a3      	cmp	r3, r4
 800af4c:	6025      	str	r5, [r4, #0]
 800af4e:	bf18      	it	ne
 800af50:	6059      	strne	r1, [r3, #4]
 800af52:	6863      	ldr	r3, [r4, #4]
 800af54:	bf08      	it	eq
 800af56:	6031      	streq	r1, [r6, #0]
 800af58:	5162      	str	r2, [r4, r5]
 800af5a:	604b      	str	r3, [r1, #4]
 800af5c:	4638      	mov	r0, r7
 800af5e:	f104 060b 	add.w	r6, r4, #11
 800af62:	f000 fa9d 	bl	800b4a0 <__malloc_unlock>
 800af66:	f026 0607 	bic.w	r6, r6, #7
 800af6a:	1d23      	adds	r3, r4, #4
 800af6c:	1af2      	subs	r2, r6, r3
 800af6e:	d0b6      	beq.n	800aede <_malloc_r+0x22>
 800af70:	1b9b      	subs	r3, r3, r6
 800af72:	50a3      	str	r3, [r4, r2]
 800af74:	e7b3      	b.n	800aede <_malloc_r+0x22>
 800af76:	6862      	ldr	r2, [r4, #4]
 800af78:	42a3      	cmp	r3, r4
 800af7a:	bf0c      	ite	eq
 800af7c:	6032      	streq	r2, [r6, #0]
 800af7e:	605a      	strne	r2, [r3, #4]
 800af80:	e7ec      	b.n	800af5c <_malloc_r+0xa0>
 800af82:	4623      	mov	r3, r4
 800af84:	6864      	ldr	r4, [r4, #4]
 800af86:	e7b2      	b.n	800aeee <_malloc_r+0x32>
 800af88:	4634      	mov	r4, r6
 800af8a:	6876      	ldr	r6, [r6, #4]
 800af8c:	e7b9      	b.n	800af02 <_malloc_r+0x46>
 800af8e:	230c      	movs	r3, #12
 800af90:	4638      	mov	r0, r7
 800af92:	603b      	str	r3, [r7, #0]
 800af94:	f000 fa84 	bl	800b4a0 <__malloc_unlock>
 800af98:	e7a1      	b.n	800aede <_malloc_r+0x22>
 800af9a:	6025      	str	r5, [r4, #0]
 800af9c:	e7de      	b.n	800af5c <_malloc_r+0xa0>
 800af9e:	bf00      	nop
 800afa0:	20007fb0 	.word	0x20007fb0

0800afa4 <_realloc_r>:
 800afa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afa8:	4680      	mov	r8, r0
 800afaa:	4614      	mov	r4, r2
 800afac:	460e      	mov	r6, r1
 800afae:	b921      	cbnz	r1, 800afba <_realloc_r+0x16>
 800afb0:	4611      	mov	r1, r2
 800afb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800afb6:	f7ff bf81 	b.w	800aebc <_malloc_r>
 800afba:	b92a      	cbnz	r2, 800afc8 <_realloc_r+0x24>
 800afbc:	f7ff ff16 	bl	800adec <_free_r>
 800afc0:	4625      	mov	r5, r4
 800afc2:	4628      	mov	r0, r5
 800afc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afc8:	f000 fa70 	bl	800b4ac <_malloc_usable_size_r>
 800afcc:	4284      	cmp	r4, r0
 800afce:	4607      	mov	r7, r0
 800afd0:	d802      	bhi.n	800afd8 <_realloc_r+0x34>
 800afd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800afd6:	d812      	bhi.n	800affe <_realloc_r+0x5a>
 800afd8:	4621      	mov	r1, r4
 800afda:	4640      	mov	r0, r8
 800afdc:	f7ff ff6e 	bl	800aebc <_malloc_r>
 800afe0:	4605      	mov	r5, r0
 800afe2:	2800      	cmp	r0, #0
 800afe4:	d0ed      	beq.n	800afc2 <_realloc_r+0x1e>
 800afe6:	42bc      	cmp	r4, r7
 800afe8:	4622      	mov	r2, r4
 800afea:	4631      	mov	r1, r6
 800afec:	bf28      	it	cs
 800afee:	463a      	movcs	r2, r7
 800aff0:	f7ff f8cc 	bl	800a18c <memcpy>
 800aff4:	4631      	mov	r1, r6
 800aff6:	4640      	mov	r0, r8
 800aff8:	f7ff fef8 	bl	800adec <_free_r>
 800affc:	e7e1      	b.n	800afc2 <_realloc_r+0x1e>
 800affe:	4635      	mov	r5, r6
 800b000:	e7df      	b.n	800afc2 <_realloc_r+0x1e>

0800b002 <__ssputs_r>:
 800b002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b006:	688e      	ldr	r6, [r1, #8]
 800b008:	4682      	mov	sl, r0
 800b00a:	429e      	cmp	r6, r3
 800b00c:	460c      	mov	r4, r1
 800b00e:	4690      	mov	r8, r2
 800b010:	461f      	mov	r7, r3
 800b012:	d838      	bhi.n	800b086 <__ssputs_r+0x84>
 800b014:	898a      	ldrh	r2, [r1, #12]
 800b016:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b01a:	d032      	beq.n	800b082 <__ssputs_r+0x80>
 800b01c:	6825      	ldr	r5, [r4, #0]
 800b01e:	6909      	ldr	r1, [r1, #16]
 800b020:	3301      	adds	r3, #1
 800b022:	eba5 0901 	sub.w	r9, r5, r1
 800b026:	6965      	ldr	r5, [r4, #20]
 800b028:	444b      	add	r3, r9
 800b02a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b02e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b032:	106d      	asrs	r5, r5, #1
 800b034:	429d      	cmp	r5, r3
 800b036:	bf38      	it	cc
 800b038:	461d      	movcc	r5, r3
 800b03a:	0553      	lsls	r3, r2, #21
 800b03c:	d531      	bpl.n	800b0a2 <__ssputs_r+0xa0>
 800b03e:	4629      	mov	r1, r5
 800b040:	f7ff ff3c 	bl	800aebc <_malloc_r>
 800b044:	4606      	mov	r6, r0
 800b046:	b950      	cbnz	r0, 800b05e <__ssputs_r+0x5c>
 800b048:	230c      	movs	r3, #12
 800b04a:	f04f 30ff 	mov.w	r0, #4294967295
 800b04e:	f8ca 3000 	str.w	r3, [sl]
 800b052:	89a3      	ldrh	r3, [r4, #12]
 800b054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b058:	81a3      	strh	r3, [r4, #12]
 800b05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b05e:	464a      	mov	r2, r9
 800b060:	6921      	ldr	r1, [r4, #16]
 800b062:	f7ff f893 	bl	800a18c <memcpy>
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b06c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b070:	81a3      	strh	r3, [r4, #12]
 800b072:	6126      	str	r6, [r4, #16]
 800b074:	444e      	add	r6, r9
 800b076:	6026      	str	r6, [r4, #0]
 800b078:	463e      	mov	r6, r7
 800b07a:	6165      	str	r5, [r4, #20]
 800b07c:	eba5 0509 	sub.w	r5, r5, r9
 800b080:	60a5      	str	r5, [r4, #8]
 800b082:	42be      	cmp	r6, r7
 800b084:	d900      	bls.n	800b088 <__ssputs_r+0x86>
 800b086:	463e      	mov	r6, r7
 800b088:	4632      	mov	r2, r6
 800b08a:	4641      	mov	r1, r8
 800b08c:	6820      	ldr	r0, [r4, #0]
 800b08e:	f7ff fe93 	bl	800adb8 <memmove>
 800b092:	68a3      	ldr	r3, [r4, #8]
 800b094:	2000      	movs	r0, #0
 800b096:	1b9b      	subs	r3, r3, r6
 800b098:	60a3      	str	r3, [r4, #8]
 800b09a:	6823      	ldr	r3, [r4, #0]
 800b09c:	4433      	add	r3, r6
 800b09e:	6023      	str	r3, [r4, #0]
 800b0a0:	e7db      	b.n	800b05a <__ssputs_r+0x58>
 800b0a2:	462a      	mov	r2, r5
 800b0a4:	f7ff ff7e 	bl	800afa4 <_realloc_r>
 800b0a8:	4606      	mov	r6, r0
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	d1e1      	bne.n	800b072 <__ssputs_r+0x70>
 800b0ae:	4650      	mov	r0, sl
 800b0b0:	6921      	ldr	r1, [r4, #16]
 800b0b2:	f7ff fe9b 	bl	800adec <_free_r>
 800b0b6:	e7c7      	b.n	800b048 <__ssputs_r+0x46>

0800b0b8 <_svfiprintf_r>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	4698      	mov	r8, r3
 800b0be:	898b      	ldrh	r3, [r1, #12]
 800b0c0:	4607      	mov	r7, r0
 800b0c2:	061b      	lsls	r3, r3, #24
 800b0c4:	460d      	mov	r5, r1
 800b0c6:	4614      	mov	r4, r2
 800b0c8:	b09d      	sub	sp, #116	; 0x74
 800b0ca:	d50e      	bpl.n	800b0ea <_svfiprintf_r+0x32>
 800b0cc:	690b      	ldr	r3, [r1, #16]
 800b0ce:	b963      	cbnz	r3, 800b0ea <_svfiprintf_r+0x32>
 800b0d0:	2140      	movs	r1, #64	; 0x40
 800b0d2:	f7ff fef3 	bl	800aebc <_malloc_r>
 800b0d6:	6028      	str	r0, [r5, #0]
 800b0d8:	6128      	str	r0, [r5, #16]
 800b0da:	b920      	cbnz	r0, 800b0e6 <_svfiprintf_r+0x2e>
 800b0dc:	230c      	movs	r3, #12
 800b0de:	603b      	str	r3, [r7, #0]
 800b0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e4:	e0d1      	b.n	800b28a <_svfiprintf_r+0x1d2>
 800b0e6:	2340      	movs	r3, #64	; 0x40
 800b0e8:	616b      	str	r3, [r5, #20]
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b0ee:	2320      	movs	r3, #32
 800b0f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0f4:	2330      	movs	r3, #48	; 0x30
 800b0f6:	f04f 0901 	mov.w	r9, #1
 800b0fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b2a4 <_svfiprintf_r+0x1ec>
 800b102:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b106:	4623      	mov	r3, r4
 800b108:	469a      	mov	sl, r3
 800b10a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b10e:	b10a      	cbz	r2, 800b114 <_svfiprintf_r+0x5c>
 800b110:	2a25      	cmp	r2, #37	; 0x25
 800b112:	d1f9      	bne.n	800b108 <_svfiprintf_r+0x50>
 800b114:	ebba 0b04 	subs.w	fp, sl, r4
 800b118:	d00b      	beq.n	800b132 <_svfiprintf_r+0x7a>
 800b11a:	465b      	mov	r3, fp
 800b11c:	4622      	mov	r2, r4
 800b11e:	4629      	mov	r1, r5
 800b120:	4638      	mov	r0, r7
 800b122:	f7ff ff6e 	bl	800b002 <__ssputs_r>
 800b126:	3001      	adds	r0, #1
 800b128:	f000 80aa 	beq.w	800b280 <_svfiprintf_r+0x1c8>
 800b12c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b12e:	445a      	add	r2, fp
 800b130:	9209      	str	r2, [sp, #36]	; 0x24
 800b132:	f89a 3000 	ldrb.w	r3, [sl]
 800b136:	2b00      	cmp	r3, #0
 800b138:	f000 80a2 	beq.w	800b280 <_svfiprintf_r+0x1c8>
 800b13c:	2300      	movs	r3, #0
 800b13e:	f04f 32ff 	mov.w	r2, #4294967295
 800b142:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b146:	f10a 0a01 	add.w	sl, sl, #1
 800b14a:	9304      	str	r3, [sp, #16]
 800b14c:	9307      	str	r3, [sp, #28]
 800b14e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b152:	931a      	str	r3, [sp, #104]	; 0x68
 800b154:	4654      	mov	r4, sl
 800b156:	2205      	movs	r2, #5
 800b158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b15c:	4851      	ldr	r0, [pc, #324]	; (800b2a4 <_svfiprintf_r+0x1ec>)
 800b15e:	f7ff fe1d 	bl	800ad9c <memchr>
 800b162:	9a04      	ldr	r2, [sp, #16]
 800b164:	b9d8      	cbnz	r0, 800b19e <_svfiprintf_r+0xe6>
 800b166:	06d0      	lsls	r0, r2, #27
 800b168:	bf44      	itt	mi
 800b16a:	2320      	movmi	r3, #32
 800b16c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b170:	0711      	lsls	r1, r2, #28
 800b172:	bf44      	itt	mi
 800b174:	232b      	movmi	r3, #43	; 0x2b
 800b176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b17a:	f89a 3000 	ldrb.w	r3, [sl]
 800b17e:	2b2a      	cmp	r3, #42	; 0x2a
 800b180:	d015      	beq.n	800b1ae <_svfiprintf_r+0xf6>
 800b182:	4654      	mov	r4, sl
 800b184:	2000      	movs	r0, #0
 800b186:	f04f 0c0a 	mov.w	ip, #10
 800b18a:	9a07      	ldr	r2, [sp, #28]
 800b18c:	4621      	mov	r1, r4
 800b18e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b192:	3b30      	subs	r3, #48	; 0x30
 800b194:	2b09      	cmp	r3, #9
 800b196:	d94e      	bls.n	800b236 <_svfiprintf_r+0x17e>
 800b198:	b1b0      	cbz	r0, 800b1c8 <_svfiprintf_r+0x110>
 800b19a:	9207      	str	r2, [sp, #28]
 800b19c:	e014      	b.n	800b1c8 <_svfiprintf_r+0x110>
 800b19e:	eba0 0308 	sub.w	r3, r0, r8
 800b1a2:	fa09 f303 	lsl.w	r3, r9, r3
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	46a2      	mov	sl, r4
 800b1aa:	9304      	str	r3, [sp, #16]
 800b1ac:	e7d2      	b.n	800b154 <_svfiprintf_r+0x9c>
 800b1ae:	9b03      	ldr	r3, [sp, #12]
 800b1b0:	1d19      	adds	r1, r3, #4
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	9103      	str	r1, [sp, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	bfbb      	ittet	lt
 800b1ba:	425b      	neglt	r3, r3
 800b1bc:	f042 0202 	orrlt.w	r2, r2, #2
 800b1c0:	9307      	strge	r3, [sp, #28]
 800b1c2:	9307      	strlt	r3, [sp, #28]
 800b1c4:	bfb8      	it	lt
 800b1c6:	9204      	strlt	r2, [sp, #16]
 800b1c8:	7823      	ldrb	r3, [r4, #0]
 800b1ca:	2b2e      	cmp	r3, #46	; 0x2e
 800b1cc:	d10c      	bne.n	800b1e8 <_svfiprintf_r+0x130>
 800b1ce:	7863      	ldrb	r3, [r4, #1]
 800b1d0:	2b2a      	cmp	r3, #42	; 0x2a
 800b1d2:	d135      	bne.n	800b240 <_svfiprintf_r+0x188>
 800b1d4:	9b03      	ldr	r3, [sp, #12]
 800b1d6:	3402      	adds	r4, #2
 800b1d8:	1d1a      	adds	r2, r3, #4
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	9203      	str	r2, [sp, #12]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	bfb8      	it	lt
 800b1e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b1e6:	9305      	str	r3, [sp, #20]
 800b1e8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800b2a8 <_svfiprintf_r+0x1f0>
 800b1ec:	2203      	movs	r2, #3
 800b1ee:	4650      	mov	r0, sl
 800b1f0:	7821      	ldrb	r1, [r4, #0]
 800b1f2:	f7ff fdd3 	bl	800ad9c <memchr>
 800b1f6:	b140      	cbz	r0, 800b20a <_svfiprintf_r+0x152>
 800b1f8:	2340      	movs	r3, #64	; 0x40
 800b1fa:	eba0 000a 	sub.w	r0, r0, sl
 800b1fe:	fa03 f000 	lsl.w	r0, r3, r0
 800b202:	9b04      	ldr	r3, [sp, #16]
 800b204:	3401      	adds	r4, #1
 800b206:	4303      	orrs	r3, r0
 800b208:	9304      	str	r3, [sp, #16]
 800b20a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b20e:	2206      	movs	r2, #6
 800b210:	4826      	ldr	r0, [pc, #152]	; (800b2ac <_svfiprintf_r+0x1f4>)
 800b212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b216:	f7ff fdc1 	bl	800ad9c <memchr>
 800b21a:	2800      	cmp	r0, #0
 800b21c:	d038      	beq.n	800b290 <_svfiprintf_r+0x1d8>
 800b21e:	4b24      	ldr	r3, [pc, #144]	; (800b2b0 <_svfiprintf_r+0x1f8>)
 800b220:	bb1b      	cbnz	r3, 800b26a <_svfiprintf_r+0x1b2>
 800b222:	9b03      	ldr	r3, [sp, #12]
 800b224:	3307      	adds	r3, #7
 800b226:	f023 0307 	bic.w	r3, r3, #7
 800b22a:	3308      	adds	r3, #8
 800b22c:	9303      	str	r3, [sp, #12]
 800b22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b230:	4433      	add	r3, r6
 800b232:	9309      	str	r3, [sp, #36]	; 0x24
 800b234:	e767      	b.n	800b106 <_svfiprintf_r+0x4e>
 800b236:	460c      	mov	r4, r1
 800b238:	2001      	movs	r0, #1
 800b23a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b23e:	e7a5      	b.n	800b18c <_svfiprintf_r+0xd4>
 800b240:	2300      	movs	r3, #0
 800b242:	f04f 0c0a 	mov.w	ip, #10
 800b246:	4619      	mov	r1, r3
 800b248:	3401      	adds	r4, #1
 800b24a:	9305      	str	r3, [sp, #20]
 800b24c:	4620      	mov	r0, r4
 800b24e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b252:	3a30      	subs	r2, #48	; 0x30
 800b254:	2a09      	cmp	r2, #9
 800b256:	d903      	bls.n	800b260 <_svfiprintf_r+0x1a8>
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d0c5      	beq.n	800b1e8 <_svfiprintf_r+0x130>
 800b25c:	9105      	str	r1, [sp, #20]
 800b25e:	e7c3      	b.n	800b1e8 <_svfiprintf_r+0x130>
 800b260:	4604      	mov	r4, r0
 800b262:	2301      	movs	r3, #1
 800b264:	fb0c 2101 	mla	r1, ip, r1, r2
 800b268:	e7f0      	b.n	800b24c <_svfiprintf_r+0x194>
 800b26a:	ab03      	add	r3, sp, #12
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	462a      	mov	r2, r5
 800b270:	4638      	mov	r0, r7
 800b272:	4b10      	ldr	r3, [pc, #64]	; (800b2b4 <_svfiprintf_r+0x1fc>)
 800b274:	a904      	add	r1, sp, #16
 800b276:	f3af 8000 	nop.w
 800b27a:	1c42      	adds	r2, r0, #1
 800b27c:	4606      	mov	r6, r0
 800b27e:	d1d6      	bne.n	800b22e <_svfiprintf_r+0x176>
 800b280:	89ab      	ldrh	r3, [r5, #12]
 800b282:	065b      	lsls	r3, r3, #25
 800b284:	f53f af2c 	bmi.w	800b0e0 <_svfiprintf_r+0x28>
 800b288:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b28a:	b01d      	add	sp, #116	; 0x74
 800b28c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b290:	ab03      	add	r3, sp, #12
 800b292:	9300      	str	r3, [sp, #0]
 800b294:	462a      	mov	r2, r5
 800b296:	4638      	mov	r0, r7
 800b298:	4b06      	ldr	r3, [pc, #24]	; (800b2b4 <_svfiprintf_r+0x1fc>)
 800b29a:	a904      	add	r1, sp, #16
 800b29c:	f7ff f954 	bl	800a548 <_printf_i>
 800b2a0:	e7eb      	b.n	800b27a <_svfiprintf_r+0x1c2>
 800b2a2:	bf00      	nop
 800b2a4:	0800cfa4 	.word	0x0800cfa4
 800b2a8:	0800cfaa 	.word	0x0800cfaa
 800b2ac:	0800cfae 	.word	0x0800cfae
 800b2b0:	00000000 	.word	0x00000000
 800b2b4:	0800b003 	.word	0x0800b003

0800b2b8 <_sbrk_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	4d05      	ldr	r5, [pc, #20]	; (800b2d4 <_sbrk_r+0x1c>)
 800b2be:	4604      	mov	r4, r0
 800b2c0:	4608      	mov	r0, r1
 800b2c2:	602b      	str	r3, [r5, #0]
 800b2c4:	f7fa fcf8 	bl	8005cb8 <_sbrk>
 800b2c8:	1c43      	adds	r3, r0, #1
 800b2ca:	d102      	bne.n	800b2d2 <_sbrk_r+0x1a>
 800b2cc:	682b      	ldr	r3, [r5, #0]
 800b2ce:	b103      	cbz	r3, 800b2d2 <_sbrk_r+0x1a>
 800b2d0:	6023      	str	r3, [r4, #0]
 800b2d2:	bd38      	pop	{r3, r4, r5, pc}
 800b2d4:	20007fb8 	.word	0x20007fb8

0800b2d8 <_raise_r>:
 800b2d8:	291f      	cmp	r1, #31
 800b2da:	b538      	push	{r3, r4, r5, lr}
 800b2dc:	4604      	mov	r4, r0
 800b2de:	460d      	mov	r5, r1
 800b2e0:	d904      	bls.n	800b2ec <_raise_r+0x14>
 800b2e2:	2316      	movs	r3, #22
 800b2e4:	6003      	str	r3, [r0, #0]
 800b2e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b2ea:	bd38      	pop	{r3, r4, r5, pc}
 800b2ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b2ee:	b112      	cbz	r2, 800b2f6 <_raise_r+0x1e>
 800b2f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b2f4:	b94b      	cbnz	r3, 800b30a <_raise_r+0x32>
 800b2f6:	4620      	mov	r0, r4
 800b2f8:	f000 f830 	bl	800b35c <_getpid_r>
 800b2fc:	462a      	mov	r2, r5
 800b2fe:	4601      	mov	r1, r0
 800b300:	4620      	mov	r0, r4
 800b302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b306:	f000 b817 	b.w	800b338 <_kill_r>
 800b30a:	2b01      	cmp	r3, #1
 800b30c:	d00a      	beq.n	800b324 <_raise_r+0x4c>
 800b30e:	1c59      	adds	r1, r3, #1
 800b310:	d103      	bne.n	800b31a <_raise_r+0x42>
 800b312:	2316      	movs	r3, #22
 800b314:	6003      	str	r3, [r0, #0]
 800b316:	2001      	movs	r0, #1
 800b318:	e7e7      	b.n	800b2ea <_raise_r+0x12>
 800b31a:	2400      	movs	r4, #0
 800b31c:	4628      	mov	r0, r5
 800b31e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b322:	4798      	blx	r3
 800b324:	2000      	movs	r0, #0
 800b326:	e7e0      	b.n	800b2ea <_raise_r+0x12>

0800b328 <raise>:
 800b328:	4b02      	ldr	r3, [pc, #8]	; (800b334 <raise+0xc>)
 800b32a:	4601      	mov	r1, r0
 800b32c:	6818      	ldr	r0, [r3, #0]
 800b32e:	f7ff bfd3 	b.w	800b2d8 <_raise_r>
 800b332:	bf00      	nop
 800b334:	20000018 	.word	0x20000018

0800b338 <_kill_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	2300      	movs	r3, #0
 800b33c:	4d06      	ldr	r5, [pc, #24]	; (800b358 <_kill_r+0x20>)
 800b33e:	4604      	mov	r4, r0
 800b340:	4608      	mov	r0, r1
 800b342:	4611      	mov	r1, r2
 800b344:	602b      	str	r3, [r5, #0]
 800b346:	f7fa fc34 	bl	8005bb2 <_kill>
 800b34a:	1c43      	adds	r3, r0, #1
 800b34c:	d102      	bne.n	800b354 <_kill_r+0x1c>
 800b34e:	682b      	ldr	r3, [r5, #0]
 800b350:	b103      	cbz	r3, 800b354 <_kill_r+0x1c>
 800b352:	6023      	str	r3, [r4, #0]
 800b354:	bd38      	pop	{r3, r4, r5, pc}
 800b356:	bf00      	nop
 800b358:	20007fb8 	.word	0x20007fb8

0800b35c <_getpid_r>:
 800b35c:	f7fa bc22 	b.w	8005ba4 <_getpid>

0800b360 <__sread>:
 800b360:	b510      	push	{r4, lr}
 800b362:	460c      	mov	r4, r1
 800b364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b368:	f000 f8a8 	bl	800b4bc <_read_r>
 800b36c:	2800      	cmp	r0, #0
 800b36e:	bfab      	itete	ge
 800b370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b372:	89a3      	ldrhlt	r3, [r4, #12]
 800b374:	181b      	addge	r3, r3, r0
 800b376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b37a:	bfac      	ite	ge
 800b37c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b37e:	81a3      	strhlt	r3, [r4, #12]
 800b380:	bd10      	pop	{r4, pc}

0800b382 <__swrite>:
 800b382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b386:	461f      	mov	r7, r3
 800b388:	898b      	ldrh	r3, [r1, #12]
 800b38a:	4605      	mov	r5, r0
 800b38c:	05db      	lsls	r3, r3, #23
 800b38e:	460c      	mov	r4, r1
 800b390:	4616      	mov	r6, r2
 800b392:	d505      	bpl.n	800b3a0 <__swrite+0x1e>
 800b394:	2302      	movs	r3, #2
 800b396:	2200      	movs	r2, #0
 800b398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b39c:	f000 f868 	bl	800b470 <_lseek_r>
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	4632      	mov	r2, r6
 800b3a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3a8:	81a3      	strh	r3, [r4, #12]
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	463b      	mov	r3, r7
 800b3ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b6:	f000 b817 	b.w	800b3e8 <_write_r>

0800b3ba <__sseek>:
 800b3ba:	b510      	push	{r4, lr}
 800b3bc:	460c      	mov	r4, r1
 800b3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c2:	f000 f855 	bl	800b470 <_lseek_r>
 800b3c6:	1c43      	adds	r3, r0, #1
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	bf15      	itete	ne
 800b3cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3d6:	81a3      	strheq	r3, [r4, #12]
 800b3d8:	bf18      	it	ne
 800b3da:	81a3      	strhne	r3, [r4, #12]
 800b3dc:	bd10      	pop	{r4, pc}

0800b3de <__sclose>:
 800b3de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3e2:	f000 b813 	b.w	800b40c <_close_r>
	...

0800b3e8 <_write_r>:
 800b3e8:	b538      	push	{r3, r4, r5, lr}
 800b3ea:	4604      	mov	r4, r0
 800b3ec:	4608      	mov	r0, r1
 800b3ee:	4611      	mov	r1, r2
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	4d05      	ldr	r5, [pc, #20]	; (800b408 <_write_r+0x20>)
 800b3f4:	602a      	str	r2, [r5, #0]
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	f7fa fc12 	bl	8005c20 <_write>
 800b3fc:	1c43      	adds	r3, r0, #1
 800b3fe:	d102      	bne.n	800b406 <_write_r+0x1e>
 800b400:	682b      	ldr	r3, [r5, #0]
 800b402:	b103      	cbz	r3, 800b406 <_write_r+0x1e>
 800b404:	6023      	str	r3, [r4, #0]
 800b406:	bd38      	pop	{r3, r4, r5, pc}
 800b408:	20007fb8 	.word	0x20007fb8

0800b40c <_close_r>:
 800b40c:	b538      	push	{r3, r4, r5, lr}
 800b40e:	2300      	movs	r3, #0
 800b410:	4d05      	ldr	r5, [pc, #20]	; (800b428 <_close_r+0x1c>)
 800b412:	4604      	mov	r4, r0
 800b414:	4608      	mov	r0, r1
 800b416:	602b      	str	r3, [r5, #0]
 800b418:	f7fa fc1e 	bl	8005c58 <_close>
 800b41c:	1c43      	adds	r3, r0, #1
 800b41e:	d102      	bne.n	800b426 <_close_r+0x1a>
 800b420:	682b      	ldr	r3, [r5, #0]
 800b422:	b103      	cbz	r3, 800b426 <_close_r+0x1a>
 800b424:	6023      	str	r3, [r4, #0]
 800b426:	bd38      	pop	{r3, r4, r5, pc}
 800b428:	20007fb8 	.word	0x20007fb8

0800b42c <_fstat_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	2300      	movs	r3, #0
 800b430:	4d06      	ldr	r5, [pc, #24]	; (800b44c <_fstat_r+0x20>)
 800b432:	4604      	mov	r4, r0
 800b434:	4608      	mov	r0, r1
 800b436:	4611      	mov	r1, r2
 800b438:	602b      	str	r3, [r5, #0]
 800b43a:	f7fa fc18 	bl	8005c6e <_fstat>
 800b43e:	1c43      	adds	r3, r0, #1
 800b440:	d102      	bne.n	800b448 <_fstat_r+0x1c>
 800b442:	682b      	ldr	r3, [r5, #0]
 800b444:	b103      	cbz	r3, 800b448 <_fstat_r+0x1c>
 800b446:	6023      	str	r3, [r4, #0]
 800b448:	bd38      	pop	{r3, r4, r5, pc}
 800b44a:	bf00      	nop
 800b44c:	20007fb8 	.word	0x20007fb8

0800b450 <_isatty_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	2300      	movs	r3, #0
 800b454:	4d05      	ldr	r5, [pc, #20]	; (800b46c <_isatty_r+0x1c>)
 800b456:	4604      	mov	r4, r0
 800b458:	4608      	mov	r0, r1
 800b45a:	602b      	str	r3, [r5, #0]
 800b45c:	f7fa fc16 	bl	8005c8c <_isatty>
 800b460:	1c43      	adds	r3, r0, #1
 800b462:	d102      	bne.n	800b46a <_isatty_r+0x1a>
 800b464:	682b      	ldr	r3, [r5, #0]
 800b466:	b103      	cbz	r3, 800b46a <_isatty_r+0x1a>
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	20007fb8 	.word	0x20007fb8

0800b470 <_lseek_r>:
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	4604      	mov	r4, r0
 800b474:	4608      	mov	r0, r1
 800b476:	4611      	mov	r1, r2
 800b478:	2200      	movs	r2, #0
 800b47a:	4d05      	ldr	r5, [pc, #20]	; (800b490 <_lseek_r+0x20>)
 800b47c:	602a      	str	r2, [r5, #0]
 800b47e:	461a      	mov	r2, r3
 800b480:	f7fa fc0e 	bl	8005ca0 <_lseek>
 800b484:	1c43      	adds	r3, r0, #1
 800b486:	d102      	bne.n	800b48e <_lseek_r+0x1e>
 800b488:	682b      	ldr	r3, [r5, #0]
 800b48a:	b103      	cbz	r3, 800b48e <_lseek_r+0x1e>
 800b48c:	6023      	str	r3, [r4, #0]
 800b48e:	bd38      	pop	{r3, r4, r5, pc}
 800b490:	20007fb8 	.word	0x20007fb8

0800b494 <__malloc_lock>:
 800b494:	4801      	ldr	r0, [pc, #4]	; (800b49c <__malloc_lock+0x8>)
 800b496:	f7ff bc19 	b.w	800accc <__retarget_lock_acquire_recursive>
 800b49a:	bf00      	nop
 800b49c:	20007fac 	.word	0x20007fac

0800b4a0 <__malloc_unlock>:
 800b4a0:	4801      	ldr	r0, [pc, #4]	; (800b4a8 <__malloc_unlock+0x8>)
 800b4a2:	f7ff bc14 	b.w	800acce <__retarget_lock_release_recursive>
 800b4a6:	bf00      	nop
 800b4a8:	20007fac 	.word	0x20007fac

0800b4ac <_malloc_usable_size_r>:
 800b4ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b4b0:	1f18      	subs	r0, r3, #4
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	bfbc      	itt	lt
 800b4b6:	580b      	ldrlt	r3, [r1, r0]
 800b4b8:	18c0      	addlt	r0, r0, r3
 800b4ba:	4770      	bx	lr

0800b4bc <_read_r>:
 800b4bc:	b538      	push	{r3, r4, r5, lr}
 800b4be:	4604      	mov	r4, r0
 800b4c0:	4608      	mov	r0, r1
 800b4c2:	4611      	mov	r1, r2
 800b4c4:	2200      	movs	r2, #0
 800b4c6:	4d05      	ldr	r5, [pc, #20]	; (800b4dc <_read_r+0x20>)
 800b4c8:	602a      	str	r2, [r5, #0]
 800b4ca:	461a      	mov	r2, r3
 800b4cc:	f7fa fb8b 	bl	8005be6 <_read>
 800b4d0:	1c43      	adds	r3, r0, #1
 800b4d2:	d102      	bne.n	800b4da <_read_r+0x1e>
 800b4d4:	682b      	ldr	r3, [r5, #0]
 800b4d6:	b103      	cbz	r3, 800b4da <_read_r+0x1e>
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	bd38      	pop	{r3, r4, r5, pc}
 800b4dc:	20007fb8 	.word	0x20007fb8

0800b4e0 <atan>:
 800b4e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e4:	4bb6      	ldr	r3, [pc, #728]	; (800b7c0 <atan+0x2e0>)
 800b4e6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b4ea:	429e      	cmp	r6, r3
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	460d      	mov	r5, r1
 800b4f0:	468b      	mov	fp, r1
 800b4f2:	dd17      	ble.n	800b524 <atan+0x44>
 800b4f4:	4bb3      	ldr	r3, [pc, #716]	; (800b7c4 <atan+0x2e4>)
 800b4f6:	429e      	cmp	r6, r3
 800b4f8:	dc01      	bgt.n	800b4fe <atan+0x1e>
 800b4fa:	d109      	bne.n	800b510 <atan+0x30>
 800b4fc:	b140      	cbz	r0, 800b510 <atan+0x30>
 800b4fe:	4622      	mov	r2, r4
 800b500:	462b      	mov	r3, r5
 800b502:	4620      	mov	r0, r4
 800b504:	4629      	mov	r1, r5
 800b506:	f7f4 fe95 	bl	8000234 <__adddf3>
 800b50a:	4604      	mov	r4, r0
 800b50c:	460d      	mov	r5, r1
 800b50e:	e005      	b.n	800b51c <atan+0x3c>
 800b510:	f1bb 0f00 	cmp.w	fp, #0
 800b514:	4cac      	ldr	r4, [pc, #688]	; (800b7c8 <atan+0x2e8>)
 800b516:	f300 8121 	bgt.w	800b75c <atan+0x27c>
 800b51a:	4dac      	ldr	r5, [pc, #688]	; (800b7cc <atan+0x2ec>)
 800b51c:	4620      	mov	r0, r4
 800b51e:	4629      	mov	r1, r5
 800b520:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b524:	4baa      	ldr	r3, [pc, #680]	; (800b7d0 <atan+0x2f0>)
 800b526:	429e      	cmp	r6, r3
 800b528:	dc11      	bgt.n	800b54e <atan+0x6e>
 800b52a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b52e:	429e      	cmp	r6, r3
 800b530:	dc0a      	bgt.n	800b548 <atan+0x68>
 800b532:	a38b      	add	r3, pc, #556	; (adr r3, 800b760 <atan+0x280>)
 800b534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b538:	f7f4 fe7c 	bl	8000234 <__adddf3>
 800b53c:	2200      	movs	r2, #0
 800b53e:	4ba5      	ldr	r3, [pc, #660]	; (800b7d4 <atan+0x2f4>)
 800b540:	f7f5 fabe 	bl	8000ac0 <__aeabi_dcmpgt>
 800b544:	2800      	cmp	r0, #0
 800b546:	d1e9      	bne.n	800b51c <atan+0x3c>
 800b548:	f04f 3aff 	mov.w	sl, #4294967295
 800b54c:	e027      	b.n	800b59e <atan+0xbe>
 800b54e:	f000 f997 	bl	800b880 <fabs>
 800b552:	4ba1      	ldr	r3, [pc, #644]	; (800b7d8 <atan+0x2f8>)
 800b554:	4604      	mov	r4, r0
 800b556:	429e      	cmp	r6, r3
 800b558:	460d      	mov	r5, r1
 800b55a:	f300 80b8 	bgt.w	800b6ce <atan+0x1ee>
 800b55e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b562:	429e      	cmp	r6, r3
 800b564:	f300 809c 	bgt.w	800b6a0 <atan+0x1c0>
 800b568:	4602      	mov	r2, r0
 800b56a:	460b      	mov	r3, r1
 800b56c:	f7f4 fe62 	bl	8000234 <__adddf3>
 800b570:	2200      	movs	r2, #0
 800b572:	4b98      	ldr	r3, [pc, #608]	; (800b7d4 <atan+0x2f4>)
 800b574:	f7f4 fe5c 	bl	8000230 <__aeabi_dsub>
 800b578:	2200      	movs	r2, #0
 800b57a:	4606      	mov	r6, r0
 800b57c:	460f      	mov	r7, r1
 800b57e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b582:	4620      	mov	r0, r4
 800b584:	4629      	mov	r1, r5
 800b586:	f7f4 fe55 	bl	8000234 <__adddf3>
 800b58a:	4602      	mov	r2, r0
 800b58c:	460b      	mov	r3, r1
 800b58e:	4630      	mov	r0, r6
 800b590:	4639      	mov	r1, r7
 800b592:	f7f5 f92f 	bl	80007f4 <__aeabi_ddiv>
 800b596:	f04f 0a00 	mov.w	sl, #0
 800b59a:	4604      	mov	r4, r0
 800b59c:	460d      	mov	r5, r1
 800b59e:	4622      	mov	r2, r4
 800b5a0:	462b      	mov	r3, r5
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	4629      	mov	r1, r5
 800b5a6:	f7f4 fffb 	bl	80005a0 <__aeabi_dmul>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	460b      	mov	r3, r1
 800b5ae:	4680      	mov	r8, r0
 800b5b0:	4689      	mov	r9, r1
 800b5b2:	f7f4 fff5 	bl	80005a0 <__aeabi_dmul>
 800b5b6:	a36c      	add	r3, pc, #432	; (adr r3, 800b768 <atan+0x288>)
 800b5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5bc:	4606      	mov	r6, r0
 800b5be:	460f      	mov	r7, r1
 800b5c0:	f7f4 ffee 	bl	80005a0 <__aeabi_dmul>
 800b5c4:	a36a      	add	r3, pc, #424	; (adr r3, 800b770 <atan+0x290>)
 800b5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ca:	f7f4 fe33 	bl	8000234 <__adddf3>
 800b5ce:	4632      	mov	r2, r6
 800b5d0:	463b      	mov	r3, r7
 800b5d2:	f7f4 ffe5 	bl	80005a0 <__aeabi_dmul>
 800b5d6:	a368      	add	r3, pc, #416	; (adr r3, 800b778 <atan+0x298>)
 800b5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5dc:	f7f4 fe2a 	bl	8000234 <__adddf3>
 800b5e0:	4632      	mov	r2, r6
 800b5e2:	463b      	mov	r3, r7
 800b5e4:	f7f4 ffdc 	bl	80005a0 <__aeabi_dmul>
 800b5e8:	a365      	add	r3, pc, #404	; (adr r3, 800b780 <atan+0x2a0>)
 800b5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ee:	f7f4 fe21 	bl	8000234 <__adddf3>
 800b5f2:	4632      	mov	r2, r6
 800b5f4:	463b      	mov	r3, r7
 800b5f6:	f7f4 ffd3 	bl	80005a0 <__aeabi_dmul>
 800b5fa:	a363      	add	r3, pc, #396	; (adr r3, 800b788 <atan+0x2a8>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	f7f4 fe18 	bl	8000234 <__adddf3>
 800b604:	4632      	mov	r2, r6
 800b606:	463b      	mov	r3, r7
 800b608:	f7f4 ffca 	bl	80005a0 <__aeabi_dmul>
 800b60c:	a360      	add	r3, pc, #384	; (adr r3, 800b790 <atan+0x2b0>)
 800b60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b612:	f7f4 fe0f 	bl	8000234 <__adddf3>
 800b616:	4642      	mov	r2, r8
 800b618:	464b      	mov	r3, r9
 800b61a:	f7f4 ffc1 	bl	80005a0 <__aeabi_dmul>
 800b61e:	a35e      	add	r3, pc, #376	; (adr r3, 800b798 <atan+0x2b8>)
 800b620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b624:	4680      	mov	r8, r0
 800b626:	4689      	mov	r9, r1
 800b628:	4630      	mov	r0, r6
 800b62a:	4639      	mov	r1, r7
 800b62c:	f7f4 ffb8 	bl	80005a0 <__aeabi_dmul>
 800b630:	a35b      	add	r3, pc, #364	; (adr r3, 800b7a0 <atan+0x2c0>)
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	f7f4 fdfb 	bl	8000230 <__aeabi_dsub>
 800b63a:	4632      	mov	r2, r6
 800b63c:	463b      	mov	r3, r7
 800b63e:	f7f4 ffaf 	bl	80005a0 <__aeabi_dmul>
 800b642:	a359      	add	r3, pc, #356	; (adr r3, 800b7a8 <atan+0x2c8>)
 800b644:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b648:	f7f4 fdf2 	bl	8000230 <__aeabi_dsub>
 800b64c:	4632      	mov	r2, r6
 800b64e:	463b      	mov	r3, r7
 800b650:	f7f4 ffa6 	bl	80005a0 <__aeabi_dmul>
 800b654:	a356      	add	r3, pc, #344	; (adr r3, 800b7b0 <atan+0x2d0>)
 800b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65a:	f7f4 fde9 	bl	8000230 <__aeabi_dsub>
 800b65e:	4632      	mov	r2, r6
 800b660:	463b      	mov	r3, r7
 800b662:	f7f4 ff9d 	bl	80005a0 <__aeabi_dmul>
 800b666:	a354      	add	r3, pc, #336	; (adr r3, 800b7b8 <atan+0x2d8>)
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	f7f4 fde0 	bl	8000230 <__aeabi_dsub>
 800b670:	4632      	mov	r2, r6
 800b672:	463b      	mov	r3, r7
 800b674:	f7f4 ff94 	bl	80005a0 <__aeabi_dmul>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	4640      	mov	r0, r8
 800b67e:	4649      	mov	r1, r9
 800b680:	f7f4 fdd8 	bl	8000234 <__adddf3>
 800b684:	4622      	mov	r2, r4
 800b686:	462b      	mov	r3, r5
 800b688:	f7f4 ff8a 	bl	80005a0 <__aeabi_dmul>
 800b68c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	d144      	bne.n	800b720 <atan+0x240>
 800b696:	4620      	mov	r0, r4
 800b698:	4629      	mov	r1, r5
 800b69a:	f7f4 fdc9 	bl	8000230 <__aeabi_dsub>
 800b69e:	e734      	b.n	800b50a <atan+0x2a>
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	4b4c      	ldr	r3, [pc, #304]	; (800b7d4 <atan+0x2f4>)
 800b6a4:	f7f4 fdc4 	bl	8000230 <__aeabi_dsub>
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	460f      	mov	r7, r1
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	4629      	mov	r1, r5
 800b6b2:	4b48      	ldr	r3, [pc, #288]	; (800b7d4 <atan+0x2f4>)
 800b6b4:	f7f4 fdbe 	bl	8000234 <__adddf3>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4630      	mov	r0, r6
 800b6be:	4639      	mov	r1, r7
 800b6c0:	f7f5 f898 	bl	80007f4 <__aeabi_ddiv>
 800b6c4:	f04f 0a01 	mov.w	sl, #1
 800b6c8:	4604      	mov	r4, r0
 800b6ca:	460d      	mov	r5, r1
 800b6cc:	e767      	b.n	800b59e <atan+0xbe>
 800b6ce:	4b43      	ldr	r3, [pc, #268]	; (800b7dc <atan+0x2fc>)
 800b6d0:	429e      	cmp	r6, r3
 800b6d2:	da1a      	bge.n	800b70a <atan+0x22a>
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	4b42      	ldr	r3, [pc, #264]	; (800b7e0 <atan+0x300>)
 800b6d8:	f7f4 fdaa 	bl	8000230 <__aeabi_dsub>
 800b6dc:	2200      	movs	r2, #0
 800b6de:	4606      	mov	r6, r0
 800b6e0:	460f      	mov	r7, r1
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	4b3e      	ldr	r3, [pc, #248]	; (800b7e0 <atan+0x300>)
 800b6e8:	f7f4 ff5a 	bl	80005a0 <__aeabi_dmul>
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	4b39      	ldr	r3, [pc, #228]	; (800b7d4 <atan+0x2f4>)
 800b6f0:	f7f4 fda0 	bl	8000234 <__adddf3>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	4639      	mov	r1, r7
 800b6fc:	f7f5 f87a 	bl	80007f4 <__aeabi_ddiv>
 800b700:	f04f 0a02 	mov.w	sl, #2
 800b704:	4604      	mov	r4, r0
 800b706:	460d      	mov	r5, r1
 800b708:	e749      	b.n	800b59e <atan+0xbe>
 800b70a:	4602      	mov	r2, r0
 800b70c:	460b      	mov	r3, r1
 800b70e:	2000      	movs	r0, #0
 800b710:	4934      	ldr	r1, [pc, #208]	; (800b7e4 <atan+0x304>)
 800b712:	f7f5 f86f 	bl	80007f4 <__aeabi_ddiv>
 800b716:	f04f 0a03 	mov.w	sl, #3
 800b71a:	4604      	mov	r4, r0
 800b71c:	460d      	mov	r5, r1
 800b71e:	e73e      	b.n	800b59e <atan+0xbe>
 800b720:	4b31      	ldr	r3, [pc, #196]	; (800b7e8 <atan+0x308>)
 800b722:	4e32      	ldr	r6, [pc, #200]	; (800b7ec <atan+0x30c>)
 800b724:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b728:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b72c:	e9da 2300 	ldrd	r2, r3, [sl]
 800b730:	f7f4 fd7e 	bl	8000230 <__aeabi_dsub>
 800b734:	4622      	mov	r2, r4
 800b736:	462b      	mov	r3, r5
 800b738:	f7f4 fd7a 	bl	8000230 <__aeabi_dsub>
 800b73c:	4602      	mov	r2, r0
 800b73e:	460b      	mov	r3, r1
 800b740:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b744:	f7f4 fd74 	bl	8000230 <__aeabi_dsub>
 800b748:	f1bb 0f00 	cmp.w	fp, #0
 800b74c:	4604      	mov	r4, r0
 800b74e:	460d      	mov	r5, r1
 800b750:	f6bf aee4 	bge.w	800b51c <atan+0x3c>
 800b754:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b758:	461d      	mov	r5, r3
 800b75a:	e6df      	b.n	800b51c <atan+0x3c>
 800b75c:	4d24      	ldr	r5, [pc, #144]	; (800b7f0 <atan+0x310>)
 800b75e:	e6dd      	b.n	800b51c <atan+0x3c>
 800b760:	8800759c 	.word	0x8800759c
 800b764:	7e37e43c 	.word	0x7e37e43c
 800b768:	e322da11 	.word	0xe322da11
 800b76c:	3f90ad3a 	.word	0x3f90ad3a
 800b770:	24760deb 	.word	0x24760deb
 800b774:	3fa97b4b 	.word	0x3fa97b4b
 800b778:	a0d03d51 	.word	0xa0d03d51
 800b77c:	3fb10d66 	.word	0x3fb10d66
 800b780:	c54c206e 	.word	0xc54c206e
 800b784:	3fb745cd 	.word	0x3fb745cd
 800b788:	920083ff 	.word	0x920083ff
 800b78c:	3fc24924 	.word	0x3fc24924
 800b790:	5555550d 	.word	0x5555550d
 800b794:	3fd55555 	.word	0x3fd55555
 800b798:	2c6a6c2f 	.word	0x2c6a6c2f
 800b79c:	bfa2b444 	.word	0xbfa2b444
 800b7a0:	52defd9a 	.word	0x52defd9a
 800b7a4:	3fadde2d 	.word	0x3fadde2d
 800b7a8:	af749a6d 	.word	0xaf749a6d
 800b7ac:	3fb3b0f2 	.word	0x3fb3b0f2
 800b7b0:	fe231671 	.word	0xfe231671
 800b7b4:	3fbc71c6 	.word	0x3fbc71c6
 800b7b8:	9998ebc4 	.word	0x9998ebc4
 800b7bc:	3fc99999 	.word	0x3fc99999
 800b7c0:	440fffff 	.word	0x440fffff
 800b7c4:	7ff00000 	.word	0x7ff00000
 800b7c8:	54442d18 	.word	0x54442d18
 800b7cc:	bff921fb 	.word	0xbff921fb
 800b7d0:	3fdbffff 	.word	0x3fdbffff
 800b7d4:	3ff00000 	.word	0x3ff00000
 800b7d8:	3ff2ffff 	.word	0x3ff2ffff
 800b7dc:	40038000 	.word	0x40038000
 800b7e0:	3ff80000 	.word	0x3ff80000
 800b7e4:	bff00000 	.word	0xbff00000
 800b7e8:	0800d058 	.word	0x0800d058
 800b7ec:	0800d038 	.word	0x0800d038
 800b7f0:	3ff921fb 	.word	0x3ff921fb

0800b7f4 <cos>:
 800b7f4:	b530      	push	{r4, r5, lr}
 800b7f6:	4a20      	ldr	r2, [pc, #128]	; (800b878 <cos+0x84>)
 800b7f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b7fc:	4293      	cmp	r3, r2
 800b7fe:	b087      	sub	sp, #28
 800b800:	dc06      	bgt.n	800b810 <cos+0x1c>
 800b802:	2200      	movs	r2, #0
 800b804:	2300      	movs	r3, #0
 800b806:	b007      	add	sp, #28
 800b808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b80c:	f000 baa0 	b.w	800bd50 <__kernel_cos>
 800b810:	4a1a      	ldr	r2, [pc, #104]	; (800b87c <cos+0x88>)
 800b812:	4293      	cmp	r3, r2
 800b814:	dd05      	ble.n	800b822 <cos+0x2e>
 800b816:	4602      	mov	r2, r0
 800b818:	460b      	mov	r3, r1
 800b81a:	f7f4 fd09 	bl	8000230 <__aeabi_dsub>
 800b81e:	b007      	add	sp, #28
 800b820:	bd30      	pop	{r4, r5, pc}
 800b822:	aa02      	add	r2, sp, #8
 800b824:	f000 f89c 	bl	800b960 <__ieee754_rem_pio2>
 800b828:	f000 0003 	and.w	r0, r0, #3
 800b82c:	2801      	cmp	r0, #1
 800b82e:	d009      	beq.n	800b844 <cos+0x50>
 800b830:	2802      	cmp	r0, #2
 800b832:	d011      	beq.n	800b858 <cos+0x64>
 800b834:	b9b8      	cbnz	r0, 800b866 <cos+0x72>
 800b836:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b83a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b83e:	f000 fa87 	bl	800bd50 <__kernel_cos>
 800b842:	e7ec      	b.n	800b81e <cos+0x2a>
 800b844:	9000      	str	r0, [sp, #0]
 800b846:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b84a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b84e:	f000 fe7f 	bl	800c550 <__kernel_sin>
 800b852:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b856:	e7e2      	b.n	800b81e <cos+0x2a>
 800b858:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b85c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b860:	f000 fa76 	bl	800bd50 <__kernel_cos>
 800b864:	e7f5      	b.n	800b852 <cos+0x5e>
 800b866:	2301      	movs	r3, #1
 800b868:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b872:	f000 fe6d 	bl	800c550 <__kernel_sin>
 800b876:	e7d2      	b.n	800b81e <cos+0x2a>
 800b878:	3fe921fb 	.word	0x3fe921fb
 800b87c:	7fefffff 	.word	0x7fefffff

0800b880 <fabs>:
 800b880:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b884:	4770      	bx	lr
	...

0800b888 <sin>:
 800b888:	b530      	push	{r4, r5, lr}
 800b88a:	4a20      	ldr	r2, [pc, #128]	; (800b90c <sin+0x84>)
 800b88c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b890:	4293      	cmp	r3, r2
 800b892:	b087      	sub	sp, #28
 800b894:	dc06      	bgt.n	800b8a4 <sin+0x1c>
 800b896:	2300      	movs	r3, #0
 800b898:	2200      	movs	r2, #0
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	2300      	movs	r3, #0
 800b89e:	f000 fe57 	bl	800c550 <__kernel_sin>
 800b8a2:	e006      	b.n	800b8b2 <sin+0x2a>
 800b8a4:	4a1a      	ldr	r2, [pc, #104]	; (800b910 <sin+0x88>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	dd05      	ble.n	800b8b6 <sin+0x2e>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	f7f4 fcbf 	bl	8000230 <__aeabi_dsub>
 800b8b2:	b007      	add	sp, #28
 800b8b4:	bd30      	pop	{r4, r5, pc}
 800b8b6:	aa02      	add	r2, sp, #8
 800b8b8:	f000 f852 	bl	800b960 <__ieee754_rem_pio2>
 800b8bc:	f000 0003 	and.w	r0, r0, #3
 800b8c0:	2801      	cmp	r0, #1
 800b8c2:	d009      	beq.n	800b8d8 <sin+0x50>
 800b8c4:	2802      	cmp	r0, #2
 800b8c6:	d00e      	beq.n	800b8e6 <sin+0x5e>
 800b8c8:	b9c0      	cbnz	r0, 800b8fc <sin+0x74>
 800b8ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	9300      	str	r3, [sp, #0]
 800b8d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8d6:	e7e2      	b.n	800b89e <sin+0x16>
 800b8d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8e0:	f000 fa36 	bl	800bd50 <__kernel_cos>
 800b8e4:	e7e5      	b.n	800b8b2 <sin+0x2a>
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ec:	9300      	str	r3, [sp, #0]
 800b8ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8f2:	f000 fe2d 	bl	800c550 <__kernel_sin>
 800b8f6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b8fa:	e7da      	b.n	800b8b2 <sin+0x2a>
 800b8fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b900:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b904:	f000 fa24 	bl	800bd50 <__kernel_cos>
 800b908:	e7f5      	b.n	800b8f6 <sin+0x6e>
 800b90a:	bf00      	nop
 800b90c:	3fe921fb 	.word	0x3fe921fb
 800b910:	7fefffff 	.word	0x7fefffff

0800b914 <roundf>:
 800b914:	b508      	push	{r3, lr}
 800b916:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b91a:	3b7f      	subs	r3, #127	; 0x7f
 800b91c:	2b16      	cmp	r3, #22
 800b91e:	4601      	mov	r1, r0
 800b920:	4602      	mov	r2, r0
 800b922:	dc14      	bgt.n	800b94e <roundf+0x3a>
 800b924:	2b00      	cmp	r3, #0
 800b926:	da07      	bge.n	800b938 <roundf+0x24>
 800b928:	3301      	adds	r3, #1
 800b92a:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800b92e:	d101      	bne.n	800b934 <roundf+0x20>
 800b930:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800b934:	4608      	mov	r0, r1
 800b936:	bd08      	pop	{r3, pc}
 800b938:	4808      	ldr	r0, [pc, #32]	; (800b95c <roundf+0x48>)
 800b93a:	4118      	asrs	r0, r3
 800b93c:	4201      	tst	r1, r0
 800b93e:	d0f9      	beq.n	800b934 <roundf+0x20>
 800b940:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b944:	4119      	asrs	r1, r3
 800b946:	4411      	add	r1, r2
 800b948:	ea21 0100 	bic.w	r1, r1, r0
 800b94c:	e7f2      	b.n	800b934 <roundf+0x20>
 800b94e:	2b80      	cmp	r3, #128	; 0x80
 800b950:	d1f0      	bne.n	800b934 <roundf+0x20>
 800b952:	f7f5 f93d 	bl	8000bd0 <__addsf3>
 800b956:	4601      	mov	r1, r0
 800b958:	e7ec      	b.n	800b934 <roundf+0x20>
 800b95a:	bf00      	nop
 800b95c:	007fffff 	.word	0x007fffff

0800b960 <__ieee754_rem_pio2>:
 800b960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b964:	4614      	mov	r4, r2
 800b966:	4ac4      	ldr	r2, [pc, #784]	; (800bc78 <__ieee754_rem_pio2+0x318>)
 800b968:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800b96c:	b08d      	sub	sp, #52	; 0x34
 800b96e:	4592      	cmp	sl, r2
 800b970:	9104      	str	r1, [sp, #16]
 800b972:	dc07      	bgt.n	800b984 <__ieee754_rem_pio2+0x24>
 800b974:	2200      	movs	r2, #0
 800b976:	2300      	movs	r3, #0
 800b978:	e9c4 0100 	strd	r0, r1, [r4]
 800b97c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b980:	2500      	movs	r5, #0
 800b982:	e024      	b.n	800b9ce <__ieee754_rem_pio2+0x6e>
 800b984:	4abd      	ldr	r2, [pc, #756]	; (800bc7c <__ieee754_rem_pio2+0x31c>)
 800b986:	4592      	cmp	sl, r2
 800b988:	dc72      	bgt.n	800ba70 <__ieee754_rem_pio2+0x110>
 800b98a:	9b04      	ldr	r3, [sp, #16]
 800b98c:	4dbc      	ldr	r5, [pc, #752]	; (800bc80 <__ieee754_rem_pio2+0x320>)
 800b98e:	2b00      	cmp	r3, #0
 800b990:	a3ab      	add	r3, pc, #684	; (adr r3, 800bc40 <__ieee754_rem_pio2+0x2e0>)
 800b992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b996:	dd36      	ble.n	800ba06 <__ieee754_rem_pio2+0xa6>
 800b998:	f7f4 fc4a 	bl	8000230 <__aeabi_dsub>
 800b99c:	45aa      	cmp	sl, r5
 800b99e:	4606      	mov	r6, r0
 800b9a0:	460f      	mov	r7, r1
 800b9a2:	d018      	beq.n	800b9d6 <__ieee754_rem_pio2+0x76>
 800b9a4:	a3a8      	add	r3, pc, #672	; (adr r3, 800bc48 <__ieee754_rem_pio2+0x2e8>)
 800b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9aa:	f7f4 fc41 	bl	8000230 <__aeabi_dsub>
 800b9ae:	4602      	mov	r2, r0
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	e9c4 2300 	strd	r2, r3, [r4]
 800b9b8:	4639      	mov	r1, r7
 800b9ba:	f7f4 fc39 	bl	8000230 <__aeabi_dsub>
 800b9be:	a3a2      	add	r3, pc, #648	; (adr r3, 800bc48 <__ieee754_rem_pio2+0x2e8>)
 800b9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c4:	f7f4 fc34 	bl	8000230 <__aeabi_dsub>
 800b9c8:	2501      	movs	r5, #1
 800b9ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b9ce:	4628      	mov	r0, r5
 800b9d0:	b00d      	add	sp, #52	; 0x34
 800b9d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d6:	a39e      	add	r3, pc, #632	; (adr r3, 800bc50 <__ieee754_rem_pio2+0x2f0>)
 800b9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9dc:	f7f4 fc28 	bl	8000230 <__aeabi_dsub>
 800b9e0:	a39d      	add	r3, pc, #628	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x2f8>)
 800b9e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e6:	4606      	mov	r6, r0
 800b9e8:	460f      	mov	r7, r1
 800b9ea:	f7f4 fc21 	bl	8000230 <__aeabi_dsub>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	4630      	mov	r0, r6
 800b9f4:	e9c4 2300 	strd	r2, r3, [r4]
 800b9f8:	4639      	mov	r1, r7
 800b9fa:	f7f4 fc19 	bl	8000230 <__aeabi_dsub>
 800b9fe:	a396      	add	r3, pc, #600	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x2f8>)
 800ba00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba04:	e7de      	b.n	800b9c4 <__ieee754_rem_pio2+0x64>
 800ba06:	f7f4 fc15 	bl	8000234 <__adddf3>
 800ba0a:	45aa      	cmp	sl, r5
 800ba0c:	4606      	mov	r6, r0
 800ba0e:	460f      	mov	r7, r1
 800ba10:	d016      	beq.n	800ba40 <__ieee754_rem_pio2+0xe0>
 800ba12:	a38d      	add	r3, pc, #564	; (adr r3, 800bc48 <__ieee754_rem_pio2+0x2e8>)
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	f7f4 fc0c 	bl	8000234 <__adddf3>
 800ba1c:	4602      	mov	r2, r0
 800ba1e:	460b      	mov	r3, r1
 800ba20:	4630      	mov	r0, r6
 800ba22:	e9c4 2300 	strd	r2, r3, [r4]
 800ba26:	4639      	mov	r1, r7
 800ba28:	f7f4 fc02 	bl	8000230 <__aeabi_dsub>
 800ba2c:	a386      	add	r3, pc, #536	; (adr r3, 800bc48 <__ieee754_rem_pio2+0x2e8>)
 800ba2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba32:	f7f4 fbff 	bl	8000234 <__adddf3>
 800ba36:	f04f 35ff 	mov.w	r5, #4294967295
 800ba3a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ba3e:	e7c6      	b.n	800b9ce <__ieee754_rem_pio2+0x6e>
 800ba40:	a383      	add	r3, pc, #524	; (adr r3, 800bc50 <__ieee754_rem_pio2+0x2f0>)
 800ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba46:	f7f4 fbf5 	bl	8000234 <__adddf3>
 800ba4a:	a383      	add	r3, pc, #524	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x2f8>)
 800ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba50:	4606      	mov	r6, r0
 800ba52:	460f      	mov	r7, r1
 800ba54:	f7f4 fbee 	bl	8000234 <__adddf3>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	e9c4 2300 	strd	r2, r3, [r4]
 800ba62:	4639      	mov	r1, r7
 800ba64:	f7f4 fbe4 	bl	8000230 <__aeabi_dsub>
 800ba68:	a37b      	add	r3, pc, #492	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x2f8>)
 800ba6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6e:	e7e0      	b.n	800ba32 <__ieee754_rem_pio2+0xd2>
 800ba70:	4a84      	ldr	r2, [pc, #528]	; (800bc84 <__ieee754_rem_pio2+0x324>)
 800ba72:	4592      	cmp	sl, r2
 800ba74:	f300 80d5 	bgt.w	800bc22 <__ieee754_rem_pio2+0x2c2>
 800ba78:	f7ff ff02 	bl	800b880 <fabs>
 800ba7c:	a378      	add	r3, pc, #480	; (adr r3, 800bc60 <__ieee754_rem_pio2+0x300>)
 800ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba82:	4606      	mov	r6, r0
 800ba84:	460f      	mov	r7, r1
 800ba86:	f7f4 fd8b 	bl	80005a0 <__aeabi_dmul>
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	4b7e      	ldr	r3, [pc, #504]	; (800bc88 <__ieee754_rem_pio2+0x328>)
 800ba8e:	f7f4 fbd1 	bl	8000234 <__adddf3>
 800ba92:	f7f5 f81f 	bl	8000ad4 <__aeabi_d2iz>
 800ba96:	4605      	mov	r5, r0
 800ba98:	f7f4 fd18 	bl	80004cc <__aeabi_i2d>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	460b      	mov	r3, r1
 800baa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800baa4:	a366      	add	r3, pc, #408	; (adr r3, 800bc40 <__ieee754_rem_pio2+0x2e0>)
 800baa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baaa:	f7f4 fd79 	bl	80005a0 <__aeabi_dmul>
 800baae:	4602      	mov	r2, r0
 800bab0:	460b      	mov	r3, r1
 800bab2:	4630      	mov	r0, r6
 800bab4:	4639      	mov	r1, r7
 800bab6:	f7f4 fbbb 	bl	8000230 <__aeabi_dsub>
 800baba:	a363      	add	r3, pc, #396	; (adr r3, 800bc48 <__ieee754_rem_pio2+0x2e8>)
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	4680      	mov	r8, r0
 800bac2:	4689      	mov	r9, r1
 800bac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bac8:	f7f4 fd6a 	bl	80005a0 <__aeabi_dmul>
 800bacc:	2d1f      	cmp	r5, #31
 800bace:	4606      	mov	r6, r0
 800bad0:	460f      	mov	r7, r1
 800bad2:	dc0e      	bgt.n	800baf2 <__ieee754_rem_pio2+0x192>
 800bad4:	4b6d      	ldr	r3, [pc, #436]	; (800bc8c <__ieee754_rem_pio2+0x32c>)
 800bad6:	1e6a      	subs	r2, r5, #1
 800bad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800badc:	4553      	cmp	r3, sl
 800bade:	d008      	beq.n	800baf2 <__ieee754_rem_pio2+0x192>
 800bae0:	4632      	mov	r2, r6
 800bae2:	463b      	mov	r3, r7
 800bae4:	4640      	mov	r0, r8
 800bae6:	4649      	mov	r1, r9
 800bae8:	f7f4 fba2 	bl	8000230 <__aeabi_dsub>
 800baec:	e9c4 0100 	strd	r0, r1, [r4]
 800baf0:	e013      	b.n	800bb1a <__ieee754_rem_pio2+0x1ba>
 800baf2:	463b      	mov	r3, r7
 800baf4:	4632      	mov	r2, r6
 800baf6:	4640      	mov	r0, r8
 800baf8:	4649      	mov	r1, r9
 800bafa:	f7f4 fb99 	bl	8000230 <__aeabi_dsub>
 800bafe:	ea4f 532a 	mov.w	r3, sl, asr #20
 800bb02:	9305      	str	r3, [sp, #20]
 800bb04:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb08:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800bb0c:	f1ba 0f10 	cmp.w	sl, #16
 800bb10:	dc1f      	bgt.n	800bb52 <__ieee754_rem_pio2+0x1f2>
 800bb12:	4602      	mov	r2, r0
 800bb14:	460b      	mov	r3, r1
 800bb16:	e9c4 2300 	strd	r2, r3, [r4]
 800bb1a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800bb1e:	4640      	mov	r0, r8
 800bb20:	4653      	mov	r3, sl
 800bb22:	4649      	mov	r1, r9
 800bb24:	f7f4 fb84 	bl	8000230 <__aeabi_dsub>
 800bb28:	4632      	mov	r2, r6
 800bb2a:	463b      	mov	r3, r7
 800bb2c:	f7f4 fb80 	bl	8000230 <__aeabi_dsub>
 800bb30:	460b      	mov	r3, r1
 800bb32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bb36:	9904      	ldr	r1, [sp, #16]
 800bb38:	4602      	mov	r2, r0
 800bb3a:	2900      	cmp	r1, #0
 800bb3c:	f6bf af47 	bge.w	800b9ce <__ieee754_rem_pio2+0x6e>
 800bb40:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 800bb44:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800bb48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb4c:	60e3      	str	r3, [r4, #12]
 800bb4e:	426d      	negs	r5, r5
 800bb50:	e73d      	b.n	800b9ce <__ieee754_rem_pio2+0x6e>
 800bb52:	a33f      	add	r3, pc, #252	; (adr r3, 800bc50 <__ieee754_rem_pio2+0x2f0>)
 800bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb5c:	f7f4 fd20 	bl	80005a0 <__aeabi_dmul>
 800bb60:	4606      	mov	r6, r0
 800bb62:	460f      	mov	r7, r1
 800bb64:	4602      	mov	r2, r0
 800bb66:	460b      	mov	r3, r1
 800bb68:	4640      	mov	r0, r8
 800bb6a:	4649      	mov	r1, r9
 800bb6c:	f7f4 fb60 	bl	8000230 <__aeabi_dsub>
 800bb70:	4602      	mov	r2, r0
 800bb72:	460b      	mov	r3, r1
 800bb74:	4682      	mov	sl, r0
 800bb76:	468b      	mov	fp, r1
 800bb78:	4640      	mov	r0, r8
 800bb7a:	4649      	mov	r1, r9
 800bb7c:	f7f4 fb58 	bl	8000230 <__aeabi_dsub>
 800bb80:	4632      	mov	r2, r6
 800bb82:	463b      	mov	r3, r7
 800bb84:	f7f4 fb54 	bl	8000230 <__aeabi_dsub>
 800bb88:	a333      	add	r3, pc, #204	; (adr r3, 800bc58 <__ieee754_rem_pio2+0x2f8>)
 800bb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8e:	4606      	mov	r6, r0
 800bb90:	460f      	mov	r7, r1
 800bb92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb96:	f7f4 fd03 	bl	80005a0 <__aeabi_dmul>
 800bb9a:	4632      	mov	r2, r6
 800bb9c:	463b      	mov	r3, r7
 800bb9e:	f7f4 fb47 	bl	8000230 <__aeabi_dsub>
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	4606      	mov	r6, r0
 800bba8:	460f      	mov	r7, r1
 800bbaa:	4650      	mov	r0, sl
 800bbac:	4659      	mov	r1, fp
 800bbae:	f7f4 fb3f 	bl	8000230 <__aeabi_dsub>
 800bbb2:	9a05      	ldr	r2, [sp, #20]
 800bbb4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bbb8:	1ad3      	subs	r3, r2, r3
 800bbba:	2b31      	cmp	r3, #49	; 0x31
 800bbbc:	dc06      	bgt.n	800bbcc <__ieee754_rem_pio2+0x26c>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	46d0      	mov	r8, sl
 800bbc4:	46d9      	mov	r9, fp
 800bbc6:	e9c4 2300 	strd	r2, r3, [r4]
 800bbca:	e7a6      	b.n	800bb1a <__ieee754_rem_pio2+0x1ba>
 800bbcc:	a326      	add	r3, pc, #152	; (adr r3, 800bc68 <__ieee754_rem_pio2+0x308>)
 800bbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bbd6:	f7f4 fce3 	bl	80005a0 <__aeabi_dmul>
 800bbda:	4606      	mov	r6, r0
 800bbdc:	460f      	mov	r7, r1
 800bbde:	4602      	mov	r2, r0
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	4650      	mov	r0, sl
 800bbe4:	4659      	mov	r1, fp
 800bbe6:	f7f4 fb23 	bl	8000230 <__aeabi_dsub>
 800bbea:	4602      	mov	r2, r0
 800bbec:	460b      	mov	r3, r1
 800bbee:	4680      	mov	r8, r0
 800bbf0:	4689      	mov	r9, r1
 800bbf2:	4650      	mov	r0, sl
 800bbf4:	4659      	mov	r1, fp
 800bbf6:	f7f4 fb1b 	bl	8000230 <__aeabi_dsub>
 800bbfa:	4632      	mov	r2, r6
 800bbfc:	463b      	mov	r3, r7
 800bbfe:	f7f4 fb17 	bl	8000230 <__aeabi_dsub>
 800bc02:	a31b      	add	r3, pc, #108	; (adr r3, 800bc70 <__ieee754_rem_pio2+0x310>)
 800bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc08:	4606      	mov	r6, r0
 800bc0a:	460f      	mov	r7, r1
 800bc0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc10:	f7f4 fcc6 	bl	80005a0 <__aeabi_dmul>
 800bc14:	4632      	mov	r2, r6
 800bc16:	463b      	mov	r3, r7
 800bc18:	f7f4 fb0a 	bl	8000230 <__aeabi_dsub>
 800bc1c:	4606      	mov	r6, r0
 800bc1e:	460f      	mov	r7, r1
 800bc20:	e75e      	b.n	800bae0 <__ieee754_rem_pio2+0x180>
 800bc22:	4a1b      	ldr	r2, [pc, #108]	; (800bc90 <__ieee754_rem_pio2+0x330>)
 800bc24:	4592      	cmp	sl, r2
 800bc26:	dd35      	ble.n	800bc94 <__ieee754_rem_pio2+0x334>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	f7f4 fb00 	bl	8000230 <__aeabi_dsub>
 800bc30:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bc34:	e9c4 0100 	strd	r0, r1, [r4]
 800bc38:	e6a2      	b.n	800b980 <__ieee754_rem_pio2+0x20>
 800bc3a:	bf00      	nop
 800bc3c:	f3af 8000 	nop.w
 800bc40:	54400000 	.word	0x54400000
 800bc44:	3ff921fb 	.word	0x3ff921fb
 800bc48:	1a626331 	.word	0x1a626331
 800bc4c:	3dd0b461 	.word	0x3dd0b461
 800bc50:	1a600000 	.word	0x1a600000
 800bc54:	3dd0b461 	.word	0x3dd0b461
 800bc58:	2e037073 	.word	0x2e037073
 800bc5c:	3ba3198a 	.word	0x3ba3198a
 800bc60:	6dc9c883 	.word	0x6dc9c883
 800bc64:	3fe45f30 	.word	0x3fe45f30
 800bc68:	2e000000 	.word	0x2e000000
 800bc6c:	3ba3198a 	.word	0x3ba3198a
 800bc70:	252049c1 	.word	0x252049c1
 800bc74:	397b839a 	.word	0x397b839a
 800bc78:	3fe921fb 	.word	0x3fe921fb
 800bc7c:	4002d97b 	.word	0x4002d97b
 800bc80:	3ff921fb 	.word	0x3ff921fb
 800bc84:	413921fb 	.word	0x413921fb
 800bc88:	3fe00000 	.word	0x3fe00000
 800bc8c:	0800d078 	.word	0x0800d078
 800bc90:	7fefffff 	.word	0x7fefffff
 800bc94:	ea4f 552a 	mov.w	r5, sl, asr #20
 800bc98:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800bc9c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800bca0:	460f      	mov	r7, r1
 800bca2:	4606      	mov	r6, r0
 800bca4:	f7f4 ff16 	bl	8000ad4 <__aeabi_d2iz>
 800bca8:	f7f4 fc10 	bl	80004cc <__aeabi_i2d>
 800bcac:	4602      	mov	r2, r0
 800bcae:	460b      	mov	r3, r1
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	4639      	mov	r1, r7
 800bcb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bcb8:	f7f4 faba 	bl	8000230 <__aeabi_dsub>
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	4b22      	ldr	r3, [pc, #136]	; (800bd48 <__ieee754_rem_pio2+0x3e8>)
 800bcc0:	f7f4 fc6e 	bl	80005a0 <__aeabi_dmul>
 800bcc4:	460f      	mov	r7, r1
 800bcc6:	4606      	mov	r6, r0
 800bcc8:	f7f4 ff04 	bl	8000ad4 <__aeabi_d2iz>
 800bccc:	f7f4 fbfe 	bl	80004cc <__aeabi_i2d>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	460b      	mov	r3, r1
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	4639      	mov	r1, r7
 800bcd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800bcdc:	f7f4 faa8 	bl	8000230 <__aeabi_dsub>
 800bce0:	2200      	movs	r2, #0
 800bce2:	4b19      	ldr	r3, [pc, #100]	; (800bd48 <__ieee754_rem_pio2+0x3e8>)
 800bce4:	f7f4 fc5c 	bl	80005a0 <__aeabi_dmul>
 800bce8:	f04f 0803 	mov.w	r8, #3
 800bcec:	2600      	movs	r6, #0
 800bcee:	2700      	movs	r7, #0
 800bcf0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bcf4:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 800bcf8:	4632      	mov	r2, r6
 800bcfa:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800bcfe:	463b      	mov	r3, r7
 800bd00:	46c2      	mov	sl, r8
 800bd02:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd06:	f7f4 feb3 	bl	8000a70 <__aeabi_dcmpeq>
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d1f4      	bne.n	800bcf8 <__ieee754_rem_pio2+0x398>
 800bd0e:	4b0f      	ldr	r3, [pc, #60]	; (800bd4c <__ieee754_rem_pio2+0x3ec>)
 800bd10:	462a      	mov	r2, r5
 800bd12:	9301      	str	r3, [sp, #4]
 800bd14:	2302      	movs	r3, #2
 800bd16:	4621      	mov	r1, r4
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	a806      	add	r0, sp, #24
 800bd1c:	4653      	mov	r3, sl
 800bd1e:	f000 f8d5 	bl	800becc <__kernel_rem_pio2>
 800bd22:	9b04      	ldr	r3, [sp, #16]
 800bd24:	4605      	mov	r5, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f6bf ae51 	bge.w	800b9ce <__ieee754_rem_pio2+0x6e>
 800bd2c:	e9d4 2100 	ldrd	r2, r1, [r4]
 800bd30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd34:	e9c4 2300 	strd	r2, r3, [r4]
 800bd38:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800bd3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd40:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bd44:	e703      	b.n	800bb4e <__ieee754_rem_pio2+0x1ee>
 800bd46:	bf00      	nop
 800bd48:	41700000 	.word	0x41700000
 800bd4c:	0800d0f8 	.word	0x0800d0f8

0800bd50 <__kernel_cos>:
 800bd50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd54:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800bd58:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800bd5c:	4680      	mov	r8, r0
 800bd5e:	460f      	mov	r7, r1
 800bd60:	e9cd 2300 	strd	r2, r3, [sp]
 800bd64:	da04      	bge.n	800bd70 <__kernel_cos+0x20>
 800bd66:	f7f4 feb5 	bl	8000ad4 <__aeabi_d2iz>
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	f000 8086 	beq.w	800be7c <__kernel_cos+0x12c>
 800bd70:	4642      	mov	r2, r8
 800bd72:	463b      	mov	r3, r7
 800bd74:	4640      	mov	r0, r8
 800bd76:	4639      	mov	r1, r7
 800bd78:	f7f4 fc12 	bl	80005a0 <__aeabi_dmul>
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	4b4e      	ldr	r3, [pc, #312]	; (800beb8 <__kernel_cos+0x168>)
 800bd80:	4604      	mov	r4, r0
 800bd82:	460d      	mov	r5, r1
 800bd84:	f7f4 fc0c 	bl	80005a0 <__aeabi_dmul>
 800bd88:	a33f      	add	r3, pc, #252	; (adr r3, 800be88 <__kernel_cos+0x138>)
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	4682      	mov	sl, r0
 800bd90:	468b      	mov	fp, r1
 800bd92:	4620      	mov	r0, r4
 800bd94:	4629      	mov	r1, r5
 800bd96:	f7f4 fc03 	bl	80005a0 <__aeabi_dmul>
 800bd9a:	a33d      	add	r3, pc, #244	; (adr r3, 800be90 <__kernel_cos+0x140>)
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	f7f4 fa48 	bl	8000234 <__adddf3>
 800bda4:	4622      	mov	r2, r4
 800bda6:	462b      	mov	r3, r5
 800bda8:	f7f4 fbfa 	bl	80005a0 <__aeabi_dmul>
 800bdac:	a33a      	add	r3, pc, #232	; (adr r3, 800be98 <__kernel_cos+0x148>)
 800bdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb2:	f7f4 fa3d 	bl	8000230 <__aeabi_dsub>
 800bdb6:	4622      	mov	r2, r4
 800bdb8:	462b      	mov	r3, r5
 800bdba:	f7f4 fbf1 	bl	80005a0 <__aeabi_dmul>
 800bdbe:	a338      	add	r3, pc, #224	; (adr r3, 800bea0 <__kernel_cos+0x150>)
 800bdc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc4:	f7f4 fa36 	bl	8000234 <__adddf3>
 800bdc8:	4622      	mov	r2, r4
 800bdca:	462b      	mov	r3, r5
 800bdcc:	f7f4 fbe8 	bl	80005a0 <__aeabi_dmul>
 800bdd0:	a335      	add	r3, pc, #212	; (adr r3, 800bea8 <__kernel_cos+0x158>)
 800bdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd6:	f7f4 fa2b 	bl	8000230 <__aeabi_dsub>
 800bdda:	4622      	mov	r2, r4
 800bddc:	462b      	mov	r3, r5
 800bdde:	f7f4 fbdf 	bl	80005a0 <__aeabi_dmul>
 800bde2:	a333      	add	r3, pc, #204	; (adr r3, 800beb0 <__kernel_cos+0x160>)
 800bde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde8:	f7f4 fa24 	bl	8000234 <__adddf3>
 800bdec:	4622      	mov	r2, r4
 800bdee:	462b      	mov	r3, r5
 800bdf0:	f7f4 fbd6 	bl	80005a0 <__aeabi_dmul>
 800bdf4:	4622      	mov	r2, r4
 800bdf6:	462b      	mov	r3, r5
 800bdf8:	f7f4 fbd2 	bl	80005a0 <__aeabi_dmul>
 800bdfc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be00:	4604      	mov	r4, r0
 800be02:	460d      	mov	r5, r1
 800be04:	4640      	mov	r0, r8
 800be06:	4639      	mov	r1, r7
 800be08:	f7f4 fbca 	bl	80005a0 <__aeabi_dmul>
 800be0c:	460b      	mov	r3, r1
 800be0e:	4602      	mov	r2, r0
 800be10:	4629      	mov	r1, r5
 800be12:	4620      	mov	r0, r4
 800be14:	f7f4 fa0c 	bl	8000230 <__aeabi_dsub>
 800be18:	4b28      	ldr	r3, [pc, #160]	; (800bebc <__kernel_cos+0x16c>)
 800be1a:	4680      	mov	r8, r0
 800be1c:	429e      	cmp	r6, r3
 800be1e:	4689      	mov	r9, r1
 800be20:	dc0e      	bgt.n	800be40 <__kernel_cos+0xf0>
 800be22:	4602      	mov	r2, r0
 800be24:	460b      	mov	r3, r1
 800be26:	4650      	mov	r0, sl
 800be28:	4659      	mov	r1, fp
 800be2a:	f7f4 fa01 	bl	8000230 <__aeabi_dsub>
 800be2e:	4602      	mov	r2, r0
 800be30:	2000      	movs	r0, #0
 800be32:	460b      	mov	r3, r1
 800be34:	4922      	ldr	r1, [pc, #136]	; (800bec0 <__kernel_cos+0x170>)
 800be36:	f7f4 f9fb 	bl	8000230 <__aeabi_dsub>
 800be3a:	b003      	add	sp, #12
 800be3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be40:	2400      	movs	r4, #0
 800be42:	4b20      	ldr	r3, [pc, #128]	; (800bec4 <__kernel_cos+0x174>)
 800be44:	4622      	mov	r2, r4
 800be46:	429e      	cmp	r6, r3
 800be48:	bfcc      	ite	gt
 800be4a:	4d1f      	ldrgt	r5, [pc, #124]	; (800bec8 <__kernel_cos+0x178>)
 800be4c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800be50:	462b      	mov	r3, r5
 800be52:	2000      	movs	r0, #0
 800be54:	491a      	ldr	r1, [pc, #104]	; (800bec0 <__kernel_cos+0x170>)
 800be56:	f7f4 f9eb 	bl	8000230 <__aeabi_dsub>
 800be5a:	4622      	mov	r2, r4
 800be5c:	4606      	mov	r6, r0
 800be5e:	460f      	mov	r7, r1
 800be60:	462b      	mov	r3, r5
 800be62:	4650      	mov	r0, sl
 800be64:	4659      	mov	r1, fp
 800be66:	f7f4 f9e3 	bl	8000230 <__aeabi_dsub>
 800be6a:	4642      	mov	r2, r8
 800be6c:	464b      	mov	r3, r9
 800be6e:	f7f4 f9df 	bl	8000230 <__aeabi_dsub>
 800be72:	4602      	mov	r2, r0
 800be74:	460b      	mov	r3, r1
 800be76:	4630      	mov	r0, r6
 800be78:	4639      	mov	r1, r7
 800be7a:	e7dc      	b.n	800be36 <__kernel_cos+0xe6>
 800be7c:	2000      	movs	r0, #0
 800be7e:	4910      	ldr	r1, [pc, #64]	; (800bec0 <__kernel_cos+0x170>)
 800be80:	e7db      	b.n	800be3a <__kernel_cos+0xea>
 800be82:	bf00      	nop
 800be84:	f3af 8000 	nop.w
 800be88:	be8838d4 	.word	0xbe8838d4
 800be8c:	bda8fae9 	.word	0xbda8fae9
 800be90:	bdb4b1c4 	.word	0xbdb4b1c4
 800be94:	3e21ee9e 	.word	0x3e21ee9e
 800be98:	809c52ad 	.word	0x809c52ad
 800be9c:	3e927e4f 	.word	0x3e927e4f
 800bea0:	19cb1590 	.word	0x19cb1590
 800bea4:	3efa01a0 	.word	0x3efa01a0
 800bea8:	16c15177 	.word	0x16c15177
 800beac:	3f56c16c 	.word	0x3f56c16c
 800beb0:	5555554c 	.word	0x5555554c
 800beb4:	3fa55555 	.word	0x3fa55555
 800beb8:	3fe00000 	.word	0x3fe00000
 800bebc:	3fd33332 	.word	0x3fd33332
 800bec0:	3ff00000 	.word	0x3ff00000
 800bec4:	3fe90000 	.word	0x3fe90000
 800bec8:	3fd20000 	.word	0x3fd20000

0800becc <__kernel_rem_pio2>:
 800becc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bed0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800bed4:	9308      	str	r3, [sp, #32]
 800bed6:	9106      	str	r1, [sp, #24]
 800bed8:	4bb6      	ldr	r3, [pc, #728]	; (800c1b4 <__kernel_rem_pio2+0x2e8>)
 800beda:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800bedc:	f112 0f14 	cmn.w	r2, #20
 800bee0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bee4:	bfa8      	it	ge
 800bee6:	1ed4      	subge	r4, r2, #3
 800bee8:	9302      	str	r3, [sp, #8]
 800beea:	9b08      	ldr	r3, [sp, #32]
 800beec:	bfb8      	it	lt
 800beee:	2400      	movlt	r4, #0
 800bef0:	f103 33ff 	add.w	r3, r3, #4294967295
 800bef4:	9307      	str	r3, [sp, #28]
 800bef6:	bfa4      	itt	ge
 800bef8:	2318      	movge	r3, #24
 800befa:	fb94 f4f3 	sdivge	r4, r4, r3
 800befe:	f06f 0317 	mvn.w	r3, #23
 800bf02:	fb04 3303 	mla	r3, r4, r3, r3
 800bf06:	eb03 0b02 	add.w	fp, r3, r2
 800bf0a:	9a07      	ldr	r2, [sp, #28]
 800bf0c:	9b02      	ldr	r3, [sp, #8]
 800bf0e:	1aa7      	subs	r7, r4, r2
 800bf10:	eb03 0802 	add.w	r8, r3, r2
 800bf14:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bf16:	2500      	movs	r5, #0
 800bf18:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	2300      	movs	r3, #0
 800bf20:	9009      	str	r0, [sp, #36]	; 0x24
 800bf22:	ae20      	add	r6, sp, #128	; 0x80
 800bf24:	4545      	cmp	r5, r8
 800bf26:	dd14      	ble.n	800bf52 <__kernel_rem_pio2+0x86>
 800bf28:	f04f 0800 	mov.w	r8, #0
 800bf2c:	9a08      	ldr	r2, [sp, #32]
 800bf2e:	ab20      	add	r3, sp, #128	; 0x80
 800bf30:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800bf34:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800bf38:	9b02      	ldr	r3, [sp, #8]
 800bf3a:	4598      	cmp	r8, r3
 800bf3c:	dc35      	bgt.n	800bfaa <__kernel_rem_pio2+0xde>
 800bf3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf40:	2200      	movs	r2, #0
 800bf42:	f1a3 0908 	sub.w	r9, r3, #8
 800bf46:	2300      	movs	r3, #0
 800bf48:	462f      	mov	r7, r5
 800bf4a:	2600      	movs	r6, #0
 800bf4c:	e9cd 2300 	strd	r2, r3, [sp]
 800bf50:	e01f      	b.n	800bf92 <__kernel_rem_pio2+0xc6>
 800bf52:	42ef      	cmn	r7, r5
 800bf54:	d40b      	bmi.n	800bf6e <__kernel_rem_pio2+0xa2>
 800bf56:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bf5a:	e9cd 2300 	strd	r2, r3, [sp]
 800bf5e:	f7f4 fab5 	bl	80004cc <__aeabi_i2d>
 800bf62:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf66:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bf6a:	3501      	adds	r5, #1
 800bf6c:	e7da      	b.n	800bf24 <__kernel_rem_pio2+0x58>
 800bf6e:	4610      	mov	r0, r2
 800bf70:	4619      	mov	r1, r3
 800bf72:	e7f8      	b.n	800bf66 <__kernel_rem_pio2+0x9a>
 800bf74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf78:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800bf7c:	f7f4 fb10 	bl	80005a0 <__aeabi_dmul>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf88:	f7f4 f954 	bl	8000234 <__adddf3>
 800bf8c:	e9cd 0100 	strd	r0, r1, [sp]
 800bf90:	3601      	adds	r6, #1
 800bf92:	9b07      	ldr	r3, [sp, #28]
 800bf94:	3f08      	subs	r7, #8
 800bf96:	429e      	cmp	r6, r3
 800bf98:	ddec      	ble.n	800bf74 <__kernel_rem_pio2+0xa8>
 800bf9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf9e:	f108 0801 	add.w	r8, r8, #1
 800bfa2:	e8ea 2302 	strd	r2, r3, [sl], #8
 800bfa6:	3508      	adds	r5, #8
 800bfa8:	e7c6      	b.n	800bf38 <__kernel_rem_pio2+0x6c>
 800bfaa:	9b02      	ldr	r3, [sp, #8]
 800bfac:	aa0c      	add	r2, sp, #48	; 0x30
 800bfae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bfb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfb4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800bfb6:	9e02      	ldr	r6, [sp, #8]
 800bfb8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bfbc:	930a      	str	r3, [sp, #40]	; 0x28
 800bfbe:	ab98      	add	r3, sp, #608	; 0x260
 800bfc0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bfc4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800bfc8:	ab70      	add	r3, sp, #448	; 0x1c0
 800bfca:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 800bfce:	46d0      	mov	r8, sl
 800bfd0:	46b1      	mov	r9, r6
 800bfd2:	af0c      	add	r7, sp, #48	; 0x30
 800bfd4:	9700      	str	r7, [sp, #0]
 800bfd6:	f1b9 0f00 	cmp.w	r9, #0
 800bfda:	f1a8 0808 	sub.w	r8, r8, #8
 800bfde:	dc71      	bgt.n	800c0c4 <__kernel_rem_pio2+0x1f8>
 800bfe0:	465a      	mov	r2, fp
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	4629      	mov	r1, r5
 800bfe6:	f000 fbeb 	bl	800c7c0 <scalbn>
 800bfea:	2200      	movs	r2, #0
 800bfec:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bff0:	4604      	mov	r4, r0
 800bff2:	460d      	mov	r5, r1
 800bff4:	f7f4 fad4 	bl	80005a0 <__aeabi_dmul>
 800bff8:	f000 fb62 	bl	800c6c0 <floor>
 800bffc:	2200      	movs	r2, #0
 800bffe:	4b6e      	ldr	r3, [pc, #440]	; (800c1b8 <__kernel_rem_pio2+0x2ec>)
 800c000:	f7f4 face 	bl	80005a0 <__aeabi_dmul>
 800c004:	4602      	mov	r2, r0
 800c006:	460b      	mov	r3, r1
 800c008:	4620      	mov	r0, r4
 800c00a:	4629      	mov	r1, r5
 800c00c:	f7f4 f910 	bl	8000230 <__aeabi_dsub>
 800c010:	460d      	mov	r5, r1
 800c012:	4604      	mov	r4, r0
 800c014:	f7f4 fd5e 	bl	8000ad4 <__aeabi_d2iz>
 800c018:	9004      	str	r0, [sp, #16]
 800c01a:	f7f4 fa57 	bl	80004cc <__aeabi_i2d>
 800c01e:	4602      	mov	r2, r0
 800c020:	460b      	mov	r3, r1
 800c022:	4620      	mov	r0, r4
 800c024:	4629      	mov	r1, r5
 800c026:	f7f4 f903 	bl	8000230 <__aeabi_dsub>
 800c02a:	f1bb 0f00 	cmp.w	fp, #0
 800c02e:	4680      	mov	r8, r0
 800c030:	4689      	mov	r9, r1
 800c032:	dd70      	ble.n	800c116 <__kernel_rem_pio2+0x24a>
 800c034:	1e72      	subs	r2, r6, #1
 800c036:	ab0c      	add	r3, sp, #48	; 0x30
 800c038:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c03c:	9c04      	ldr	r4, [sp, #16]
 800c03e:	f1cb 0118 	rsb	r1, fp, #24
 800c042:	fa40 f301 	asr.w	r3, r0, r1
 800c046:	441c      	add	r4, r3
 800c048:	408b      	lsls	r3, r1
 800c04a:	1ac0      	subs	r0, r0, r3
 800c04c:	ab0c      	add	r3, sp, #48	; 0x30
 800c04e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c052:	f1cb 0317 	rsb	r3, fp, #23
 800c056:	9404      	str	r4, [sp, #16]
 800c058:	fa40 f303 	asr.w	r3, r0, r3
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	9b00      	ldr	r3, [sp, #0]
 800c060:	2b00      	cmp	r3, #0
 800c062:	dd66      	ble.n	800c132 <__kernel_rem_pio2+0x266>
 800c064:	2200      	movs	r2, #0
 800c066:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c06a:	4614      	mov	r4, r2
 800c06c:	9b04      	ldr	r3, [sp, #16]
 800c06e:	3301      	adds	r3, #1
 800c070:	9304      	str	r3, [sp, #16]
 800c072:	4296      	cmp	r6, r2
 800c074:	f300 80ac 	bgt.w	800c1d0 <__kernel_rem_pio2+0x304>
 800c078:	f1bb 0f00 	cmp.w	fp, #0
 800c07c:	dd07      	ble.n	800c08e <__kernel_rem_pio2+0x1c2>
 800c07e:	f1bb 0f01 	cmp.w	fp, #1
 800c082:	f000 80b4 	beq.w	800c1ee <__kernel_rem_pio2+0x322>
 800c086:	f1bb 0f02 	cmp.w	fp, #2
 800c08a:	f000 80ba 	beq.w	800c202 <__kernel_rem_pio2+0x336>
 800c08e:	9b00      	ldr	r3, [sp, #0]
 800c090:	2b02      	cmp	r3, #2
 800c092:	d14e      	bne.n	800c132 <__kernel_rem_pio2+0x266>
 800c094:	4642      	mov	r2, r8
 800c096:	464b      	mov	r3, r9
 800c098:	2000      	movs	r0, #0
 800c09a:	4948      	ldr	r1, [pc, #288]	; (800c1bc <__kernel_rem_pio2+0x2f0>)
 800c09c:	f7f4 f8c8 	bl	8000230 <__aeabi_dsub>
 800c0a0:	4680      	mov	r8, r0
 800c0a2:	4689      	mov	r9, r1
 800c0a4:	2c00      	cmp	r4, #0
 800c0a6:	d044      	beq.n	800c132 <__kernel_rem_pio2+0x266>
 800c0a8:	465a      	mov	r2, fp
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	4943      	ldr	r1, [pc, #268]	; (800c1bc <__kernel_rem_pio2+0x2f0>)
 800c0ae:	f000 fb87 	bl	800c7c0 <scalbn>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	4640      	mov	r0, r8
 800c0b8:	4649      	mov	r1, r9
 800c0ba:	f7f4 f8b9 	bl	8000230 <__aeabi_dsub>
 800c0be:	4680      	mov	r8, r0
 800c0c0:	4689      	mov	r9, r1
 800c0c2:	e036      	b.n	800c132 <__kernel_rem_pio2+0x266>
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	4b3e      	ldr	r3, [pc, #248]	; (800c1c0 <__kernel_rem_pio2+0x2f4>)
 800c0c8:	4620      	mov	r0, r4
 800c0ca:	4629      	mov	r1, r5
 800c0cc:	f7f4 fa68 	bl	80005a0 <__aeabi_dmul>
 800c0d0:	f7f4 fd00 	bl	8000ad4 <__aeabi_d2iz>
 800c0d4:	f7f4 f9fa 	bl	80004cc <__aeabi_i2d>
 800c0d8:	4602      	mov	r2, r0
 800c0da:	460b      	mov	r3, r1
 800c0dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	4b38      	ldr	r3, [pc, #224]	; (800c1c4 <__kernel_rem_pio2+0x2f8>)
 800c0e4:	f7f4 fa5c 	bl	80005a0 <__aeabi_dmul>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	4620      	mov	r0, r4
 800c0ee:	4629      	mov	r1, r5
 800c0f0:	f7f4 f89e 	bl	8000230 <__aeabi_dsub>
 800c0f4:	f7f4 fcee 	bl	8000ad4 <__aeabi_d2iz>
 800c0f8:	9b00      	ldr	r3, [sp, #0]
 800c0fa:	f109 39ff 	add.w	r9, r9, #4294967295
 800c0fe:	f843 0b04 	str.w	r0, [r3], #4
 800c102:	9300      	str	r3, [sp, #0]
 800c104:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c108:	e9d8 2300 	ldrd	r2, r3, [r8]
 800c10c:	f7f4 f892 	bl	8000234 <__adddf3>
 800c110:	4604      	mov	r4, r0
 800c112:	460d      	mov	r5, r1
 800c114:	e75f      	b.n	800bfd6 <__kernel_rem_pio2+0x10a>
 800c116:	d105      	bne.n	800c124 <__kernel_rem_pio2+0x258>
 800c118:	1e73      	subs	r3, r6, #1
 800c11a:	aa0c      	add	r2, sp, #48	; 0x30
 800c11c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c120:	15c3      	asrs	r3, r0, #23
 800c122:	e79b      	b.n	800c05c <__kernel_rem_pio2+0x190>
 800c124:	2200      	movs	r2, #0
 800c126:	4b28      	ldr	r3, [pc, #160]	; (800c1c8 <__kernel_rem_pio2+0x2fc>)
 800c128:	f7f4 fcc0 	bl	8000aac <__aeabi_dcmpge>
 800c12c:	2800      	cmp	r0, #0
 800c12e:	d13e      	bne.n	800c1ae <__kernel_rem_pio2+0x2e2>
 800c130:	9000      	str	r0, [sp, #0]
 800c132:	2200      	movs	r2, #0
 800c134:	2300      	movs	r3, #0
 800c136:	4640      	mov	r0, r8
 800c138:	4649      	mov	r1, r9
 800c13a:	f7f4 fc99 	bl	8000a70 <__aeabi_dcmpeq>
 800c13e:	2800      	cmp	r0, #0
 800c140:	f000 80b1 	beq.w	800c2a6 <__kernel_rem_pio2+0x3da>
 800c144:	1e74      	subs	r4, r6, #1
 800c146:	4623      	mov	r3, r4
 800c148:	2200      	movs	r2, #0
 800c14a:	9902      	ldr	r1, [sp, #8]
 800c14c:	428b      	cmp	r3, r1
 800c14e:	da5f      	bge.n	800c210 <__kernel_rem_pio2+0x344>
 800c150:	2a00      	cmp	r2, #0
 800c152:	d074      	beq.n	800c23e <__kernel_rem_pio2+0x372>
 800c154:	ab0c      	add	r3, sp, #48	; 0x30
 800c156:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c15a:	f1ab 0b18 	sub.w	fp, fp, #24
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f000 809f 	beq.w	800c2a2 <__kernel_rem_pio2+0x3d6>
 800c164:	465a      	mov	r2, fp
 800c166:	2000      	movs	r0, #0
 800c168:	4914      	ldr	r1, [pc, #80]	; (800c1bc <__kernel_rem_pio2+0x2f0>)
 800c16a:	f000 fb29 	bl	800c7c0 <scalbn>
 800c16e:	46a2      	mov	sl, r4
 800c170:	4606      	mov	r6, r0
 800c172:	460f      	mov	r7, r1
 800c174:	f04f 0800 	mov.w	r8, #0
 800c178:	ab70      	add	r3, sp, #448	; 0x1c0
 800c17a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 800c1c0 <__kernel_rem_pio2+0x2f4>
 800c17e:	00e5      	lsls	r5, r4, #3
 800c180:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 800c184:	f1ba 0f00 	cmp.w	sl, #0
 800c188:	f280 80c3 	bge.w	800c312 <__kernel_rem_pio2+0x446>
 800c18c:	4626      	mov	r6, r4
 800c18e:	2e00      	cmp	r6, #0
 800c190:	f2c0 80f5 	blt.w	800c37e <__kernel_rem_pio2+0x4b2>
 800c194:	4b0d      	ldr	r3, [pc, #52]	; (800c1cc <__kernel_rem_pio2+0x300>)
 800c196:	f04f 0a00 	mov.w	sl, #0
 800c19a:	9307      	str	r3, [sp, #28]
 800c19c:	ab70      	add	r3, sp, #448	; 0x1c0
 800c19e:	f04f 0b00 	mov.w	fp, #0
 800c1a2:	f04f 0800 	mov.w	r8, #0
 800c1a6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c1aa:	1ba7      	subs	r7, r4, r6
 800c1ac:	e0db      	b.n	800c366 <__kernel_rem_pio2+0x49a>
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	e757      	b.n	800c064 <__kernel_rem_pio2+0x198>
 800c1b4:	0800d240 	.word	0x0800d240
 800c1b8:	40200000 	.word	0x40200000
 800c1bc:	3ff00000 	.word	0x3ff00000
 800c1c0:	3e700000 	.word	0x3e700000
 800c1c4:	41700000 	.word	0x41700000
 800c1c8:	3fe00000 	.word	0x3fe00000
 800c1cc:	0800d200 	.word	0x0800d200
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	b944      	cbnz	r4, 800c1e6 <__kernel_rem_pio2+0x31a>
 800c1d4:	b11b      	cbz	r3, 800c1de <__kernel_rem_pio2+0x312>
 800c1d6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c1da:	603b      	str	r3, [r7, #0]
 800c1dc:	2301      	movs	r3, #1
 800c1de:	461c      	mov	r4, r3
 800c1e0:	3201      	adds	r2, #1
 800c1e2:	3704      	adds	r7, #4
 800c1e4:	e745      	b.n	800c072 <__kernel_rem_pio2+0x1a6>
 800c1e6:	1acb      	subs	r3, r1, r3
 800c1e8:	603b      	str	r3, [r7, #0]
 800c1ea:	4623      	mov	r3, r4
 800c1ec:	e7f7      	b.n	800c1de <__kernel_rem_pio2+0x312>
 800c1ee:	1e72      	subs	r2, r6, #1
 800c1f0:	ab0c      	add	r3, sp, #48	; 0x30
 800c1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1f6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c1fa:	a90c      	add	r1, sp, #48	; 0x30
 800c1fc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c200:	e745      	b.n	800c08e <__kernel_rem_pio2+0x1c2>
 800c202:	1e72      	subs	r2, r6, #1
 800c204:	ab0c      	add	r3, sp, #48	; 0x30
 800c206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c20a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c20e:	e7f4      	b.n	800c1fa <__kernel_rem_pio2+0x32e>
 800c210:	a90c      	add	r1, sp, #48	; 0x30
 800c212:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c216:	3b01      	subs	r3, #1
 800c218:	430a      	orrs	r2, r1
 800c21a:	e796      	b.n	800c14a <__kernel_rem_pio2+0x27e>
 800c21c:	3401      	adds	r4, #1
 800c21e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c222:	2a00      	cmp	r2, #0
 800c224:	d0fa      	beq.n	800c21c <__kernel_rem_pio2+0x350>
 800c226:	9b08      	ldr	r3, [sp, #32]
 800c228:	f106 0801 	add.w	r8, r6, #1
 800c22c:	18f5      	adds	r5, r6, r3
 800c22e:	ab20      	add	r3, sp, #128	; 0x80
 800c230:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c234:	4434      	add	r4, r6
 800c236:	4544      	cmp	r4, r8
 800c238:	da04      	bge.n	800c244 <__kernel_rem_pio2+0x378>
 800c23a:	4626      	mov	r6, r4
 800c23c:	e6bf      	b.n	800bfbe <__kernel_rem_pio2+0xf2>
 800c23e:	2401      	movs	r4, #1
 800c240:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c242:	e7ec      	b.n	800c21e <__kernel_rem_pio2+0x352>
 800c244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c246:	f04f 0900 	mov.w	r9, #0
 800c24a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c24e:	f7f4 f93d 	bl	80004cc <__aeabi_i2d>
 800c252:	2600      	movs	r6, #0
 800c254:	2700      	movs	r7, #0
 800c256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c258:	e9c5 0100 	strd	r0, r1, [r5]
 800c25c:	3b08      	subs	r3, #8
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	9504      	str	r5, [sp, #16]
 800c262:	9b07      	ldr	r3, [sp, #28]
 800c264:	4599      	cmp	r9, r3
 800c266:	dd05      	ble.n	800c274 <__kernel_rem_pio2+0x3a8>
 800c268:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800c26c:	f108 0801 	add.w	r8, r8, #1
 800c270:	3508      	adds	r5, #8
 800c272:	e7e0      	b.n	800c236 <__kernel_rem_pio2+0x36a>
 800c274:	f8dd c010 	ldr.w	ip, [sp, #16]
 800c278:	9900      	ldr	r1, [sp, #0]
 800c27a:	f109 0901 	add.w	r9, r9, #1
 800c27e:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 800c282:	9100      	str	r1, [sp, #0]
 800c284:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 800c288:	f8cd c010 	str.w	ip, [sp, #16]
 800c28c:	f7f4 f988 	bl	80005a0 <__aeabi_dmul>
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	4630      	mov	r0, r6
 800c296:	4639      	mov	r1, r7
 800c298:	f7f3 ffcc 	bl	8000234 <__adddf3>
 800c29c:	4606      	mov	r6, r0
 800c29e:	460f      	mov	r7, r1
 800c2a0:	e7df      	b.n	800c262 <__kernel_rem_pio2+0x396>
 800c2a2:	3c01      	subs	r4, #1
 800c2a4:	e756      	b.n	800c154 <__kernel_rem_pio2+0x288>
 800c2a6:	f1cb 0200 	rsb	r2, fp, #0
 800c2aa:	4640      	mov	r0, r8
 800c2ac:	4649      	mov	r1, r9
 800c2ae:	f000 fa87 	bl	800c7c0 <scalbn>
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	4ba4      	ldr	r3, [pc, #656]	; (800c548 <__kernel_rem_pio2+0x67c>)
 800c2b6:	4604      	mov	r4, r0
 800c2b8:	460d      	mov	r5, r1
 800c2ba:	f7f4 fbf7 	bl	8000aac <__aeabi_dcmpge>
 800c2be:	b1f8      	cbz	r0, 800c300 <__kernel_rem_pio2+0x434>
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	4ba2      	ldr	r3, [pc, #648]	; (800c54c <__kernel_rem_pio2+0x680>)
 800c2c4:	4620      	mov	r0, r4
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	f7f4 f96a 	bl	80005a0 <__aeabi_dmul>
 800c2cc:	f7f4 fc02 	bl	8000ad4 <__aeabi_d2iz>
 800c2d0:	4607      	mov	r7, r0
 800c2d2:	f7f4 f8fb 	bl	80004cc <__aeabi_i2d>
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	4b9b      	ldr	r3, [pc, #620]	; (800c548 <__kernel_rem_pio2+0x67c>)
 800c2da:	f7f4 f961 	bl	80005a0 <__aeabi_dmul>
 800c2de:	460b      	mov	r3, r1
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f7f3 ffa3 	bl	8000230 <__aeabi_dsub>
 800c2ea:	f7f4 fbf3 	bl	8000ad4 <__aeabi_d2iz>
 800c2ee:	1c74      	adds	r4, r6, #1
 800c2f0:	ab0c      	add	r3, sp, #48	; 0x30
 800c2f2:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c2f6:	f10b 0b18 	add.w	fp, fp, #24
 800c2fa:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800c2fe:	e731      	b.n	800c164 <__kernel_rem_pio2+0x298>
 800c300:	4620      	mov	r0, r4
 800c302:	4629      	mov	r1, r5
 800c304:	f7f4 fbe6 	bl	8000ad4 <__aeabi_d2iz>
 800c308:	ab0c      	add	r3, sp, #48	; 0x30
 800c30a:	4634      	mov	r4, r6
 800c30c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c310:	e728      	b.n	800c164 <__kernel_rem_pio2+0x298>
 800c312:	ab0c      	add	r3, sp, #48	; 0x30
 800c314:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c318:	f7f4 f8d8 	bl	80004cc <__aeabi_i2d>
 800c31c:	4632      	mov	r2, r6
 800c31e:	463b      	mov	r3, r7
 800c320:	f7f4 f93e 	bl	80005a0 <__aeabi_dmul>
 800c324:	4642      	mov	r2, r8
 800c326:	e86b 0102 	strd	r0, r1, [fp], #-8
 800c32a:	464b      	mov	r3, r9
 800c32c:	4630      	mov	r0, r6
 800c32e:	4639      	mov	r1, r7
 800c330:	f7f4 f936 	bl	80005a0 <__aeabi_dmul>
 800c334:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c338:	4606      	mov	r6, r0
 800c33a:	460f      	mov	r7, r1
 800c33c:	e722      	b.n	800c184 <__kernel_rem_pio2+0x2b8>
 800c33e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800c342:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c346:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800c34a:	f8cd c01c 	str.w	ip, [sp, #28]
 800c34e:	f7f4 f927 	bl	80005a0 <__aeabi_dmul>
 800c352:	4602      	mov	r2, r0
 800c354:	460b      	mov	r3, r1
 800c356:	4650      	mov	r0, sl
 800c358:	4659      	mov	r1, fp
 800c35a:	f7f3 ff6b 	bl	8000234 <__adddf3>
 800c35e:	4682      	mov	sl, r0
 800c360:	468b      	mov	fp, r1
 800c362:	f108 0801 	add.w	r8, r8, #1
 800c366:	9b02      	ldr	r3, [sp, #8]
 800c368:	4598      	cmp	r8, r3
 800c36a:	dc01      	bgt.n	800c370 <__kernel_rem_pio2+0x4a4>
 800c36c:	45b8      	cmp	r8, r7
 800c36e:	dde6      	ble.n	800c33e <__kernel_rem_pio2+0x472>
 800c370:	ab48      	add	r3, sp, #288	; 0x120
 800c372:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c376:	e9c7 ab00 	strd	sl, fp, [r7]
 800c37a:	3e01      	subs	r6, #1
 800c37c:	e707      	b.n	800c18e <__kernel_rem_pio2+0x2c2>
 800c37e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c380:	2b02      	cmp	r3, #2
 800c382:	dc09      	bgt.n	800c398 <__kernel_rem_pio2+0x4cc>
 800c384:	2b00      	cmp	r3, #0
 800c386:	dc32      	bgt.n	800c3ee <__kernel_rem_pio2+0x522>
 800c388:	d05a      	beq.n	800c440 <__kernel_rem_pio2+0x574>
 800c38a:	9b04      	ldr	r3, [sp, #16]
 800c38c:	f003 0007 	and.w	r0, r3, #7
 800c390:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800c394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c398:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800c39a:	2b03      	cmp	r3, #3
 800c39c:	d1f5      	bne.n	800c38a <__kernel_rem_pio2+0x4be>
 800c39e:	ab48      	add	r3, sp, #288	; 0x120
 800c3a0:	441d      	add	r5, r3
 800c3a2:	46aa      	mov	sl, r5
 800c3a4:	46a3      	mov	fp, r4
 800c3a6:	f1bb 0f00 	cmp.w	fp, #0
 800c3aa:	dc76      	bgt.n	800c49a <__kernel_rem_pio2+0x5ce>
 800c3ac:	46aa      	mov	sl, r5
 800c3ae:	46a3      	mov	fp, r4
 800c3b0:	f1bb 0f01 	cmp.w	fp, #1
 800c3b4:	f300 8090 	bgt.w	800c4d8 <__kernel_rem_pio2+0x60c>
 800c3b8:	2700      	movs	r7, #0
 800c3ba:	463e      	mov	r6, r7
 800c3bc:	2c01      	cmp	r4, #1
 800c3be:	f300 80aa 	bgt.w	800c516 <__kernel_rem_pio2+0x64a>
 800c3c2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 800c3c6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 800c3ca:	9b00      	ldr	r3, [sp, #0]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f040 80ac 	bne.w	800c52a <__kernel_rem_pio2+0x65e>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	462a      	mov	r2, r5
 800c3d6:	9806      	ldr	r0, [sp, #24]
 800c3d8:	e9c0 2300 	strd	r2, r3, [r0]
 800c3dc:	4622      	mov	r2, r4
 800c3de:	460b      	mov	r3, r1
 800c3e0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c3e4:	463a      	mov	r2, r7
 800c3e6:	4633      	mov	r3, r6
 800c3e8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c3ec:	e7cd      	b.n	800c38a <__kernel_rem_pio2+0x4be>
 800c3ee:	2000      	movs	r0, #0
 800c3f0:	46a0      	mov	r8, r4
 800c3f2:	4601      	mov	r1, r0
 800c3f4:	ab48      	add	r3, sp, #288	; 0x120
 800c3f6:	441d      	add	r5, r3
 800c3f8:	f1b8 0f00 	cmp.w	r8, #0
 800c3fc:	da3a      	bge.n	800c474 <__kernel_rem_pio2+0x5a8>
 800c3fe:	9b00      	ldr	r3, [sp, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d03e      	beq.n	800c482 <__kernel_rem_pio2+0x5b6>
 800c404:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 800c408:	4602      	mov	r2, r0
 800c40a:	462b      	mov	r3, r5
 800c40c:	9d06      	ldr	r5, [sp, #24]
 800c40e:	2601      	movs	r6, #1
 800c410:	e9c5 2300 	strd	r2, r3, [r5]
 800c414:	460b      	mov	r3, r1
 800c416:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800c41a:	f7f3 ff09 	bl	8000230 <__aeabi_dsub>
 800c41e:	4684      	mov	ip, r0
 800c420:	460f      	mov	r7, r1
 800c422:	ad48      	add	r5, sp, #288	; 0x120
 800c424:	42b4      	cmp	r4, r6
 800c426:	f105 0508 	add.w	r5, r5, #8
 800c42a:	da2c      	bge.n	800c486 <__kernel_rem_pio2+0x5ba>
 800c42c:	9b00      	ldr	r3, [sp, #0]
 800c42e:	b10b      	cbz	r3, 800c434 <__kernel_rem_pio2+0x568>
 800c430:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c434:	4662      	mov	r2, ip
 800c436:	463b      	mov	r3, r7
 800c438:	9906      	ldr	r1, [sp, #24]
 800c43a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800c43e:	e7a4      	b.n	800c38a <__kernel_rem_pio2+0x4be>
 800c440:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 800c442:	ab48      	add	r3, sp, #288	; 0x120
 800c444:	4637      	mov	r7, r6
 800c446:	441d      	add	r5, r3
 800c448:	2c00      	cmp	r4, #0
 800c44a:	da09      	bge.n	800c460 <__kernel_rem_pio2+0x594>
 800c44c:	9b00      	ldr	r3, [sp, #0]
 800c44e:	b10b      	cbz	r3, 800c454 <__kernel_rem_pio2+0x588>
 800c450:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800c454:	4632      	mov	r2, r6
 800c456:	463b      	mov	r3, r7
 800c458:	9906      	ldr	r1, [sp, #24]
 800c45a:	e9c1 2300 	strd	r2, r3, [r1]
 800c45e:	e794      	b.n	800c38a <__kernel_rem_pio2+0x4be>
 800c460:	4630      	mov	r0, r6
 800c462:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c466:	4639      	mov	r1, r7
 800c468:	f7f3 fee4 	bl	8000234 <__adddf3>
 800c46c:	3c01      	subs	r4, #1
 800c46e:	4606      	mov	r6, r0
 800c470:	460f      	mov	r7, r1
 800c472:	e7e9      	b.n	800c448 <__kernel_rem_pio2+0x57c>
 800c474:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c478:	f7f3 fedc 	bl	8000234 <__adddf3>
 800c47c:	f108 38ff 	add.w	r8, r8, #4294967295
 800c480:	e7ba      	b.n	800c3f8 <__kernel_rem_pio2+0x52c>
 800c482:	460d      	mov	r5, r1
 800c484:	e7c0      	b.n	800c408 <__kernel_rem_pio2+0x53c>
 800c486:	4660      	mov	r0, ip
 800c488:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c48c:	4639      	mov	r1, r7
 800c48e:	f7f3 fed1 	bl	8000234 <__adddf3>
 800c492:	3601      	adds	r6, #1
 800c494:	4684      	mov	ip, r0
 800c496:	460f      	mov	r7, r1
 800c498:	e7c4      	b.n	800c424 <__kernel_rem_pio2+0x558>
 800c49a:	e9da 6700 	ldrd	r6, r7, [sl]
 800c49e:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 800c4a2:	4632      	mov	r2, r6
 800c4a4:	463b      	mov	r3, r7
 800c4a6:	4640      	mov	r0, r8
 800c4a8:	4649      	mov	r1, r9
 800c4aa:	f7f3 fec3 	bl	8000234 <__adddf3>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4b6:	4640      	mov	r0, r8
 800c4b8:	4649      	mov	r1, r9
 800c4ba:	f7f3 feb9 	bl	8000230 <__aeabi_dsub>
 800c4be:	4632      	mov	r2, r6
 800c4c0:	463b      	mov	r3, r7
 800c4c2:	f7f3 feb7 	bl	8000234 <__adddf3>
 800c4c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4ca:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c4ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c4d2:	e9ca 2300 	strd	r2, r3, [sl]
 800c4d6:	e766      	b.n	800c3a6 <__kernel_rem_pio2+0x4da>
 800c4d8:	e9da 8900 	ldrd	r8, r9, [sl]
 800c4dc:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 800c4e0:	4642      	mov	r2, r8
 800c4e2:	464b      	mov	r3, r9
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	4639      	mov	r1, r7
 800c4e8:	f7f3 fea4 	bl	8000234 <__adddf3>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	460b      	mov	r3, r1
 800c4f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c4f4:	4630      	mov	r0, r6
 800c4f6:	4639      	mov	r1, r7
 800c4f8:	f7f3 fe9a 	bl	8000230 <__aeabi_dsub>
 800c4fc:	4642      	mov	r2, r8
 800c4fe:	464b      	mov	r3, r9
 800c500:	f7f3 fe98 	bl	8000234 <__adddf3>
 800c504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c508:	e86a 0102 	strd	r0, r1, [sl], #-8
 800c50c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c510:	e9ca 2300 	strd	r2, r3, [sl]
 800c514:	e74c      	b.n	800c3b0 <__kernel_rem_pio2+0x4e4>
 800c516:	4638      	mov	r0, r7
 800c518:	e875 2302 	ldrd	r2, r3, [r5], #-8
 800c51c:	4631      	mov	r1, r6
 800c51e:	f7f3 fe89 	bl	8000234 <__adddf3>
 800c522:	3c01      	subs	r4, #1
 800c524:	4607      	mov	r7, r0
 800c526:	460e      	mov	r6, r1
 800c528:	e748      	b.n	800c3bc <__kernel_rem_pio2+0x4f0>
 800c52a:	9b06      	ldr	r3, [sp, #24]
 800c52c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c530:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c534:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800c538:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800c53c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800c540:	601d      	str	r5, [r3, #0]
 800c542:	615e      	str	r6, [r3, #20]
 800c544:	e721      	b.n	800c38a <__kernel_rem_pio2+0x4be>
 800c546:	bf00      	nop
 800c548:	41700000 	.word	0x41700000
 800c54c:	3e700000 	.word	0x3e700000

0800c550 <__kernel_sin>:
 800c550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c554:	b086      	sub	sp, #24
 800c556:	e9cd 2300 	strd	r2, r3, [sp]
 800c55a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c55e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c562:	4682      	mov	sl, r0
 800c564:	460c      	mov	r4, r1
 800c566:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800c568:	da03      	bge.n	800c572 <__kernel_sin+0x22>
 800c56a:	f7f4 fab3 	bl	8000ad4 <__aeabi_d2iz>
 800c56e:	2800      	cmp	r0, #0
 800c570:	d050      	beq.n	800c614 <__kernel_sin+0xc4>
 800c572:	4652      	mov	r2, sl
 800c574:	4623      	mov	r3, r4
 800c576:	4650      	mov	r0, sl
 800c578:	4621      	mov	r1, r4
 800c57a:	f7f4 f811 	bl	80005a0 <__aeabi_dmul>
 800c57e:	4606      	mov	r6, r0
 800c580:	460f      	mov	r7, r1
 800c582:	4602      	mov	r2, r0
 800c584:	460b      	mov	r3, r1
 800c586:	4650      	mov	r0, sl
 800c588:	4621      	mov	r1, r4
 800c58a:	f7f4 f809 	bl	80005a0 <__aeabi_dmul>
 800c58e:	a33e      	add	r3, pc, #248	; (adr r3, 800c688 <__kernel_sin+0x138>)
 800c590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c594:	4680      	mov	r8, r0
 800c596:	4689      	mov	r9, r1
 800c598:	4630      	mov	r0, r6
 800c59a:	4639      	mov	r1, r7
 800c59c:	f7f4 f800 	bl	80005a0 <__aeabi_dmul>
 800c5a0:	a33b      	add	r3, pc, #236	; (adr r3, 800c690 <__kernel_sin+0x140>)
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	f7f3 fe43 	bl	8000230 <__aeabi_dsub>
 800c5aa:	4632      	mov	r2, r6
 800c5ac:	463b      	mov	r3, r7
 800c5ae:	f7f3 fff7 	bl	80005a0 <__aeabi_dmul>
 800c5b2:	a339      	add	r3, pc, #228	; (adr r3, 800c698 <__kernel_sin+0x148>)
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	f7f3 fe3c 	bl	8000234 <__adddf3>
 800c5bc:	4632      	mov	r2, r6
 800c5be:	463b      	mov	r3, r7
 800c5c0:	f7f3 ffee 	bl	80005a0 <__aeabi_dmul>
 800c5c4:	a336      	add	r3, pc, #216	; (adr r3, 800c6a0 <__kernel_sin+0x150>)
 800c5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ca:	f7f3 fe31 	bl	8000230 <__aeabi_dsub>
 800c5ce:	4632      	mov	r2, r6
 800c5d0:	463b      	mov	r3, r7
 800c5d2:	f7f3 ffe5 	bl	80005a0 <__aeabi_dmul>
 800c5d6:	a334      	add	r3, pc, #208	; (adr r3, 800c6a8 <__kernel_sin+0x158>)
 800c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5dc:	f7f3 fe2a 	bl	8000234 <__adddf3>
 800c5e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c5e4:	b9dd      	cbnz	r5, 800c61e <__kernel_sin+0xce>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	4639      	mov	r1, r7
 800c5ee:	f7f3 ffd7 	bl	80005a0 <__aeabi_dmul>
 800c5f2:	a32f      	add	r3, pc, #188	; (adr r3, 800c6b0 <__kernel_sin+0x160>)
 800c5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5f8:	f7f3 fe1a 	bl	8000230 <__aeabi_dsub>
 800c5fc:	4642      	mov	r2, r8
 800c5fe:	464b      	mov	r3, r9
 800c600:	f7f3 ffce 	bl	80005a0 <__aeabi_dmul>
 800c604:	4602      	mov	r2, r0
 800c606:	460b      	mov	r3, r1
 800c608:	4650      	mov	r0, sl
 800c60a:	4621      	mov	r1, r4
 800c60c:	f7f3 fe12 	bl	8000234 <__adddf3>
 800c610:	4682      	mov	sl, r0
 800c612:	460c      	mov	r4, r1
 800c614:	4650      	mov	r0, sl
 800c616:	4621      	mov	r1, r4
 800c618:	b006      	add	sp, #24
 800c61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c61e:	2200      	movs	r2, #0
 800c620:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c624:	4b24      	ldr	r3, [pc, #144]	; (800c6b8 <__kernel_sin+0x168>)
 800c626:	f7f3 ffbb 	bl	80005a0 <__aeabi_dmul>
 800c62a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c62e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c632:	4640      	mov	r0, r8
 800c634:	4649      	mov	r1, r9
 800c636:	f7f3 ffb3 	bl	80005a0 <__aeabi_dmul>
 800c63a:	4602      	mov	r2, r0
 800c63c:	460b      	mov	r3, r1
 800c63e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c642:	f7f3 fdf5 	bl	8000230 <__aeabi_dsub>
 800c646:	4632      	mov	r2, r6
 800c648:	463b      	mov	r3, r7
 800c64a:	f7f3 ffa9 	bl	80005a0 <__aeabi_dmul>
 800c64e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c652:	f7f3 fded 	bl	8000230 <__aeabi_dsub>
 800c656:	a316      	add	r3, pc, #88	; (adr r3, 800c6b0 <__kernel_sin+0x160>)
 800c658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c65c:	4606      	mov	r6, r0
 800c65e:	460f      	mov	r7, r1
 800c660:	4640      	mov	r0, r8
 800c662:	4649      	mov	r1, r9
 800c664:	f7f3 ff9c 	bl	80005a0 <__aeabi_dmul>
 800c668:	4602      	mov	r2, r0
 800c66a:	460b      	mov	r3, r1
 800c66c:	4630      	mov	r0, r6
 800c66e:	4639      	mov	r1, r7
 800c670:	f7f3 fde0 	bl	8000234 <__adddf3>
 800c674:	4602      	mov	r2, r0
 800c676:	460b      	mov	r3, r1
 800c678:	4650      	mov	r0, sl
 800c67a:	4621      	mov	r1, r4
 800c67c:	f7f3 fdd8 	bl	8000230 <__aeabi_dsub>
 800c680:	e7c6      	b.n	800c610 <__kernel_sin+0xc0>
 800c682:	bf00      	nop
 800c684:	f3af 8000 	nop.w
 800c688:	5acfd57c 	.word	0x5acfd57c
 800c68c:	3de5d93a 	.word	0x3de5d93a
 800c690:	8a2b9ceb 	.word	0x8a2b9ceb
 800c694:	3e5ae5e6 	.word	0x3e5ae5e6
 800c698:	57b1fe7d 	.word	0x57b1fe7d
 800c69c:	3ec71de3 	.word	0x3ec71de3
 800c6a0:	19c161d5 	.word	0x19c161d5
 800c6a4:	3f2a01a0 	.word	0x3f2a01a0
 800c6a8:	1110f8a6 	.word	0x1110f8a6
 800c6ac:	3f811111 	.word	0x3f811111
 800c6b0:	55555549 	.word	0x55555549
 800c6b4:	3fc55555 	.word	0x3fc55555
 800c6b8:	3fe00000 	.word	0x3fe00000
 800c6bc:	00000000 	.word	0x00000000

0800c6c0 <floor>:
 800c6c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6c4:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800c6c8:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800c6cc:	2e13      	cmp	r6, #19
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	460b      	mov	r3, r1
 800c6d2:	4607      	mov	r7, r0
 800c6d4:	460c      	mov	r4, r1
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	dc33      	bgt.n	800c742 <floor+0x82>
 800c6da:	2e00      	cmp	r6, #0
 800c6dc:	da14      	bge.n	800c708 <floor+0x48>
 800c6de:	a334      	add	r3, pc, #208	; (adr r3, 800c7b0 <floor+0xf0>)
 800c6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e4:	f7f3 fda6 	bl	8000234 <__adddf3>
 800c6e8:	2200      	movs	r2, #0
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	f7f4 f9e8 	bl	8000ac0 <__aeabi_dcmpgt>
 800c6f0:	b138      	cbz	r0, 800c702 <floor+0x42>
 800c6f2:	2c00      	cmp	r4, #0
 800c6f4:	da58      	bge.n	800c7a8 <floor+0xe8>
 800c6f6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c6fa:	431d      	orrs	r5, r3
 800c6fc:	d001      	beq.n	800c702 <floor+0x42>
 800c6fe:	2500      	movs	r5, #0
 800c700:	4c2d      	ldr	r4, [pc, #180]	; (800c7b8 <floor+0xf8>)
 800c702:	4623      	mov	r3, r4
 800c704:	462f      	mov	r7, r5
 800c706:	e025      	b.n	800c754 <floor+0x94>
 800c708:	4a2c      	ldr	r2, [pc, #176]	; (800c7bc <floor+0xfc>)
 800c70a:	fa42 f806 	asr.w	r8, r2, r6
 800c70e:	ea01 0208 	and.w	r2, r1, r8
 800c712:	4302      	orrs	r2, r0
 800c714:	d01e      	beq.n	800c754 <floor+0x94>
 800c716:	a326      	add	r3, pc, #152	; (adr r3, 800c7b0 <floor+0xf0>)
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	f7f3 fd8a 	bl	8000234 <__adddf3>
 800c720:	2200      	movs	r2, #0
 800c722:	2300      	movs	r3, #0
 800c724:	f7f4 f9cc 	bl	8000ac0 <__aeabi_dcmpgt>
 800c728:	2800      	cmp	r0, #0
 800c72a:	d0ea      	beq.n	800c702 <floor+0x42>
 800c72c:	2c00      	cmp	r4, #0
 800c72e:	bfbe      	ittt	lt
 800c730:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c734:	fa43 f606 	asrlt.w	r6, r3, r6
 800c738:	19a4      	addlt	r4, r4, r6
 800c73a:	2500      	movs	r5, #0
 800c73c:	ea24 0408 	bic.w	r4, r4, r8
 800c740:	e7df      	b.n	800c702 <floor+0x42>
 800c742:	2e33      	cmp	r6, #51	; 0x33
 800c744:	dd0a      	ble.n	800c75c <floor+0x9c>
 800c746:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c74a:	d103      	bne.n	800c754 <floor+0x94>
 800c74c:	f7f3 fd72 	bl	8000234 <__adddf3>
 800c750:	4607      	mov	r7, r0
 800c752:	460b      	mov	r3, r1
 800c754:	4638      	mov	r0, r7
 800c756:	4619      	mov	r1, r3
 800c758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c75c:	f04f 32ff 	mov.w	r2, #4294967295
 800c760:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800c764:	fa22 f808 	lsr.w	r8, r2, r8
 800c768:	ea18 0f00 	tst.w	r8, r0
 800c76c:	d0f2      	beq.n	800c754 <floor+0x94>
 800c76e:	a310      	add	r3, pc, #64	; (adr r3, 800c7b0 <floor+0xf0>)
 800c770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c774:	f7f3 fd5e 	bl	8000234 <__adddf3>
 800c778:	2200      	movs	r2, #0
 800c77a:	2300      	movs	r3, #0
 800c77c:	f7f4 f9a0 	bl	8000ac0 <__aeabi_dcmpgt>
 800c780:	2800      	cmp	r0, #0
 800c782:	d0be      	beq.n	800c702 <floor+0x42>
 800c784:	2c00      	cmp	r4, #0
 800c786:	da02      	bge.n	800c78e <floor+0xce>
 800c788:	2e14      	cmp	r6, #20
 800c78a:	d103      	bne.n	800c794 <floor+0xd4>
 800c78c:	3401      	adds	r4, #1
 800c78e:	ea25 0508 	bic.w	r5, r5, r8
 800c792:	e7b6      	b.n	800c702 <floor+0x42>
 800c794:	2301      	movs	r3, #1
 800c796:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c79a:	fa03 f606 	lsl.w	r6, r3, r6
 800c79e:	4435      	add	r5, r6
 800c7a0:	42bd      	cmp	r5, r7
 800c7a2:	bf38      	it	cc
 800c7a4:	18e4      	addcc	r4, r4, r3
 800c7a6:	e7f2      	b.n	800c78e <floor+0xce>
 800c7a8:	2500      	movs	r5, #0
 800c7aa:	462c      	mov	r4, r5
 800c7ac:	e7a9      	b.n	800c702 <floor+0x42>
 800c7ae:	bf00      	nop
 800c7b0:	8800759c 	.word	0x8800759c
 800c7b4:	7e37e43c 	.word	0x7e37e43c
 800c7b8:	bff00000 	.word	0xbff00000
 800c7bc:	000fffff 	.word	0x000fffff

0800c7c0 <scalbn>:
 800c7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c2:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	460d      	mov	r5, r1
 800c7ca:	4617      	mov	r7, r2
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	b996      	cbnz	r6, 800c7f6 <scalbn+0x36>
 800c7d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c7d4:	4303      	orrs	r3, r0
 800c7d6:	d039      	beq.n	800c84c <scalbn+0x8c>
 800c7d8:	4b33      	ldr	r3, [pc, #204]	; (800c8a8 <scalbn+0xe8>)
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f7f3 fee0 	bl	80005a0 <__aeabi_dmul>
 800c7e0:	4b32      	ldr	r3, [pc, #200]	; (800c8ac <scalbn+0xec>)
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	429f      	cmp	r7, r3
 800c7e6:	460d      	mov	r5, r1
 800c7e8:	da0f      	bge.n	800c80a <scalbn+0x4a>
 800c7ea:	a32b      	add	r3, pc, #172	; (adr r3, 800c898 <scalbn+0xd8>)
 800c7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f0:	f7f3 fed6 	bl	80005a0 <__aeabi_dmul>
 800c7f4:	e006      	b.n	800c804 <scalbn+0x44>
 800c7f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c7fa:	4296      	cmp	r6, r2
 800c7fc:	d10a      	bne.n	800c814 <scalbn+0x54>
 800c7fe:	4602      	mov	r2, r0
 800c800:	f7f3 fd18 	bl	8000234 <__adddf3>
 800c804:	4604      	mov	r4, r0
 800c806:	460d      	mov	r5, r1
 800c808:	e020      	b.n	800c84c <scalbn+0x8c>
 800c80a:	460b      	mov	r3, r1
 800c80c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c810:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 800c814:	f240 72fe 	movw	r2, #2046	; 0x7fe
 800c818:	19b9      	adds	r1, r7, r6
 800c81a:	4291      	cmp	r1, r2
 800c81c:	dd0e      	ble.n	800c83c <scalbn+0x7c>
 800c81e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800c822:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 800c826:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 800c82a:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 800c82e:	4820      	ldr	r0, [pc, #128]	; (800c8b0 <scalbn+0xf0>)
 800c830:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800c834:	a31a      	add	r3, pc, #104	; (adr r3, 800c8a0 <scalbn+0xe0>)
 800c836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83a:	e7d9      	b.n	800c7f0 <scalbn+0x30>
 800c83c:	2900      	cmp	r1, #0
 800c83e:	dd08      	ble.n	800c852 <scalbn+0x92>
 800c840:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c844:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c848:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c84c:	4620      	mov	r0, r4
 800c84e:	4629      	mov	r1, r5
 800c850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c852:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800c856:	da12      	bge.n	800c87e <scalbn+0xbe>
 800c858:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c85c:	429f      	cmp	r7, r3
 800c85e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 800c862:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 800c866:	dcdc      	bgt.n	800c822 <scalbn+0x62>
 800c868:	a30b      	add	r3, pc, #44	; (adr r3, 800c898 <scalbn+0xd8>)
 800c86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86e:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 800c872:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 800c876:	480f      	ldr	r0, [pc, #60]	; (800c8b4 <scalbn+0xf4>)
 800c878:	f041 011f 	orr.w	r1, r1, #31
 800c87c:	e7b8      	b.n	800c7f0 <scalbn+0x30>
 800c87e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c882:	3136      	adds	r1, #54	; 0x36
 800c884:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c888:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 800c88c:	4620      	mov	r0, r4
 800c88e:	4629      	mov	r1, r5
 800c890:	2200      	movs	r2, #0
 800c892:	4b09      	ldr	r3, [pc, #36]	; (800c8b8 <scalbn+0xf8>)
 800c894:	e7ac      	b.n	800c7f0 <scalbn+0x30>
 800c896:	bf00      	nop
 800c898:	c2f8f359 	.word	0xc2f8f359
 800c89c:	01a56e1f 	.word	0x01a56e1f
 800c8a0:	8800759c 	.word	0x8800759c
 800c8a4:	7e37e43c 	.word	0x7e37e43c
 800c8a8:	43500000 	.word	0x43500000
 800c8ac:	ffff3cb0 	.word	0xffff3cb0
 800c8b0:	8800759c 	.word	0x8800759c
 800c8b4:	c2f8f359 	.word	0xc2f8f359
 800c8b8:	3c900000 	.word	0x3c900000

0800c8bc <_init>:
 800c8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8be:	bf00      	nop
 800c8c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8c2:	bc08      	pop	{r3}
 800c8c4:	469e      	mov	lr, r3
 800c8c6:	4770      	bx	lr

0800c8c8 <_fini>:
 800c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ca:	bf00      	nop
 800c8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ce:	bc08      	pop	{r3}
 800c8d0:	469e      	mov	lr, r3
 800c8d2:	4770      	bx	lr
