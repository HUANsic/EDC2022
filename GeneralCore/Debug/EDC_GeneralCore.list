
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d0  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  080084b8  080084b8  000184b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008620  08008620  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08008620  08008620  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008620  08008620  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008620  08008620  00018620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008624  08008624  00018624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b78  20000074  0800869c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bec  0800869c  00020bec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f09  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027cd  00000000  00000000  00030fa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001138  00000000  00000000  00033778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  000348b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003262  00000000  00000000  00035908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014958  00000000  00000000  00038b6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d948  00000000  00000000  0004d4c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eae0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005450  00000000  00000000  000eae5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000074 	.word	0x20000074
 8000204:	00000000 	.word	0x00000000
 8000208:	080084a0 	.word	0x080084a0

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000078 	.word	0x20000078
 8000224:	080084a0 	.word	0x080084a0

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_frsub>:
 8000a64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a68:	e002      	b.n	8000a70 <__addsf3>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_fsub>:
 8000a6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a70 <__addsf3>:
 8000a70:	0042      	lsls	r2, r0, #1
 8000a72:	bf1f      	itttt	ne
 8000a74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a78:	ea92 0f03 	teqne	r2, r3
 8000a7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a84:	d06a      	beq.n	8000b5c <__addsf3+0xec>
 8000a86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a8e:	bfc1      	itttt	gt
 8000a90:	18d2      	addgt	r2, r2, r3
 8000a92:	4041      	eorgt	r1, r0
 8000a94:	4048      	eorgt	r0, r1
 8000a96:	4041      	eorgt	r1, r0
 8000a98:	bfb8      	it	lt
 8000a9a:	425b      	neglt	r3, r3
 8000a9c:	2b19      	cmp	r3, #25
 8000a9e:	bf88      	it	hi
 8000aa0:	4770      	bxhi	lr
 8000aa2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000abe:	bf18      	it	ne
 8000ac0:	4249      	negne	r1, r1
 8000ac2:	ea92 0f03 	teq	r2, r3
 8000ac6:	d03f      	beq.n	8000b48 <__addsf3+0xd8>
 8000ac8:	f1a2 0201 	sub.w	r2, r2, #1
 8000acc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad0:	eb10 000c 	adds.w	r0, r0, ip
 8000ad4:	f1c3 0320 	rsb	r3, r3, #32
 8000ad8:	fa01 f103 	lsl.w	r1, r1, r3
 8000adc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae0:	d502      	bpl.n	8000ae8 <__addsf3+0x78>
 8000ae2:	4249      	negs	r1, r1
 8000ae4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000aec:	d313      	bcc.n	8000b16 <__addsf3+0xa6>
 8000aee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000af2:	d306      	bcc.n	8000b02 <__addsf3+0x92>
 8000af4:	0840      	lsrs	r0, r0, #1
 8000af6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afa:	f102 0201 	add.w	r2, r2, #1
 8000afe:	2afe      	cmp	r2, #254	; 0xfe
 8000b00:	d251      	bcs.n	8000ba6 <__addsf3+0x136>
 8000b02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b0a:	bf08      	it	eq
 8000b0c:	f020 0001 	biceq.w	r0, r0, #1
 8000b10:	ea40 0003 	orr.w	r0, r0, r3
 8000b14:	4770      	bx	lr
 8000b16:	0049      	lsls	r1, r1, #1
 8000b18:	eb40 0000 	adc.w	r0, r0, r0
 8000b1c:	3a01      	subs	r2, #1
 8000b1e:	bf28      	it	cs
 8000b20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b24:	d2ed      	bcs.n	8000b02 <__addsf3+0x92>
 8000b26:	fab0 fc80 	clz	ip, r0
 8000b2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b36:	bfaa      	itet	ge
 8000b38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b3c:	4252      	neglt	r2, r2
 8000b3e:	4318      	orrge	r0, r3
 8000b40:	bfbc      	itt	lt
 8000b42:	40d0      	lsrlt	r0, r2
 8000b44:	4318      	orrlt	r0, r3
 8000b46:	4770      	bx	lr
 8000b48:	f092 0f00 	teq	r2, #0
 8000b4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b50:	bf06      	itte	eq
 8000b52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b56:	3201      	addeq	r2, #1
 8000b58:	3b01      	subne	r3, #1
 8000b5a:	e7b5      	b.n	8000ac8 <__addsf3+0x58>
 8000b5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b64:	bf18      	it	ne
 8000b66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6a:	d021      	beq.n	8000bb0 <__addsf3+0x140>
 8000b6c:	ea92 0f03 	teq	r2, r3
 8000b70:	d004      	beq.n	8000b7c <__addsf3+0x10c>
 8000b72:	f092 0f00 	teq	r2, #0
 8000b76:	bf08      	it	eq
 8000b78:	4608      	moveq	r0, r1
 8000b7a:	4770      	bx	lr
 8000b7c:	ea90 0f01 	teq	r0, r1
 8000b80:	bf1c      	itt	ne
 8000b82:	2000      	movne	r0, #0
 8000b84:	4770      	bxne	lr
 8000b86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b8a:	d104      	bne.n	8000b96 <__addsf3+0x126>
 8000b8c:	0040      	lsls	r0, r0, #1
 8000b8e:	bf28      	it	cs
 8000b90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	4770      	bx	lr
 8000b96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b9a:	bf3c      	itt	cc
 8000b9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bxcc	lr
 8000ba2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	4770      	bx	lr
 8000bb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb4:	bf16      	itet	ne
 8000bb6:	4608      	movne	r0, r1
 8000bb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bbc:	4601      	movne	r1, r0
 8000bbe:	0242      	lsls	r2, r0, #9
 8000bc0:	bf06      	itte	eq
 8000bc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bc6:	ea90 0f01 	teqeq	r0, r1
 8000bca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_ui2f>:
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	e004      	b.n	8000be0 <__aeabi_i2f+0x8>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_i2f>:
 8000bd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	bf48      	it	mi
 8000bde:	4240      	negmi	r0, r0
 8000be0:	ea5f 0c00 	movs.w	ip, r0
 8000be4:	bf08      	it	eq
 8000be6:	4770      	bxeq	lr
 8000be8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bec:	4601      	mov	r1, r0
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	e01c      	b.n	8000c2e <__aeabi_l2f+0x2a>

08000bf4 <__aeabi_ul2f>:
 8000bf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e00a      	b.n	8000c18 <__aeabi_l2f+0x14>
 8000c02:	bf00      	nop

08000c04 <__aeabi_l2f>:
 8000c04:	ea50 0201 	orrs.w	r2, r0, r1
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c10:	d502      	bpl.n	8000c18 <__aeabi_l2f+0x14>
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	ea5f 0c01 	movs.w	ip, r1
 8000c1c:	bf02      	ittt	eq
 8000c1e:	4684      	moveq	ip, r0
 8000c20:	4601      	moveq	r1, r0
 8000c22:	2000      	moveq	r0, #0
 8000c24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c28:	bf08      	it	eq
 8000c2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c32:	fabc f28c 	clz	r2, ip
 8000c36:	3a08      	subs	r2, #8
 8000c38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c3c:	db10      	blt.n	8000c60 <__aeabi_l2f+0x5c>
 8000c3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c42:	4463      	add	r3, ip
 8000c44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c48:	f1c2 0220 	rsb	r2, r2, #32
 8000c4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c50:	fa20 f202 	lsr.w	r2, r0, r2
 8000c54:	eb43 0002 	adc.w	r0, r3, r2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f102 0220 	add.w	r2, r2, #32
 8000c64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c68:	f1c2 0220 	rsb	r2, r2, #32
 8000c6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c70:	fa21 f202 	lsr.w	r2, r1, r2
 8000c74:	eb43 0002 	adc.w	r0, r3, r2
 8000c78:	bf08      	it	eq
 8000c7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_fmul>:
 8000c80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c88:	bf1e      	ittt	ne
 8000c8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c8e:	ea92 0f0c 	teqne	r2, ip
 8000c92:	ea93 0f0c 	teqne	r3, ip
 8000c96:	d06f      	beq.n	8000d78 <__aeabi_fmul+0xf8>
 8000c98:	441a      	add	r2, r3
 8000c9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c9e:	0240      	lsls	r0, r0, #9
 8000ca0:	bf18      	it	ne
 8000ca2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ca6:	d01e      	beq.n	8000ce6 <__aeabi_fmul+0x66>
 8000ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc0:	bf3e      	ittt	cc
 8000cc2:	0049      	lslcc	r1, r1, #1
 8000cc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cc8:	005b      	lslcc	r3, r3, #1
 8000cca:	ea40 0001 	orr.w	r0, r0, r1
 8000cce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cd2:	2afd      	cmp	r2, #253	; 0xfd
 8000cd4:	d81d      	bhi.n	8000d12 <__aeabi_fmul+0x92>
 8000cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	4770      	bx	lr
 8000ce6:	f090 0f00 	teq	r0, #0
 8000cea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cee:	bf08      	it	eq
 8000cf0:	0249      	lsleq	r1, r1, #9
 8000cf2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cf6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cfa:	3a7f      	subs	r2, #127	; 0x7f
 8000cfc:	bfc2      	ittt	gt
 8000cfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d06:	4770      	bxgt	lr
 8000d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	dc5d      	bgt.n	8000dd0 <__aeabi_fmul+0x150>
 8000d14:	f112 0f19 	cmn.w	r2, #25
 8000d18:	bfdc      	itt	le
 8000d1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d1e:	4770      	bxle	lr
 8000d20:	f1c2 0200 	rsb	r2, r2, #0
 8000d24:	0041      	lsls	r1, r0, #1
 8000d26:	fa21 f102 	lsr.w	r1, r1, r2
 8000d2a:	f1c2 0220 	rsb	r2, r2, #32
 8000d2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d36:	f140 0000 	adc.w	r0, r0, #0
 8000d3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d3e:	bf08      	it	eq
 8000d40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d44:	4770      	bx	lr
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d4e:	bf02      	ittt	eq
 8000d50:	0040      	lsleq	r0, r0, #1
 8000d52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d56:	3a01      	subeq	r2, #1
 8000d58:	d0f9      	beq.n	8000d4e <__aeabi_fmul+0xce>
 8000d5a:	ea40 000c 	orr.w	r0, r0, ip
 8000d5e:	f093 0f00 	teq	r3, #0
 8000d62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d66:	bf02      	ittt	eq
 8000d68:	0049      	lsleq	r1, r1, #1
 8000d6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d6e:	3b01      	subeq	r3, #1
 8000d70:	d0f9      	beq.n	8000d66 <__aeabi_fmul+0xe6>
 8000d72:	ea41 010c 	orr.w	r1, r1, ip
 8000d76:	e78f      	b.n	8000c98 <__aeabi_fmul+0x18>
 8000d78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d7c:	ea92 0f0c 	teq	r2, ip
 8000d80:	bf18      	it	ne
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d00a      	beq.n	8000d9e <__aeabi_fmul+0x11e>
 8000d88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d8c:	bf18      	it	ne
 8000d8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d92:	d1d8      	bne.n	8000d46 <__aeabi_fmul+0xc6>
 8000d94:	ea80 0001 	eor.w	r0, r0, r1
 8000d98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d9c:	4770      	bx	lr
 8000d9e:	f090 0f00 	teq	r0, #0
 8000da2:	bf17      	itett	ne
 8000da4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000da8:	4608      	moveq	r0, r1
 8000daa:	f091 0f00 	teqne	r1, #0
 8000dae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000db2:	d014      	beq.n	8000dde <__aeabi_fmul+0x15e>
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	d101      	bne.n	8000dbe <__aeabi_fmul+0x13e>
 8000dba:	0242      	lsls	r2, r0, #9
 8000dbc:	d10f      	bne.n	8000dde <__aeabi_fmul+0x15e>
 8000dbe:	ea93 0f0c 	teq	r3, ip
 8000dc2:	d103      	bne.n	8000dcc <__aeabi_fmul+0x14c>
 8000dc4:	024b      	lsls	r3, r1, #9
 8000dc6:	bf18      	it	ne
 8000dc8:	4608      	movne	r0, r1
 8000dca:	d108      	bne.n	8000dde <__aeabi_fmul+0x15e>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ddc:	4770      	bx	lr
 8000dde:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_fdiv>:
 8000de8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df0:	bf1e      	ittt	ne
 8000df2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000df6:	ea92 0f0c 	teqne	r2, ip
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d069      	beq.n	8000ed4 <__aeabi_fdiv+0xec>
 8000e00:	eba2 0203 	sub.w	r2, r2, r3
 8000e04:	ea80 0c01 	eor.w	ip, r0, r1
 8000e08:	0249      	lsls	r1, r1, #9
 8000e0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e0e:	d037      	beq.n	8000e80 <__aeabi_fdiv+0x98>
 8000e10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e20:	428b      	cmp	r3, r1
 8000e22:	bf38      	it	cc
 8000e24:	005b      	lslcc	r3, r3, #1
 8000e26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	bf24      	itt	cs
 8000e32:	1a5b      	subcs	r3, r3, r1
 8000e34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e3c:	bf24      	itt	cs
 8000e3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e4a:	bf24      	itt	cs
 8000e4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e58:	bf24      	itt	cs
 8000e5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	bf18      	it	ne
 8000e66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e6a:	d1e0      	bne.n	8000e2e <__aeabi_fdiv+0x46>
 8000e6c:	2afd      	cmp	r2, #253	; 0xfd
 8000e6e:	f63f af50 	bhi.w	8000d12 <__aeabi_fmul+0x92>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e78:	bf08      	it	eq
 8000e7a:	f020 0001 	biceq.w	r0, r0, #1
 8000e7e:	4770      	bx	lr
 8000e80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e88:	327f      	adds	r2, #127	; 0x7f
 8000e8a:	bfc2      	ittt	gt
 8000e8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e94:	4770      	bxgt	lr
 8000e96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	3a01      	subs	r2, #1
 8000ea0:	e737      	b.n	8000d12 <__aeabi_fmul+0x92>
 8000ea2:	f092 0f00 	teq	r2, #0
 8000ea6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0040      	lsleq	r0, r0, #1
 8000eae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb2:	3a01      	subeq	r2, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fdiv+0xc2>
 8000eb6:	ea40 000c 	orr.w	r0, r0, ip
 8000eba:	f093 0f00 	teq	r3, #0
 8000ebe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec2:	bf02      	ittt	eq
 8000ec4:	0049      	lsleq	r1, r1, #1
 8000ec6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eca:	3b01      	subeq	r3, #1
 8000ecc:	d0f9      	beq.n	8000ec2 <__aeabi_fdiv+0xda>
 8000ece:	ea41 010c 	orr.w	r1, r1, ip
 8000ed2:	e795      	b.n	8000e00 <__aeabi_fdiv+0x18>
 8000ed4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d108      	bne.n	8000ef0 <__aeabi_fdiv+0x108>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	f47f af7d 	bne.w	8000dde <__aeabi_fmul+0x15e>
 8000ee4:	ea93 0f0c 	teq	r3, ip
 8000ee8:	f47f af70 	bne.w	8000dcc <__aeabi_fmul+0x14c>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e776      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000ef0:	ea93 0f0c 	teq	r3, ip
 8000ef4:	d104      	bne.n	8000f00 <__aeabi_fdiv+0x118>
 8000ef6:	024b      	lsls	r3, r1, #9
 8000ef8:	f43f af4c 	beq.w	8000d94 <__aeabi_fmul+0x114>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e76e      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000f00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f04:	bf18      	it	ne
 8000f06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0a:	d1ca      	bne.n	8000ea2 <__aeabi_fdiv+0xba>
 8000f0c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f10:	f47f af5c 	bne.w	8000dcc <__aeabi_fmul+0x14c>
 8000f14:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f18:	f47f af3c 	bne.w	8000d94 <__aeabi_fmul+0x114>
 8000f1c:	e75f      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000f1e:	bf00      	nop

08000f20 <__gesf2>:
 8000f20:	f04f 3cff 	mov.w	ip, #4294967295
 8000f24:	e006      	b.n	8000f34 <__cmpsf2+0x4>
 8000f26:	bf00      	nop

08000f28 <__lesf2>:
 8000f28:	f04f 0c01 	mov.w	ip, #1
 8000f2c:	e002      	b.n	8000f34 <__cmpsf2+0x4>
 8000f2e:	bf00      	nop

08000f30 <__cmpsf2>:
 8000f30:	f04f 0c01 	mov.w	ip, #1
 8000f34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f44:	bf18      	it	ne
 8000f46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f4a:	d011      	beq.n	8000f70 <__cmpsf2+0x40>
 8000f4c:	b001      	add	sp, #4
 8000f4e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f52:	bf18      	it	ne
 8000f54:	ea90 0f01 	teqne	r0, r1
 8000f58:	bf58      	it	pl
 8000f5a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f5e:	bf88      	it	hi
 8000f60:	17c8      	asrhi	r0, r1, #31
 8000f62:	bf38      	it	cc
 8000f64:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f68:	bf18      	it	ne
 8000f6a:	f040 0001 	orrne.w	r0, r0, #1
 8000f6e:	4770      	bx	lr
 8000f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f74:	d102      	bne.n	8000f7c <__cmpsf2+0x4c>
 8000f76:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f7a:	d105      	bne.n	8000f88 <__cmpsf2+0x58>
 8000f7c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f80:	d1e4      	bne.n	8000f4c <__cmpsf2+0x1c>
 8000f82:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f86:	d0e1      	beq.n	8000f4c <__cmpsf2+0x1c>
 8000f88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__aeabi_cfrcmple>:
 8000f90:	4684      	mov	ip, r0
 8000f92:	4608      	mov	r0, r1
 8000f94:	4661      	mov	r1, ip
 8000f96:	e7ff      	b.n	8000f98 <__aeabi_cfcmpeq>

08000f98 <__aeabi_cfcmpeq>:
 8000f98:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f9a:	f7ff ffc9 	bl	8000f30 <__cmpsf2>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	bf48      	it	mi
 8000fa2:	f110 0f00 	cmnmi.w	r0, #0
 8000fa6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fa8 <__aeabi_fcmpeq>:
 8000fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fac:	f7ff fff4 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2001      	moveq	r0, #1
 8000fb4:	2000      	movne	r0, #0
 8000fb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fba:	bf00      	nop

08000fbc <__aeabi_fcmplt>:
 8000fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc0:	f7ff ffea 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fc4:	bf34      	ite	cc
 8000fc6:	2001      	movcc	r0, #1
 8000fc8:	2000      	movcs	r0, #0
 8000fca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fce:	bf00      	nop

08000fd0 <__aeabi_fcmple>:
 8000fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd4:	f7ff ffe0 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fd8:	bf94      	ite	ls
 8000fda:	2001      	movls	r0, #1
 8000fdc:	2000      	movhi	r0, #0
 8000fde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_fcmpge>:
 8000fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe8:	f7ff ffd2 	bl	8000f90 <__aeabi_cfrcmple>
 8000fec:	bf94      	ite	ls
 8000fee:	2001      	movls	r0, #1
 8000ff0:	2000      	movhi	r0, #0
 8000ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_fcmpgt>:
 8000ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ffc:	f7ff ffc8 	bl	8000f90 <__aeabi_cfrcmple>
 8001000:	bf34      	ite	cc
 8001002:	2001      	movcc	r0, #1
 8001004:	2000      	movcs	r0, #0
 8001006:	f85d fb08 	ldr.w	pc, [sp], #8
 800100a:	bf00      	nop

0800100c <__aeabi_f2uiz>:
 800100c:	0042      	lsls	r2, r0, #1
 800100e:	d20e      	bcs.n	800102e <__aeabi_f2uiz+0x22>
 8001010:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001014:	d30b      	bcc.n	800102e <__aeabi_f2uiz+0x22>
 8001016:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800101a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800101e:	d409      	bmi.n	8001034 <__aeabi_f2uiz+0x28>
 8001020:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001028:	fa23 f002 	lsr.w	r0, r3, r2
 800102c:	4770      	bx	lr
 800102e:	f04f 0000 	mov.w	r0, #0
 8001032:	4770      	bx	lr
 8001034:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001038:	d101      	bne.n	800103e <__aeabi_f2uiz+0x32>
 800103a:	0242      	lsls	r2, r0, #9
 800103c:	d102      	bne.n	8001044 <__aeabi_f2uiz+0x38>
 800103e:	f04f 30ff 	mov.w	r0, #4294967295
 8001042:	4770      	bx	lr
 8001044:	f04f 0000 	mov.w	r0, #0
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <huansic_jy62_init>:
/*
 * 		Initializes the port of the IMU.
 * 		@param	himu	jy62 pending initialization
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_init(JY62_HandleTypeDef *himu) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	// perform some necessary checks
	if (!himu)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <huansic_jy62_init+0x12>
		return IMU_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e026      	b.n	80010ac <huansic_jy62_init+0x60>

	if (!himu->huart)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <huansic_jy62_init+0x1e>
		return IMU_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e020      	b.n	80010ac <huansic_jy62_init+0x60>
	HAL_UART_Init(himu->huart);
	HAL_Delay(10);
#endif
#endif

	HAL_Delay(3);
 800106a:	2003      	movs	r0, #3
 800106c:	f002 fd1e 	bl	8003aac <HAL_Delay>

	// reset z-axis angle
	HAL_UART_Transmit(himu->huart, JY62_RESET_Z_ANGLE, 3, 10);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6818      	ldr	r0, [r3, #0]
 8001074:	230a      	movs	r3, #10
 8001076:	2203      	movs	r2, #3
 8001078:	490e      	ldr	r1, [pc, #56]	; (80010b4 <huansic_jy62_init+0x68>)
 800107a:	f005 fb7d 	bl	8006778 <HAL_UART_Transmit>

// instead, just use DMA
	himu->pending_alignment = 0;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6818      	ldr	r0, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3334      	adds	r3, #52	; 0x34
 800108e:	2221      	movs	r2, #33	; 0x21
 8001090:	4619      	mov	r1, r3
 8001092:	f005 fc33 	bl	80068fc <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0204 	bic.w	r2, r2, #4
 80010a8:	601a      	str	r2, [r3, #0]

#ifdef HUANSIC_JY62_DEBUG
	himu->counter = 0;
#endif

	return IMU_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000000 	.word	0x20000000

080010b8 <huansic_jy62_dma_isr>:
/*
 * 		Handles the dma interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_dma_isr(JY62_HandleTypeDef *himu) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	if (!himu)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d101      	bne.n	80010ca <huansic_jy62_dma_isr+0x12>
		return IMU_ERROR;
 80010c6:	2301      	movs	r3, #1
 80010c8:	e112      	b.n	80012f0 <huansic_jy62_dma_isr+0x238>

	uint8_t temp8, i, i11;

	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
 80010ce:	2300      	movs	r3, #0
 80010d0:	73bb      	strb	r3, [r7, #14]
 80010d2:	e0ed      	b.n	80012b0 <huansic_jy62_dma_isr+0x1f8>
		if (himu->buffer[0 + i11] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	4413      	add	r3, r2
 80010da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010de:	2b55      	cmp	r3, #85	; 0x55
 80010e0:	d01c      	beq.n	800111c <huansic_jy62_dma_isr+0x64>
			himu->pending_alignment = 1;		// enter aligning mode if not already
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6818      	ldr	r0, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3334      	adds	r3, #52	; 0x34
 80010f2:	2201      	movs	r2, #1
 80010f4:	4619      	mov	r1, r3
 80010f6:	f005 fbd1 	bl	800689c <HAL_UART_Receive_IT>
			if (i) {
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d00b      	beq.n	8001118 <huansic_jy62_dma_isr+0x60>
				__huansic_jy62_decode_temp(himu, i - 1);
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	3b01      	subs	r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	4619      	mov	r1, r3
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 fa65 	bl	80015d8 <__huansic_jy62_decode_temp>
				himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 800110e:	f002 fcc3 	bl	8003a98 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	631a      	str	r2, [r3, #48]	; 0x30
			}
			return IMU_HEADER_ERROR;
 8001118:	2305      	movs	r3, #5
 800111a:	e0e9      	b.n	80012f0 <huansic_jy62_dma_isr+0x238>
		} else {
			// check sum
			temp8 = himu->buffer[0 + i11];
 800111c:	7bbb      	ldrb	r3, [r7, #14]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001126:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[1 + i11];
 8001128:	7bbb      	ldrb	r3, [r7, #14]
 800112a:	3301      	adds	r3, #1
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	4413      	add	r3, r2
 8001130:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001134:	7b7b      	ldrb	r3, [r7, #13]
 8001136:	4413      	add	r3, r2
 8001138:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[2 + i11];
 800113a:	7bbb      	ldrb	r3, [r7, #14]
 800113c:	3302      	adds	r3, #2
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001146:	7b7b      	ldrb	r3, [r7, #13]
 8001148:	4413      	add	r3, r2
 800114a:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[3 + i11];
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	3303      	adds	r3, #3
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	4413      	add	r3, r2
 8001154:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001158:	7b7b      	ldrb	r3, [r7, #13]
 800115a:	4413      	add	r3, r2
 800115c:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[4 + i11];
 800115e:	7bbb      	ldrb	r3, [r7, #14]
 8001160:	3304      	adds	r3, #4
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800116a:	7b7b      	ldrb	r3, [r7, #13]
 800116c:	4413      	add	r3, r2
 800116e:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[5 + i11];
 8001170:	7bbb      	ldrb	r3, [r7, #14]
 8001172:	3305      	adds	r3, #5
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	4413      	add	r3, r2
 8001178:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800117c:	7b7b      	ldrb	r3, [r7, #13]
 800117e:	4413      	add	r3, r2
 8001180:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[6 + i11];
 8001182:	7bbb      	ldrb	r3, [r7, #14]
 8001184:	3306      	adds	r3, #6
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800118e:	7b7b      	ldrb	r3, [r7, #13]
 8001190:	4413      	add	r3, r2
 8001192:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[7 + i11];
 8001194:	7bbb      	ldrb	r3, [r7, #14]
 8001196:	3307      	adds	r3, #7
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4413      	add	r3, r2
 800119c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80011a0:	7b7b      	ldrb	r3, [r7, #13]
 80011a2:	4413      	add	r3, r2
 80011a4:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[8 + i11];
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	3308      	adds	r3, #8
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80011b2:	7b7b      	ldrb	r3, [r7, #13]
 80011b4:	4413      	add	r3, r2
 80011b6:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[9 + i11];
 80011b8:	7bbb      	ldrb	r3, [r7, #14]
 80011ba:	3309      	adds	r3, #9
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	4413      	add	r3, r2
 80011c0:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80011c4:	7b7b      	ldrb	r3, [r7, #13]
 80011c6:	4413      	add	r3, r2
 80011c8:	737b      	strb	r3, [r7, #13]

			if (temp8 != himu->buffer[10 + i11]) {		// check
 80011ca:	7bbb      	ldrb	r3, [r7, #14]
 80011cc:	330a      	adds	r3, #10
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011d6:	7b7a      	ldrb	r2, [r7, #13]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d01c      	beq.n	8001216 <huansic_jy62_dma_isr+0x15e>
				himu->pending_alignment = 1;		// enter aligning mode if not already
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2201      	movs	r2, #1
 80011e0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6818      	ldr	r0, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3334      	adds	r3, #52	; 0x34
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	f005 fb54 	bl	800689c <HAL_UART_Receive_IT>
				if (i) {
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00b      	beq.n	8001212 <huansic_jy62_dma_isr+0x15a>
					__huansic_jy62_decode_temp(himu, i - 1);
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4619      	mov	r1, r3
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 f9e8 	bl	80015d8 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8001208:	f002 fc46 	bl	8003a98 <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_SUM_ERROR;
 8001212:	2304      	movs	r3, #4
 8001214:	e06c      	b.n	80012f0 <huansic_jy62_dma_isr+0x238>
			}

			if (himu->buffer[1 + i11] == HUANSIC_JY62_ACCEL) 		// then decode
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	3301      	adds	r3, #1
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001222:	2b51      	cmp	r3, #81	; 0x51
 8001224:	d105      	bne.n	8001232 <huansic_jy62_dma_isr+0x17a>
				__huansic_jy62_decode_accel(himu, i);
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	4619      	mov	r1, r3
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f8c4 	bl	80013b8 <__huansic_jy62_decode_accel>
 8001230:	e038      	b.n	80012a4 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_OMEGA)
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	3301      	adds	r3, #1
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	4413      	add	r3, r2
 800123a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800123e:	2b52      	cmp	r3, #82	; 0x52
 8001240:	d105      	bne.n	800124e <huansic_jy62_dma_isr+0x196>
				__huansic_jy62_decode_omega(himu, i);
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	4619      	mov	r1, r3
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f920 	bl	800148c <__huansic_jy62_decode_omega>
 800124c:	e02a      	b.n	80012a4 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_THETA)
 800124e:	7bbb      	ldrb	r3, [r7, #14]
 8001250:	3301      	adds	r3, #1
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	4413      	add	r3, r2
 8001256:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800125a:	2b53      	cmp	r3, #83	; 0x53
 800125c:	d105      	bne.n	800126a <huansic_jy62_dma_isr+0x1b2>
				__huansic_jy62_decode_theta(himu, i);
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	4619      	mov	r1, r3
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 f964 	bl	8001530 <__huansic_jy62_decode_theta>
 8001268:	e01c      	b.n	80012a4 <huansic_jy62_dma_isr+0x1ec>
			else {
				himu->pending_alignment = 1;		// enter aligning mode if not already
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2201      	movs	r2, #1
 800126e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3334      	adds	r3, #52	; 0x34
 800127a:	2201      	movs	r2, #1
 800127c:	4619      	mov	r1, r3
 800127e:	f005 fb0d 	bl	800689c <HAL_UART_Receive_IT>
				if (i) {
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00b      	beq.n	80012a0 <huansic_jy62_dma_isr+0x1e8>
					__huansic_jy62_decode_temp(himu, i - 1);
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	3b01      	subs	r3, #1
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4619      	mov	r1, r3
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f9a1 	bl	80015d8 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8001296:	f002 fbff 	bl	8003a98 <HAL_GetTick>
 800129a:	4602      	mov	r2, r0
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_PID_ERROR;
 80012a0:	2306      	movs	r3, #6
 80012a2:	e025      	b.n	80012f0 <huansic_jy62_dma_isr+0x238>
	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	3301      	adds	r3, #1
 80012a8:	73fb      	strb	r3, [r7, #15]
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	330b      	adds	r3, #11
 80012ae:	73bb      	strb	r3, [r7, #14]
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	f67f af0e 	bls.w	80010d4 <huansic_jy62_dma_isr+0x1c>
		}

	}

	// it should only reach this point if the package is fully valid
	himu->lastUpdated = HAL_GetTick();
 80012b8:	f002 fbee 	bl	8003a98 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	631a      	str	r2, [r3, #48]	; 0x30
	__huansic_jy62_decode_temp(himu, 2);
 80012c2:	2102      	movs	r1, #2
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f987 	bl	80015d8 <__huansic_jy62_decode_temp>
	// start to receive the next package
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6818      	ldr	r0, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	3334      	adds	r3, #52	; 0x34
 80012d2:	2221      	movs	r2, #33	; 0x21
 80012d4:	4619      	mov	r1, r3
 80012d6:	f005 fb11 	bl	80068fc <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0204 	bic.w	r2, r2, #4
 80012ec:	601a      	str	r2, [r3, #0]
#ifdef HUANSIC_JY62_DEBUG
	himu->counter++;
	HAL_GPIO_WritePin(himu->port, himu->pin, himu->counter & (1 << 5));
#endif

	return IMU_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <huansic_jy62_isr>:
/*
 * 		Handles the interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_isr(JY62_HandleTypeDef *himu) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	if (!himu)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d101      	bne.n	800130a <huansic_jy62_isr+0x12>
		return IMU_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e029      	b.n	800135e <huansic_jy62_isr+0x66>

	if (himu->buffer[0] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001310:	2b55      	cmp	r3, #85	; 0x55
 8001312:	d00d      	beq.n	8001330 <huansic_jy62_isr+0x38>
		himu->pending_alignment = 1;		// enter aligning mode if not already
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3334      	adds	r3, #52	; 0x34
 8001324:	2201      	movs	r2, #1
 8001326:	4619      	mov	r1, r3
 8001328:	f005 fab8 	bl	800689c <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 800132c:	2305      	movs	r3, #5
 800132e:	e016      	b.n	800135e <huansic_jy62_isr+0x66>
	} else {
		// header just aligned
		himu->pending_alignment = 0;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2200      	movs	r2, #0
 8001334:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_DMA(himu->huart, &himu->buffer[1], 32);		// receive the rest
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6818      	ldr	r0, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3335      	adds	r3, #53	; 0x35
 8001340:	2220      	movs	r2, #32
 8001342:	4619      	mov	r1, r3
 8001344:	f005 fada 	bl	80068fc <HAL_UART_Receive_DMA>
		himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f022 0204 	bic.w	r2, r2, #4
 800135a:	601a      	str	r2, [r3, #0]
		return IMU_OK;
 800135c:	2300      	movs	r3, #0
	}
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <huansic_jy62_dma_error>:
/*
 * 		Handles the dma errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_dma_error(JY62_HandleTypeDef *himu){
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2201      	movs	r2, #1
 8001372:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6818      	ldr	r0, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3334      	adds	r3, #52	; 0x34
 800137e:	2201      	movs	r2, #1
 8001380:	4619      	mov	r1, r3
 8001382:	f005 fa8b 	bl	800689c <HAL_UART_Receive_IT>
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <huansic_jy62_error>:
/*
 * 		Handles the errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_error(JY62_HandleTypeDef *himu){
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6818      	ldr	r0, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3334      	adds	r3, #52	; 0x34
 80013a6:	2201      	movs	r2, #1
 80013a8:	4619      	mov	r1, r3
 80013aa:	f005 fa77 	bl	800689c <HAL_UART_Receive_IT>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <__huansic_jy62_decode_accel>:

/***************	functions used by the library; not visible to users		***************/

static inline void __huansic_jy62_decode_accel(JY62_HandleTypeDef *himu, uint8_t location) {
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80013c4:	2300      	movs	r3, #0
 80013c6:	73fb      	strb	r3, [r7, #15]
 80013c8:	e050      	b.n	800146c <__huansic_jy62_decode_accel+0xb4>
		temp = himu->buffer[2 + 2 * i + location * 11];
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	3301      	adds	r3, #1
 80013ce:	0059      	lsls	r1, r3, #1
 80013d0:	78fa      	ldrb	r2, [r7, #3]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	440b      	add	r3, r1
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	4413      	add	r3, r2
 80013e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80013e6:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 80013e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[3 + 2 * i + location * 11];
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	1cd9      	adds	r1, r3, #3
 80013f6:	78fa      	ldrb	r2, [r7, #3]
 80013f8:	4613      	mov	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	4413      	add	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	440b      	add	r3, r1
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	4413      	add	r3, r2
 8001408:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800140c:	b21a      	sxth	r2, r3
 800140e:	89bb      	ldrh	r3, [r7, #12]
 8001410:	4313      	orrs	r3, r2
 8001412:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 16 * 9.8 / 32768;
 8001414:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fbdd 	bl	8000bd8 <__aeabi_i2f>
 800141e:	4603      	mov	r3, r0
 8001420:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fc2b 	bl	8000c80 <__aeabi_fmul>
 800142a:	4603      	mov	r3, r0
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff f85f 	bl	80004f0 <__aeabi_f2d>
 8001432:	a313      	add	r3, pc, #76	; (adr r3, 8001480 <__huansic_jy62_decode_accel+0xc8>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7ff f8b2 	bl	80005a0 <__aeabi_dmul>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <__huansic_jy62_decode_accel+0xd0>)
 800144a:	f7ff f9d3 	bl	80007f4 <__aeabi_ddiv>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	7bfc      	ldrb	r4, [r7, #15]
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	f7ff fab4 	bl	80009c4 <__aeabi_d2f>
 800145c:	4601      	mov	r1, r0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	1ca2      	adds	r2, r4, #2
 8001462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	3301      	adds	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	2b02      	cmp	r3, #2
 8001470:	d9ab      	bls.n	80013ca <__huansic_jy62_decode_accel+0x12>
	}
}
 8001472:	bf00      	nop
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	f3af 8000 	nop.w
 8001480:	9999999a 	.word	0x9999999a
 8001484:	40239999 	.word	0x40239999
 8001488:	40e00000 	.word	0x40e00000

0800148c <__huansic_jy62_decode_omega>:

static inline void __huansic_jy62_decode_omega(JY62_HandleTypeDef *himu, uint8_t location) {
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e03e      	b.n	800151c <__huansic_jy62_decode_omega+0x90>
		temp = himu->buffer[2 + 2 * i + location * 11];
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	3301      	adds	r3, #1
 80014a2:	0059      	lsls	r1, r3, #1
 80014a4:	78fa      	ldrb	r2, [r7, #3]
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4413      	add	r3, r2
 80014b0:	440b      	add	r3, r1
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014ba:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 80014bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014c0:	021b      	lsls	r3, r3, #8
 80014c2:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[3 + 2 * i + location * 11];
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	1cd9      	adds	r1, r3, #3
 80014ca:	78fa      	ldrb	r2, [r7, #3]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	4413      	add	r3, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	89bb      	ldrh	r3, [r7, #12]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 2000 / 32768;
 80014e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fb73 	bl	8000bd8 <__aeabi_i2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	490d      	ldr	r1, [pc, #52]	; (800152c <__huansic_jy62_decode_omega+0xa0>)
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fbc2 	bl	8000c80 <__aeabi_fmul>
 80014fc:	4603      	mov	r3, r0
 80014fe:	7bfc      	ldrb	r4, [r7, #15]
 8001500:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fc6f 	bl	8000de8 <__aeabi_fdiv>
 800150a:	4603      	mov	r3, r0
 800150c:	4619      	mov	r1, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	1ca2      	adds	r2, r4, #2
 8001512:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	3301      	adds	r3, #1
 800151a:	73fb      	strb	r3, [r7, #15]
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d9bd      	bls.n	800149e <__huansic_jy62_decode_omega+0x12>
	}
}
 8001522:	bf00      	nop
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bd90      	pop	{r4, r7, pc}
 800152c:	44fa0000 	.word	0x44fa0000

08001530 <__huansic_jy62_decode_theta>:

static inline void __huansic_jy62_decode_theta(JY62_HandleTypeDef *himu, uint8_t location) {
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e03e      	b.n	80015c0 <__huansic_jy62_decode_theta+0x90>
		temp = himu->buffer[2 + 2 * i + location * 11];
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	3301      	adds	r3, #1
 8001546:	0059      	lsls	r1, r3, #1
 8001548:	78fa      	ldrb	r2, [r7, #3]
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	4413      	add	r3, r2
 8001554:	440b      	add	r3, r1
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800155e:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8001560:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[3 + 2 * i + location * 11];
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	1cd9      	adds	r1, r3, #3
 800156e:	78fa      	ldrb	r2, [r7, #3]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	440b      	add	r3, r1
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001584:	b21a      	sxth	r2, r3
 8001586:	89bb      	ldrh	r3, [r7, #12]
 8001588:	4313      	orrs	r3, r2
 800158a:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 180 / 32768;
 800158c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fb21 	bl	8000bd8 <__aeabi_i2f>
 8001596:	4603      	mov	r3, r0
 8001598:	490d      	ldr	r1, [pc, #52]	; (80015d0 <__huansic_jy62_decode_theta+0xa0>)
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff fb70 	bl	8000c80 <__aeabi_fmul>
 80015a0:	4603      	mov	r3, r0
 80015a2:	7bfc      	ldrb	r4, [r7, #15]
 80015a4:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff fc1d 	bl	8000de8 <__aeabi_fdiv>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4619      	mov	r1, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	1ca2      	adds	r2, r4, #2
 80015b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
 80015bc:	3301      	adds	r3, #1
 80015be:	73fb      	strb	r3, [r7, #15]
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d9bd      	bls.n	8001542 <__huansic_jy62_decode_theta+0x12>
	}
}
 80015c6:	bf00      	nop
 80015c8:	bf00      	nop
 80015ca:	3714      	adds	r7, #20
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd90      	pop	{r4, r7, pc}
 80015d0:	43340000 	.word	0x43340000
 80015d4:	00000000 	.word	0x00000000

080015d8 <__huansic_jy62_decode_temp>:

static inline void __huansic_jy62_decode_temp(JY62_HandleTypeDef *himu, uint8_t location) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
	int16_t temp;

	temp = himu->buffer[8 + location * 11];
 80015e4:	78fa      	ldrb	r2, [r7, #3]
 80015e6:	4613      	mov	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	4413      	add	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	3308      	adds	r3, #8
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80015fa:	81fb      	strh	r3, [r7, #14]
	temp <<= 8;
 80015fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	81fb      	strh	r3, [r7, #14]
	temp |= himu->buffer[9 + location * 11];
 8001604:	78fa      	ldrb	r2, [r7, #3]
 8001606:	4613      	mov	r3, r2
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	4413      	add	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	3309      	adds	r3, #9
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800161a:	b21a      	sxth	r2, r3
 800161c:	89fb      	ldrh	r3, [r7, #14]
 800161e:	4313      	orrs	r3, r2
 8001620:	81fb      	strh	r3, [r7, #14]
	himu->temperature = (float) temp / 340 + 36.53;
 8001622:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff fad6 	bl	8000bd8 <__aeabi_i2f>
 800162c:	4603      	mov	r3, r0
 800162e:	4910      	ldr	r1, [pc, #64]	; (8001670 <__huansic_jy62_decode_temp+0x98>)
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fbd9 	bl	8000de8 <__aeabi_fdiv>
 8001636:	4603      	mov	r3, r0
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ff59 	bl	80004f0 <__aeabi_f2d>
 800163e:	a30a      	add	r3, pc, #40	; (adr r3, 8001668 <__huansic_jy62_decode_temp+0x90>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7fe fdf6 	bl	8000234 <__adddf3>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4610      	mov	r0, r2
 800164e:	4619      	mov	r1, r3
 8001650:	f7ff f9b8 	bl	80009c4 <__aeabi_d2f>
 8001654:	4602      	mov	r2, r0
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	f3af 8000 	nop.w
 8001668:	0a3d70a4 	.word	0x0a3d70a4
 800166c:	404243d7 	.word	0x404243d7
 8001670:	43aa0000 	.word	0x43aa0000

08001674 <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
	...

08001688 <huansic_order_new>:
		orderBuffers[i].id = -1;
	for (i = 0; i < 5; i++)
		delivering[i] = &orderBuffers[i];		// give it some default value
}

Order* huansic_order_new(int8_t id) {
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800169a:	d101      	bne.n	80016a0 <huansic_order_new+0x18>
		return 0;
 800169c:	2300      	movs	r3, #0
 800169e:	e046      	b.n	800172e <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e017      	b.n	80016d6 <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	4923      	ldr	r1, [pc, #140]	; (8001738 <huansic_order_new+0xb0>)
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	3310      	adds	r3, #16
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d107      	bne.n	80016d0 <huansic_order_new+0x48>
			return &orderBuffers[i];
 80016c0:	7bfa      	ldrb	r2, [r7, #15]
 80016c2:	4613      	mov	r3, r2
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4a1b      	ldr	r2, [pc, #108]	; (8001738 <huansic_order_new+0xb0>)
 80016cc:	4413      	add	r3, r2
 80016ce:	e02e      	b.n	800172e <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	3301      	adds	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
 80016d8:	2b3b      	cmp	r3, #59	; 0x3b
 80016da:	d9e4      	bls.n	80016a6 <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e021      	b.n	8001726 <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	4914      	ldr	r1, [pc, #80]	; (8001738 <huansic_order_new+0xb0>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	00db      	lsls	r3, r3, #3
 80016ee:	440b      	add	r3, r1
 80016f0:	3310      	adds	r3, #16
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	d112      	bne.n	8001720 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 80016fa:	7bfa      	ldrb	r2, [r7, #15]
 80016fc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <huansic_order_new+0xb0>)
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	4403      	add	r3, r0
 800170c:	3310      	adds	r3, #16
 800170e:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	4a07      	ldr	r2, [pc, #28]	; (8001738 <huansic_order_new+0xb0>)
 800171c:	4413      	add	r3, r2
 800171e:	e006      	b.n	800172e <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	3301      	adds	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b3b      	cmp	r3, #59	; 0x3b
 800172a:	d9da      	bls.n	80016e2 <huansic_order_new+0x5a>
		}
	}

	return 0;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20000090 	.word	0x20000090

0800173c <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800174c:	d103      	bne.n	8001756 <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff ff90 	bl	8001674 <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 8001754:	e003      	b.n	800175e <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f04f 32ff 	mov.w	r2, #4294967295
 800175c:	611a      	str	r2, [r3, #16]
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <huansic_motor_init+0x1c>
 8001778:	4b55      	ldr	r3, [pc, #340]	; (80018d0 <huansic_motor_init+0x168>)
 800177a:	4a56      	ldr	r2, [pc, #344]	; (80018d4 <huansic_motor_init+0x16c>)
 800177c:	210c      	movs	r1, #12
 800177e:	4856      	ldr	r0, [pc, #344]	; (80018d8 <huansic_motor_init+0x170>)
 8001780:	f005 fe3e 	bl	8007400 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d105      	bne.n	8001798 <huansic_motor_init+0x30>
 800178c:	4b53      	ldr	r3, [pc, #332]	; (80018dc <huansic_motor_init+0x174>)
 800178e:	4a51      	ldr	r2, [pc, #324]	; (80018d4 <huansic_motor_init+0x16c>)
 8001790:	210d      	movs	r1, #13
 8001792:	4851      	ldr	r0, [pc, #324]	; (80018d8 <huansic_motor_init+0x170>)
 8001794:	f005 fe34 	bl	8007400 <__assert_func>
	assert(hmotor->dt);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	f04f 0100 	mov.w	r1, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fc01 	bl	8000fa8 <__aeabi_fcmpeq>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d005      	beq.n	80017b8 <huansic_motor_init+0x50>
 80017ac:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <huansic_motor_init+0x178>)
 80017ae:	4a49      	ldr	r2, [pc, #292]	; (80018d4 <huansic_motor_init+0x16c>)
 80017b0:	210e      	movs	r1, #14
 80017b2:	4849      	ldr	r0, [pc, #292]	; (80018d8 <huansic_motor_init+0x170>)
 80017b4:	f005 fe24 	bl	8007400 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	849a      	strh	r2, [r3, #36]	; 0x24
	hmotor->lastError = 0;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2200      	movs	r2, #0
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d105      	bne.n	8001804 <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2200      	movs	r2, #0
 8001800:	635a      	str	r2, [r3, #52]	; 0x34
 8001802:	e01c      	b.n	800183e <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b04      	cmp	r3, #4
 800180a:	d105      	bne.n	8001818 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	639a      	str	r2, [r3, #56]	; 0x38
 8001816:	e012      	b.n	800183e <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	2b08      	cmp	r3, #8
 800181e:	d105      	bne.n	800182c <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2200      	movs	r2, #0
 8001828:	63da      	str	r2, [r3, #60]	; 0x3c
 800182a:	e008      	b.n	800183e <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b0c      	cmp	r3, #12
 8001832:	d104      	bne.n	800183e <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2200      	movs	r2, #0
 800183c:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d026      	beq.n	8001894 <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d105      	bne.n	800185a <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2200      	movs	r2, #0
 8001856:	635a      	str	r2, [r3, #52]	; 0x34
 8001858:	e01c      	b.n	8001894 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	2b04      	cmp	r3, #4
 8001860:	d105      	bne.n	800186e <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2200      	movs	r2, #0
 800186a:	639a      	str	r2, [r3, #56]	; 0x38
 800186c:	e012      	b.n	8001894 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b08      	cmp	r3, #8
 8001874:	d105      	bne.n	8001882 <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2200      	movs	r2, #0
 800187e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001880:	e008      	b.n	8001894 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	2b0c      	cmp	r3, #12
 8001888:	d104      	bne.n	8001894 <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2200      	movs	r2, #0
 8001892:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	213c      	movs	r1, #60	; 0x3c
 800189a:	4618      	mov	r0, r3
 800189c:	f004 f82a 	bl	80058f4 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	4619      	mov	r1, r3
 80018aa:	4610      	mov	r0, r2
 80018ac:	f003 fec6 	bl	800563c <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d007      	beq.n	80018c8 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	4619      	mov	r1, r3
 80018c2:	4610      	mov	r0, r2
 80018c4:	f003 feba 	bl	800563c <HAL_TIM_PWM_Start>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	080084b8 	.word	0x080084b8
 80018d4:	08008520 	.word	0x08008520
 80018d8:	080084c8 	.word	0x080084c8
 80018dc:	080084e8 	.word	0x080084e8
 80018e0:	080084fc 	.word	0x080084fc

080018e4 <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 80018e4:	b590      	push	{r4, r7, lr}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
	int16_t diffTick = (0x0FFFF & hmotor->counter->Instance->CNT) - hmotor->lastTick;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	82fb      	strh	r3, [r7, #22]

	hmotor->lastTick = hmotor->counter->Instance->CNT;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	b29a      	uxth	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	849a      	strh	r2, [r3, #36]	; 0x24

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 800190e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff f960 	bl	8000bd8 <__aeabi_i2f>
 8001918:	4602      	mov	r2, r0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	4619      	mov	r1, r3
 8001920:	4610      	mov	r0, r2
 8001922:	f7ff fa61 	bl	8000de8 <__aeabi_fdiv>
 8001926:	4603      	mov	r3, r0
 8001928:	461a      	mov	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	62da      	str	r2, [r3, #44]	; 0x2c
	//hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	4619      	mov	r1, r3
 800193c:	4610      	mov	r0, r2
 800193e:	f7ff f895 	bl	8000a6c <__aeabi_fsub>
 8001942:	4603      	mov	r3, r0
 8001944:	4619      	mov	r1, r3
 8001946:	4620      	mov	r0, r4
 8001948:	f7ff f890 	bl	8000a6c <__aeabi_fsub>
 800194c:	4603      	mov	r3, r0
 800194e:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	4619      	mov	r1, r3
 800195a:	4610      	mov	r0, r2
 800195c:	f7ff f886 	bl	8000a6c <__aeabi_fsub>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001970:	4619      	mov	r1, r3
 8001972:	4610      	mov	r0, r2
 8001974:	f7ff f87c 	bl	8000a70 <__addsf3>
 8001978:	4603      	mov	r3, r0
 800197a:	461a      	mov	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695a      	ldr	r2, [r3, #20]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001988:	4619      	mov	r1, r3
 800198a:	4610      	mov	r0, r2
 800198c:	f7ff f978 	bl	8000c80 <__aeabi_fmul>
 8001990:	4603      	mov	r3, r0
 8001992:	461c      	mov	r4, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	699a      	ldr	r2, [r3, #24]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199c:	4619      	mov	r1, r3
 800199e:	4610      	mov	r0, r2
 80019a0:	f7ff f96e 	bl	8000c80 <__aeabi_fmul>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4619      	mov	r1, r3
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7ff f861 	bl	8000a70 <__addsf3>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	6939      	ldr	r1, [r7, #16]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f961 	bl	8000c80 <__aeabi_fmul>
 80019be:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 80019c0:	4619      	mov	r1, r3
 80019c2:	4620      	mov	r0, r4
 80019c4:	f7ff f854 	bl	8000a70 <__addsf3>
 80019c8:	4603      	mov	r3, r0
 80019ca:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 80019cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80019d0:	68f8      	ldr	r0, [r7, #12]
 80019d2:	f7ff fb11 	bl	8000ff8 <__aeabi_fcmpgt>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <huansic_motor_pid+0xfe>
 80019dc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80019e0:	e009      	b.n	80019f6 <huansic_motor_pid+0x112>
 80019e2:	4954      	ldr	r1, [pc, #336]	; (8001b34 <huansic_motor_pid+0x250>)
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fae9 	bl	8000fbc <__aeabi_fcmplt>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <huansic_motor_pid+0x110>
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <huansic_motor_pid+0x250>)
 80019f2:	e000      	b.n	80019f6 <huansic_motor_pid+0x112>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 80019f8:	f04f 0100 	mov.w	r1, #0
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff fafb 	bl	8000ff8 <__aeabi_fcmpgt>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d019      	beq.n	8001a3c <huansic_motor_pid+0x158>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff f8da 	bl	8000bd0 <__aeabi_ui2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff f92d 	bl	8000c80 <__aeabi_fmul>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f006 fd13 	bl	8008454 <roundf>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff faeb 	bl	800100c <__aeabi_f2uiz>
 8001a36:	4603      	mov	r3, r0
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	e000      	b.n	8001a3e <huansic_motor_pid+0x15a>
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 8001a40:	f04f 0100 	mov.w	r1, #0
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f7ff fab9 	bl	8000fbc <__aeabi_fcmplt>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d019      	beq.n	8001a84 <huansic_motor_pid+0x1a0>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f8b6 	bl	8000bd0 <__aeabi_ui2f>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4619      	mov	r1, r3
 8001a68:	4620      	mov	r0, r4
 8001a6a:	f7ff f909 	bl	8000c80 <__aeabi_fmul>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4618      	mov	r0, r3
 8001a72:	f006 fcef 	bl	8008454 <roundf>
 8001a76:	4603      	mov	r3, r0
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fac7 	bl	800100c <__aeabi_f2uiz>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	e000      	b.n	8001a86 <huansic_motor_pid+0x1a2>
 8001a84:	2300      	movs	r3, #0
 8001a86:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <huansic_motor_pid+0x1b8>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	897a      	ldrh	r2, [r7, #10]
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34
 8001a9a:	e01c      	b.n	8001ad6 <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d105      	bne.n	8001ab0 <huansic_motor_pid+0x1cc>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	897a      	ldrh	r2, [r7, #10]
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
 8001aae:	e012      	b.n	8001ad6 <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d105      	bne.n	8001ac4 <huansic_motor_pid+0x1e0>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	897a      	ldrh	r2, [r7, #10]
 8001ac0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ac2:	e008      	b.n	8001ad6 <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	d104      	bne.n	8001ad6 <huansic_motor_pid+0x1f2>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	897a      	ldrh	r2, [r7, #10]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d026      	beq.n	8001b2c <huansic_motor_pid+0x248>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	691b      	ldr	r3, [r3, #16]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <huansic_motor_pid+0x20e>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	893a      	ldrh	r2, [r7, #8]
 8001aee:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8001af0:	e01c      	b.n	8001b2c <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d105      	bne.n	8001b06 <huansic_motor_pid+0x222>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	893a      	ldrh	r2, [r7, #8]
 8001b02:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001b04:	e012      	b.n	8001b2c <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d105      	bne.n	8001b1a <huansic_motor_pid+0x236>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	893a      	ldrh	r2, [r7, #8]
 8001b16:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b18:	e008      	b.n	8001b2c <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d104      	bne.n	8001b2c <huansic_motor_pid+0x248>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	893a      	ldrh	r2, [r7, #8]
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001b2c:	bf00      	nop
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	bf800000 	.word	0xbf800000

08001b38 <custom_order_new_failed>:
extern float myCharge;				// current charge returned by Master

// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms

__weak void custom_order_new_failed(uint8_t id) {
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]

}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	hxb->nextPackageLength = 6;		// header length
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2206      	movs	r2, #6
 8001b58:	725a      	strb	r2, [r3, #9]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6818      	ldr	r0, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f103 010a 	add.w	r1, r3, #10
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7a5b      	ldrb	r3, [r3, #9]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	f004 fec6 	bl	80068fc <HAL_UART_Receive_DMA>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <huansic_xb_decodeHeader>:

uint8_t huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	// checksum
	if (hxb->buffer[5]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7bda      	ldrb	r2, [r3, #15]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7a99      	ldrb	r1, [r3, #10]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7adb      	ldrb	r3, [r3, #11]
 8001b8c:	404b      	eors	r3, r1
 8001b8e:	b2d9      	uxtb	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	7b1b      	ldrb	r3, [r3, #12]
 8001b94:	404b      	eors	r3, r1
 8001b96:	b2d9      	uxtb	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7b5b      	ldrb	r3, [r3, #13]
 8001b9c:	404b      	eors	r3, r1
 8001b9e:	b2d9      	uxtb	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	7b9b      	ldrb	r3, [r3, #14]
 8001ba4:	404b      	eors	r3, r1
 8001ba6:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <huansic_xb_decodeHeader+0x38>
		return 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	e01d      	b.n	8001bec <huansic_xb_decodeHeader+0x74>

	// get and check packet ID
	if (hxb->buffer[0] != 0x01 && hxb->buffer[0] != 0x05)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7a9b      	ldrb	r3, [r3, #10]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d005      	beq.n	8001bc4 <huansic_xb_decodeHeader+0x4c>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	7a9b      	ldrb	r3, [r3, #10]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d001      	beq.n	8001bc4 <huansic_xb_decodeHeader+0x4c>
		return 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	e013      	b.n	8001bec <huansic_xb_decodeHeader+0x74>
	hxb->nextPackageID = hxb->buffer[0];
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7a9a      	ldrb	r2, [r3, #10]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	721a      	strb	r2, [r3, #8]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	7b9a      	ldrb	r2, [r3, #14]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	725a      	strb	r2, [r3, #9]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f103 010a 	add.w	r1, r3, #10
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7a5b      	ldrb	r3, [r3, #9]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	f004 fe89 	bl	80068fc <HAL_UART_Receive_DMA>
	return 1;
 8001bea:	2301      	movs	r3, #1
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <huansic_xb_decodeBody>:

void huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	76fb      	strb	r3, [r7, #27]
 8001c00:	2300      	movs	r3, #0
 8001c02:	777b      	strb	r3, [r7, #29]
	uint32_t temp;
	if (hxb->nextPackageID == 0x01) {		// game information
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7a1b      	ldrb	r3, [r3, #8]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	f040 816d 	bne.w	8001ee8 <huansic_xb_decodeBody+0x2f4>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8001c0e:	7f7b      	ldrb	r3, [r7, #29]
 8001c10:	1c5a      	adds	r2, r3, #1
 8001c12:	777a      	strb	r2, [r7, #29]
 8001c14:	461a      	mov	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	7a9a      	ldrb	r2, [r3, #10]
 8001c1c:	4b8c      	ldr	r3, [pc, #560]	; (8001e50 <huansic_xb_decodeBody+0x25c>)
 8001c1e:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8001c20:	7f7b      	ldrb	r3, [r7, #29]
 8001c22:	3301      	adds	r3, #1
 8001c24:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8001c26:	2300      	movs	r3, #0
 8001c28:	77fb      	strb	r3, [r7, #31]
 8001c2a:	e075      	b.n	8001d18 <huansic_xb_decodeBody+0x124>
			index += 2;
 8001c2c:	7f7b      	ldrb	r3, [r7, #29]
 8001c2e:	3302      	adds	r3, #2
 8001c30:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index++] << 8;
 8001c32:	7f7b      	ldrb	r3, [r7, #29]
 8001c34:	1c5a      	adds	r2, r3, #1
 8001c36:	777a      	strb	r2, [r7, #29]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	7a9b      	ldrb	r3, [r3, #10]
 8001c40:	021a      	lsls	r2, r3, #8
 8001c42:	7ffb      	ldrb	r3, [r7, #31]
 8001c44:	b211      	sxth	r1, r2
 8001c46:	4a83      	ldr	r2, [pc, #524]	; (8001e54 <huansic_xb_decodeBody+0x260>)
 8001c48:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index++];
 8001c4c:	7f7b      	ldrb	r3, [r7, #29]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	777a      	strb	r2, [r7, #29]
 8001c52:	461a      	mov	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4413      	add	r3, r2
 8001c58:	7a9a      	ldrb	r2, [r3, #10]
 8001c5a:	7ffb      	ldrb	r3, [r7, #31]
 8001c5c:	b211      	sxth	r1, r2
 8001c5e:	4a7d      	ldr	r2, [pc, #500]	; (8001e54 <huansic_xb_decodeBody+0x260>)
 8001c60:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 8001c64:	7f7b      	ldrb	r3, [r7, #29]
 8001c66:	3302      	adds	r3, #2
 8001c68:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index++] << 8;
 8001c6a:	7f7b      	ldrb	r3, [r7, #29]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	777a      	strb	r2, [r7, #29]
 8001c70:	461a      	mov	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	7a9b      	ldrb	r3, [r3, #10]
 8001c78:	021a      	lsls	r2, r3, #8
 8001c7a:	7ffb      	ldrb	r3, [r7, #31]
 8001c7c:	b211      	sxth	r1, r2
 8001c7e:	4a75      	ldr	r2, [pc, #468]	; (8001e54 <huansic_xb_decodeBody+0x260>)
 8001c80:	00db      	lsls	r3, r3, #3
 8001c82:	4413      	add	r3, r2
 8001c84:	460a      	mov	r2, r1
 8001c86:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 8001c88:	7f7b      	ldrb	r3, [r7, #29]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	7a9a      	ldrb	r2, [r3, #10]
 8001c90:	7ffb      	ldrb	r3, [r7, #31]
 8001c92:	b211      	sxth	r1, r2
 8001c94:	4a6f      	ldr	r2, [pc, #444]	; (8001e54 <huansic_xb_decodeBody+0x260>)
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	4413      	add	r3, r2
 8001c9a:	460a      	mov	r2, r1
 8001c9c:	805a      	strh	r2, [r3, #2]
			index += 2;
 8001c9e:	7f7b      	ldrb	r3, [r7, #29]
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index++] << 8;
 8001ca4:	7f7b      	ldrb	r3, [r7, #29]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	777a      	strb	r2, [r7, #29]
 8001caa:	461a      	mov	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4413      	add	r3, r2
 8001cb0:	7a9b      	ldrb	r3, [r3, #10]
 8001cb2:	021a      	lsls	r2, r3, #8
 8001cb4:	7ffb      	ldrb	r3, [r7, #31]
 8001cb6:	b211      	sxth	r1, r2
 8001cb8:	4a66      	ldr	r2, [pc, #408]	; (8001e54 <huansic_xb_decodeBody+0x260>)
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	460a      	mov	r2, r1
 8001cc0:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8001cc2:	7f7b      	ldrb	r3, [r7, #29]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	7a9a      	ldrb	r2, [r3, #10]
 8001cca:	7ffb      	ldrb	r3, [r7, #31]
 8001ccc:	b211      	sxth	r1, r2
 8001cce:	4a61      	ldr	r2, [pc, #388]	; (8001e54 <huansic_xb_decodeBody+0x260>)
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	809a      	strh	r2, [r3, #4]
			index += 2;
 8001cd8:	7f7b      	ldrb	r3, [r7, #29]
 8001cda:	3302      	adds	r3, #2
 8001cdc:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index++] << 8;
 8001cde:	7f7b      	ldrb	r3, [r7, #29]
 8001ce0:	1c5a      	adds	r2, r3, #1
 8001ce2:	777a      	strb	r2, [r7, #29]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	7a9b      	ldrb	r3, [r3, #10]
 8001cec:	021a      	lsls	r2, r3, #8
 8001cee:	7ffb      	ldrb	r3, [r7, #31]
 8001cf0:	b211      	sxth	r1, r2
 8001cf2:	4a58      	ldr	r2, [pc, #352]	; (8001e54 <huansic_xb_decodeBody+0x260>)
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	460a      	mov	r2, r1
 8001cfa:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 8001cfc:	7f7b      	ldrb	r3, [r7, #29]
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	7a9a      	ldrb	r2, [r3, #10]
 8001d04:	7ffb      	ldrb	r3, [r7, #31]
 8001d06:	b211      	sxth	r1, r2
 8001d08:	4a52      	ldr	r2, [pc, #328]	; (8001e54 <huansic_xb_decodeBody+0x260>)
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	460a      	mov	r2, r1
 8001d10:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 8001d12:	7ffb      	ldrb	r3, [r7, #31]
 8001d14:	3301      	adds	r3, #1
 8001d16:	77fb      	strb	r3, [r7, #31]
 8001d18:	7ffb      	ldrb	r3, [r7, #31]
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d986      	bls.n	8001c2c <huansic_xb_decodeBody+0x38>
		}

		/* total time of this round */
		index++;
 8001d1e:	7f7b      	ldrb	r3, [r7, #29]
 8001d20:	3301      	adds	r3, #1
 8001d22:	777b      	strb	r3, [r7, #29]
		gameStageTimeLimit = hxb->buffer[index++];
 8001d24:	7f7b      	ldrb	r3, [r7, #29]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	777a      	strb	r2, [r7, #29]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4413      	add	r3, r2
 8001d30:	7a9b      	ldrb	r3, [r3, #10]
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <huansic_xb_decodeBody+0x264>)
 8001d36:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8001d38:	4b47      	ldr	r3, [pc, #284]	; (8001e58 <huansic_xb_decodeBody+0x264>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	021b      	lsls	r3, r3, #8
 8001d3e:	4a46      	ldr	r2, [pc, #280]	; (8001e58 <huansic_xb_decodeBody+0x264>)
 8001d40:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001d42:	7f7b      	ldrb	r3, [r7, #29]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	777a      	strb	r2, [r7, #29]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	7a9b      	ldrb	r3, [r3, #10]
 8001d50:	461a      	mov	r2, r3
 8001d52:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <huansic_xb_decodeBody+0x264>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	4a3f      	ldr	r2, [pc, #252]	; (8001e58 <huansic_xb_decodeBody+0x264>)
 8001d5a:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001d5c:	4b3e      	ldr	r3, [pc, #248]	; (8001e58 <huansic_xb_decodeBody+0x264>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	4a3d      	ldr	r2, [pc, #244]	; (8001e58 <huansic_xb_decodeBody+0x264>)
 8001d64:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001d66:	7f7b      	ldrb	r3, [r7, #29]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	777a      	strb	r2, [r7, #29]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4413      	add	r3, r2
 8001d72:	7a9b      	ldrb	r3, [r3, #10]
 8001d74:	461a      	mov	r2, r3
 8001d76:	4b38      	ldr	r3, [pc, #224]	; (8001e58 <huansic_xb_decodeBody+0x264>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	4a36      	ldr	r2, [pc, #216]	; (8001e58 <huansic_xb_decodeBody+0x264>)
 8001d7e:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001d80:	4b35      	ldr	r3, [pc, #212]	; (8001e58 <huansic_xb_decodeBody+0x264>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	4a34      	ldr	r2, [pc, #208]	; (8001e58 <huansic_xb_decodeBody+0x264>)
 8001d88:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001d8a:	7f7b      	ldrb	r3, [r7, #29]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	777a      	strb	r2, [r7, #29]
 8001d90:	461a      	mov	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	7a9b      	ldrb	r3, [r3, #10]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <huansic_xb_decodeBody+0x264>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	4a2d      	ldr	r2, [pc, #180]	; (8001e58 <huansic_xb_decodeBody+0x264>)
 8001da2:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 8001da4:	7f7b      	ldrb	r3, [r7, #29]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	7a9b      	ldrb	r3, [r3, #10]
 8001dac:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8001dae:	2300      	movs	r3, #0
 8001db0:	77fb      	strb	r3, [r7, #31]
 8001db2:	e03e      	b.n	8001e32 <huansic_xb_decodeBody+0x23e>
			index += 2;
 8001db4:	7f7b      	ldrb	r3, [r7, #29]
 8001db6:	3302      	adds	r3, #2
 8001db8:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8001dba:	7f7b      	ldrb	r3, [r7, #29]
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	777a      	strb	r2, [r7, #29]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	7a9b      	ldrb	r3, [r3, #10]
 8001dc8:	021a      	lsls	r2, r3, #8
 8001dca:	7ffb      	ldrb	r3, [r7, #31]
 8001dcc:	b211      	sxth	r1, r2
 8001dce:	4a23      	ldr	r2, [pc, #140]	; (8001e5c <huansic_xb_decodeBody+0x268>)
 8001dd0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x = hxb->buffer[index++];
 8001dd4:	7f7b      	ldrb	r3, [r7, #29]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	777a      	strb	r2, [r7, #29]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	7a9a      	ldrb	r2, [r3, #10]
 8001de2:	7ffb      	ldrb	r3, [r7, #31]
 8001de4:	b211      	sxth	r1, r2
 8001de6:	4a1d      	ldr	r2, [pc, #116]	; (8001e5c <huansic_xb_decodeBody+0x268>)
 8001de8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8001dec:	7f7b      	ldrb	r3, [r7, #29]
 8001dee:	3302      	adds	r3, #2
 8001df0:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8001df2:	7f7b      	ldrb	r3, [r7, #29]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	777a      	strb	r2, [r7, #29]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	7a9b      	ldrb	r3, [r3, #10]
 8001e00:	021a      	lsls	r2, r3, #8
 8001e02:	7ffb      	ldrb	r3, [r7, #31]
 8001e04:	b211      	sxth	r1, r2
 8001e06:	4a15      	ldr	r2, [pc, #84]	; (8001e5c <huansic_xb_decodeBody+0x268>)
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	460a      	mov	r2, r1
 8001e0e:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y = hxb->buffer[index++];
 8001e10:	7f7b      	ldrb	r3, [r7, #29]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	777a      	strb	r2, [r7, #29]
 8001e16:	461a      	mov	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	7a9a      	ldrb	r2, [r3, #10]
 8001e1e:	7ffb      	ldrb	r3, [r7, #31]
 8001e20:	b211      	sxth	r1, r2
 8001e22:	4a0e      	ldr	r2, [pc, #56]	; (8001e5c <huansic_xb_decodeBody+0x268>)
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	460a      	mov	r2, r1
 8001e2a:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8001e2c:	7ffb      	ldrb	r3, [r7, #31]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	77fb      	strb	r3, [r7, #31]
 8001e32:	7ffa      	ldrb	r2, [r7, #31]
 8001e34:	7efb      	ldrb	r3, [r7, #27]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d3bc      	bcc.n	8001db4 <huansic_xb_decodeBody+0x1c0>
		}

		/* opponent beacons */
		index++;
 8001e3a:	7f7b      	ldrb	r3, [r7, #29]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	777b      	strb	r3, [r7, #29]
		listLength = hxb->buffer[index];
 8001e40:	7f7b      	ldrb	r3, [r7, #29]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	4413      	add	r3, r2
 8001e46:	7a9b      	ldrb	r3, [r3, #10]
 8001e48:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	77fb      	strb	r3, [r7, #31]
 8001e4e:	e046      	b.n	8001ede <huansic_xb_decodeBody+0x2ea>
 8001e50:	20000b60 	.word	0x20000b60
 8001e54:	20000b6c 	.word	0x20000b6c
 8001e58:	20000b64 	.word	0x20000b64
 8001e5c:	20000b94 	.word	0x20000b94
			index += 2;
 8001e60:	7f7b      	ldrb	r3, [r7, #29]
 8001e62:	3302      	adds	r3, #2
 8001e64:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8001e66:	7f7b      	ldrb	r3, [r7, #29]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	777a      	strb	r2, [r7, #29]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	7a9b      	ldrb	r3, [r3, #10]
 8001e74:	021a      	lsls	r2, r3, #8
 8001e76:	7ffb      	ldrb	r3, [r7, #31]
 8001e78:	b211      	sxth	r1, r2
 8001e7a:	4a9f      	ldr	r2, [pc, #636]	; (80020f8 <huansic_xb_decodeBody+0x504>)
 8001e7c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x = hxb->buffer[index++];
 8001e80:	7f7b      	ldrb	r3, [r7, #29]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	777a      	strb	r2, [r7, #29]
 8001e86:	461a      	mov	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	7a9a      	ldrb	r2, [r3, #10]
 8001e8e:	7ffb      	ldrb	r3, [r7, #31]
 8001e90:	b211      	sxth	r1, r2
 8001e92:	4a99      	ldr	r2, [pc, #612]	; (80020f8 <huansic_xb_decodeBody+0x504>)
 8001e94:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8001e98:	7f7b      	ldrb	r3, [r7, #29]
 8001e9a:	3302      	adds	r3, #2
 8001e9c:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8001e9e:	7f7b      	ldrb	r3, [r7, #29]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	777a      	strb	r2, [r7, #29]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	7a9b      	ldrb	r3, [r3, #10]
 8001eac:	021a      	lsls	r2, r3, #8
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
 8001eb0:	b211      	sxth	r1, r2
 8001eb2:	4a91      	ldr	r2, [pc, #580]	; (80020f8 <huansic_xb_decodeBody+0x504>)
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	460a      	mov	r2, r1
 8001eba:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8001ebc:	7f7b      	ldrb	r3, [r7, #29]
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	777a      	strb	r2, [r7, #29]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	7a9a      	ldrb	r2, [r3, #10]
 8001eca:	7ffb      	ldrb	r3, [r7, #31]
 8001ecc:	b211      	sxth	r1, r2
 8001ece:	4a8a      	ldr	r2, [pc, #552]	; (80020f8 <huansic_xb_decodeBody+0x504>)
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	460a      	mov	r2, r1
 8001ed6:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8001ed8:	7ffb      	ldrb	r3, [r7, #31]
 8001eda:	3301      	adds	r3, #1
 8001edc:	77fb      	strb	r3, [r7, #31]
 8001ede:	7ffa      	ldrb	r2, [r7, #31]
 8001ee0:	7efb      	ldrb	r3, [r7, #27]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d3bc      	bcc.n	8001e60 <huansic_xb_decodeBody+0x26c>
 8001ee6:	e31a      	b.n	800251e <huansic_xb_decodeBody+0x92a>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7a1b      	ldrb	r3, [r3, #8]
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	f040 8316 	bne.w	800251e <huansic_xb_decodeBody+0x92a>
		/* game status */
		gameStatus = hxb->buffer[index++];
 8001ef2:	7f7b      	ldrb	r3, [r7, #29]
 8001ef4:	1c5a      	adds	r2, r3, #1
 8001ef6:	777a      	strb	r2, [r7, #29]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	7a9a      	ldrb	r2, [r3, #10]
 8001f00:	4b7e      	ldr	r3, [pc, #504]	; (80020fc <huansic_xb_decodeBody+0x508>)
 8001f02:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 8001f04:	7f7b      	ldrb	r3, [r7, #29]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	777a      	strb	r2, [r7, #29]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4413      	add	r3, r2
 8001f10:	7a9b      	ldrb	r3, [r3, #10]
 8001f12:	461a      	mov	r2, r3
 8001f14:	4b7a      	ldr	r3, [pc, #488]	; (8002100 <huansic_xb_decodeBody+0x50c>)
 8001f16:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 8001f18:	4b79      	ldr	r3, [pc, #484]	; (8002100 <huansic_xb_decodeBody+0x50c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	021b      	lsls	r3, r3, #8
 8001f1e:	4a78      	ldr	r2, [pc, #480]	; (8002100 <huansic_xb_decodeBody+0x50c>)
 8001f20:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001f22:	7f7b      	ldrb	r3, [r7, #29]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	777a      	strb	r2, [r7, #29]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	7a9b      	ldrb	r3, [r3, #10]
 8001f30:	461a      	mov	r2, r3
 8001f32:	4b73      	ldr	r3, [pc, #460]	; (8002100 <huansic_xb_decodeBody+0x50c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	4a71      	ldr	r2, [pc, #452]	; (8002100 <huansic_xb_decodeBody+0x50c>)
 8001f3a:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8001f3c:	4b70      	ldr	r3, [pc, #448]	; (8002100 <huansic_xb_decodeBody+0x50c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	021b      	lsls	r3, r3, #8
 8001f42:	4a6f      	ldr	r2, [pc, #444]	; (8002100 <huansic_xb_decodeBody+0x50c>)
 8001f44:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001f46:	7f7b      	ldrb	r3, [r7, #29]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	777a      	strb	r2, [r7, #29]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	7a9b      	ldrb	r3, [r3, #10]
 8001f54:	461a      	mov	r2, r3
 8001f56:	4b6a      	ldr	r3, [pc, #424]	; (8002100 <huansic_xb_decodeBody+0x50c>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	4a68      	ldr	r2, [pc, #416]	; (8002100 <huansic_xb_decodeBody+0x50c>)
 8001f5e:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8001f60:	4b67      	ldr	r3, [pc, #412]	; (8002100 <huansic_xb_decodeBody+0x50c>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	021b      	lsls	r3, r3, #8
 8001f66:	4a66      	ldr	r2, [pc, #408]	; (8002100 <huansic_xb_decodeBody+0x50c>)
 8001f68:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001f6a:	7f7b      	ldrb	r3, [r7, #29]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	777a      	strb	r2, [r7, #29]
 8001f70:	461a      	mov	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4413      	add	r3, r2
 8001f76:	7a9b      	ldrb	r3, [r3, #10]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b61      	ldr	r3, [pc, #388]	; (8002100 <huansic_xb_decodeBody+0x50c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	4a5f      	ldr	r2, [pc, #380]	; (8002100 <huansic_xb_decodeBody+0x50c>)
 8001f82:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 8001f84:	4b5f      	ldr	r3, [pc, #380]	; (8002104 <huansic_xb_decodeBody+0x510>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <huansic_xb_decodeBody+0x50c>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	4a5e      	ldr	r2, [pc, #376]	; (8002108 <huansic_xb_decodeBody+0x514>)
 8001f90:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 8001f92:	7f7b      	ldrb	r3, [r7, #29]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	777a      	strb	r2, [r7, #29]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	7a9b      	ldrb	r3, [r3, #10]
 8001fa0:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	021b      	lsls	r3, r3, #8
 8001fa6:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001fa8:	7f7b      	ldrb	r3, [r7, #29]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	777a      	strb	r2, [r7, #29]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	7a9b      	ldrb	r3, [r3, #10]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001fc4:	7f7b      	ldrb	r3, [r7, #29]
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	777a      	strb	r2, [r7, #29]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	7a9b      	ldrb	r3, [r3, #10]
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	021b      	lsls	r3, r3, #8
 8001fde:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001fe0:	7f7b      	ldrb	r3, [r7, #29]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	777a      	strb	r2, [r7, #29]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	7a9b      	ldrb	r3, [r3, #10]
 8001fee:	461a      	mov	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 8001ff6:	f107 0310 	add.w	r3, r7, #16
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a43      	ldr	r2, [pc, #268]	; (800210c <huansic_xb_decodeBody+0x518>)
 8001ffe:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 2;
 8002000:	7f7b      	ldrb	r3, [r7, #29]
 8002002:	3302      	adds	r3, #2
 8002004:	777b      	strb	r3, [r7, #29]
		myCoord.x = (uint16_t) hxb->buffer[index++] << 8;
 8002006:	7f7b      	ldrb	r3, [r7, #29]
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	777a      	strb	r2, [r7, #29]
 800200c:	461a      	mov	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4413      	add	r3, r2
 8002012:	7a9b      	ldrb	r3, [r3, #10]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	b21a      	sxth	r2, r3
 8002018:	4b3d      	ldr	r3, [pc, #244]	; (8002110 <huansic_xb_decodeBody+0x51c>)
 800201a:	801a      	strh	r2, [r3, #0]
		myCoord.x = hxb->buffer[index++];
 800201c:	7f7b      	ldrb	r3, [r7, #29]
 800201e:	1c5a      	adds	r2, r3, #1
 8002020:	777a      	strb	r2, [r7, #29]
 8002022:	461a      	mov	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4413      	add	r3, r2
 8002028:	7a9b      	ldrb	r3, [r3, #10]
 800202a:	b21a      	sxth	r2, r3
 800202c:	4b38      	ldr	r3, [pc, #224]	; (8002110 <huansic_xb_decodeBody+0x51c>)
 800202e:	801a      	strh	r2, [r3, #0]
		index += 2;
 8002030:	7f7b      	ldrb	r3, [r7, #29]
 8002032:	3302      	adds	r3, #2
 8002034:	777b      	strb	r3, [r7, #29]
		myCoord.y = (uint16_t) hxb->buffer[index++] << 8;
 8002036:	7f7b      	ldrb	r3, [r7, #29]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	777a      	strb	r2, [r7, #29]
 800203c:	461a      	mov	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	7a9b      	ldrb	r3, [r3, #10]
 8002044:	021b      	lsls	r3, r3, #8
 8002046:	b21a      	sxth	r2, r3
 8002048:	4b31      	ldr	r3, [pc, #196]	; (8002110 <huansic_xb_decodeBody+0x51c>)
 800204a:	805a      	strh	r2, [r3, #2]
		myCoord.y = hxb->buffer[index++];
 800204c:	7f7b      	ldrb	r3, [r7, #29]
 800204e:	1c5a      	adds	r2, r3, #1
 8002050:	777a      	strb	r2, [r7, #29]
 8002052:	461a      	mov	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4413      	add	r3, r2
 8002058:	7a9b      	ldrb	r3, [r3, #10]
 800205a:	b21a      	sxth	r2, r3
 800205c:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <huansic_xb_decodeBody+0x51c>)
 800205e:	805a      	strh	r2, [r3, #2]

		/* fetch battery */
		temp = hxb->buffer[index++];
 8002060:	7f7b      	ldrb	r3, [r7, #29]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	777a      	strb	r2, [r7, #29]
 8002066:	461a      	mov	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4413      	add	r3, r2
 800206c:	7a9b      	ldrb	r3, [r3, #10]
 800206e:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	021b      	lsls	r3, r3, #8
 8002074:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002076:	7f7b      	ldrb	r3, [r7, #29]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	777a      	strb	r2, [r7, #29]
 800207c:	461a      	mov	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	7a9b      	ldrb	r3, [r3, #10]
 8002084:	461a      	mov	r2, r3
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	021b      	lsls	r3, r3, #8
 8002090:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002092:	7f7b      	ldrb	r3, [r7, #29]
 8002094:	1c5a      	adds	r2, r3, #1
 8002096:	777a      	strb	r2, [r7, #29]
 8002098:	461a      	mov	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	7a9b      	ldrb	r3, [r3, #10]
 80020a0:	461a      	mov	r2, r3
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	021b      	lsls	r3, r3, #8
 80020ac:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 80020ae:	7f7b      	ldrb	r3, [r7, #29]
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	777a      	strb	r2, [r7, #29]
 80020b4:	461a      	mov	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	7a9b      	ldrb	r3, [r3, #10]
 80020bc:	461a      	mov	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 80020c4:	f107 0310 	add.w	r3, r7, #16
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a12      	ldr	r2, [pc, #72]	; (8002114 <huansic_xb_decodeBody+0x520>)
 80020cc:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 80020ce:	4a12      	ldr	r2, [pc, #72]	; (8002118 <huansic_xb_decodeBody+0x524>)
 80020d0:	f107 0308 	add.w	r3, r7, #8
 80020d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020d8:	6018      	str	r0, [r3, #0]
 80020da:	3304      	adds	r3, #4
 80020dc:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 80020e2:	7f7b      	ldrb	r3, [r7, #29]
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	777a      	strb	r2, [r7, #29]
 80020e8:	461a      	mov	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	7a9b      	ldrb	r3, [r3, #10]
 80020f0:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 80020f2:	2300      	movs	r3, #0
 80020f4:	77fb      	strb	r3, [r7, #31]
 80020f6:	e0fd      	b.n	80022f4 <huansic_xb_decodeBody+0x700>
 80020f8:	20000ba0 	.word	0x20000ba0
 80020fc:	20000b61 	.word	0x20000b61
 8002100:	20000b68 	.word	0x20000b68
 8002104:	20000b64 	.word	0x20000b64
 8002108:	20000bd0 	.word	0x20000bd0
 800210c:	20000bc8 	.word	0x20000bc8
 8002110:	20000bc0 	.word	0x20000bc0
 8002114:	20000bcc 	.word	0x20000bcc
 8002118:	08008508 	.word	0x08008508
			temp = hxb->buffer[index + 24];
 800211c:	7f7b      	ldrb	r3, [r7, #29]
 800211e:	3318      	adds	r3, #24
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	7a9b      	ldrb	r3, [r3, #10]
 8002126:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 25];
 800212e:	7f7b      	ldrb	r3, [r7, #29]
 8002130:	3319      	adds	r3, #25
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	7a9b      	ldrb	r3, [r3, #10]
 8002138:	461a      	mov	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 26];
 8002146:	7f7b      	ldrb	r3, [r7, #29]
 8002148:	331a      	adds	r3, #26
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	7a9b      	ldrb	r3, [r3, #10]
 8002150:	461a      	mov	r2, r3
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	4313      	orrs	r3, r2
 8002156:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 27];
 800215e:	7f7b      	ldrb	r3, [r7, #29]
 8002160:	331b      	adds	r3, #27
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	7a9b      	ldrb	r3, [r3, #10]
 8002168:	461a      	mov	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	b25b      	sxtb	r3, r3
 8002174:	4618      	mov	r0, r3
 8002176:	f7ff fa87 	bl	8001688 <huansic_order_new>
 800217a:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d108      	bne.n	8002194 <huansic_xb_decodeBody+0x5a0>
				index += 28;
 8002182:	7f7b      	ldrb	r3, [r7, #29]
 8002184:	331c      	adds	r3, #28
 8002186:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fcd3 	bl	8001b38 <custom_order_new_failed>
				continue;
 8002192:	e0ac      	b.n	80022ee <huansic_xb_decodeBody+0x6fa>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002194:	7f7b      	ldrb	r3, [r7, #29]
 8002196:	3302      	adds	r3, #2
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	7a9b      	ldrb	r3, [r3, #10]
 800219e:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	7f7b      	ldrb	r3, [r7, #29]
 80021a4:	3303      	adds	r3, #3
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	440b      	add	r3, r1
 80021aa:	7a9b      	ldrb	r3, [r3, #10]
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	4313      	orrs	r3, r2
 80021b0:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80021b6:	7f7b      	ldrb	r3, [r7, #29]
 80021b8:	3306      	adds	r3, #6
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	7a9b      	ldrb	r3, [r3, #10]
 80021c0:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	7f7b      	ldrb	r3, [r7, #29]
 80021c6:	3307      	adds	r3, #7
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	440b      	add	r3, r1
 80021cc:	7a9b      	ldrb	r3, [r3, #10]
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	4313      	orrs	r3, r2
 80021d2:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80021d8:	7f7b      	ldrb	r3, [r7, #29]
 80021da:	330a      	adds	r3, #10
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	4413      	add	r3, r2
 80021e0:	7a9b      	ldrb	r3, [r3, #10]
 80021e2:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 80021e4:	b21a      	sxth	r2, r3
 80021e6:	7f7b      	ldrb	r3, [r7, #29]
 80021e8:	330b      	adds	r3, #11
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	440b      	add	r3, r1
 80021ee:	7a9b      	ldrb	r3, [r3, #10]
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	4313      	orrs	r3, r2
 80021f4:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80021fa:	7f7b      	ldrb	r3, [r7, #29]
 80021fc:	330e      	adds	r3, #14
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	7a9b      	ldrb	r3, [r3, #10]
 8002204:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 8002206:	b21a      	sxth	r2, r3
 8002208:	7f7b      	ldrb	r3, [r7, #29]
 800220a:	330f      	adds	r3, #15
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	440b      	add	r3, r1
 8002210:	7a9b      	ldrb	r3, [r3, #10]
 8002212:	b21b      	sxth	r3, r3
 8002214:	4313      	orrs	r3, r2
 8002216:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 800221c:	7f7b      	ldrb	r3, [r7, #29]
 800221e:	3310      	adds	r3, #16
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	4413      	add	r3, r2
 8002224:	7a9b      	ldrb	r3, [r3, #10]
 8002226:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 800222e:	7f7b      	ldrb	r3, [r7, #29]
 8002230:	3311      	adds	r3, #17
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	4413      	add	r3, r2
 8002236:	7a9b      	ldrb	r3, [r3, #10]
 8002238:	461a      	mov	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	021b      	lsls	r3, r3, #8
 8002244:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 8002246:	7f7b      	ldrb	r3, [r7, #29]
 8002248:	3312      	adds	r3, #18
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	4413      	add	r3, r2
 800224e:	7a9b      	ldrb	r3, [r3, #10]
 8002250:	461a      	mov	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 800225e:	7f7b      	ldrb	r3, [r7, #29]
 8002260:	3313      	adds	r3, #19
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	4413      	add	r3, r2
 8002266:	7a9b      	ldrb	r3, [r3, #10]
 8002268:	461a      	mov	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8002276:	7f7b      	ldrb	r3, [r7, #29]
 8002278:	3314      	adds	r3, #20
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	4413      	add	r3, r2
 800227e:	7a9b      	ldrb	r3, [r3, #10]
 8002280:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 8002288:	7f7b      	ldrb	r3, [r7, #29]
 800228a:	3315      	adds	r3, #21
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	7a9b      	ldrb	r3, [r3, #10]
 8002292:	461a      	mov	r2, r3
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 80022a0:	7f7b      	ldrb	r3, [r7, #29]
 80022a2:	3316      	adds	r3, #22
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	7a9b      	ldrb	r3, [r3, #10]
 80022aa:	461a      	mov	r2, r3
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 80022b8:	7f7b      	ldrb	r3, [r7, #29]
 80022ba:	3317      	adds	r3, #23
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	4413      	add	r3, r2
 80022c0:	7a9b      	ldrb	r3, [r3, #10]
 80022c2:	461a      	mov	r2, r3
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 80022ca:	f107 0310 	add.w	r3, r7, #16
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 28;
 80022d4:	7f7b      	ldrb	r3, [r7, #29]
 80022d6:	331c      	adds	r3, #28
 80022d8:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	7f3b      	ldrb	r3, [r7, #28]
 80022e0:	1c59      	adds	r1, r3, #1
 80022e2:	7739      	strb	r1, [r7, #28]
 80022e4:	b252      	sxtb	r2, r2
 80022e6:	3320      	adds	r3, #32
 80022e8:	443b      	add	r3, r7
 80022ea:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 80022ee:	7ffb      	ldrb	r3, [r7, #31]
 80022f0:	3301      	adds	r3, #1
 80022f2:	77fb      	strb	r3, [r7, #31]
 80022f4:	7ffa      	ldrb	r2, [r7, #31]
 80022f6:	7efb      	ldrb	r3, [r7, #27]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	f4ff af0f 	bcc.w	800211c <huansic_xb_decodeBody+0x528>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 80022fe:	2300      	movs	r3, #0
 8002300:	77fb      	strb	r3, [r7, #31]
 8002302:	e02d      	b.n	8002360 <huansic_xb_decodeBody+0x76c>
			if (delivering[i]->id != -1) {
 8002304:	7ffb      	ldrb	r3, [r7, #31]
 8002306:	4a90      	ldr	r2, [pc, #576]	; (8002548 <huansic_xb_decodeBody+0x954>)
 8002308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002312:	d022      	beq.n	800235a <huansic_xb_decodeBody+0x766>
				for (j = 0; i < updatedOrderIndex; j++)
 8002314:	2300      	movs	r3, #0
 8002316:	77bb      	strb	r3, [r7, #30]
 8002318:	e011      	b.n	800233e <huansic_xb_decodeBody+0x74a>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 800231a:	7ffb      	ldrb	r3, [r7, #31]
 800231c:	4a8a      	ldr	r2, [pc, #552]	; (8002548 <huansic_xb_decodeBody+0x954>)
 800231e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	7fba      	ldrb	r2, [r7, #30]
 8002326:	3220      	adds	r2, #32
 8002328:	443a      	add	r2, r7
 800232a:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 800232e:	4293      	cmp	r3, r2
 8002330:	d102      	bne.n	8002338 <huansic_xb_decodeBody+0x744>
						j = 255;
 8002332:	23ff      	movs	r3, #255	; 0xff
 8002334:	77bb      	strb	r3, [r7, #30]
						break;
 8002336:	e006      	b.n	8002346 <huansic_xb_decodeBody+0x752>
				for (j = 0; i < updatedOrderIndex; j++)
 8002338:	7fbb      	ldrb	r3, [r7, #30]
 800233a:	3301      	adds	r3, #1
 800233c:	77bb      	strb	r3, [r7, #30]
 800233e:	7ffa      	ldrb	r2, [r7, #31]
 8002340:	7f3b      	ldrb	r3, [r7, #28]
 8002342:	429a      	cmp	r2, r3
 8002344:	d3e9      	bcc.n	800231a <huansic_xb_decodeBody+0x726>
					}
				if (j != 255)
 8002346:	7fbb      	ldrb	r3, [r7, #30]
 8002348:	2bff      	cmp	r3, #255	; 0xff
 800234a:	d006      	beq.n	800235a <huansic_xb_decodeBody+0x766>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 800234c:	7ffb      	ldrb	r3, [r7, #31]
 800234e:	4a7e      	ldr	r2, [pc, #504]	; (8002548 <huansic_xb_decodeBody+0x954>)
 8002350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff f9f1 	bl	800173c <huansic_order_delete>
		for (i = 0; i < 5; i++)
 800235a:	7ffb      	ldrb	r3, [r7, #31]
 800235c:	3301      	adds	r3, #1
 800235e:	77fb      	strb	r3, [r7, #31]
 8002360:	7ffb      	ldrb	r3, [r7, #31]
 8002362:	2b04      	cmp	r3, #4
 8002364:	d9ce      	bls.n	8002304 <huansic_xb_decodeBody+0x710>
			}

		/* record latest order */
		temp = hxb->buffer[index + 24];
 8002366:	7f7b      	ldrb	r3, [r7, #29]
 8002368:	3318      	adds	r3, #24
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	7a9b      	ldrb	r3, [r3, #10]
 8002370:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	021b      	lsls	r3, r3, #8
 8002376:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 25];
 8002378:	7f7b      	ldrb	r3, [r7, #29]
 800237a:	3319      	adds	r3, #25
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	4413      	add	r3, r2
 8002380:	7a9b      	ldrb	r3, [r3, #10]
 8002382:	461a      	mov	r2, r3
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	021b      	lsls	r3, r3, #8
 800238e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 26];
 8002390:	7f7b      	ldrb	r3, [r7, #29]
 8002392:	331a      	adds	r3, #26
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	4413      	add	r3, r2
 8002398:	7a9b      	ldrb	r3, [r3, #10]
 800239a:	461a      	mov	r2, r3
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 27];
 80023a8:	7f7b      	ldrb	r3, [r7, #29]
 80023aa:	331b      	adds	r3, #27
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4413      	add	r3, r2
 80023b0:	7a9b      	ldrb	r3, [r3, #10]
 80023b2:	461a      	mov	r2, r3
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	b25b      	sxtb	r3, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff f962 	bl	8001688 <huansic_order_new>
 80023c4:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d108      	bne.n	80023de <huansic_xb_decodeBody+0x7ea>
			index += 28;
 80023cc:	7f7b      	ldrb	r3, [r7, #29]
 80023ce:	331c      	adds	r3, #28
 80023d0:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fbae 	bl	8001b38 <custom_order_new_failed>
 80023dc:	e09f      	b.n	800251e <huansic_xb_decodeBody+0x92a>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80023de:	7f7b      	ldrb	r3, [r7, #29]
 80023e0:	3302      	adds	r3, #2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	7a9b      	ldrb	r3, [r3, #10]
 80023e8:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 80023ea:	b21a      	sxth	r2, r3
 80023ec:	7f7b      	ldrb	r3, [r7, #29]
 80023ee:	3303      	adds	r3, #3
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	440b      	add	r3, r1
 80023f4:	7a9b      	ldrb	r3, [r3, #10]
 80023f6:	b21b      	sxth	r3, r3
 80023f8:	4313      	orrs	r3, r2
 80023fa:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002400:	7f7b      	ldrb	r3, [r7, #29]
 8002402:	3306      	adds	r3, #6
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	7a9b      	ldrb	r3, [r3, #10]
 800240a:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 800240c:	b21a      	sxth	r2, r3
 800240e:	7f7b      	ldrb	r3, [r7, #29]
 8002410:	3307      	adds	r3, #7
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	440b      	add	r3, r1
 8002416:	7a9b      	ldrb	r3, [r3, #10]
 8002418:	b21b      	sxth	r3, r3
 800241a:	4313      	orrs	r3, r2
 800241c:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	805a      	strh	r2, [r3, #2]
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8002422:	7f7b      	ldrb	r3, [r7, #29]
 8002424:	330a      	adds	r3, #10
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	7a9b      	ldrb	r3, [r3, #10]
 800242c:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 800242e:	b21a      	sxth	r2, r3
 8002430:	7f7b      	ldrb	r3, [r7, #29]
 8002432:	330b      	adds	r3, #11
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	440b      	add	r3, r1
 8002438:	7a9b      	ldrb	r3, [r3, #10]
 800243a:	b21b      	sxth	r3, r3
 800243c:	4313      	orrs	r3, r2
 800243e:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002444:	7f7b      	ldrb	r3, [r7, #29]
 8002446:	330e      	adds	r3, #14
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	4413      	add	r3, r2
 800244c:	7a9b      	ldrb	r3, [r3, #10]
 800244e:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 8002450:	b21a      	sxth	r2, r3
 8002452:	7f7b      	ldrb	r3, [r7, #29]
 8002454:	330f      	adds	r3, #15
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	440b      	add	r3, r1
 800245a:	7a9b      	ldrb	r3, [r3, #10]
 800245c:	b21b      	sxth	r3, r3
 800245e:	4313      	orrs	r3, r2
 8002460:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 8002466:	7f7b      	ldrb	r3, [r7, #29]
 8002468:	3310      	adds	r3, #16
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	7a9b      	ldrb	r3, [r3, #10]
 8002470:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	021b      	lsls	r3, r3, #8
 8002476:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 8002478:	7f7b      	ldrb	r3, [r7, #29]
 800247a:	3311      	adds	r3, #17
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	4413      	add	r3, r2
 8002480:	7a9b      	ldrb	r3, [r3, #10]
 8002482:	461a      	mov	r2, r3
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	4313      	orrs	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	021b      	lsls	r3, r3, #8
 800248e:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 8002490:	7f7b      	ldrb	r3, [r7, #29]
 8002492:	3312      	adds	r3, #18
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4413      	add	r3, r2
 8002498:	7a9b      	ldrb	r3, [r3, #10]
 800249a:	461a      	mov	r2, r3
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 80024a8:	7f7b      	ldrb	r3, [r7, #29]
 80024aa:	3313      	adds	r3, #19
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	7a9b      	ldrb	r3, [r3, #10]
 80024b2:	461a      	mov	r2, r3
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 80024c0:	7f7b      	ldrb	r3, [r7, #29]
 80024c2:	3314      	adds	r3, #20
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	4413      	add	r3, r2
 80024c8:	7a9b      	ldrb	r3, [r3, #10]
 80024ca:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 80024d2:	7f7b      	ldrb	r3, [r7, #29]
 80024d4:	3315      	adds	r3, #21
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	7a9b      	ldrb	r3, [r3, #10]
 80024dc:	461a      	mov	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	021b      	lsls	r3, r3, #8
 80024e8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 80024ea:	7f7b      	ldrb	r3, [r7, #29]
 80024ec:	3316      	adds	r3, #22
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	7a9b      	ldrb	r3, [r3, #10]
 80024f4:	461a      	mov	r2, r3
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 8002502:	7f7b      	ldrb	r3, [r7, #29]
 8002504:	3317      	adds	r3, #23
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	4413      	add	r3, r2
 800250a:	7a9b      	ldrb	r3, [r3, #10]
 800250c:	461a      	mov	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 8002514:	f107 0310 	add.w	r3, r7, #16
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	615a      	str	r2, [r3, #20]
		}
	}

	// set up next DMA
	hxb->nextPackageLength = 6;		// header length
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2206      	movs	r2, #6
 8002522:	725a      	strb	r2, [r3, #9]
	hxb->nextPackageID = 0x00;		// the next one is header
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f103 010a 	add.w	r1, r3, #10
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7a5b      	ldrb	r3, [r3, #9]
 8002538:	b29b      	uxth	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	f004 f9de 	bl	80068fc <HAL_UART_Receive_DMA>
}
 8002540:	bf00      	nop
 8002542:	3720      	adds	r7, #32
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	20000bac 	.word	0x20000bac

0800254c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002552:	f001 fa49 	bl	80039e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002556:	f000 f873 	bl	8002640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800255a:	f000 fc6d 	bl	8002e38 <MX_GPIO_Init>
  MX_DMA_Init();
 800255e:	f000 fc45 	bl	8002dec <MX_DMA_Init>
  MX_I2C1_Init();
 8002562:	f000 f8b3 	bl	80026cc <MX_I2C1_Init>
  MX_TIM1_Init();
 8002566:	f000 f8df 	bl	8002728 <MX_TIM1_Init>
  MX_TIM2_Init();
 800256a:	f000 f9a1 	bl	80028b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800256e:	f000 f9f3 	bl	8002958 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002572:	f000 fa45 	bl	8002a00 <MX_TIM4_Init>
  MX_TIM5_Init();
 8002576:	f000 fa97 	bl	8002aa8 <MX_TIM5_Init>
  MX_TIM8_Init();
 800257a:	f000 fb1f 	bl	8002bbc <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800257e:	f000 fbe1 	bl	8002d44 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8002582:	f000 fc09 	bl	8002d98 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8002586:	f000 fae3 	bl	8002b50 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
    //Motor init
	HUAN_MOTOR1_Init();
 800258a:	f000 fcab 	bl	8002ee4 <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 800258e:	f000 fcd9 	bl	8002f44 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 8002592:	f000 fd07 	bl	8002fa4 <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 8002596:	f000 fd35 	bl	8003004 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 800259a:	f000 fd63 	bl	8003064 <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 800259e:	f000 fd6f 	bl	8003080 <HUAN_ZIGBEE_Init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer after data stables
	HAL_Delay(20);
 80025a2:	2014      	movs	r0, #20
 80025a4:	f001 fa82 	bl	8003aac <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 80025a8:	481f      	ldr	r0, [pc, #124]	; (8002628 <main+0xdc>)
 80025aa:	f002 ff8f 	bl	80054cc <HAL_TIM_Base_Start_IT>
	initangleZ = himu.theta[2];
 80025ae:	4b1f      	ldr	r3, [pc, #124]	; (800262c <main+0xe0>)
 80025b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b2:	4a1f      	ldr	r2, [pc, #124]	; (8002630 <main+0xe4>)
 80025b4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	myCoord.x = 0;
 80025b6:	4b1f      	ldr	r3, [pc, #124]	; (8002634 <main+0xe8>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	801a      	strh	r2, [r3, #0]
	myCoord.y = 0;
 80025bc:	4b1d      	ldr	r3, [pc, #116]	; (8002634 <main+0xe8>)
 80025be:	2200      	movs	r2, #0
 80025c0:	805a      	strh	r2, [r3, #2]
	Coordinate goal;
	goal.x = 10;
 80025c2:	230a      	movs	r3, #10
 80025c4:	80bb      	strh	r3, [r7, #4]
	goal.y = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	80fb      	strh	r3, [r7, #6]
	uint8_t isArrived = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
	uint32_t isUpdate = himu.lastUpdated;
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <main+0xe0>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	60bb      	str	r3, [r7, #8]
//		HAL_Delay(2000);
//		chao_move_angle(0, 4000); // �?��?�
//
//		HAL_Delay(2000);
//		chao_move_angle(90, 4000); // �?�左
    	isUpdate = himu.lastUpdated;
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <main+0xe0>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	60bb      	str	r3, [r7, #8]
//    	isArrived = GotoDestination(goal);
//    	if (isArrived == 1) break;

		while(!gameStatus){		// if the game is not running
 80025da:	bf00      	nop
 80025dc:	4b16      	ldr	r3, [pc, #88]	; (8002638 <main+0xec>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
//	    	LED1_ON;
			break;
		}

		while (gameStage == 0) {		// pre-match
 80025e2:	e003      	b.n	80025ec <main+0xa0>
			if (!gameStatus)	// if the game stopped
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <main+0xec>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d004      	beq.n	80025f6 <main+0xaa>
		while (gameStage == 0) {		// pre-match
 80025ec:	4b13      	ldr	r3, [pc, #76]	; (800263c <main+0xf0>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f7      	beq.n	80025e4 <main+0x98>
 80025f4:	e005      	b.n	8002602 <main+0xb6>
				break;
 80025f6:	bf00      	nop
			// do some initialization

			// find angle offset
		}

		while (gameStage == 1){			// first-half
 80025f8:	e003      	b.n	8002602 <main+0xb6>
			if (!gameStatus)	// if the game stopped
 80025fa:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <main+0xec>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <main+0xc0>
		while (gameStage == 1){			// first-half
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <main+0xf0>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d0f7      	beq.n	80025fa <main+0xae>
 800260a:	e005      	b.n	8002618 <main+0xcc>
				break;
 800260c:	bf00      	nop

		}

		while (gameStage == 2){			// second-half
 800260e:	e003      	b.n	8002618 <main+0xcc>
			if (!gameStatus)	// if the game stopped
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <main+0xec>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <main+0xd6>
		while (gameStage == 2){			// second-half
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <main+0xf0>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b02      	cmp	r3, #2
 800261e:	d0f7      	beq.n	8002610 <main+0xc4>
 8002620:	e7d8      	b.n	80025d4 <main+0x88>
				break;
 8002622:	bf00      	nop
    	isUpdate = himu.lastUpdated;
 8002624:	e7d6      	b.n	80025d4 <main+0x88>
 8002626:	bf00      	nop
 8002628:	200007ec 	.word	0x200007ec
 800262c:	20000a7c 	.word	0x20000a7c
 8002630:	20000bc4 	.word	0x20000bc4
 8002634:	20000bc0 	.word	0x20000bc0
 8002638:	20000b61 	.word	0x20000b61
 800263c:	20000b60 	.word	0x20000b60

08002640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b090      	sub	sp, #64	; 0x40
 8002644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002646:	f107 0318 	add.w	r3, r7, #24
 800264a:	2228      	movs	r2, #40	; 0x28
 800264c:	2100      	movs	r1, #0
 800264e:	4618      	mov	r0, r3
 8002650:	f004 ff30 	bl	80074b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002654:	1d3b      	adds	r3, r7, #4
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	605a      	str	r2, [r3, #4]
 800265c:	609a      	str	r2, [r3, #8]
 800265e:	60da      	str	r2, [r3, #12]
 8002660:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002662:	2301      	movs	r3, #1
 8002664:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800266a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800266c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002670:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002672:	2301      	movs	r3, #1
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002676:	2302      	movs	r3, #2
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800267a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800267e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002680:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002684:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002686:	f107 0318 	add.w	r3, r7, #24
 800268a:	4618      	mov	r0, r3
 800268c:	f002 fab2 	bl	8004bf4 <HAL_RCC_OscConfig>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8002696:	f000 fd39 	bl	800310c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800269a:	230f      	movs	r3, #15
 800269c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800269e:	2302      	movs	r3, #2
 80026a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	2102      	movs	r1, #2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f002 fd1f 	bl	80050f8 <HAL_RCC_ClockConfig>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80026c0:	f000 fd24 	bl	800310c <Error_Handler>
  }
}
 80026c4:	bf00      	nop
 80026c6:	3740      	adds	r7, #64	; 0x40
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <MX_I2C1_Init+0x50>)
 80026d2:	4a13      	ldr	r2, [pc, #76]	; (8002720 <MX_I2C1_Init+0x54>)
 80026d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80026d6:	4b11      	ldr	r3, [pc, #68]	; (800271c <MX_I2C1_Init+0x50>)
 80026d8:	4a12      	ldr	r2, [pc, #72]	; (8002724 <MX_I2C1_Init+0x58>)
 80026da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026dc:	4b0f      	ldr	r3, [pc, #60]	; (800271c <MX_I2C1_Init+0x50>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <MX_I2C1_Init+0x50>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <MX_I2C1_Init+0x50>)
 80026ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026f0:	4b0a      	ldr	r3, [pc, #40]	; (800271c <MX_I2C1_Init+0x50>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80026f6:	4b09      	ldr	r3, [pc, #36]	; (800271c <MX_I2C1_Init+0x50>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026fc:	4b07      	ldr	r3, [pc, #28]	; (800271c <MX_I2C1_Init+0x50>)
 80026fe:	2200      	movs	r2, #0
 8002700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <MX_I2C1_Init+0x50>)
 8002704:	2200      	movs	r2, #0
 8002706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002708:	4804      	ldr	r0, [pc, #16]	; (800271c <MX_I2C1_Init+0x50>)
 800270a:	f002 f92f 	bl	800496c <HAL_I2C_Init>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002714:	f000 fcfa 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002718:	bf00      	nop
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000630 	.word	0x20000630
 8002720:	40005400 	.word	0x40005400
 8002724:	000186a0 	.word	0x000186a0

08002728 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b096      	sub	sp, #88	; 0x58
 800272c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800272e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002746:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
 800274e:	605a      	str	r2, [r3, #4]
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	60da      	str	r2, [r3, #12]
 8002754:	611a      	str	r2, [r3, #16]
 8002756:	615a      	str	r2, [r3, #20]
 8002758:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800275a:	1d3b      	adds	r3, r7, #4
 800275c:	2220      	movs	r2, #32
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f004 fea7 	bl	80074b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002766:	4b50      	ldr	r3, [pc, #320]	; (80028a8 <MX_TIM1_Init+0x180>)
 8002768:	4a50      	ldr	r2, [pc, #320]	; (80028ac <MX_TIM1_Init+0x184>)
 800276a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800276c:	4b4e      	ldr	r3, [pc, #312]	; (80028a8 <MX_TIM1_Init+0x180>)
 800276e:	2200      	movs	r2, #0
 8002770:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002772:	4b4d      	ldr	r3, [pc, #308]	; (80028a8 <MX_TIM1_Init+0x180>)
 8002774:	2200      	movs	r2, #0
 8002776:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002778:	4b4b      	ldr	r3, [pc, #300]	; (80028a8 <MX_TIM1_Init+0x180>)
 800277a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800277e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002780:	4b49      	ldr	r3, [pc, #292]	; (80028a8 <MX_TIM1_Init+0x180>)
 8002782:	2200      	movs	r2, #0
 8002784:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002786:	4b48      	ldr	r3, [pc, #288]	; (80028a8 <MX_TIM1_Init+0x180>)
 8002788:	2200      	movs	r2, #0
 800278a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800278c:	4b46      	ldr	r3, [pc, #280]	; (80028a8 <MX_TIM1_Init+0x180>)
 800278e:	2200      	movs	r2, #0
 8002790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002792:	4845      	ldr	r0, [pc, #276]	; (80028a8 <MX_TIM1_Init+0x180>)
 8002794:	f002 fe4a 	bl	800542c <HAL_TIM_Base_Init>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800279e:	f000 fcb5 	bl	800310c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80027a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027ac:	4619      	mov	r1, r3
 80027ae:	483e      	ldr	r0, [pc, #248]	; (80028a8 <MX_TIM1_Init+0x180>)
 80027b0:	f003 faf4 	bl	8005d9c <HAL_TIM_ConfigClockSource>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80027ba:	f000 fca7 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027be:	483a      	ldr	r0, [pc, #232]	; (80028a8 <MX_TIM1_Init+0x180>)
 80027c0:	f002 fee4 	bl	800558c <HAL_TIM_PWM_Init>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80027ca:	f000 fc9f 	bl	800310c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ce:	2300      	movs	r3, #0
 80027d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027da:	4619      	mov	r1, r3
 80027dc:	4832      	ldr	r0, [pc, #200]	; (80028a8 <MX_TIM1_Init+0x180>)
 80027de:	f003 feaf 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80027e8:	f000 fc90 	bl	800310c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ec:	2360      	movs	r3, #96	; 0x60
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027f8:	2300      	movs	r3, #0
 80027fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027fc:	2300      	movs	r3, #0
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002800:	2300      	movs	r3, #0
 8002802:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002804:	2300      	movs	r3, #0
 8002806:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002808:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800280c:	2200      	movs	r2, #0
 800280e:	4619      	mov	r1, r3
 8002810:	4825      	ldr	r0, [pc, #148]	; (80028a8 <MX_TIM1_Init+0x180>)
 8002812:	f003 fa05 	bl	8005c20 <HAL_TIM_PWM_ConfigChannel>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800281c:	f000 fc76 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002820:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002824:	2204      	movs	r2, #4
 8002826:	4619      	mov	r1, r3
 8002828:	481f      	ldr	r0, [pc, #124]	; (80028a8 <MX_TIM1_Init+0x180>)
 800282a:	f003 f9f9 	bl	8005c20 <HAL_TIM_PWM_ConfigChannel>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002834:	f000 fc6a 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283c:	2208      	movs	r2, #8
 800283e:	4619      	mov	r1, r3
 8002840:	4819      	ldr	r0, [pc, #100]	; (80028a8 <MX_TIM1_Init+0x180>)
 8002842:	f003 f9ed 	bl	8005c20 <HAL_TIM_PWM_ConfigChannel>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800284c:	f000 fc5e 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002854:	220c      	movs	r2, #12
 8002856:	4619      	mov	r1, r3
 8002858:	4813      	ldr	r0, [pc, #76]	; (80028a8 <MX_TIM1_Init+0x180>)
 800285a:	f003 f9e1 	bl	8005c20 <HAL_TIM_PWM_ConfigChannel>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002864:	f000 fc52 	bl	800310c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002870:	2300      	movs	r3, #0
 8002872:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800287c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002880:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	4619      	mov	r1, r3
 800288a:	4807      	ldr	r0, [pc, #28]	; (80028a8 <MX_TIM1_Init+0x180>)
 800288c:	f003 fec4 	bl	8006618 <HAL_TIMEx_ConfigBreakDeadTime>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002896:	f000 fc39 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800289a:	4803      	ldr	r0, [pc, #12]	; (80028a8 <MX_TIM1_Init+0x180>)
 800289c:	f000 fdfc 	bl	8003498 <HAL_TIM_MspPostInit>

}
 80028a0:	bf00      	nop
 80028a2:	3758      	adds	r7, #88	; 0x58
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	20000684 	.word	0x20000684
 80028ac:	40012c00 	.word	0x40012c00

080028b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08c      	sub	sp, #48	; 0x30
 80028b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80028b6:	f107 030c 	add.w	r3, r7, #12
 80028ba:	2224      	movs	r2, #36	; 0x24
 80028bc:	2100      	movs	r1, #0
 80028be:	4618      	mov	r0, r3
 80028c0:	f004 fdf8 	bl	80074b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028c4:	1d3b      	adds	r3, r7, #4
 80028c6:	2200      	movs	r2, #0
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028cc:	4b21      	ldr	r3, [pc, #132]	; (8002954 <MX_TIM2_Init+0xa4>)
 80028ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80028d4:	4b1f      	ldr	r3, [pc, #124]	; (8002954 <MX_TIM2_Init+0xa4>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028da:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <MX_TIM2_Init+0xa4>)
 80028dc:	2200      	movs	r2, #0
 80028de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80028e0:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <MX_TIM2_Init+0xa4>)
 80028e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028e8:	4b1a      	ldr	r3, [pc, #104]	; (8002954 <MX_TIM2_Init+0xa4>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ee:	4b19      	ldr	r3, [pc, #100]	; (8002954 <MX_TIM2_Init+0xa4>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80028f4:	2301      	movs	r3, #1
 80028f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028fc:	2301      	movs	r3, #1
 80028fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002900:	2300      	movs	r3, #0
 8002902:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002908:	2300      	movs	r3, #0
 800290a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800290c:	2301      	movs	r3, #1
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002910:	2300      	movs	r3, #0
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002918:	f107 030c 	add.w	r3, r7, #12
 800291c:	4619      	mov	r1, r3
 800291e:	480d      	ldr	r0, [pc, #52]	; (8002954 <MX_TIM2_Init+0xa4>)
 8002920:	f002 ff46 	bl	80057b0 <HAL_TIM_Encoder_Init>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800292a:	f000 fbef 	bl	800310c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800292e:	2300      	movs	r3, #0
 8002930:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002936:	1d3b      	adds	r3, r7, #4
 8002938:	4619      	mov	r1, r3
 800293a:	4806      	ldr	r0, [pc, #24]	; (8002954 <MX_TIM2_Init+0xa4>)
 800293c:	f003 fe00 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002946:	f000 fbe1 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800294a:	bf00      	nop
 800294c:	3730      	adds	r7, #48	; 0x30
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	200006cc 	.word	0x200006cc

08002958 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08c      	sub	sp, #48	; 0x30
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800295e:	f107 030c 	add.w	r3, r7, #12
 8002962:	2224      	movs	r2, #36	; 0x24
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f004 fda4 	bl	80074b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800296c:	1d3b      	adds	r3, r7, #4
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002974:	4b20      	ldr	r3, [pc, #128]	; (80029f8 <MX_TIM3_Init+0xa0>)
 8002976:	4a21      	ldr	r2, [pc, #132]	; (80029fc <MX_TIM3_Init+0xa4>)
 8002978:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800297a:	4b1f      	ldr	r3, [pc, #124]	; (80029f8 <MX_TIM3_Init+0xa0>)
 800297c:	2200      	movs	r2, #0
 800297e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002980:	4b1d      	ldr	r3, [pc, #116]	; (80029f8 <MX_TIM3_Init+0xa0>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002986:	4b1c      	ldr	r3, [pc, #112]	; (80029f8 <MX_TIM3_Init+0xa0>)
 8002988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800298c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800298e:	4b1a      	ldr	r3, [pc, #104]	; (80029f8 <MX_TIM3_Init+0xa0>)
 8002990:	2200      	movs	r2, #0
 8002992:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002994:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <MX_TIM3_Init+0xa0>)
 8002996:	2200      	movs	r2, #0
 8002998:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800299a:	2301      	movs	r3, #1
 800299c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029a2:	2301      	movs	r3, #1
 80029a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029ae:	2300      	movs	r3, #0
 80029b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029b2:	2301      	movs	r3, #1
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029b6:	2300      	movs	r3, #0
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80029ba:	2300      	movs	r3, #0
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80029be:	f107 030c 	add.w	r3, r7, #12
 80029c2:	4619      	mov	r1, r3
 80029c4:	480c      	ldr	r0, [pc, #48]	; (80029f8 <MX_TIM3_Init+0xa0>)
 80029c6:	f002 fef3 	bl	80057b0 <HAL_TIM_Encoder_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80029d0:	f000 fb9c 	bl	800310c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d4:	2300      	movs	r3, #0
 80029d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	4805      	ldr	r0, [pc, #20]	; (80029f8 <MX_TIM3_Init+0xa0>)
 80029e2:	f003 fdad 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80029ec:	f000 fb8e 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80029f0:	bf00      	nop
 80029f2:	3730      	adds	r7, #48	; 0x30
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000714 	.word	0x20000714
 80029fc:	40000400 	.word	0x40000400

08002a00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	; 0x30
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a06:	f107 030c 	add.w	r3, r7, #12
 8002a0a:	2224      	movs	r2, #36	; 0x24
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f004 fd50 	bl	80074b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a14:	1d3b      	adds	r3, r7, #4
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002a1c:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <MX_TIM4_Init+0xa0>)
 8002a1e:	4a21      	ldr	r2, [pc, #132]	; (8002aa4 <MX_TIM4_Init+0xa4>)
 8002a20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002a22:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <MX_TIM4_Init+0xa0>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <MX_TIM4_Init+0xa0>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <MX_TIM4_Init+0xa0>)
 8002a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a36:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <MX_TIM4_Init+0xa0>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a3c:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <MX_TIM4_Init+0xa0>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002a42:	2301      	movs	r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002a46:	2300      	movs	r3, #0
 8002a48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002a56:	2300      	movs	r3, #0
 8002a58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002a66:	f107 030c 	add.w	r3, r7, #12
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	480c      	ldr	r0, [pc, #48]	; (8002aa0 <MX_TIM4_Init+0xa0>)
 8002a6e:	f002 fe9f 	bl	80057b0 <HAL_TIM_Encoder_Init>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002a78:	f000 fb48 	bl	800310c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	4619      	mov	r1, r3
 8002a88:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <MX_TIM4_Init+0xa0>)
 8002a8a:	f003 fd59 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002a94:	f000 fb3a 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a98:	bf00      	nop
 8002a9a:	3730      	adds	r7, #48	; 0x30
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	2000075c 	.word	0x2000075c
 8002aa4:	40000800 	.word	0x40000800

08002aa8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08c      	sub	sp, #48	; 0x30
 8002aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002aae:	f107 030c 	add.w	r3, r7, #12
 8002ab2:	2224      	movs	r2, #36	; 0x24
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f004 fcfc 	bl	80074b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
 8002ac2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ac4:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <MX_TIM5_Init+0xa0>)
 8002ac6:	4a21      	ldr	r2, [pc, #132]	; (8002b4c <MX_TIM5_Init+0xa4>)
 8002ac8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002aca:	4b1f      	ldr	r3, [pc, #124]	; (8002b48 <MX_TIM5_Init+0xa0>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <MX_TIM5_Init+0xa0>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <MX_TIM5_Init+0xa0>)
 8002ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002adc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ade:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <MX_TIM5_Init+0xa0>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae4:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <MX_TIM5_Init+0xa0>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002af2:	2301      	movs	r3, #1
 8002af4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002afe:	2300      	movs	r3, #0
 8002b00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b02:	2301      	movs	r3, #1
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b06:	2300      	movs	r3, #0
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002b0e:	f107 030c 	add.w	r3, r7, #12
 8002b12:	4619      	mov	r1, r3
 8002b14:	480c      	ldr	r0, [pc, #48]	; (8002b48 <MX_TIM5_Init+0xa0>)
 8002b16:	f002 fe4b 	bl	80057b0 <HAL_TIM_Encoder_Init>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002b20:	f000 faf4 	bl	800310c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b24:	2300      	movs	r3, #0
 8002b26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002b2c:	1d3b      	adds	r3, r7, #4
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4805      	ldr	r0, [pc, #20]	; (8002b48 <MX_TIM5_Init+0xa0>)
 8002b32:	f003 fd05 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002b3c:	f000 fae6 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002b40:	bf00      	nop
 8002b42:	3730      	adds	r7, #48	; 0x30
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	200007a4 	.word	0x200007a4
 8002b4c:	40000c00 	.word	0x40000c00

08002b50 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b56:	463b      	mov	r3, r7
 8002b58:	2200      	movs	r2, #0
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <MX_TIM6_Init+0x64>)
 8002b60:	4a15      	ldr	r2, [pc, #84]	; (8002bb8 <MX_TIM6_Init+0x68>)
 8002b62:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8002b64:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <MX_TIM6_Init+0x64>)
 8002b66:	2247      	movs	r2, #71	; 0x47
 8002b68:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6a:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <MX_TIM6_Init+0x64>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 8002b70:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <MX_TIM6_Init+0x64>)
 8002b72:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002b76:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b78:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <MX_TIM6_Init+0x64>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b7e:	480d      	ldr	r0, [pc, #52]	; (8002bb4 <MX_TIM6_Init+0x64>)
 8002b80:	f002 fc54 	bl	800542c <HAL_TIM_Base_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002b8a:	f000 fabf 	bl	800310c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b96:	463b      	mov	r3, r7
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <MX_TIM6_Init+0x64>)
 8002b9c:	f003 fcd0 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002ba6:	f000 fab1 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	200007ec 	.word	0x200007ec
 8002bb8:	40001000 	.word	0x40001000

08002bbc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b096      	sub	sp, #88	; 0x58
 8002bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	601a      	str	r2, [r3, #0]
 8002bca:	605a      	str	r2, [r3, #4]
 8002bcc:	609a      	str	r2, [r3, #8]
 8002bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bd0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
 8002be4:	609a      	str	r2, [r3, #8]
 8002be6:	60da      	str	r2, [r3, #12]
 8002be8:	611a      	str	r2, [r3, #16]
 8002bea:	615a      	str	r2, [r3, #20]
 8002bec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bee:	1d3b      	adds	r3, r7, #4
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f004 fc5d 	bl	80074b4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002bfa:	4b50      	ldr	r3, [pc, #320]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002bfc:	4a50      	ldr	r2, [pc, #320]	; (8002d40 <MX_TIM8_Init+0x184>)
 8002bfe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002c00:	4b4e      	ldr	r3, [pc, #312]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c06:	4b4d      	ldr	r3, [pc, #308]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002c0c:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c12:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c14:	4b49      	ldr	r3, [pc, #292]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002c1a:	4b48      	ldr	r3, [pc, #288]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c20:	4b46      	ldr	r3, [pc, #280]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002c26:	4845      	ldr	r0, [pc, #276]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002c28:	f002 fc00 	bl	800542c <HAL_TIM_Base_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002c32:	f000 fa6b 	bl	800310c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c3a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002c3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c40:	4619      	mov	r1, r3
 8002c42:	483e      	ldr	r0, [pc, #248]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002c44:	f003 f8aa 	bl	8005d9c <HAL_TIM_ConfigClockSource>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002c4e:	f000 fa5d 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002c52:	483a      	ldr	r0, [pc, #232]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002c54:	f002 fc9a 	bl	800558c <HAL_TIM_PWM_Init>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002c5e:	f000 fa55 	bl	800310c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c62:	2300      	movs	r3, #0
 8002c64:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c66:	2300      	movs	r3, #0
 8002c68:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002c6a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4832      	ldr	r0, [pc, #200]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002c72:	f003 fc65 	bl	8006540 <HAL_TIMEx_MasterConfigSynchronization>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002c7c:	f000 fa46 	bl	800310c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c80:	2360      	movs	r3, #96	; 0x60
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c90:	2300      	movs	r3, #0
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c94:	2300      	movs	r3, #0
 8002c96:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4825      	ldr	r0, [pc, #148]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002ca6:	f002 ffbb 	bl	8005c20 <HAL_TIM_PWM_ConfigChannel>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002cb0:	f000 fa2c 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002cb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb8:	2204      	movs	r2, #4
 8002cba:	4619      	mov	r1, r3
 8002cbc:	481f      	ldr	r0, [pc, #124]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002cbe:	f002 ffaf 	bl	8005c20 <HAL_TIM_PWM_ConfigChannel>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002cc8:	f000 fa20 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ccc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd0:	2208      	movs	r2, #8
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4819      	ldr	r0, [pc, #100]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002cd6:	f002 ffa3 	bl	8005c20 <HAL_TIM_PWM_ConfigChannel>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002ce0:	f000 fa14 	bl	800310c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce8:	220c      	movs	r2, #12
 8002cea:	4619      	mov	r1, r3
 8002cec:	4813      	ldr	r0, [pc, #76]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002cee:	f002 ff97 	bl	8005c20 <HAL_TIM_PWM_ConfigChannel>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002cf8:	f000 fa08 	bl	800310c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002d04:	2300      	movs	r3, #0
 8002d06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002d10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002d16:	2300      	movs	r3, #0
 8002d18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002d1a:	1d3b      	adds	r3, r7, #4
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4807      	ldr	r0, [pc, #28]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002d20:	f003 fc7a 	bl	8006618 <HAL_TIMEx_ConfigBreakDeadTime>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002d2a:	f000 f9ef 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002d2e:	4803      	ldr	r0, [pc, #12]	; (8002d3c <MX_TIM8_Init+0x180>)
 8002d30:	f000 fbb2 	bl	8003498 <HAL_TIM_MspPostInit>

}
 8002d34:	bf00      	nop
 8002d36:	3758      	adds	r7, #88	; 0x58
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000834 	.word	0x20000834
 8002d40:	40013400 	.word	0x40013400

08002d44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d4a:	4a12      	ldr	r2, [pc, #72]	; (8002d94 <MX_USART2_UART_Init+0x50>)
 8002d4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d62:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6e:	4b08      	ldr	r3, [pc, #32]	; (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d74:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d7a:	4805      	ldr	r0, [pc, #20]	; (8002d90 <MX_USART2_UART_Init+0x4c>)
 8002d7c:	f003 fcaf 	bl	80066de <HAL_UART_Init>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002d86:	f000 f9c1 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	2000087c 	.word	0x2000087c
 8002d94:	40004400 	.word	0x40004400

08002d98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002d9c:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <MX_USART3_UART_Init+0x4c>)
 8002d9e:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <MX_USART3_UART_Init+0x50>)
 8002da0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <MX_USART3_UART_Init+0x4c>)
 8002da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002da8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002daa:	4b0e      	ldr	r3, [pc, #56]	; (8002de4 <MX_USART3_UART_Init+0x4c>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002db0:	4b0c      	ldr	r3, [pc, #48]	; (8002de4 <MX_USART3_UART_Init+0x4c>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002db6:	4b0b      	ldr	r3, [pc, #44]	; (8002de4 <MX_USART3_UART_Init+0x4c>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002dbc:	4b09      	ldr	r3, [pc, #36]	; (8002de4 <MX_USART3_UART_Init+0x4c>)
 8002dbe:	220c      	movs	r2, #12
 8002dc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dc2:	4b08      	ldr	r3, [pc, #32]	; (8002de4 <MX_USART3_UART_Init+0x4c>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dc8:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <MX_USART3_UART_Init+0x4c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002dce:	4805      	ldr	r0, [pc, #20]	; (8002de4 <MX_USART3_UART_Init+0x4c>)
 8002dd0:	f003 fc85 	bl	80066de <HAL_UART_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002dda:	f000 f997 	bl	800310c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002dde:	bf00      	nop
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200008c0 	.word	0x200008c0
 8002de8:	40004800 	.word	0x40004800

08002dec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <MX_DMA_Init+0x48>)
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	4a0f      	ldr	r2, [pc, #60]	; (8002e34 <MX_DMA_Init+0x48>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6153      	str	r3, [r2, #20]
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <MX_DMA_Init+0x48>)
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	607b      	str	r3, [r7, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	2102      	movs	r1, #2
 8002e0e:	200d      	movs	r0, #13
 8002e10:	f000 ff47 	bl	8003ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002e14:	200d      	movs	r0, #13
 8002e16:	f000 ff60 	bl	8003cda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2102      	movs	r1, #2
 8002e1e:	2010      	movs	r0, #16
 8002e20:	f000 ff3f 	bl	8003ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002e24:	2010      	movs	r0, #16
 8002e26:	f000 ff58 	bl	8003cda <HAL_NVIC_EnableIRQ>

}
 8002e2a:	bf00      	nop
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000

08002e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b088      	sub	sp, #32
 8002e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e3e:	f107 0310 	add.w	r3, r7, #16
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	605a      	str	r2, [r3, #4]
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e4c:	4b23      	ldr	r3, [pc, #140]	; (8002edc <MX_GPIO_Init+0xa4>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	4a22      	ldr	r2, [pc, #136]	; (8002edc <MX_GPIO_Init+0xa4>)
 8002e52:	f043 0320 	orr.w	r3, r3, #32
 8002e56:	6193      	str	r3, [r2, #24]
 8002e58:	4b20      	ldr	r3, [pc, #128]	; (8002edc <MX_GPIO_Init+0xa4>)
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <MX_GPIO_Init+0xa4>)
 8002e66:	699b      	ldr	r3, [r3, #24]
 8002e68:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <MX_GPIO_Init+0xa4>)
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	6193      	str	r3, [r2, #24]
 8002e70:	4b1a      	ldr	r3, [pc, #104]	; (8002edc <MX_GPIO_Init+0xa4>)
 8002e72:	699b      	ldr	r3, [r3, #24]
 8002e74:	f003 0304 	and.w	r3, r3, #4
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e7c:	4b17      	ldr	r3, [pc, #92]	; (8002edc <MX_GPIO_Init+0xa4>)
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	4a16      	ldr	r2, [pc, #88]	; (8002edc <MX_GPIO_Init+0xa4>)
 8002e82:	f043 0308 	orr.w	r3, r3, #8
 8002e86:	6193      	str	r3, [r2, #24]
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <MX_GPIO_Init+0xa4>)
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e94:	4b11      	ldr	r3, [pc, #68]	; (8002edc <MX_GPIO_Init+0xa4>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	4a10      	ldr	r2, [pc, #64]	; (8002edc <MX_GPIO_Init+0xa4>)
 8002e9a:	f043 0310 	orr.w	r3, r3, #16
 8002e9e:	6193      	str	r3, [r2, #24]
 8002ea0:	4b0e      	ldr	r3, [pc, #56]	; (8002edc <MX_GPIO_Init+0xa4>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	603b      	str	r3, [r7, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8002eac:	2200      	movs	r2, #0
 8002eae:	2107      	movs	r1, #7
 8002eb0:	480b      	ldr	r0, [pc, #44]	; (8002ee0 <MX_GPIO_Init+0xa8>)
 8002eb2:	f001 fd43 	bl	800493c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8002eb6:	2307      	movs	r3, #7
 8002eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec6:	f107 0310 	add.w	r3, r7, #16
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4804      	ldr	r0, [pc, #16]	; (8002ee0 <MX_GPIO_Init+0xa8>)
 8002ece:	f001 fba1 	bl	8004614 <HAL_GPIO_Init>

}
 8002ed2:	bf00      	nop
 8002ed4:	3720      	adds	r7, #32
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	40010c00 	.word	0x40010c00

08002ee4 <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HUAN_MOTOR1_Init+0x44>)
 8002eea:	4a10      	ldr	r2, [pc, #64]	; (8002f2c <HUAN_MOTOR1_Init+0x48>)
 8002eec:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 8002eee:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <HUAN_MOTOR1_Init+0x44>)
 8002ef0:	4a0f      	ldr	r2, [pc, #60]	; (8002f30 <HUAN_MOTOR1_Init+0x4c>)
 8002ef2:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <HUAN_MOTOR1_Init+0x44>)
 8002ef6:	4a0f      	ldr	r2, [pc, #60]	; (8002f34 <HUAN_MOTOR1_Init+0x50>)
 8002ef8:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 8002efa:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HUAN_MOTOR1_Init+0x44>)
 8002efc:	220c      	movs	r2, #12
 8002efe:	60da      	str	r2, [r3, #12]
	cmotor_lf.negTimer = &htim1;
 8002f00:	4b09      	ldr	r3, [pc, #36]	; (8002f28 <HUAN_MOTOR1_Init+0x44>)
 8002f02:	4a0c      	ldr	r2, [pc, #48]	; (8002f34 <HUAN_MOTOR1_Init+0x50>)
 8002f04:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 8002f06:	4b08      	ldr	r3, [pc, #32]	; (8002f28 <HUAN_MOTOR1_Init+0x44>)
 8002f08:	2208      	movs	r2, #8
 8002f0a:	611a      	str	r2, [r3, #16]
	cmotor_lf.kp = 0.0003;
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HUAN_MOTOR1_Init+0x44>)
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <HUAN_MOTOR1_Init+0x54>)
 8002f10:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 8002f12:	4b05      	ldr	r3, [pc, #20]	; (8002f28 <HUAN_MOTOR1_Init+0x44>)
 8002f14:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <HUAN_MOTOR1_Init+0x58>)
 8002f16:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HUAN_MOTOR1_Init+0x44>)
 8002f1a:	4a09      	ldr	r2, [pc, #36]	; (8002f40 <HUAN_MOTOR1_Init+0x5c>)
 8002f1c:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 8002f1e:	4802      	ldr	r0, [pc, #8]	; (8002f28 <HUAN_MOTOR1_Init+0x44>)
 8002f20:	f7fe fc22 	bl	8001768 <huansic_motor_init>
}
 8002f24:	bf00      	nop
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	2000098c 	.word	0x2000098c
 8002f2c:	200006cc 	.word	0x200006cc
 8002f30:	3d4ccccd 	.word	0x3d4ccccd
 8002f34:	20000684 	.word	0x20000684
 8002f38:	399d4952 	.word	0x399d4952
 8002f3c:	37a7c5ac 	.word	0x37a7c5ac
 8002f40:	387ba882 	.word	0x387ba882

08002f44 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 8002f48:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <HUAN_MOTOR2_Init+0x44>)
 8002f4a:	4a10      	ldr	r2, [pc, #64]	; (8002f8c <HUAN_MOTOR2_Init+0x48>)
 8002f4c:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 8002f4e:	4b0e      	ldr	r3, [pc, #56]	; (8002f88 <HUAN_MOTOR2_Init+0x44>)
 8002f50:	4a0f      	ldr	r2, [pc, #60]	; (8002f90 <HUAN_MOTOR2_Init+0x4c>)
 8002f52:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 8002f54:	4b0c      	ldr	r3, [pc, #48]	; (8002f88 <HUAN_MOTOR2_Init+0x44>)
 8002f56:	4a0f      	ldr	r2, [pc, #60]	; (8002f94 <HUAN_MOTOR2_Init+0x50>)
 8002f58:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 8002f5a:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HUAN_MOTOR2_Init+0x44>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <HUAN_MOTOR2_Init+0x44>)
 8002f62:	4a0c      	ldr	r2, [pc, #48]	; (8002f94 <HUAN_MOTOR2_Init+0x50>)
 8002f64:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <HUAN_MOTOR2_Init+0x44>)
 8002f68:	2204      	movs	r2, #4
 8002f6a:	611a      	str	r2, [r3, #16]
	cmotor_rf.kp = 0.0003;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <HUAN_MOTOR2_Init+0x44>)
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <HUAN_MOTOR2_Init+0x54>)
 8002f70:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 8002f72:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HUAN_MOTOR2_Init+0x44>)
 8002f74:	4a09      	ldr	r2, [pc, #36]	; (8002f9c <HUAN_MOTOR2_Init+0x58>)
 8002f76:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 8002f78:	4b03      	ldr	r3, [pc, #12]	; (8002f88 <HUAN_MOTOR2_Init+0x44>)
 8002f7a:	4a09      	ldr	r2, [pc, #36]	; (8002fa0 <HUAN_MOTOR2_Init+0x5c>)
 8002f7c:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 8002f7e:	4802      	ldr	r0, [pc, #8]	; (8002f88 <HUAN_MOTOR2_Init+0x44>)
 8002f80:	f7fe fbf2 	bl	8001768 <huansic_motor_init>
}
 8002f84:	bf00      	nop
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	200009c8 	.word	0x200009c8
 8002f8c:	2000075c 	.word	0x2000075c
 8002f90:	3d4ccccd 	.word	0x3d4ccccd
 8002f94:	20000684 	.word	0x20000684
 8002f98:	399d4952 	.word	0x399d4952
 8002f9c:	37a7c5ac 	.word	0x37a7c5ac
 8002fa0:	387ba882 	.word	0x387ba882

08002fa4 <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 8002fa8:	4b0f      	ldr	r3, [pc, #60]	; (8002fe8 <HUAN_MOTOR3_Init+0x44>)
 8002faa:	4a10      	ldr	r2, [pc, #64]	; (8002fec <HUAN_MOTOR3_Init+0x48>)
 8002fac:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <HUAN_MOTOR3_Init+0x44>)
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <HUAN_MOTOR3_Init+0x4c>)
 8002fb2:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 8002fb4:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HUAN_MOTOR3_Init+0x44>)
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ff4 <HUAN_MOTOR3_Init+0x50>)
 8002fb8:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 8002fba:	4b0b      	ldr	r3, [pc, #44]	; (8002fe8 <HUAN_MOTOR3_Init+0x44>)
 8002fbc:	220c      	movs	r2, #12
 8002fbe:	60da      	str	r2, [r3, #12]
	cmotor_lb.negTimer = &htim8;
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <HUAN_MOTOR3_Init+0x44>)
 8002fc2:	4a0c      	ldr	r2, [pc, #48]	; (8002ff4 <HUAN_MOTOR3_Init+0x50>)
 8002fc4:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <HUAN_MOTOR3_Init+0x44>)
 8002fc8:	2208      	movs	r2, #8
 8002fca:	611a      	str	r2, [r3, #16]
	cmotor_lb.kp = 0.0003;
 8002fcc:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HUAN_MOTOR3_Init+0x44>)
 8002fce:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <HUAN_MOTOR3_Init+0x54>)
 8002fd0:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HUAN_MOTOR3_Init+0x44>)
 8002fd4:	4a09      	ldr	r2, [pc, #36]	; (8002ffc <HUAN_MOTOR3_Init+0x58>)
 8002fd6:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <HUAN_MOTOR3_Init+0x44>)
 8002fda:	4a09      	ldr	r2, [pc, #36]	; (8003000 <HUAN_MOTOR3_Init+0x5c>)
 8002fdc:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 8002fde:	4802      	ldr	r0, [pc, #8]	; (8002fe8 <HUAN_MOTOR3_Init+0x44>)
 8002fe0:	f7fe fbc2 	bl	8001768 <huansic_motor_init>
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20000a04 	.word	0x20000a04
 8002fec:	20000714 	.word	0x20000714
 8002ff0:	3d4ccccd 	.word	0x3d4ccccd
 8002ff4:	20000834 	.word	0x20000834
 8002ff8:	399d4952 	.word	0x399d4952
 8002ffc:	37a7c5ac 	.word	0x37a7c5ac
 8003000:	387ba882 	.word	0x387ba882

08003004 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <HUAN_MOTOR4_Init+0x44>)
 800300a:	4a10      	ldr	r2, [pc, #64]	; (800304c <HUAN_MOTOR4_Init+0x48>)
 800300c:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <HUAN_MOTOR4_Init+0x44>)
 8003010:	4a0f      	ldr	r2, [pc, #60]	; (8003050 <HUAN_MOTOR4_Init+0x4c>)
 8003012:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <HUAN_MOTOR4_Init+0x44>)
 8003016:	4a0f      	ldr	r2, [pc, #60]	; (8003054 <HUAN_MOTOR4_Init+0x50>)
 8003018:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 800301a:	4b0b      	ldr	r3, [pc, #44]	; (8003048 <HUAN_MOTOR4_Init+0x44>)
 800301c:	2200      	movs	r2, #0
 800301e:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 8003020:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HUAN_MOTOR4_Init+0x44>)
 8003022:	4a0c      	ldr	r2, [pc, #48]	; (8003054 <HUAN_MOTOR4_Init+0x50>)
 8003024:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 8003026:	4b08      	ldr	r3, [pc, #32]	; (8003048 <HUAN_MOTOR4_Init+0x44>)
 8003028:	2204      	movs	r2, #4
 800302a:	611a      	str	r2, [r3, #16]
	cmotor_rb.kp = 0.0003;
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HUAN_MOTOR4_Init+0x44>)
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <HUAN_MOTOR4_Init+0x54>)
 8003030:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 8003032:	4b05      	ldr	r3, [pc, #20]	; (8003048 <HUAN_MOTOR4_Init+0x44>)
 8003034:	4a09      	ldr	r2, [pc, #36]	; (800305c <HUAN_MOTOR4_Init+0x58>)
 8003036:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HUAN_MOTOR4_Init+0x44>)
 800303a:	4a09      	ldr	r2, [pc, #36]	; (8003060 <HUAN_MOTOR4_Init+0x5c>)
 800303c:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 800303e:	4802      	ldr	r0, [pc, #8]	; (8003048 <HUAN_MOTOR4_Init+0x44>)
 8003040:	f7fe fb92 	bl	8001768 <huansic_motor_init>
}
 8003044:	bf00      	nop
 8003046:	bd80      	pop	{r7, pc}
 8003048:	20000a40 	.word	0x20000a40
 800304c:	200007a4 	.word	0x200007a4
 8003050:	3d4ccccd 	.word	0x3d4ccccd
 8003054:	20000834 	.word	0x20000834
 8003058:	399d4952 	.word	0x399d4952
 800305c:	37a7c5ac 	.word	0x37a7c5ac
 8003060:	387ba882 	.word	0x387ba882

08003064 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
	himu.huart = &huart3;
 8003068:	4b03      	ldr	r3, [pc, #12]	; (8003078 <HUAN_IMU_Init+0x14>)
 800306a:	4a04      	ldr	r2, [pc, #16]	; (800307c <HUAN_IMU_Init+0x18>)
 800306c:	601a      	str	r2, [r3, #0]
	huansic_jy62_init(&himu);
 800306e:	4802      	ldr	r0, [pc, #8]	; (8003078 <HUAN_IMU_Init+0x14>)
 8003070:	f7fd ffec 	bl	800104c <huansic_jy62_init>
}
 8003074:	bf00      	nop
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000a7c 	.word	0x20000a7c
 800307c:	200008c0 	.word	0x200008c0

08003080 <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
	hxb.uartPort = &huart2;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HUAN_ZIGBEE_Init+0x14>)
 8003086:	4a04      	ldr	r2, [pc, #16]	; (8003098 <HUAN_ZIGBEE_Init+0x18>)
 8003088:	601a      	str	r2, [r3, #0]
	huansic_xb_init(&hxb);
 800308a:	4802      	ldr	r0, [pc, #8]	; (8003094 <HUAN_ZIGBEE_Init+0x14>)
 800308c:	f7fe fd5e 	bl	8001b4c <huansic_xb_init>
}
 8003090:	bf00      	nop
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000ad4 	.word	0x20000ad4
 8003098:	2000087c 	.word	0x2000087c

0800309c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 80030a4:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <HAL_UART_RxCpltCallback+0x34>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d10b      	bne.n	80030c6 <HAL_UART_RxCpltCallback+0x2a>
		if (himu.pending_alignment)
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <HAL_UART_RxCpltCallback+0x34>)
 80030b0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_UART_RxCpltCallback+0x24>
			huansic_jy62_isr(&himu);
 80030b8:	4805      	ldr	r0, [pc, #20]	; (80030d0 <HAL_UART_RxCpltCallback+0x34>)
 80030ba:	f7fe f91d 	bl	80012f8 <huansic_jy62_isr>
		else
			huansic_jy62_dma_isr(&himu);
	} /*else if(){

	} */
}
 80030be:	e002      	b.n	80030c6 <HAL_UART_RxCpltCallback+0x2a>
			huansic_jy62_dma_isr(&himu);
 80030c0:	4803      	ldr	r0, [pc, #12]	; (80030d0 <HAL_UART_RxCpltCallback+0x34>)
 80030c2:	f7fd fff9 	bl	80010b8 <huansic_jy62_dma_isr>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000a7c 	.word	0x20000a7c

080030d4 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 80030dc:	4b0a      	ldr	r3, [pc, #40]	; (8003108 <HAL_UART_ErrorCallback+0x34>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d10b      	bne.n	80030fe <HAL_UART_ErrorCallback+0x2a>
		if (himu.pending_alignment)
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_UART_ErrorCallback+0x34>)
 80030e8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_UART_ErrorCallback+0x24>
			huansic_jy62_error(&himu);
 80030f0:	4805      	ldr	r0, [pc, #20]	; (8003108 <HAL_UART_ErrorCallback+0x34>)
 80030f2:	f7fe f94c 	bl	800138e <huansic_jy62_error>
		else
			huansic_jy62_dma_error(&himu);
	} /*else if(){

	}*/
}
 80030f6:	e002      	b.n	80030fe <HAL_UART_ErrorCallback+0x2a>
			huansic_jy62_dma_error(&himu);
 80030f8:	4803      	ldr	r0, [pc, #12]	; (8003108 <HAL_UART_ErrorCallback+0x34>)
 80030fa:	f7fe f934 	bl	8001366 <huansic_jy62_dma_error>
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000a7c 	.word	0x20000a7c

0800310c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003110:	b672      	cpsid	i
}
 8003112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003114:	e7fe      	b.n	8003114 <Error_Handler+0x8>
	...

08003118 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_MspInit+0x5c>)
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	4a14      	ldr	r2, [pc, #80]	; (8003174 <HAL_MspInit+0x5c>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6193      	str	r3, [r2, #24]
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <HAL_MspInit+0x5c>)
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	60bb      	str	r3, [r7, #8]
 8003134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <HAL_MspInit+0x5c>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	4a0e      	ldr	r2, [pc, #56]	; (8003174 <HAL_MspInit+0x5c>)
 800313c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003140:	61d3      	str	r3, [r2, #28]
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <HAL_MspInit+0x5c>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800314e:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <HAL_MspInit+0x60>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	4a04      	ldr	r2, [pc, #16]	; (8003178 <HAL_MspInit+0x60>)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	bc80      	pop	{r7}
 8003172:	4770      	bx	lr
 8003174:	40021000 	.word	0x40021000
 8003178:	40010000 	.word	0x40010000

0800317c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003184:	f107 0314 	add.w	r3, r7, #20
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a1d      	ldr	r2, [pc, #116]	; (800320c <HAL_I2C_MspInit+0x90>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d132      	bne.n	8003202 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800319c:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <HAL_I2C_MspInit+0x94>)
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	4a1b      	ldr	r2, [pc, #108]	; (8003210 <HAL_I2C_MspInit+0x94>)
 80031a2:	f043 0308 	orr.w	r3, r3, #8
 80031a6:	6193      	str	r3, [r2, #24]
 80031a8:	4b19      	ldr	r3, [pc, #100]	; (8003210 <HAL_I2C_MspInit+0x94>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80031b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80031b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031ba:	2312      	movs	r3, #18
 80031bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80031be:	2303      	movs	r3, #3
 80031c0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c2:	f107 0314 	add.w	r3, r7, #20
 80031c6:	4619      	mov	r1, r3
 80031c8:	4812      	ldr	r0, [pc, #72]	; (8003214 <HAL_I2C_MspInit+0x98>)
 80031ca:	f001 fa23 	bl	8004614 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80031ce:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_I2C_MspInit+0x9c>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80031da:	627b      	str	r3, [r7, #36]	; 0x24
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	f043 0302 	orr.w	r3, r3, #2
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
 80031e4:	4a0c      	ldr	r2, [pc, #48]	; (8003218 <HAL_I2C_MspInit+0x9c>)
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031ea:	4b09      	ldr	r3, [pc, #36]	; (8003210 <HAL_I2C_MspInit+0x94>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <HAL_I2C_MspInit+0x94>)
 80031f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031f4:	61d3      	str	r3, [r2, #28]
 80031f6:	4b06      	ldr	r3, [pc, #24]	; (8003210 <HAL_I2C_MspInit+0x94>)
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003202:	bf00      	nop
 8003204:	3728      	adds	r7, #40	; 0x28
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40005400 	.word	0x40005400
 8003210:	40021000 	.word	0x40021000
 8003214:	40010c00 	.word	0x40010c00
 8003218:	40010000 	.word	0x40010000

0800321c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1f      	ldr	r2, [pc, #124]	; (80032a8 <HAL_TIM_Base_MspInit+0x8c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d10c      	bne.n	8003248 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800322e:	4b1f      	ldr	r3, [pc, #124]	; (80032ac <HAL_TIM_Base_MspInit+0x90>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	4a1e      	ldr	r2, [pc, #120]	; (80032ac <HAL_TIM_Base_MspInit+0x90>)
 8003234:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003238:	6193      	str	r3, [r2, #24]
 800323a:	4b1c      	ldr	r3, [pc, #112]	; (80032ac <HAL_TIM_Base_MspInit+0x90>)
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003242:	617b      	str	r3, [r7, #20]
 8003244:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003246:	e02a      	b.n	800329e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a18      	ldr	r2, [pc, #96]	; (80032b0 <HAL_TIM_Base_MspInit+0x94>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d114      	bne.n	800327c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003252:	4b16      	ldr	r3, [pc, #88]	; (80032ac <HAL_TIM_Base_MspInit+0x90>)
 8003254:	69db      	ldr	r3, [r3, #28]
 8003256:	4a15      	ldr	r2, [pc, #84]	; (80032ac <HAL_TIM_Base_MspInit+0x90>)
 8003258:	f043 0310 	orr.w	r3, r3, #16
 800325c:	61d3      	str	r3, [r2, #28]
 800325e:	4b13      	ldr	r3, [pc, #76]	; (80032ac <HAL_TIM_Base_MspInit+0x90>)
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 800326a:	2200      	movs	r2, #0
 800326c:	2101      	movs	r1, #1
 800326e:	2036      	movs	r0, #54	; 0x36
 8003270:	f000 fd17 	bl	8003ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003274:	2036      	movs	r0, #54	; 0x36
 8003276:	f000 fd30 	bl	8003cda <HAL_NVIC_EnableIRQ>
}
 800327a:	e010      	b.n	800329e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0c      	ldr	r2, [pc, #48]	; (80032b4 <HAL_TIM_Base_MspInit+0x98>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d10b      	bne.n	800329e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003286:	4b09      	ldr	r3, [pc, #36]	; (80032ac <HAL_TIM_Base_MspInit+0x90>)
 8003288:	699b      	ldr	r3, [r3, #24]
 800328a:	4a08      	ldr	r2, [pc, #32]	; (80032ac <HAL_TIM_Base_MspInit+0x90>)
 800328c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003290:	6193      	str	r3, [r2, #24]
 8003292:	4b06      	ldr	r3, [pc, #24]	; (80032ac <HAL_TIM_Base_MspInit+0x90>)
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
}
 800329e:	bf00      	nop
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40012c00 	.word	0x40012c00
 80032ac:	40021000 	.word	0x40021000
 80032b0:	40001000 	.word	0x40001000
 80032b4:	40013400 	.word	0x40013400

080032b8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b090      	sub	sp, #64	; 0x40
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d6:	d14f      	bne.n	8003378 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032d8:	4b68      	ldr	r3, [pc, #416]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80032da:	69db      	ldr	r3, [r3, #28]
 80032dc:	4a67      	ldr	r2, [pc, #412]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80032de:	f043 0301 	orr.w	r3, r3, #1
 80032e2:	61d3      	str	r3, [r2, #28]
 80032e4:	4b65      	ldr	r3, [pc, #404]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ee:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f0:	4b62      	ldr	r3, [pc, #392]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	4a61      	ldr	r2, [pc, #388]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	6193      	str	r3, [r2, #24]
 80032fc:	4b5f      	ldr	r3, [pc, #380]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003308:	4b5c      	ldr	r3, [pc, #368]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	4a5b      	ldr	r2, [pc, #364]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 800330e:	f043 0308 	orr.w	r3, r3, #8
 8003312:	6193      	str	r3, [r2, #24]
 8003314:	4b59      	ldr	r3, [pc, #356]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	623b      	str	r3, [r7, #32]
 800331e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003324:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003326:	2300      	movs	r3, #0
 8003328:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003332:	4619      	mov	r1, r3
 8003334:	4852      	ldr	r0, [pc, #328]	; (8003480 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003336:	f001 f96d 	bl	8004614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800333a:	2308      	movs	r3, #8
 800333c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800333e:	2300      	movs	r3, #0
 8003340:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003346:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800334a:	4619      	mov	r1, r3
 800334c:	484d      	ldr	r0, [pc, #308]	; (8003484 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800334e:	f001 f961 	bl	8004614 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8003352:	4b4d      	ldr	r3, [pc, #308]	; (8003488 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800335e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003362:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003366:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800336a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003370:	4a45      	ldr	r2, [pc, #276]	; (8003488 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003374:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003376:	e07c      	b.n	8003472 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a43      	ldr	r2, [pc, #268]	; (800348c <HAL_TIM_Encoder_MspInit+0x1d4>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d124      	bne.n	80033cc <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003382:	4b3e      	ldr	r3, [pc, #248]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	4a3d      	ldr	r2, [pc, #244]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003388:	f043 0302 	orr.w	r3, r3, #2
 800338c:	61d3      	str	r3, [r2, #28]
 800338e:	4b3b      	ldr	r3, [pc, #236]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	61fb      	str	r3, [r7, #28]
 8003398:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800339a:	4b38      	ldr	r3, [pc, #224]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	4a37      	ldr	r2, [pc, #220]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80033a0:	f043 0304 	orr.w	r3, r3, #4
 80033a4:	6193      	str	r3, [r2, #24]
 80033a6:	4b35      	ldr	r3, [pc, #212]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	61bb      	str	r3, [r7, #24]
 80033b0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033b2:	23c0      	movs	r3, #192	; 0xc0
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033b6:	2300      	movs	r3, #0
 80033b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ba:	2300      	movs	r3, #0
 80033bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033c2:	4619      	mov	r1, r3
 80033c4:	482e      	ldr	r0, [pc, #184]	; (8003480 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80033c6:	f001 f925 	bl	8004614 <HAL_GPIO_Init>
}
 80033ca:	e052      	b.n	8003472 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a2f      	ldr	r2, [pc, #188]	; (8003490 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d124      	bne.n	8003420 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033d6:	4b29      	ldr	r3, [pc, #164]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	4a28      	ldr	r2, [pc, #160]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80033dc:	f043 0304 	orr.w	r3, r3, #4
 80033e0:	61d3      	str	r3, [r2, #28]
 80033e2:	4b26      	ldr	r3, [pc, #152]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f003 0304 	and.w	r3, r3, #4
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ee:	4b23      	ldr	r3, [pc, #140]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	4a22      	ldr	r2, [pc, #136]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80033f4:	f043 0308 	orr.w	r3, r3, #8
 80033f8:	6193      	str	r3, [r2, #24]
 80033fa:	4b20      	ldr	r3, [pc, #128]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	f003 0308 	and.w	r3, r3, #8
 8003402:	613b      	str	r3, [r7, #16]
 8003404:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003406:	23c0      	movs	r3, #192	; 0xc0
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800340a:	2300      	movs	r3, #0
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003412:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003416:	4619      	mov	r1, r3
 8003418:	481a      	ldr	r0, [pc, #104]	; (8003484 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800341a:	f001 f8fb 	bl	8004614 <HAL_GPIO_Init>
}
 800341e:	e028      	b.n	8003472 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1b      	ldr	r2, [pc, #108]	; (8003494 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d123      	bne.n	8003472 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800342a:	4b14      	ldr	r3, [pc, #80]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	4a13      	ldr	r2, [pc, #76]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003430:	f043 0308 	orr.w	r3, r3, #8
 8003434:	61d3      	str	r3, [r2, #28]
 8003436:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003442:	4b0e      	ldr	r3, [pc, #56]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	4a0d      	ldr	r2, [pc, #52]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003448:	f043 0304 	orr.w	r3, r3, #4
 800344c:	6193      	str	r3, [r2, #24]
 800344e:	4b0b      	ldr	r3, [pc, #44]	; (800347c <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	60bb      	str	r3, [r7, #8]
 8003458:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800345a:	2303      	movs	r3, #3
 800345c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800345e:	2300      	movs	r3, #0
 8003460:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800346a:	4619      	mov	r1, r3
 800346c:	4804      	ldr	r0, [pc, #16]	; (8003480 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800346e:	f001 f8d1 	bl	8004614 <HAL_GPIO_Init>
}
 8003472:	bf00      	nop
 8003474:	3740      	adds	r7, #64	; 0x40
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
 8003480:	40010800 	.word	0x40010800
 8003484:	40010c00 	.word	0x40010c00
 8003488:	40010000 	.word	0x40010000
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800
 8003494:	40000c00 	.word	0x40000c00

08003498 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b088      	sub	sp, #32
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a0:	f107 0310 	add.w	r3, r7, #16
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1f      	ldr	r2, [pc, #124]	; (8003530 <HAL_TIM_MspPostInit+0x98>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d119      	bne.n	80034ec <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b8:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <HAL_TIM_MspPostInit+0x9c>)
 80034ba:	699b      	ldr	r3, [r3, #24]
 80034bc:	4a1d      	ldr	r2, [pc, #116]	; (8003534 <HAL_TIM_MspPostInit+0x9c>)
 80034be:	f043 0304 	orr.w	r3, r3, #4
 80034c2:	6193      	str	r3, [r2, #24]
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <HAL_TIM_MspPostInit+0x9c>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 80034d0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80034d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d6:	2302      	movs	r3, #2
 80034d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034da:	2302      	movs	r3, #2
 80034dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034de:	f107 0310 	add.w	r3, r7, #16
 80034e2:	4619      	mov	r1, r3
 80034e4:	4814      	ldr	r0, [pc, #80]	; (8003538 <HAL_TIM_MspPostInit+0xa0>)
 80034e6:	f001 f895 	bl	8004614 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80034ea:	e01d      	b.n	8003528 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a12      	ldr	r2, [pc, #72]	; (800353c <HAL_TIM_MspPostInit+0xa4>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d118      	bne.n	8003528 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034f6:	4b0f      	ldr	r3, [pc, #60]	; (8003534 <HAL_TIM_MspPostInit+0x9c>)
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	4a0e      	ldr	r2, [pc, #56]	; (8003534 <HAL_TIM_MspPostInit+0x9c>)
 80034fc:	f043 0310 	orr.w	r3, r3, #16
 8003500:	6193      	str	r3, [r2, #24]
 8003502:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <HAL_TIM_MspPostInit+0x9c>)
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800350e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003514:	2302      	movs	r3, #2
 8003516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003518:	2302      	movs	r3, #2
 800351a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800351c:	f107 0310 	add.w	r3, r7, #16
 8003520:	4619      	mov	r1, r3
 8003522:	4807      	ldr	r0, [pc, #28]	; (8003540 <HAL_TIM_MspPostInit+0xa8>)
 8003524:	f001 f876 	bl	8004614 <HAL_GPIO_Init>
}
 8003528:	bf00      	nop
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	40012c00 	.word	0x40012c00
 8003534:	40021000 	.word	0x40021000
 8003538:	40010800 	.word	0x40010800
 800353c:	40013400 	.word	0x40013400
 8003540:	40011000 	.word	0x40011000

08003544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08c      	sub	sp, #48	; 0x30
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 031c 	add.w	r3, r7, #28
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6a      	ldr	r2, [pc, #424]	; (8003708 <HAL_UART_MspInit+0x1c4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d156      	bne.n	8003612 <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003564:	4b69      	ldr	r3, [pc, #420]	; (800370c <HAL_UART_MspInit+0x1c8>)
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	4a68      	ldr	r2, [pc, #416]	; (800370c <HAL_UART_MspInit+0x1c8>)
 800356a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800356e:	61d3      	str	r3, [r2, #28]
 8003570:	4b66      	ldr	r3, [pc, #408]	; (800370c <HAL_UART_MspInit+0x1c8>)
 8003572:	69db      	ldr	r3, [r3, #28]
 8003574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357c:	4b63      	ldr	r3, [pc, #396]	; (800370c <HAL_UART_MspInit+0x1c8>)
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	4a62      	ldr	r2, [pc, #392]	; (800370c <HAL_UART_MspInit+0x1c8>)
 8003582:	f043 0304 	orr.w	r3, r3, #4
 8003586:	6193      	str	r3, [r2, #24]
 8003588:	4b60      	ldr	r3, [pc, #384]	; (800370c <HAL_UART_MspInit+0x1c8>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8003594:	2304      	movs	r3, #4
 8003596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003598:	2302      	movs	r3, #2
 800359a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800359c:	2303      	movs	r3, #3
 800359e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 80035a0:	f107 031c 	add.w	r3, r7, #28
 80035a4:	4619      	mov	r1, r3
 80035a6:	485a      	ldr	r0, [pc, #360]	; (8003710 <HAL_UART_MspInit+0x1cc>)
 80035a8:	f001 f834 	bl	8004614 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 80035ac:	2308      	movs	r3, #8
 80035ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035b0:	2300      	movs	r3, #0
 80035b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035b4:	2300      	movs	r3, #0
 80035b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 80035b8:	f107 031c 	add.w	r3, r7, #28
 80035bc:	4619      	mov	r1, r3
 80035be:	4854      	ldr	r0, [pc, #336]	; (8003710 <HAL_UART_MspInit+0x1cc>)
 80035c0:	f001 f828 	bl	8004614 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80035c4:	4b53      	ldr	r3, [pc, #332]	; (8003714 <HAL_UART_MspInit+0x1d0>)
 80035c6:	4a54      	ldr	r2, [pc, #336]	; (8003718 <HAL_UART_MspInit+0x1d4>)
 80035c8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035ca:	4b52      	ldr	r3, [pc, #328]	; (8003714 <HAL_UART_MspInit+0x1d0>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035d0:	4b50      	ldr	r3, [pc, #320]	; (8003714 <HAL_UART_MspInit+0x1d0>)
 80035d2:	2200      	movs	r2, #0
 80035d4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035d6:	4b4f      	ldr	r3, [pc, #316]	; (8003714 <HAL_UART_MspInit+0x1d0>)
 80035d8:	2280      	movs	r2, #128	; 0x80
 80035da:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035dc:	4b4d      	ldr	r3, [pc, #308]	; (8003714 <HAL_UART_MspInit+0x1d0>)
 80035de:	2200      	movs	r2, #0
 80035e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035e2:	4b4c      	ldr	r3, [pc, #304]	; (8003714 <HAL_UART_MspInit+0x1d0>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80035e8:	4b4a      	ldr	r3, [pc, #296]	; (8003714 <HAL_UART_MspInit+0x1d0>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035ee:	4b49      	ldr	r3, [pc, #292]	; (8003714 <HAL_UART_MspInit+0x1d0>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80035f4:	4847      	ldr	r0, [pc, #284]	; (8003714 <HAL_UART_MspInit+0x1d0>)
 80035f6:	f000 fb8b 	bl	8003d10 <HAL_DMA_Init>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003600:	f7ff fd84 	bl	800310c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a43      	ldr	r2, [pc, #268]	; (8003714 <HAL_UART_MspInit+0x1d0>)
 8003608:	639a      	str	r2, [r3, #56]	; 0x38
 800360a:	4a42      	ldr	r2, [pc, #264]	; (8003714 <HAL_UART_MspInit+0x1d0>)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003610:	e076      	b.n	8003700 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a41      	ldr	r2, [pc, #260]	; (800371c <HAL_UART_MspInit+0x1d8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d171      	bne.n	8003700 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 800361c:	4b3b      	ldr	r3, [pc, #236]	; (800370c <HAL_UART_MspInit+0x1c8>)
 800361e:	69db      	ldr	r3, [r3, #28]
 8003620:	4a3a      	ldr	r2, [pc, #232]	; (800370c <HAL_UART_MspInit+0x1c8>)
 8003622:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003626:	61d3      	str	r3, [r2, #28]
 8003628:	4b38      	ldr	r3, [pc, #224]	; (800370c <HAL_UART_MspInit+0x1c8>)
 800362a:	69db      	ldr	r3, [r3, #28]
 800362c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003634:	4b35      	ldr	r3, [pc, #212]	; (800370c <HAL_UART_MspInit+0x1c8>)
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	4a34      	ldr	r2, [pc, #208]	; (800370c <HAL_UART_MspInit+0x1c8>)
 800363a:	f043 0310 	orr.w	r3, r3, #16
 800363e:	6193      	str	r3, [r2, #24]
 8003640:	4b32      	ldr	r3, [pc, #200]	; (800370c <HAL_UART_MspInit+0x1c8>)
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 800364c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003652:	2302      	movs	r3, #2
 8003654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003656:	2303      	movs	r3, #3
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 800365a:	f107 031c 	add.w	r3, r7, #28
 800365e:	4619      	mov	r1, r3
 8003660:	482f      	ldr	r0, [pc, #188]	; (8003720 <HAL_UART_MspInit+0x1dc>)
 8003662:	f000 ffd7 	bl	8004614 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 8003666:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800366a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800366c:	2300      	movs	r3, #0
 800366e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	2300      	movs	r3, #0
 8003672:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8003674:	f107 031c 	add.w	r3, r7, #28
 8003678:	4619      	mov	r1, r3
 800367a:	4829      	ldr	r0, [pc, #164]	; (8003720 <HAL_UART_MspInit+0x1dc>)
 800367c:	f000 ffca 	bl	8004614 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <HAL_UART_MspInit+0x1e0>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003688:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800368e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003690:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003698:	f043 0310 	orr.w	r3, r3, #16
 800369c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800369e:	4a21      	ldr	r2, [pc, #132]	; (8003724 <HAL_UART_MspInit+0x1e0>)
 80036a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a2:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80036a4:	4b20      	ldr	r3, [pc, #128]	; (8003728 <HAL_UART_MspInit+0x1e4>)
 80036a6:	4a21      	ldr	r2, [pc, #132]	; (800372c <HAL_UART_MspInit+0x1e8>)
 80036a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036aa:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <HAL_UART_MspInit+0x1e4>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036b0:	4b1d      	ldr	r3, [pc, #116]	; (8003728 <HAL_UART_MspInit+0x1e4>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036b6:	4b1c      	ldr	r3, [pc, #112]	; (8003728 <HAL_UART_MspInit+0x1e4>)
 80036b8:	2280      	movs	r2, #128	; 0x80
 80036ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036bc:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <HAL_UART_MspInit+0x1e4>)
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036c2:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_UART_MspInit+0x1e4>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80036c8:	4b17      	ldr	r3, [pc, #92]	; (8003728 <HAL_UART_MspInit+0x1e4>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036ce:	4b16      	ldr	r3, [pc, #88]	; (8003728 <HAL_UART_MspInit+0x1e4>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80036d4:	4814      	ldr	r0, [pc, #80]	; (8003728 <HAL_UART_MspInit+0x1e4>)
 80036d6:	f000 fb1b 	bl	8003d10 <HAL_DMA_Init>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80036e0:	f7ff fd14 	bl	800310c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a10      	ldr	r2, [pc, #64]	; (8003728 <HAL_UART_MspInit+0x1e4>)
 80036e8:	639a      	str	r2, [r3, #56]	; 0x38
 80036ea:	4a0f      	ldr	r2, [pc, #60]	; (8003728 <HAL_UART_MspInit+0x1e4>)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 80036f0:	2200      	movs	r2, #0
 80036f2:	2102      	movs	r1, #2
 80036f4:	2027      	movs	r0, #39	; 0x27
 80036f6:	f000 fad4 	bl	8003ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036fa:	2027      	movs	r0, #39	; 0x27
 80036fc:	f000 faed 	bl	8003cda <HAL_NVIC_EnableIRQ>
}
 8003700:	bf00      	nop
 8003702:	3730      	adds	r7, #48	; 0x30
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	40004400 	.word	0x40004400
 800370c:	40021000 	.word	0x40021000
 8003710:	40010800 	.word	0x40010800
 8003714:	20000904 	.word	0x20000904
 8003718:	4002006c 	.word	0x4002006c
 800371c:	40004800 	.word	0x40004800
 8003720:	40011000 	.word	0x40011000
 8003724:	40010000 	.word	0x40010000
 8003728:	20000948 	.word	0x20000948
 800372c:	40020030 	.word	0x40020030

08003730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003734:	e7fe      	b.n	8003734 <NMI_Handler+0x4>

08003736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003736:	b480      	push	{r7}
 8003738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800373a:	e7fe      	b.n	800373a <HardFault_Handler+0x4>

0800373c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003740:	e7fe      	b.n	8003740 <MemManage_Handler+0x4>

08003742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003746:	e7fe      	b.n	8003746 <BusFault_Handler+0x4>

08003748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800374c:	e7fe      	b.n	800374c <UsageFault_Handler+0x4>

0800374e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800374e:	b480      	push	{r7}
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	46bd      	mov	sp, r7
 8003756:	bc80      	pop	{r7}
 8003758:	4770      	bx	lr

0800375a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003776:	f000 f97d 	bl	8003a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003784:	4802      	ldr	r0, [pc, #8]	; (8003790 <DMA1_Channel3_IRQHandler+0x10>)
 8003786:	f000 fcdb 	bl	8004140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000948 	.word	0x20000948

08003794 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if (hxb.nextPackageID == 0x00)
 8003798:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <DMA1_Channel6_IRQHandler+0x24>)
 800379a:	7a1b      	ldrb	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <DMA1_Channel6_IRQHandler+0x14>
		huansic_xb_decodeHeader(&hxb);
 80037a0:	4805      	ldr	r0, [pc, #20]	; (80037b8 <DMA1_Channel6_IRQHandler+0x24>)
 80037a2:	f7fe f9e9 	bl	8001b78 <huansic_xb_decodeHeader>
 80037a6:	e002      	b.n	80037ae <DMA1_Channel6_IRQHandler+0x1a>
	else
		huansic_xb_decodeBody(&hxb);
 80037a8:	4803      	ldr	r0, [pc, #12]	; (80037b8 <DMA1_Channel6_IRQHandler+0x24>)
 80037aa:	f7fe fa23 	bl	8001bf4 <huansic_xb_decodeBody>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80037ae:	4803      	ldr	r0, [pc, #12]	; (80037bc <DMA1_Channel6_IRQHandler+0x28>)
 80037b0:	f000 fcc6 	bl	8004140 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80037b4:	bf00      	nop
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20000ad4 	.word	0x20000ad4
 80037bc:	20000904 	.word	0x20000904

080037c0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80037c4:	4802      	ldr	r0, [pc, #8]	; (80037d0 <USART3_IRQHandler+0x10>)
 80037c6:	f003 f8c9 	bl	800695c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80037ca:	bf00      	nop
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	200008c0 	.word	0x200008c0

080037d4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 80037d8:	4808      	ldr	r0, [pc, #32]	; (80037fc <TIM6_IRQHandler+0x28>)
 80037da:	f7fe f883 	bl	80018e4 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 80037de:	4808      	ldr	r0, [pc, #32]	; (8003800 <TIM6_IRQHandler+0x2c>)
 80037e0:	f7fe f880 	bl	80018e4 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 80037e4:	4807      	ldr	r0, [pc, #28]	; (8003804 <TIM6_IRQHandler+0x30>)
 80037e6:	f7fe f87d 	bl	80018e4 <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 80037ea:	4807      	ldr	r0, [pc, #28]	; (8003808 <TIM6_IRQHandler+0x34>)
 80037ec:	f7fe f87a 	bl	80018e4 <huansic_motor_pid>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80037f0:	4806      	ldr	r0, [pc, #24]	; (800380c <TIM6_IRQHandler+0x38>)
 80037f2:	f002 f90d 	bl	8005a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	2000098c 	.word	0x2000098c
 8003800:	200009c8 	.word	0x200009c8
 8003804:	20000a04 	.word	0x20000a04
 8003808:	20000a40 	.word	0x20000a40
 800380c:	200007ec 	.word	0x200007ec

08003810 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
	return 1;
 8003814:	2301      	movs	r3, #1
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr

0800381e <_kill>:

int _kill(int pid, int sig)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b082      	sub	sp, #8
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
 8003826:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003828:	f003 fe08 	bl	800743c <__errno>
 800382c:	4603      	mov	r3, r0
 800382e:	2216      	movs	r2, #22
 8003830:	601a      	str	r2, [r3, #0]
	return -1;
 8003832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <_exit>:

void _exit (int status)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b082      	sub	sp, #8
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003846:	f04f 31ff 	mov.w	r1, #4294967295
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7ff ffe7 	bl	800381e <_kill>
	while (1) {}		/* Make sure we hang here */
 8003850:	e7fe      	b.n	8003850 <_exit+0x12>

08003852 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b086      	sub	sp, #24
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	e00a      	b.n	800387a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003864:	f3af 8000 	nop.w
 8003868:	4601      	mov	r1, r0
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	60ba      	str	r2, [r7, #8]
 8003870:	b2ca      	uxtb	r2, r1
 8003872:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	3301      	adds	r3, #1
 8003878:	617b      	str	r3, [r7, #20]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	429a      	cmp	r2, r3
 8003880:	dbf0      	blt.n	8003864 <_read+0x12>
	}

return len;
 8003882:	687b      	ldr	r3, [r7, #4]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e009      	b.n	80038b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	60ba      	str	r2, [r7, #8]
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	3301      	adds	r3, #1
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	dbf1      	blt.n	800389e <_write+0x12>
	}
	return len;
 80038ba:	687b      	ldr	r3, [r7, #4]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3718      	adds	r7, #24
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <_close>:

int _close(int file)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	return -1;
 80038cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
 80038e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038ea:	605a      	str	r2, [r3, #4]
	return 0;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <_isatty>:

int _isatty(int file)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
	return 1;
 8003900:	2301      	movs	r3, #1
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr

0800390c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
	return 0;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	bc80      	pop	{r7}
 8003922:	4770      	bx	lr

08003924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800392c:	4a14      	ldr	r2, [pc, #80]	; (8003980 <_sbrk+0x5c>)
 800392e:	4b15      	ldr	r3, [pc, #84]	; (8003984 <_sbrk+0x60>)
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003938:	4b13      	ldr	r3, [pc, #76]	; (8003988 <_sbrk+0x64>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d102      	bne.n	8003946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003940:	4b11      	ldr	r3, [pc, #68]	; (8003988 <_sbrk+0x64>)
 8003942:	4a12      	ldr	r2, [pc, #72]	; (800398c <_sbrk+0x68>)
 8003944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003946:	4b10      	ldr	r3, [pc, #64]	; (8003988 <_sbrk+0x64>)
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4413      	add	r3, r2
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	429a      	cmp	r2, r3
 8003952:	d207      	bcs.n	8003964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003954:	f003 fd72 	bl	800743c <__errno>
 8003958:	4603      	mov	r3, r0
 800395a:	220c      	movs	r2, #12
 800395c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800395e:	f04f 33ff 	mov.w	r3, #4294967295
 8003962:	e009      	b.n	8003978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003964:	4b08      	ldr	r3, [pc, #32]	; (8003988 <_sbrk+0x64>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800396a:	4b07      	ldr	r3, [pc, #28]	; (8003988 <_sbrk+0x64>)
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4413      	add	r3, r2
 8003972:	4a05      	ldr	r2, [pc, #20]	; (8003988 <_sbrk+0x64>)
 8003974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003976:	68fb      	ldr	r3, [r7, #12]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	2000c000 	.word	0x2000c000
 8003984:	00000400 	.word	0x00000400
 8003988:	20000bd4 	.word	0x20000bd4
 800398c:	20000bf0 	.word	0x20000bf0

08003990 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003994:	bf00      	nop
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr

0800399c <Reset_Handler>:
 800399c:	480c      	ldr	r0, [pc, #48]	; (80039d0 <LoopFillZerobss+0x12>)
 800399e:	490d      	ldr	r1, [pc, #52]	; (80039d4 <LoopFillZerobss+0x16>)
 80039a0:	4a0d      	ldr	r2, [pc, #52]	; (80039d8 <LoopFillZerobss+0x1a>)
 80039a2:	2300      	movs	r3, #0
 80039a4:	e002      	b.n	80039ac <LoopCopyDataInit>

080039a6 <CopyDataInit>:
 80039a6:	58d4      	ldr	r4, [r2, r3]
 80039a8:	50c4      	str	r4, [r0, r3]
 80039aa:	3304      	adds	r3, #4

080039ac <LoopCopyDataInit>:
 80039ac:	18c4      	adds	r4, r0, r3
 80039ae:	428c      	cmp	r4, r1
 80039b0:	d3f9      	bcc.n	80039a6 <CopyDataInit>
 80039b2:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <LoopFillZerobss+0x1e>)
 80039b4:	4c0a      	ldr	r4, [pc, #40]	; (80039e0 <LoopFillZerobss+0x22>)
 80039b6:	2300      	movs	r3, #0
 80039b8:	e001      	b.n	80039be <LoopFillZerobss>

080039ba <FillZerobss>:
 80039ba:	6013      	str	r3, [r2, #0]
 80039bc:	3204      	adds	r2, #4

080039be <LoopFillZerobss>:
 80039be:	42a2      	cmp	r2, r4
 80039c0:	d3fb      	bcc.n	80039ba <FillZerobss>
 80039c2:	f7ff ffe5 	bl	8003990 <SystemInit>
 80039c6:	f003 fd51 	bl	800746c <__libc_init_array>
 80039ca:	f7fe fdbf 	bl	800254c <main>
 80039ce:	4770      	bx	lr
 80039d0:	20000000 	.word	0x20000000
 80039d4:	20000074 	.word	0x20000074
 80039d8:	08008628 	.word	0x08008628
 80039dc:	20000074 	.word	0x20000074
 80039e0:	20000bec 	.word	0x20000bec

080039e4 <ADC1_2_IRQHandler>:
 80039e4:	e7fe      	b.n	80039e4 <ADC1_2_IRQHandler>
	...

080039e8 <HAL_Init>:
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <HAL_Init+0x28>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a07      	ldr	r2, [pc, #28]	; (8003a10 <HAL_Init+0x28>)
 80039f2:	f043 0310 	orr.w	r3, r3, #16
 80039f6:	6013      	str	r3, [r2, #0]
 80039f8:	2003      	movs	r0, #3
 80039fa:	f000 f947 	bl	8003c8c <HAL_NVIC_SetPriorityGrouping>
 80039fe:	200f      	movs	r0, #15
 8003a00:	f000 f808 	bl	8003a14 <HAL_InitTick>
 8003a04:	f7ff fb88 	bl	8003118 <HAL_MspInit>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	bf00      	nop
 8003a10:	40022000 	.word	0x40022000

08003a14 <HAL_InitTick>:
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <HAL_InitTick+0x54>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <HAL_InitTick+0x58>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	4619      	mov	r1, r3
 8003a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f95f 	bl	8003cf6 <HAL_SYSTICK_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <HAL_InitTick+0x2e>
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e00e      	b.n	8003a60 <HAL_InitTick+0x4c>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b0f      	cmp	r3, #15
 8003a46:	d80a      	bhi.n	8003a5e <HAL_InitTick+0x4a>
 8003a48:	2200      	movs	r2, #0
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	f000 f927 	bl	8003ca2 <HAL_NVIC_SetPriority>
 8003a54:	4a06      	ldr	r2, [pc, #24]	; (8003a70 <HAL_InitTick+0x5c>)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	e000      	b.n	8003a60 <HAL_InitTick+0x4c>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	4618      	mov	r0, r3
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	20000004 	.word	0x20000004
 8003a6c:	2000000c 	.word	0x2000000c
 8003a70:	20000008 	.word	0x20000008

08003a74 <HAL_IncTick>:
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <HAL_IncTick+0x1c>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_IncTick+0x20>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4413      	add	r3, r2
 8003a84:	4a03      	ldr	r2, [pc, #12]	; (8003a94 <HAL_IncTick+0x20>)
 8003a86:	6013      	str	r3, [r2, #0]
 8003a88:	bf00      	nop
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr
 8003a90:	2000000c 	.word	0x2000000c
 8003a94:	20000bd8 	.word	0x20000bd8

08003a98 <HAL_GetTick>:
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	4b02      	ldr	r3, [pc, #8]	; (8003aa8 <HAL_GetTick+0x10>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr
 8003aa8:	20000bd8 	.word	0x20000bd8

08003aac <HAL_Delay>:
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	f7ff fff0 	bl	8003a98 <HAL_GetTick>
 8003ab8:	60b8      	str	r0, [r7, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	60fb      	str	r3, [r7, #12]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac4:	d005      	beq.n	8003ad2 <HAL_Delay+0x26>
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	; (8003af0 <HAL_Delay+0x44>)
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	461a      	mov	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	4413      	add	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	bf00      	nop
 8003ad4:	f7ff ffe0 	bl	8003a98 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d8f7      	bhi.n	8003ad4 <HAL_Delay+0x28>
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	2000000c 	.word	0x2000000c

08003af4 <__NVIC_SetPriorityGrouping>:
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	4b0c      	ldr	r3, [pc, #48]	; (8003b38 <__NVIC_SetPriorityGrouping+0x44>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b10:	4013      	ands	r3, r2
 8003b12:	60bb      	str	r3, [r7, #8]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	021a      	lsls	r2, r3, #8
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	4a04      	ldr	r2, [pc, #16]	; (8003b38 <__NVIC_SetPriorityGrouping+0x44>)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	60d3      	str	r3, [r2, #12]
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	e000ed00 	.word	0xe000ed00

08003b3c <__NVIC_GetPriorityGrouping>:
 8003b3c:	b480      	push	{r7}
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	4b04      	ldr	r3, [pc, #16]	; (8003b54 <__NVIC_GetPriorityGrouping+0x18>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	0a1b      	lsrs	r3, r3, #8
 8003b46:	f003 0307 	and.w	r3, r3, #7
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <__NVIC_EnableIRQ>:
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	4603      	mov	r3, r0
 8003b60:	71fb      	strb	r3, [r7, #7]
 8003b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	db0b      	blt.n	8003b82 <__NVIC_EnableIRQ+0x2a>
 8003b6a:	79fb      	ldrb	r3, [r7, #7]
 8003b6c:	f003 021f 	and.w	r2, r3, #31
 8003b70:	4906      	ldr	r1, [pc, #24]	; (8003b8c <__NVIC_EnableIRQ+0x34>)
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	095b      	lsrs	r3, r3, #5
 8003b78:	2001      	movs	r0, #1
 8003b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	370c      	adds	r7, #12
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr
 8003b8c:	e000e100 	.word	0xe000e100

08003b90 <__NVIC_SetPriority>:
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	4603      	mov	r3, r0
 8003b98:	6039      	str	r1, [r7, #0]
 8003b9a:	71fb      	strb	r3, [r7, #7]
 8003b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	db0a      	blt.n	8003bba <__NVIC_SetPriority+0x2a>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	490c      	ldr	r1, [pc, #48]	; (8003bdc <__NVIC_SetPriority+0x4c>)
 8003baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bae:	0112      	lsls	r2, r2, #4
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003bb8:	e00a      	b.n	8003bd0 <__NVIC_SetPriority+0x40>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	4908      	ldr	r1, [pc, #32]	; (8003be0 <__NVIC_SetPriority+0x50>)
 8003bc0:	79fb      	ldrb	r3, [r7, #7]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	3b04      	subs	r3, #4
 8003bc8:	0112      	lsls	r2, r2, #4
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	440b      	add	r3, r1
 8003bce:	761a      	strb	r2, [r3, #24]
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bc80      	pop	{r7}
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	e000e100 	.word	0xe000e100
 8003be0:	e000ed00 	.word	0xe000ed00

08003be4 <NVIC_EncodePriority>:
 8003be4:	b480      	push	{r7}
 8003be6:	b089      	sub	sp, #36	; 0x24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	61fb      	str	r3, [r7, #28]
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	f1c3 0307 	rsb	r3, r3, #7
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	bf28      	it	cs
 8003c02:	2304      	movcs	r3, #4
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	2b06      	cmp	r3, #6
 8003c0c:	d902      	bls.n	8003c14 <NVIC_EncodePriority+0x30>
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	3b03      	subs	r3, #3
 8003c12:	e000      	b.n	8003c16 <NVIC_EncodePriority+0x32>
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
 8003c18:	f04f 32ff 	mov.w	r2, #4294967295
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c22:	43da      	mvns	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	401a      	ands	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	409a      	lsls	r2, r3
 8003c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	fa01 f303 	lsl.w	r3, r1, r3
 8003c36:	43d9      	mvns	r1, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	400b      	ands	r3, r1
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3724      	adds	r7, #36	; 0x24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <SysTick_Config>:
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c58:	d301      	bcc.n	8003c5e <SysTick_Config+0x16>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e00f      	b.n	8003c7e <SysTick_Config+0x36>
 8003c5e:	4a0a      	ldr	r2, [pc, #40]	; (8003c88 <SysTick_Config+0x40>)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3b01      	subs	r3, #1
 8003c64:	6053      	str	r3, [r2, #4]
 8003c66:	210f      	movs	r1, #15
 8003c68:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6c:	f7ff ff90 	bl	8003b90 <__NVIC_SetPriority>
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <SysTick_Config+0x40>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	609a      	str	r2, [r3, #8]
 8003c76:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <SysTick_Config+0x40>)
 8003c78:	2207      	movs	r2, #7
 8003c7a:	601a      	str	r2, [r3, #0]
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	e000e010 	.word	0xe000e010

08003c8c <HAL_NVIC_SetPriorityGrouping>:
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff ff2d 	bl	8003af4 <__NVIC_SetPriorityGrouping>
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_NVIC_SetPriority>:
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b086      	sub	sp, #24
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	4603      	mov	r3, r0
 8003caa:	60b9      	str	r1, [r7, #8]
 8003cac:	607a      	str	r2, [r7, #4]
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	f7ff ff42 	bl	8003b3c <__NVIC_GetPriorityGrouping>
 8003cb8:	6178      	str	r0, [r7, #20]
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	6978      	ldr	r0, [r7, #20]
 8003cc0:	f7ff ff90 	bl	8003be4 <NVIC_EncodePriority>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff ff5f 	bl	8003b90 <__NVIC_SetPriority>
 8003cd2:	bf00      	nop
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_NVIC_EnableIRQ>:
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	71fb      	strb	r3, [r7, #7]
 8003ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff ff35 	bl	8003b58 <__NVIC_EnableIRQ>
 8003cee:	bf00      	nop
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_SYSTICK_Config>:
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff ffa2 	bl	8003c48 <SysTick_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	4618      	mov	r0, r3
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <HAL_DMA_Init>:
 8003d10:	b480      	push	{r7}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_DMA_Init+0x16>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e059      	b.n	8003dda <HAL_DMA_Init+0xca>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	4b2d      	ldr	r3, [pc, #180]	; (8003de4 <HAL_DMA_Init+0xd4>)
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d80f      	bhi.n	8003d52 <HAL_DMA_Init+0x42>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <HAL_DMA_Init+0xd8>)
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4a2b      	ldr	r2, [pc, #172]	; (8003dec <HAL_DMA_Init+0xdc>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	009a      	lsls	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a28      	ldr	r2, [pc, #160]	; (8003df0 <HAL_DMA_Init+0xe0>)
 8003d4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d50:	e00e      	b.n	8003d70 <HAL_DMA_Init+0x60>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	4b26      	ldr	r3, [pc, #152]	; (8003df4 <HAL_DMA_Init+0xe4>)
 8003d5a:	4413      	add	r3, r2
 8003d5c:	4a23      	ldr	r2, [pc, #140]	; (8003dec <HAL_DMA_Init+0xdc>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	091b      	lsrs	r3, r3, #4
 8003d64:	009a      	lsls	r2, r3, #2
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <HAL_DMA_Init+0xe8>)
 8003d6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	60fb      	str	r3, [r7, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d86:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d8a:	60fb      	str	r3, [r7, #12]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	431a      	orrs	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60fb      	str	r3, [r7, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2020 	strb.w	r2, [r3, #32]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3714      	adds	r7, #20
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bc80      	pop	{r7}
 8003de2:	4770      	bx	lr
 8003de4:	40020407 	.word	0x40020407
 8003de8:	bffdfff8 	.word	0xbffdfff8
 8003dec:	cccccccd 	.word	0xcccccccd
 8003df0:	40020000 	.word	0x40020000
 8003df4:	bffdfbf8 	.word	0xbffdfbf8
 8003df8:	40020400 	.word	0x40020400

08003dfc <HAL_DMA_Start_IT>:
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d101      	bne.n	8003e1c <HAL_DMA_Start_IT+0x20>
 8003e18:	2302      	movs	r3, #2
 8003e1a:	e04a      	b.n	8003eb2 <HAL_DMA_Start_IT+0xb6>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2020 	strb.w	r2, [r3, #32]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d13a      	bne.n	8003ea4 <HAL_DMA_Start_IT+0xa8>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2202      	movs	r2, #2
 8003e32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f022 0201 	bic.w	r2, r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	68b9      	ldr	r1, [r7, #8]
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 fbb0 	bl	80045b8 <DMA_SetConfig>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_DMA_Start_IT+0x76>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 020e 	orr.w	r2, r2, #14
 8003e6e:	601a      	str	r2, [r3, #0]
 8003e70:	e00f      	b.n	8003e92 <HAL_DMA_Start_IT+0x96>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0204 	bic.w	r2, r2, #4
 8003e80:	601a      	str	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f042 020a 	orr.w	r2, r2, #10
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f042 0201 	orr.w	r2, r2, #1
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	e005      	b.n	8003eb0 <HAL_DMA_Start_IT+0xb4>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2020 	strb.w	r2, [r3, #32]
 8003eac:	2302      	movs	r3, #2
 8003eae:	75fb      	strb	r3, [r7, #23]
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3718      	adds	r7, #24
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <HAL_DMA_Abort>:
 8003eba:	b480      	push	{r7}
 8003ebc:	b085      	sub	sp, #20
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d008      	beq.n	8003ee2 <HAL_DMA_Abort+0x28>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2204      	movs	r2, #4
 8003ed4:	639a      	str	r2, [r3, #56]	; 0x38
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f883 2020 	strb.w	r2, [r3, #32]
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e020      	b.n	8003f24 <HAL_DMA_Abort+0x6a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 020e 	bic.w	r2, r2, #14
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f022 0201 	bic.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2020 	strb.w	r2, [r3, #32]
 8003f22:	7bfb      	ldrb	r3, [r7, #15]
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
	...

08003f30 <HAL_DMA_Abort_IT>:
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	2300      	movs	r3, #0
 8003f3a:	73fb      	strb	r3, [r7, #15]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d005      	beq.n	8003f52 <HAL_DMA_Abort_IT+0x22>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
 8003f50:	e0d6      	b.n	8004100 <HAL_DMA_Abort_IT+0x1d0>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f022 020e 	bic.w	r2, r2, #14
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0201 	bic.w	r2, r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	4b64      	ldr	r3, [pc, #400]	; (800410c <HAL_DMA_Abort_IT+0x1dc>)
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d958      	bls.n	8004030 <HAL_DMA_Abort_IT+0x100>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a63      	ldr	r2, [pc, #396]	; (8004110 <HAL_DMA_Abort_IT+0x1e0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d04f      	beq.n	8004028 <HAL_DMA_Abort_IT+0xf8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a61      	ldr	r2, [pc, #388]	; (8004114 <HAL_DMA_Abort_IT+0x1e4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d048      	beq.n	8004024 <HAL_DMA_Abort_IT+0xf4>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a60      	ldr	r2, [pc, #384]	; (8004118 <HAL_DMA_Abort_IT+0x1e8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d040      	beq.n	800401e <HAL_DMA_Abort_IT+0xee>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a5e      	ldr	r2, [pc, #376]	; (800411c <HAL_DMA_Abort_IT+0x1ec>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d038      	beq.n	8004018 <HAL_DMA_Abort_IT+0xe8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a5d      	ldr	r2, [pc, #372]	; (8004120 <HAL_DMA_Abort_IT+0x1f0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d030      	beq.n	8004012 <HAL_DMA_Abort_IT+0xe2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a5b      	ldr	r2, [pc, #364]	; (8004124 <HAL_DMA_Abort_IT+0x1f4>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d028      	beq.n	800400c <HAL_DMA_Abort_IT+0xdc>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a53      	ldr	r2, [pc, #332]	; (800410c <HAL_DMA_Abort_IT+0x1dc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d020      	beq.n	8004006 <HAL_DMA_Abort_IT+0xd6>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a57      	ldr	r2, [pc, #348]	; (8004128 <HAL_DMA_Abort_IT+0x1f8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d019      	beq.n	8004002 <HAL_DMA_Abort_IT+0xd2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a56      	ldr	r2, [pc, #344]	; (800412c <HAL_DMA_Abort_IT+0x1fc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d012      	beq.n	8003ffe <HAL_DMA_Abort_IT+0xce>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a54      	ldr	r2, [pc, #336]	; (8004130 <HAL_DMA_Abort_IT+0x200>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_DMA_Abort_IT+0xc8>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a53      	ldr	r2, [pc, #332]	; (8004134 <HAL_DMA_Abort_IT+0x204>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d102      	bne.n	8003ff2 <HAL_DMA_Abort_IT+0xc2>
 8003fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ff0:	e01b      	b.n	800402a <HAL_DMA_Abort_IT+0xfa>
 8003ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ff6:	e018      	b.n	800402a <HAL_DMA_Abort_IT+0xfa>
 8003ff8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ffc:	e015      	b.n	800402a <HAL_DMA_Abort_IT+0xfa>
 8003ffe:	2310      	movs	r3, #16
 8004000:	e013      	b.n	800402a <HAL_DMA_Abort_IT+0xfa>
 8004002:	2301      	movs	r3, #1
 8004004:	e011      	b.n	800402a <HAL_DMA_Abort_IT+0xfa>
 8004006:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800400a:	e00e      	b.n	800402a <HAL_DMA_Abort_IT+0xfa>
 800400c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004010:	e00b      	b.n	800402a <HAL_DMA_Abort_IT+0xfa>
 8004012:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004016:	e008      	b.n	800402a <HAL_DMA_Abort_IT+0xfa>
 8004018:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800401c:	e005      	b.n	800402a <HAL_DMA_Abort_IT+0xfa>
 800401e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004022:	e002      	b.n	800402a <HAL_DMA_Abort_IT+0xfa>
 8004024:	2310      	movs	r3, #16
 8004026:	e000      	b.n	800402a <HAL_DMA_Abort_IT+0xfa>
 8004028:	2301      	movs	r3, #1
 800402a:	4a43      	ldr	r2, [pc, #268]	; (8004138 <HAL_DMA_Abort_IT+0x208>)
 800402c:	6053      	str	r3, [r2, #4]
 800402e:	e057      	b.n	80040e0 <HAL_DMA_Abort_IT+0x1b0>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a36      	ldr	r2, [pc, #216]	; (8004110 <HAL_DMA_Abort_IT+0x1e0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d04f      	beq.n	80040da <HAL_DMA_Abort_IT+0x1aa>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a35      	ldr	r2, [pc, #212]	; (8004114 <HAL_DMA_Abort_IT+0x1e4>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d048      	beq.n	80040d6 <HAL_DMA_Abort_IT+0x1a6>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a33      	ldr	r2, [pc, #204]	; (8004118 <HAL_DMA_Abort_IT+0x1e8>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d040      	beq.n	80040d0 <HAL_DMA_Abort_IT+0x1a0>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a32      	ldr	r2, [pc, #200]	; (800411c <HAL_DMA_Abort_IT+0x1ec>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d038      	beq.n	80040ca <HAL_DMA_Abort_IT+0x19a>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a30      	ldr	r2, [pc, #192]	; (8004120 <HAL_DMA_Abort_IT+0x1f0>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d030      	beq.n	80040c4 <HAL_DMA_Abort_IT+0x194>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a2f      	ldr	r2, [pc, #188]	; (8004124 <HAL_DMA_Abort_IT+0x1f4>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d028      	beq.n	80040be <HAL_DMA_Abort_IT+0x18e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a26      	ldr	r2, [pc, #152]	; (800410c <HAL_DMA_Abort_IT+0x1dc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d020      	beq.n	80040b8 <HAL_DMA_Abort_IT+0x188>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a2b      	ldr	r2, [pc, #172]	; (8004128 <HAL_DMA_Abort_IT+0x1f8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d019      	beq.n	80040b4 <HAL_DMA_Abort_IT+0x184>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a29      	ldr	r2, [pc, #164]	; (800412c <HAL_DMA_Abort_IT+0x1fc>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d012      	beq.n	80040b0 <HAL_DMA_Abort_IT+0x180>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a28      	ldr	r2, [pc, #160]	; (8004130 <HAL_DMA_Abort_IT+0x200>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d00a      	beq.n	80040aa <HAL_DMA_Abort_IT+0x17a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a26      	ldr	r2, [pc, #152]	; (8004134 <HAL_DMA_Abort_IT+0x204>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d102      	bne.n	80040a4 <HAL_DMA_Abort_IT+0x174>
 800409e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040a2:	e01b      	b.n	80040dc <HAL_DMA_Abort_IT+0x1ac>
 80040a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040a8:	e018      	b.n	80040dc <HAL_DMA_Abort_IT+0x1ac>
 80040aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040ae:	e015      	b.n	80040dc <HAL_DMA_Abort_IT+0x1ac>
 80040b0:	2310      	movs	r3, #16
 80040b2:	e013      	b.n	80040dc <HAL_DMA_Abort_IT+0x1ac>
 80040b4:	2301      	movs	r3, #1
 80040b6:	e011      	b.n	80040dc <HAL_DMA_Abort_IT+0x1ac>
 80040b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040bc:	e00e      	b.n	80040dc <HAL_DMA_Abort_IT+0x1ac>
 80040be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80040c2:	e00b      	b.n	80040dc <HAL_DMA_Abort_IT+0x1ac>
 80040c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040c8:	e008      	b.n	80040dc <HAL_DMA_Abort_IT+0x1ac>
 80040ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80040ce:	e005      	b.n	80040dc <HAL_DMA_Abort_IT+0x1ac>
 80040d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80040d4:	e002      	b.n	80040dc <HAL_DMA_Abort_IT+0x1ac>
 80040d6:	2310      	movs	r3, #16
 80040d8:	e000      	b.n	80040dc <HAL_DMA_Abort_IT+0x1ac>
 80040da:	2301      	movs	r3, #1
 80040dc:	4a17      	ldr	r2, [pc, #92]	; (800413c <HAL_DMA_Abort_IT+0x20c>)
 80040de:	6053      	str	r3, [r2, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2020 	strb.w	r2, [r3, #32]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_DMA_Abort_IT+0x1d0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	4798      	blx	r3
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40020080 	.word	0x40020080
 8004110:	40020008 	.word	0x40020008
 8004114:	4002001c 	.word	0x4002001c
 8004118:	40020030 	.word	0x40020030
 800411c:	40020044 	.word	0x40020044
 8004120:	40020058 	.word	0x40020058
 8004124:	4002006c 	.word	0x4002006c
 8004128:	40020408 	.word	0x40020408
 800412c:	4002041c 	.word	0x4002041c
 8004130:	40020430 	.word	0x40020430
 8004134:	40020444 	.word	0x40020444
 8004138:	40020400 	.word	0x40020400
 800413c:	40020000 	.word	0x40020000

08004140 <HAL_DMA_IRQHandler>:
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	2204      	movs	r2, #4
 800415e:	409a      	lsls	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	4013      	ands	r3, r2
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80f1 	beq.w	800434c <HAL_DMA_IRQHandler+0x20c>
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 80eb 	beq.w	800434c <HAL_DMA_IRQHandler+0x20c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0320 	and.w	r3, r3, #32
 8004180:	2b00      	cmp	r3, #0
 8004182:	d107      	bne.n	8004194 <HAL_DMA_IRQHandler+0x54>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0204 	bic.w	r2, r2, #4
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	461a      	mov	r2, r3
 800419a:	4b5f      	ldr	r3, [pc, #380]	; (8004318 <HAL_DMA_IRQHandler+0x1d8>)
 800419c:	429a      	cmp	r2, r3
 800419e:	d958      	bls.n	8004252 <HAL_DMA_IRQHandler+0x112>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a5d      	ldr	r2, [pc, #372]	; (800431c <HAL_DMA_IRQHandler+0x1dc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d04f      	beq.n	800424a <HAL_DMA_IRQHandler+0x10a>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a5c      	ldr	r2, [pc, #368]	; (8004320 <HAL_DMA_IRQHandler+0x1e0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d048      	beq.n	8004246 <HAL_DMA_IRQHandler+0x106>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a5a      	ldr	r2, [pc, #360]	; (8004324 <HAL_DMA_IRQHandler+0x1e4>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d040      	beq.n	8004240 <HAL_DMA_IRQHandler+0x100>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a59      	ldr	r2, [pc, #356]	; (8004328 <HAL_DMA_IRQHandler+0x1e8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d038      	beq.n	800423a <HAL_DMA_IRQHandler+0xfa>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a57      	ldr	r2, [pc, #348]	; (800432c <HAL_DMA_IRQHandler+0x1ec>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d030      	beq.n	8004234 <HAL_DMA_IRQHandler+0xf4>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a56      	ldr	r2, [pc, #344]	; (8004330 <HAL_DMA_IRQHandler+0x1f0>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d028      	beq.n	800422e <HAL_DMA_IRQHandler+0xee>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a4d      	ldr	r2, [pc, #308]	; (8004318 <HAL_DMA_IRQHandler+0x1d8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d020      	beq.n	8004228 <HAL_DMA_IRQHandler+0xe8>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a52      	ldr	r2, [pc, #328]	; (8004334 <HAL_DMA_IRQHandler+0x1f4>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d019      	beq.n	8004224 <HAL_DMA_IRQHandler+0xe4>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a50      	ldr	r2, [pc, #320]	; (8004338 <HAL_DMA_IRQHandler+0x1f8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d012      	beq.n	8004220 <HAL_DMA_IRQHandler+0xe0>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a4f      	ldr	r2, [pc, #316]	; (800433c <HAL_DMA_IRQHandler+0x1fc>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00a      	beq.n	800421a <HAL_DMA_IRQHandler+0xda>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a4d      	ldr	r2, [pc, #308]	; (8004340 <HAL_DMA_IRQHandler+0x200>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d102      	bne.n	8004214 <HAL_DMA_IRQHandler+0xd4>
 800420e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004212:	e01b      	b.n	800424c <HAL_DMA_IRQHandler+0x10c>
 8004214:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004218:	e018      	b.n	800424c <HAL_DMA_IRQHandler+0x10c>
 800421a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800421e:	e015      	b.n	800424c <HAL_DMA_IRQHandler+0x10c>
 8004220:	2340      	movs	r3, #64	; 0x40
 8004222:	e013      	b.n	800424c <HAL_DMA_IRQHandler+0x10c>
 8004224:	2304      	movs	r3, #4
 8004226:	e011      	b.n	800424c <HAL_DMA_IRQHandler+0x10c>
 8004228:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800422c:	e00e      	b.n	800424c <HAL_DMA_IRQHandler+0x10c>
 800422e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004232:	e00b      	b.n	800424c <HAL_DMA_IRQHandler+0x10c>
 8004234:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004238:	e008      	b.n	800424c <HAL_DMA_IRQHandler+0x10c>
 800423a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800423e:	e005      	b.n	800424c <HAL_DMA_IRQHandler+0x10c>
 8004240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004244:	e002      	b.n	800424c <HAL_DMA_IRQHandler+0x10c>
 8004246:	2340      	movs	r3, #64	; 0x40
 8004248:	e000      	b.n	800424c <HAL_DMA_IRQHandler+0x10c>
 800424a:	2304      	movs	r3, #4
 800424c:	4a3d      	ldr	r2, [pc, #244]	; (8004344 <HAL_DMA_IRQHandler+0x204>)
 800424e:	6053      	str	r3, [r2, #4]
 8004250:	e057      	b.n	8004302 <HAL_DMA_IRQHandler+0x1c2>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a31      	ldr	r2, [pc, #196]	; (800431c <HAL_DMA_IRQHandler+0x1dc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d04f      	beq.n	80042fc <HAL_DMA_IRQHandler+0x1bc>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a2f      	ldr	r2, [pc, #188]	; (8004320 <HAL_DMA_IRQHandler+0x1e0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d048      	beq.n	80042f8 <HAL_DMA_IRQHandler+0x1b8>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a2e      	ldr	r2, [pc, #184]	; (8004324 <HAL_DMA_IRQHandler+0x1e4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d040      	beq.n	80042f2 <HAL_DMA_IRQHandler+0x1b2>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a2c      	ldr	r2, [pc, #176]	; (8004328 <HAL_DMA_IRQHandler+0x1e8>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d038      	beq.n	80042ec <HAL_DMA_IRQHandler+0x1ac>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a2b      	ldr	r2, [pc, #172]	; (800432c <HAL_DMA_IRQHandler+0x1ec>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d030      	beq.n	80042e6 <HAL_DMA_IRQHandler+0x1a6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a29      	ldr	r2, [pc, #164]	; (8004330 <HAL_DMA_IRQHandler+0x1f0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d028      	beq.n	80042e0 <HAL_DMA_IRQHandler+0x1a0>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a21      	ldr	r2, [pc, #132]	; (8004318 <HAL_DMA_IRQHandler+0x1d8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d020      	beq.n	80042da <HAL_DMA_IRQHandler+0x19a>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a25      	ldr	r2, [pc, #148]	; (8004334 <HAL_DMA_IRQHandler+0x1f4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d019      	beq.n	80042d6 <HAL_DMA_IRQHandler+0x196>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a24      	ldr	r2, [pc, #144]	; (8004338 <HAL_DMA_IRQHandler+0x1f8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d012      	beq.n	80042d2 <HAL_DMA_IRQHandler+0x192>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a22      	ldr	r2, [pc, #136]	; (800433c <HAL_DMA_IRQHandler+0x1fc>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00a      	beq.n	80042cc <HAL_DMA_IRQHandler+0x18c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a21      	ldr	r2, [pc, #132]	; (8004340 <HAL_DMA_IRQHandler+0x200>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d102      	bne.n	80042c6 <HAL_DMA_IRQHandler+0x186>
 80042c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042c4:	e01b      	b.n	80042fe <HAL_DMA_IRQHandler+0x1be>
 80042c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042ca:	e018      	b.n	80042fe <HAL_DMA_IRQHandler+0x1be>
 80042cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042d0:	e015      	b.n	80042fe <HAL_DMA_IRQHandler+0x1be>
 80042d2:	2340      	movs	r3, #64	; 0x40
 80042d4:	e013      	b.n	80042fe <HAL_DMA_IRQHandler+0x1be>
 80042d6:	2304      	movs	r3, #4
 80042d8:	e011      	b.n	80042fe <HAL_DMA_IRQHandler+0x1be>
 80042da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80042de:	e00e      	b.n	80042fe <HAL_DMA_IRQHandler+0x1be>
 80042e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80042e4:	e00b      	b.n	80042fe <HAL_DMA_IRQHandler+0x1be>
 80042e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80042ea:	e008      	b.n	80042fe <HAL_DMA_IRQHandler+0x1be>
 80042ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80042f0:	e005      	b.n	80042fe <HAL_DMA_IRQHandler+0x1be>
 80042f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042f6:	e002      	b.n	80042fe <HAL_DMA_IRQHandler+0x1be>
 80042f8:	2340      	movs	r3, #64	; 0x40
 80042fa:	e000      	b.n	80042fe <HAL_DMA_IRQHandler+0x1be>
 80042fc:	2304      	movs	r3, #4
 80042fe:	4a12      	ldr	r2, [pc, #72]	; (8004348 <HAL_DMA_IRQHandler+0x208>)
 8004300:	6053      	str	r3, [r2, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8136 	beq.w	8004578 <HAL_DMA_IRQHandler+0x438>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
 8004314:	e130      	b.n	8004578 <HAL_DMA_IRQHandler+0x438>
 8004316:	bf00      	nop
 8004318:	40020080 	.word	0x40020080
 800431c:	40020008 	.word	0x40020008
 8004320:	4002001c 	.word	0x4002001c
 8004324:	40020030 	.word	0x40020030
 8004328:	40020044 	.word	0x40020044
 800432c:	40020058 	.word	0x40020058
 8004330:	4002006c 	.word	0x4002006c
 8004334:	40020408 	.word	0x40020408
 8004338:	4002041c 	.word	0x4002041c
 800433c:	40020430 	.word	0x40020430
 8004340:	40020444 	.word	0x40020444
 8004344:	40020400 	.word	0x40020400
 8004348:	40020000 	.word	0x40020000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004350:	2202      	movs	r2, #2
 8004352:	409a      	lsls	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	4013      	ands	r3, r2
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80dd 	beq.w	8004518 <HAL_DMA_IRQHandler+0x3d8>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 80d7 	beq.w	8004518 <HAL_DMA_IRQHandler+0x3d8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0320 	and.w	r3, r3, #32
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10b      	bne.n	8004390 <HAL_DMA_IRQHandler+0x250>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 020a 	bic.w	r2, r2, #10
 8004386:	601a      	str	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	4b7b      	ldr	r3, [pc, #492]	; (8004584 <HAL_DMA_IRQHandler+0x444>)
 8004398:	429a      	cmp	r2, r3
 800439a:	d958      	bls.n	800444e <HAL_DMA_IRQHandler+0x30e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a79      	ldr	r2, [pc, #484]	; (8004588 <HAL_DMA_IRQHandler+0x448>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d04f      	beq.n	8004446 <HAL_DMA_IRQHandler+0x306>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a78      	ldr	r2, [pc, #480]	; (800458c <HAL_DMA_IRQHandler+0x44c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d048      	beq.n	8004442 <HAL_DMA_IRQHandler+0x302>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a76      	ldr	r2, [pc, #472]	; (8004590 <HAL_DMA_IRQHandler+0x450>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d040      	beq.n	800443c <HAL_DMA_IRQHandler+0x2fc>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a75      	ldr	r2, [pc, #468]	; (8004594 <HAL_DMA_IRQHandler+0x454>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d038      	beq.n	8004436 <HAL_DMA_IRQHandler+0x2f6>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a73      	ldr	r2, [pc, #460]	; (8004598 <HAL_DMA_IRQHandler+0x458>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d030      	beq.n	8004430 <HAL_DMA_IRQHandler+0x2f0>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a72      	ldr	r2, [pc, #456]	; (800459c <HAL_DMA_IRQHandler+0x45c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d028      	beq.n	800442a <HAL_DMA_IRQHandler+0x2ea>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a69      	ldr	r2, [pc, #420]	; (8004584 <HAL_DMA_IRQHandler+0x444>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d020      	beq.n	8004424 <HAL_DMA_IRQHandler+0x2e4>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a6e      	ldr	r2, [pc, #440]	; (80045a0 <HAL_DMA_IRQHandler+0x460>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d019      	beq.n	8004420 <HAL_DMA_IRQHandler+0x2e0>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a6c      	ldr	r2, [pc, #432]	; (80045a4 <HAL_DMA_IRQHandler+0x464>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d012      	beq.n	800441c <HAL_DMA_IRQHandler+0x2dc>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a6b      	ldr	r2, [pc, #428]	; (80045a8 <HAL_DMA_IRQHandler+0x468>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00a      	beq.n	8004416 <HAL_DMA_IRQHandler+0x2d6>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a69      	ldr	r2, [pc, #420]	; (80045ac <HAL_DMA_IRQHandler+0x46c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d102      	bne.n	8004410 <HAL_DMA_IRQHandler+0x2d0>
 800440a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800440e:	e01b      	b.n	8004448 <HAL_DMA_IRQHandler+0x308>
 8004410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004414:	e018      	b.n	8004448 <HAL_DMA_IRQHandler+0x308>
 8004416:	f44f 7300 	mov.w	r3, #512	; 0x200
 800441a:	e015      	b.n	8004448 <HAL_DMA_IRQHandler+0x308>
 800441c:	2320      	movs	r3, #32
 800441e:	e013      	b.n	8004448 <HAL_DMA_IRQHandler+0x308>
 8004420:	2302      	movs	r3, #2
 8004422:	e011      	b.n	8004448 <HAL_DMA_IRQHandler+0x308>
 8004424:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004428:	e00e      	b.n	8004448 <HAL_DMA_IRQHandler+0x308>
 800442a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800442e:	e00b      	b.n	8004448 <HAL_DMA_IRQHandler+0x308>
 8004430:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004434:	e008      	b.n	8004448 <HAL_DMA_IRQHandler+0x308>
 8004436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800443a:	e005      	b.n	8004448 <HAL_DMA_IRQHandler+0x308>
 800443c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004440:	e002      	b.n	8004448 <HAL_DMA_IRQHandler+0x308>
 8004442:	2320      	movs	r3, #32
 8004444:	e000      	b.n	8004448 <HAL_DMA_IRQHandler+0x308>
 8004446:	2302      	movs	r3, #2
 8004448:	4a59      	ldr	r2, [pc, #356]	; (80045b0 <HAL_DMA_IRQHandler+0x470>)
 800444a:	6053      	str	r3, [r2, #4]
 800444c:	e057      	b.n	80044fe <HAL_DMA_IRQHandler+0x3be>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a4d      	ldr	r2, [pc, #308]	; (8004588 <HAL_DMA_IRQHandler+0x448>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d04f      	beq.n	80044f8 <HAL_DMA_IRQHandler+0x3b8>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a4b      	ldr	r2, [pc, #300]	; (800458c <HAL_DMA_IRQHandler+0x44c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d048      	beq.n	80044f4 <HAL_DMA_IRQHandler+0x3b4>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a4a      	ldr	r2, [pc, #296]	; (8004590 <HAL_DMA_IRQHandler+0x450>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d040      	beq.n	80044ee <HAL_DMA_IRQHandler+0x3ae>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a48      	ldr	r2, [pc, #288]	; (8004594 <HAL_DMA_IRQHandler+0x454>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d038      	beq.n	80044e8 <HAL_DMA_IRQHandler+0x3a8>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a47      	ldr	r2, [pc, #284]	; (8004598 <HAL_DMA_IRQHandler+0x458>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d030      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x3a2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a45      	ldr	r2, [pc, #276]	; (800459c <HAL_DMA_IRQHandler+0x45c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d028      	beq.n	80044dc <HAL_DMA_IRQHandler+0x39c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a3d      	ldr	r2, [pc, #244]	; (8004584 <HAL_DMA_IRQHandler+0x444>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d020      	beq.n	80044d6 <HAL_DMA_IRQHandler+0x396>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a41      	ldr	r2, [pc, #260]	; (80045a0 <HAL_DMA_IRQHandler+0x460>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d019      	beq.n	80044d2 <HAL_DMA_IRQHandler+0x392>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a40      	ldr	r2, [pc, #256]	; (80045a4 <HAL_DMA_IRQHandler+0x464>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d012      	beq.n	80044ce <HAL_DMA_IRQHandler+0x38e>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a3e      	ldr	r2, [pc, #248]	; (80045a8 <HAL_DMA_IRQHandler+0x468>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00a      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x388>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a3d      	ldr	r2, [pc, #244]	; (80045ac <HAL_DMA_IRQHandler+0x46c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d102      	bne.n	80044c2 <HAL_DMA_IRQHandler+0x382>
 80044bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044c0:	e01b      	b.n	80044fa <HAL_DMA_IRQHandler+0x3ba>
 80044c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044c6:	e018      	b.n	80044fa <HAL_DMA_IRQHandler+0x3ba>
 80044c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044cc:	e015      	b.n	80044fa <HAL_DMA_IRQHandler+0x3ba>
 80044ce:	2320      	movs	r3, #32
 80044d0:	e013      	b.n	80044fa <HAL_DMA_IRQHandler+0x3ba>
 80044d2:	2302      	movs	r3, #2
 80044d4:	e011      	b.n	80044fa <HAL_DMA_IRQHandler+0x3ba>
 80044d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044da:	e00e      	b.n	80044fa <HAL_DMA_IRQHandler+0x3ba>
 80044dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80044e0:	e00b      	b.n	80044fa <HAL_DMA_IRQHandler+0x3ba>
 80044e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80044e6:	e008      	b.n	80044fa <HAL_DMA_IRQHandler+0x3ba>
 80044e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044ec:	e005      	b.n	80044fa <HAL_DMA_IRQHandler+0x3ba>
 80044ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044f2:	e002      	b.n	80044fa <HAL_DMA_IRQHandler+0x3ba>
 80044f4:	2320      	movs	r3, #32
 80044f6:	e000      	b.n	80044fa <HAL_DMA_IRQHandler+0x3ba>
 80044f8:	2302      	movs	r3, #2
 80044fa:	4a2e      	ldr	r2, [pc, #184]	; (80045b4 <HAL_DMA_IRQHandler+0x474>)
 80044fc:	6053      	str	r3, [r2, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2020 	strb.w	r2, [r3, #32]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800450a:	2b00      	cmp	r3, #0
 800450c:	d034      	beq.n	8004578 <HAL_DMA_IRQHandler+0x438>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	4798      	blx	r3
 8004516:	e02f      	b.n	8004578 <HAL_DMA_IRQHandler+0x438>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	2208      	movs	r2, #8
 800451e:	409a      	lsls	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d028      	beq.n	800457a <HAL_DMA_IRQHandler+0x43a>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b00      	cmp	r3, #0
 8004530:	d023      	beq.n	800457a <HAL_DMA_IRQHandler+0x43a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f022 020e 	bic.w	r2, r2, #14
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800454a:	2101      	movs	r1, #1
 800454c:	fa01 f202 	lsl.w	r2, r1, r2
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	639a      	str	r2, [r3, #56]	; 0x38
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2020 	strb.w	r2, [r3, #32]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456c:	2b00      	cmp	r3, #0
 800456e:	d004      	beq.n	800457a <HAL_DMA_IRQHandler+0x43a>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	4798      	blx	r3
 8004578:	bf00      	nop
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40020080 	.word	0x40020080
 8004588:	40020008 	.word	0x40020008
 800458c:	4002001c 	.word	0x4002001c
 8004590:	40020030 	.word	0x40020030
 8004594:	40020044 	.word	0x40020044
 8004598:	40020058 	.word	0x40020058
 800459c:	4002006c 	.word	0x4002006c
 80045a0:	40020408 	.word	0x40020408
 80045a4:	4002041c 	.word	0x4002041c
 80045a8:	40020430 	.word	0x40020430
 80045ac:	40020444 	.word	0x40020444
 80045b0:	40020400 	.word	0x40020400
 80045b4:	40020000 	.word	0x40020000

080045b8 <DMA_SetConfig>:
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ce:	2101      	movs	r1, #1
 80045d0:	fa01 f202 	lsl.w	r2, r1, r2
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	605a      	str	r2, [r3, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b10      	cmp	r3, #16
 80045e4:	d108      	bne.n	80045f8 <DMA_SetConfig+0x40>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	609a      	str	r2, [r3, #8]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	60da      	str	r2, [r3, #12]
 80045f6:	e007      	b.n	8004608 <DMA_SetConfig+0x50>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	609a      	str	r2, [r3, #8]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	60da      	str	r2, [r3, #12]
 8004608:	bf00      	nop
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	bc80      	pop	{r7}
 8004610:	4770      	bx	lr
	...

08004614 <HAL_GPIO_Init>:
 8004614:	b480      	push	{r7}
 8004616:	b08b      	sub	sp, #44	; 0x2c
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
 800461e:	2300      	movs	r3, #0
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
 8004622:	2300      	movs	r3, #0
 8004624:	623b      	str	r3, [r7, #32]
 8004626:	e179      	b.n	800491c <HAL_GPIO_Init+0x308>
 8004628:	2201      	movs	r2, #1
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	4013      	ands	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	69ba      	ldr	r2, [r7, #24]
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	429a      	cmp	r2, r3
 8004642:	f040 8168 	bne.w	8004916 <HAL_GPIO_Init+0x302>
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	4a96      	ldr	r2, [pc, #600]	; (80048a4 <HAL_GPIO_Init+0x290>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d05e      	beq.n	800470e <HAL_GPIO_Init+0xfa>
 8004650:	4a94      	ldr	r2, [pc, #592]	; (80048a4 <HAL_GPIO_Init+0x290>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d875      	bhi.n	8004742 <HAL_GPIO_Init+0x12e>
 8004656:	4a94      	ldr	r2, [pc, #592]	; (80048a8 <HAL_GPIO_Init+0x294>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d058      	beq.n	800470e <HAL_GPIO_Init+0xfa>
 800465c:	4a92      	ldr	r2, [pc, #584]	; (80048a8 <HAL_GPIO_Init+0x294>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d86f      	bhi.n	8004742 <HAL_GPIO_Init+0x12e>
 8004662:	4a92      	ldr	r2, [pc, #584]	; (80048ac <HAL_GPIO_Init+0x298>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d052      	beq.n	800470e <HAL_GPIO_Init+0xfa>
 8004668:	4a90      	ldr	r2, [pc, #576]	; (80048ac <HAL_GPIO_Init+0x298>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d869      	bhi.n	8004742 <HAL_GPIO_Init+0x12e>
 800466e:	4a90      	ldr	r2, [pc, #576]	; (80048b0 <HAL_GPIO_Init+0x29c>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d04c      	beq.n	800470e <HAL_GPIO_Init+0xfa>
 8004674:	4a8e      	ldr	r2, [pc, #568]	; (80048b0 <HAL_GPIO_Init+0x29c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d863      	bhi.n	8004742 <HAL_GPIO_Init+0x12e>
 800467a:	4a8e      	ldr	r2, [pc, #568]	; (80048b4 <HAL_GPIO_Init+0x2a0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d046      	beq.n	800470e <HAL_GPIO_Init+0xfa>
 8004680:	4a8c      	ldr	r2, [pc, #560]	; (80048b4 <HAL_GPIO_Init+0x2a0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d85d      	bhi.n	8004742 <HAL_GPIO_Init+0x12e>
 8004686:	2b12      	cmp	r3, #18
 8004688:	d82a      	bhi.n	80046e0 <HAL_GPIO_Init+0xcc>
 800468a:	2b12      	cmp	r3, #18
 800468c:	d859      	bhi.n	8004742 <HAL_GPIO_Init+0x12e>
 800468e:	a201      	add	r2, pc, #4	; (adr r2, 8004694 <HAL_GPIO_Init+0x80>)
 8004690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004694:	0800470f 	.word	0x0800470f
 8004698:	080046e9 	.word	0x080046e9
 800469c:	080046fb 	.word	0x080046fb
 80046a0:	0800473d 	.word	0x0800473d
 80046a4:	08004743 	.word	0x08004743
 80046a8:	08004743 	.word	0x08004743
 80046ac:	08004743 	.word	0x08004743
 80046b0:	08004743 	.word	0x08004743
 80046b4:	08004743 	.word	0x08004743
 80046b8:	08004743 	.word	0x08004743
 80046bc:	08004743 	.word	0x08004743
 80046c0:	08004743 	.word	0x08004743
 80046c4:	08004743 	.word	0x08004743
 80046c8:	08004743 	.word	0x08004743
 80046cc:	08004743 	.word	0x08004743
 80046d0:	08004743 	.word	0x08004743
 80046d4:	08004743 	.word	0x08004743
 80046d8:	080046f1 	.word	0x080046f1
 80046dc:	08004705 	.word	0x08004705
 80046e0:	4a75      	ldr	r2, [pc, #468]	; (80048b8 <HAL_GPIO_Init+0x2a4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <HAL_GPIO_Init+0xfa>
 80046e6:	e02c      	b.n	8004742 <HAL_GPIO_Init+0x12e>
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	623b      	str	r3, [r7, #32]
 80046ee:	e029      	b.n	8004744 <HAL_GPIO_Init+0x130>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	3304      	adds	r3, #4
 80046f6:	623b      	str	r3, [r7, #32]
 80046f8:	e024      	b.n	8004744 <HAL_GPIO_Init+0x130>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	3308      	adds	r3, #8
 8004700:	623b      	str	r3, [r7, #32]
 8004702:	e01f      	b.n	8004744 <HAL_GPIO_Init+0x130>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	330c      	adds	r3, #12
 800470a:	623b      	str	r3, [r7, #32]
 800470c:	e01a      	b.n	8004744 <HAL_GPIO_Init+0x130>
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d102      	bne.n	800471c <HAL_GPIO_Init+0x108>
 8004716:	2304      	movs	r3, #4
 8004718:	623b      	str	r3, [r7, #32]
 800471a:	e013      	b.n	8004744 <HAL_GPIO_Init+0x130>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d105      	bne.n	8004730 <HAL_GPIO_Init+0x11c>
 8004724:	2308      	movs	r3, #8
 8004726:	623b      	str	r3, [r7, #32]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	611a      	str	r2, [r3, #16]
 800472e:	e009      	b.n	8004744 <HAL_GPIO_Init+0x130>
 8004730:	2308      	movs	r3, #8
 8004732:	623b      	str	r3, [r7, #32]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69fa      	ldr	r2, [r7, #28]
 8004738:	615a      	str	r2, [r3, #20]
 800473a:	e003      	b.n	8004744 <HAL_GPIO_Init+0x130>
 800473c:	2300      	movs	r3, #0
 800473e:	623b      	str	r3, [r7, #32]
 8004740:	e000      	b.n	8004744 <HAL_GPIO_Init+0x130>
 8004742:	bf00      	nop
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	2bff      	cmp	r3, #255	; 0xff
 8004748:	d801      	bhi.n	800474e <HAL_GPIO_Init+0x13a>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	e001      	b.n	8004752 <HAL_GPIO_Init+0x13e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3304      	adds	r3, #4
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2bff      	cmp	r3, #255	; 0xff
 8004758:	d802      	bhi.n	8004760 <HAL_GPIO_Init+0x14c>
 800475a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	e002      	b.n	8004766 <HAL_GPIO_Init+0x152>
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	3b08      	subs	r3, #8
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	210f      	movs	r1, #15
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	fa01 f303 	lsl.w	r3, r1, r3
 8004774:	43db      	mvns	r3, r3
 8004776:	401a      	ands	r2, r3
 8004778:	6a39      	ldr	r1, [r7, #32]
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	fa01 f303 	lsl.w	r3, r1, r3
 8004780:	431a      	orrs	r2, r3
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478e:	2b00      	cmp	r3, #0
 8004790:	f000 80c1 	beq.w	8004916 <HAL_GPIO_Init+0x302>
 8004794:	4b49      	ldr	r3, [pc, #292]	; (80048bc <HAL_GPIO_Init+0x2a8>)
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	4a48      	ldr	r2, [pc, #288]	; (80048bc <HAL_GPIO_Init+0x2a8>)
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	6193      	str	r3, [r2, #24]
 80047a0:	4b46      	ldr	r3, [pc, #280]	; (80048bc <HAL_GPIO_Init+0x2a8>)
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	4a44      	ldr	r2, [pc, #272]	; (80048c0 <HAL_GPIO_Init+0x2ac>)
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	089b      	lsrs	r3, r3, #2
 80047b2:	3302      	adds	r3, #2
 80047b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	220f      	movs	r2, #15
 80047c4:	fa02 f303 	lsl.w	r3, r2, r3
 80047c8:	43db      	mvns	r3, r3
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	4013      	ands	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a3c      	ldr	r2, [pc, #240]	; (80048c4 <HAL_GPIO_Init+0x2b0>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d01f      	beq.n	8004818 <HAL_GPIO_Init+0x204>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a3b      	ldr	r2, [pc, #236]	; (80048c8 <HAL_GPIO_Init+0x2b4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d019      	beq.n	8004814 <HAL_GPIO_Init+0x200>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a3a      	ldr	r2, [pc, #232]	; (80048cc <HAL_GPIO_Init+0x2b8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d013      	beq.n	8004810 <HAL_GPIO_Init+0x1fc>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a39      	ldr	r2, [pc, #228]	; (80048d0 <HAL_GPIO_Init+0x2bc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00d      	beq.n	800480c <HAL_GPIO_Init+0x1f8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a38      	ldr	r2, [pc, #224]	; (80048d4 <HAL_GPIO_Init+0x2c0>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d007      	beq.n	8004808 <HAL_GPIO_Init+0x1f4>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a37      	ldr	r2, [pc, #220]	; (80048d8 <HAL_GPIO_Init+0x2c4>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d101      	bne.n	8004804 <HAL_GPIO_Init+0x1f0>
 8004800:	2305      	movs	r3, #5
 8004802:	e00a      	b.n	800481a <HAL_GPIO_Init+0x206>
 8004804:	2306      	movs	r3, #6
 8004806:	e008      	b.n	800481a <HAL_GPIO_Init+0x206>
 8004808:	2304      	movs	r3, #4
 800480a:	e006      	b.n	800481a <HAL_GPIO_Init+0x206>
 800480c:	2303      	movs	r3, #3
 800480e:	e004      	b.n	800481a <HAL_GPIO_Init+0x206>
 8004810:	2302      	movs	r3, #2
 8004812:	e002      	b.n	800481a <HAL_GPIO_Init+0x206>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <HAL_GPIO_Init+0x206>
 8004818:	2300      	movs	r3, #0
 800481a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481c:	f002 0203 	and.w	r2, r2, #3
 8004820:	0092      	lsls	r2, r2, #2
 8004822:	4093      	lsls	r3, r2
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	4313      	orrs	r3, r2
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	4925      	ldr	r1, [pc, #148]	; (80048c0 <HAL_GPIO_Init+0x2ac>)
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	089b      	lsrs	r3, r3, #2
 8004830:	3302      	adds	r3, #2
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d006      	beq.n	8004852 <HAL_GPIO_Init+0x23e>
 8004844:	4b25      	ldr	r3, [pc, #148]	; (80048dc <HAL_GPIO_Init+0x2c8>)
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	4924      	ldr	r1, [pc, #144]	; (80048dc <HAL_GPIO_Init+0x2c8>)
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	4313      	orrs	r3, r2
 800484e:	600b      	str	r3, [r1, #0]
 8004850:	e006      	b.n	8004860 <HAL_GPIO_Init+0x24c>
 8004852:	4b22      	ldr	r3, [pc, #136]	; (80048dc <HAL_GPIO_Init+0x2c8>)
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	43db      	mvns	r3, r3
 800485a:	4920      	ldr	r1, [pc, #128]	; (80048dc <HAL_GPIO_Init+0x2c8>)
 800485c:	4013      	ands	r3, r2
 800485e:	600b      	str	r3, [r1, #0]
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d006      	beq.n	800487a <HAL_GPIO_Init+0x266>
 800486c:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <HAL_GPIO_Init+0x2c8>)
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	491a      	ldr	r1, [pc, #104]	; (80048dc <HAL_GPIO_Init+0x2c8>)
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	4313      	orrs	r3, r2
 8004876:	604b      	str	r3, [r1, #4]
 8004878:	e006      	b.n	8004888 <HAL_GPIO_Init+0x274>
 800487a:	4b18      	ldr	r3, [pc, #96]	; (80048dc <HAL_GPIO_Init+0x2c8>)
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	43db      	mvns	r3, r3
 8004882:	4916      	ldr	r1, [pc, #88]	; (80048dc <HAL_GPIO_Init+0x2c8>)
 8004884:	4013      	ands	r3, r2
 8004886:	604b      	str	r3, [r1, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d025      	beq.n	80048e0 <HAL_GPIO_Init+0x2cc>
 8004894:	4b11      	ldr	r3, [pc, #68]	; (80048dc <HAL_GPIO_Init+0x2c8>)
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	4910      	ldr	r1, [pc, #64]	; (80048dc <HAL_GPIO_Init+0x2c8>)
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]
 80048a0:	e025      	b.n	80048ee <HAL_GPIO_Init+0x2da>
 80048a2:	bf00      	nop
 80048a4:	10320000 	.word	0x10320000
 80048a8:	10310000 	.word	0x10310000
 80048ac:	10220000 	.word	0x10220000
 80048b0:	10210000 	.word	0x10210000
 80048b4:	10120000 	.word	0x10120000
 80048b8:	10110000 	.word	0x10110000
 80048bc:	40021000 	.word	0x40021000
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40010800 	.word	0x40010800
 80048c8:	40010c00 	.word	0x40010c00
 80048cc:	40011000 	.word	0x40011000
 80048d0:	40011400 	.word	0x40011400
 80048d4:	40011800 	.word	0x40011800
 80048d8:	40011c00 	.word	0x40011c00
 80048dc:	40010400 	.word	0x40010400
 80048e0:	4b15      	ldr	r3, [pc, #84]	; (8004938 <HAL_GPIO_Init+0x324>)
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	43db      	mvns	r3, r3
 80048e8:	4913      	ldr	r1, [pc, #76]	; (8004938 <HAL_GPIO_Init+0x324>)
 80048ea:	4013      	ands	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d006      	beq.n	8004908 <HAL_GPIO_Init+0x2f4>
 80048fa:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <HAL_GPIO_Init+0x324>)
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	490e      	ldr	r1, [pc, #56]	; (8004938 <HAL_GPIO_Init+0x324>)
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	4313      	orrs	r3, r2
 8004904:	60cb      	str	r3, [r1, #12]
 8004906:	e006      	b.n	8004916 <HAL_GPIO_Init+0x302>
 8004908:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_GPIO_Init+0x324>)
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	43db      	mvns	r3, r3
 8004910:	4909      	ldr	r1, [pc, #36]	; (8004938 <HAL_GPIO_Init+0x324>)
 8004912:	4013      	ands	r3, r2
 8004914:	60cb      	str	r3, [r1, #12]
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	3301      	adds	r3, #1
 800491a:	627b      	str	r3, [r7, #36]	; 0x24
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	fa22 f303 	lsr.w	r3, r2, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	f47f ae7e 	bne.w	8004628 <HAL_GPIO_Init+0x14>
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	372c      	adds	r7, #44	; 0x2c
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr
 8004938:	40010400 	.word	0x40010400

0800493c <HAL_GPIO_WritePin>:
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	460b      	mov	r3, r1
 8004946:	807b      	strh	r3, [r7, #2]
 8004948:	4613      	mov	r3, r2
 800494a:	707b      	strb	r3, [r7, #1]
 800494c:	787b      	ldrb	r3, [r7, #1]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_GPIO_WritePin+0x1e>
 8004952:	887a      	ldrh	r2, [r7, #2]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	611a      	str	r2, [r3, #16]
 8004958:	e003      	b.n	8004962 <HAL_GPIO_WritePin+0x26>
 800495a:	887b      	ldrh	r3, [r7, #2]
 800495c:	041a      	lsls	r2, r3, #16
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	611a      	str	r2, [r3, #16]
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <HAL_I2C_Init>:
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_I2C_Init+0x12>
 800497a:	2301      	movs	r3, #1
 800497c:	e12b      	b.n	8004bd6 <HAL_I2C_Init+0x26a>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_I2C_Init+0x2c>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fe fbf2 	bl	800317c <HAL_I2C_MspInit>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2224      	movs	r2, #36	; 0x24
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0201 	bic.w	r2, r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049be:	601a      	str	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f000 fce6 	bl	80053a0 <HAL_RCC_GetPCLK1Freq>
 80049d4:	60f8      	str	r0, [r7, #12]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4a81      	ldr	r2, [pc, #516]	; (8004be0 <HAL_I2C_Init+0x274>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d807      	bhi.n	80049f0 <HAL_I2C_Init+0x84>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4a80      	ldr	r2, [pc, #512]	; (8004be4 <HAL_I2C_Init+0x278>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	bf94      	ite	ls
 80049e8:	2301      	movls	r3, #1
 80049ea:	2300      	movhi	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e006      	b.n	80049fe <HAL_I2C_Init+0x92>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4a7d      	ldr	r2, [pc, #500]	; (8004be8 <HAL_I2C_Init+0x27c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	bf94      	ite	ls
 80049f8:	2301      	movls	r3, #1
 80049fa:	2300      	movhi	r3, #0
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <HAL_I2C_Init+0x9a>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0e7      	b.n	8004bd6 <HAL_I2C_Init+0x26a>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4a78      	ldr	r2, [pc, #480]	; (8004bec <HAL_I2C_Init+0x280>)
 8004a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0e:	0c9b      	lsrs	r3, r3, #18
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	4a6a      	ldr	r2, [pc, #424]	; (8004be0 <HAL_I2C_Init+0x274>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d802      	bhi.n	8004a40 <HAL_I2C_Init+0xd4>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	e009      	b.n	8004a54 <HAL_I2C_Init+0xe8>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004a46:	fb02 f303 	mul.w	r3, r2, r3
 8004a4a:	4a69      	ldr	r2, [pc, #420]	; (8004bf0 <HAL_I2C_Init+0x284>)
 8004a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a50:	099b      	lsrs	r3, r3, #6
 8004a52:	3301      	adds	r3, #1
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6812      	ldr	r2, [r2, #0]
 8004a58:	430b      	orrs	r3, r1
 8004a5a:	6213      	str	r3, [r2, #32]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	69db      	ldr	r3, [r3, #28]
 8004a62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004a66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	495c      	ldr	r1, [pc, #368]	; (8004be0 <HAL_I2C_Init+0x274>)
 8004a70:	428b      	cmp	r3, r1
 8004a72:	d819      	bhi.n	8004aa8 <HAL_I2C_Init+0x13c>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	1e59      	subs	r1, r3, #1
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a82:	1c59      	adds	r1, r3, #1
 8004a84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a88:	400b      	ands	r3, r1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_I2C_Init+0x138>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1e59      	subs	r1, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa2:	e051      	b.n	8004b48 <HAL_I2C_Init+0x1dc>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	e04f      	b.n	8004b48 <HAL_I2C_Init+0x1dc>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d111      	bne.n	8004ad4 <HAL_I2C_Init+0x168>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	1e58      	subs	r0, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6859      	ldr	r1, [r3, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	440b      	add	r3, r1
 8004abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf0c      	ite	eq
 8004acc:	2301      	moveq	r3, #1
 8004ace:	2300      	movne	r3, #0
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	e012      	b.n	8004afa <HAL_I2C_Init+0x18e>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	1e58      	subs	r0, r3, #1
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6859      	ldr	r1, [r3, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	0099      	lsls	r1, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aea:	3301      	adds	r3, #1
 8004aec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_I2C_Init+0x196>
 8004afe:	2301      	movs	r3, #1
 8004b00:	e022      	b.n	8004b48 <HAL_I2C_Init+0x1dc>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10e      	bne.n	8004b28 <HAL_I2C_Init+0x1bc>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	1e58      	subs	r0, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6859      	ldr	r1, [r3, #4]
 8004b12:	460b      	mov	r3, r1
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	440b      	add	r3, r1
 8004b18:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b26:	e00f      	b.n	8004b48 <HAL_I2C_Init+0x1dc>
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1e58      	subs	r0, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6859      	ldr	r1, [r3, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	0099      	lsls	r1, r3, #2
 8004b38:	440b      	add	r3, r1
 8004b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b48:	6879      	ldr	r1, [r7, #4]
 8004b4a:	6809      	ldr	r1, [r1, #0]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61cb      	str	r3, [r1, #28]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	69da      	ldr	r2, [r3, #28]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	431a      	orrs	r2, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004b76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	6911      	ldr	r1, [r2, #16]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	68d2      	ldr	r2, [r2, #12]
 8004b82:	4311      	orrs	r1, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	6812      	ldr	r2, [r2, #0]
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	6093      	str	r3, [r2, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	431a      	orrs	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	430a      	orrs	r2, r1
 8004ba6:	60da      	str	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3710      	adds	r7, #16
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	000186a0 	.word	0x000186a0
 8004be4:	001e847f 	.word	0x001e847f
 8004be8:	003d08ff 	.word	0x003d08ff
 8004bec:	431bde83 	.word	0x431bde83
 8004bf0:	10624dd3 	.word	0x10624dd3

08004bf4 <HAL_RCC_OscConfig>:
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_RCC_OscConfig+0x12>
 8004c02:	2301      	movs	r3, #1
 8004c04:	e272      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 8087 	beq.w	8004d22 <HAL_RCC_OscConfig+0x12e>
 8004c14:	4b92      	ldr	r3, [pc, #584]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f003 030c 	and.w	r3, r3, #12
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d00c      	beq.n	8004c3a <HAL_RCC_OscConfig+0x46>
 8004c20:	4b8f      	ldr	r3, [pc, #572]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d112      	bne.n	8004c52 <HAL_RCC_OscConfig+0x5e>
 8004c2c:	4b8c      	ldr	r3, [pc, #560]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c38:	d10b      	bne.n	8004c52 <HAL_RCC_OscConfig+0x5e>
 8004c3a:	4b89      	ldr	r3, [pc, #548]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d06c      	beq.n	8004d20 <HAL_RCC_OscConfig+0x12c>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d168      	bne.n	8004d20 <HAL_RCC_OscConfig+0x12c>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e24c      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5a:	d106      	bne.n	8004c6a <HAL_RCC_OscConfig+0x76>
 8004c5c:	4b80      	ldr	r3, [pc, #512]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a7f      	ldr	r2, [pc, #508]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c66:	6013      	str	r3, [r2, #0]
 8004c68:	e02e      	b.n	8004cc8 <HAL_RCC_OscConfig+0xd4>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10c      	bne.n	8004c8c <HAL_RCC_OscConfig+0x98>
 8004c72:	4b7b      	ldr	r3, [pc, #492]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a7a      	ldr	r2, [pc, #488]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	4b78      	ldr	r3, [pc, #480]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a77      	ldr	r2, [pc, #476]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	e01d      	b.n	8004cc8 <HAL_RCC_OscConfig+0xd4>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c94:	d10c      	bne.n	8004cb0 <HAL_RCC_OscConfig+0xbc>
 8004c96:	4b72      	ldr	r3, [pc, #456]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a71      	ldr	r2, [pc, #452]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	4b6f      	ldr	r3, [pc, #444]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a6e      	ldr	r2, [pc, #440]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e00b      	b.n	8004cc8 <HAL_RCC_OscConfig+0xd4>
 8004cb0:	4b6b      	ldr	r3, [pc, #428]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a6a      	ldr	r2, [pc, #424]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	4b68      	ldr	r3, [pc, #416]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a67      	ldr	r2, [pc, #412]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004cc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d013      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x104>
 8004cd0:	f7fe fee2 	bl	8003a98 <HAL_GetTick>
 8004cd4:	6138      	str	r0, [r7, #16]
 8004cd6:	e008      	b.n	8004cea <HAL_RCC_OscConfig+0xf6>
 8004cd8:	f7fe fede 	bl	8003a98 <HAL_GetTick>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	1ad3      	subs	r3, r2, r3
 8004ce2:	2b64      	cmp	r3, #100	; 0x64
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0xf6>
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e200      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8004cea:	4b5d      	ldr	r3, [pc, #372]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d0f0      	beq.n	8004cd8 <HAL_RCC_OscConfig+0xe4>
 8004cf6:	e014      	b.n	8004d22 <HAL_RCC_OscConfig+0x12e>
 8004cf8:	f7fe fece 	bl	8003a98 <HAL_GetTick>
 8004cfc:	6138      	str	r0, [r7, #16]
 8004cfe:	e008      	b.n	8004d12 <HAL_RCC_OscConfig+0x11e>
 8004d00:	f7fe feca 	bl	8003a98 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	2b64      	cmp	r3, #100	; 0x64
 8004d0c:	d901      	bls.n	8004d12 <HAL_RCC_OscConfig+0x11e>
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e1ec      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8004d12:	4b53      	ldr	r3, [pc, #332]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x10c>
 8004d1e:	e000      	b.n	8004d22 <HAL_RCC_OscConfig+0x12e>
 8004d20:	bf00      	nop
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d063      	beq.n	8004df6 <HAL_RCC_OscConfig+0x202>
 8004d2e:	4b4c      	ldr	r3, [pc, #304]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00b      	beq.n	8004d52 <HAL_RCC_OscConfig+0x15e>
 8004d3a:	4b49      	ldr	r3, [pc, #292]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d11c      	bne.n	8004d80 <HAL_RCC_OscConfig+0x18c>
 8004d46:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d116      	bne.n	8004d80 <HAL_RCC_OscConfig+0x18c>
 8004d52:	4b43      	ldr	r3, [pc, #268]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_RCC_OscConfig+0x176>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d001      	beq.n	8004d6a <HAL_RCC_OscConfig+0x176>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e1c0      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8004d6a:	4b3d      	ldr	r3, [pc, #244]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	4939      	ldr	r1, [pc, #228]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	600b      	str	r3, [r1, #0]
 8004d7e:	e03a      	b.n	8004df6 <HAL_RCC_OscConfig+0x202>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d020      	beq.n	8004dca <HAL_RCC_OscConfig+0x1d6>
 8004d88:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <HAL_RCC_OscConfig+0x270>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	f7fe fe83 	bl	8003a98 <HAL_GetTick>
 8004d92:	6138      	str	r0, [r7, #16]
 8004d94:	e008      	b.n	8004da8 <HAL_RCC_OscConfig+0x1b4>
 8004d96:	f7fe fe7f 	bl	8003a98 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCC_OscConfig+0x1b4>
 8004da4:	2303      	movs	r3, #3
 8004da6:	e1a1      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8004da8:	4b2d      	ldr	r3, [pc, #180]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCC_OscConfig+0x1a2>
 8004db4:	4b2a      	ldr	r3, [pc, #168]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4927      	ldr	r1, [pc, #156]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	600b      	str	r3, [r1, #0]
 8004dc8:	e015      	b.n	8004df6 <HAL_RCC_OscConfig+0x202>
 8004dca:	4b26      	ldr	r3, [pc, #152]	; (8004e64 <HAL_RCC_OscConfig+0x270>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	601a      	str	r2, [r3, #0]
 8004dd0:	f7fe fe62 	bl	8003a98 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]
 8004dd6:	e008      	b.n	8004dea <HAL_RCC_OscConfig+0x1f6>
 8004dd8:	f7fe fe5e 	bl	8003a98 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	2b02      	cmp	r3, #2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x1f6>
 8004de6:	2303      	movs	r3, #3
 8004de8:	e180      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8004dea:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f0      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x1e4>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d03a      	beq.n	8004e78 <HAL_RCC_OscConfig+0x284>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d019      	beq.n	8004e3e <HAL_RCC_OscConfig+0x24a>
 8004e0a:	4b17      	ldr	r3, [pc, #92]	; (8004e68 <HAL_RCC_OscConfig+0x274>)
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f7fe fe42 	bl	8003a98 <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x236>
 8004e18:	f7fe fe3e 	bl	8003a98 <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x236>
 8004e26:	2303      	movs	r3, #3
 8004e28:	e160      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <HAL_RCC_OscConfig+0x26c>)
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	f003 0302 	and.w	r3, r3, #2
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCC_OscConfig+0x224>
 8004e36:	2001      	movs	r0, #1
 8004e38:	f000 fada 	bl	80053f0 <RCC_Delay>
 8004e3c:	e01c      	b.n	8004e78 <HAL_RCC_OscConfig+0x284>
 8004e3e:	4b0a      	ldr	r3, [pc, #40]	; (8004e68 <HAL_RCC_OscConfig+0x274>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	f7fe fe28 	bl	8003a98 <HAL_GetTick>
 8004e48:	6138      	str	r0, [r7, #16]
 8004e4a:	e00f      	b.n	8004e6c <HAL_RCC_OscConfig+0x278>
 8004e4c:	f7fe fe24 	bl	8003a98 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	2b02      	cmp	r3, #2
 8004e58:	d908      	bls.n	8004e6c <HAL_RCC_OscConfig+0x278>
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e146      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8004e5e:	bf00      	nop
 8004e60:	40021000 	.word	0x40021000
 8004e64:	42420000 	.word	0x42420000
 8004e68:	42420480 	.word	0x42420480
 8004e6c:	4b92      	ldr	r3, [pc, #584]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e9      	bne.n	8004e4c <HAL_RCC_OscConfig+0x258>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0304 	and.w	r3, r3, #4
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 80a6 	beq.w	8004fd2 <HAL_RCC_OscConfig+0x3de>
 8004e86:	2300      	movs	r3, #0
 8004e88:	75fb      	strb	r3, [r7, #23]
 8004e8a:	4b8b      	ldr	r3, [pc, #556]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10d      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x2be>
 8004e96:	4b88      	ldr	r3, [pc, #544]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	4a87      	ldr	r2, [pc, #540]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	61d3      	str	r3, [r2, #28]
 8004ea2:	4b85      	ldr	r3, [pc, #532]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2301      	movs	r3, #1
 8004eb0:	75fb      	strb	r3, [r7, #23]
 8004eb2:	4b82      	ldr	r3, [pc, #520]	; (80050bc <HAL_RCC_OscConfig+0x4c8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d118      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x2fc>
 8004ebe:	4b7f      	ldr	r3, [pc, #508]	; (80050bc <HAL_RCC_OscConfig+0x4c8>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a7e      	ldr	r2, [pc, #504]	; (80050bc <HAL_RCC_OscConfig+0x4c8>)
 8004ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec8:	6013      	str	r3, [r2, #0]
 8004eca:	f7fe fde5 	bl	8003a98 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x2f0>
 8004ed2:	f7fe fde1 	bl	8003a98 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b64      	cmp	r3, #100	; 0x64
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x2f0>
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e103      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8004ee4:	4b75      	ldr	r3, [pc, #468]	; (80050bc <HAL_RCC_OscConfig+0x4c8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0f0      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x2de>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d106      	bne.n	8004f06 <HAL_RCC_OscConfig+0x312>
 8004ef8:	4b6f      	ldr	r3, [pc, #444]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	4a6e      	ldr	r2, [pc, #440]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	6213      	str	r3, [r2, #32]
 8004f04:	e02d      	b.n	8004f62 <HAL_RCC_OscConfig+0x36e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10c      	bne.n	8004f28 <HAL_RCC_OscConfig+0x334>
 8004f0e:	4b6a      	ldr	r3, [pc, #424]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	4a69      	ldr	r2, [pc, #420]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f14:	f023 0301 	bic.w	r3, r3, #1
 8004f18:	6213      	str	r3, [r2, #32]
 8004f1a:	4b67      	ldr	r3, [pc, #412]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	4a66      	ldr	r2, [pc, #408]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f20:	f023 0304 	bic.w	r3, r3, #4
 8004f24:	6213      	str	r3, [r2, #32]
 8004f26:	e01c      	b.n	8004f62 <HAL_RCC_OscConfig+0x36e>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	2b05      	cmp	r3, #5
 8004f2e:	d10c      	bne.n	8004f4a <HAL_RCC_OscConfig+0x356>
 8004f30:	4b61      	ldr	r3, [pc, #388]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	4a60      	ldr	r2, [pc, #384]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f36:	f043 0304 	orr.w	r3, r3, #4
 8004f3a:	6213      	str	r3, [r2, #32]
 8004f3c:	4b5e      	ldr	r3, [pc, #376]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	4a5d      	ldr	r2, [pc, #372]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f42:	f043 0301 	orr.w	r3, r3, #1
 8004f46:	6213      	str	r3, [r2, #32]
 8004f48:	e00b      	b.n	8004f62 <HAL_RCC_OscConfig+0x36e>
 8004f4a:	4b5b      	ldr	r3, [pc, #364]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	4a5a      	ldr	r2, [pc, #360]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	6213      	str	r3, [r2, #32]
 8004f56:	4b58      	ldr	r3, [pc, #352]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	4a57      	ldr	r2, [pc, #348]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	f023 0304 	bic.w	r3, r3, #4
 8004f60:	6213      	str	r3, [r2, #32]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d015      	beq.n	8004f96 <HAL_RCC_OscConfig+0x3a2>
 8004f6a:	f7fe fd95 	bl	8003a98 <HAL_GetTick>
 8004f6e:	6138      	str	r0, [r7, #16]
 8004f70:	e00a      	b.n	8004f88 <HAL_RCC_OscConfig+0x394>
 8004f72:	f7fe fd91 	bl	8003a98 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x394>
 8004f84:	2303      	movs	r3, #3
 8004f86:	e0b1      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8004f88:	4b4b      	ldr	r3, [pc, #300]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0ee      	beq.n	8004f72 <HAL_RCC_OscConfig+0x37e>
 8004f94:	e014      	b.n	8004fc0 <HAL_RCC_OscConfig+0x3cc>
 8004f96:	f7fe fd7f 	bl	8003a98 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]
 8004f9c:	e00a      	b.n	8004fb4 <HAL_RCC_OscConfig+0x3c0>
 8004f9e:	f7fe fd7b 	bl	8003a98 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x3c0>
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e09b      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8004fb4:	4b40      	ldr	r3, [pc, #256]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004fb6:	6a1b      	ldr	r3, [r3, #32]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1ee      	bne.n	8004f9e <HAL_RCC_OscConfig+0x3aa>
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d105      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x3de>
 8004fc6:	4b3c      	ldr	r3, [pc, #240]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	4a3b      	ldr	r2, [pc, #236]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004fcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	61d3      	str	r3, [r2, #28]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 8087 	beq.w	80050ea <HAL_RCC_OscConfig+0x4f6>
 8004fdc:	4b36      	ldr	r3, [pc, #216]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f003 030c 	and.w	r3, r3, #12
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d061      	beq.n	80050ac <HAL_RCC_OscConfig+0x4b8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d146      	bne.n	800507e <HAL_RCC_OscConfig+0x48a>
 8004ff0:	4b33      	ldr	r3, [pc, #204]	; (80050c0 <HAL_RCC_OscConfig+0x4cc>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	f7fe fd4f 	bl	8003a98 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x41c>
 8004ffe:	f7fe fd4b 	bl	8003a98 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x41c>
 800500c:	2303      	movs	r3, #3
 800500e:	e06d      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8005010:	4b29      	ldr	r3, [pc, #164]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1f0      	bne.n	8004ffe <HAL_RCC_OscConfig+0x40a>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005024:	d108      	bne.n	8005038 <HAL_RCC_OscConfig+0x444>
 8005026:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	4921      	ldr	r1, [pc, #132]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8005034:	4313      	orrs	r3, r2
 8005036:	604b      	str	r3, [r1, #4]
 8005038:	4b1f      	ldr	r3, [pc, #124]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a19      	ldr	r1, [r3, #32]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	430b      	orrs	r3, r1
 800504a:	491b      	ldr	r1, [pc, #108]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 800504c:	4313      	orrs	r3, r2
 800504e:	604b      	str	r3, [r1, #4]
 8005050:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <HAL_RCC_OscConfig+0x4cc>)
 8005052:	2201      	movs	r2, #1
 8005054:	601a      	str	r2, [r3, #0]
 8005056:	f7fe fd1f 	bl	8003a98 <HAL_GetTick>
 800505a:	6138      	str	r0, [r7, #16]
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x47c>
 800505e:	f7fe fd1b 	bl	8003a98 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x47c>
 800506c:	2303      	movs	r3, #3
 800506e:	e03d      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 8005070:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f0      	beq.n	800505e <HAL_RCC_OscConfig+0x46a>
 800507c:	e035      	b.n	80050ea <HAL_RCC_OscConfig+0x4f6>
 800507e:	4b10      	ldr	r3, [pc, #64]	; (80050c0 <HAL_RCC_OscConfig+0x4cc>)
 8005080:	2200      	movs	r2, #0
 8005082:	601a      	str	r2, [r3, #0]
 8005084:	f7fe fd08 	bl	8003a98 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0x4aa>
 800508c:	f7fe fd04 	bl	8003a98 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b02      	cmp	r3, #2
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0x4aa>
 800509a:	2303      	movs	r3, #3
 800509c:	e026      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 800509e:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <HAL_RCC_OscConfig+0x4c4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0x498>
 80050aa:	e01e      	b.n	80050ea <HAL_RCC_OscConfig+0x4f6>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d107      	bne.n	80050c4 <HAL_RCC_OscConfig+0x4d0>
 80050b4:	2301      	movs	r3, #1
 80050b6:	e019      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 80050b8:	40021000 	.word	0x40021000
 80050bc:	40007000 	.word	0x40007000
 80050c0:	42420060 	.word	0x42420060
 80050c4:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <HAL_RCC_OscConfig+0x500>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	60fb      	str	r3, [r7, #12]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d106      	bne.n	80050e6 <HAL_RCC_OscConfig+0x4f2>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d001      	beq.n	80050ea <HAL_RCC_OscConfig+0x4f6>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <HAL_RCC_OscConfig+0x4f8>
 80050ea:	2300      	movs	r3, #0
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40021000 	.word	0x40021000

080050f8 <HAL_RCC_ClockConfig>:
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b084      	sub	sp, #16
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d101      	bne.n	800510c <HAL_RCC_ClockConfig+0x14>
 8005108:	2301      	movs	r3, #1
 800510a:	e0d0      	b.n	80052ae <HAL_RCC_ClockConfig+0x1b6>
 800510c:	4b6a      	ldr	r3, [pc, #424]	; (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d910      	bls.n	800513c <HAL_RCC_ClockConfig+0x44>
 800511a:	4b67      	ldr	r3, [pc, #412]	; (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 0207 	bic.w	r2, r3, #7
 8005122:	4965      	ldr	r1, [pc, #404]	; (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]
 800512a:	4b63      	ldr	r3, [pc, #396]	; (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_ClockConfig+0x44>
 8005138:	2301      	movs	r3, #1
 800513a:	e0b8      	b.n	80052ae <HAL_RCC_ClockConfig+0x1b6>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d020      	beq.n	800518a <HAL_RCC_ClockConfig+0x92>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <HAL_RCC_ClockConfig+0x68>
 8005154:	4b59      	ldr	r3, [pc, #356]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	4a58      	ldr	r2, [pc, #352]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 800515a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800515e:	6053      	str	r3, [r2, #4]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0308 	and.w	r3, r3, #8
 8005168:	2b00      	cmp	r3, #0
 800516a:	d005      	beq.n	8005178 <HAL_RCC_ClockConfig+0x80>
 800516c:	4b53      	ldr	r3, [pc, #332]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	4a52      	ldr	r2, [pc, #328]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005172:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005176:	6053      	str	r3, [r2, #4]
 8005178:	4b50      	ldr	r3, [pc, #320]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	494d      	ldr	r1, [pc, #308]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005186:	4313      	orrs	r3, r2
 8005188:	604b      	str	r3, [r1, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d040      	beq.n	8005218 <HAL_RCC_ClockConfig+0x120>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d107      	bne.n	80051ae <HAL_RCC_ClockConfig+0xb6>
 800519e:	4b47      	ldr	r3, [pc, #284]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d115      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xde>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e07f      	b.n	80052ae <HAL_RCC_ClockConfig+0x1b6>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d107      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xce>
 80051b6:	4b41      	ldr	r3, [pc, #260]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d109      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xde>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e073      	b.n	80052ae <HAL_RCC_ClockConfig+0x1b6>
 80051c6:	4b3d      	ldr	r3, [pc, #244]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <HAL_RCC_ClockConfig+0xde>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e06b      	b.n	80052ae <HAL_RCC_ClockConfig+0x1b6>
 80051d6:	4b39      	ldr	r3, [pc, #228]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f023 0203 	bic.w	r2, r3, #3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	4936      	ldr	r1, [pc, #216]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	604b      	str	r3, [r1, #4]
 80051e8:	f7fe fc56 	bl	8003a98 <HAL_GetTick>
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	e00a      	b.n	8005206 <HAL_RCC_ClockConfig+0x10e>
 80051f0:	f7fe fc52 	bl	8003a98 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_ClockConfig+0x10e>
 8005202:	2303      	movs	r3, #3
 8005204:	e053      	b.n	80052ae <HAL_RCC_ClockConfig+0x1b6>
 8005206:	4b2d      	ldr	r3, [pc, #180]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 020c 	and.w	r2, r3, #12
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	429a      	cmp	r2, r3
 8005216:	d1eb      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xf8>
 8005218:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d210      	bcs.n	8005248 <HAL_RCC_ClockConfig+0x150>
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f023 0207 	bic.w	r2, r3, #7
 800522e:	4922      	ldr	r1, [pc, #136]	; (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	4313      	orrs	r3, r2
 8005234:	600b      	str	r3, [r1, #0]
 8005236:	4b20      	ldr	r3, [pc, #128]	; (80052b8 <HAL_RCC_ClockConfig+0x1c0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f003 0307 	and.w	r3, r3, #7
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	429a      	cmp	r2, r3
 8005242:	d001      	beq.n	8005248 <HAL_RCC_ClockConfig+0x150>
 8005244:	2301      	movs	r3, #1
 8005246:	e032      	b.n	80052ae <HAL_RCC_ClockConfig+0x1b6>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <HAL_RCC_ClockConfig+0x16e>
 8005254:	4b19      	ldr	r3, [pc, #100]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4916      	ldr	r1, [pc, #88]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005262:	4313      	orrs	r3, r2
 8005264:	604b      	str	r3, [r1, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <HAL_RCC_ClockConfig+0x18e>
 8005272:	4b12      	ldr	r3, [pc, #72]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	490e      	ldr	r1, [pc, #56]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 8005282:	4313      	orrs	r3, r2
 8005284:	604b      	str	r3, [r1, #4]
 8005286:	f000 f821 	bl	80052cc <HAL_RCC_GetSysClockFreq>
 800528a:	4602      	mov	r2, r0
 800528c:	4b0b      	ldr	r3, [pc, #44]	; (80052bc <HAL_RCC_ClockConfig+0x1c4>)
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	091b      	lsrs	r3, r3, #4
 8005292:	f003 030f 	and.w	r3, r3, #15
 8005296:	490a      	ldr	r1, [pc, #40]	; (80052c0 <HAL_RCC_ClockConfig+0x1c8>)
 8005298:	5ccb      	ldrb	r3, [r1, r3]
 800529a:	fa22 f303 	lsr.w	r3, r2, r3
 800529e:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <HAL_RCC_ClockConfig+0x1cc>)
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b09      	ldr	r3, [pc, #36]	; (80052c8 <HAL_RCC_ClockConfig+0x1d0>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fe fbb4 	bl	8003a14 <HAL_InitTick>
 80052ac:	2300      	movs	r3, #0
 80052ae:	4618      	mov	r0, r3
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40022000 	.word	0x40022000
 80052bc:	40021000 	.word	0x40021000
 80052c0:	08008534 	.word	0x08008534
 80052c4:	20000004 	.word	0x20000004
 80052c8:	20000008 	.word	0x20000008

080052cc <HAL_RCC_GetSysClockFreq>:
 80052cc:	b490      	push	{r4, r7}
 80052ce:	b08a      	sub	sp, #40	; 0x28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	4b29      	ldr	r3, [pc, #164]	; (8005378 <HAL_RCC_GetSysClockFreq+0xac>)
 80052d4:	1d3c      	adds	r4, r7, #4
 80052d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80052d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80052dc:	f240 2301 	movw	r3, #513	; 0x201
 80052e0:	803b      	strh	r3, [r7, #0]
 80052e2:	2300      	movs	r3, #0
 80052e4:	61fb      	str	r3, [r7, #28]
 80052e6:	2300      	movs	r3, #0
 80052e8:	61bb      	str	r3, [r7, #24]
 80052ea:	2300      	movs	r3, #0
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
 80052ee:	2300      	movs	r3, #0
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	2300      	movs	r3, #0
 80052f4:	623b      	str	r3, [r7, #32]
 80052f6:	4b21      	ldr	r3, [pc, #132]	; (800537c <HAL_RCC_GetSysClockFreq+0xb0>)
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f003 030c 	and.w	r3, r3, #12
 8005302:	2b04      	cmp	r3, #4
 8005304:	d002      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x40>
 8005306:	2b08      	cmp	r3, #8
 8005308:	d003      	beq.n	8005312 <HAL_RCC_GetSysClockFreq+0x46>
 800530a:	e02b      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x98>
 800530c:	4b1c      	ldr	r3, [pc, #112]	; (8005380 <HAL_RCC_GetSysClockFreq+0xb4>)
 800530e:	623b      	str	r3, [r7, #32]
 8005310:	e02b      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x9e>
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	0c9b      	lsrs	r3, r3, #18
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	3328      	adds	r3, #40	; 0x28
 800531c:	443b      	add	r3, r7
 800531e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d012      	beq.n	8005354 <HAL_RCC_GetSysClockFreq+0x88>
 800532e:	4b13      	ldr	r3, [pc, #76]	; (800537c <HAL_RCC_GetSysClockFreq+0xb0>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	0c5b      	lsrs	r3, r3, #17
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	3328      	adds	r3, #40	; 0x28
 800533a:	443b      	add	r3, r7
 800533c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	4a0e      	ldr	r2, [pc, #56]	; (8005380 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005346:	fb03 f202 	mul.w	r2, r3, r2
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
 8005352:	e004      	b.n	800535e <HAL_RCC_GetSysClockFreq+0x92>
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	4a0b      	ldr	r2, [pc, #44]	; (8005384 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005358:	fb02 f303 	mul.w	r3, r2, r3
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	623b      	str	r3, [r7, #32]
 8005362:	e002      	b.n	800536a <HAL_RCC_GetSysClockFreq+0x9e>
 8005364:	4b08      	ldr	r3, [pc, #32]	; (8005388 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005366:	623b      	str	r3, [r7, #32]
 8005368:	bf00      	nop
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	4618      	mov	r0, r3
 800536e:	3728      	adds	r7, #40	; 0x28
 8005370:	46bd      	mov	sp, r7
 8005372:	bc90      	pop	{r4, r7}
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	08008510 	.word	0x08008510
 800537c:	40021000 	.word	0x40021000
 8005380:	00f42400 	.word	0x00f42400
 8005384:	003d0900 	.word	0x003d0900
 8005388:	007a1200 	.word	0x007a1200

0800538c <HAL_RCC_GetHCLKFreq>:
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
 8005390:	4b02      	ldr	r3, [pc, #8]	; (800539c <HAL_RCC_GetHCLKFreq+0x10>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4618      	mov	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	bc80      	pop	{r7}
 800539a:	4770      	bx	lr
 800539c:	20000004 	.word	0x20000004

080053a0 <HAL_RCC_GetPCLK1Freq>:
 80053a0:	b580      	push	{r7, lr}
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	f7ff fff2 	bl	800538c <HAL_RCC_GetHCLKFreq>
 80053a8:	4602      	mov	r2, r0
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	0a1b      	lsrs	r3, r3, #8
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4903      	ldr	r1, [pc, #12]	; (80053c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053b6:	5ccb      	ldrb	r3, [r1, r3]
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
 80053bc:	4618      	mov	r0, r3
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	40021000 	.word	0x40021000
 80053c4:	08008544 	.word	0x08008544

080053c8 <HAL_RCC_GetPCLK2Freq>:
 80053c8:	b580      	push	{r7, lr}
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	f7ff ffde 	bl	800538c <HAL_RCC_GetHCLKFreq>
 80053d0:	4602      	mov	r2, r0
 80053d2:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	0adb      	lsrs	r3, r3, #11
 80053d8:	f003 0307 	and.w	r3, r3, #7
 80053dc:	4903      	ldr	r1, [pc, #12]	; (80053ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80053de:	5ccb      	ldrb	r3, [r1, r3]
 80053e0:	fa22 f303 	lsr.w	r3, r2, r3
 80053e4:	4618      	mov	r0, r3
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	40021000 	.word	0x40021000
 80053ec:	08008544 	.word	0x08008544

080053f0 <RCC_Delay>:
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	4b0a      	ldr	r3, [pc, #40]	; (8005424 <RCC_Delay+0x34>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a0a      	ldr	r2, [pc, #40]	; (8005428 <RCC_Delay+0x38>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	0a5b      	lsrs	r3, r3, #9
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	fb02 f303 	mul.w	r3, r2, r3
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	bf00      	nop
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	1e5a      	subs	r2, r3, #1
 8005412:	60fa      	str	r2, [r7, #12]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f9      	bne.n	800540c <RCC_Delay+0x1c>
 8005418:	bf00      	nop
 800541a:	bf00      	nop
 800541c:	3714      	adds	r7, #20
 800541e:	46bd      	mov	sp, r7
 8005420:	bc80      	pop	{r7}
 8005422:	4770      	bx	lr
 8005424:	20000004 	.word	0x20000004
 8005428:	10624dd3 	.word	0x10624dd3

0800542c <HAL_TIM_Base_Init>:
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_TIM_Base_Init+0x12>
 800543a:	2301      	movs	r3, #1
 800543c:	e041      	b.n	80054c2 <HAL_TIM_Base_Init+0x96>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d106      	bne.n	8005458 <HAL_TIM_Base_Init+0x2c>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fd fee2 	bl	800321c <HAL_TIM_Base_MspInit>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f000 fd88 	bl	8005f80 <TIM_Base_SetConfig>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054c0:	2300      	movs	r3, #0
 80054c2:	4618      	mov	r0, r3
 80054c4:	3708      	adds	r7, #8
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
	...

080054cc <HAL_TIM_Base_Start_IT>:
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d001      	beq.n	80054e4 <HAL_TIM_Base_Start_IT+0x18>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e044      	b.n	800556e <HAL_TIM_Base_Start_IT+0xa2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2202      	movs	r2, #2
 80054e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f042 0201 	orr.w	r2, r2, #1
 80054fa:	60da      	str	r2, [r3, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1d      	ldr	r2, [pc, #116]	; (8005578 <HAL_TIM_Base_Start_IT+0xac>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d018      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x6c>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1c      	ldr	r2, [pc, #112]	; (800557c <HAL_TIM_Base_Start_IT+0xb0>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d013      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x6c>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005518:	d00e      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x6c>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a18      	ldr	r2, [pc, #96]	; (8005580 <HAL_TIM_Base_Start_IT+0xb4>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d009      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x6c>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a16      	ldr	r2, [pc, #88]	; (8005584 <HAL_TIM_Base_Start_IT+0xb8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d004      	beq.n	8005538 <HAL_TIM_Base_Start_IT+0x6c>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a15      	ldr	r2, [pc, #84]	; (8005588 <HAL_TIM_Base_Start_IT+0xbc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d111      	bne.n	800555c <HAL_TIM_Base_Start_IT+0x90>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b06      	cmp	r3, #6
 8005548:	d010      	beq.n	800556c <HAL_TIM_Base_Start_IT+0xa0>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0201 	orr.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]
 800555a:	e007      	b.n	800556c <HAL_TIM_Base_Start_IT+0xa0>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f042 0201 	orr.w	r2, r2, #1
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	2300      	movs	r3, #0
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	bc80      	pop	{r7}
 8005576:	4770      	bx	lr
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40013400 	.word	0x40013400
 8005580:	40000400 	.word	0x40000400
 8005584:	40000800 	.word	0x40000800
 8005588:	40000c00 	.word	0x40000c00

0800558c <HAL_TIM_PWM_Init>:
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d101      	bne.n	800559e <HAL_TIM_PWM_Init+0x12>
 800559a:	2301      	movs	r3, #1
 800559c:	e041      	b.n	8005622 <HAL_TIM_PWM_Init+0x96>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d106      	bne.n	80055b8 <HAL_TIM_PWM_Init+0x2c>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f839 	bl	800562a <HAL_TIM_PWM_MspInit>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4619      	mov	r1, r3
 80055ca:	4610      	mov	r0, r2
 80055cc:	f000 fcd8 	bl	8005f80 <TIM_Base_SetConfig>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2201      	movs	r2, #1
 80055e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005620:	2300      	movs	r3, #0
 8005622:	4618      	mov	r0, r3
 8005624:	3708      	adds	r7, #8
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <HAL_TIM_PWM_MspInit>:
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	bc80      	pop	{r7}
 800563a:	4770      	bx	lr

0800563c <HAL_TIM_PWM_Start>:
 800563c:	b580      	push	{r7, lr}
 800563e:	b084      	sub	sp, #16
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <HAL_TIM_PWM_Start+0x24>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	bf14      	ite	ne
 8005658:	2301      	movne	r3, #1
 800565a:	2300      	moveq	r3, #0
 800565c:	b2db      	uxtb	r3, r3
 800565e:	e022      	b.n	80056a6 <HAL_TIM_PWM_Start+0x6a>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2b04      	cmp	r3, #4
 8005664:	d109      	bne.n	800567a <HAL_TIM_PWM_Start+0x3e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b01      	cmp	r3, #1
 8005670:	bf14      	ite	ne
 8005672:	2301      	movne	r3, #1
 8005674:	2300      	moveq	r3, #0
 8005676:	b2db      	uxtb	r3, r3
 8005678:	e015      	b.n	80056a6 <HAL_TIM_PWM_Start+0x6a>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b08      	cmp	r3, #8
 800567e:	d109      	bne.n	8005694 <HAL_TIM_PWM_Start+0x58>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	bf14      	ite	ne
 800568c:	2301      	movne	r3, #1
 800568e:	2300      	moveq	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	e008      	b.n	80056a6 <HAL_TIM_PWM_Start+0x6a>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	bf14      	ite	ne
 80056a0:	2301      	movne	r3, #1
 80056a2:	2300      	moveq	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_TIM_PWM_Start+0x72>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e072      	b.n	8005794 <HAL_TIM_PWM_Start+0x158>
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <HAL_TIM_PWM_Start+0x82>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056bc:	e013      	b.n	80056e6 <HAL_TIM_PWM_Start+0xaa>
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d104      	bne.n	80056ce <HAL_TIM_PWM_Start+0x92>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2202      	movs	r2, #2
 80056c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056cc:	e00b      	b.n	80056e6 <HAL_TIM_PWM_Start+0xaa>
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d104      	bne.n	80056de <HAL_TIM_PWM_Start+0xa2>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056dc:	e003      	b.n	80056e6 <HAL_TIM_PWM_Start+0xaa>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2202      	movs	r2, #2
 80056e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2201      	movs	r2, #1
 80056ec:	6839      	ldr	r1, [r7, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 ff02 	bl	80064f8 <TIM_CCxChannelCmd>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a28      	ldr	r2, [pc, #160]	; (800579c <HAL_TIM_PWM_Start+0x160>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d004      	beq.n	8005708 <HAL_TIM_PWM_Start+0xcc>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a27      	ldr	r2, [pc, #156]	; (80057a0 <HAL_TIM_PWM_Start+0x164>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d101      	bne.n	800570c <HAL_TIM_PWM_Start+0xd0>
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <HAL_TIM_PWM_Start+0xd2>
 800570c:	2300      	movs	r3, #0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <HAL_TIM_PWM_Start+0xe6>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005720:	645a      	str	r2, [r3, #68]	; 0x44
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a1d      	ldr	r2, [pc, #116]	; (800579c <HAL_TIM_PWM_Start+0x160>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d018      	beq.n	800575e <HAL_TIM_PWM_Start+0x122>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1b      	ldr	r2, [pc, #108]	; (80057a0 <HAL_TIM_PWM_Start+0x164>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d013      	beq.n	800575e <HAL_TIM_PWM_Start+0x122>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573e:	d00e      	beq.n	800575e <HAL_TIM_PWM_Start+0x122>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a17      	ldr	r2, [pc, #92]	; (80057a4 <HAL_TIM_PWM_Start+0x168>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d009      	beq.n	800575e <HAL_TIM_PWM_Start+0x122>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <HAL_TIM_PWM_Start+0x16c>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d004      	beq.n	800575e <HAL_TIM_PWM_Start+0x122>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a14      	ldr	r2, [pc, #80]	; (80057ac <HAL_TIM_PWM_Start+0x170>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d111      	bne.n	8005782 <HAL_TIM_PWM_Start+0x146>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	60fb      	str	r3, [r7, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b06      	cmp	r3, #6
 800576e:	d010      	beq.n	8005792 <HAL_TIM_PWM_Start+0x156>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f042 0201 	orr.w	r2, r2, #1
 800577e:	601a      	str	r2, [r3, #0]
 8005780:	e007      	b.n	8005792 <HAL_TIM_PWM_Start+0x156>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0201 	orr.w	r2, r2, #1
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	2300      	movs	r3, #0
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	40012c00 	.word	0x40012c00
 80057a0:	40013400 	.word	0x40013400
 80057a4:	40000400 	.word	0x40000400
 80057a8:	40000800 	.word	0x40000800
 80057ac:	40000c00 	.word	0x40000c00

080057b0 <HAL_TIM_Encoder_Init>:
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d101      	bne.n	80057c4 <HAL_TIM_Encoder_Init+0x14>
 80057c0:	2301      	movs	r3, #1
 80057c2:	e093      	b.n	80058ec <HAL_TIM_Encoder_Init+0x13c>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <HAL_TIM_Encoder_Init+0x2e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7fd fd6d 	bl	80032b8 <HAL_TIM_Encoder_MspInit>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2202      	movs	r2, #2
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6812      	ldr	r2, [r2, #0]
 80057f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057f4:	f023 0307 	bic.w	r3, r3, #7
 80057f8:	6093      	str	r3, [r2, #8]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	4619      	mov	r1, r3
 8005804:	4610      	mov	r0, r2
 8005806:	f000 fbbb 	bl	8005f80 <TIM_Base_SetConfig>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	617b      	str	r3, [r7, #20]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005832:	f023 0303 	bic.w	r3, r3, #3
 8005836:	613b      	str	r3, [r7, #16]
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	699b      	ldr	r3, [r3, #24]
 8005840:	021b      	lsls	r3, r3, #8
 8005842:	4313      	orrs	r3, r2
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	4313      	orrs	r3, r2
 8005848:	613b      	str	r3, [r7, #16]
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005850:	f023 030c 	bic.w	r3, r3, #12
 8005854:	613b      	str	r3, [r7, #16]
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800585c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68da      	ldr	r2, [r3, #12]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	4313      	orrs	r3, r2
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	4313      	orrs	r3, r2
 8005872:	613b      	str	r3, [r7, #16]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	011a      	lsls	r2, r3, #4
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	031b      	lsls	r3, r3, #12
 8005880:	4313      	orrs	r3, r2
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	4313      	orrs	r3, r2
 8005886:	613b      	str	r3, [r7, #16]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	4313      	orrs	r3, r2
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4313      	orrs	r3, r2
 80058a0:	60fb      	str	r3, [r7, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	609a      	str	r2, [r3, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	619a      	str	r2, [r3, #24]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68fa      	ldr	r2, [r7, #12]
 80058b8:	621a      	str	r2, [r3, #32]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2201      	movs	r2, #1
 80058d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2201      	movs	r2, #1
 80058de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058ea:	2300      	movs	r3, #0
 80058ec:	4618      	mov	r0, r3
 80058ee:	3718      	adds	r7, #24
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <HAL_TIM_Encoder_Start>:
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005904:	73fb      	strb	r3, [r7, #15]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800590c:	73bb      	strb	r3, [r7, #14]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005914:	737b      	strb	r3, [r7, #13]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800591c:	733b      	strb	r3, [r7, #12]
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d110      	bne.n	8005946 <HAL_TIM_Encoder_Start+0x52>
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d102      	bne.n	8005930 <HAL_TIM_Encoder_Start+0x3c>
 800592a:	7b7b      	ldrb	r3, [r7, #13]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d001      	beq.n	8005934 <HAL_TIM_Encoder_Start+0x40>
 8005930:	2301      	movs	r3, #1
 8005932:	e069      	b.n	8005a08 <HAL_TIM_Encoder_Start+0x114>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005944:	e031      	b.n	80059aa <HAL_TIM_Encoder_Start+0xb6>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b04      	cmp	r3, #4
 800594a:	d110      	bne.n	800596e <HAL_TIM_Encoder_Start+0x7a>
 800594c:	7bbb      	ldrb	r3, [r7, #14]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d102      	bne.n	8005958 <HAL_TIM_Encoder_Start+0x64>
 8005952:	7b3b      	ldrb	r3, [r7, #12]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d001      	beq.n	800595c <HAL_TIM_Encoder_Start+0x68>
 8005958:	2301      	movs	r3, #1
 800595a:	e055      	b.n	8005a08 <HAL_TIM_Encoder_Start+0x114>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800596c:	e01d      	b.n	80059aa <HAL_TIM_Encoder_Start+0xb6>
 800596e:	7bfb      	ldrb	r3, [r7, #15]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d108      	bne.n	8005986 <HAL_TIM_Encoder_Start+0x92>
 8005974:	7bbb      	ldrb	r3, [r7, #14]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d105      	bne.n	8005986 <HAL_TIM_Encoder_Start+0x92>
 800597a:	7b7b      	ldrb	r3, [r7, #13]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d102      	bne.n	8005986 <HAL_TIM_Encoder_Start+0x92>
 8005980:	7b3b      	ldrb	r3, [r7, #12]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d001      	beq.n	800598a <HAL_TIM_Encoder_Start+0x96>
 8005986:	2301      	movs	r3, #1
 8005988:	e03e      	b.n	8005a08 <HAL_TIM_Encoder_Start+0x114>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2202      	movs	r2, #2
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2202      	movs	r2, #2
 8005996:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2202      	movs	r2, #2
 800599e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2202      	movs	r2, #2
 80059a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_TIM_Encoder_Start+0xc4>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d008      	beq.n	80059c8 <HAL_TIM_Encoder_Start+0xd4>
 80059b6:	e00f      	b.n	80059d8 <HAL_TIM_Encoder_Start+0xe4>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2201      	movs	r2, #1
 80059be:	2100      	movs	r1, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fd99 	bl	80064f8 <TIM_CCxChannelCmd>
 80059c6:	e016      	b.n	80059f6 <HAL_TIM_Encoder_Start+0x102>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2201      	movs	r2, #1
 80059ce:	2104      	movs	r1, #4
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fd91 	bl	80064f8 <TIM_CCxChannelCmd>
 80059d6:	e00e      	b.n	80059f6 <HAL_TIM_Encoder_Start+0x102>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2201      	movs	r2, #1
 80059de:	2100      	movs	r1, #0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fd89 	bl	80064f8 <TIM_CCxChannelCmd>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2201      	movs	r2, #1
 80059ec:	2104      	movs	r1, #4
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fd82 	bl	80064f8 <TIM_CCxChannelCmd>
 80059f4:	bf00      	nop
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0201 	orr.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	2300      	movs	r3, #0
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_TIM_IRQHandler>:
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d122      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x5c>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d11b      	bne.n	8005a6c <HAL_TIM_IRQHandler+0x5c>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0202 	mvn.w	r2, #2
 8005a3c:	611a      	str	r2, [r3, #16]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	771a      	strb	r2, [r3, #28]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_TIM_IRQHandler+0x4a>
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fa78 	bl	8005f48 <HAL_TIM_IC_CaptureCallback>
 8005a58:	e005      	b.n	8005a66 <HAL_TIM_IRQHandler+0x56>
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fa6b 	bl	8005f36 <HAL_TIM_OC_DelayElapsedCallback>
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 fa7a 	bl	8005f5a <HAL_TIM_PWM_PulseFinishedCallback>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	771a      	strb	r2, [r3, #28]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d122      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0xb0>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f003 0304 	and.w	r3, r3, #4
 8005a84:	2b04      	cmp	r3, #4
 8005a86:	d11b      	bne.n	8005ac0 <HAL_TIM_IRQHandler+0xb0>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0204 	mvn.w	r2, #4
 8005a90:	611a      	str	r2, [r3, #16]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2202      	movs	r2, #2
 8005a96:	771a      	strb	r2, [r3, #28]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_TIM_IRQHandler+0x9e>
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fa4e 	bl	8005f48 <HAL_TIM_IC_CaptureCallback>
 8005aac:	e005      	b.n	8005aba <HAL_TIM_IRQHandler+0xaa>
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fa41 	bl	8005f36 <HAL_TIM_OC_DelayElapsedCallback>
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fa50 	bl	8005f5a <HAL_TIM_PWM_PulseFinishedCallback>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	771a      	strb	r2, [r3, #28]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f003 0308 	and.w	r3, r3, #8
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	d122      	bne.n	8005b14 <HAL_TIM_IRQHandler+0x104>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f003 0308 	and.w	r3, r3, #8
 8005ad8:	2b08      	cmp	r3, #8
 8005ada:	d11b      	bne.n	8005b14 <HAL_TIM_IRQHandler+0x104>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f06f 0208 	mvn.w	r2, #8
 8005ae4:	611a      	str	r2, [r3, #16]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2204      	movs	r2, #4
 8005aea:	771a      	strb	r2, [r3, #28]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	f003 0303 	and.w	r3, r3, #3
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_TIM_IRQHandler+0xf2>
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fa24 	bl	8005f48 <HAL_TIM_IC_CaptureCallback>
 8005b00:	e005      	b.n	8005b0e <HAL_TIM_IRQHandler+0xfe>
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fa17 	bl	8005f36 <HAL_TIM_OC_DelayElapsedCallback>
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fa26 	bl	8005f5a <HAL_TIM_PWM_PulseFinishedCallback>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	771a      	strb	r2, [r3, #28]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	2b10      	cmp	r3, #16
 8005b20:	d122      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x158>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68db      	ldr	r3, [r3, #12]
 8005b28:	f003 0310 	and.w	r3, r3, #16
 8005b2c:	2b10      	cmp	r3, #16
 8005b2e:	d11b      	bne.n	8005b68 <HAL_TIM_IRQHandler+0x158>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f06f 0210 	mvn.w	r2, #16
 8005b38:	611a      	str	r2, [r3, #16]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2208      	movs	r2, #8
 8005b3e:	771a      	strb	r2, [r3, #28]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <HAL_TIM_IRQHandler+0x146>
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f000 f9fa 	bl	8005f48 <HAL_TIM_IC_CaptureCallback>
 8005b54:	e005      	b.n	8005b62 <HAL_TIM_IRQHandler+0x152>
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f9ed 	bl	8005f36 <HAL_TIM_OC_DelayElapsedCallback>
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f9fc 	bl	8005f5a <HAL_TIM_PWM_PulseFinishedCallback>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	771a      	strb	r2, [r3, #28]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d10e      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x184>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d107      	bne.n	8005b94 <HAL_TIM_IRQHandler+0x184>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f06f 0201 	mvn.w	r2, #1
 8005b8c:	611a      	str	r2, [r3, #16]
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9c8 	bl	8005f24 <HAL_TIM_PeriodElapsedCallback>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9e:	2b80      	cmp	r3, #128	; 0x80
 8005ba0:	d10e      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x1b0>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bac:	2b80      	cmp	r3, #128	; 0x80
 8005bae:	d107      	bne.n	8005bc0 <HAL_TIM_IRQHandler+0x1b0>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bb8:	611a      	str	r2, [r3, #16]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fd86 	bl	80066cc <HAL_TIMEx_BreakCallback>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bca:	2b40      	cmp	r3, #64	; 0x40
 8005bcc:	d10e      	bne.n	8005bec <HAL_TIM_IRQHandler+0x1dc>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b40      	cmp	r3, #64	; 0x40
 8005bda:	d107      	bne.n	8005bec <HAL_TIM_IRQHandler+0x1dc>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005be4:	611a      	str	r2, [r3, #16]
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f9c0 	bl	8005f6c <HAL_TIM_TriggerCallback>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f003 0320 	and.w	r3, r3, #32
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d10e      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x208>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0320 	and.w	r3, r3, #32
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d107      	bne.n	8005c18 <HAL_TIM_IRQHandler+0x208>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f06f 0220 	mvn.w	r2, #32
 8005c10:	611a      	str	r2, [r3, #16]
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 fd51 	bl	80066ba <HAL_TIMEx_CommutCallback>
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_TIM_PWM_ConfigChannel>:
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e0ac      	b.n	8005d94 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b0c      	cmp	r3, #12
 8005c46:	f200 809f 	bhi.w	8005d88 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005c4a:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005c85 	.word	0x08005c85
 8005c54:	08005d89 	.word	0x08005d89
 8005c58:	08005d89 	.word	0x08005d89
 8005c5c:	08005d89 	.word	0x08005d89
 8005c60:	08005cc5 	.word	0x08005cc5
 8005c64:	08005d89 	.word	0x08005d89
 8005c68:	08005d89 	.word	0x08005d89
 8005c6c:	08005d89 	.word	0x08005d89
 8005c70:	08005d07 	.word	0x08005d07
 8005c74:	08005d89 	.word	0x08005d89
 8005c78:	08005d89 	.word	0x08005d89
 8005c7c:	08005d89 	.word	0x08005d89
 8005c80:	08005d47 	.word	0x08005d47
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 f9f2 	bl	8006074 <TIM_OC1_SetConfig>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	699a      	ldr	r2, [r3, #24]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f042 0208 	orr.w	r2, r2, #8
 8005c9e:	619a      	str	r2, [r3, #24]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 0204 	bic.w	r2, r2, #4
 8005cae:	619a      	str	r2, [r3, #24]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6999      	ldr	r1, [r3, #24]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	691a      	ldr	r2, [r3, #16]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	619a      	str	r2, [r3, #24]
 8005cc2:	e062      	b.n	8005d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f000 fa42 	bl	8006154 <TIM_OC2_SetConfig>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	699a      	ldr	r2, [r3, #24]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cde:	619a      	str	r2, [r3, #24]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cee:	619a      	str	r2, [r3, #24]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6999      	ldr	r1, [r3, #24]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	021a      	lsls	r2, r3, #8
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	619a      	str	r2, [r3, #24]
 8005d04:	e041      	b.n	8005d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 fa95 	bl	800623c <TIM_OC3_SetConfig>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69da      	ldr	r2, [r3, #28]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0208 	orr.w	r2, r2, #8
 8005d20:	61da      	str	r2, [r3, #28]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69da      	ldr	r2, [r3, #28]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f022 0204 	bic.w	r2, r2, #4
 8005d30:	61da      	str	r2, [r3, #28]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69d9      	ldr	r1, [r3, #28]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	430a      	orrs	r2, r1
 8005d42:	61da      	str	r2, [r3, #28]
 8005d44:	e021      	b.n	8005d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68b9      	ldr	r1, [r7, #8]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f000 fae9 	bl	8006324 <TIM_OC4_SetConfig>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69da      	ldr	r2, [r3, #28]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d60:	61da      	str	r2, [r3, #28]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69da      	ldr	r2, [r3, #28]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d70:	61da      	str	r2, [r3, #28]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69d9      	ldr	r1, [r3, #28]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	021a      	lsls	r2, r3, #8
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	430a      	orrs	r2, r1
 8005d84:	61da      	str	r2, [r3, #28]
 8005d86:	e000      	b.n	8005d8a <HAL_TIM_PWM_ConfigChannel+0x16a>
 8005d88:	bf00      	nop
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d92:	2300      	movs	r3, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_TIM_ConfigClockSource>:
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_TIM_ConfigClockSource+0x18>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e0b3      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x180>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dd2:	60fb      	str	r3, [r7, #12]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	609a      	str	r2, [r3, #8]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dec:	d03e      	beq.n	8005e6c <HAL_TIM_ConfigClockSource+0xd0>
 8005dee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df2:	f200 8087 	bhi.w	8005f04 <HAL_TIM_ConfigClockSource+0x168>
 8005df6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dfa:	f000 8085 	beq.w	8005f08 <HAL_TIM_ConfigClockSource+0x16c>
 8005dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e02:	d87f      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x168>
 8005e04:	2b70      	cmp	r3, #112	; 0x70
 8005e06:	d01a      	beq.n	8005e3e <HAL_TIM_ConfigClockSource+0xa2>
 8005e08:	2b70      	cmp	r3, #112	; 0x70
 8005e0a:	d87b      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x168>
 8005e0c:	2b60      	cmp	r3, #96	; 0x60
 8005e0e:	d050      	beq.n	8005eb2 <HAL_TIM_ConfigClockSource+0x116>
 8005e10:	2b60      	cmp	r3, #96	; 0x60
 8005e12:	d877      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x168>
 8005e14:	2b50      	cmp	r3, #80	; 0x50
 8005e16:	d03c      	beq.n	8005e92 <HAL_TIM_ConfigClockSource+0xf6>
 8005e18:	2b50      	cmp	r3, #80	; 0x50
 8005e1a:	d873      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x168>
 8005e1c:	2b40      	cmp	r3, #64	; 0x40
 8005e1e:	d058      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0x136>
 8005e20:	2b40      	cmp	r3, #64	; 0x40
 8005e22:	d86f      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x168>
 8005e24:	2b30      	cmp	r3, #48	; 0x30
 8005e26:	d064      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x156>
 8005e28:	2b30      	cmp	r3, #48	; 0x30
 8005e2a:	d86b      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x168>
 8005e2c:	2b20      	cmp	r3, #32
 8005e2e:	d060      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x156>
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	d867      	bhi.n	8005f04 <HAL_TIM_ConfigClockSource+0x168>
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d05c      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x156>
 8005e38:	2b10      	cmp	r3, #16
 8005e3a:	d05a      	beq.n	8005ef2 <HAL_TIM_ConfigClockSource+0x156>
 8005e3c:	e062      	b.n	8005f04 <HAL_TIM_ConfigClockSource+0x168>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6818      	ldr	r0, [r3, #0]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	6899      	ldr	r1, [r3, #8]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f000 fb34 	bl	80064ba <TIM_ETR_SetConfig>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	60fb      	str	r3, [r7, #12]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	609a      	str	r2, [r3, #8]
 8005e6a:	e04e      	b.n	8005f0a <HAL_TIM_ConfigClockSource+0x16e>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	6899      	ldr	r1, [r3, #8]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f000 fb1d 	bl	80064ba <TIM_ETR_SetConfig>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	689a      	ldr	r2, [r3, #8]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e8e:	609a      	str	r2, [r3, #8]
 8005e90:	e03b      	b.n	8005f0a <HAL_TIM_ConfigClockSource+0x16e>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6818      	ldr	r0, [r3, #0]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	6859      	ldr	r1, [r3, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	f000 fa94 	bl	80063cc <TIM_TI1_ConfigInputStage>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	2150      	movs	r1, #80	; 0x50
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 faeb 	bl	8006486 <TIM_ITRx_SetConfig>
 8005eb0:	e02b      	b.n	8005f0a <HAL_TIM_ConfigClockSource+0x16e>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6818      	ldr	r0, [r3, #0]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	6859      	ldr	r1, [r3, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f000 fab2 	bl	8006428 <TIM_TI2_ConfigInputStage>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2160      	movs	r1, #96	; 0x60
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f000 fadb 	bl	8006486 <TIM_ITRx_SetConfig>
 8005ed0:	e01b      	b.n	8005f0a <HAL_TIM_ConfigClockSource+0x16e>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6818      	ldr	r0, [r3, #0]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6859      	ldr	r1, [r3, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f000 fa74 	bl	80063cc <TIM_TI1_ConfigInputStage>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2140      	movs	r1, #64	; 0x40
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 facb 	bl	8006486 <TIM_ITRx_SetConfig>
 8005ef0:	e00b      	b.n	8005f0a <HAL_TIM_ConfigClockSource+0x16e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4619      	mov	r1, r3
 8005efc:	4610      	mov	r0, r2
 8005efe:	f000 fac2 	bl	8006486 <TIM_ITRx_SetConfig>
 8005f02:	e002      	b.n	8005f0a <HAL_TIM_ConfigClockSource+0x16e>
 8005f04:	bf00      	nop
 8005f06:	e000      	b.n	8005f0a <HAL_TIM_ConfigClockSource+0x16e>
 8005f08:	bf00      	nop
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_TIM_PeriodElapsedCallback>:
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	bf00      	nop
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bc80      	pop	{r7}
 8005f34:	4770      	bx	lr

08005f36 <HAL_TIM_OC_DelayElapsedCallback>:
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bc80      	pop	{r7}
 8005f46:	4770      	bx	lr

08005f48 <HAL_TIM_IC_CaptureCallback>:
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr

08005f5a <HAL_TIM_PWM_PulseFinishedCallback>:
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
 8005f62:	bf00      	nop
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bc80      	pop	{r7}
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIM_TriggerCallback>:
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bc80      	pop	{r7}
 8005f7c:	4770      	bx	lr
	...

08005f80 <TIM_Base_SetConfig>:
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	60fb      	str	r3, [r7, #12]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a33      	ldr	r2, [pc, #204]	; (8006060 <TIM_Base_SetConfig+0xe0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d013      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a32      	ldr	r2, [pc, #200]	; (8006064 <TIM_Base_SetConfig+0xe4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d00f      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fa6:	d00b      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a2f      	ldr	r2, [pc, #188]	; (8006068 <TIM_Base_SetConfig+0xe8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d007      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	4a2e      	ldr	r2, [pc, #184]	; (800606c <TIM_Base_SetConfig+0xec>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d003      	beq.n	8005fc0 <TIM_Base_SetConfig+0x40>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a2d      	ldr	r2, [pc, #180]	; (8006070 <TIM_Base_SetConfig+0xf0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d108      	bne.n	8005fd2 <TIM_Base_SetConfig+0x52>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a22      	ldr	r2, [pc, #136]	; (8006060 <TIM_Base_SetConfig+0xe0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d013      	beq.n	8006002 <TIM_Base_SetConfig+0x82>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a21      	ldr	r2, [pc, #132]	; (8006064 <TIM_Base_SetConfig+0xe4>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00f      	beq.n	8006002 <TIM_Base_SetConfig+0x82>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe8:	d00b      	beq.n	8006002 <TIM_Base_SetConfig+0x82>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a1e      	ldr	r2, [pc, #120]	; (8006068 <TIM_Base_SetConfig+0xe8>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d007      	beq.n	8006002 <TIM_Base_SetConfig+0x82>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a1d      	ldr	r2, [pc, #116]	; (800606c <TIM_Base_SetConfig+0xec>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d003      	beq.n	8006002 <TIM_Base_SetConfig+0x82>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <TIM_Base_SetConfig+0xf0>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d108      	bne.n	8006014 <TIM_Base_SetConfig+0x94>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	629a      	str	r2, [r3, #40]	; 0x28
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a09      	ldr	r2, [pc, #36]	; (8006060 <TIM_Base_SetConfig+0xe0>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d003      	beq.n	8006048 <TIM_Base_SetConfig+0xc8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a08      	ldr	r2, [pc, #32]	; (8006064 <TIM_Base_SetConfig+0xe4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d103      	bne.n	8006050 <TIM_Base_SetConfig+0xd0>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	615a      	str	r2, [r3, #20]
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	bc80      	pop	{r7}
 800605e:	4770      	bx	lr
 8006060:	40012c00 	.word	0x40012c00
 8006064:	40013400 	.word	0x40013400
 8006068:	40000400 	.word	0x40000400
 800606c:	40000800 	.word	0x40000800
 8006070:	40000c00 	.word	0x40000c00

08006074 <TIM_OC1_SetConfig>:
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	f023 0201 	bic.w	r2, r3, #1
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	621a      	str	r2, [r3, #32]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a1b      	ldr	r3, [r3, #32]
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	60fb      	str	r3, [r7, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0303 	bic.w	r3, r3, #3
 80060aa:	60fb      	str	r3, [r7, #12]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68fa      	ldr	r2, [r7, #12]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f023 0302 	bic.w	r3, r3, #2
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	4a20      	ldr	r2, [pc, #128]	; (800614c <TIM_OC1_SetConfig+0xd8>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d003      	beq.n	80060d8 <TIM_OC1_SetConfig+0x64>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a1f      	ldr	r2, [pc, #124]	; (8006150 <TIM_OC1_SetConfig+0xdc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d10c      	bne.n	80060f2 <TIM_OC1_SetConfig+0x7e>
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f023 0308 	bic.w	r3, r3, #8
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f023 0304 	bic.w	r3, r3, #4
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a15      	ldr	r2, [pc, #84]	; (800614c <TIM_OC1_SetConfig+0xd8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d003      	beq.n	8006102 <TIM_OC1_SetConfig+0x8e>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a14      	ldr	r2, [pc, #80]	; (8006150 <TIM_OC1_SetConfig+0xdc>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d111      	bne.n	8006126 <TIM_OC1_SetConfig+0xb2>
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006108:	613b      	str	r3, [r7, #16]
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006110:	613b      	str	r3, [r7, #16]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	4313      	orrs	r3, r2
 800611a:	613b      	str	r3, [r7, #16]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	4313      	orrs	r3, r2
 8006124:	613b      	str	r3, [r7, #16]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	605a      	str	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	619a      	str	r2, [r3, #24]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	635a      	str	r2, [r3, #52]	; 0x34
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	697a      	ldr	r2, [r7, #20]
 800613e:	621a      	str	r2, [r3, #32]
 8006140:	bf00      	nop
 8006142:	371c      	adds	r7, #28
 8006144:	46bd      	mov	sp, r7
 8006146:	bc80      	pop	{r7}
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	40012c00 	.word	0x40012c00
 8006150:	40013400 	.word	0x40013400

08006154 <TIM_OC2_SetConfig>:
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	f023 0210 	bic.w	r2, r3, #16
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	621a      	str	r2, [r3, #32]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	613b      	str	r3, [r7, #16]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	021b      	lsls	r3, r3, #8
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	4313      	orrs	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f023 0320 	bic.w	r3, r3, #32
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	011b      	lsls	r3, r3, #4
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	617b      	str	r3, [r7, #20]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a21      	ldr	r2, [pc, #132]	; (8006234 <TIM_OC2_SetConfig+0xe0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d003      	beq.n	80061bc <TIM_OC2_SetConfig+0x68>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a20      	ldr	r2, [pc, #128]	; (8006238 <TIM_OC2_SetConfig+0xe4>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d10d      	bne.n	80061d8 <TIM_OC2_SetConfig+0x84>
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	697a      	ldr	r2, [r7, #20]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061d6:	617b      	str	r3, [r7, #20]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a16      	ldr	r2, [pc, #88]	; (8006234 <TIM_OC2_SetConfig+0xe0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d003      	beq.n	80061e8 <TIM_OC2_SetConfig+0x94>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a15      	ldr	r2, [pc, #84]	; (8006238 <TIM_OC2_SetConfig+0xe4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d113      	bne.n	8006210 <TIM_OC2_SetConfig+0xbc>
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	4313      	orrs	r3, r2
 8006202:	613b      	str	r3, [r7, #16]
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	4313      	orrs	r3, r2
 800620e:	613b      	str	r3, [r7, #16]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	605a      	str	r2, [r3, #4]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	619a      	str	r2, [r3, #24]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	639a      	str	r2, [r3, #56]	; 0x38
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	621a      	str	r2, [r3, #32]
 800622a:	bf00      	nop
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr
 8006234:	40012c00 	.word	0x40012c00
 8006238:	40013400 	.word	0x40013400

0800623c <TIM_OC3_SetConfig>:
 800623c:	b480      	push	{r7}
 800623e:	b087      	sub	sp, #28
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6a1b      	ldr	r3, [r3, #32]
 800624a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	621a      	str	r2, [r3, #32]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	613b      	str	r3, [r7, #16]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 0303 	bic.w	r3, r3, #3
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	4313      	orrs	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	021b      	lsls	r3, r3, #8
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a21      	ldr	r2, [pc, #132]	; (800631c <TIM_OC3_SetConfig+0xe0>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC3_SetConfig+0x66>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a20      	ldr	r2, [pc, #128]	; (8006320 <TIM_OC3_SetConfig+0xe4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d10d      	bne.n	80062be <TIM_OC3_SetConfig+0x82>
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062a8:	617b      	str	r3, [r7, #20]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062bc:	617b      	str	r3, [r7, #20]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a16      	ldr	r2, [pc, #88]	; (800631c <TIM_OC3_SetConfig+0xe0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d003      	beq.n	80062ce <TIM_OC3_SetConfig+0x92>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a15      	ldr	r2, [pc, #84]	; (8006320 <TIM_OC3_SetConfig+0xe4>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d113      	bne.n	80062f6 <TIM_OC3_SetConfig+0xba>
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062d4:	613b      	str	r3, [r7, #16]
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062dc:	613b      	str	r3, [r7, #16]
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	693a      	ldr	r2, [r7, #16]
 80062e6:	4313      	orrs	r3, r2
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	605a      	str	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	61da      	str	r2, [r3, #28]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	63da      	str	r2, [r3, #60]	; 0x3c
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	621a      	str	r2, [r3, #32]
 8006310:	bf00      	nop
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	40012c00 	.word	0x40012c00
 8006320:	40013400 	.word	0x40013400

08006324 <TIM_OC4_SetConfig>:
 8006324:	b480      	push	{r7}
 8006326:	b087      	sub	sp, #28
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a1b      	ldr	r3, [r3, #32]
 8006332:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	621a      	str	r2, [r3, #32]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	60fb      	str	r3, [r7, #12]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006352:	60fb      	str	r3, [r7, #12]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800635a:	60fb      	str	r3, [r7, #12]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800636e:	613b      	str	r3, [r7, #16]
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	031b      	lsls	r3, r3, #12
 8006376:	693a      	ldr	r2, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a11      	ldr	r2, [pc, #68]	; (80063c4 <TIM_OC4_SetConfig+0xa0>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d003      	beq.n	800638c <TIM_OC4_SetConfig+0x68>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a10      	ldr	r2, [pc, #64]	; (80063c8 <TIM_OC4_SetConfig+0xa4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d109      	bne.n	80063a0 <TIM_OC4_SetConfig+0x7c>
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	019b      	lsls	r3, r3, #6
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	4313      	orrs	r3, r2
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	605a      	str	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	61da      	str	r2, [r3, #28]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685a      	ldr	r2, [r3, #4]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	641a      	str	r2, [r3, #64]	; 0x40
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	621a      	str	r2, [r3, #32]
 80063ba:	bf00      	nop
 80063bc:	371c      	adds	r7, #28
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr
 80063c4:	40012c00 	.word	0x40012c00
 80063c8:	40013400 	.word	0x40013400

080063cc <TIM_TI1_ConfigInputStage>:
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	617b      	str	r3, [r7, #20]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	f023 0201 	bic.w	r2, r3, #1
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	621a      	str	r2, [r3, #32]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063f6:	613b      	str	r3, [r7, #16]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	613b      	str	r3, [r7, #16]
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f023 030a 	bic.w	r3, r3, #10
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	4313      	orrs	r3, r2
 8006410:	617b      	str	r3, [r7, #20]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	619a      	str	r2, [r3, #24]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	697a      	ldr	r2, [r7, #20]
 800641c:	621a      	str	r2, [r3, #32]
 800641e:	bf00      	nop
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	bc80      	pop	{r7}
 8006426:	4770      	bx	lr

08006428 <TIM_TI2_ConfigInputStage>:
 8006428:	b480      	push	{r7}
 800642a:	b087      	sub	sp, #28
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6a1b      	ldr	r3, [r3, #32]
 8006438:	f023 0210 	bic.w	r2, r3, #16
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	621a      	str	r2, [r3, #32]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	613b      	str	r3, [r7, #16]
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	031b      	lsls	r3, r3, #12
 8006458:	697a      	ldr	r2, [r7, #20]
 800645a:	4313      	orrs	r3, r2
 800645c:	617b      	str	r3, [r7, #20]
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006464:	613b      	str	r3, [r7, #16]
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	011b      	lsls	r3, r3, #4
 800646a:	693a      	ldr	r2, [r7, #16]
 800646c:	4313      	orrs	r3, r2
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	619a      	str	r2, [r3, #24]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	621a      	str	r2, [r3, #32]
 800647c:	bf00      	nop
 800647e:	371c      	adds	r7, #28
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr

08006486 <TIM_ITRx_SetConfig>:
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	6039      	str	r1, [r7, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	60fb      	str	r3, [r7, #12]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649c:	60fb      	str	r3, [r7, #12]
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f043 0307 	orr.w	r3, r3, #7
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	609a      	str	r2, [r3, #8]
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr

080064ba <TIM_ETR_SetConfig>:
 80064ba:	b480      	push	{r7}
 80064bc:	b087      	sub	sp, #28
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	60b9      	str	r1, [r7, #8]
 80064c4:	607a      	str	r2, [r7, #4]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	617b      	str	r3, [r7, #20]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	021a      	lsls	r2, r3, #8
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	431a      	orrs	r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	4313      	orrs	r3, r2
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	697a      	ldr	r2, [r7, #20]
 80064ec:	609a      	str	r2, [r3, #8]
 80064ee:	bf00      	nop
 80064f0:	371c      	adds	r7, #28
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bc80      	pop	{r7}
 80064f6:	4770      	bx	lr

080064f8 <TIM_CCxChannelCmd>:
 80064f8:	b480      	push	{r7}
 80064fa:	b087      	sub	sp, #28
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2201      	movs	r2, #1
 800650c:	fa02 f303 	lsl.w	r3, r2, r3
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6a1a      	ldr	r2, [r3, #32]
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	43db      	mvns	r3, r3
 800651a:	401a      	ands	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	621a      	str	r2, [r3, #32]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a1a      	ldr	r2, [r3, #32]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	f003 031f 	and.w	r3, r3, #31
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	fa01 f303 	lsl.w	r3, r1, r3
 8006530:	431a      	orrs	r2, r3
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	621a      	str	r2, [r3, #32]
 8006536:	bf00      	nop
 8006538:	371c      	adds	r7, #28
 800653a:	46bd      	mov	sp, r7
 800653c:	bc80      	pop	{r7}
 800653e:	4770      	bx	lr

08006540 <HAL_TIMEx_MasterConfigSynchronization>:
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006550:	2b01      	cmp	r3, #1
 8006552:	d101      	bne.n	8006558 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006554:	2302      	movs	r3, #2
 8006556:	e050      	b.n	80065fa <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2201      	movs	r2, #1
 800655c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2202      	movs	r2, #2
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	60bb      	str	r3, [r7, #8]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68fa      	ldr	r2, [r7, #12]
 8006590:	605a      	str	r2, [r3, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a1b      	ldr	r2, [pc, #108]	; (8006604 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d018      	beq.n	80065ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a19      	ldr	r2, [pc, #100]	; (8006608 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d013      	beq.n	80065ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ae:	d00e      	beq.n	80065ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a15      	ldr	r2, [pc, #84]	; (800660c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d009      	beq.n	80065ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a14      	ldr	r2, [pc, #80]	; (8006610 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d004      	beq.n	80065ce <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a12      	ldr	r2, [pc, #72]	; (8006614 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d10c      	bne.n	80065e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065d4:	60bb      	str	r3, [r7, #8]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	4313      	orrs	r3, r2
 80065de:	60bb      	str	r3, [r7, #8]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	609a      	str	r2, [r3, #8]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80065f8:	2300      	movs	r3, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	bc80      	pop	{r7}
 8006602:	4770      	bx	lr
 8006604:	40012c00 	.word	0x40012c00
 8006608:	40013400 	.word	0x40013400
 800660c:	40000400 	.word	0x40000400
 8006610:	40000800 	.word	0x40000800
 8006614:	40000c00 	.word	0x40000c00

08006618 <HAL_TIMEx_ConfigBreakDeadTime>:
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006630:	2302      	movs	r3, #2
 8006632:	e03d      	b.n	80066b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	4313      	orrs	r3, r2
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	695b      	ldr	r3, [r3, #20]
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	645a      	str	r2, [r3, #68]	; 0x44
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066ae:	2300      	movs	r3, #0
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bc80      	pop	{r7}
 80066b8:	4770      	bx	lr

080066ba <HAL_TIMEx_CommutCallback>:
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr

080066cc <HAL_TIMEx_BreakCallback>:
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr

080066de <HAL_UART_Init>:
 80066de:	b580      	push	{r7, lr}
 80066e0:	b082      	sub	sp, #8
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <HAL_UART_Init+0x12>
 80066ec:	2301      	movs	r3, #1
 80066ee:	e03f      	b.n	8006770 <HAL_UART_Init+0x92>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <HAL_UART_Init+0x2c>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7fc ff1d 	bl	8003544 <HAL_UART_MspInit>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2224      	movs	r2, #36	; 0x24
 800670e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006720:	60da      	str	r2, [r3, #12]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fdde 	bl	80072e4 <UART_SetConfig>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006736:	611a      	str	r2, [r3, #16]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	695a      	ldr	r2, [r3, #20]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006746:	615a      	str	r2, [r3, #20]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006756:	60da      	str	r2, [r3, #12]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	641a      	str	r2, [r3, #64]	; 0x40
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800676e:	2300      	movs	r3, #0
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_UART_Transmit>:
 8006778:	b580      	push	{r7, lr}
 800677a:	b08a      	sub	sp, #40	; 0x28
 800677c:	af02      	add	r7, sp, #8
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	4613      	mov	r3, r2
 8006786:	80fb      	strh	r3, [r7, #6]
 8006788:	2300      	movs	r3, #0
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b20      	cmp	r3, #32
 8006796:	d17c      	bne.n	8006892 <HAL_UART_Transmit+0x11a>
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d002      	beq.n	80067a4 <HAL_UART_Transmit+0x2c>
 800679e:	88fb      	ldrh	r3, [r7, #6]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <HAL_UART_Transmit+0x30>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e075      	b.n	8006894 <HAL_UART_Transmit+0x11c>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d101      	bne.n	80067b6 <HAL_UART_Transmit+0x3e>
 80067b2:	2302      	movs	r3, #2
 80067b4:	e06e      	b.n	8006894 <HAL_UART_Transmit+0x11c>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	2200      	movs	r2, #0
 80067c2:	641a      	str	r2, [r3, #64]	; 0x40
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2221      	movs	r2, #33	; 0x21
 80067c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80067cc:	f7fd f964 	bl	8003a98 <HAL_GetTick>
 80067d0:	6178      	str	r0, [r7, #20]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	88fa      	ldrh	r2, [r7, #6]
 80067d6:	849a      	strh	r2, [r3, #36]	; 0x24
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	88fa      	ldrh	r2, [r7, #6]
 80067dc:	84da      	strh	r2, [r3, #38]	; 0x26
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067e6:	d108      	bne.n	80067fa <HAL_UART_Transmit+0x82>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d104      	bne.n	80067fa <HAL_UART_Transmit+0x82>
 80067f0:	2300      	movs	r3, #0
 80067f2:	61fb      	str	r3, [r7, #28]
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	61bb      	str	r3, [r7, #24]
 80067f8:	e003      	b.n	8006802 <HAL_UART_Transmit+0x8a>
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	2300      	movs	r3, #0
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800680a:	e02a      	b.n	8006862 <HAL_UART_Transmit+0xea>
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2200      	movs	r2, #0
 8006814:	2180      	movs	r1, #128	; 0x80
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 fb17 	bl	8006e4a <UART_WaitOnFlagUntilTimeout>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <HAL_UART_Transmit+0xae>
 8006822:	2303      	movs	r3, #3
 8006824:	e036      	b.n	8006894 <HAL_UART_Transmit+0x11c>
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10b      	bne.n	8006844 <HAL_UART_Transmit+0xcc>
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	461a      	mov	r2, r3
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800683a:	605a      	str	r2, [r3, #4]
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	3302      	adds	r3, #2
 8006840:	61bb      	str	r3, [r7, #24]
 8006842:	e007      	b.n	8006854 <HAL_UART_Transmit+0xdc>
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	781a      	ldrb	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	605a      	str	r2, [r3, #4]
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	3301      	adds	r3, #1
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29a      	uxth	r2, r3
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	84da      	strh	r2, [r3, #38]	; 0x26
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006866:	b29b      	uxth	r3, r3
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1cf      	bne.n	800680c <HAL_UART_Transmit+0x94>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2200      	movs	r2, #0
 8006874:	2140      	movs	r1, #64	; 0x40
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fae7 	bl	8006e4a <UART_WaitOnFlagUntilTimeout>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <HAL_UART_Transmit+0x10e>
 8006882:	2303      	movs	r3, #3
 8006884:	e006      	b.n	8006894 <HAL_UART_Transmit+0x11c>
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2220      	movs	r2, #32
 800688a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800688e:	2300      	movs	r3, #0
 8006890:	e000      	b.n	8006894 <HAL_UART_Transmit+0x11c>
 8006892:	2302      	movs	r3, #2
 8006894:	4618      	mov	r0, r3
 8006896:	3720      	adds	r7, #32
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_UART_Receive_IT>:
 800689c:	b580      	push	{r7, lr}
 800689e:	b084      	sub	sp, #16
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	4613      	mov	r3, r2
 80068a8:	80fb      	strh	r3, [r7, #6]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b20      	cmp	r3, #32
 80068b4:	d11d      	bne.n	80068f2 <HAL_UART_Receive_IT+0x56>
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_UART_Receive_IT+0x26>
 80068bc:	88fb      	ldrh	r3, [r7, #6]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <HAL_UART_Receive_IT+0x2a>
 80068c2:	2301      	movs	r3, #1
 80068c4:	e016      	b.n	80068f4 <HAL_UART_Receive_IT+0x58>
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_UART_Receive_IT+0x38>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e00f      	b.n	80068f4 <HAL_UART_Receive_IT+0x58>
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	631a      	str	r2, [r3, #48]	; 0x30
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	461a      	mov	r2, r3
 80068e6:	68b9      	ldr	r1, [r7, #8]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 faf8 	bl	8006ede <UART_Start_Receive_IT>
 80068ee:	4603      	mov	r3, r0
 80068f0:	e000      	b.n	80068f4 <HAL_UART_Receive_IT+0x58>
 80068f2:	2302      	movs	r3, #2
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_UART_Receive_DMA>:
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	4613      	mov	r3, r2
 8006908:	80fb      	strh	r3, [r7, #6]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b20      	cmp	r3, #32
 8006914:	d11d      	bne.n	8006952 <HAL_UART_Receive_DMA+0x56>
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d002      	beq.n	8006922 <HAL_UART_Receive_DMA+0x26>
 800691c:	88fb      	ldrh	r3, [r7, #6]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d101      	bne.n	8006926 <HAL_UART_Receive_DMA+0x2a>
 8006922:	2301      	movs	r3, #1
 8006924:	e016      	b.n	8006954 <HAL_UART_Receive_DMA+0x58>
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800692c:	2b01      	cmp	r3, #1
 800692e:	d101      	bne.n	8006934 <HAL_UART_Receive_DMA+0x38>
 8006930:	2302      	movs	r3, #2
 8006932:	e00f      	b.n	8006954 <HAL_UART_Receive_DMA+0x58>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	631a      	str	r2, [r3, #48]	; 0x30
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	461a      	mov	r2, r3
 8006946:	68b9      	ldr	r1, [r7, #8]
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f000 fb01 	bl	8006f50 <UART_Start_Receive_DMA>
 800694e:	4603      	mov	r3, r0
 8006950:	e000      	b.n	8006954 <HAL_UART_Receive_DMA+0x58>
 8006952:	2302      	movs	r3, #2
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_UART_IRQHandler>:
 800695c:	b580      	push	{r7, lr}
 800695e:	b08a      	sub	sp, #40	; 0x28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	627b      	str	r3, [r7, #36]	; 0x24
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	623b      	str	r3, [r7, #32]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	61fb      	str	r3, [r7, #28]
 800697c:	2300      	movs	r3, #0
 800697e:	61bb      	str	r3, [r7, #24]
 8006980:	2300      	movs	r3, #0
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006986:	f003 030f 	and.w	r3, r3, #15
 800698a:	61bb      	str	r3, [r7, #24]
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10d      	bne.n	80069ae <HAL_UART_IRQHandler+0x52>
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	f003 0320 	and.w	r3, r3, #32
 8006998:	2b00      	cmp	r3, #0
 800699a:	d008      	beq.n	80069ae <HAL_UART_IRQHandler+0x52>
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_UART_IRQHandler+0x52>
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fbf2 	bl	8007190 <UART_Receive_IT>
 80069ac:	e17b      	b.n	8006ca6 <HAL_UART_IRQHandler+0x34a>
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 80b1 	beq.w	8006b18 <HAL_UART_IRQHandler+0x1bc>
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d105      	bne.n	80069cc <HAL_UART_IRQHandler+0x70>
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 80a6 	beq.w	8006b18 <HAL_UART_IRQHandler+0x1bc>
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00a      	beq.n	80069ec <HAL_UART_IRQHandler+0x90>
 80069d6:	6a3b      	ldr	r3, [r7, #32]
 80069d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <HAL_UART_IRQHandler+0x90>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	f043 0201 	orr.w	r2, r3, #1
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	641a      	str	r2, [r3, #64]	; 0x40
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <HAL_UART_IRQHandler+0xb0>
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <HAL_UART_IRQHandler+0xb0>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a04:	f043 0202 	orr.w	r2, r3, #2
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	641a      	str	r2, [r3, #64]	; 0x40
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00a      	beq.n	8006a2c <HAL_UART_IRQHandler+0xd0>
 8006a16:	69fb      	ldr	r3, [r7, #28]
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d005      	beq.n	8006a2c <HAL_UART_IRQHandler+0xd0>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a24:	f043 0204 	orr.w	r2, r3, #4
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	641a      	str	r2, [r3, #64]	; 0x40
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	f003 0308 	and.w	r3, r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00f      	beq.n	8006a56 <HAL_UART_IRQHandler+0xfa>
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d104      	bne.n	8006a4a <HAL_UART_IRQHandler+0xee>
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d005      	beq.n	8006a56 <HAL_UART_IRQHandler+0xfa>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	f043 0208 	orr.w	r2, r3, #8
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	641a      	str	r2, [r3, #64]	; 0x40
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 811e 	beq.w	8006c9c <HAL_UART_IRQHandler+0x340>
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d007      	beq.n	8006a7a <HAL_UART_IRQHandler+0x11e>
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d002      	beq.n	8006a7a <HAL_UART_IRQHandler+0x11e>
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fb8b 	bl	8007190 <UART_Receive_IT>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	bf14      	ite	ne
 8006a88:	2301      	movne	r3, #1
 8006a8a:	2300      	moveq	r3, #0
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	617b      	str	r3, [r7, #20]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a94:	f003 0308 	and.w	r3, r3, #8
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d102      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x146>
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d031      	beq.n	8006b06 <HAL_UART_IRQHandler+0x1aa>
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 facd 	bl	8007042 <UART_EndRxTransfer>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d023      	beq.n	8006afe <HAL_UART_IRQHandler+0x1a2>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	695a      	ldr	r2, [r3, #20]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ac4:	615a      	str	r2, [r3, #20]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d013      	beq.n	8006af6 <HAL_UART_IRQHandler+0x19a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad2:	4a76      	ldr	r2, [pc, #472]	; (8006cac <HAL_UART_IRQHandler+0x350>)
 8006ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fd fa28 	bl	8003f30 <HAL_DMA_Abort_IT>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d016      	beq.n	8006b14 <HAL_UART_IRQHandler+0x1b8>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aec:	687a      	ldr	r2, [r7, #4]
 8006aee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006af0:	4610      	mov	r0, r2
 8006af2:	4798      	blx	r3
 8006af4:	e00e      	b.n	8006b14 <HAL_UART_IRQHandler+0x1b8>
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f7fc faec 	bl	80030d4 <HAL_UART_ErrorCallback>
 8006afc:	e00a      	b.n	8006b14 <HAL_UART_IRQHandler+0x1b8>
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f7fc fae8 	bl	80030d4 <HAL_UART_ErrorCallback>
 8006b04:	e006      	b.n	8006b14 <HAL_UART_IRQHandler+0x1b8>
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7fc fae4 	bl	80030d4 <HAL_UART_ErrorCallback>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	641a      	str	r2, [r3, #64]	; 0x40
 8006b12:	e0c3      	b.n	8006c9c <HAL_UART_IRQHandler+0x340>
 8006b14:	bf00      	nop
 8006b16:	e0c1      	b.n	8006c9c <HAL_UART_IRQHandler+0x340>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	f040 80a1 	bne.w	8006c64 <HAL_UART_IRQHandler+0x308>
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	f003 0310 	and.w	r3, r3, #16
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 809b 	beq.w	8006c64 <HAL_UART_IRQHandler+0x308>
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 8095 	beq.w	8006c64 <HAL_UART_IRQHandler+0x308>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	60fb      	str	r3, [r7, #12]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d04e      	beq.n	8006bfc <HAL_UART_IRQHandler+0x2a0>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	823b      	strh	r3, [r7, #16]
 8006b68:	8a3b      	ldrh	r3, [r7, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f000 8098 	beq.w	8006ca0 <HAL_UART_IRQHandler+0x344>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b74:	8a3a      	ldrh	r2, [r7, #16]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	f080 8092 	bcs.w	8006ca0 <HAL_UART_IRQHandler+0x344>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	8a3a      	ldrh	r2, [r7, #16]
 8006b80:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	d02b      	beq.n	8006be4 <HAL_UART_IRQHandler+0x288>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b9a:	60da      	str	r2, [r3, #12]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695a      	ldr	r2, [r3, #20]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f022 0201 	bic.w	r2, r2, #1
 8006baa:	615a      	str	r2, [r3, #20]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695a      	ldr	r2, [r3, #20]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bba:	615a      	str	r2, [r3, #20]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	631a      	str	r2, [r3, #48]	; 0x30
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f022 0210 	bic.w	r2, r2, #16
 8006bd8:	60da      	str	r2, [r3, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fd f96b 	bl	8003eba <HAL_DMA_Abort>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 f86d 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
 8006bfa:	e051      	b.n	8006ca0 <HAL_UART_IRQHandler+0x344>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	827b      	strh	r3, [r7, #18]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d047      	beq.n	8006ca4 <HAL_UART_IRQHandler+0x348>
 8006c14:	8a7b      	ldrh	r3, [r7, #18]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d044      	beq.n	8006ca4 <HAL_UART_IRQHandler+0x348>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006c28:	60da      	str	r2, [r3, #12]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	695a      	ldr	r2, [r3, #20]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f022 0201 	bic.w	r2, r2, #1
 8006c38:	615a      	str	r2, [r3, #20]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	631a      	str	r2, [r3, #48]	; 0x30
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0210 	bic.w	r2, r2, #16
 8006c56:	60da      	str	r2, [r3, #12]
 8006c58:	8a7b      	ldrh	r3, [r7, #18]
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f839 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
 8006c62:	e01f      	b.n	8006ca4 <HAL_UART_IRQHandler+0x348>
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d008      	beq.n	8006c80 <HAL_UART_IRQHandler+0x324>
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d003      	beq.n	8006c80 <HAL_UART_IRQHandler+0x324>
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fa22 	bl	80070c2 <UART_Transmit_IT>
 8006c7e:	e012      	b.n	8006ca6 <HAL_UART_IRQHandler+0x34a>
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00d      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x34a>
 8006c8a:	6a3b      	ldr	r3, [r7, #32]
 8006c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d008      	beq.n	8006ca6 <HAL_UART_IRQHandler+0x34a>
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fa63 	bl	8007160 <UART_EndTransmit_IT>
 8006c9a:	e004      	b.n	8006ca6 <HAL_UART_IRQHandler+0x34a>
 8006c9c:	bf00      	nop
 8006c9e:	e002      	b.n	8006ca6 <HAL_UART_IRQHandler+0x34a>
 8006ca0:	bf00      	nop
 8006ca2:	e000      	b.n	8006ca6 <HAL_UART_IRQHandler+0x34a>
 8006ca4:	bf00      	nop
 8006ca6:	3728      	adds	r7, #40	; 0x28
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	0800709b 	.word	0x0800709b

08006cb0 <HAL_UART_TxCpltCallback>:
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bc80      	pop	{r7}
 8006cc0:	4770      	bx	lr

08006cc2 <HAL_UART_RxHalfCpltCallback>:
 8006cc2:	b480      	push	{r7}
 8006cc4:	b083      	sub	sp, #12
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bc80      	pop	{r7}
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_UARTEx_RxEventCallback>:
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	807b      	strh	r3, [r7, #2]
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <UART_DMAReceiveCplt>:
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b084      	sub	sp, #16
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	60fb      	str	r3, [r7, #12]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0320 	and.w	r3, r3, #32
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d12a      	bne.n	8006d5c <UART_DMAReceiveCplt+0x72>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68da      	ldr	r2, [r3, #12]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d1a:	60da      	str	r2, [r3, #12]
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695a      	ldr	r2, [r3, #20]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f022 0201 	bic.w	r2, r2, #1
 8006d2a:	615a      	str	r2, [r3, #20]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	695a      	ldr	r2, [r3, #20]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d3a:	615a      	str	r2, [r3, #20]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d107      	bne.n	8006d5c <UART_DMAReceiveCplt+0x72>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68da      	ldr	r2, [r3, #12]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0210 	bic.w	r2, r2, #16
 8006d5a:	60da      	str	r2, [r3, #12]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d106      	bne.n	8006d72 <UART_DMAReceiveCplt+0x88>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d68:	4619      	mov	r1, r3
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f7ff ffb2 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
 8006d70:	e002      	b.n	8006d78 <UART_DMAReceiveCplt+0x8e>
 8006d72:	68f8      	ldr	r0, [r7, #12]
 8006d74:	f7fc f992 	bl	800309c <HAL_UART_RxCpltCallback>
 8006d78:	bf00      	nop
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <UART_DMARxHalfCplt>:
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d108      	bne.n	8006da8 <UART_DMARxHalfCplt+0x28>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d9a:	085b      	lsrs	r3, r3, #1
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	4619      	mov	r1, r3
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f7ff ff97 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
 8006da6:	e002      	b.n	8006dae <UART_DMARxHalfCplt+0x2e>
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7ff ff8a 	bl	8006cc2 <HAL_UART_RxHalfCpltCallback>
 8006dae:	bf00      	nop
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <UART_DMAError>:
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b084      	sub	sp, #16
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	60bb      	str	r3, [r7, #8]
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	bf14      	ite	ne
 8006dd6:	2301      	movne	r3, #1
 8006dd8:	2300      	moveq	r3, #0
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b21      	cmp	r3, #33	; 0x21
 8006de8:	d108      	bne.n	8006dfc <UART_DMAError+0x46>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <UART_DMAError+0x46>
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2200      	movs	r2, #0
 8006df4:	84da      	strh	r2, [r3, #38]	; 0x26
 8006df6:	68b8      	ldr	r0, [r7, #8]
 8006df8:	f000 f90e 	bl	8007018 <UART_EndTxTransfer>
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	695b      	ldr	r3, [r3, #20]
 8006e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	bf14      	ite	ne
 8006e0a:	2301      	movne	r3, #1
 8006e0c:	2300      	moveq	r3, #0
 8006e0e:	b2db      	uxtb	r3, r3
 8006e10:	60fb      	str	r3, [r7, #12]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	2b22      	cmp	r3, #34	; 0x22
 8006e1c:	d108      	bne.n	8006e30 <UART_DMAError+0x7a>
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <UART_DMAError+0x7a>
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	2200      	movs	r2, #0
 8006e28:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006e2a:	68b8      	ldr	r0, [r7, #8]
 8006e2c:	f000 f909 	bl	8007042 <UART_EndRxTransfer>
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e34:	f043 0210 	orr.w	r2, r3, #16
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	641a      	str	r2, [r3, #64]	; 0x40
 8006e3c:	68b8      	ldr	r0, [r7, #8]
 8006e3e:	f7fc f949 	bl	80030d4 <HAL_UART_ErrorCallback>
 8006e42:	bf00      	nop
 8006e44:	3710      	adds	r7, #16
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <UART_WaitOnFlagUntilTimeout>:
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	603b      	str	r3, [r7, #0]
 8006e56:	4613      	mov	r3, r2
 8006e58:	71fb      	strb	r3, [r7, #7]
 8006e5a:	e02c      	b.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0x6c>
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e62:	d028      	beq.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0x6c>
 8006e64:	69bb      	ldr	r3, [r7, #24]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d007      	beq.n	8006e7a <UART_WaitOnFlagUntilTimeout+0x30>
 8006e6a:	f7fc fe15 	bl	8003a98 <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d21d      	bcs.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0x6c>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e88:	60da      	str	r2, [r3, #12]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	695a      	ldr	r2, [r3, #20]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0201 	bic.w	r2, r2, #1
 8006e98:	615a      	str	r2, [r3, #20]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2220      	movs	r2, #32
 8006e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2200      	movs	r2, #0
 8006eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006eb2:	2303      	movs	r3, #3
 8006eb4:	e00f      	b.n	8006ed6 <UART_WaitOnFlagUntilTimeout+0x8c>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	bf0c      	ite	eq
 8006ec6:	2301      	moveq	r3, #1
 8006ec8:	2300      	movne	r3, #0
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	461a      	mov	r2, r3
 8006ece:	79fb      	ldrb	r3, [r7, #7]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d0c3      	beq.n	8006e5c <UART_WaitOnFlagUntilTimeout+0x12>
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <UART_Start_Receive_IT>:
 8006ede:	b480      	push	{r7}
 8006ee0:	b085      	sub	sp, #20
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	60f8      	str	r0, [r7, #12]
 8006ee6:	60b9      	str	r1, [r7, #8]
 8006ee8:	4613      	mov	r3, r2
 8006eea:	80fb      	strh	r3, [r7, #6]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	629a      	str	r2, [r3, #40]	; 0x28
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	88fa      	ldrh	r2, [r7, #6]
 8006ef6:	859a      	strh	r2, [r3, #44]	; 0x2c
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	88fa      	ldrh	r2, [r7, #6]
 8006efc:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2200      	movs	r2, #0
 8006f02:	641a      	str	r2, [r3, #64]	; 0x40
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2222      	movs	r2, #34	; 0x22
 8006f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68da      	ldr	r2, [r3, #12]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f22:	60da      	str	r2, [r3, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	695a      	ldr	r2, [r3, #20]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0201 	orr.w	r2, r2, #1
 8006f32:	615a      	str	r2, [r3, #20]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	68da      	ldr	r2, [r3, #12]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	f042 0220 	orr.w	r2, r2, #32
 8006f42:	60da      	str	r2, [r3, #12]
 8006f44:	2300      	movs	r3, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bc80      	pop	{r7}
 8006f4e:	4770      	bx	lr

08006f50 <UART_Start_Receive_DMA>:
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	80fb      	strh	r3, [r7, #6]
 8006f5e:	68ba      	ldr	r2, [r7, #8]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	629a      	str	r2, [r3, #40]	; 0x28
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	88fa      	ldrh	r2, [r7, #6]
 8006f68:	859a      	strh	r2, [r3, #44]	; 0x2c
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	641a      	str	r2, [r3, #64]	; 0x40
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2222      	movs	r2, #34	; 0x22
 8006f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f7c:	4a23      	ldr	r2, [pc, #140]	; (800700c <UART_Start_Receive_DMA+0xbc>)
 8006f7e:	629a      	str	r2, [r3, #40]	; 0x28
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f84:	4a22      	ldr	r2, [pc, #136]	; (8007010 <UART_Start_Receive_DMA+0xc0>)
 8006f86:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f8c:	4a21      	ldr	r2, [pc, #132]	; (8007014 <UART_Start_Receive_DMA+0xc4>)
 8006f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f94:	2200      	movs	r2, #0
 8006f96:	635a      	str	r2, [r3, #52]	; 0x34
 8006f98:	f107 0308 	add.w	r3, r7, #8
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3304      	adds	r3, #4
 8006fa8:	4619      	mov	r1, r3
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	88fb      	ldrh	r3, [r7, #6]
 8006fb0:	f7fc ff24 	bl	8003dfc <HAL_DMA_Start_IT>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	613b      	str	r3, [r7, #16]
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	68da      	ldr	r2, [r3, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006fe0:	60da      	str	r2, [r3, #12]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	695a      	ldr	r2, [r3, #20]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f042 0201 	orr.w	r2, r2, #1
 8006ff0:	615a      	str	r2, [r3, #20]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	695a      	ldr	r2, [r3, #20]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007000:	615a      	str	r2, [r3, #20]
 8007002:	2300      	movs	r3, #0
 8007004:	4618      	mov	r0, r3
 8007006:	3718      	adds	r7, #24
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	08006ceb 	.word	0x08006ceb
 8007010:	08006d81 	.word	0x08006d81
 8007014:	08006db7 	.word	0x08006db7

08007018 <UART_EndTxTransfer>:
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68da      	ldr	r2, [r3, #12]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800702e:	60da      	str	r2, [r3, #12]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2220      	movs	r2, #32
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007038:	bf00      	nop
 800703a:	370c      	adds	r7, #12
 800703c:	46bd      	mov	sp, r7
 800703e:	bc80      	pop	{r7}
 8007040:	4770      	bx	lr

08007042 <UART_EndRxTransfer>:
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007058:	60da      	str	r2, [r3, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	695a      	ldr	r2, [r3, #20]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f022 0201 	bic.w	r2, r2, #1
 8007068:	615a      	str	r2, [r3, #20]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800706e:	2b01      	cmp	r3, #1
 8007070:	d107      	bne.n	8007082 <UART_EndRxTransfer+0x40>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 0210 	bic.w	r2, r2, #16
 8007080:	60da      	str	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2200      	movs	r2, #0
 800708e:	631a      	str	r2, [r3, #48]	; 0x30
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	bc80      	pop	{r7}
 8007098:	4770      	bx	lr

0800709a <UART_DMAAbortOnError>:
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a6:	60fb      	str	r3, [r7, #12]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	85da      	strh	r2, [r3, #46]	; 0x2e
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	84da      	strh	r2, [r3, #38]	; 0x26
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f7fc f80d 	bl	80030d4 <HAL_UART_ErrorCallback>
 80070ba:	bf00      	nop
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}

080070c2 <UART_Transmit_IT>:
 80070c2:	b480      	push	{r7}
 80070c4:	b085      	sub	sp, #20
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b21      	cmp	r3, #33	; 0x21
 80070d4:	d13e      	bne.n	8007154 <UART_Transmit_IT+0x92>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070de:	d114      	bne.n	800710a <UART_Transmit_IT+0x48>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d110      	bne.n	800710a <UART_Transmit_IT+0x48>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	461a      	mov	r2, r3
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80070fc:	605a      	str	r2, [r3, #4]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	1c9a      	adds	r2, r3, #2
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	621a      	str	r2, [r3, #32]
 8007108:	e008      	b.n	800711c <UART_Transmit_IT+0x5a>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	1c59      	adds	r1, r3, #1
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	6211      	str	r1, [r2, #32]
 8007114:	781a      	ldrb	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	605a      	str	r2, [r3, #4]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007120:	b29b      	uxth	r3, r3
 8007122:	3b01      	subs	r3, #1
 8007124:	b29b      	uxth	r3, r3
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4619      	mov	r1, r3
 800712a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10f      	bne.n	8007150 <UART_Transmit_IT+0x8e>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68da      	ldr	r2, [r3, #12]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800713e:	60da      	str	r2, [r3, #12]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800714e:	60da      	str	r2, [r3, #12]
 8007150:	2300      	movs	r3, #0
 8007152:	e000      	b.n	8007156 <UART_Transmit_IT+0x94>
 8007154:	2302      	movs	r3, #2
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	bc80      	pop	{r7}
 800715e:	4770      	bx	lr

08007160 <UART_EndTransmit_IT>:
 8007160:	b580      	push	{r7, lr}
 8007162:	b082      	sub	sp, #8
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68da      	ldr	r2, [r3, #12]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007176:	60da      	str	r2, [r3, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f7ff fd95 	bl	8006cb0 <HAL_UART_TxCpltCallback>
 8007186:	2300      	movs	r3, #0
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <UART_Receive_IT>:
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	2b22      	cmp	r3, #34	; 0x22
 80071a2:	f040 8099 	bne.w	80072d8 <UART_Receive_IT+0x148>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071ae:	d117      	bne.n	80071e0 <UART_Receive_IT+0x50>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d113      	bne.n	80071e0 <UART_Receive_IT+0x50>
 80071b8:	2300      	movs	r3, #0
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071ce:	b29a      	uxth	r2, r3
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	801a      	strh	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d8:	1c9a      	adds	r2, r3, #2
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	629a      	str	r2, [r3, #40]	; 0x28
 80071de:	e026      	b.n	800722e <UART_Receive_IT+0x9e>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e4:	617b      	str	r3, [r7, #20]
 80071e6:	2300      	movs	r3, #0
 80071e8:	613b      	str	r3, [r7, #16]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f2:	d007      	beq.n	8007204 <UART_Receive_IT+0x74>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <UART_Receive_IT+0x82>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d106      	bne.n	8007212 <UART_Receive_IT+0x82>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	b2da      	uxtb	r2, r3
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	701a      	strb	r2, [r3, #0]
 8007210:	e008      	b.n	8007224 <UART_Receive_IT+0x94>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	b2db      	uxtb	r3, r3
 800721a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800721e:	b2da      	uxtb	r2, r3
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	701a      	strb	r2, [r3, #0]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	629a      	str	r2, [r3, #40]	; 0x28
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007232:	b29b      	uxth	r3, r3
 8007234:	3b01      	subs	r3, #1
 8007236:	b29b      	uxth	r3, r3
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	4619      	mov	r1, r3
 800723c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800723e:	2b00      	cmp	r3, #0
 8007240:	d148      	bne.n	80072d4 <UART_Receive_IT+0x144>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f022 0220 	bic.w	r2, r2, #32
 8007250:	60da      	str	r2, [r3, #12]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007260:	60da      	str	r2, [r3, #12]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	695a      	ldr	r2, [r3, #20]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 0201 	bic.w	r2, r2, #1
 8007270:	615a      	str	r2, [r3, #20]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727e:	2b01      	cmp	r3, #1
 8007280:	d123      	bne.n	80072ca <UART_Receive_IT+0x13a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	631a      	str	r2, [r3, #48]	; 0x30
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0210 	bic.w	r2, r2, #16
 8007296:	60da      	str	r2, [r3, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0310 	and.w	r3, r3, #16
 80072a2:	2b10      	cmp	r3, #16
 80072a4:	d10a      	bne.n	80072bc <UART_Receive_IT+0x12c>
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	60fb      	str	r3, [r7, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f7ff fd06 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
 80072c8:	e002      	b.n	80072d0 <UART_Receive_IT+0x140>
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7fb fee6 	bl	800309c <HAL_UART_RxCpltCallback>
 80072d0:	2300      	movs	r3, #0
 80072d2:	e002      	b.n	80072da <UART_Receive_IT+0x14a>
 80072d4:	2300      	movs	r3, #0
 80072d6:	e000      	b.n	80072da <UART_Receive_IT+0x14a>
 80072d8:	2302      	movs	r3, #2
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <UART_SetConfig>:
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	68da      	ldr	r2, [r3, #12]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	430a      	orrs	r2, r1
 8007300:	611a      	str	r2, [r3, #16]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	689a      	ldr	r2, [r3, #8]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	431a      	orrs	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	4313      	orrs	r3, r2
 8007312:	60bb      	str	r3, [r7, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800731e:	f023 030c 	bic.w	r3, r3, #12
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	6812      	ldr	r2, [r2, #0]
 8007326:	68b9      	ldr	r1, [r7, #8]
 8007328:	430b      	orrs	r3, r1
 800732a:	60d3      	str	r3, [r2, #12]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	615a      	str	r2, [r3, #20]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a2c      	ldr	r2, [pc, #176]	; (80073f8 <UART_SetConfig+0x114>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d103      	bne.n	8007354 <UART_SetConfig+0x70>
 800734c:	f7fe f83c 	bl	80053c8 <HAL_RCC_GetPCLK2Freq>
 8007350:	60f8      	str	r0, [r7, #12]
 8007352:	e002      	b.n	800735a <UART_SetConfig+0x76>
 8007354:	f7fe f824 	bl	80053a0 <HAL_RCC_GetPCLK1Freq>
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	4613      	mov	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	009a      	lsls	r2, r3, #2
 8007364:	441a      	add	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007370:	4a22      	ldr	r2, [pc, #136]	; (80073fc <UART_SetConfig+0x118>)
 8007372:	fba2 2303 	umull	r2, r3, r2, r3
 8007376:	095b      	lsrs	r3, r3, #5
 8007378:	0119      	lsls	r1, r3, #4
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	4613      	mov	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	4413      	add	r3, r2
 8007382:	009a      	lsls	r2, r3, #2
 8007384:	441a      	add	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007390:	4b1a      	ldr	r3, [pc, #104]	; (80073fc <UART_SetConfig+0x118>)
 8007392:	fba3 0302 	umull	r0, r3, r3, r2
 8007396:	095b      	lsrs	r3, r3, #5
 8007398:	2064      	movs	r0, #100	; 0x64
 800739a:	fb00 f303 	mul.w	r3, r0, r3
 800739e:	1ad3      	subs	r3, r2, r3
 80073a0:	011b      	lsls	r3, r3, #4
 80073a2:	3332      	adds	r3, #50	; 0x32
 80073a4:	4a15      	ldr	r2, [pc, #84]	; (80073fc <UART_SetConfig+0x118>)
 80073a6:	fba2 2303 	umull	r2, r3, r2, r3
 80073aa:	095b      	lsrs	r3, r3, #5
 80073ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073b0:	4419      	add	r1, r3
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009a      	lsls	r2, r3, #2
 80073bc:	441a      	add	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80073c8:	4b0c      	ldr	r3, [pc, #48]	; (80073fc <UART_SetConfig+0x118>)
 80073ca:	fba3 0302 	umull	r0, r3, r3, r2
 80073ce:	095b      	lsrs	r3, r3, #5
 80073d0:	2064      	movs	r0, #100	; 0x64
 80073d2:	fb00 f303 	mul.w	r3, r0, r3
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	011b      	lsls	r3, r3, #4
 80073da:	3332      	adds	r3, #50	; 0x32
 80073dc:	4a07      	ldr	r2, [pc, #28]	; (80073fc <UART_SetConfig+0x118>)
 80073de:	fba2 2303 	umull	r2, r3, r2, r3
 80073e2:	095b      	lsrs	r3, r3, #5
 80073e4:	f003 020f 	and.w	r2, r3, #15
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	440a      	add	r2, r1
 80073ee:	609a      	str	r2, [r3, #8]
 80073f0:	bf00      	nop
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	40013800 	.word	0x40013800
 80073fc:	51eb851f 	.word	0x51eb851f

08007400 <__assert_func>:
 8007400:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007402:	4614      	mov	r4, r2
 8007404:	461a      	mov	r2, r3
 8007406:	4b09      	ldr	r3, [pc, #36]	; (800742c <__assert_func+0x2c>)
 8007408:	4605      	mov	r5, r0
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	68d8      	ldr	r0, [r3, #12]
 800740e:	b14c      	cbz	r4, 8007424 <__assert_func+0x24>
 8007410:	4b07      	ldr	r3, [pc, #28]	; (8007430 <__assert_func+0x30>)
 8007412:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007416:	9100      	str	r1, [sp, #0]
 8007418:	462b      	mov	r3, r5
 800741a:	4906      	ldr	r1, [pc, #24]	; (8007434 <__assert_func+0x34>)
 800741c:	f000 f814 	bl	8007448 <fiprintf>
 8007420:	f000 fbfe 	bl	8007c20 <abort>
 8007424:	4b04      	ldr	r3, [pc, #16]	; (8007438 <__assert_func+0x38>)
 8007426:	461c      	mov	r4, r3
 8007428:	e7f3      	b.n	8007412 <__assert_func+0x12>
 800742a:	bf00      	nop
 800742c:	20000010 	.word	0x20000010
 8007430:	0800854c 	.word	0x0800854c
 8007434:	08008559 	.word	0x08008559
 8007438:	08008587 	.word	0x08008587

0800743c <__errno>:
 800743c:	4b01      	ldr	r3, [pc, #4]	; (8007444 <__errno+0x8>)
 800743e:	6818      	ldr	r0, [r3, #0]
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20000010 	.word	0x20000010

08007448 <fiprintf>:
 8007448:	b40e      	push	{r1, r2, r3}
 800744a:	b503      	push	{r0, r1, lr}
 800744c:	4601      	mov	r1, r0
 800744e:	ab03      	add	r3, sp, #12
 8007450:	4805      	ldr	r0, [pc, #20]	; (8007468 <fiprintf+0x20>)
 8007452:	f853 2b04 	ldr.w	r2, [r3], #4
 8007456:	6800      	ldr	r0, [r0, #0]
 8007458:	9301      	str	r3, [sp, #4]
 800745a:	f000 f85b 	bl	8007514 <_vfiprintf_r>
 800745e:	b002      	add	sp, #8
 8007460:	f85d eb04 	ldr.w	lr, [sp], #4
 8007464:	b003      	add	sp, #12
 8007466:	4770      	bx	lr
 8007468:	20000010 	.word	0x20000010

0800746c <__libc_init_array>:
 800746c:	b570      	push	{r4, r5, r6, lr}
 800746e:	2600      	movs	r6, #0
 8007470:	4d0c      	ldr	r5, [pc, #48]	; (80074a4 <__libc_init_array+0x38>)
 8007472:	4c0d      	ldr	r4, [pc, #52]	; (80074a8 <__libc_init_array+0x3c>)
 8007474:	1b64      	subs	r4, r4, r5
 8007476:	10a4      	asrs	r4, r4, #2
 8007478:	42a6      	cmp	r6, r4
 800747a:	d109      	bne.n	8007490 <__libc_init_array+0x24>
 800747c:	f001 f810 	bl	80084a0 <_init>
 8007480:	2600      	movs	r6, #0
 8007482:	4d0a      	ldr	r5, [pc, #40]	; (80074ac <__libc_init_array+0x40>)
 8007484:	4c0a      	ldr	r4, [pc, #40]	; (80074b0 <__libc_init_array+0x44>)
 8007486:	1b64      	subs	r4, r4, r5
 8007488:	10a4      	asrs	r4, r4, #2
 800748a:	42a6      	cmp	r6, r4
 800748c:	d105      	bne.n	800749a <__libc_init_array+0x2e>
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	f855 3b04 	ldr.w	r3, [r5], #4
 8007494:	4798      	blx	r3
 8007496:	3601      	adds	r6, #1
 8007498:	e7ee      	b.n	8007478 <__libc_init_array+0xc>
 800749a:	f855 3b04 	ldr.w	r3, [r5], #4
 800749e:	4798      	blx	r3
 80074a0:	3601      	adds	r6, #1
 80074a2:	e7f2      	b.n	800748a <__libc_init_array+0x1e>
 80074a4:	08008620 	.word	0x08008620
 80074a8:	08008620 	.word	0x08008620
 80074ac:	08008620 	.word	0x08008620
 80074b0:	08008624 	.word	0x08008624

080074b4 <memset>:
 80074b4:	4603      	mov	r3, r0
 80074b6:	4402      	add	r2, r0
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d100      	bne.n	80074be <memset+0xa>
 80074bc:	4770      	bx	lr
 80074be:	f803 1b01 	strb.w	r1, [r3], #1
 80074c2:	e7f9      	b.n	80074b8 <memset+0x4>

080074c4 <__sfputc_r>:
 80074c4:	6893      	ldr	r3, [r2, #8]
 80074c6:	b410      	push	{r4}
 80074c8:	3b01      	subs	r3, #1
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	6093      	str	r3, [r2, #8]
 80074ce:	da07      	bge.n	80074e0 <__sfputc_r+0x1c>
 80074d0:	6994      	ldr	r4, [r2, #24]
 80074d2:	42a3      	cmp	r3, r4
 80074d4:	db01      	blt.n	80074da <__sfputc_r+0x16>
 80074d6:	290a      	cmp	r1, #10
 80074d8:	d102      	bne.n	80074e0 <__sfputc_r+0x1c>
 80074da:	bc10      	pop	{r4}
 80074dc:	f000 bae0 	b.w	8007aa0 <__swbuf_r>
 80074e0:	6813      	ldr	r3, [r2, #0]
 80074e2:	1c58      	adds	r0, r3, #1
 80074e4:	6010      	str	r0, [r2, #0]
 80074e6:	7019      	strb	r1, [r3, #0]
 80074e8:	4608      	mov	r0, r1
 80074ea:	bc10      	pop	{r4}
 80074ec:	4770      	bx	lr

080074ee <__sfputs_r>:
 80074ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074f0:	4606      	mov	r6, r0
 80074f2:	460f      	mov	r7, r1
 80074f4:	4614      	mov	r4, r2
 80074f6:	18d5      	adds	r5, r2, r3
 80074f8:	42ac      	cmp	r4, r5
 80074fa:	d101      	bne.n	8007500 <__sfputs_r+0x12>
 80074fc:	2000      	movs	r0, #0
 80074fe:	e007      	b.n	8007510 <__sfputs_r+0x22>
 8007500:	463a      	mov	r2, r7
 8007502:	4630      	mov	r0, r6
 8007504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007508:	f7ff ffdc 	bl	80074c4 <__sfputc_r>
 800750c:	1c43      	adds	r3, r0, #1
 800750e:	d1f3      	bne.n	80074f8 <__sfputs_r+0xa>
 8007510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007514 <_vfiprintf_r>:
 8007514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007518:	460d      	mov	r5, r1
 800751a:	4614      	mov	r4, r2
 800751c:	4698      	mov	r8, r3
 800751e:	4606      	mov	r6, r0
 8007520:	b09d      	sub	sp, #116	; 0x74
 8007522:	b118      	cbz	r0, 800752c <_vfiprintf_r+0x18>
 8007524:	6983      	ldr	r3, [r0, #24]
 8007526:	b90b      	cbnz	r3, 800752c <_vfiprintf_r+0x18>
 8007528:	f000 fc98 	bl	8007e5c <__sinit>
 800752c:	4b89      	ldr	r3, [pc, #548]	; (8007754 <_vfiprintf_r+0x240>)
 800752e:	429d      	cmp	r5, r3
 8007530:	d11b      	bne.n	800756a <_vfiprintf_r+0x56>
 8007532:	6875      	ldr	r5, [r6, #4]
 8007534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007536:	07d9      	lsls	r1, r3, #31
 8007538:	d405      	bmi.n	8007546 <_vfiprintf_r+0x32>
 800753a:	89ab      	ldrh	r3, [r5, #12]
 800753c:	059a      	lsls	r2, r3, #22
 800753e:	d402      	bmi.n	8007546 <_vfiprintf_r+0x32>
 8007540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007542:	f000 fd29 	bl	8007f98 <__retarget_lock_acquire_recursive>
 8007546:	89ab      	ldrh	r3, [r5, #12]
 8007548:	071b      	lsls	r3, r3, #28
 800754a:	d501      	bpl.n	8007550 <_vfiprintf_r+0x3c>
 800754c:	692b      	ldr	r3, [r5, #16]
 800754e:	b9eb      	cbnz	r3, 800758c <_vfiprintf_r+0x78>
 8007550:	4629      	mov	r1, r5
 8007552:	4630      	mov	r0, r6
 8007554:	f000 faf6 	bl	8007b44 <__swsetup_r>
 8007558:	b1c0      	cbz	r0, 800758c <_vfiprintf_r+0x78>
 800755a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800755c:	07dc      	lsls	r4, r3, #31
 800755e:	d50e      	bpl.n	800757e <_vfiprintf_r+0x6a>
 8007560:	f04f 30ff 	mov.w	r0, #4294967295
 8007564:	b01d      	add	sp, #116	; 0x74
 8007566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800756a:	4b7b      	ldr	r3, [pc, #492]	; (8007758 <_vfiprintf_r+0x244>)
 800756c:	429d      	cmp	r5, r3
 800756e:	d101      	bne.n	8007574 <_vfiprintf_r+0x60>
 8007570:	68b5      	ldr	r5, [r6, #8]
 8007572:	e7df      	b.n	8007534 <_vfiprintf_r+0x20>
 8007574:	4b79      	ldr	r3, [pc, #484]	; (800775c <_vfiprintf_r+0x248>)
 8007576:	429d      	cmp	r5, r3
 8007578:	bf08      	it	eq
 800757a:	68f5      	ldreq	r5, [r6, #12]
 800757c:	e7da      	b.n	8007534 <_vfiprintf_r+0x20>
 800757e:	89ab      	ldrh	r3, [r5, #12]
 8007580:	0598      	lsls	r0, r3, #22
 8007582:	d4ed      	bmi.n	8007560 <_vfiprintf_r+0x4c>
 8007584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007586:	f000 fd08 	bl	8007f9a <__retarget_lock_release_recursive>
 800758a:	e7e9      	b.n	8007560 <_vfiprintf_r+0x4c>
 800758c:	2300      	movs	r3, #0
 800758e:	9309      	str	r3, [sp, #36]	; 0x24
 8007590:	2320      	movs	r3, #32
 8007592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007596:	2330      	movs	r3, #48	; 0x30
 8007598:	f04f 0901 	mov.w	r9, #1
 800759c:	f8cd 800c 	str.w	r8, [sp, #12]
 80075a0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007760 <_vfiprintf_r+0x24c>
 80075a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075a8:	4623      	mov	r3, r4
 80075aa:	469a      	mov	sl, r3
 80075ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075b0:	b10a      	cbz	r2, 80075b6 <_vfiprintf_r+0xa2>
 80075b2:	2a25      	cmp	r2, #37	; 0x25
 80075b4:	d1f9      	bne.n	80075aa <_vfiprintf_r+0x96>
 80075b6:	ebba 0b04 	subs.w	fp, sl, r4
 80075ba:	d00b      	beq.n	80075d4 <_vfiprintf_r+0xc0>
 80075bc:	465b      	mov	r3, fp
 80075be:	4622      	mov	r2, r4
 80075c0:	4629      	mov	r1, r5
 80075c2:	4630      	mov	r0, r6
 80075c4:	f7ff ff93 	bl	80074ee <__sfputs_r>
 80075c8:	3001      	adds	r0, #1
 80075ca:	f000 80aa 	beq.w	8007722 <_vfiprintf_r+0x20e>
 80075ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075d0:	445a      	add	r2, fp
 80075d2:	9209      	str	r2, [sp, #36]	; 0x24
 80075d4:	f89a 3000 	ldrb.w	r3, [sl]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80a2 	beq.w	8007722 <_vfiprintf_r+0x20e>
 80075de:	2300      	movs	r3, #0
 80075e0:	f04f 32ff 	mov.w	r2, #4294967295
 80075e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075e8:	f10a 0a01 	add.w	sl, sl, #1
 80075ec:	9304      	str	r3, [sp, #16]
 80075ee:	9307      	str	r3, [sp, #28]
 80075f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075f4:	931a      	str	r3, [sp, #104]	; 0x68
 80075f6:	4654      	mov	r4, sl
 80075f8:	2205      	movs	r2, #5
 80075fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075fe:	4858      	ldr	r0, [pc, #352]	; (8007760 <_vfiprintf_r+0x24c>)
 8007600:	f000 fd32 	bl	8008068 <memchr>
 8007604:	9a04      	ldr	r2, [sp, #16]
 8007606:	b9d8      	cbnz	r0, 8007640 <_vfiprintf_r+0x12c>
 8007608:	06d1      	lsls	r1, r2, #27
 800760a:	bf44      	itt	mi
 800760c:	2320      	movmi	r3, #32
 800760e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007612:	0713      	lsls	r3, r2, #28
 8007614:	bf44      	itt	mi
 8007616:	232b      	movmi	r3, #43	; 0x2b
 8007618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800761c:	f89a 3000 	ldrb.w	r3, [sl]
 8007620:	2b2a      	cmp	r3, #42	; 0x2a
 8007622:	d015      	beq.n	8007650 <_vfiprintf_r+0x13c>
 8007624:	4654      	mov	r4, sl
 8007626:	2000      	movs	r0, #0
 8007628:	f04f 0c0a 	mov.w	ip, #10
 800762c:	9a07      	ldr	r2, [sp, #28]
 800762e:	4621      	mov	r1, r4
 8007630:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007634:	3b30      	subs	r3, #48	; 0x30
 8007636:	2b09      	cmp	r3, #9
 8007638:	d94e      	bls.n	80076d8 <_vfiprintf_r+0x1c4>
 800763a:	b1b0      	cbz	r0, 800766a <_vfiprintf_r+0x156>
 800763c:	9207      	str	r2, [sp, #28]
 800763e:	e014      	b.n	800766a <_vfiprintf_r+0x156>
 8007640:	eba0 0308 	sub.w	r3, r0, r8
 8007644:	fa09 f303 	lsl.w	r3, r9, r3
 8007648:	4313      	orrs	r3, r2
 800764a:	46a2      	mov	sl, r4
 800764c:	9304      	str	r3, [sp, #16]
 800764e:	e7d2      	b.n	80075f6 <_vfiprintf_r+0xe2>
 8007650:	9b03      	ldr	r3, [sp, #12]
 8007652:	1d19      	adds	r1, r3, #4
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	9103      	str	r1, [sp, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	bfbb      	ittet	lt
 800765c:	425b      	neglt	r3, r3
 800765e:	f042 0202 	orrlt.w	r2, r2, #2
 8007662:	9307      	strge	r3, [sp, #28]
 8007664:	9307      	strlt	r3, [sp, #28]
 8007666:	bfb8      	it	lt
 8007668:	9204      	strlt	r2, [sp, #16]
 800766a:	7823      	ldrb	r3, [r4, #0]
 800766c:	2b2e      	cmp	r3, #46	; 0x2e
 800766e:	d10c      	bne.n	800768a <_vfiprintf_r+0x176>
 8007670:	7863      	ldrb	r3, [r4, #1]
 8007672:	2b2a      	cmp	r3, #42	; 0x2a
 8007674:	d135      	bne.n	80076e2 <_vfiprintf_r+0x1ce>
 8007676:	9b03      	ldr	r3, [sp, #12]
 8007678:	3402      	adds	r4, #2
 800767a:	1d1a      	adds	r2, r3, #4
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	9203      	str	r2, [sp, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	bfb8      	it	lt
 8007684:	f04f 33ff 	movlt.w	r3, #4294967295
 8007688:	9305      	str	r3, [sp, #20]
 800768a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007764 <_vfiprintf_r+0x250>
 800768e:	2203      	movs	r2, #3
 8007690:	4650      	mov	r0, sl
 8007692:	7821      	ldrb	r1, [r4, #0]
 8007694:	f000 fce8 	bl	8008068 <memchr>
 8007698:	b140      	cbz	r0, 80076ac <_vfiprintf_r+0x198>
 800769a:	2340      	movs	r3, #64	; 0x40
 800769c:	eba0 000a 	sub.w	r0, r0, sl
 80076a0:	fa03 f000 	lsl.w	r0, r3, r0
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	3401      	adds	r4, #1
 80076a8:	4303      	orrs	r3, r0
 80076aa:	9304      	str	r3, [sp, #16]
 80076ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076b0:	2206      	movs	r2, #6
 80076b2:	482d      	ldr	r0, [pc, #180]	; (8007768 <_vfiprintf_r+0x254>)
 80076b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076b8:	f000 fcd6 	bl	8008068 <memchr>
 80076bc:	2800      	cmp	r0, #0
 80076be:	d03f      	beq.n	8007740 <_vfiprintf_r+0x22c>
 80076c0:	4b2a      	ldr	r3, [pc, #168]	; (800776c <_vfiprintf_r+0x258>)
 80076c2:	bb1b      	cbnz	r3, 800770c <_vfiprintf_r+0x1f8>
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	3307      	adds	r3, #7
 80076c8:	f023 0307 	bic.w	r3, r3, #7
 80076cc:	3308      	adds	r3, #8
 80076ce:	9303      	str	r3, [sp, #12]
 80076d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d2:	443b      	add	r3, r7
 80076d4:	9309      	str	r3, [sp, #36]	; 0x24
 80076d6:	e767      	b.n	80075a8 <_vfiprintf_r+0x94>
 80076d8:	460c      	mov	r4, r1
 80076da:	2001      	movs	r0, #1
 80076dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80076e0:	e7a5      	b.n	800762e <_vfiprintf_r+0x11a>
 80076e2:	2300      	movs	r3, #0
 80076e4:	f04f 0c0a 	mov.w	ip, #10
 80076e8:	4619      	mov	r1, r3
 80076ea:	3401      	adds	r4, #1
 80076ec:	9305      	str	r3, [sp, #20]
 80076ee:	4620      	mov	r0, r4
 80076f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076f4:	3a30      	subs	r2, #48	; 0x30
 80076f6:	2a09      	cmp	r2, #9
 80076f8:	d903      	bls.n	8007702 <_vfiprintf_r+0x1ee>
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0c5      	beq.n	800768a <_vfiprintf_r+0x176>
 80076fe:	9105      	str	r1, [sp, #20]
 8007700:	e7c3      	b.n	800768a <_vfiprintf_r+0x176>
 8007702:	4604      	mov	r4, r0
 8007704:	2301      	movs	r3, #1
 8007706:	fb0c 2101 	mla	r1, ip, r1, r2
 800770a:	e7f0      	b.n	80076ee <_vfiprintf_r+0x1da>
 800770c:	ab03      	add	r3, sp, #12
 800770e:	9300      	str	r3, [sp, #0]
 8007710:	462a      	mov	r2, r5
 8007712:	4630      	mov	r0, r6
 8007714:	4b16      	ldr	r3, [pc, #88]	; (8007770 <_vfiprintf_r+0x25c>)
 8007716:	a904      	add	r1, sp, #16
 8007718:	f3af 8000 	nop.w
 800771c:	4607      	mov	r7, r0
 800771e:	1c78      	adds	r0, r7, #1
 8007720:	d1d6      	bne.n	80076d0 <_vfiprintf_r+0x1bc>
 8007722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007724:	07d9      	lsls	r1, r3, #31
 8007726:	d405      	bmi.n	8007734 <_vfiprintf_r+0x220>
 8007728:	89ab      	ldrh	r3, [r5, #12]
 800772a:	059a      	lsls	r2, r3, #22
 800772c:	d402      	bmi.n	8007734 <_vfiprintf_r+0x220>
 800772e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007730:	f000 fc33 	bl	8007f9a <__retarget_lock_release_recursive>
 8007734:	89ab      	ldrh	r3, [r5, #12]
 8007736:	065b      	lsls	r3, r3, #25
 8007738:	f53f af12 	bmi.w	8007560 <_vfiprintf_r+0x4c>
 800773c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800773e:	e711      	b.n	8007564 <_vfiprintf_r+0x50>
 8007740:	ab03      	add	r3, sp, #12
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	462a      	mov	r2, r5
 8007746:	4630      	mov	r0, r6
 8007748:	4b09      	ldr	r3, [pc, #36]	; (8007770 <_vfiprintf_r+0x25c>)
 800774a:	a904      	add	r1, sp, #16
 800774c:	f000 f882 	bl	8007854 <_printf_i>
 8007750:	e7e4      	b.n	800771c <_vfiprintf_r+0x208>
 8007752:	bf00      	nop
 8007754:	080085e0 	.word	0x080085e0
 8007758:	08008600 	.word	0x08008600
 800775c:	080085c0 	.word	0x080085c0
 8007760:	0800858c 	.word	0x0800858c
 8007764:	08008592 	.word	0x08008592
 8007768:	08008596 	.word	0x08008596
 800776c:	00000000 	.word	0x00000000
 8007770:	080074ef 	.word	0x080074ef

08007774 <_printf_common>:
 8007774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007778:	4616      	mov	r6, r2
 800777a:	4699      	mov	r9, r3
 800777c:	688a      	ldr	r2, [r1, #8]
 800777e:	690b      	ldr	r3, [r1, #16]
 8007780:	4607      	mov	r7, r0
 8007782:	4293      	cmp	r3, r2
 8007784:	bfb8      	it	lt
 8007786:	4613      	movlt	r3, r2
 8007788:	6033      	str	r3, [r6, #0]
 800778a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800778e:	460c      	mov	r4, r1
 8007790:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007794:	b10a      	cbz	r2, 800779a <_printf_common+0x26>
 8007796:	3301      	adds	r3, #1
 8007798:	6033      	str	r3, [r6, #0]
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	0699      	lsls	r1, r3, #26
 800779e:	bf42      	ittt	mi
 80077a0:	6833      	ldrmi	r3, [r6, #0]
 80077a2:	3302      	addmi	r3, #2
 80077a4:	6033      	strmi	r3, [r6, #0]
 80077a6:	6825      	ldr	r5, [r4, #0]
 80077a8:	f015 0506 	ands.w	r5, r5, #6
 80077ac:	d106      	bne.n	80077bc <_printf_common+0x48>
 80077ae:	f104 0a19 	add.w	sl, r4, #25
 80077b2:	68e3      	ldr	r3, [r4, #12]
 80077b4:	6832      	ldr	r2, [r6, #0]
 80077b6:	1a9b      	subs	r3, r3, r2
 80077b8:	42ab      	cmp	r3, r5
 80077ba:	dc28      	bgt.n	800780e <_printf_common+0x9a>
 80077bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077c0:	1e13      	subs	r3, r2, #0
 80077c2:	6822      	ldr	r2, [r4, #0]
 80077c4:	bf18      	it	ne
 80077c6:	2301      	movne	r3, #1
 80077c8:	0692      	lsls	r2, r2, #26
 80077ca:	d42d      	bmi.n	8007828 <_printf_common+0xb4>
 80077cc:	4649      	mov	r1, r9
 80077ce:	4638      	mov	r0, r7
 80077d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077d4:	47c0      	blx	r8
 80077d6:	3001      	adds	r0, #1
 80077d8:	d020      	beq.n	800781c <_printf_common+0xa8>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	68e5      	ldr	r5, [r4, #12]
 80077de:	f003 0306 	and.w	r3, r3, #6
 80077e2:	2b04      	cmp	r3, #4
 80077e4:	bf18      	it	ne
 80077e6:	2500      	movne	r5, #0
 80077e8:	6832      	ldr	r2, [r6, #0]
 80077ea:	f04f 0600 	mov.w	r6, #0
 80077ee:	68a3      	ldr	r3, [r4, #8]
 80077f0:	bf08      	it	eq
 80077f2:	1aad      	subeq	r5, r5, r2
 80077f4:	6922      	ldr	r2, [r4, #16]
 80077f6:	bf08      	it	eq
 80077f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077fc:	4293      	cmp	r3, r2
 80077fe:	bfc4      	itt	gt
 8007800:	1a9b      	subgt	r3, r3, r2
 8007802:	18ed      	addgt	r5, r5, r3
 8007804:	341a      	adds	r4, #26
 8007806:	42b5      	cmp	r5, r6
 8007808:	d11a      	bne.n	8007840 <_printf_common+0xcc>
 800780a:	2000      	movs	r0, #0
 800780c:	e008      	b.n	8007820 <_printf_common+0xac>
 800780e:	2301      	movs	r3, #1
 8007810:	4652      	mov	r2, sl
 8007812:	4649      	mov	r1, r9
 8007814:	4638      	mov	r0, r7
 8007816:	47c0      	blx	r8
 8007818:	3001      	adds	r0, #1
 800781a:	d103      	bne.n	8007824 <_printf_common+0xb0>
 800781c:	f04f 30ff 	mov.w	r0, #4294967295
 8007820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007824:	3501      	adds	r5, #1
 8007826:	e7c4      	b.n	80077b2 <_printf_common+0x3e>
 8007828:	2030      	movs	r0, #48	; 0x30
 800782a:	18e1      	adds	r1, r4, r3
 800782c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007830:	1c5a      	adds	r2, r3, #1
 8007832:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007836:	4422      	add	r2, r4
 8007838:	3302      	adds	r3, #2
 800783a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800783e:	e7c5      	b.n	80077cc <_printf_common+0x58>
 8007840:	2301      	movs	r3, #1
 8007842:	4622      	mov	r2, r4
 8007844:	4649      	mov	r1, r9
 8007846:	4638      	mov	r0, r7
 8007848:	47c0      	blx	r8
 800784a:	3001      	adds	r0, #1
 800784c:	d0e6      	beq.n	800781c <_printf_common+0xa8>
 800784e:	3601      	adds	r6, #1
 8007850:	e7d9      	b.n	8007806 <_printf_common+0x92>
	...

08007854 <_printf_i>:
 8007854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007858:	7e0f      	ldrb	r7, [r1, #24]
 800785a:	4691      	mov	r9, r2
 800785c:	2f78      	cmp	r7, #120	; 0x78
 800785e:	4680      	mov	r8, r0
 8007860:	460c      	mov	r4, r1
 8007862:	469a      	mov	sl, r3
 8007864:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007866:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800786a:	d807      	bhi.n	800787c <_printf_i+0x28>
 800786c:	2f62      	cmp	r7, #98	; 0x62
 800786e:	d80a      	bhi.n	8007886 <_printf_i+0x32>
 8007870:	2f00      	cmp	r7, #0
 8007872:	f000 80d9 	beq.w	8007a28 <_printf_i+0x1d4>
 8007876:	2f58      	cmp	r7, #88	; 0x58
 8007878:	f000 80a4 	beq.w	80079c4 <_printf_i+0x170>
 800787c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007880:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007884:	e03a      	b.n	80078fc <_printf_i+0xa8>
 8007886:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800788a:	2b15      	cmp	r3, #21
 800788c:	d8f6      	bhi.n	800787c <_printf_i+0x28>
 800788e:	a101      	add	r1, pc, #4	; (adr r1, 8007894 <_printf_i+0x40>)
 8007890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007894:	080078ed 	.word	0x080078ed
 8007898:	08007901 	.word	0x08007901
 800789c:	0800787d 	.word	0x0800787d
 80078a0:	0800787d 	.word	0x0800787d
 80078a4:	0800787d 	.word	0x0800787d
 80078a8:	0800787d 	.word	0x0800787d
 80078ac:	08007901 	.word	0x08007901
 80078b0:	0800787d 	.word	0x0800787d
 80078b4:	0800787d 	.word	0x0800787d
 80078b8:	0800787d 	.word	0x0800787d
 80078bc:	0800787d 	.word	0x0800787d
 80078c0:	08007a0f 	.word	0x08007a0f
 80078c4:	08007931 	.word	0x08007931
 80078c8:	080079f1 	.word	0x080079f1
 80078cc:	0800787d 	.word	0x0800787d
 80078d0:	0800787d 	.word	0x0800787d
 80078d4:	08007a31 	.word	0x08007a31
 80078d8:	0800787d 	.word	0x0800787d
 80078dc:	08007931 	.word	0x08007931
 80078e0:	0800787d 	.word	0x0800787d
 80078e4:	0800787d 	.word	0x0800787d
 80078e8:	080079f9 	.word	0x080079f9
 80078ec:	682b      	ldr	r3, [r5, #0]
 80078ee:	1d1a      	adds	r2, r3, #4
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	602a      	str	r2, [r5, #0]
 80078f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078fc:	2301      	movs	r3, #1
 80078fe:	e0a4      	b.n	8007a4a <_printf_i+0x1f6>
 8007900:	6820      	ldr	r0, [r4, #0]
 8007902:	6829      	ldr	r1, [r5, #0]
 8007904:	0606      	lsls	r6, r0, #24
 8007906:	f101 0304 	add.w	r3, r1, #4
 800790a:	d50a      	bpl.n	8007922 <_printf_i+0xce>
 800790c:	680e      	ldr	r6, [r1, #0]
 800790e:	602b      	str	r3, [r5, #0]
 8007910:	2e00      	cmp	r6, #0
 8007912:	da03      	bge.n	800791c <_printf_i+0xc8>
 8007914:	232d      	movs	r3, #45	; 0x2d
 8007916:	4276      	negs	r6, r6
 8007918:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800791c:	230a      	movs	r3, #10
 800791e:	485e      	ldr	r0, [pc, #376]	; (8007a98 <_printf_i+0x244>)
 8007920:	e019      	b.n	8007956 <_printf_i+0x102>
 8007922:	680e      	ldr	r6, [r1, #0]
 8007924:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007928:	602b      	str	r3, [r5, #0]
 800792a:	bf18      	it	ne
 800792c:	b236      	sxthne	r6, r6
 800792e:	e7ef      	b.n	8007910 <_printf_i+0xbc>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	6820      	ldr	r0, [r4, #0]
 8007934:	1d19      	adds	r1, r3, #4
 8007936:	6029      	str	r1, [r5, #0]
 8007938:	0601      	lsls	r1, r0, #24
 800793a:	d501      	bpl.n	8007940 <_printf_i+0xec>
 800793c:	681e      	ldr	r6, [r3, #0]
 800793e:	e002      	b.n	8007946 <_printf_i+0xf2>
 8007940:	0646      	lsls	r6, r0, #25
 8007942:	d5fb      	bpl.n	800793c <_printf_i+0xe8>
 8007944:	881e      	ldrh	r6, [r3, #0]
 8007946:	2f6f      	cmp	r7, #111	; 0x6f
 8007948:	bf0c      	ite	eq
 800794a:	2308      	moveq	r3, #8
 800794c:	230a      	movne	r3, #10
 800794e:	4852      	ldr	r0, [pc, #328]	; (8007a98 <_printf_i+0x244>)
 8007950:	2100      	movs	r1, #0
 8007952:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007956:	6865      	ldr	r5, [r4, #4]
 8007958:	2d00      	cmp	r5, #0
 800795a:	bfa8      	it	ge
 800795c:	6821      	ldrge	r1, [r4, #0]
 800795e:	60a5      	str	r5, [r4, #8]
 8007960:	bfa4      	itt	ge
 8007962:	f021 0104 	bicge.w	r1, r1, #4
 8007966:	6021      	strge	r1, [r4, #0]
 8007968:	b90e      	cbnz	r6, 800796e <_printf_i+0x11a>
 800796a:	2d00      	cmp	r5, #0
 800796c:	d04d      	beq.n	8007a0a <_printf_i+0x1b6>
 800796e:	4615      	mov	r5, r2
 8007970:	fbb6 f1f3 	udiv	r1, r6, r3
 8007974:	fb03 6711 	mls	r7, r3, r1, r6
 8007978:	5dc7      	ldrb	r7, [r0, r7]
 800797a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800797e:	4637      	mov	r7, r6
 8007980:	42bb      	cmp	r3, r7
 8007982:	460e      	mov	r6, r1
 8007984:	d9f4      	bls.n	8007970 <_printf_i+0x11c>
 8007986:	2b08      	cmp	r3, #8
 8007988:	d10b      	bne.n	80079a2 <_printf_i+0x14e>
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	07de      	lsls	r6, r3, #31
 800798e:	d508      	bpl.n	80079a2 <_printf_i+0x14e>
 8007990:	6923      	ldr	r3, [r4, #16]
 8007992:	6861      	ldr	r1, [r4, #4]
 8007994:	4299      	cmp	r1, r3
 8007996:	bfde      	ittt	le
 8007998:	2330      	movle	r3, #48	; 0x30
 800799a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800799e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079a2:	1b52      	subs	r2, r2, r5
 80079a4:	6122      	str	r2, [r4, #16]
 80079a6:	464b      	mov	r3, r9
 80079a8:	4621      	mov	r1, r4
 80079aa:	4640      	mov	r0, r8
 80079ac:	f8cd a000 	str.w	sl, [sp]
 80079b0:	aa03      	add	r2, sp, #12
 80079b2:	f7ff fedf 	bl	8007774 <_printf_common>
 80079b6:	3001      	adds	r0, #1
 80079b8:	d14c      	bne.n	8007a54 <_printf_i+0x200>
 80079ba:	f04f 30ff 	mov.w	r0, #4294967295
 80079be:	b004      	add	sp, #16
 80079c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079c4:	4834      	ldr	r0, [pc, #208]	; (8007a98 <_printf_i+0x244>)
 80079c6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079ca:	6829      	ldr	r1, [r5, #0]
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80079d2:	6029      	str	r1, [r5, #0]
 80079d4:	061d      	lsls	r5, r3, #24
 80079d6:	d514      	bpl.n	8007a02 <_printf_i+0x1ae>
 80079d8:	07df      	lsls	r7, r3, #31
 80079da:	bf44      	itt	mi
 80079dc:	f043 0320 	orrmi.w	r3, r3, #32
 80079e0:	6023      	strmi	r3, [r4, #0]
 80079e2:	b91e      	cbnz	r6, 80079ec <_printf_i+0x198>
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	f023 0320 	bic.w	r3, r3, #32
 80079ea:	6023      	str	r3, [r4, #0]
 80079ec:	2310      	movs	r3, #16
 80079ee:	e7af      	b.n	8007950 <_printf_i+0xfc>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	f043 0320 	orr.w	r3, r3, #32
 80079f6:	6023      	str	r3, [r4, #0]
 80079f8:	2378      	movs	r3, #120	; 0x78
 80079fa:	4828      	ldr	r0, [pc, #160]	; (8007a9c <_printf_i+0x248>)
 80079fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a00:	e7e3      	b.n	80079ca <_printf_i+0x176>
 8007a02:	0659      	lsls	r1, r3, #25
 8007a04:	bf48      	it	mi
 8007a06:	b2b6      	uxthmi	r6, r6
 8007a08:	e7e6      	b.n	80079d8 <_printf_i+0x184>
 8007a0a:	4615      	mov	r5, r2
 8007a0c:	e7bb      	b.n	8007986 <_printf_i+0x132>
 8007a0e:	682b      	ldr	r3, [r5, #0]
 8007a10:	6826      	ldr	r6, [r4, #0]
 8007a12:	1d18      	adds	r0, r3, #4
 8007a14:	6961      	ldr	r1, [r4, #20]
 8007a16:	6028      	str	r0, [r5, #0]
 8007a18:	0635      	lsls	r5, r6, #24
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	d501      	bpl.n	8007a22 <_printf_i+0x1ce>
 8007a1e:	6019      	str	r1, [r3, #0]
 8007a20:	e002      	b.n	8007a28 <_printf_i+0x1d4>
 8007a22:	0670      	lsls	r0, r6, #25
 8007a24:	d5fb      	bpl.n	8007a1e <_printf_i+0x1ca>
 8007a26:	8019      	strh	r1, [r3, #0]
 8007a28:	2300      	movs	r3, #0
 8007a2a:	4615      	mov	r5, r2
 8007a2c:	6123      	str	r3, [r4, #16]
 8007a2e:	e7ba      	b.n	80079a6 <_printf_i+0x152>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	2100      	movs	r1, #0
 8007a34:	1d1a      	adds	r2, r3, #4
 8007a36:	602a      	str	r2, [r5, #0]
 8007a38:	681d      	ldr	r5, [r3, #0]
 8007a3a:	6862      	ldr	r2, [r4, #4]
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	f000 fb13 	bl	8008068 <memchr>
 8007a42:	b108      	cbz	r0, 8007a48 <_printf_i+0x1f4>
 8007a44:	1b40      	subs	r0, r0, r5
 8007a46:	6060      	str	r0, [r4, #4]
 8007a48:	6863      	ldr	r3, [r4, #4]
 8007a4a:	6123      	str	r3, [r4, #16]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a52:	e7a8      	b.n	80079a6 <_printf_i+0x152>
 8007a54:	462a      	mov	r2, r5
 8007a56:	4649      	mov	r1, r9
 8007a58:	4640      	mov	r0, r8
 8007a5a:	6923      	ldr	r3, [r4, #16]
 8007a5c:	47d0      	blx	sl
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d0ab      	beq.n	80079ba <_printf_i+0x166>
 8007a62:	6823      	ldr	r3, [r4, #0]
 8007a64:	079b      	lsls	r3, r3, #30
 8007a66:	d413      	bmi.n	8007a90 <_printf_i+0x23c>
 8007a68:	68e0      	ldr	r0, [r4, #12]
 8007a6a:	9b03      	ldr	r3, [sp, #12]
 8007a6c:	4298      	cmp	r0, r3
 8007a6e:	bfb8      	it	lt
 8007a70:	4618      	movlt	r0, r3
 8007a72:	e7a4      	b.n	80079be <_printf_i+0x16a>
 8007a74:	2301      	movs	r3, #1
 8007a76:	4632      	mov	r2, r6
 8007a78:	4649      	mov	r1, r9
 8007a7a:	4640      	mov	r0, r8
 8007a7c:	47d0      	blx	sl
 8007a7e:	3001      	adds	r0, #1
 8007a80:	d09b      	beq.n	80079ba <_printf_i+0x166>
 8007a82:	3501      	adds	r5, #1
 8007a84:	68e3      	ldr	r3, [r4, #12]
 8007a86:	9903      	ldr	r1, [sp, #12]
 8007a88:	1a5b      	subs	r3, r3, r1
 8007a8a:	42ab      	cmp	r3, r5
 8007a8c:	dcf2      	bgt.n	8007a74 <_printf_i+0x220>
 8007a8e:	e7eb      	b.n	8007a68 <_printf_i+0x214>
 8007a90:	2500      	movs	r5, #0
 8007a92:	f104 0619 	add.w	r6, r4, #25
 8007a96:	e7f5      	b.n	8007a84 <_printf_i+0x230>
 8007a98:	0800859d 	.word	0x0800859d
 8007a9c:	080085ae 	.word	0x080085ae

08007aa0 <__swbuf_r>:
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	460e      	mov	r6, r1
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	b118      	cbz	r0, 8007ab2 <__swbuf_r+0x12>
 8007aaa:	6983      	ldr	r3, [r0, #24]
 8007aac:	b90b      	cbnz	r3, 8007ab2 <__swbuf_r+0x12>
 8007aae:	f000 f9d5 	bl	8007e5c <__sinit>
 8007ab2:	4b21      	ldr	r3, [pc, #132]	; (8007b38 <__swbuf_r+0x98>)
 8007ab4:	429c      	cmp	r4, r3
 8007ab6:	d12b      	bne.n	8007b10 <__swbuf_r+0x70>
 8007ab8:	686c      	ldr	r4, [r5, #4]
 8007aba:	69a3      	ldr	r3, [r4, #24]
 8007abc:	60a3      	str	r3, [r4, #8]
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	071a      	lsls	r2, r3, #28
 8007ac2:	d52f      	bpl.n	8007b24 <__swbuf_r+0x84>
 8007ac4:	6923      	ldr	r3, [r4, #16]
 8007ac6:	b36b      	cbz	r3, 8007b24 <__swbuf_r+0x84>
 8007ac8:	6923      	ldr	r3, [r4, #16]
 8007aca:	6820      	ldr	r0, [r4, #0]
 8007acc:	b2f6      	uxtb	r6, r6
 8007ace:	1ac0      	subs	r0, r0, r3
 8007ad0:	6963      	ldr	r3, [r4, #20]
 8007ad2:	4637      	mov	r7, r6
 8007ad4:	4283      	cmp	r3, r0
 8007ad6:	dc04      	bgt.n	8007ae2 <__swbuf_r+0x42>
 8007ad8:	4621      	mov	r1, r4
 8007ada:	4628      	mov	r0, r5
 8007adc:	f000 f92a 	bl	8007d34 <_fflush_r>
 8007ae0:	bb30      	cbnz	r0, 8007b30 <__swbuf_r+0x90>
 8007ae2:	68a3      	ldr	r3, [r4, #8]
 8007ae4:	3001      	adds	r0, #1
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	60a3      	str	r3, [r4, #8]
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	6022      	str	r2, [r4, #0]
 8007af0:	701e      	strb	r6, [r3, #0]
 8007af2:	6963      	ldr	r3, [r4, #20]
 8007af4:	4283      	cmp	r3, r0
 8007af6:	d004      	beq.n	8007b02 <__swbuf_r+0x62>
 8007af8:	89a3      	ldrh	r3, [r4, #12]
 8007afa:	07db      	lsls	r3, r3, #31
 8007afc:	d506      	bpl.n	8007b0c <__swbuf_r+0x6c>
 8007afe:	2e0a      	cmp	r6, #10
 8007b00:	d104      	bne.n	8007b0c <__swbuf_r+0x6c>
 8007b02:	4621      	mov	r1, r4
 8007b04:	4628      	mov	r0, r5
 8007b06:	f000 f915 	bl	8007d34 <_fflush_r>
 8007b0a:	b988      	cbnz	r0, 8007b30 <__swbuf_r+0x90>
 8007b0c:	4638      	mov	r0, r7
 8007b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b10:	4b0a      	ldr	r3, [pc, #40]	; (8007b3c <__swbuf_r+0x9c>)
 8007b12:	429c      	cmp	r4, r3
 8007b14:	d101      	bne.n	8007b1a <__swbuf_r+0x7a>
 8007b16:	68ac      	ldr	r4, [r5, #8]
 8007b18:	e7cf      	b.n	8007aba <__swbuf_r+0x1a>
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <__swbuf_r+0xa0>)
 8007b1c:	429c      	cmp	r4, r3
 8007b1e:	bf08      	it	eq
 8007b20:	68ec      	ldreq	r4, [r5, #12]
 8007b22:	e7ca      	b.n	8007aba <__swbuf_r+0x1a>
 8007b24:	4621      	mov	r1, r4
 8007b26:	4628      	mov	r0, r5
 8007b28:	f000 f80c 	bl	8007b44 <__swsetup_r>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d0cb      	beq.n	8007ac8 <__swbuf_r+0x28>
 8007b30:	f04f 37ff 	mov.w	r7, #4294967295
 8007b34:	e7ea      	b.n	8007b0c <__swbuf_r+0x6c>
 8007b36:	bf00      	nop
 8007b38:	080085e0 	.word	0x080085e0
 8007b3c:	08008600 	.word	0x08008600
 8007b40:	080085c0 	.word	0x080085c0

08007b44 <__swsetup_r>:
 8007b44:	4b32      	ldr	r3, [pc, #200]	; (8007c10 <__swsetup_r+0xcc>)
 8007b46:	b570      	push	{r4, r5, r6, lr}
 8007b48:	681d      	ldr	r5, [r3, #0]
 8007b4a:	4606      	mov	r6, r0
 8007b4c:	460c      	mov	r4, r1
 8007b4e:	b125      	cbz	r5, 8007b5a <__swsetup_r+0x16>
 8007b50:	69ab      	ldr	r3, [r5, #24]
 8007b52:	b913      	cbnz	r3, 8007b5a <__swsetup_r+0x16>
 8007b54:	4628      	mov	r0, r5
 8007b56:	f000 f981 	bl	8007e5c <__sinit>
 8007b5a:	4b2e      	ldr	r3, [pc, #184]	; (8007c14 <__swsetup_r+0xd0>)
 8007b5c:	429c      	cmp	r4, r3
 8007b5e:	d10f      	bne.n	8007b80 <__swsetup_r+0x3c>
 8007b60:	686c      	ldr	r4, [r5, #4]
 8007b62:	89a3      	ldrh	r3, [r4, #12]
 8007b64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b68:	0719      	lsls	r1, r3, #28
 8007b6a:	d42c      	bmi.n	8007bc6 <__swsetup_r+0x82>
 8007b6c:	06dd      	lsls	r5, r3, #27
 8007b6e:	d411      	bmi.n	8007b94 <__swsetup_r+0x50>
 8007b70:	2309      	movs	r3, #9
 8007b72:	6033      	str	r3, [r6, #0]
 8007b74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295
 8007b7c:	81a3      	strh	r3, [r4, #12]
 8007b7e:	e03e      	b.n	8007bfe <__swsetup_r+0xba>
 8007b80:	4b25      	ldr	r3, [pc, #148]	; (8007c18 <__swsetup_r+0xd4>)
 8007b82:	429c      	cmp	r4, r3
 8007b84:	d101      	bne.n	8007b8a <__swsetup_r+0x46>
 8007b86:	68ac      	ldr	r4, [r5, #8]
 8007b88:	e7eb      	b.n	8007b62 <__swsetup_r+0x1e>
 8007b8a:	4b24      	ldr	r3, [pc, #144]	; (8007c1c <__swsetup_r+0xd8>)
 8007b8c:	429c      	cmp	r4, r3
 8007b8e:	bf08      	it	eq
 8007b90:	68ec      	ldreq	r4, [r5, #12]
 8007b92:	e7e6      	b.n	8007b62 <__swsetup_r+0x1e>
 8007b94:	0758      	lsls	r0, r3, #29
 8007b96:	d512      	bpl.n	8007bbe <__swsetup_r+0x7a>
 8007b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b9a:	b141      	cbz	r1, 8007bae <__swsetup_r+0x6a>
 8007b9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ba0:	4299      	cmp	r1, r3
 8007ba2:	d002      	beq.n	8007baa <__swsetup_r+0x66>
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	f000 fa6d 	bl	8008084 <_free_r>
 8007baa:	2300      	movs	r3, #0
 8007bac:	6363      	str	r3, [r4, #52]	; 0x34
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007bb4:	81a3      	strh	r3, [r4, #12]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	6063      	str	r3, [r4, #4]
 8007bba:	6923      	ldr	r3, [r4, #16]
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	89a3      	ldrh	r3, [r4, #12]
 8007bc0:	f043 0308 	orr.w	r3, r3, #8
 8007bc4:	81a3      	strh	r3, [r4, #12]
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	b94b      	cbnz	r3, 8007bde <__swsetup_r+0x9a>
 8007bca:	89a3      	ldrh	r3, [r4, #12]
 8007bcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007bd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bd4:	d003      	beq.n	8007bde <__swsetup_r+0x9a>
 8007bd6:	4621      	mov	r1, r4
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f000 fa05 	bl	8007fe8 <__smakebuf_r>
 8007bde:	89a0      	ldrh	r0, [r4, #12]
 8007be0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007be4:	f010 0301 	ands.w	r3, r0, #1
 8007be8:	d00a      	beq.n	8007c00 <__swsetup_r+0xbc>
 8007bea:	2300      	movs	r3, #0
 8007bec:	60a3      	str	r3, [r4, #8]
 8007bee:	6963      	ldr	r3, [r4, #20]
 8007bf0:	425b      	negs	r3, r3
 8007bf2:	61a3      	str	r3, [r4, #24]
 8007bf4:	6923      	ldr	r3, [r4, #16]
 8007bf6:	b943      	cbnz	r3, 8007c0a <__swsetup_r+0xc6>
 8007bf8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007bfc:	d1ba      	bne.n	8007b74 <__swsetup_r+0x30>
 8007bfe:	bd70      	pop	{r4, r5, r6, pc}
 8007c00:	0781      	lsls	r1, r0, #30
 8007c02:	bf58      	it	pl
 8007c04:	6963      	ldrpl	r3, [r4, #20]
 8007c06:	60a3      	str	r3, [r4, #8]
 8007c08:	e7f4      	b.n	8007bf4 <__swsetup_r+0xb0>
 8007c0a:	2000      	movs	r0, #0
 8007c0c:	e7f7      	b.n	8007bfe <__swsetup_r+0xba>
 8007c0e:	bf00      	nop
 8007c10:	20000010 	.word	0x20000010
 8007c14:	080085e0 	.word	0x080085e0
 8007c18:	08008600 	.word	0x08008600
 8007c1c:	080085c0 	.word	0x080085c0

08007c20 <abort>:
 8007c20:	2006      	movs	r0, #6
 8007c22:	b508      	push	{r3, lr}
 8007c24:	f000 fb42 	bl	80082ac <raise>
 8007c28:	2001      	movs	r0, #1
 8007c2a:	f7fb fe08 	bl	800383e <_exit>
	...

08007c30 <__sflush_r>:
 8007c30:	898a      	ldrh	r2, [r1, #12]
 8007c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c34:	4605      	mov	r5, r0
 8007c36:	0710      	lsls	r0, r2, #28
 8007c38:	460c      	mov	r4, r1
 8007c3a:	d457      	bmi.n	8007cec <__sflush_r+0xbc>
 8007c3c:	684b      	ldr	r3, [r1, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	dc04      	bgt.n	8007c4c <__sflush_r+0x1c>
 8007c42:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	dc01      	bgt.n	8007c4c <__sflush_r+0x1c>
 8007c48:	2000      	movs	r0, #0
 8007c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c4e:	2e00      	cmp	r6, #0
 8007c50:	d0fa      	beq.n	8007c48 <__sflush_r+0x18>
 8007c52:	2300      	movs	r3, #0
 8007c54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007c58:	682f      	ldr	r7, [r5, #0]
 8007c5a:	602b      	str	r3, [r5, #0]
 8007c5c:	d032      	beq.n	8007cc4 <__sflush_r+0x94>
 8007c5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	075a      	lsls	r2, r3, #29
 8007c64:	d505      	bpl.n	8007c72 <__sflush_r+0x42>
 8007c66:	6863      	ldr	r3, [r4, #4]
 8007c68:	1ac0      	subs	r0, r0, r3
 8007c6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c6c:	b10b      	cbz	r3, 8007c72 <__sflush_r+0x42>
 8007c6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c70:	1ac0      	subs	r0, r0, r3
 8007c72:	2300      	movs	r3, #0
 8007c74:	4602      	mov	r2, r0
 8007c76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007c78:	4628      	mov	r0, r5
 8007c7a:	6a21      	ldr	r1, [r4, #32]
 8007c7c:	47b0      	blx	r6
 8007c7e:	1c43      	adds	r3, r0, #1
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	d106      	bne.n	8007c92 <__sflush_r+0x62>
 8007c84:	6829      	ldr	r1, [r5, #0]
 8007c86:	291d      	cmp	r1, #29
 8007c88:	d82c      	bhi.n	8007ce4 <__sflush_r+0xb4>
 8007c8a:	4a29      	ldr	r2, [pc, #164]	; (8007d30 <__sflush_r+0x100>)
 8007c8c:	40ca      	lsrs	r2, r1
 8007c8e:	07d6      	lsls	r6, r2, #31
 8007c90:	d528      	bpl.n	8007ce4 <__sflush_r+0xb4>
 8007c92:	2200      	movs	r2, #0
 8007c94:	6062      	str	r2, [r4, #4]
 8007c96:	6922      	ldr	r2, [r4, #16]
 8007c98:	04d9      	lsls	r1, r3, #19
 8007c9a:	6022      	str	r2, [r4, #0]
 8007c9c:	d504      	bpl.n	8007ca8 <__sflush_r+0x78>
 8007c9e:	1c42      	adds	r2, r0, #1
 8007ca0:	d101      	bne.n	8007ca6 <__sflush_r+0x76>
 8007ca2:	682b      	ldr	r3, [r5, #0]
 8007ca4:	b903      	cbnz	r3, 8007ca8 <__sflush_r+0x78>
 8007ca6:	6560      	str	r0, [r4, #84]	; 0x54
 8007ca8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007caa:	602f      	str	r7, [r5, #0]
 8007cac:	2900      	cmp	r1, #0
 8007cae:	d0cb      	beq.n	8007c48 <__sflush_r+0x18>
 8007cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cb4:	4299      	cmp	r1, r3
 8007cb6:	d002      	beq.n	8007cbe <__sflush_r+0x8e>
 8007cb8:	4628      	mov	r0, r5
 8007cba:	f000 f9e3 	bl	8008084 <_free_r>
 8007cbe:	2000      	movs	r0, #0
 8007cc0:	6360      	str	r0, [r4, #52]	; 0x34
 8007cc2:	e7c2      	b.n	8007c4a <__sflush_r+0x1a>
 8007cc4:	6a21      	ldr	r1, [r4, #32]
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	4628      	mov	r0, r5
 8007cca:	47b0      	blx	r6
 8007ccc:	1c41      	adds	r1, r0, #1
 8007cce:	d1c7      	bne.n	8007c60 <__sflush_r+0x30>
 8007cd0:	682b      	ldr	r3, [r5, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d0c4      	beq.n	8007c60 <__sflush_r+0x30>
 8007cd6:	2b1d      	cmp	r3, #29
 8007cd8:	d001      	beq.n	8007cde <__sflush_r+0xae>
 8007cda:	2b16      	cmp	r3, #22
 8007cdc:	d101      	bne.n	8007ce2 <__sflush_r+0xb2>
 8007cde:	602f      	str	r7, [r5, #0]
 8007ce0:	e7b2      	b.n	8007c48 <__sflush_r+0x18>
 8007ce2:	89a3      	ldrh	r3, [r4, #12]
 8007ce4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ce8:	81a3      	strh	r3, [r4, #12]
 8007cea:	e7ae      	b.n	8007c4a <__sflush_r+0x1a>
 8007cec:	690f      	ldr	r7, [r1, #16]
 8007cee:	2f00      	cmp	r7, #0
 8007cf0:	d0aa      	beq.n	8007c48 <__sflush_r+0x18>
 8007cf2:	0793      	lsls	r3, r2, #30
 8007cf4:	bf18      	it	ne
 8007cf6:	2300      	movne	r3, #0
 8007cf8:	680e      	ldr	r6, [r1, #0]
 8007cfa:	bf08      	it	eq
 8007cfc:	694b      	ldreq	r3, [r1, #20]
 8007cfe:	1bf6      	subs	r6, r6, r7
 8007d00:	600f      	str	r7, [r1, #0]
 8007d02:	608b      	str	r3, [r1, #8]
 8007d04:	2e00      	cmp	r6, #0
 8007d06:	dd9f      	ble.n	8007c48 <__sflush_r+0x18>
 8007d08:	4633      	mov	r3, r6
 8007d0a:	463a      	mov	r2, r7
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	6a21      	ldr	r1, [r4, #32]
 8007d10:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007d14:	47e0      	blx	ip
 8007d16:	2800      	cmp	r0, #0
 8007d18:	dc06      	bgt.n	8007d28 <__sflush_r+0xf8>
 8007d1a:	89a3      	ldrh	r3, [r4, #12]
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d24:	81a3      	strh	r3, [r4, #12]
 8007d26:	e790      	b.n	8007c4a <__sflush_r+0x1a>
 8007d28:	4407      	add	r7, r0
 8007d2a:	1a36      	subs	r6, r6, r0
 8007d2c:	e7ea      	b.n	8007d04 <__sflush_r+0xd4>
 8007d2e:	bf00      	nop
 8007d30:	20400001 	.word	0x20400001

08007d34 <_fflush_r>:
 8007d34:	b538      	push	{r3, r4, r5, lr}
 8007d36:	690b      	ldr	r3, [r1, #16]
 8007d38:	4605      	mov	r5, r0
 8007d3a:	460c      	mov	r4, r1
 8007d3c:	b913      	cbnz	r3, 8007d44 <_fflush_r+0x10>
 8007d3e:	2500      	movs	r5, #0
 8007d40:	4628      	mov	r0, r5
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	b118      	cbz	r0, 8007d4e <_fflush_r+0x1a>
 8007d46:	6983      	ldr	r3, [r0, #24]
 8007d48:	b90b      	cbnz	r3, 8007d4e <_fflush_r+0x1a>
 8007d4a:	f000 f887 	bl	8007e5c <__sinit>
 8007d4e:	4b14      	ldr	r3, [pc, #80]	; (8007da0 <_fflush_r+0x6c>)
 8007d50:	429c      	cmp	r4, r3
 8007d52:	d11b      	bne.n	8007d8c <_fflush_r+0x58>
 8007d54:	686c      	ldr	r4, [r5, #4]
 8007d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d0ef      	beq.n	8007d3e <_fflush_r+0xa>
 8007d5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d60:	07d0      	lsls	r0, r2, #31
 8007d62:	d404      	bmi.n	8007d6e <_fflush_r+0x3a>
 8007d64:	0599      	lsls	r1, r3, #22
 8007d66:	d402      	bmi.n	8007d6e <_fflush_r+0x3a>
 8007d68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d6a:	f000 f915 	bl	8007f98 <__retarget_lock_acquire_recursive>
 8007d6e:	4628      	mov	r0, r5
 8007d70:	4621      	mov	r1, r4
 8007d72:	f7ff ff5d 	bl	8007c30 <__sflush_r>
 8007d76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d78:	4605      	mov	r5, r0
 8007d7a:	07da      	lsls	r2, r3, #31
 8007d7c:	d4e0      	bmi.n	8007d40 <_fflush_r+0xc>
 8007d7e:	89a3      	ldrh	r3, [r4, #12]
 8007d80:	059b      	lsls	r3, r3, #22
 8007d82:	d4dd      	bmi.n	8007d40 <_fflush_r+0xc>
 8007d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d86:	f000 f908 	bl	8007f9a <__retarget_lock_release_recursive>
 8007d8a:	e7d9      	b.n	8007d40 <_fflush_r+0xc>
 8007d8c:	4b05      	ldr	r3, [pc, #20]	; (8007da4 <_fflush_r+0x70>)
 8007d8e:	429c      	cmp	r4, r3
 8007d90:	d101      	bne.n	8007d96 <_fflush_r+0x62>
 8007d92:	68ac      	ldr	r4, [r5, #8]
 8007d94:	e7df      	b.n	8007d56 <_fflush_r+0x22>
 8007d96:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <_fflush_r+0x74>)
 8007d98:	429c      	cmp	r4, r3
 8007d9a:	bf08      	it	eq
 8007d9c:	68ec      	ldreq	r4, [r5, #12]
 8007d9e:	e7da      	b.n	8007d56 <_fflush_r+0x22>
 8007da0:	080085e0 	.word	0x080085e0
 8007da4:	08008600 	.word	0x08008600
 8007da8:	080085c0 	.word	0x080085c0

08007dac <std>:
 8007dac:	2300      	movs	r3, #0
 8007dae:	b510      	push	{r4, lr}
 8007db0:	4604      	mov	r4, r0
 8007db2:	e9c0 3300 	strd	r3, r3, [r0]
 8007db6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007dba:	6083      	str	r3, [r0, #8]
 8007dbc:	8181      	strh	r1, [r0, #12]
 8007dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8007dc0:	81c2      	strh	r2, [r0, #14]
 8007dc2:	6183      	str	r3, [r0, #24]
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	2208      	movs	r2, #8
 8007dc8:	305c      	adds	r0, #92	; 0x5c
 8007dca:	f7ff fb73 	bl	80074b4 <memset>
 8007dce:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <std+0x38>)
 8007dd0:	6224      	str	r4, [r4, #32]
 8007dd2:	6263      	str	r3, [r4, #36]	; 0x24
 8007dd4:	4b04      	ldr	r3, [pc, #16]	; (8007de8 <std+0x3c>)
 8007dd6:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dd8:	4b04      	ldr	r3, [pc, #16]	; (8007dec <std+0x40>)
 8007dda:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ddc:	4b04      	ldr	r3, [pc, #16]	; (8007df0 <std+0x44>)
 8007dde:	6323      	str	r3, [r4, #48]	; 0x30
 8007de0:	bd10      	pop	{r4, pc}
 8007de2:	bf00      	nop
 8007de4:	080082e5 	.word	0x080082e5
 8007de8:	08008307 	.word	0x08008307
 8007dec:	0800833f 	.word	0x0800833f
 8007df0:	08008363 	.word	0x08008363

08007df4 <_cleanup_r>:
 8007df4:	4901      	ldr	r1, [pc, #4]	; (8007dfc <_cleanup_r+0x8>)
 8007df6:	f000 b8af 	b.w	8007f58 <_fwalk_reent>
 8007dfa:	bf00      	nop
 8007dfc:	08007d35 	.word	0x08007d35

08007e00 <__sfmoreglue>:
 8007e00:	2268      	movs	r2, #104	; 0x68
 8007e02:	b570      	push	{r4, r5, r6, lr}
 8007e04:	1e4d      	subs	r5, r1, #1
 8007e06:	4355      	muls	r5, r2
 8007e08:	460e      	mov	r6, r1
 8007e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007e0e:	f000 f9a1 	bl	8008154 <_malloc_r>
 8007e12:	4604      	mov	r4, r0
 8007e14:	b140      	cbz	r0, 8007e28 <__sfmoreglue+0x28>
 8007e16:	2100      	movs	r1, #0
 8007e18:	e9c0 1600 	strd	r1, r6, [r0]
 8007e1c:	300c      	adds	r0, #12
 8007e1e:	60a0      	str	r0, [r4, #8]
 8007e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007e24:	f7ff fb46 	bl	80074b4 <memset>
 8007e28:	4620      	mov	r0, r4
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}

08007e2c <__sfp_lock_acquire>:
 8007e2c:	4801      	ldr	r0, [pc, #4]	; (8007e34 <__sfp_lock_acquire+0x8>)
 8007e2e:	f000 b8b3 	b.w	8007f98 <__retarget_lock_acquire_recursive>
 8007e32:	bf00      	nop
 8007e34:	20000bdd 	.word	0x20000bdd

08007e38 <__sfp_lock_release>:
 8007e38:	4801      	ldr	r0, [pc, #4]	; (8007e40 <__sfp_lock_release+0x8>)
 8007e3a:	f000 b8ae 	b.w	8007f9a <__retarget_lock_release_recursive>
 8007e3e:	bf00      	nop
 8007e40:	20000bdd 	.word	0x20000bdd

08007e44 <__sinit_lock_acquire>:
 8007e44:	4801      	ldr	r0, [pc, #4]	; (8007e4c <__sinit_lock_acquire+0x8>)
 8007e46:	f000 b8a7 	b.w	8007f98 <__retarget_lock_acquire_recursive>
 8007e4a:	bf00      	nop
 8007e4c:	20000bde 	.word	0x20000bde

08007e50 <__sinit_lock_release>:
 8007e50:	4801      	ldr	r0, [pc, #4]	; (8007e58 <__sinit_lock_release+0x8>)
 8007e52:	f000 b8a2 	b.w	8007f9a <__retarget_lock_release_recursive>
 8007e56:	bf00      	nop
 8007e58:	20000bde 	.word	0x20000bde

08007e5c <__sinit>:
 8007e5c:	b510      	push	{r4, lr}
 8007e5e:	4604      	mov	r4, r0
 8007e60:	f7ff fff0 	bl	8007e44 <__sinit_lock_acquire>
 8007e64:	69a3      	ldr	r3, [r4, #24]
 8007e66:	b11b      	cbz	r3, 8007e70 <__sinit+0x14>
 8007e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e6c:	f7ff bff0 	b.w	8007e50 <__sinit_lock_release>
 8007e70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007e74:	6523      	str	r3, [r4, #80]	; 0x50
 8007e76:	4b13      	ldr	r3, [pc, #76]	; (8007ec4 <__sinit+0x68>)
 8007e78:	4a13      	ldr	r2, [pc, #76]	; (8007ec8 <__sinit+0x6c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e7e:	42a3      	cmp	r3, r4
 8007e80:	bf08      	it	eq
 8007e82:	2301      	moveq	r3, #1
 8007e84:	4620      	mov	r0, r4
 8007e86:	bf08      	it	eq
 8007e88:	61a3      	streq	r3, [r4, #24]
 8007e8a:	f000 f81f 	bl	8007ecc <__sfp>
 8007e8e:	6060      	str	r0, [r4, #4]
 8007e90:	4620      	mov	r0, r4
 8007e92:	f000 f81b 	bl	8007ecc <__sfp>
 8007e96:	60a0      	str	r0, [r4, #8]
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f000 f817 	bl	8007ecc <__sfp>
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	2104      	movs	r1, #4
 8007ea2:	60e0      	str	r0, [r4, #12]
 8007ea4:	6860      	ldr	r0, [r4, #4]
 8007ea6:	f7ff ff81 	bl	8007dac <std>
 8007eaa:	2201      	movs	r2, #1
 8007eac:	2109      	movs	r1, #9
 8007eae:	68a0      	ldr	r0, [r4, #8]
 8007eb0:	f7ff ff7c 	bl	8007dac <std>
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	2112      	movs	r1, #18
 8007eb8:	68e0      	ldr	r0, [r4, #12]
 8007eba:	f7ff ff77 	bl	8007dac <std>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	61a3      	str	r3, [r4, #24]
 8007ec2:	e7d1      	b.n	8007e68 <__sinit+0xc>
 8007ec4:	08008588 	.word	0x08008588
 8007ec8:	08007df5 	.word	0x08007df5

08007ecc <__sfp>:
 8007ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ece:	4607      	mov	r7, r0
 8007ed0:	f7ff ffac 	bl	8007e2c <__sfp_lock_acquire>
 8007ed4:	4b1e      	ldr	r3, [pc, #120]	; (8007f50 <__sfp+0x84>)
 8007ed6:	681e      	ldr	r6, [r3, #0]
 8007ed8:	69b3      	ldr	r3, [r6, #24]
 8007eda:	b913      	cbnz	r3, 8007ee2 <__sfp+0x16>
 8007edc:	4630      	mov	r0, r6
 8007ede:	f7ff ffbd 	bl	8007e5c <__sinit>
 8007ee2:	3648      	adds	r6, #72	; 0x48
 8007ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	d503      	bpl.n	8007ef4 <__sfp+0x28>
 8007eec:	6833      	ldr	r3, [r6, #0]
 8007eee:	b30b      	cbz	r3, 8007f34 <__sfp+0x68>
 8007ef0:	6836      	ldr	r6, [r6, #0]
 8007ef2:	e7f7      	b.n	8007ee4 <__sfp+0x18>
 8007ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007ef8:	b9d5      	cbnz	r5, 8007f30 <__sfp+0x64>
 8007efa:	4b16      	ldr	r3, [pc, #88]	; (8007f54 <__sfp+0x88>)
 8007efc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f00:	60e3      	str	r3, [r4, #12]
 8007f02:	6665      	str	r5, [r4, #100]	; 0x64
 8007f04:	f000 f847 	bl	8007f96 <__retarget_lock_init_recursive>
 8007f08:	f7ff ff96 	bl	8007e38 <__sfp_lock_release>
 8007f0c:	2208      	movs	r2, #8
 8007f0e:	4629      	mov	r1, r5
 8007f10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007f14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007f18:	6025      	str	r5, [r4, #0]
 8007f1a:	61a5      	str	r5, [r4, #24]
 8007f1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007f20:	f7ff fac8 	bl	80074b4 <memset>
 8007f24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007f28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f30:	3468      	adds	r4, #104	; 0x68
 8007f32:	e7d9      	b.n	8007ee8 <__sfp+0x1c>
 8007f34:	2104      	movs	r1, #4
 8007f36:	4638      	mov	r0, r7
 8007f38:	f7ff ff62 	bl	8007e00 <__sfmoreglue>
 8007f3c:	4604      	mov	r4, r0
 8007f3e:	6030      	str	r0, [r6, #0]
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d1d5      	bne.n	8007ef0 <__sfp+0x24>
 8007f44:	f7ff ff78 	bl	8007e38 <__sfp_lock_release>
 8007f48:	230c      	movs	r3, #12
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	e7ee      	b.n	8007f2c <__sfp+0x60>
 8007f4e:	bf00      	nop
 8007f50:	08008588 	.word	0x08008588
 8007f54:	ffff0001 	.word	0xffff0001

08007f58 <_fwalk_reent>:
 8007f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f5c:	4606      	mov	r6, r0
 8007f5e:	4688      	mov	r8, r1
 8007f60:	2700      	movs	r7, #0
 8007f62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007f66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f6a:	f1b9 0901 	subs.w	r9, r9, #1
 8007f6e:	d505      	bpl.n	8007f7c <_fwalk_reent+0x24>
 8007f70:	6824      	ldr	r4, [r4, #0]
 8007f72:	2c00      	cmp	r4, #0
 8007f74:	d1f7      	bne.n	8007f66 <_fwalk_reent+0xe>
 8007f76:	4638      	mov	r0, r7
 8007f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f7c:	89ab      	ldrh	r3, [r5, #12]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d907      	bls.n	8007f92 <_fwalk_reent+0x3a>
 8007f82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f86:	3301      	adds	r3, #1
 8007f88:	d003      	beq.n	8007f92 <_fwalk_reent+0x3a>
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	47c0      	blx	r8
 8007f90:	4307      	orrs	r7, r0
 8007f92:	3568      	adds	r5, #104	; 0x68
 8007f94:	e7e9      	b.n	8007f6a <_fwalk_reent+0x12>

08007f96 <__retarget_lock_init_recursive>:
 8007f96:	4770      	bx	lr

08007f98 <__retarget_lock_acquire_recursive>:
 8007f98:	4770      	bx	lr

08007f9a <__retarget_lock_release_recursive>:
 8007f9a:	4770      	bx	lr

08007f9c <__swhatbuf_r>:
 8007f9c:	b570      	push	{r4, r5, r6, lr}
 8007f9e:	460e      	mov	r6, r1
 8007fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa4:	4614      	mov	r4, r2
 8007fa6:	2900      	cmp	r1, #0
 8007fa8:	461d      	mov	r5, r3
 8007faa:	b096      	sub	sp, #88	; 0x58
 8007fac:	da08      	bge.n	8007fc0 <__swhatbuf_r+0x24>
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007fb4:	602a      	str	r2, [r5, #0]
 8007fb6:	061a      	lsls	r2, r3, #24
 8007fb8:	d410      	bmi.n	8007fdc <__swhatbuf_r+0x40>
 8007fba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fbe:	e00e      	b.n	8007fde <__swhatbuf_r+0x42>
 8007fc0:	466a      	mov	r2, sp
 8007fc2:	f000 f9f5 	bl	80083b0 <_fstat_r>
 8007fc6:	2800      	cmp	r0, #0
 8007fc8:	dbf1      	blt.n	8007fae <__swhatbuf_r+0x12>
 8007fca:	9a01      	ldr	r2, [sp, #4]
 8007fcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007fd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007fd4:	425a      	negs	r2, r3
 8007fd6:	415a      	adcs	r2, r3
 8007fd8:	602a      	str	r2, [r5, #0]
 8007fda:	e7ee      	b.n	8007fba <__swhatbuf_r+0x1e>
 8007fdc:	2340      	movs	r3, #64	; 0x40
 8007fde:	2000      	movs	r0, #0
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	b016      	add	sp, #88	; 0x58
 8007fe4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007fe8 <__smakebuf_r>:
 8007fe8:	898b      	ldrh	r3, [r1, #12]
 8007fea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fec:	079d      	lsls	r5, r3, #30
 8007fee:	4606      	mov	r6, r0
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	d507      	bpl.n	8008004 <__smakebuf_r+0x1c>
 8007ff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	6123      	str	r3, [r4, #16]
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	6163      	str	r3, [r4, #20]
 8008000:	b002      	add	sp, #8
 8008002:	bd70      	pop	{r4, r5, r6, pc}
 8008004:	466a      	mov	r2, sp
 8008006:	ab01      	add	r3, sp, #4
 8008008:	f7ff ffc8 	bl	8007f9c <__swhatbuf_r>
 800800c:	9900      	ldr	r1, [sp, #0]
 800800e:	4605      	mov	r5, r0
 8008010:	4630      	mov	r0, r6
 8008012:	f000 f89f 	bl	8008154 <_malloc_r>
 8008016:	b948      	cbnz	r0, 800802c <__smakebuf_r+0x44>
 8008018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800801c:	059a      	lsls	r2, r3, #22
 800801e:	d4ef      	bmi.n	8008000 <__smakebuf_r+0x18>
 8008020:	f023 0303 	bic.w	r3, r3, #3
 8008024:	f043 0302 	orr.w	r3, r3, #2
 8008028:	81a3      	strh	r3, [r4, #12]
 800802a:	e7e3      	b.n	8007ff4 <__smakebuf_r+0xc>
 800802c:	4b0d      	ldr	r3, [pc, #52]	; (8008064 <__smakebuf_r+0x7c>)
 800802e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008030:	89a3      	ldrh	r3, [r4, #12]
 8008032:	6020      	str	r0, [r4, #0]
 8008034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008038:	81a3      	strh	r3, [r4, #12]
 800803a:	9b00      	ldr	r3, [sp, #0]
 800803c:	6120      	str	r0, [r4, #16]
 800803e:	6163      	str	r3, [r4, #20]
 8008040:	9b01      	ldr	r3, [sp, #4]
 8008042:	b15b      	cbz	r3, 800805c <__smakebuf_r+0x74>
 8008044:	4630      	mov	r0, r6
 8008046:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800804a:	f000 f9c3 	bl	80083d4 <_isatty_r>
 800804e:	b128      	cbz	r0, 800805c <__smakebuf_r+0x74>
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	f023 0303 	bic.w	r3, r3, #3
 8008056:	f043 0301 	orr.w	r3, r3, #1
 800805a:	81a3      	strh	r3, [r4, #12]
 800805c:	89a0      	ldrh	r0, [r4, #12]
 800805e:	4305      	orrs	r5, r0
 8008060:	81a5      	strh	r5, [r4, #12]
 8008062:	e7cd      	b.n	8008000 <__smakebuf_r+0x18>
 8008064:	08007df5 	.word	0x08007df5

08008068 <memchr>:
 8008068:	4603      	mov	r3, r0
 800806a:	b510      	push	{r4, lr}
 800806c:	b2c9      	uxtb	r1, r1
 800806e:	4402      	add	r2, r0
 8008070:	4293      	cmp	r3, r2
 8008072:	4618      	mov	r0, r3
 8008074:	d101      	bne.n	800807a <memchr+0x12>
 8008076:	2000      	movs	r0, #0
 8008078:	e003      	b.n	8008082 <memchr+0x1a>
 800807a:	7804      	ldrb	r4, [r0, #0]
 800807c:	3301      	adds	r3, #1
 800807e:	428c      	cmp	r4, r1
 8008080:	d1f6      	bne.n	8008070 <memchr+0x8>
 8008082:	bd10      	pop	{r4, pc}

08008084 <_free_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4605      	mov	r5, r0
 8008088:	2900      	cmp	r1, #0
 800808a:	d040      	beq.n	800810e <_free_r+0x8a>
 800808c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008090:	1f0c      	subs	r4, r1, #4
 8008092:	2b00      	cmp	r3, #0
 8008094:	bfb8      	it	lt
 8008096:	18e4      	addlt	r4, r4, r3
 8008098:	f000 f9be 	bl	8008418 <__malloc_lock>
 800809c:	4a1c      	ldr	r2, [pc, #112]	; (8008110 <_free_r+0x8c>)
 800809e:	6813      	ldr	r3, [r2, #0]
 80080a0:	b933      	cbnz	r3, 80080b0 <_free_r+0x2c>
 80080a2:	6063      	str	r3, [r4, #4]
 80080a4:	6014      	str	r4, [r2, #0]
 80080a6:	4628      	mov	r0, r5
 80080a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080ac:	f000 b9ba 	b.w	8008424 <__malloc_unlock>
 80080b0:	42a3      	cmp	r3, r4
 80080b2:	d908      	bls.n	80080c6 <_free_r+0x42>
 80080b4:	6820      	ldr	r0, [r4, #0]
 80080b6:	1821      	adds	r1, r4, r0
 80080b8:	428b      	cmp	r3, r1
 80080ba:	bf01      	itttt	eq
 80080bc:	6819      	ldreq	r1, [r3, #0]
 80080be:	685b      	ldreq	r3, [r3, #4]
 80080c0:	1809      	addeq	r1, r1, r0
 80080c2:	6021      	streq	r1, [r4, #0]
 80080c4:	e7ed      	b.n	80080a2 <_free_r+0x1e>
 80080c6:	461a      	mov	r2, r3
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	b10b      	cbz	r3, 80080d0 <_free_r+0x4c>
 80080cc:	42a3      	cmp	r3, r4
 80080ce:	d9fa      	bls.n	80080c6 <_free_r+0x42>
 80080d0:	6811      	ldr	r1, [r2, #0]
 80080d2:	1850      	adds	r0, r2, r1
 80080d4:	42a0      	cmp	r0, r4
 80080d6:	d10b      	bne.n	80080f0 <_free_r+0x6c>
 80080d8:	6820      	ldr	r0, [r4, #0]
 80080da:	4401      	add	r1, r0
 80080dc:	1850      	adds	r0, r2, r1
 80080de:	4283      	cmp	r3, r0
 80080e0:	6011      	str	r1, [r2, #0]
 80080e2:	d1e0      	bne.n	80080a6 <_free_r+0x22>
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	4401      	add	r1, r0
 80080ea:	6011      	str	r1, [r2, #0]
 80080ec:	6053      	str	r3, [r2, #4]
 80080ee:	e7da      	b.n	80080a6 <_free_r+0x22>
 80080f0:	d902      	bls.n	80080f8 <_free_r+0x74>
 80080f2:	230c      	movs	r3, #12
 80080f4:	602b      	str	r3, [r5, #0]
 80080f6:	e7d6      	b.n	80080a6 <_free_r+0x22>
 80080f8:	6820      	ldr	r0, [r4, #0]
 80080fa:	1821      	adds	r1, r4, r0
 80080fc:	428b      	cmp	r3, r1
 80080fe:	bf01      	itttt	eq
 8008100:	6819      	ldreq	r1, [r3, #0]
 8008102:	685b      	ldreq	r3, [r3, #4]
 8008104:	1809      	addeq	r1, r1, r0
 8008106:	6021      	streq	r1, [r4, #0]
 8008108:	6063      	str	r3, [r4, #4]
 800810a:	6054      	str	r4, [r2, #4]
 800810c:	e7cb      	b.n	80080a6 <_free_r+0x22>
 800810e:	bd38      	pop	{r3, r4, r5, pc}
 8008110:	20000be0 	.word	0x20000be0

08008114 <sbrk_aligned>:
 8008114:	b570      	push	{r4, r5, r6, lr}
 8008116:	4e0e      	ldr	r6, [pc, #56]	; (8008150 <sbrk_aligned+0x3c>)
 8008118:	460c      	mov	r4, r1
 800811a:	6831      	ldr	r1, [r6, #0]
 800811c:	4605      	mov	r5, r0
 800811e:	b911      	cbnz	r1, 8008126 <sbrk_aligned+0x12>
 8008120:	f000 f88c 	bl	800823c <_sbrk_r>
 8008124:	6030      	str	r0, [r6, #0]
 8008126:	4621      	mov	r1, r4
 8008128:	4628      	mov	r0, r5
 800812a:	f000 f887 	bl	800823c <_sbrk_r>
 800812e:	1c43      	adds	r3, r0, #1
 8008130:	d00a      	beq.n	8008148 <sbrk_aligned+0x34>
 8008132:	1cc4      	adds	r4, r0, #3
 8008134:	f024 0403 	bic.w	r4, r4, #3
 8008138:	42a0      	cmp	r0, r4
 800813a:	d007      	beq.n	800814c <sbrk_aligned+0x38>
 800813c:	1a21      	subs	r1, r4, r0
 800813e:	4628      	mov	r0, r5
 8008140:	f000 f87c 	bl	800823c <_sbrk_r>
 8008144:	3001      	adds	r0, #1
 8008146:	d101      	bne.n	800814c <sbrk_aligned+0x38>
 8008148:	f04f 34ff 	mov.w	r4, #4294967295
 800814c:	4620      	mov	r0, r4
 800814e:	bd70      	pop	{r4, r5, r6, pc}
 8008150:	20000be4 	.word	0x20000be4

08008154 <_malloc_r>:
 8008154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008158:	1ccd      	adds	r5, r1, #3
 800815a:	f025 0503 	bic.w	r5, r5, #3
 800815e:	3508      	adds	r5, #8
 8008160:	2d0c      	cmp	r5, #12
 8008162:	bf38      	it	cc
 8008164:	250c      	movcc	r5, #12
 8008166:	2d00      	cmp	r5, #0
 8008168:	4607      	mov	r7, r0
 800816a:	db01      	blt.n	8008170 <_malloc_r+0x1c>
 800816c:	42a9      	cmp	r1, r5
 800816e:	d905      	bls.n	800817c <_malloc_r+0x28>
 8008170:	230c      	movs	r3, #12
 8008172:	2600      	movs	r6, #0
 8008174:	603b      	str	r3, [r7, #0]
 8008176:	4630      	mov	r0, r6
 8008178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800817c:	4e2e      	ldr	r6, [pc, #184]	; (8008238 <_malloc_r+0xe4>)
 800817e:	f000 f94b 	bl	8008418 <__malloc_lock>
 8008182:	6833      	ldr	r3, [r6, #0]
 8008184:	461c      	mov	r4, r3
 8008186:	bb34      	cbnz	r4, 80081d6 <_malloc_r+0x82>
 8008188:	4629      	mov	r1, r5
 800818a:	4638      	mov	r0, r7
 800818c:	f7ff ffc2 	bl	8008114 <sbrk_aligned>
 8008190:	1c43      	adds	r3, r0, #1
 8008192:	4604      	mov	r4, r0
 8008194:	d14d      	bne.n	8008232 <_malloc_r+0xde>
 8008196:	6834      	ldr	r4, [r6, #0]
 8008198:	4626      	mov	r6, r4
 800819a:	2e00      	cmp	r6, #0
 800819c:	d140      	bne.n	8008220 <_malloc_r+0xcc>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	4631      	mov	r1, r6
 80081a2:	4638      	mov	r0, r7
 80081a4:	eb04 0803 	add.w	r8, r4, r3
 80081a8:	f000 f848 	bl	800823c <_sbrk_r>
 80081ac:	4580      	cmp	r8, r0
 80081ae:	d13a      	bne.n	8008226 <_malloc_r+0xd2>
 80081b0:	6821      	ldr	r1, [r4, #0]
 80081b2:	3503      	adds	r5, #3
 80081b4:	1a6d      	subs	r5, r5, r1
 80081b6:	f025 0503 	bic.w	r5, r5, #3
 80081ba:	3508      	adds	r5, #8
 80081bc:	2d0c      	cmp	r5, #12
 80081be:	bf38      	it	cc
 80081c0:	250c      	movcc	r5, #12
 80081c2:	4638      	mov	r0, r7
 80081c4:	4629      	mov	r1, r5
 80081c6:	f7ff ffa5 	bl	8008114 <sbrk_aligned>
 80081ca:	3001      	adds	r0, #1
 80081cc:	d02b      	beq.n	8008226 <_malloc_r+0xd2>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	442b      	add	r3, r5
 80081d2:	6023      	str	r3, [r4, #0]
 80081d4:	e00e      	b.n	80081f4 <_malloc_r+0xa0>
 80081d6:	6822      	ldr	r2, [r4, #0]
 80081d8:	1b52      	subs	r2, r2, r5
 80081da:	d41e      	bmi.n	800821a <_malloc_r+0xc6>
 80081dc:	2a0b      	cmp	r2, #11
 80081de:	d916      	bls.n	800820e <_malloc_r+0xba>
 80081e0:	1961      	adds	r1, r4, r5
 80081e2:	42a3      	cmp	r3, r4
 80081e4:	6025      	str	r5, [r4, #0]
 80081e6:	bf18      	it	ne
 80081e8:	6059      	strne	r1, [r3, #4]
 80081ea:	6863      	ldr	r3, [r4, #4]
 80081ec:	bf08      	it	eq
 80081ee:	6031      	streq	r1, [r6, #0]
 80081f0:	5162      	str	r2, [r4, r5]
 80081f2:	604b      	str	r3, [r1, #4]
 80081f4:	4638      	mov	r0, r7
 80081f6:	f104 060b 	add.w	r6, r4, #11
 80081fa:	f000 f913 	bl	8008424 <__malloc_unlock>
 80081fe:	f026 0607 	bic.w	r6, r6, #7
 8008202:	1d23      	adds	r3, r4, #4
 8008204:	1af2      	subs	r2, r6, r3
 8008206:	d0b6      	beq.n	8008176 <_malloc_r+0x22>
 8008208:	1b9b      	subs	r3, r3, r6
 800820a:	50a3      	str	r3, [r4, r2]
 800820c:	e7b3      	b.n	8008176 <_malloc_r+0x22>
 800820e:	6862      	ldr	r2, [r4, #4]
 8008210:	42a3      	cmp	r3, r4
 8008212:	bf0c      	ite	eq
 8008214:	6032      	streq	r2, [r6, #0]
 8008216:	605a      	strne	r2, [r3, #4]
 8008218:	e7ec      	b.n	80081f4 <_malloc_r+0xa0>
 800821a:	4623      	mov	r3, r4
 800821c:	6864      	ldr	r4, [r4, #4]
 800821e:	e7b2      	b.n	8008186 <_malloc_r+0x32>
 8008220:	4634      	mov	r4, r6
 8008222:	6876      	ldr	r6, [r6, #4]
 8008224:	e7b9      	b.n	800819a <_malloc_r+0x46>
 8008226:	230c      	movs	r3, #12
 8008228:	4638      	mov	r0, r7
 800822a:	603b      	str	r3, [r7, #0]
 800822c:	f000 f8fa 	bl	8008424 <__malloc_unlock>
 8008230:	e7a1      	b.n	8008176 <_malloc_r+0x22>
 8008232:	6025      	str	r5, [r4, #0]
 8008234:	e7de      	b.n	80081f4 <_malloc_r+0xa0>
 8008236:	bf00      	nop
 8008238:	20000be0 	.word	0x20000be0

0800823c <_sbrk_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	2300      	movs	r3, #0
 8008240:	4d05      	ldr	r5, [pc, #20]	; (8008258 <_sbrk_r+0x1c>)
 8008242:	4604      	mov	r4, r0
 8008244:	4608      	mov	r0, r1
 8008246:	602b      	str	r3, [r5, #0]
 8008248:	f7fb fb6c 	bl	8003924 <_sbrk>
 800824c:	1c43      	adds	r3, r0, #1
 800824e:	d102      	bne.n	8008256 <_sbrk_r+0x1a>
 8008250:	682b      	ldr	r3, [r5, #0]
 8008252:	b103      	cbz	r3, 8008256 <_sbrk_r+0x1a>
 8008254:	6023      	str	r3, [r4, #0]
 8008256:	bd38      	pop	{r3, r4, r5, pc}
 8008258:	20000be8 	.word	0x20000be8

0800825c <_raise_r>:
 800825c:	291f      	cmp	r1, #31
 800825e:	b538      	push	{r3, r4, r5, lr}
 8008260:	4604      	mov	r4, r0
 8008262:	460d      	mov	r5, r1
 8008264:	d904      	bls.n	8008270 <_raise_r+0x14>
 8008266:	2316      	movs	r3, #22
 8008268:	6003      	str	r3, [r0, #0]
 800826a:	f04f 30ff 	mov.w	r0, #4294967295
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008272:	b112      	cbz	r2, 800827a <_raise_r+0x1e>
 8008274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008278:	b94b      	cbnz	r3, 800828e <_raise_r+0x32>
 800827a:	4620      	mov	r0, r4
 800827c:	f000 f830 	bl	80082e0 <_getpid_r>
 8008280:	462a      	mov	r2, r5
 8008282:	4601      	mov	r1, r0
 8008284:	4620      	mov	r0, r4
 8008286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800828a:	f000 b817 	b.w	80082bc <_kill_r>
 800828e:	2b01      	cmp	r3, #1
 8008290:	d00a      	beq.n	80082a8 <_raise_r+0x4c>
 8008292:	1c59      	adds	r1, r3, #1
 8008294:	d103      	bne.n	800829e <_raise_r+0x42>
 8008296:	2316      	movs	r3, #22
 8008298:	6003      	str	r3, [r0, #0]
 800829a:	2001      	movs	r0, #1
 800829c:	e7e7      	b.n	800826e <_raise_r+0x12>
 800829e:	2400      	movs	r4, #0
 80082a0:	4628      	mov	r0, r5
 80082a2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80082a6:	4798      	blx	r3
 80082a8:	2000      	movs	r0, #0
 80082aa:	e7e0      	b.n	800826e <_raise_r+0x12>

080082ac <raise>:
 80082ac:	4b02      	ldr	r3, [pc, #8]	; (80082b8 <raise+0xc>)
 80082ae:	4601      	mov	r1, r0
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	f7ff bfd3 	b.w	800825c <_raise_r>
 80082b6:	bf00      	nop
 80082b8:	20000010 	.word	0x20000010

080082bc <_kill_r>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	2300      	movs	r3, #0
 80082c0:	4d06      	ldr	r5, [pc, #24]	; (80082dc <_kill_r+0x20>)
 80082c2:	4604      	mov	r4, r0
 80082c4:	4608      	mov	r0, r1
 80082c6:	4611      	mov	r1, r2
 80082c8:	602b      	str	r3, [r5, #0]
 80082ca:	f7fb faa8 	bl	800381e <_kill>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	d102      	bne.n	80082d8 <_kill_r+0x1c>
 80082d2:	682b      	ldr	r3, [r5, #0]
 80082d4:	b103      	cbz	r3, 80082d8 <_kill_r+0x1c>
 80082d6:	6023      	str	r3, [r4, #0]
 80082d8:	bd38      	pop	{r3, r4, r5, pc}
 80082da:	bf00      	nop
 80082dc:	20000be8 	.word	0x20000be8

080082e0 <_getpid_r>:
 80082e0:	f7fb ba96 	b.w	8003810 <_getpid>

080082e4 <__sread>:
 80082e4:	b510      	push	{r4, lr}
 80082e6:	460c      	mov	r4, r1
 80082e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ec:	f000 f8a0 	bl	8008430 <_read_r>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	bfab      	itete	ge
 80082f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082f6:	89a3      	ldrhlt	r3, [r4, #12]
 80082f8:	181b      	addge	r3, r3, r0
 80082fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082fe:	bfac      	ite	ge
 8008300:	6563      	strge	r3, [r4, #84]	; 0x54
 8008302:	81a3      	strhlt	r3, [r4, #12]
 8008304:	bd10      	pop	{r4, pc}

08008306 <__swrite>:
 8008306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800830a:	461f      	mov	r7, r3
 800830c:	898b      	ldrh	r3, [r1, #12]
 800830e:	4605      	mov	r5, r0
 8008310:	05db      	lsls	r3, r3, #23
 8008312:	460c      	mov	r4, r1
 8008314:	4616      	mov	r6, r2
 8008316:	d505      	bpl.n	8008324 <__swrite+0x1e>
 8008318:	2302      	movs	r3, #2
 800831a:	2200      	movs	r2, #0
 800831c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008320:	f000 f868 	bl	80083f4 <_lseek_r>
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	4632      	mov	r2, r6
 8008328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800832c:	81a3      	strh	r3, [r4, #12]
 800832e:	4628      	mov	r0, r5
 8008330:	463b      	mov	r3, r7
 8008332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800833a:	f000 b817 	b.w	800836c <_write_r>

0800833e <__sseek>:
 800833e:	b510      	push	{r4, lr}
 8008340:	460c      	mov	r4, r1
 8008342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008346:	f000 f855 	bl	80083f4 <_lseek_r>
 800834a:	1c43      	adds	r3, r0, #1
 800834c:	89a3      	ldrh	r3, [r4, #12]
 800834e:	bf15      	itete	ne
 8008350:	6560      	strne	r0, [r4, #84]	; 0x54
 8008352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800835a:	81a3      	strheq	r3, [r4, #12]
 800835c:	bf18      	it	ne
 800835e:	81a3      	strhne	r3, [r4, #12]
 8008360:	bd10      	pop	{r4, pc}

08008362 <__sclose>:
 8008362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008366:	f000 b813 	b.w	8008390 <_close_r>
	...

0800836c <_write_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4604      	mov	r4, r0
 8008370:	4608      	mov	r0, r1
 8008372:	4611      	mov	r1, r2
 8008374:	2200      	movs	r2, #0
 8008376:	4d05      	ldr	r5, [pc, #20]	; (800838c <_write_r+0x20>)
 8008378:	602a      	str	r2, [r5, #0]
 800837a:	461a      	mov	r2, r3
 800837c:	f7fb fa86 	bl	800388c <_write>
 8008380:	1c43      	adds	r3, r0, #1
 8008382:	d102      	bne.n	800838a <_write_r+0x1e>
 8008384:	682b      	ldr	r3, [r5, #0]
 8008386:	b103      	cbz	r3, 800838a <_write_r+0x1e>
 8008388:	6023      	str	r3, [r4, #0]
 800838a:	bd38      	pop	{r3, r4, r5, pc}
 800838c:	20000be8 	.word	0x20000be8

08008390 <_close_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	2300      	movs	r3, #0
 8008394:	4d05      	ldr	r5, [pc, #20]	; (80083ac <_close_r+0x1c>)
 8008396:	4604      	mov	r4, r0
 8008398:	4608      	mov	r0, r1
 800839a:	602b      	str	r3, [r5, #0]
 800839c:	f7fb fa92 	bl	80038c4 <_close>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d102      	bne.n	80083aa <_close_r+0x1a>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	b103      	cbz	r3, 80083aa <_close_r+0x1a>
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	20000be8 	.word	0x20000be8

080083b0 <_fstat_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	2300      	movs	r3, #0
 80083b4:	4d06      	ldr	r5, [pc, #24]	; (80083d0 <_fstat_r+0x20>)
 80083b6:	4604      	mov	r4, r0
 80083b8:	4608      	mov	r0, r1
 80083ba:	4611      	mov	r1, r2
 80083bc:	602b      	str	r3, [r5, #0]
 80083be:	f7fb fa8c 	bl	80038da <_fstat>
 80083c2:	1c43      	adds	r3, r0, #1
 80083c4:	d102      	bne.n	80083cc <_fstat_r+0x1c>
 80083c6:	682b      	ldr	r3, [r5, #0]
 80083c8:	b103      	cbz	r3, 80083cc <_fstat_r+0x1c>
 80083ca:	6023      	str	r3, [r4, #0]
 80083cc:	bd38      	pop	{r3, r4, r5, pc}
 80083ce:	bf00      	nop
 80083d0:	20000be8 	.word	0x20000be8

080083d4 <_isatty_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	2300      	movs	r3, #0
 80083d8:	4d05      	ldr	r5, [pc, #20]	; (80083f0 <_isatty_r+0x1c>)
 80083da:	4604      	mov	r4, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	602b      	str	r3, [r5, #0]
 80083e0:	f7fb fa8a 	bl	80038f8 <_isatty>
 80083e4:	1c43      	adds	r3, r0, #1
 80083e6:	d102      	bne.n	80083ee <_isatty_r+0x1a>
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	b103      	cbz	r3, 80083ee <_isatty_r+0x1a>
 80083ec:	6023      	str	r3, [r4, #0]
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	20000be8 	.word	0x20000be8

080083f4 <_lseek_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4604      	mov	r4, r0
 80083f8:	4608      	mov	r0, r1
 80083fa:	4611      	mov	r1, r2
 80083fc:	2200      	movs	r2, #0
 80083fe:	4d05      	ldr	r5, [pc, #20]	; (8008414 <_lseek_r+0x20>)
 8008400:	602a      	str	r2, [r5, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	f7fb fa82 	bl	800390c <_lseek>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_lseek_r+0x1e>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b103      	cbz	r3, 8008412 <_lseek_r+0x1e>
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	20000be8 	.word	0x20000be8

08008418 <__malloc_lock>:
 8008418:	4801      	ldr	r0, [pc, #4]	; (8008420 <__malloc_lock+0x8>)
 800841a:	f7ff bdbd 	b.w	8007f98 <__retarget_lock_acquire_recursive>
 800841e:	bf00      	nop
 8008420:	20000bdc 	.word	0x20000bdc

08008424 <__malloc_unlock>:
 8008424:	4801      	ldr	r0, [pc, #4]	; (800842c <__malloc_unlock+0x8>)
 8008426:	f7ff bdb8 	b.w	8007f9a <__retarget_lock_release_recursive>
 800842a:	bf00      	nop
 800842c:	20000bdc 	.word	0x20000bdc

08008430 <_read_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	4604      	mov	r4, r0
 8008434:	4608      	mov	r0, r1
 8008436:	4611      	mov	r1, r2
 8008438:	2200      	movs	r2, #0
 800843a:	4d05      	ldr	r5, [pc, #20]	; (8008450 <_read_r+0x20>)
 800843c:	602a      	str	r2, [r5, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	f7fb fa07 	bl	8003852 <_read>
 8008444:	1c43      	adds	r3, r0, #1
 8008446:	d102      	bne.n	800844e <_read_r+0x1e>
 8008448:	682b      	ldr	r3, [r5, #0]
 800844a:	b103      	cbz	r3, 800844e <_read_r+0x1e>
 800844c:	6023      	str	r3, [r4, #0]
 800844e:	bd38      	pop	{r3, r4, r5, pc}
 8008450:	20000be8 	.word	0x20000be8

08008454 <roundf>:
 8008454:	b508      	push	{r3, lr}
 8008456:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800845a:	3b7f      	subs	r3, #127	; 0x7f
 800845c:	2b16      	cmp	r3, #22
 800845e:	4601      	mov	r1, r0
 8008460:	4602      	mov	r2, r0
 8008462:	dc14      	bgt.n	800848e <roundf+0x3a>
 8008464:	2b00      	cmp	r3, #0
 8008466:	da07      	bge.n	8008478 <roundf+0x24>
 8008468:	3301      	adds	r3, #1
 800846a:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800846e:	d101      	bne.n	8008474 <roundf+0x20>
 8008470:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8008474:	4608      	mov	r0, r1
 8008476:	bd08      	pop	{r3, pc}
 8008478:	4808      	ldr	r0, [pc, #32]	; (800849c <roundf+0x48>)
 800847a:	4118      	asrs	r0, r3
 800847c:	4201      	tst	r1, r0
 800847e:	d0f9      	beq.n	8008474 <roundf+0x20>
 8008480:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008484:	4119      	asrs	r1, r3
 8008486:	4411      	add	r1, r2
 8008488:	ea21 0100 	bic.w	r1, r1, r0
 800848c:	e7f2      	b.n	8008474 <roundf+0x20>
 800848e:	2b80      	cmp	r3, #128	; 0x80
 8008490:	d1f0      	bne.n	8008474 <roundf+0x20>
 8008492:	f7f8 faed 	bl	8000a70 <__addsf3>
 8008496:	4601      	mov	r1, r0
 8008498:	e7ec      	b.n	8008474 <roundf+0x20>
 800849a:	bf00      	nop
 800849c:	007fffff 	.word	0x007fffff

080084a0 <_init>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	bf00      	nop
 80084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a6:	bc08      	pop	{r3}
 80084a8:	469e      	mov	lr, r3
 80084aa:	4770      	bx	lr

080084ac <_fini>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	bf00      	nop
 80084b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b2:	bc08      	pop	{r3}
 80084b4:	469e      	mov	lr, r3
 80084b6:	4770      	bx	lr
