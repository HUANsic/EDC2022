
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007244  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800742c  0800742c  0001742c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800758c  0800758c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800758c  0800758c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800758c  0800758c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800758c  0800758c  0001758c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007590  08007590  00017590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b74  20000074  08007608  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000be8  08007608  00020be8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b51  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026dc  00000000  00000000  00030bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  000332d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  000343b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c9f  00000000  00000000  000353b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013e3d  00000000  00000000  0003904f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d503  00000000  00000000  0004ce8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea38f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052b0  00000000  00000000  000ea3e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000074 	.word	0x20000074
 8000204:	00000000 	.word	0x00000000
 8000208:	08007414 	.word	0x08007414

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000078 	.word	0x20000078
 8000224:	08007414 	.word	0x08007414

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_frsub>:
 8000a64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a68:	e002      	b.n	8000a70 <__addsf3>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_fsub>:
 8000a6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a70 <__addsf3>:
 8000a70:	0042      	lsls	r2, r0, #1
 8000a72:	bf1f      	itttt	ne
 8000a74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a78:	ea92 0f03 	teqne	r2, r3
 8000a7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a84:	d06a      	beq.n	8000b5c <__addsf3+0xec>
 8000a86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a8e:	bfc1      	itttt	gt
 8000a90:	18d2      	addgt	r2, r2, r3
 8000a92:	4041      	eorgt	r1, r0
 8000a94:	4048      	eorgt	r0, r1
 8000a96:	4041      	eorgt	r1, r0
 8000a98:	bfb8      	it	lt
 8000a9a:	425b      	neglt	r3, r3
 8000a9c:	2b19      	cmp	r3, #25
 8000a9e:	bf88      	it	hi
 8000aa0:	4770      	bxhi	lr
 8000aa2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000abe:	bf18      	it	ne
 8000ac0:	4249      	negne	r1, r1
 8000ac2:	ea92 0f03 	teq	r2, r3
 8000ac6:	d03f      	beq.n	8000b48 <__addsf3+0xd8>
 8000ac8:	f1a2 0201 	sub.w	r2, r2, #1
 8000acc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad0:	eb10 000c 	adds.w	r0, r0, ip
 8000ad4:	f1c3 0320 	rsb	r3, r3, #32
 8000ad8:	fa01 f103 	lsl.w	r1, r1, r3
 8000adc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae0:	d502      	bpl.n	8000ae8 <__addsf3+0x78>
 8000ae2:	4249      	negs	r1, r1
 8000ae4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000aec:	d313      	bcc.n	8000b16 <__addsf3+0xa6>
 8000aee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000af2:	d306      	bcc.n	8000b02 <__addsf3+0x92>
 8000af4:	0840      	lsrs	r0, r0, #1
 8000af6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afa:	f102 0201 	add.w	r2, r2, #1
 8000afe:	2afe      	cmp	r2, #254	; 0xfe
 8000b00:	d251      	bcs.n	8000ba6 <__addsf3+0x136>
 8000b02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b0a:	bf08      	it	eq
 8000b0c:	f020 0001 	biceq.w	r0, r0, #1
 8000b10:	ea40 0003 	orr.w	r0, r0, r3
 8000b14:	4770      	bx	lr
 8000b16:	0049      	lsls	r1, r1, #1
 8000b18:	eb40 0000 	adc.w	r0, r0, r0
 8000b1c:	3a01      	subs	r2, #1
 8000b1e:	bf28      	it	cs
 8000b20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b24:	d2ed      	bcs.n	8000b02 <__addsf3+0x92>
 8000b26:	fab0 fc80 	clz	ip, r0
 8000b2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b36:	bfaa      	itet	ge
 8000b38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b3c:	4252      	neglt	r2, r2
 8000b3e:	4318      	orrge	r0, r3
 8000b40:	bfbc      	itt	lt
 8000b42:	40d0      	lsrlt	r0, r2
 8000b44:	4318      	orrlt	r0, r3
 8000b46:	4770      	bx	lr
 8000b48:	f092 0f00 	teq	r2, #0
 8000b4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b50:	bf06      	itte	eq
 8000b52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b56:	3201      	addeq	r2, #1
 8000b58:	3b01      	subne	r3, #1
 8000b5a:	e7b5      	b.n	8000ac8 <__addsf3+0x58>
 8000b5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b64:	bf18      	it	ne
 8000b66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6a:	d021      	beq.n	8000bb0 <__addsf3+0x140>
 8000b6c:	ea92 0f03 	teq	r2, r3
 8000b70:	d004      	beq.n	8000b7c <__addsf3+0x10c>
 8000b72:	f092 0f00 	teq	r2, #0
 8000b76:	bf08      	it	eq
 8000b78:	4608      	moveq	r0, r1
 8000b7a:	4770      	bx	lr
 8000b7c:	ea90 0f01 	teq	r0, r1
 8000b80:	bf1c      	itt	ne
 8000b82:	2000      	movne	r0, #0
 8000b84:	4770      	bxne	lr
 8000b86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b8a:	d104      	bne.n	8000b96 <__addsf3+0x126>
 8000b8c:	0040      	lsls	r0, r0, #1
 8000b8e:	bf28      	it	cs
 8000b90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	4770      	bx	lr
 8000b96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b9a:	bf3c      	itt	cc
 8000b9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bxcc	lr
 8000ba2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	4770      	bx	lr
 8000bb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb4:	bf16      	itet	ne
 8000bb6:	4608      	movne	r0, r1
 8000bb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bbc:	4601      	movne	r1, r0
 8000bbe:	0242      	lsls	r2, r0, #9
 8000bc0:	bf06      	itte	eq
 8000bc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bc6:	ea90 0f01 	teqeq	r0, r1
 8000bca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_ui2f>:
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	e004      	b.n	8000be0 <__aeabi_i2f+0x8>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_i2f>:
 8000bd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	bf48      	it	mi
 8000bde:	4240      	negmi	r0, r0
 8000be0:	ea5f 0c00 	movs.w	ip, r0
 8000be4:	bf08      	it	eq
 8000be6:	4770      	bxeq	lr
 8000be8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bec:	4601      	mov	r1, r0
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	e01c      	b.n	8000c2e <__aeabi_l2f+0x2a>

08000bf4 <__aeabi_ul2f>:
 8000bf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e00a      	b.n	8000c18 <__aeabi_l2f+0x14>
 8000c02:	bf00      	nop

08000c04 <__aeabi_l2f>:
 8000c04:	ea50 0201 	orrs.w	r2, r0, r1
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c10:	d502      	bpl.n	8000c18 <__aeabi_l2f+0x14>
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	ea5f 0c01 	movs.w	ip, r1
 8000c1c:	bf02      	ittt	eq
 8000c1e:	4684      	moveq	ip, r0
 8000c20:	4601      	moveq	r1, r0
 8000c22:	2000      	moveq	r0, #0
 8000c24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c28:	bf08      	it	eq
 8000c2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c32:	fabc f28c 	clz	r2, ip
 8000c36:	3a08      	subs	r2, #8
 8000c38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c3c:	db10      	blt.n	8000c60 <__aeabi_l2f+0x5c>
 8000c3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c42:	4463      	add	r3, ip
 8000c44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c48:	f1c2 0220 	rsb	r2, r2, #32
 8000c4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c50:	fa20 f202 	lsr.w	r2, r0, r2
 8000c54:	eb43 0002 	adc.w	r0, r3, r2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f102 0220 	add.w	r2, r2, #32
 8000c64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c68:	f1c2 0220 	rsb	r2, r2, #32
 8000c6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c70:	fa21 f202 	lsr.w	r2, r1, r2
 8000c74:	eb43 0002 	adc.w	r0, r3, r2
 8000c78:	bf08      	it	eq
 8000c7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_fmul>:
 8000c80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c88:	bf1e      	ittt	ne
 8000c8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c8e:	ea92 0f0c 	teqne	r2, ip
 8000c92:	ea93 0f0c 	teqne	r3, ip
 8000c96:	d06f      	beq.n	8000d78 <__aeabi_fmul+0xf8>
 8000c98:	441a      	add	r2, r3
 8000c9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c9e:	0240      	lsls	r0, r0, #9
 8000ca0:	bf18      	it	ne
 8000ca2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ca6:	d01e      	beq.n	8000ce6 <__aeabi_fmul+0x66>
 8000ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc0:	bf3e      	ittt	cc
 8000cc2:	0049      	lslcc	r1, r1, #1
 8000cc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cc8:	005b      	lslcc	r3, r3, #1
 8000cca:	ea40 0001 	orr.w	r0, r0, r1
 8000cce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cd2:	2afd      	cmp	r2, #253	; 0xfd
 8000cd4:	d81d      	bhi.n	8000d12 <__aeabi_fmul+0x92>
 8000cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	4770      	bx	lr
 8000ce6:	f090 0f00 	teq	r0, #0
 8000cea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cee:	bf08      	it	eq
 8000cf0:	0249      	lsleq	r1, r1, #9
 8000cf2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cf6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cfa:	3a7f      	subs	r2, #127	; 0x7f
 8000cfc:	bfc2      	ittt	gt
 8000cfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d06:	4770      	bxgt	lr
 8000d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	dc5d      	bgt.n	8000dd0 <__aeabi_fmul+0x150>
 8000d14:	f112 0f19 	cmn.w	r2, #25
 8000d18:	bfdc      	itt	le
 8000d1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d1e:	4770      	bxle	lr
 8000d20:	f1c2 0200 	rsb	r2, r2, #0
 8000d24:	0041      	lsls	r1, r0, #1
 8000d26:	fa21 f102 	lsr.w	r1, r1, r2
 8000d2a:	f1c2 0220 	rsb	r2, r2, #32
 8000d2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d36:	f140 0000 	adc.w	r0, r0, #0
 8000d3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d3e:	bf08      	it	eq
 8000d40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d44:	4770      	bx	lr
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d4e:	bf02      	ittt	eq
 8000d50:	0040      	lsleq	r0, r0, #1
 8000d52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d56:	3a01      	subeq	r2, #1
 8000d58:	d0f9      	beq.n	8000d4e <__aeabi_fmul+0xce>
 8000d5a:	ea40 000c 	orr.w	r0, r0, ip
 8000d5e:	f093 0f00 	teq	r3, #0
 8000d62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d66:	bf02      	ittt	eq
 8000d68:	0049      	lsleq	r1, r1, #1
 8000d6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d6e:	3b01      	subeq	r3, #1
 8000d70:	d0f9      	beq.n	8000d66 <__aeabi_fmul+0xe6>
 8000d72:	ea41 010c 	orr.w	r1, r1, ip
 8000d76:	e78f      	b.n	8000c98 <__aeabi_fmul+0x18>
 8000d78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d7c:	ea92 0f0c 	teq	r2, ip
 8000d80:	bf18      	it	ne
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d00a      	beq.n	8000d9e <__aeabi_fmul+0x11e>
 8000d88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d8c:	bf18      	it	ne
 8000d8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d92:	d1d8      	bne.n	8000d46 <__aeabi_fmul+0xc6>
 8000d94:	ea80 0001 	eor.w	r0, r0, r1
 8000d98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d9c:	4770      	bx	lr
 8000d9e:	f090 0f00 	teq	r0, #0
 8000da2:	bf17      	itett	ne
 8000da4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000da8:	4608      	moveq	r0, r1
 8000daa:	f091 0f00 	teqne	r1, #0
 8000dae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000db2:	d014      	beq.n	8000dde <__aeabi_fmul+0x15e>
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	d101      	bne.n	8000dbe <__aeabi_fmul+0x13e>
 8000dba:	0242      	lsls	r2, r0, #9
 8000dbc:	d10f      	bne.n	8000dde <__aeabi_fmul+0x15e>
 8000dbe:	ea93 0f0c 	teq	r3, ip
 8000dc2:	d103      	bne.n	8000dcc <__aeabi_fmul+0x14c>
 8000dc4:	024b      	lsls	r3, r1, #9
 8000dc6:	bf18      	it	ne
 8000dc8:	4608      	movne	r0, r1
 8000dca:	d108      	bne.n	8000dde <__aeabi_fmul+0x15e>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ddc:	4770      	bx	lr
 8000dde:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_fdiv>:
 8000de8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df0:	bf1e      	ittt	ne
 8000df2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000df6:	ea92 0f0c 	teqne	r2, ip
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d069      	beq.n	8000ed4 <__aeabi_fdiv+0xec>
 8000e00:	eba2 0203 	sub.w	r2, r2, r3
 8000e04:	ea80 0c01 	eor.w	ip, r0, r1
 8000e08:	0249      	lsls	r1, r1, #9
 8000e0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e0e:	d037      	beq.n	8000e80 <__aeabi_fdiv+0x98>
 8000e10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e20:	428b      	cmp	r3, r1
 8000e22:	bf38      	it	cc
 8000e24:	005b      	lslcc	r3, r3, #1
 8000e26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	bf24      	itt	cs
 8000e32:	1a5b      	subcs	r3, r3, r1
 8000e34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e3c:	bf24      	itt	cs
 8000e3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e4a:	bf24      	itt	cs
 8000e4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e58:	bf24      	itt	cs
 8000e5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	bf18      	it	ne
 8000e66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e6a:	d1e0      	bne.n	8000e2e <__aeabi_fdiv+0x46>
 8000e6c:	2afd      	cmp	r2, #253	; 0xfd
 8000e6e:	f63f af50 	bhi.w	8000d12 <__aeabi_fmul+0x92>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e78:	bf08      	it	eq
 8000e7a:	f020 0001 	biceq.w	r0, r0, #1
 8000e7e:	4770      	bx	lr
 8000e80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e88:	327f      	adds	r2, #127	; 0x7f
 8000e8a:	bfc2      	ittt	gt
 8000e8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e94:	4770      	bxgt	lr
 8000e96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	3a01      	subs	r2, #1
 8000ea0:	e737      	b.n	8000d12 <__aeabi_fmul+0x92>
 8000ea2:	f092 0f00 	teq	r2, #0
 8000ea6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0040      	lsleq	r0, r0, #1
 8000eae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb2:	3a01      	subeq	r2, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fdiv+0xc2>
 8000eb6:	ea40 000c 	orr.w	r0, r0, ip
 8000eba:	f093 0f00 	teq	r3, #0
 8000ebe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec2:	bf02      	ittt	eq
 8000ec4:	0049      	lsleq	r1, r1, #1
 8000ec6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eca:	3b01      	subeq	r3, #1
 8000ecc:	d0f9      	beq.n	8000ec2 <__aeabi_fdiv+0xda>
 8000ece:	ea41 010c 	orr.w	r1, r1, ip
 8000ed2:	e795      	b.n	8000e00 <__aeabi_fdiv+0x18>
 8000ed4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d108      	bne.n	8000ef0 <__aeabi_fdiv+0x108>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	f47f af7d 	bne.w	8000dde <__aeabi_fmul+0x15e>
 8000ee4:	ea93 0f0c 	teq	r3, ip
 8000ee8:	f47f af70 	bne.w	8000dcc <__aeabi_fmul+0x14c>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e776      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000ef0:	ea93 0f0c 	teq	r3, ip
 8000ef4:	d104      	bne.n	8000f00 <__aeabi_fdiv+0x118>
 8000ef6:	024b      	lsls	r3, r1, #9
 8000ef8:	f43f af4c 	beq.w	8000d94 <__aeabi_fmul+0x114>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e76e      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000f00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f04:	bf18      	it	ne
 8000f06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0a:	d1ca      	bne.n	8000ea2 <__aeabi_fdiv+0xba>
 8000f0c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f10:	f47f af5c 	bne.w	8000dcc <__aeabi_fmul+0x14c>
 8000f14:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f18:	f47f af3c 	bne.w	8000d94 <__aeabi_fmul+0x114>
 8000f1c:	e75f      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000f1e:	bf00      	nop

08000f20 <__gesf2>:
 8000f20:	f04f 3cff 	mov.w	ip, #4294967295
 8000f24:	e006      	b.n	8000f34 <__cmpsf2+0x4>
 8000f26:	bf00      	nop

08000f28 <__lesf2>:
 8000f28:	f04f 0c01 	mov.w	ip, #1
 8000f2c:	e002      	b.n	8000f34 <__cmpsf2+0x4>
 8000f2e:	bf00      	nop

08000f30 <__cmpsf2>:
 8000f30:	f04f 0c01 	mov.w	ip, #1
 8000f34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f44:	bf18      	it	ne
 8000f46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f4a:	d011      	beq.n	8000f70 <__cmpsf2+0x40>
 8000f4c:	b001      	add	sp, #4
 8000f4e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f52:	bf18      	it	ne
 8000f54:	ea90 0f01 	teqne	r0, r1
 8000f58:	bf58      	it	pl
 8000f5a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f5e:	bf88      	it	hi
 8000f60:	17c8      	asrhi	r0, r1, #31
 8000f62:	bf38      	it	cc
 8000f64:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f68:	bf18      	it	ne
 8000f6a:	f040 0001 	orrne.w	r0, r0, #1
 8000f6e:	4770      	bx	lr
 8000f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f74:	d102      	bne.n	8000f7c <__cmpsf2+0x4c>
 8000f76:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f7a:	d105      	bne.n	8000f88 <__cmpsf2+0x58>
 8000f7c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f80:	d1e4      	bne.n	8000f4c <__cmpsf2+0x1c>
 8000f82:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f86:	d0e1      	beq.n	8000f4c <__cmpsf2+0x1c>
 8000f88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__aeabi_cfrcmple>:
 8000f90:	4684      	mov	ip, r0
 8000f92:	4608      	mov	r0, r1
 8000f94:	4661      	mov	r1, ip
 8000f96:	e7ff      	b.n	8000f98 <__aeabi_cfcmpeq>

08000f98 <__aeabi_cfcmpeq>:
 8000f98:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f9a:	f7ff ffc9 	bl	8000f30 <__cmpsf2>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	bf48      	it	mi
 8000fa2:	f110 0f00 	cmnmi.w	r0, #0
 8000fa6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fa8 <__aeabi_fcmpeq>:
 8000fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fac:	f7ff fff4 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2001      	moveq	r0, #1
 8000fb4:	2000      	movne	r0, #0
 8000fb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fba:	bf00      	nop

08000fbc <__aeabi_fcmplt>:
 8000fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc0:	f7ff ffea 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fc4:	bf34      	ite	cc
 8000fc6:	2001      	movcc	r0, #1
 8000fc8:	2000      	movcs	r0, #0
 8000fca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fce:	bf00      	nop

08000fd0 <__aeabi_fcmple>:
 8000fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd4:	f7ff ffe0 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fd8:	bf94      	ite	ls
 8000fda:	2001      	movls	r0, #1
 8000fdc:	2000      	movhi	r0, #0
 8000fde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_fcmpge>:
 8000fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe8:	f7ff ffd2 	bl	8000f90 <__aeabi_cfrcmple>
 8000fec:	bf94      	ite	ls
 8000fee:	2001      	movls	r0, #1
 8000ff0:	2000      	movhi	r0, #0
 8000ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_fcmpgt>:
 8000ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ffc:	f7ff ffc8 	bl	8000f90 <__aeabi_cfrcmple>
 8001000:	bf34      	ite	cc
 8001002:	2001      	movcc	r0, #1
 8001004:	2000      	movcs	r0, #0
 8001006:	f85d fb08 	ldr.w	pc, [sp], #8
 800100a:	bf00      	nop

0800100c <__aeabi_f2uiz>:
 800100c:	0042      	lsls	r2, r0, #1
 800100e:	d20e      	bcs.n	800102e <__aeabi_f2uiz+0x22>
 8001010:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001014:	d30b      	bcc.n	800102e <__aeabi_f2uiz+0x22>
 8001016:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800101a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800101e:	d409      	bmi.n	8001034 <__aeabi_f2uiz+0x28>
 8001020:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001028:	fa23 f002 	lsr.w	r0, r3, r2
 800102c:	4770      	bx	lr
 800102e:	f04f 0000 	mov.w	r0, #0
 8001032:	4770      	bx	lr
 8001034:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001038:	d101      	bne.n	800103e <__aeabi_f2uiz+0x32>
 800103a:	0242      	lsls	r2, r0, #9
 800103c:	d102      	bne.n	8001044 <__aeabi_f2uiz+0x38>
 800103e:	f04f 30ff 	mov.w	r0, #4294967295
 8001042:	4770      	bx	lr
 8001044:	f04f 0000 	mov.w	r0, #0
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <huansic_jy62_init>:
uint8_t setBaud9600_pack[3] = { 0xFF, 0xAA, 0x64 };
uint8_t setHorizontal_pack[3] = { 0xFF, 0xAA, 0x65 };
uint8_t setVertical_pack[3] = { 0xFF, 0xAA, 0x66 };
uint8_t sleepAndAwake_pack[3] = { 0xFF, 0xAA, 0x60 };

void huansic_jy62_init(JY62_HandleTypeDef *hjy62) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
	if(!hjy62) return;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d038      	beq.n	80010cc <huansic_jy62_init+0x80>
	if(!hjy62->uartPort) return;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d036      	beq.n	80010d0 <huansic_jy62_init+0x84>

	huansic_jy62_resetAngle(hjy62);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f838 	bl	80010d8 <huansic_jy62_resetAngle>

	hjy62->accel_x = 0;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	605a      	str	r2, [r3, #4]
	hjy62->accel_y = 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
	hjy62->accel_z = 0;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
	hjy62->omega_x = 0;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
	hjy62->omega_y = 0;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	615a      	str	r2, [r3, #20]
	hjy62->omega_z = 0;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	619a      	str	r2, [r3, #24]
	hjy62->theta_x = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	61da      	str	r2, [r3, #28]
	hjy62->theta_y = 0;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
	hjy62->theta_z = 0;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24

	hjy62->lastUpdated = HAL_GetTick();
 80010b0:	f002 f9a0 	bl	80033f4 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	332c      	adds	r3, #44	; 0x2c
 80010c2:	220b      	movs	r2, #11
 80010c4:	4619      	mov	r1, r3
 80010c6:	f004 fed1 	bl	8005e6c <HAL_UART_Receive_DMA>
 80010ca:	e002      	b.n	80010d2 <huansic_jy62_init+0x86>
	if(!hjy62) return;
 80010cc:	bf00      	nop
 80010ce:	e000      	b.n	80010d2 <huansic_jy62_init+0x86>
	if(!hjy62->uartPort) return;
 80010d0:	bf00      	nop
}
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <huansic_jy62_resetAngle>:

void huansic_jy62_resetAngle(JY62_HandleTypeDef *hjy62) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(hjy62->uartPort, initAngle_pack, 3, HAL_MAX_DELAY);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6818      	ldr	r0, [r3, #0]
 80010e4:	f04f 33ff 	mov.w	r3, #4294967295
 80010e8:	2203      	movs	r2, #3
 80010ea:	4903      	ldr	r1, [pc, #12]	; (80010f8 <huansic_jy62_resetAngle+0x20>)
 80010ec:	f004 fe2c 	bl	8005d48 <HAL_UART_Transmit>
}
 80010f0:	bf00      	nop
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000000 	.word	0x20000000
 80010fc:	00000000 	.word	0x00000000

08001100 <huansic_jy62_decodePackage>:

void huansic_jy62_decodePackage(JY62_HandleTypeDef *hjy62) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
	// package header
	if (hjy62->buffer[0] != 0x55)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800110e:	2b55      	cmp	r3, #85	; 0x55
 8001110:	f040 81f2 	bne.w	80014f8 <huansic_jy62_decodePackage+0x3f8>
		return;

	// checksum
	uint8_t sum = hjy62->buffer[0] + hjy62->buffer[1] + hjy62->buffer[2] + hjy62->buffer[3]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001120:	4413      	add	r3, r2
 8001122:	b2da      	uxtb	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800112a:	4413      	add	r3, r2
 800112c:	b2da      	uxtb	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001134:	4413      	add	r3, r2
 8001136:	b2da      	uxtb	r2, r3
			+ hjy62->buffer[4] + hjy62->buffer[5] + hjy62->buffer[6] + hjy62->buffer[7]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800113e:	4413      	add	r3, r2
 8001140:	b2da      	uxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001148:	4413      	add	r3, r2
 800114a:	b2da      	uxtb	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001152:	4413      	add	r3, r2
 8001154:	b2da      	uxtb	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800115c:	4413      	add	r3, r2
 800115e:	b2da      	uxtb	r2, r3
			+ hjy62->buffer[8] + hjy62->buffer[9];
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001166:	4413      	add	r3, r2
 8001168:	b2da      	uxtb	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	uint8_t sum = hjy62->buffer[0] + hjy62->buffer[1] + hjy62->buffer[2] + hjy62->buffer[3]
 8001170:	4413      	add	r3, r2
 8001172:	73fb      	strb	r3, [r7, #15]
	if (hjy62->buffer[10] != sum)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	429a      	cmp	r2, r3
 800117e:	f040 81bd 	bne.w	80014fc <huansic_jy62_decodePackage+0x3fc>
		return;

	// decoding
	int16_t temp;
	if (hjy62->buffer[1] == 0x51) {		// acceleration
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001188:	2b51      	cmp	r3, #81	; 0x51
 800118a:	d175      	bne.n	8001278 <huansic_jy62_decodePackage+0x178>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	b21a      	sxth	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800119c:	b21b      	sxth	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_x = temp / 32768.0 * 16.0;
 80011a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f990 	bl	80004cc <__aeabi_i2d>
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b8d      	ldr	r3, [pc, #564]	; (80013e8 <huansic_jy62_decodePackage+0x2e8>)
 80011b2:	f7ff fb1f 	bl	80007f4 <__aeabi_ddiv>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	4b8a      	ldr	r3, [pc, #552]	; (80013ec <huansic_jy62_decodePackage+0x2ec>)
 80011c4:	f7ff f9ec 	bl	80005a0 <__aeabi_dmul>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fbf8 	bl	80009c4 <__aeabi_d2f>
 80011d4:	4602      	mov	r2, r0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	605a      	str	r2, [r3, #4]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	4313      	orrs	r3, r2
 80011ee:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_y = temp / 32768.0 * 16.0;
 80011f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f969 	bl	80004cc <__aeabi_i2d>
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b7a      	ldr	r3, [pc, #488]	; (80013e8 <huansic_jy62_decodePackage+0x2e8>)
 8001200:	f7ff faf8 	bl	80007f4 <__aeabi_ddiv>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	4b76      	ldr	r3, [pc, #472]	; (80013ec <huansic_jy62_decodePackage+0x2ec>)
 8001212:	f7ff f9c5 	bl	80005a0 <__aeabi_dmul>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	4610      	mov	r0, r2
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fbd1 	bl	80009c4 <__aeabi_d2f>
 8001222:	4602      	mov	r2, r0
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800122e:	021b      	lsls	r3, r3, #8
 8001230:	b21a      	sxth	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001238:	b21b      	sxth	r3, r3
 800123a:	4313      	orrs	r3, r2
 800123c:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_z = temp / 32768.0 * 16.0;
 800123e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f942 	bl	80004cc <__aeabi_i2d>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b66      	ldr	r3, [pc, #408]	; (80013e8 <huansic_jy62_decodePackage+0x2e8>)
 800124e:	f7ff fad1 	bl	80007f4 <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f04f 0200 	mov.w	r2, #0
 800125e:	4b63      	ldr	r3, [pc, #396]	; (80013ec <huansic_jy62_decodePackage+0x2ec>)
 8001260:	f7ff f99e 	bl	80005a0 <__aeabi_dmul>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f7ff fbaa 	bl	80009c4 <__aeabi_d2f>
 8001270:	4602      	mov	r2, r0
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	60da      	str	r2, [r3, #12]
 8001276:	e139      	b.n	80014ec <huansic_jy62_decodePackage+0x3ec>
	} else if (hjy62->buffer[1] == 0x52) {		// angular speed
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800127e:	2b52      	cmp	r3, #82	; 0x52
 8001280:	f040 80ba 	bne.w	80013f8 <huansic_jy62_decodePackage+0x2f8>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800128a:	021b      	lsls	r3, r3, #8
 800128c:	b21a      	sxth	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001294:	b21b      	sxth	r3, r3
 8001296:	4313      	orrs	r3, r2
 8001298:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_x = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 800129a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f914 	bl	80004cc <__aeabi_i2d>
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b4f      	ldr	r3, [pc, #316]	; (80013e8 <huansic_jy62_decodePackage+0x2e8>)
 80012aa:	f7ff faa3 	bl	80007f4 <__aeabi_ddiv>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b4d      	ldr	r3, [pc, #308]	; (80013f0 <huansic_jy62_decodePackage+0x2f0>)
 80012bc:	f7ff f970 	bl	80005a0 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	4b49      	ldr	r3, [pc, #292]	; (80013f4 <huansic_jy62_decodePackage+0x2f4>)
 80012ce:	f7ff fa91 	bl	80007f4 <__aeabi_ddiv>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4610      	mov	r0, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	a341      	add	r3, pc, #260	; (adr r3, 80013e0 <huansic_jy62_decodePackage+0x2e0>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f7ff f95e 	bl	80005a0 <__aeabi_dmul>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4610      	mov	r0, r2
 80012ea:	4619      	mov	r1, r3
 80012ec:	f7ff fb6a 	bl	80009c4 <__aeabi_d2f>
 80012f0:	4602      	mov	r2, r0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	611a      	str	r2, [r3, #16]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012fc:	021b      	lsls	r3, r3, #8
 80012fe:	b21a      	sxth	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_y = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 800130c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f8db 	bl	80004cc <__aeabi_i2d>
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <huansic_jy62_decodePackage+0x2e8>)
 800131c:	f7ff fa6a 	bl	80007f4 <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <huansic_jy62_decodePackage+0x2f0>)
 800132e:	f7ff f937 	bl	80005a0 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	4b2d      	ldr	r3, [pc, #180]	; (80013f4 <huansic_jy62_decodePackage+0x2f4>)
 8001340:	f7ff fa58 	bl	80007f4 <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	a324      	add	r3, pc, #144	; (adr r3, 80013e0 <huansic_jy62_decodePackage+0x2e0>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff f925 	bl	80005a0 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fb31 	bl	80009c4 <__aeabi_d2f>
 8001362:	4602      	mov	r2, r0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	615a      	str	r2, [r3, #20]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800136e:	021b      	lsls	r3, r3, #8
 8001370:	b21a      	sxth	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_z = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 800137e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8a2 	bl	80004cc <__aeabi_i2d>
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <huansic_jy62_decodePackage+0x2e8>)
 800138e:	f7ff fa31 	bl	80007f4 <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <huansic_jy62_decodePackage+0x2f0>)
 80013a0:	f7ff f8fe 	bl	80005a0 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <huansic_jy62_decodePackage+0x2f4>)
 80013b2:	f7ff fa1f 	bl	80007f4 <__aeabi_ddiv>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	a308      	add	r3, pc, #32	; (adr r3, 80013e0 <huansic_jy62_decodePackage+0x2e0>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff f8ec 	bl	80005a0 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff faf8 	bl	80009c4 <__aeabi_d2f>
 80013d4:	4602      	mov	r2, r0
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	619a      	str	r2, [r3, #24]
 80013da:	e087      	b.n	80014ec <huansic_jy62_decodePackage+0x3ec>
 80013dc:	f3af 8000 	nop.w
 80013e0:	54442d18 	.word	0x54442d18
 80013e4:	400921fb 	.word	0x400921fb
 80013e8:	40e00000 	.word	0x40e00000
 80013ec:	40300000 	.word	0x40300000
 80013f0:	409f4000 	.word	0x409f4000
 80013f4:	40668000 	.word	0x40668000
	} else if (hjy62->buffer[1] == 0x53) {		// angle
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013fe:	2b53      	cmp	r3, #83	; 0x53
 8001400:	d174      	bne.n	80014ec <huansic_jy62_decodePackage+0x3ec>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001412:	b21b      	sxth	r3, r3
 8001414:	4313      	orrs	r3, r2
 8001416:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_x = temp / 32768.0 * M_PI;
 8001418:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f855 	bl	80004cc <__aeabi_i2d>
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	4b3a      	ldr	r3, [pc, #232]	; (8001510 <huansic_jy62_decodePackage+0x410>)
 8001428:	f7ff f9e4 	bl	80007f4 <__aeabi_ddiv>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	a334      	add	r3, pc, #208	; (adr r3, 8001508 <huansic_jy62_decodePackage+0x408>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7ff f8b1 	bl	80005a0 <__aeabi_dmul>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fabd 	bl	80009c4 <__aeabi_d2f>
 800144a:	4602      	mov	r2, r0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	61da      	str	r2, [r3, #28]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21a      	sxth	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001460:	b21b      	sxth	r3, r3
 8001462:	4313      	orrs	r3, r2
 8001464:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_y = temp / 32768.0 * M_PI;
 8001466:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff f82e 	bl	80004cc <__aeabi_i2d>
 8001470:	f04f 0200 	mov.w	r2, #0
 8001474:	4b26      	ldr	r3, [pc, #152]	; (8001510 <huansic_jy62_decodePackage+0x410>)
 8001476:	f7ff f9bd 	bl	80007f4 <__aeabi_ddiv>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	a321      	add	r3, pc, #132	; (adr r3, 8001508 <huansic_jy62_decodePackage+0x408>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f7ff f88a 	bl	80005a0 <__aeabi_dmul>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff fa96 	bl	80009c4 <__aeabi_d2f>
 8001498:	4602      	mov	r2, r0
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	621a      	str	r2, [r3, #32]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80014a4:	021b      	lsls	r3, r3, #8
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	4313      	orrs	r3, r2
 80014b2:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_z = temp / 32768.0 * M_PI;
 80014b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f807 	bl	80004cc <__aeabi_i2d>
 80014be:	f04f 0200 	mov.w	r2, #0
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <huansic_jy62_decodePackage+0x410>)
 80014c4:	f7ff f996 	bl	80007f4 <__aeabi_ddiv>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4610      	mov	r0, r2
 80014ce:	4619      	mov	r1, r3
 80014d0:	a30d      	add	r3, pc, #52	; (adr r3, 8001508 <huansic_jy62_decodePackage+0x408>)
 80014d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d6:	f7ff f863 	bl	80005a0 <__aeabi_dmul>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff fa6f 	bl	80009c4 <__aeabi_d2f>
 80014e6:	4602      	mov	r2, r0
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// record current time
	hjy62->lastUpdated = HAL_GetTick();
 80014ec:	f001 ff82 	bl	80033f4 <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
 80014f6:	e002      	b.n	80014fe <huansic_jy62_decodePackage+0x3fe>
		return;
 80014f8:	bf00      	nop
 80014fa:	e000      	b.n	80014fe <huansic_jy62_decodePackage+0x3fe>
		return;
 80014fc:	bf00      	nop
}
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	f3af 8000 	nop.w
 8001508:	54442d18 	.word	0x54442d18
 800150c:	400921fb 	.word	0x400921fb
 8001510:	40e00000 	.word	0x40e00000

08001514 <huansic_jy62_setDMA>:

void huansic_jy62_setDMA(JY62_HandleTypeDef *hjy62) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	332c      	adds	r3, #44	; 0x2c
 8001524:	220b      	movs	r2, #11
 8001526:	4619      	mov	r1, r3
 8001528:	f004 fca0 	bl	8005e6c <HAL_UART_Receive_DMA>
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <huansic_order_new>:
	uint8_t i;
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++)
		orderBuffers[i].id = -1;
}

Order* huansic_order_new(int8_t id) {
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001546:	d101      	bne.n	800154c <huansic_order_new+0x18>
		return 0;
 8001548:	2300      	movs	r3, #0
 800154a:	e046      	b.n	80015da <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 800154c:	2300      	movs	r3, #0
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e017      	b.n	8001582 <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 8001552:	7bfa      	ldrb	r2, [r7, #15]
 8001554:	4923      	ldr	r1, [pc, #140]	; (80015e4 <huansic_order_new+0xb0>)
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	440b      	add	r3, r1
 8001560:	3310      	adds	r3, #16
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	429a      	cmp	r2, r3
 800156a:	d107      	bne.n	800157c <huansic_order_new+0x48>
			return &orderBuffers[i];
 800156c:	7bfa      	ldrb	r2, [r7, #15]
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4a1b      	ldr	r2, [pc, #108]	; (80015e4 <huansic_order_new+0xb0>)
 8001578:	4413      	add	r3, r2
 800157a:	e02e      	b.n	80015da <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	3301      	adds	r3, #1
 8001580:	73fb      	strb	r3, [r7, #15]
 8001582:	7bfb      	ldrb	r3, [r7, #15]
 8001584:	2b3b      	cmp	r3, #59	; 0x3b
 8001586:	d9e4      	bls.n	8001552 <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	e021      	b.n	80015d2 <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 800158e:	7bfa      	ldrb	r2, [r7, #15]
 8001590:	4914      	ldr	r1, [pc, #80]	; (80015e4 <huansic_order_new+0xb0>)
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	3310      	adds	r3, #16
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a4:	d112      	bne.n	80015cc <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 80015a6:	7bfa      	ldrb	r2, [r7, #15]
 80015a8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <huansic_order_new+0xb0>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	4413      	add	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4403      	add	r3, r0
 80015b8:	3310      	adds	r3, #16
 80015ba:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	4613      	mov	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4413      	add	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <huansic_order_new+0xb0>)
 80015c8:	4413      	add	r3, r2
 80015ca:	e006      	b.n	80015da <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80015cc:	7bfb      	ldrb	r3, [r7, #15]
 80015ce:	3301      	adds	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	2b3b      	cmp	r3, #59	; 0x3b
 80015d6:	d9da      	bls.n	800158e <huansic_order_new+0x5a>
		}
	}

	return 0;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	20000090 	.word	0x20000090

080015e8 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d105      	bne.n	8001604 <huansic_motor_init+0x1c>
 80015f8:	4b55      	ldr	r3, [pc, #340]	; (8001750 <huansic_motor_init+0x168>)
 80015fa:	4a56      	ldr	r2, [pc, #344]	; (8001754 <huansic_motor_init+0x16c>)
 80015fc:	210c      	movs	r1, #12
 80015fe:	4856      	ldr	r0, [pc, #344]	; (8001758 <huansic_motor_init+0x170>)
 8001600:	f004 feb8 	bl	8006374 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d105      	bne.n	8001618 <huansic_motor_init+0x30>
 800160c:	4b53      	ldr	r3, [pc, #332]	; (800175c <huansic_motor_init+0x174>)
 800160e:	4a51      	ldr	r2, [pc, #324]	; (8001754 <huansic_motor_init+0x16c>)
 8001610:	210d      	movs	r1, #13
 8001612:	4851      	ldr	r0, [pc, #324]	; (8001758 <huansic_motor_init+0x170>)
 8001614:	f004 feae 	bl	8006374 <__assert_func>
	assert(hmotor->dt);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	f04f 0100 	mov.w	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fcc1 	bl	8000fa8 <__aeabi_fcmpeq>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <huansic_motor_init+0x50>
 800162c:	4b4c      	ldr	r3, [pc, #304]	; (8001760 <huansic_motor_init+0x178>)
 800162e:	4a49      	ldr	r2, [pc, #292]	; (8001754 <huansic_motor_init+0x16c>)
 8001630:	210e      	movs	r1, #14
 8001632:	4849      	ldr	r0, [pc, #292]	; (8001758 <huansic_motor_init+0x170>)
 8001634:	f004 fe9e 	bl	8006374 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
	hmotor->lastError = 0;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f04f 0200 	mov.w	r2, #0
 8001644:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f04f 0200 	mov.w	r2, #0
 8001654:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2200      	movs	r2, #0
 800166e:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d105      	bne.n	8001684 <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2200      	movs	r2, #0
 8001680:	635a      	str	r2, [r3, #52]	; 0x34
 8001682:	e01c      	b.n	80016be <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d105      	bne.n	8001698 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2200      	movs	r2, #0
 8001694:	639a      	str	r2, [r3, #56]	; 0x38
 8001696:	e012      	b.n	80016be <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	2b08      	cmp	r3, #8
 800169e:	d105      	bne.n	80016ac <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2200      	movs	r2, #0
 80016a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80016aa:	e008      	b.n	80016be <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b0c      	cmp	r3, #12
 80016b2:	d104      	bne.n	80016be <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2200      	movs	r2, #0
 80016bc:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d026      	beq.n	8001714 <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d105      	bne.n	80016da <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2200      	movs	r2, #0
 80016d6:	635a      	str	r2, [r3, #52]	; 0x34
 80016d8:	e01c      	b.n	8001714 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b04      	cmp	r3, #4
 80016e0:	d105      	bne.n	80016ee <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2200      	movs	r2, #0
 80016ea:	639a      	str	r2, [r3, #56]	; 0x38
 80016ec:	e012      	b.n	8001714 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	2b08      	cmp	r3, #8
 80016f4:	d105      	bne.n	8001702 <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2200      	movs	r2, #0
 80016fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001700:	e008      	b.n	8001714 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b0c      	cmp	r3, #12
 8001708:	d104      	bne.n	8001714 <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2200      	movs	r2, #0
 8001712:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	213c      	movs	r1, #60	; 0x3c
 800171a:	4618      	mov	r0, r3
 800171c:	f003 fbd2 	bl	8004ec4 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	4619      	mov	r1, r3
 800172a:	4610      	mov	r0, r2
 800172c:	f003 fa6e 	bl	8004c0c <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d007      	beq.n	8001748 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	4619      	mov	r1, r3
 8001742:	4610      	mov	r0, r2
 8001744:	f003 fa62 	bl	8004c0c <HAL_TIM_PWM_Start>
}
 8001748:	bf00      	nop
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	0800742c 	.word	0x0800742c
 8001754:	0800748c 	.word	0x0800748c
 8001758:	0800743c 	.word	0x0800743c
 800175c:	0800745c 	.word	0x0800745c
 8001760:	08007470 	.word	0x08007470

08001764 <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	int32_t diffTick = hmotor->counter->Instance->CNT - hmotor->lastTick;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	617b      	str	r3, [r7, #20]

	hmotor->lastTick = hmotor->counter->Instance->CNT;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	625a      	str	r2, [r3, #36]	; 0x24

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 8001788:	6978      	ldr	r0, [r7, #20]
 800178a:	f7ff fa25 	bl	8000bd8 <__aeabi_i2f>
 800178e:	4602      	mov	r2, r0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4619      	mov	r1, r3
 8001796:	4610      	mov	r0, r2
 8001798:	f7ff fb26 	bl	8000de8 <__aeabi_fdiv>
 800179c:	4603      	mov	r3, r0
 800179e:	461a      	mov	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c
	//hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	4619      	mov	r1, r3
 80017b2:	4610      	mov	r0, r2
 80017b4:	f7ff f95a 	bl	8000a6c <__aeabi_fsub>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4619      	mov	r1, r3
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff f955 	bl	8000a6c <__aeabi_fsub>
 80017c2:	4603      	mov	r3, r0
 80017c4:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ce:	4619      	mov	r1, r3
 80017d0:	4610      	mov	r0, r2
 80017d2:	f7ff f94b 	bl	8000a6c <__aeabi_fsub>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e6:	4619      	mov	r1, r3
 80017e8:	4610      	mov	r0, r2
 80017ea:	f7ff f941 	bl	8000a70 <__addsf3>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695a      	ldr	r2, [r3, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fe:	4619      	mov	r1, r3
 8001800:	4610      	mov	r0, r2
 8001802:	f7ff fa3d 	bl	8000c80 <__aeabi_fmul>
 8001806:	4603      	mov	r3, r0
 8001808:	461c      	mov	r4, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699a      	ldr	r2, [r3, #24]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001812:	4619      	mov	r1, r3
 8001814:	4610      	mov	r0, r2
 8001816:	f7ff fa33 	bl	8000c80 <__aeabi_fmul>
 800181a:	4603      	mov	r3, r0
 800181c:	4619      	mov	r1, r3
 800181e:	4620      	mov	r0, r4
 8001820:	f7ff f926 	bl	8000a70 <__addsf3>
 8001824:	4603      	mov	r3, r0
 8001826:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	6939      	ldr	r1, [r7, #16]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff fa26 	bl	8000c80 <__aeabi_fmul>
 8001834:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001836:	4619      	mov	r1, r3
 8001838:	4620      	mov	r0, r4
 800183a:	f7ff f919 	bl	8000a70 <__addsf3>
 800183e:	4603      	mov	r3, r0
 8001840:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 8001842:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7ff fbd6 	bl	8000ff8 <__aeabi_fcmpgt>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d002      	beq.n	8001858 <huansic_motor_pid+0xf4>
 8001852:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001856:	e009      	b.n	800186c <huansic_motor_pid+0x108>
 8001858:	4954      	ldr	r1, [pc, #336]	; (80019ac <huansic_motor_pid+0x248>)
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f7ff fbae 	bl	8000fbc <__aeabi_fcmplt>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <huansic_motor_pid+0x106>
 8001866:	4b51      	ldr	r3, [pc, #324]	; (80019ac <huansic_motor_pid+0x248>)
 8001868:	e000      	b.n	800186c <huansic_motor_pid+0x108>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f7ff fbc0 	bl	8000ff8 <__aeabi_fcmpgt>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d019      	beq.n	80018b2 <huansic_motor_pid+0x14e>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff f99f 	bl	8000bd0 <__aeabi_ui2f>
 8001892:	4603      	mov	r3, r0
 8001894:	4619      	mov	r1, r3
 8001896:	4620      	mov	r0, r4
 8001898:	f7ff f9f2 	bl	8000c80 <__aeabi_fmul>
 800189c:	4603      	mov	r3, r0
 800189e:	4618      	mov	r0, r3
 80018a0:	f005 fd92 	bl	80073c8 <roundf>
 80018a4:	4603      	mov	r3, r0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff fbb0 	bl	800100c <__aeabi_f2uiz>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	e000      	b.n	80018b4 <huansic_motor_pid+0x150>
 80018b2:	2300      	movs	r3, #0
 80018b4:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 80018b6:	f04f 0100 	mov.w	r1, #0
 80018ba:	68f8      	ldr	r0, [r7, #12]
 80018bc:	f7ff fb7e 	bl	8000fbc <__aeabi_fcmplt>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d019      	beq.n	80018fa <huansic_motor_pid+0x196>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff f97b 	bl	8000bd0 <__aeabi_ui2f>
 80018da:	4603      	mov	r3, r0
 80018dc:	4619      	mov	r1, r3
 80018de:	4620      	mov	r0, r4
 80018e0:	f7ff f9ce 	bl	8000c80 <__aeabi_fmul>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f005 fd6e 	bl	80073c8 <roundf>
 80018ec:	4603      	mov	r3, r0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7ff fb8c 	bl	800100c <__aeabi_f2uiz>
 80018f4:	4603      	mov	r3, r0
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	e000      	b.n	80018fc <huansic_motor_pid+0x198>
 80018fa:	2300      	movs	r3, #0
 80018fc:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d105      	bne.n	8001912 <huansic_motor_pid+0x1ae>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	897a      	ldrh	r2, [r7, #10]
 800190e:	635a      	str	r2, [r3, #52]	; 0x34
 8001910:	e01c      	b.n	800194c <huansic_motor_pid+0x1e8>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b04      	cmp	r3, #4
 8001918:	d105      	bne.n	8001926 <huansic_motor_pid+0x1c2>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	897a      	ldrh	r2, [r7, #10]
 8001922:	639a      	str	r2, [r3, #56]	; 0x38
 8001924:	e012      	b.n	800194c <huansic_motor_pid+0x1e8>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	2b08      	cmp	r3, #8
 800192c:	d105      	bne.n	800193a <huansic_motor_pid+0x1d6>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	897a      	ldrh	r2, [r7, #10]
 8001936:	63da      	str	r2, [r3, #60]	; 0x3c
 8001938:	e008      	b.n	800194c <huansic_motor_pid+0x1e8>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d104      	bne.n	800194c <huansic_motor_pid+0x1e8>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	897a      	ldrh	r2, [r7, #10]
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d026      	beq.n	80019a2 <huansic_motor_pid+0x23e>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d105      	bne.n	8001968 <huansic_motor_pid+0x204>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	893a      	ldrh	r2, [r7, #8]
 8001964:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8001966:	e01c      	b.n	80019a2 <huansic_motor_pid+0x23e>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	2b04      	cmp	r3, #4
 800196e:	d105      	bne.n	800197c <huansic_motor_pid+0x218>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	893a      	ldrh	r2, [r7, #8]
 8001978:	639a      	str	r2, [r3, #56]	; 0x38
}
 800197a:	e012      	b.n	80019a2 <huansic_motor_pid+0x23e>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	2b08      	cmp	r3, #8
 8001982:	d105      	bne.n	8001990 <huansic_motor_pid+0x22c>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	893a      	ldrh	r2, [r7, #8]
 800198c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800198e:	e008      	b.n	80019a2 <huansic_motor_pid+0x23e>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	2b0c      	cmp	r3, #12
 8001996:	d104      	bne.n	80019a2 <huansic_motor_pid+0x23e>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	893a      	ldrh	r2, [r7, #8]
 80019a0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80019a2:	bf00      	nop
 80019a4:	371c      	adds	r7, #28
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd90      	pop	{r4, r7, pc}
 80019aa:	bf00      	nop
 80019ac:	bf800000 	.word	0xbf800000

080019b0 <huansic_xb_init>:
extern float myCharge;				// current charge returned by Master

// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	hxb->nextPackageLength = 6;		// header length
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2206      	movs	r2, #6
 80019bc:	725a      	strb	r2, [r3, #9]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f103 010a 	add.w	r1, r3, #10
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7a5b      	ldrb	r3, [r3, #9]
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	f004 fa4c 	bl	8005e6c <HAL_UART_Receive_DMA>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <huansic_xb_decodeHeader>:

uint8_t huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
	// checksum
	if (hxb->buffer[5]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7bda      	ldrb	r2, [r3, #15]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7a99      	ldrb	r1, [r3, #10]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	7adb      	ldrb	r3, [r3, #11]
 80019f0:	404b      	eors	r3, r1
 80019f2:	b2d9      	uxtb	r1, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7b1b      	ldrb	r3, [r3, #12]
 80019f8:	404b      	eors	r3, r1
 80019fa:	b2d9      	uxtb	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7b5b      	ldrb	r3, [r3, #13]
 8001a00:	404b      	eors	r3, r1
 8001a02:	b2d9      	uxtb	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7b9b      	ldrb	r3, [r3, #14]
 8001a08:	404b      	eors	r3, r1
 8001a0a:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <huansic_xb_decodeHeader+0x38>
		return 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	e01d      	b.n	8001a50 <huansic_xb_decodeHeader+0x74>

	// get and check packet ID
	if (hxb->buffer[0] != 0x01 && hxb->buffer[0] != 0x05)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7a9b      	ldrb	r3, [r3, #10]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d005      	beq.n	8001a28 <huansic_xb_decodeHeader+0x4c>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7a9b      	ldrb	r3, [r3, #10]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d001      	beq.n	8001a28 <huansic_xb_decodeHeader+0x4c>
		return 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e013      	b.n	8001a50 <huansic_xb_decodeHeader+0x74>
	hxb->nextPackageID = hxb->buffer[0];
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	7a9a      	ldrb	r2, [r3, #10]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	721a      	strb	r2, [r3, #8]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	7b9a      	ldrb	r2, [r3, #14]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	725a      	strb	r2, [r3, #9]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6818      	ldr	r0, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f103 010a 	add.w	r1, r3, #10
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7a5b      	ldrb	r3, [r3, #9]
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	461a      	mov	r2, r3
 8001a4a:	f004 fa0f 	bl	8005e6c <HAL_UART_Receive_DMA>
	return 1;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <huansic_xb_decodeBody>:

void huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	757b      	strb	r3, [r7, #21]
 8001a64:	2300      	movs	r3, #0
 8001a66:	75bb      	strb	r3, [r7, #22]
	uint32_t temp;
	if (hxb->nextPackageID == 0x01) {		// game information
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	7a1b      	ldrb	r3, [r3, #8]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	f040 80e9 	bne.w	8001c44 <huansic_xb_decodeBody+0x1ec>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8001a72:	7dbb      	ldrb	r3, [r7, #22]
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	75ba      	strb	r2, [r7, #22]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	7a9a      	ldrb	r2, [r3, #10]
 8001a80:	4b6c      	ldr	r3, [pc, #432]	; (8001c34 <huansic_xb_decodeBody+0x1dc>)
 8001a82:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		for (i = 0; i < 5; i++) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	75fb      	strb	r3, [r7, #23]
 8001a88:	e038      	b.n	8001afc <huansic_xb_decodeBody+0xa4>
			index += 4;
 8001a8a:	7dbb      	ldrb	r3, [r7, #22]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	75bb      	strb	r3, [r7, #22]
			obstacles[i].coord1.x = hxb->buffer[index];
 8001a90:	7dbb      	ldrb	r3, [r7, #22]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	7a9a      	ldrb	r2, [r3, #10]
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
 8001a9a:	b291      	uxth	r1, r2
 8001a9c:	4a66      	ldr	r2, [pc, #408]	; (8001c38 <huansic_xb_decodeBody+0x1e0>)
 8001a9e:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 4;
 8001aa2:	7dbb      	ldrb	r3, [r7, #22]
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	75bb      	strb	r3, [r7, #22]
			obstacles[i].coord1.y = hxb->buffer[index];
 8001aa8:	7dbb      	ldrb	r3, [r7, #22]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	4413      	add	r3, r2
 8001aae:	7a9a      	ldrb	r2, [r3, #10]
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	b291      	uxth	r1, r2
 8001ab4:	4a60      	ldr	r2, [pc, #384]	; (8001c38 <huansic_xb_decodeBody+0x1e0>)
 8001ab6:	00db      	lsls	r3, r3, #3
 8001ab8:	4413      	add	r3, r2
 8001aba:	460a      	mov	r2, r1
 8001abc:	805a      	strh	r2, [r3, #2]
			index += 4;
 8001abe:	7dbb      	ldrb	r3, [r7, #22]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	75bb      	strb	r3, [r7, #22]
			obstacles[i].coord2.x = hxb->buffer[index];
 8001ac4:	7dbb      	ldrb	r3, [r7, #22]
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	7a9a      	ldrb	r2, [r3, #10]
 8001acc:	7dfb      	ldrb	r3, [r7, #23]
 8001ace:	b291      	uxth	r1, r2
 8001ad0:	4a59      	ldr	r2, [pc, #356]	; (8001c38 <huansic_xb_decodeBody+0x1e0>)
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	460a      	mov	r2, r1
 8001ad8:	809a      	strh	r2, [r3, #4]
			index += 4;
 8001ada:	7dbb      	ldrb	r3, [r7, #22]
 8001adc:	3304      	adds	r3, #4
 8001ade:	75bb      	strb	r3, [r7, #22]
			obstacles[i].coord2.y = hxb->buffer[index];
 8001ae0:	7dbb      	ldrb	r3, [r7, #22]
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	7a9a      	ldrb	r2, [r3, #10]
 8001ae8:	7dfb      	ldrb	r3, [r7, #23]
 8001aea:	b291      	uxth	r1, r2
 8001aec:	4a52      	ldr	r2, [pc, #328]	; (8001c38 <huansic_xb_decodeBody+0x1e0>)
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4413      	add	r3, r2
 8001af2:	460a      	mov	r2, r1
 8001af4:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 8001af6:	7dfb      	ldrb	r3, [r7, #23]
 8001af8:	3301      	adds	r3, #1
 8001afa:	75fb      	strb	r3, [r7, #23]
 8001afc:	7dfb      	ldrb	r3, [r7, #23]
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d9c3      	bls.n	8001a8a <huansic_xb_decodeBody+0x32>
		}

		/* total time of this round */
		index++;
 8001b02:	7dbb      	ldrb	r3, [r7, #22]
 8001b04:	3301      	adds	r3, #1
 8001b06:	75bb      	strb	r3, [r7, #22]
		gameStageTimeLimit = hxb->buffer[index++];
 8001b08:	7dbb      	ldrb	r3, [r7, #22]
 8001b0a:	1c5a      	adds	r2, r3, #1
 8001b0c:	75ba      	strb	r2, [r7, #22]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4413      	add	r3, r2
 8001b14:	7a9b      	ldrb	r3, [r3, #10]
 8001b16:	461a      	mov	r2, r3
 8001b18:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <huansic_xb_decodeBody+0x1e4>)
 8001b1a:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8001b1c:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <huansic_xb_decodeBody+0x1e4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	021b      	lsls	r3, r3, #8
 8001b22:	4a46      	ldr	r2, [pc, #280]	; (8001c3c <huansic_xb_decodeBody+0x1e4>)
 8001b24:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001b26:	7dbb      	ldrb	r3, [r7, #22]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	75ba      	strb	r2, [r7, #22]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	7a9b      	ldrb	r3, [r3, #10]
 8001b34:	461a      	mov	r2, r3
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <huansic_xb_decodeBody+0x1e4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	4a3f      	ldr	r2, [pc, #252]	; (8001c3c <huansic_xb_decodeBody+0x1e4>)
 8001b3e:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001b40:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <huansic_xb_decodeBody+0x1e4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	4a3d      	ldr	r2, [pc, #244]	; (8001c3c <huansic_xb_decodeBody+0x1e4>)
 8001b48:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001b4a:	7dbb      	ldrb	r3, [r7, #22]
 8001b4c:	1c5a      	adds	r2, r3, #1
 8001b4e:	75ba      	strb	r2, [r7, #22]
 8001b50:	461a      	mov	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	7a9b      	ldrb	r3, [r3, #10]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <huansic_xb_decodeBody+0x1e4>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	4a36      	ldr	r2, [pc, #216]	; (8001c3c <huansic_xb_decodeBody+0x1e4>)
 8001b62:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <huansic_xb_decodeBody+0x1e4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	021b      	lsls	r3, r3, #8
 8001b6a:	4a34      	ldr	r2, [pc, #208]	; (8001c3c <huansic_xb_decodeBody+0x1e4>)
 8001b6c:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001b6e:	7dbb      	ldrb	r3, [r7, #22]
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	75ba      	strb	r2, [r7, #22]
 8001b74:	461a      	mov	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4413      	add	r3, r2
 8001b7a:	7a9b      	ldrb	r3, [r3, #10]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <huansic_xb_decodeBody+0x1e4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	4a2d      	ldr	r2, [pc, #180]	; (8001c3c <huansic_xb_decodeBody+0x1e4>)
 8001b86:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 8001b88:	7dbb      	ldrb	r3, [r7, #22]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	7a9b      	ldrb	r3, [r3, #10]
 8001b90:	757b      	strb	r3, [r7, #21]
		for (i = 0; i < listLength; i++) {
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]
 8001b96:	e01c      	b.n	8001bd2 <huansic_xb_decodeBody+0x17a>
			index += 4;
 8001b98:	7dbb      	ldrb	r3, [r7, #22]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	75bb      	strb	r3, [r7, #22]
			allyBeacons[i].x = hxb->buffer[index];
 8001b9e:	7dbb      	ldrb	r3, [r7, #22]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	7a9a      	ldrb	r2, [r3, #10]
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
 8001ba8:	b291      	uxth	r1, r2
 8001baa:	4a25      	ldr	r2, [pc, #148]	; (8001c40 <huansic_xb_decodeBody+0x1e8>)
 8001bac:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 4;
 8001bb0:	7dbb      	ldrb	r3, [r7, #22]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	75bb      	strb	r3, [r7, #22]
			allyBeacons[i].y = hxb->buffer[index];
 8001bb6:	7dbb      	ldrb	r3, [r7, #22]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	4413      	add	r3, r2
 8001bbc:	7a9a      	ldrb	r2, [r3, #10]
 8001bbe:	7dfb      	ldrb	r3, [r7, #23]
 8001bc0:	b291      	uxth	r1, r2
 8001bc2:	4a1f      	ldr	r2, [pc, #124]	; (8001c40 <huansic_xb_decodeBody+0x1e8>)
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	460a      	mov	r2, r1
 8001bca:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	75fb      	strb	r3, [r7, #23]
 8001bd2:	7dfa      	ldrb	r2, [r7, #23]
 8001bd4:	7d7b      	ldrb	r3, [r7, #21]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d3de      	bcc.n	8001b98 <huansic_xb_decodeBody+0x140>
		}

		/* opponent beacons */
		index++;
 8001bda:	7dbb      	ldrb	r3, [r7, #22]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	75bb      	strb	r3, [r7, #22]
		listLength = hxb->buffer[index];
 8001be0:	7dbb      	ldrb	r3, [r7, #22]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	4413      	add	r3, r2
 8001be6:	7a9b      	ldrb	r3, [r3, #10]
 8001be8:	757b      	strb	r3, [r7, #21]
		for (i = 0; i < listLength; i++) {
 8001bea:	2300      	movs	r3, #0
 8001bec:	75fb      	strb	r3, [r7, #23]
 8001bee:	e01c      	b.n	8001c2a <huansic_xb_decodeBody+0x1d2>
			index += 4;
 8001bf0:	7dbb      	ldrb	r3, [r7, #22]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	75bb      	strb	r3, [r7, #22]
			allyBeacons[i].x = hxb->buffer[index];
 8001bf6:	7dbb      	ldrb	r3, [r7, #22]
 8001bf8:	687a      	ldr	r2, [r7, #4]
 8001bfa:	4413      	add	r3, r2
 8001bfc:	7a9a      	ldrb	r2, [r3, #10]
 8001bfe:	7dfb      	ldrb	r3, [r7, #23]
 8001c00:	b291      	uxth	r1, r2
 8001c02:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <huansic_xb_decodeBody+0x1e8>)
 8001c04:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 4;
 8001c08:	7dbb      	ldrb	r3, [r7, #22]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	75bb      	strb	r3, [r7, #22]
			allyBeacons[i].y = hxb->buffer[index];
 8001c0e:	7dbb      	ldrb	r3, [r7, #22]
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4413      	add	r3, r2
 8001c14:	7a9a      	ldrb	r2, [r3, #10]
 8001c16:	7dfb      	ldrb	r3, [r7, #23]
 8001c18:	b291      	uxth	r1, r2
 8001c1a:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <huansic_xb_decodeBody+0x1e8>)
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	460a      	mov	r2, r1
 8001c22:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
 8001c26:	3301      	adds	r3, #1
 8001c28:	75fb      	strb	r3, [r7, #23]
 8001c2a:	7dfa      	ldrb	r2, [r7, #23]
 8001c2c:	7d7b      	ldrb	r3, [r7, #21]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d3de      	bcc.n	8001bf0 <huansic_xb_decodeBody+0x198>
 8001c32:	e1b4      	b.n	8001f9e <huansic_xb_decodeBody+0x546>
 8001c34:	20000b80 	.word	0x20000b80
 8001c38:	20000b8c 	.word	0x20000b8c
 8001c3c:	20000b84 	.word	0x20000b84
 8001c40:	20000bb4 	.word	0x20000bb4
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	7a1b      	ldrb	r3, [r3, #8]
 8001c48:	2b05      	cmp	r3, #5
 8001c4a:	f040 81a8 	bne.w	8001f9e <huansic_xb_decodeBody+0x546>
		/* game status */
		gameStatus = hxb->buffer[index++];
 8001c4e:	7dbb      	ldrb	r3, [r7, #22]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	75ba      	strb	r2, [r7, #22]
 8001c54:	461a      	mov	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	7a9a      	ldrb	r2, [r3, #10]
 8001c5c:	4b6d      	ldr	r3, [pc, #436]	; (8001e14 <huansic_xb_decodeBody+0x3bc>)
 8001c5e:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 8001c60:	7dbb      	ldrb	r3, [r7, #22]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	75ba      	strb	r2, [r7, #22]
 8001c66:	461a      	mov	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	7a9b      	ldrb	r3, [r3, #10]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	4b69      	ldr	r3, [pc, #420]	; (8001e18 <huansic_xb_decodeBody+0x3c0>)
 8001c72:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 8001c74:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <huansic_xb_decodeBody+0x3c0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	4a67      	ldr	r2, [pc, #412]	; (8001e18 <huansic_xb_decodeBody+0x3c0>)
 8001c7c:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001c7e:	7dbb      	ldrb	r3, [r7, #22]
 8001c80:	1c5a      	adds	r2, r3, #1
 8001c82:	75ba      	strb	r2, [r7, #22]
 8001c84:	461a      	mov	r2, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	7a9b      	ldrb	r3, [r3, #10]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4b62      	ldr	r3, [pc, #392]	; (8001e18 <huansic_xb_decodeBody+0x3c0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	4a60      	ldr	r2, [pc, #384]	; (8001e18 <huansic_xb_decodeBody+0x3c0>)
 8001c96:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8001c98:	4b5f      	ldr	r3, [pc, #380]	; (8001e18 <huansic_xb_decodeBody+0x3c0>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	021b      	lsls	r3, r3, #8
 8001c9e:	4a5e      	ldr	r2, [pc, #376]	; (8001e18 <huansic_xb_decodeBody+0x3c0>)
 8001ca0:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001ca2:	7dbb      	ldrb	r3, [r7, #22]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	75ba      	strb	r2, [r7, #22]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	7a9b      	ldrb	r3, [r3, #10]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <huansic_xb_decodeBody+0x3c0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	4a57      	ldr	r2, [pc, #348]	; (8001e18 <huansic_xb_decodeBody+0x3c0>)
 8001cba:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8001cbc:	4b56      	ldr	r3, [pc, #344]	; (8001e18 <huansic_xb_decodeBody+0x3c0>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	021b      	lsls	r3, r3, #8
 8001cc2:	4a55      	ldr	r2, [pc, #340]	; (8001e18 <huansic_xb_decodeBody+0x3c0>)
 8001cc4:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001cc6:	7dbb      	ldrb	r3, [r7, #22]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	75ba      	strb	r2, [r7, #22]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	7a9b      	ldrb	r3, [r3, #10]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4b50      	ldr	r3, [pc, #320]	; (8001e18 <huansic_xb_decodeBody+0x3c0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	4a4e      	ldr	r2, [pc, #312]	; (8001e18 <huansic_xb_decodeBody+0x3c0>)
 8001cde:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 8001ce0:	4b4e      	ldr	r3, [pc, #312]	; (8001e1c <huansic_xb_decodeBody+0x3c4>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b4c      	ldr	r3, [pc, #304]	; (8001e18 <huansic_xb_decodeBody+0x3c0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	4a4d      	ldr	r2, [pc, #308]	; (8001e20 <huansic_xb_decodeBody+0x3c8>)
 8001cec:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 8001cee:	7dbb      	ldrb	r3, [r7, #22]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	75ba      	strb	r2, [r7, #22]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	7a9b      	ldrb	r3, [r3, #10]
 8001cfc:	60fb      	str	r3, [r7, #12]
		temp <<= 8;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	60fb      	str	r3, [r7, #12]
		temp |= hxb->buffer[index++];
 8001d04:	7dbb      	ldrb	r3, [r7, #22]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	75ba      	strb	r2, [r7, #22]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4413      	add	r3, r2
 8001d10:	7a9b      	ldrb	r3, [r3, #10]
 8001d12:	461a      	mov	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
		temp <<= 8;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	021b      	lsls	r3, r3, #8
 8001d1e:	60fb      	str	r3, [r7, #12]
		temp |= hxb->buffer[index++];
 8001d20:	7dbb      	ldrb	r3, [r7, #22]
 8001d22:	1c5a      	adds	r2, r3, #1
 8001d24:	75ba      	strb	r2, [r7, #22]
 8001d26:	461a      	mov	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	7a9b      	ldrb	r3, [r3, #10]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]
		temp <<= 8;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	021b      	lsls	r3, r3, #8
 8001d3a:	60fb      	str	r3, [r7, #12]
		temp |= hxb->buffer[index++];
 8001d3c:	7dbb      	ldrb	r3, [r7, #22]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	75ba      	strb	r2, [r7, #22]
 8001d42:	461a      	mov	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	7a9b      	ldrb	r3, [r3, #10]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]
		myScore = *(float*) &temp;			// decode float from uint32
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a32      	ldr	r2, [pc, #200]	; (8001e24 <huansic_xb_decodeBody+0x3cc>)
 8001d5a:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 3;
 8001d5c:	7dbb      	ldrb	r3, [r7, #22]
 8001d5e:	3303      	adds	r3, #3
 8001d60:	75bb      	strb	r3, [r7, #22]
		myCoord.x = hxb->buffer[index++];
 8001d62:	7dbb      	ldrb	r3, [r7, #22]
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	75ba      	strb	r2, [r7, #22]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	7a9b      	ldrb	r3, [r3, #10]
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <huansic_xb_decodeBody+0x3d0>)
 8001d74:	801a      	strh	r2, [r3, #0]
		index += 3;
 8001d76:	7dbb      	ldrb	r3, [r7, #22]
 8001d78:	3303      	adds	r3, #3
 8001d7a:	75bb      	strb	r3, [r7, #22]
		myCoord.y = hxb->buffer[index++];
 8001d7c:	7dbb      	ldrb	r3, [r7, #22]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	75ba      	strb	r2, [r7, #22]
 8001d82:	461a      	mov	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	7a9b      	ldrb	r3, [r3, #10]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <huansic_xb_decodeBody+0x3d0>)
 8001d8e:	805a      	strh	r2, [r3, #2]

		/* fetch battery */
		temp = hxb->buffer[index++];
 8001d90:	7dbb      	ldrb	r3, [r7, #22]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	75ba      	strb	r2, [r7, #22]
 8001d96:	461a      	mov	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	7a9b      	ldrb	r3, [r3, #10]
 8001d9e:	60fb      	str	r3, [r7, #12]
		temp <<= 8;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	021b      	lsls	r3, r3, #8
 8001da4:	60fb      	str	r3, [r7, #12]
		temp |= hxb->buffer[index++];
 8001da6:	7dbb      	ldrb	r3, [r7, #22]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	75ba      	strb	r2, [r7, #22]
 8001dac:	461a      	mov	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	7a9b      	ldrb	r3, [r3, #10]
 8001db4:	461a      	mov	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	60fb      	str	r3, [r7, #12]
		temp <<= 8;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	60fb      	str	r3, [r7, #12]
		temp |= hxb->buffer[index++];
 8001dc2:	7dbb      	ldrb	r3, [r7, #22]
 8001dc4:	1c5a      	adds	r2, r3, #1
 8001dc6:	75ba      	strb	r2, [r7, #22]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	7a9b      	ldrb	r3, [r3, #10]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	60fb      	str	r3, [r7, #12]
		temp <<= 8;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	60fb      	str	r3, [r7, #12]
		temp |= hxb->buffer[index++];
 8001dde:	7dbb      	ldrb	r3, [r7, #22]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	75ba      	strb	r2, [r7, #22]
 8001de4:	461a      	mov	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	7a9b      	ldrb	r3, [r3, #10]
 8001dec:	461a      	mov	r2, r3
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]
		myCharge = *(float*) &temp;			// decode float from uint32
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	; (8001e2c <huansic_xb_decodeBody+0x3d4>)
 8001dfc:	6013      	str	r3, [r2, #0]

		/* my orders */
		listLength = hxb->buffer[index++];
 8001dfe:	7dbb      	ldrb	r3, [r7, #22]
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	75ba      	strb	r2, [r7, #22]
 8001e04:	461a      	mov	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4413      	add	r3, r2
 8001e0a:	7a9b      	ldrb	r3, [r3, #10]
 8001e0c:	757b      	strb	r3, [r7, #21]
		for (i = 0; i < listLength; i++) {
 8001e0e:	2300      	movs	r3, #0
 8001e10:	75fb      	strb	r3, [r7, #23]
 8001e12:	e0bf      	b.n	8001f94 <huansic_xb_decodeBody+0x53c>
 8001e14:	20000b81 	.word	0x20000b81
 8001e18:	20000b88 	.word	0x20000b88
 8001e1c:	20000b84 	.word	0x20000b84
 8001e20:	20000bcc 	.word	0x20000bcc
 8001e24:	20000bc4 	.word	0x20000bc4
 8001e28:	20000bc0 	.word	0x20000bc0
 8001e2c:	20000bc8 	.word	0x20000bc8
			temp = hxb->buffer[index + 24];
 8001e30:	7dbb      	ldrb	r3, [r7, #22]
 8001e32:	3318      	adds	r3, #24
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	7a9b      	ldrb	r3, [r3, #10]
 8001e3a:	60fb      	str	r3, [r7, #12]
			temp <<= 8;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	021b      	lsls	r3, r3, #8
 8001e40:	60fb      	str	r3, [r7, #12]
			temp |= hxb->buffer[index + 25];
 8001e42:	7dbb      	ldrb	r3, [r7, #22]
 8001e44:	3319      	adds	r3, #25
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	7a9b      	ldrb	r3, [r3, #10]
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
			temp <<= 8;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021b      	lsls	r3, r3, #8
 8001e58:	60fb      	str	r3, [r7, #12]
			temp |= hxb->buffer[index + 26];
 8001e5a:	7dbb      	ldrb	r3, [r7, #22]
 8001e5c:	331a      	adds	r3, #26
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	4413      	add	r3, r2
 8001e62:	7a9b      	ldrb	r3, [r3, #10]
 8001e64:	461a      	mov	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
			temp <<= 8;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	60fb      	str	r3, [r7, #12]
			temp |= hxb->buffer[index + 27];
 8001e72:	7dbb      	ldrb	r3, [r7, #22]
 8001e74:	331b      	adds	r3, #27
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	7a9b      	ldrb	r3, [r3, #10]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60fb      	str	r3, [r7, #12]
			Order *tempOrder = huansic_order_new(temp);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fb54 	bl	8001534 <huansic_order_new>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	613b      	str	r3, [r7, #16]

			tempOrder->startCoord.x = hxb->buffer[index + 3];
 8001e90:	7dbb      	ldrb	r3, [r7, #22]
 8001e92:	3303      	adds	r3, #3
 8001e94:	687a      	ldr	r2, [r7, #4]
 8001e96:	4413      	add	r3, r2
 8001e98:	7a9b      	ldrb	r3, [r3, #10]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = hxb->buffer[index + 7];
 8001ea0:	7dbb      	ldrb	r3, [r7, #22]
 8001ea2:	3307      	adds	r3, #7
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	7a9b      	ldrb	r3, [r3, #10]
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	805a      	strh	r2, [r3, #2]

			tempOrder->destCoord.x = hxb->buffer[index + 11];
 8001eb0:	7dbb      	ldrb	r3, [r7, #22]
 8001eb2:	330b      	adds	r3, #11
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	4413      	add	r3, r2
 8001eb8:	7a9b      	ldrb	r3, [r3, #10]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = hxb->buffer[index + 15];
 8001ec0:	7dbb      	ldrb	r3, [r7, #22]
 8001ec2:	330f      	adds	r3, #15
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	7a9b      	ldrb	r3, [r3, #10]
 8001eca:	b29a      	uxth	r2, r3
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	80da      	strh	r2, [r3, #6]

			temp = hxb->buffer[index + 16];
 8001ed0:	7dbb      	ldrb	r3, [r7, #22]
 8001ed2:	3310      	adds	r3, #16
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	7a9b      	ldrb	r3, [r3, #10]
 8001eda:	60fb      	str	r3, [r7, #12]
			temp <<= 8;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021b      	lsls	r3, r3, #8
 8001ee0:	60fb      	str	r3, [r7, #12]
			temp |= hxb->buffer[index + 17];
 8001ee2:	7dbb      	ldrb	r3, [r7, #22]
 8001ee4:	3311      	adds	r3, #17
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	7a9b      	ldrb	r3, [r3, #10]
 8001eec:	461a      	mov	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	60fb      	str	r3, [r7, #12]
			temp <<= 8;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	60fb      	str	r3, [r7, #12]
			temp |= hxb->buffer[index + 18];
 8001efa:	7dbb      	ldrb	r3, [r7, #22]
 8001efc:	3312      	adds	r3, #18
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	7a9b      	ldrb	r3, [r3, #10]
 8001f04:	461a      	mov	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	60fb      	str	r3, [r7, #12]
			temp <<= 8;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	60fb      	str	r3, [r7, #12]
			temp |= hxb->buffer[index + 19];
 8001f12:	7dbb      	ldrb	r3, [r7, #22]
 8001f14:	3313      	adds	r3, #19
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	7a9b      	ldrb	r3, [r3, #10]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
			tempOrder->timeLimit = temp;
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	609a      	str	r2, [r3, #8]

			temp = hxb->buffer[index + 20];
 8001f2a:	7dbb      	ldrb	r3, [r7, #22]
 8001f2c:	3314      	adds	r3, #20
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	7a9b      	ldrb	r3, [r3, #10]
 8001f34:	60fb      	str	r3, [r7, #12]
			temp <<= 8;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	021b      	lsls	r3, r3, #8
 8001f3a:	60fb      	str	r3, [r7, #12]
			temp |= hxb->buffer[index + 21];
 8001f3c:	7dbb      	ldrb	r3, [r7, #22]
 8001f3e:	3315      	adds	r3, #21
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	7a9b      	ldrb	r3, [r3, #10]
 8001f46:	461a      	mov	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
			temp <<= 8;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	60fb      	str	r3, [r7, #12]
			temp |= hxb->buffer[index + 22];
 8001f54:	7dbb      	ldrb	r3, [r7, #22]
 8001f56:	3316      	adds	r3, #22
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	7a9b      	ldrb	r3, [r3, #10]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
			temp <<= 8;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	021b      	lsls	r3, r3, #8
 8001f6a:	60fb      	str	r3, [r7, #12]
			temp |= hxb->buffer[index + 23];
 8001f6c:	7dbb      	ldrb	r3, [r7, #22]
 8001f6e:	3317      	adds	r3, #23
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	4413      	add	r3, r2
 8001f74:	7a9b      	ldrb	r3, [r3, #10]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
			tempOrder->reward = *(float*) &temp;
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	615a      	str	r2, [r3, #20]

			index += 28;
 8001f88:	7dbb      	ldrb	r3, [r7, #22]
 8001f8a:	331c      	adds	r3, #28
 8001f8c:	75bb      	strb	r3, [r7, #22]
		for (i = 0; i < listLength; i++) {
 8001f8e:	7dfb      	ldrb	r3, [r7, #23]
 8001f90:	3301      	adds	r3, #1
 8001f92:	75fb      	strb	r3, [r7, #23]
 8001f94:	7dfa      	ldrb	r2, [r7, #23]
 8001f96:	7d7b      	ldrb	r3, [r7, #21]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	f4ff af49 	bcc.w	8001e30 <huansic_xb_decodeBody+0x3d8>
		}
		// TODO order management
	}

	// set up next DMA
	hxb->nextPackageLength = 6;		// header length
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2206      	movs	r2, #6
 8001fa2:	725a      	strb	r2, [r3, #9]
	hxb->nextPackageID = 0x00;		// the next one is header
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6818      	ldr	r0, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f103 010a 	add.w	r1, r3, #10
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7a5b      	ldrb	r3, [r3, #9]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f003 ff56 	bl	8005e6c <HAL_UART_Receive_DMA>
}
 8001fc0:	bf00      	nop
 8001fc2:	3718      	adds	r7, #24
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}

08001fc8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001fcc:	f001 f9ba 	bl	8003344 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001fd0:	f000 f825 	bl	800201e <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001fd4:	f000 fc20 	bl	8002818 <MX_GPIO_Init>
	MX_DMA_Init();
 8001fd8:	f000 fbf8 	bl	80027cc <MX_DMA_Init>
	MX_I2C1_Init();
 8001fdc:	f000 f866 	bl	80020ac <MX_I2C1_Init>
	MX_TIM1_Init();
 8001fe0:	f000 f892 	bl	8002108 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001fe4:	f000 f954 	bl	8002290 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001fe8:	f000 f9a6 	bl	8002338 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001fec:	f000 f9f8 	bl	80023e0 <MX_TIM4_Init>
	MX_TIM5_Init();
 8001ff0:	f000 fa4a 	bl	8002488 <MX_TIM5_Init>
	MX_TIM8_Init();
 8001ff4:	f000 fad2 	bl	800259c <MX_TIM8_Init>
	MX_USART2_UART_Init();
 8001ff8:	f000 fb94 	bl	8002724 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8001ffc:	f000 fbbc 	bl	8002778 <MX_USART3_UART_Init>
	MX_TIM6_Init();
 8002000:	f000 fa96 	bl	8002530 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	HUAN_MOTOR1_Init();
 8002004:	f000 fc5e 	bl	80028c4 <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 8002008:	f000 fc8c 	bl	8002924 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 800200c:	f000 fcba 	bl	8002984 <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 8002010:	f000 fce8 	bl	80029e4 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 8002014:	f000 fd16 	bl	8002a44 <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 8002018:	f000 fd22 	bl	8002a60 <HUAN_ZIGBEE_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800201c:	e7fe      	b.n	800201c <main+0x54>

0800201e <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b090      	sub	sp, #64	; 0x40
 8002022:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002024:	f107 0318 	add.w	r3, r7, #24
 8002028:	2228      	movs	r2, #40	; 0x28
 800202a:	2100      	movs	r1, #0
 800202c:	4618      	mov	r0, r3
 800202e:	f004 f9fb 	bl	8006428 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002040:	2301      	movs	r3, #1
 8002042:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002048:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800204a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800204e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002050:	2301      	movs	r3, #1
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002054:	2302      	movs	r3, #2
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800205c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800205e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002062:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002064:	f107 0318 	add.w	r3, r7, #24
 8002068:	4618      	mov	r0, r3
 800206a:	f002 f90b 	bl	8004284 <HAL_RCC_OscConfig>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <SystemClock_Config+0x5a>
			{
		Error_Handler();
 8002074:	f000 fd02 	bl	8002a7c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002078:	230f      	movs	r3, #15
 800207a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800207c:	2302      	movs	r3, #2
 800207e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002088:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800208e:	1d3b      	adds	r3, r7, #4
 8002090:	2102      	movs	r1, #2
 8002092:	4618      	mov	r0, r3
 8002094:	f002 fb78 	bl	8004788 <HAL_RCC_ClockConfig>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <SystemClock_Config+0x84>
			{
		Error_Handler();
 800209e:	f000 fced 	bl	8002a7c <Error_Handler>
	}
}
 80020a2:	bf00      	nop
 80020a4:	3740      	adds	r7, #64	; 0x40
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
	...

080020ac <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80020b0:	4b12      	ldr	r3, [pc, #72]	; (80020fc <MX_I2C1_Init+0x50>)
 80020b2:	4a13      	ldr	r2, [pc, #76]	; (8002100 <MX_I2C1_Init+0x54>)
 80020b4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <MX_I2C1_Init+0x50>)
 80020b8:	4a12      	ldr	r2, [pc, #72]	; (8002104 <MX_I2C1_Init+0x58>)
 80020ba:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <MX_I2C1_Init+0x50>)
 80020be:	2200      	movs	r2, #0
 80020c0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <MX_I2C1_Init+0x50>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <MX_I2C1_Init+0x50>)
 80020ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020ce:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <MX_I2C1_Init+0x50>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80020d6:	4b09      	ldr	r3, [pc, #36]	; (80020fc <MX_I2C1_Init+0x50>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <MX_I2C1_Init+0x50>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <MX_I2C1_Init+0x50>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020e8:	4804      	ldr	r0, [pc, #16]	; (80020fc <MX_I2C1_Init+0x50>)
 80020ea:	f001 ff87 	bl	8003ffc <HAL_I2C_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_I2C1_Init+0x4c>
			{
		Error_Handler();
 80020f4:	f000 fcc2 	bl	8002a7c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000630 	.word	0x20000630
 8002100:	40005400 	.word	0x40005400
 8002104:	000186a0 	.word	0x000186a0

08002108 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b096      	sub	sp, #88	; 0x58
 800210c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800210e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800211c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	611a      	str	r2, [r3, #16]
 8002136:	615a      	str	r2, [r3, #20]
 8002138:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2220      	movs	r2, #32
 800213e:	2100      	movs	r1, #0
 8002140:	4618      	mov	r0, r3
 8002142:	f004 f971 	bl	8006428 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8002146:	4b50      	ldr	r3, [pc, #320]	; (8002288 <MX_TIM1_Init+0x180>)
 8002148:	4a50      	ldr	r2, [pc, #320]	; (800228c <MX_TIM1_Init+0x184>)
 800214a:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800214c:	4b4e      	ldr	r3, [pc, #312]	; (8002288 <MX_TIM1_Init+0x180>)
 800214e:	2200      	movs	r2, #0
 8002150:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002152:	4b4d      	ldr	r3, [pc, #308]	; (8002288 <MX_TIM1_Init+0x180>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8002158:	4b4b      	ldr	r3, [pc, #300]	; (8002288 <MX_TIM1_Init+0x180>)
 800215a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800215e:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002160:	4b49      	ldr	r3, [pc, #292]	; (8002288 <MX_TIM1_Init+0x180>)
 8002162:	2200      	movs	r2, #0
 8002164:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002166:	4b48      	ldr	r3, [pc, #288]	; (8002288 <MX_TIM1_Init+0x180>)
 8002168:	2200      	movs	r2, #0
 800216a:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800216c:	4b46      	ldr	r3, [pc, #280]	; (8002288 <MX_TIM1_Init+0x180>)
 800216e:	2200      	movs	r2, #0
 8002170:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002172:	4845      	ldr	r0, [pc, #276]	; (8002288 <MX_TIM1_Init+0x180>)
 8002174:	f002 fca2 	bl	8004abc <HAL_TIM_Base_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM1_Init+0x7a>
			{
		Error_Handler();
 800217e:	f000 fc7d 	bl	8002a7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002186:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002188:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800218c:	4619      	mov	r1, r3
 800218e:	483e      	ldr	r0, [pc, #248]	; (8002288 <MX_TIM1_Init+0x180>)
 8002190:	f003 f8ec 	bl	800536c <HAL_TIM_ConfigClockSource>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM1_Init+0x96>
			{
		Error_Handler();
 800219a:	f000 fc6f 	bl	8002a7c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800219e:	483a      	ldr	r0, [pc, #232]	; (8002288 <MX_TIM1_Init+0x180>)
 80021a0:	f002 fcdb 	bl	8004b5a <HAL_TIM_PWM_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM1_Init+0xa6>
			{
		Error_Handler();
 80021aa:	f000 fc67 	bl	8002a7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021ba:	4619      	mov	r1, r3
 80021bc:	4832      	ldr	r0, [pc, #200]	; (8002288 <MX_TIM1_Init+0x180>)
 80021be:	f003 fca7 	bl	8005b10 <HAL_TIMEx_MasterConfigSynchronization>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM1_Init+0xc4>
			{
		Error_Handler();
 80021c8:	f000 fc58 	bl	8002a7c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021cc:	2360      	movs	r3, #96	; 0x60
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d4:	2300      	movs	r3, #0
 80021d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021d8:	2300      	movs	r3, #0
 80021da:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021dc:	2300      	movs	r3, #0
 80021de:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021e4:	2300      	movs	r3, #0
 80021e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ec:	2200      	movs	r2, #0
 80021ee:	4619      	mov	r1, r3
 80021f0:	4825      	ldr	r0, [pc, #148]	; (8002288 <MX_TIM1_Init+0x180>)
 80021f2:	f002 fffd 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM1_Init+0xf8>
			{
		Error_Handler();
 80021fc:	f000 fc3e 	bl	8002a7c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002204:	2204      	movs	r2, #4
 8002206:	4619      	mov	r1, r3
 8002208:	481f      	ldr	r0, [pc, #124]	; (8002288 <MX_TIM1_Init+0x180>)
 800220a:	f002 fff1 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <MX_TIM1_Init+0x110>
			{
		Error_Handler();
 8002214:	f000 fc32 	bl	8002a7c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221c:	2208      	movs	r2, #8
 800221e:	4619      	mov	r1, r3
 8002220:	4819      	ldr	r0, [pc, #100]	; (8002288 <MX_TIM1_Init+0x180>)
 8002222:	f002 ffe5 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM1_Init+0x128>
			{
		Error_Handler();
 800222c:	f000 fc26 	bl	8002a7c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002234:	220c      	movs	r2, #12
 8002236:	4619      	mov	r1, r3
 8002238:	4813      	ldr	r0, [pc, #76]	; (8002288 <MX_TIM1_Init+0x180>)
 800223a:	f002 ffd9 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_TIM1_Init+0x140>
			{
		Error_Handler();
 8002244:	f000 fc1a 	bl	8002a7c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002248:	2300      	movs	r3, #0
 800224a:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800224c:	2300      	movs	r3, #0
 800224e:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800225c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002260:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	4619      	mov	r1, r3
 800226a:	4807      	ldr	r0, [pc, #28]	; (8002288 <MX_TIM1_Init+0x180>)
 800226c:	f003 fcbc 	bl	8005be8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_TIM1_Init+0x172>
			{
		Error_Handler();
 8002276:	f000 fc01 	bl	8002a7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800227a:	4803      	ldr	r0, [pc, #12]	; (8002288 <MX_TIM1_Init+0x180>)
 800227c:	f000 fdc4 	bl	8002e08 <HAL_TIM_MspPostInit>

}
 8002280:	bf00      	nop
 8002282:	3758      	adds	r7, #88	; 0x58
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000684 	.word	0x20000684
 800228c:	40012c00 	.word	0x40012c00

08002290 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	; 0x30
 8002294:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002296:	f107 030c 	add.w	r3, r7, #12
 800229a:	2224      	movs	r2, #36	; 0x24
 800229c:	2100      	movs	r1, #0
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 f8c2 	bl	8006428 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80022ac:	4b21      	ldr	r3, [pc, #132]	; (8002334 <MX_TIM2_Init+0xa4>)
 80022ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022b2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <MX_TIM2_Init+0xa4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <MX_TIM2_Init+0xa4>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80022c0:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <MX_TIM2_Init+0xa4>)
 80022c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c6:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c8:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <MX_TIM2_Init+0xa4>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <MX_TIM2_Init+0xa4>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80022d4:	2301      	movs	r3, #1
 80022d6:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022d8:	2300      	movs	r3, #0
 80022da:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022dc:	2301      	movs	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022e8:	2300      	movs	r3, #0
 80022ea:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022ec:	2301      	movs	r3, #1
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	4619      	mov	r1, r3
 80022fe:	480d      	ldr	r0, [pc, #52]	; (8002334 <MX_TIM2_Init+0xa4>)
 8002300:	f002 fd3e 	bl	8004d80 <HAL_TIM_Encoder_Init>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM2_Init+0x7e>
			{
		Error_Handler();
 800230a:	f000 fbb7 	bl	8002a7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	4619      	mov	r1, r3
 800231a:	4806      	ldr	r0, [pc, #24]	; (8002334 <MX_TIM2_Init+0xa4>)
 800231c:	f003 fbf8 	bl	8005b10 <HAL_TIMEx_MasterConfigSynchronization>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <MX_TIM2_Init+0x9a>
			{
		Error_Handler();
 8002326:	f000 fba9 	bl	8002a7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800232a:	bf00      	nop
 800232c:	3730      	adds	r7, #48	; 0x30
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	200006cc 	.word	0x200006cc

08002338 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08c      	sub	sp, #48	; 0x30
 800233c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800233e:	f107 030c 	add.w	r3, r7, #12
 8002342:	2224      	movs	r2, #36	; 0x24
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f004 f86e 	bl	8006428 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800234c:	1d3b      	adds	r3, r7, #4
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002354:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <MX_TIM3_Init+0xa0>)
 8002356:	4a21      	ldr	r2, [pc, #132]	; (80023dc <MX_TIM3_Init+0xa4>)
 8002358:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800235a:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <MX_TIM3_Init+0xa0>)
 800235c:	2200      	movs	r2, #0
 800235e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <MX_TIM3_Init+0xa0>)
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <MX_TIM3_Init+0xa0>)
 8002368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800236c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236e:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <MX_TIM3_Init+0xa0>)
 8002370:	2200      	movs	r2, #0
 8002372:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002374:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <MX_TIM3_Init+0xa0>)
 8002376:	2200      	movs	r2, #0
 8002378:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800237a:	2301      	movs	r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800237e:	2300      	movs	r3, #0
 8002380:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002382:	2301      	movs	r3, #1
 8002384:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800238e:	2300      	movs	r3, #0
 8002390:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002392:	2301      	movs	r3, #1
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002396:	2300      	movs	r3, #0
 8002398:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 800239a:	2300      	movs	r3, #0
 800239c:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800239e:	f107 030c 	add.w	r3, r7, #12
 80023a2:	4619      	mov	r1, r3
 80023a4:	480c      	ldr	r0, [pc, #48]	; (80023d8 <MX_TIM3_Init+0xa0>)
 80023a6:	f002 fceb 	bl	8004d80 <HAL_TIM_Encoder_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM3_Init+0x7c>
			{
		Error_Handler();
 80023b0:	f000 fb64 	bl	8002a7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b4:	2300      	movs	r3, #0
 80023b6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_TIM3_Init+0xa0>)
 80023c2:	f003 fba5 	bl	8005b10 <HAL_TIMEx_MasterConfigSynchronization>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM3_Init+0x98>
			{
		Error_Handler();
 80023cc:	f000 fb56 	bl	8002a7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	3730      	adds	r7, #48	; 0x30
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000714 	.word	0x20000714
 80023dc:	40000400 	.word	0x40000400

080023e0 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	; 0x30
 80023e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2224      	movs	r2, #36	; 0x24
 80023ec:	2100      	movs	r1, #0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f004 f81a 	bl	8006428 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80023fc:	4b20      	ldr	r3, [pc, #128]	; (8002480 <MX_TIM4_Init+0xa0>)
 80023fe:	4a21      	ldr	r2, [pc, #132]	; (8002484 <MX_TIM4_Init+0xa4>)
 8002400:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002402:	4b1f      	ldr	r3, [pc, #124]	; (8002480 <MX_TIM4_Init+0xa0>)
 8002404:	2200      	movs	r2, #0
 8002406:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <MX_TIM4_Init+0xa0>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800240e:	4b1c      	ldr	r3, [pc, #112]	; (8002480 <MX_TIM4_Init+0xa0>)
 8002410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002414:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002416:	4b1a      	ldr	r3, [pc, #104]	; (8002480 <MX_TIM4_Init+0xa0>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241c:	4b18      	ldr	r3, [pc, #96]	; (8002480 <MX_TIM4_Init+0xa0>)
 800241e:	2200      	movs	r2, #0
 8002420:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002422:	2301      	movs	r3, #1
 8002424:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002426:	2300      	movs	r3, #0
 8002428:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800242a:	2301      	movs	r3, #1
 800242c:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800243a:	2301      	movs	r3, #1
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800243e:	2300      	movs	r3, #0
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	4619      	mov	r1, r3
 800244c:	480c      	ldr	r0, [pc, #48]	; (8002480 <MX_TIM4_Init+0xa0>)
 800244e:	f002 fc97 	bl	8004d80 <HAL_TIM_Encoder_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_TIM4_Init+0x7c>
			{
		Error_Handler();
 8002458:	f000 fb10 	bl	8002a7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	4619      	mov	r1, r3
 8002468:	4805      	ldr	r0, [pc, #20]	; (8002480 <MX_TIM4_Init+0xa0>)
 800246a:	f003 fb51 	bl	8005b10 <HAL_TIMEx_MasterConfigSynchronization>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_TIM4_Init+0x98>
			{
		Error_Handler();
 8002474:	f000 fb02 	bl	8002a7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	3730      	adds	r7, #48	; 0x30
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	2000075c 	.word	0x2000075c
 8002484:	40000800 	.word	0x40000800

08002488 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08c      	sub	sp, #48	; 0x30
 800248c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800248e:	f107 030c 	add.w	r3, r7, #12
 8002492:	2224      	movs	r2, #36	; 0x24
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f003 ffc6 	bl	8006428 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800249c:	1d3b      	adds	r3, r7, #4
 800249e:	2200      	movs	r2, #0
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 80024a4:	4b20      	ldr	r3, [pc, #128]	; (8002528 <MX_TIM5_Init+0xa0>)
 80024a6:	4a21      	ldr	r2, [pc, #132]	; (800252c <MX_TIM5_Init+0xa4>)
 80024a8:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 0;
 80024aa:	4b1f      	ldr	r3, [pc, #124]	; (8002528 <MX_TIM5_Init+0xa0>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b0:	4b1d      	ldr	r3, [pc, #116]	; (8002528 <MX_TIM5_Init+0xa0>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 65535;
 80024b6:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <MX_TIM5_Init+0xa0>)
 80024b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024bc:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024be:	4b1a      	ldr	r3, [pc, #104]	; (8002528 <MX_TIM5_Init+0xa0>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c4:	4b18      	ldr	r3, [pc, #96]	; (8002528 <MX_TIM5_Init+0xa0>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024ca:	2301      	movs	r3, #1
 80024cc:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024d2:	2301      	movs	r3, #1
 80024d4:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024de:	2300      	movs	r3, #0
 80024e0:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024e2:	2301      	movs	r3, #1
 80024e4:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024e6:	2300      	movs	r3, #0
 80024e8:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80024ea:	2300      	movs	r3, #0
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80024ee:	f107 030c 	add.w	r3, r7, #12
 80024f2:	4619      	mov	r1, r3
 80024f4:	480c      	ldr	r0, [pc, #48]	; (8002528 <MX_TIM5_Init+0xa0>)
 80024f6:	f002 fc43 	bl	8004d80 <HAL_TIM_Encoder_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM5_Init+0x7c>
			{
		Error_Handler();
 8002500:	f000 fabc 	bl	8002a7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002504:	2300      	movs	r3, #0
 8002506:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800250c:	1d3b      	adds	r3, r7, #4
 800250e:	4619      	mov	r1, r3
 8002510:	4805      	ldr	r0, [pc, #20]	; (8002528 <MX_TIM5_Init+0xa0>)
 8002512:	f003 fafd 	bl	8005b10 <HAL_TIMEx_MasterConfigSynchronization>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <MX_TIM5_Init+0x98>
			{
		Error_Handler();
 800251c:	f000 faae 	bl	8002a7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002520:	bf00      	nop
 8002522:	3730      	adds	r7, #48	; 0x30
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	200007a4 	.word	0x200007a4
 800252c:	40000c00 	.word	0x40000c00

08002530 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002536:	463b      	mov	r3, r7
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <MX_TIM6_Init+0x64>)
 8002540:	4a15      	ldr	r2, [pc, #84]	; (8002598 <MX_TIM6_Init+0x68>)
 8002542:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 72 - 1;
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <MX_TIM6_Init+0x64>)
 8002546:	2247      	movs	r2, #71	; 0x47
 8002548:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <MX_TIM6_Init+0x64>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 50000;
 8002550:	4b10      	ldr	r3, [pc, #64]	; (8002594 <MX_TIM6_Init+0x64>)
 8002552:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002556:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002558:	4b0e      	ldr	r3, [pc, #56]	; (8002594 <MX_TIM6_Init+0x64>)
 800255a:	2200      	movs	r2, #0
 800255c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800255e:	480d      	ldr	r0, [pc, #52]	; (8002594 <MX_TIM6_Init+0x64>)
 8002560:	f002 faac 	bl	8004abc <HAL_TIM_Base_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM6_Init+0x3e>
			{
		Error_Handler();
 800256a:	f000 fa87 	bl	8002a7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002576:	463b      	mov	r3, r7
 8002578:	4619      	mov	r1, r3
 800257a:	4806      	ldr	r0, [pc, #24]	; (8002594 <MX_TIM6_Init+0x64>)
 800257c:	f003 fac8 	bl	8005b10 <HAL_TIMEx_MasterConfigSynchronization>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM6_Init+0x5a>
			{
		Error_Handler();
 8002586:	f000 fa79 	bl	8002a7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200007ec 	.word	0x200007ec
 8002598:	40001000 	.word	0x40001000

0800259c <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b096      	sub	sp, #88	; 0x58
 80025a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80025a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025a6:	2200      	movs	r2, #0
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	605a      	str	r2, [r3, #4]
 80025ac:	609a      	str	r2, [r3, #8]
 80025ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80025b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80025ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	605a      	str	r2, [r3, #4]
 80025c4:	609a      	str	r2, [r3, #8]
 80025c6:	60da      	str	r2, [r3, #12]
 80025c8:	611a      	str	r2, [r3, #16]
 80025ca:	615a      	str	r2, [r3, #20]
 80025cc:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	2220      	movs	r2, #32
 80025d2:	2100      	movs	r1, #0
 80025d4:	4618      	mov	r0, r3
 80025d6:	f003 ff27 	bl	8006428 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80025da:	4b50      	ldr	r3, [pc, #320]	; (800271c <MX_TIM8_Init+0x180>)
 80025dc:	4a50      	ldr	r2, [pc, #320]	; (8002720 <MX_TIM8_Init+0x184>)
 80025de:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80025e0:	4b4e      	ldr	r3, [pc, #312]	; (800271c <MX_TIM8_Init+0x180>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e6:	4b4d      	ldr	r3, [pc, #308]	; (800271c <MX_TIM8_Init+0x180>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 65535;
 80025ec:	4b4b      	ldr	r3, [pc, #300]	; (800271c <MX_TIM8_Init+0x180>)
 80025ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025f2:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f4:	4b49      	ldr	r3, [pc, #292]	; (800271c <MX_TIM8_Init+0x180>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80025fa:	4b48      	ldr	r3, [pc, #288]	; (800271c <MX_TIM8_Init+0x180>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002600:	4b46      	ldr	r3, [pc, #280]	; (800271c <MX_TIM8_Init+0x180>)
 8002602:	2200      	movs	r2, #0
 8002604:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002606:	4845      	ldr	r0, [pc, #276]	; (800271c <MX_TIM8_Init+0x180>)
 8002608:	f002 fa58 	bl	8004abc <HAL_TIM_Base_Init>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM8_Init+0x7a>
			{
		Error_Handler();
 8002612:	f000 fa33 	bl	8002a7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800261a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800261c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002620:	4619      	mov	r1, r3
 8002622:	483e      	ldr	r0, [pc, #248]	; (800271c <MX_TIM8_Init+0x180>)
 8002624:	f002 fea2 	bl	800536c <HAL_TIM_ConfigClockSource>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_TIM8_Init+0x96>
			{
		Error_Handler();
 800262e:	f000 fa25 	bl	8002a7c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002632:	483a      	ldr	r0, [pc, #232]	; (800271c <MX_TIM8_Init+0x180>)
 8002634:	f002 fa91 	bl	8004b5a <HAL_TIM_PWM_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM8_Init+0xa6>
			{
		Error_Handler();
 800263e:	f000 fa1d 	bl	8002a7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800264a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800264e:	4619      	mov	r1, r3
 8002650:	4832      	ldr	r0, [pc, #200]	; (800271c <MX_TIM8_Init+0x180>)
 8002652:	f003 fa5d 	bl	8005b10 <HAL_TIMEx_MasterConfigSynchronization>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <MX_TIM8_Init+0xc4>
			{
		Error_Handler();
 800265c:	f000 fa0e 	bl	8002a7c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002660:	2360      	movs	r3, #96	; 0x60
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8002664:	2300      	movs	r3, #0
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002668:	2300      	movs	r3, #0
 800266a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800266c:	2300      	movs	r3, #0
 800266e:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002670:	2300      	movs	r3, #0
 8002672:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002674:	2300      	movs	r3, #0
 8002676:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002678:	2300      	movs	r3, #0
 800267a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800267c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002680:	2200      	movs	r2, #0
 8002682:	4619      	mov	r1, r3
 8002684:	4825      	ldr	r0, [pc, #148]	; (800271c <MX_TIM8_Init+0x180>)
 8002686:	f002 fdb3 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <MX_TIM8_Init+0xf8>
			{
		Error_Handler();
 8002690:	f000 f9f4 	bl	8002a7c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002698:	2204      	movs	r2, #4
 800269a:	4619      	mov	r1, r3
 800269c:	481f      	ldr	r0, [pc, #124]	; (800271c <MX_TIM8_Init+0x180>)
 800269e:	f002 fda7 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM8_Init+0x110>
			{
		Error_Handler();
 80026a8:	f000 f9e8 	bl	8002a7c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b0:	2208      	movs	r2, #8
 80026b2:	4619      	mov	r1, r3
 80026b4:	4819      	ldr	r0, [pc, #100]	; (800271c <MX_TIM8_Init+0x180>)
 80026b6:	f002 fd9b 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <MX_TIM8_Init+0x128>
			{
		Error_Handler();
 80026c0:	f000 f9dc 	bl	8002a7c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026c8:	220c      	movs	r2, #12
 80026ca:	4619      	mov	r1, r3
 80026cc:	4813      	ldr	r0, [pc, #76]	; (800271c <MX_TIM8_Init+0x180>)
 80026ce:	f002 fd8f 	bl	80051f0 <HAL_TIM_PWM_ConfigChannel>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM8_Init+0x140>
			{
		Error_Handler();
 80026d8:	f000 f9d0 	bl	8002a7c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026dc:	2300      	movs	r3, #0
 80026de:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026f4:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80026fa:	1d3b      	adds	r3, r7, #4
 80026fc:	4619      	mov	r1, r3
 80026fe:	4807      	ldr	r0, [pc, #28]	; (800271c <MX_TIM8_Init+0x180>)
 8002700:	f003 fa72 	bl	8005be8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_TIM8_Init+0x172>
			{
		Error_Handler();
 800270a:	f000 f9b7 	bl	8002a7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 800270e:	4803      	ldr	r0, [pc, #12]	; (800271c <MX_TIM8_Init+0x180>)
 8002710:	f000 fb7a 	bl	8002e08 <HAL_TIM_MspPostInit>

}
 8002714:	bf00      	nop
 8002716:	3758      	adds	r7, #88	; 0x58
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	20000834 	.word	0x20000834
 8002720:	40013400 	.word	0x40013400

08002724 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 800272a:	4a12      	ldr	r2, [pc, #72]	; (8002774 <MX_USART2_UART_Init+0x50>)
 800272c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002734:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800273c:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002744:	2200      	movs	r2, #0
 8002746:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 800274a:	220c      	movs	r2, #12
 800274c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800274e:	4b08      	ldr	r3, [pc, #32]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002750:	2200      	movs	r2, #0
 8002752:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800275a:	4805      	ldr	r0, [pc, #20]	; (8002770 <MX_USART2_UART_Init+0x4c>)
 800275c:	f003 faa7 	bl	8005cae <HAL_UART_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_USART2_UART_Init+0x46>
			{
		Error_Handler();
 8002766:	f000 f989 	bl	8002a7c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000087c 	.word	0x2000087c
 8002774:	40004400 	.word	0x40004400

08002778 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 800277e:	4a12      	ldr	r2, [pc, #72]	; (80027c8 <MX_USART3_UART_Init+0x50>)
 8002780:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 8002784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002788:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800278a:	4b0e      	ldr	r3, [pc, #56]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8002790:	4b0c      	ldr	r3, [pc, #48]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 8002792:	2200      	movs	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8002796:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 8002798:	2200      	movs	r2, #0
 800279a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 800279e:	220c      	movs	r2, #12
 80027a0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80027ae:	4805      	ldr	r0, [pc, #20]	; (80027c4 <MX_USART3_UART_Init+0x4c>)
 80027b0:	f003 fa7d 	bl	8005cae <HAL_UART_Init>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_USART3_UART_Init+0x46>
			{
		Error_Handler();
 80027ba:	f000 f95f 	bl	8002a7c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200008c0 	.word	0x200008c0
 80027c8:	40004800 	.word	0x40004800

080027cc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <MX_DMA_Init+0x48>)
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	4a0f      	ldr	r2, [pc, #60]	; (8002814 <MX_DMA_Init+0x48>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	6153      	str	r3, [r2, #20]
 80027de:	4b0d      	ldr	r3, [pc, #52]	; (8002814 <MX_DMA_Init+0x48>)
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2102      	movs	r1, #2
 80027ee:	200d      	movs	r0, #13
 80027f0:	f000 fee1 	bl	80035b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80027f4:	200d      	movs	r0, #13
 80027f6:	f000 fefa 	bl	80035ee <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2102      	movs	r1, #2
 80027fe:	2010      	movs	r0, #16
 8002800:	f000 fed9 	bl	80035b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002804:	2010      	movs	r0, #16
 8002806:	f000 fef2 	bl	80035ee <HAL_NVIC_EnableIRQ>

}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40021000 	.word	0x40021000

08002818 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800281e:	f107 0310 	add.w	r3, r7, #16
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800282c:	4b23      	ldr	r3, [pc, #140]	; (80028bc <MX_GPIO_Init+0xa4>)
 800282e:	699b      	ldr	r3, [r3, #24]
 8002830:	4a22      	ldr	r2, [pc, #136]	; (80028bc <MX_GPIO_Init+0xa4>)
 8002832:	f043 0320 	orr.w	r3, r3, #32
 8002836:	6193      	str	r3, [r2, #24]
 8002838:	4b20      	ldr	r3, [pc, #128]	; (80028bc <MX_GPIO_Init+0xa4>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	f003 0320 	and.w	r3, r3, #32
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <MX_GPIO_Init+0xa4>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4a1c      	ldr	r2, [pc, #112]	; (80028bc <MX_GPIO_Init+0xa4>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	6193      	str	r3, [r2, #24]
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <MX_GPIO_Init+0xa4>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	60bb      	str	r3, [r7, #8]
 800285a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <MX_GPIO_Init+0xa4>)
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	4a16      	ldr	r2, [pc, #88]	; (80028bc <MX_GPIO_Init+0xa4>)
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	6193      	str	r3, [r2, #24]
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <MX_GPIO_Init+0xa4>)
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	607b      	str	r3, [r7, #4]
 8002872:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <MX_GPIO_Init+0xa4>)
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	4a10      	ldr	r2, [pc, #64]	; (80028bc <MX_GPIO_Init+0xa4>)
 800287a:	f043 0310 	orr.w	r3, r3, #16
 800287e:	6193      	str	r3, [r2, #24]
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <MX_GPIO_Init+0xa4>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	f003 0310 	and.w	r3, r3, #16
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin, GPIO_PIN_RESET);
 800288c:	2200      	movs	r2, #0
 800288e:	2107      	movs	r1, #7
 8002890:	480b      	ldr	r0, [pc, #44]	; (80028c0 <MX_GPIO_Init+0xa8>)
 8002892:	f001 fb9b 	bl	8003fcc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin;
 8002896:	2307      	movs	r3, #7
 8002898:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289a:	2301      	movs	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a2:	2302      	movs	r3, #2
 80028a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a6:	f107 0310 	add.w	r3, r7, #16
 80028aa:	4619      	mov	r1, r3
 80028ac:	4804      	ldr	r0, [pc, #16]	; (80028c0 <MX_GPIO_Init+0xa8>)
 80028ae:	f001 f9f9 	bl	8003ca4 <HAL_GPIO_Init>

}
 80028b2:	bf00      	nop
 80028b4:	3720      	adds	r7, #32
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40010c00 	.word	0x40010c00

080028c4 <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	hmotor1.counter = &htim2;
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <HUAN_MOTOR1_Init+0x48>)
 80028ca:	4a11      	ldr	r2, [pc, #68]	; (8002910 <HUAN_MOTOR1_Init+0x4c>)
 80028cc:	601a      	str	r2, [r3, #0]
	hmotor1.dt = 0.05;
 80028ce:	4b0f      	ldr	r3, [pc, #60]	; (800290c <HUAN_MOTOR1_Init+0x48>)
 80028d0:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HUAN_MOTOR1_Init+0x50>)
 80028d2:	621a      	str	r2, [r3, #32]
	hmotor1.posTimer = &htim1;
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <HUAN_MOTOR1_Init+0x48>)
 80028d6:	4a10      	ldr	r2, [pc, #64]	; (8002918 <HUAN_MOTOR1_Init+0x54>)
 80028d8:	605a      	str	r2, [r3, #4]
	hmotor1.pos_channel = TIM_CHANNEL_4;
 80028da:	4b0c      	ldr	r3, [pc, #48]	; (800290c <HUAN_MOTOR1_Init+0x48>)
 80028dc:	220c      	movs	r2, #12
 80028de:	60da      	str	r2, [r3, #12]
	hmotor1.negTimer = &htim1;
 80028e0:	4b0a      	ldr	r3, [pc, #40]	; (800290c <HUAN_MOTOR1_Init+0x48>)
 80028e2:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <HUAN_MOTOR1_Init+0x54>)
 80028e4:	609a      	str	r2, [r3, #8]
	hmotor1.neg_channel = TIM_CHANNEL_3;
 80028e6:	4b09      	ldr	r3, [pc, #36]	; (800290c <HUAN_MOTOR1_Init+0x48>)
 80028e8:	2208      	movs	r2, #8
 80028ea:	611a      	str	r2, [r3, #16]
	hmotor1.kp = 0.00005;
 80028ec:	4b07      	ldr	r3, [pc, #28]	; (800290c <HUAN_MOTOR1_Init+0x48>)
 80028ee:	4a0b      	ldr	r2, [pc, #44]	; (800291c <HUAN_MOTOR1_Init+0x58>)
 80028f0:	615a      	str	r2, [r3, #20]
	hmotor1.ki = 0.0001;
 80028f2:	4b06      	ldr	r3, [pc, #24]	; (800290c <HUAN_MOTOR1_Init+0x48>)
 80028f4:	4a0a      	ldr	r2, [pc, #40]	; (8002920 <HUAN_MOTOR1_Init+0x5c>)
 80028f6:	619a      	str	r2, [r3, #24]
	hmotor1.kd = 0.0000;
 80028f8:	4b04      	ldr	r3, [pc, #16]	; (800290c <HUAN_MOTOR1_Init+0x48>)
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&hmotor1);
 8002900:	4802      	ldr	r0, [pc, #8]	; (800290c <HUAN_MOTOR1_Init+0x48>)
 8002902:	f7fe fe71 	bl	80015e8 <huansic_motor_init>
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2000098c 	.word	0x2000098c
 8002910:	200006cc 	.word	0x200006cc
 8002914:	3d4ccccd 	.word	0x3d4ccccd
 8002918:	20000684 	.word	0x20000684
 800291c:	3851b717 	.word	0x3851b717
 8002920:	38d1b717 	.word	0x38d1b717

08002924 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
	hmotor2.counter = &htim4;
 8002928:	4b10      	ldr	r3, [pc, #64]	; (800296c <HUAN_MOTOR2_Init+0x48>)
 800292a:	4a11      	ldr	r2, [pc, #68]	; (8002970 <HUAN_MOTOR2_Init+0x4c>)
 800292c:	601a      	str	r2, [r3, #0]
	hmotor2.dt = 0.05;
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HUAN_MOTOR2_Init+0x48>)
 8002930:	4a10      	ldr	r2, [pc, #64]	; (8002974 <HUAN_MOTOR2_Init+0x50>)
 8002932:	621a      	str	r2, [r3, #32]
	hmotor2.posTimer = &htim1;
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <HUAN_MOTOR2_Init+0x48>)
 8002936:	4a10      	ldr	r2, [pc, #64]	; (8002978 <HUAN_MOTOR2_Init+0x54>)
 8002938:	605a      	str	r2, [r3, #4]
	hmotor2.pos_channel = TIM_CHANNEL_2;
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HUAN_MOTOR2_Init+0x48>)
 800293c:	2204      	movs	r2, #4
 800293e:	60da      	str	r2, [r3, #12]
	hmotor2.negTimer = &htim1;
 8002940:	4b0a      	ldr	r3, [pc, #40]	; (800296c <HUAN_MOTOR2_Init+0x48>)
 8002942:	4a0d      	ldr	r2, [pc, #52]	; (8002978 <HUAN_MOTOR2_Init+0x54>)
 8002944:	609a      	str	r2, [r3, #8]
	hmotor2.neg_channel = TIM_CHANNEL_1;
 8002946:	4b09      	ldr	r3, [pc, #36]	; (800296c <HUAN_MOTOR2_Init+0x48>)
 8002948:	2200      	movs	r2, #0
 800294a:	611a      	str	r2, [r3, #16]
	hmotor2.kp = 0.00005;
 800294c:	4b07      	ldr	r3, [pc, #28]	; (800296c <HUAN_MOTOR2_Init+0x48>)
 800294e:	4a0b      	ldr	r2, [pc, #44]	; (800297c <HUAN_MOTOR2_Init+0x58>)
 8002950:	615a      	str	r2, [r3, #20]
	hmotor2.ki = 0.0001;
 8002952:	4b06      	ldr	r3, [pc, #24]	; (800296c <HUAN_MOTOR2_Init+0x48>)
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <HUAN_MOTOR2_Init+0x5c>)
 8002956:	619a      	str	r2, [r3, #24]
	hmotor2.kd = 0.0000;
 8002958:	4b04      	ldr	r3, [pc, #16]	; (800296c <HUAN_MOTOR2_Init+0x48>)
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&hmotor2);
 8002960:	4802      	ldr	r0, [pc, #8]	; (800296c <HUAN_MOTOR2_Init+0x48>)
 8002962:	f7fe fe41 	bl	80015e8 <huansic_motor_init>
}
 8002966:	bf00      	nop
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200009c8 	.word	0x200009c8
 8002970:	2000075c 	.word	0x2000075c
 8002974:	3d4ccccd 	.word	0x3d4ccccd
 8002978:	20000684 	.word	0x20000684
 800297c:	3851b717 	.word	0x3851b717
 8002980:	38d1b717 	.word	0x38d1b717

08002984 <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
	hmotor3.counter = &htim3;
 8002988:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HUAN_MOTOR3_Init+0x48>)
 800298a:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <HUAN_MOTOR3_Init+0x4c>)
 800298c:	601a      	str	r2, [r3, #0]
	hmotor3.dt = 0.05;
 800298e:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HUAN_MOTOR3_Init+0x48>)
 8002990:	4a10      	ldr	r2, [pc, #64]	; (80029d4 <HUAN_MOTOR3_Init+0x50>)
 8002992:	621a      	str	r2, [r3, #32]
	hmotor3.posTimer = &htim8;
 8002994:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HUAN_MOTOR3_Init+0x48>)
 8002996:	4a10      	ldr	r2, [pc, #64]	; (80029d8 <HUAN_MOTOR3_Init+0x54>)
 8002998:	605a      	str	r2, [r3, #4]
	hmotor3.pos_channel = TIM_CHANNEL_4;
 800299a:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <HUAN_MOTOR3_Init+0x48>)
 800299c:	220c      	movs	r2, #12
 800299e:	60da      	str	r2, [r3, #12]
	hmotor3.negTimer = &htim8;
 80029a0:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <HUAN_MOTOR3_Init+0x48>)
 80029a2:	4a0d      	ldr	r2, [pc, #52]	; (80029d8 <HUAN_MOTOR3_Init+0x54>)
 80029a4:	609a      	str	r2, [r3, #8]
	hmotor3.neg_channel = TIM_CHANNEL_3;
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HUAN_MOTOR3_Init+0x48>)
 80029a8:	2208      	movs	r2, #8
 80029aa:	611a      	str	r2, [r3, #16]
	hmotor3.kp = 0.00005;
 80029ac:	4b07      	ldr	r3, [pc, #28]	; (80029cc <HUAN_MOTOR3_Init+0x48>)
 80029ae:	4a0b      	ldr	r2, [pc, #44]	; (80029dc <HUAN_MOTOR3_Init+0x58>)
 80029b0:	615a      	str	r2, [r3, #20]
	hmotor3.ki = 0.0001;
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HUAN_MOTOR3_Init+0x48>)
 80029b4:	4a0a      	ldr	r2, [pc, #40]	; (80029e0 <HUAN_MOTOR3_Init+0x5c>)
 80029b6:	619a      	str	r2, [r3, #24]
	hmotor3.kd = 0.0000;
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <HUAN_MOTOR3_Init+0x48>)
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&hmotor3);
 80029c0:	4802      	ldr	r0, [pc, #8]	; (80029cc <HUAN_MOTOR3_Init+0x48>)
 80029c2:	f7fe fe11 	bl	80015e8 <huansic_motor_init>
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000a04 	.word	0x20000a04
 80029d0:	20000714 	.word	0x20000714
 80029d4:	3d4ccccd 	.word	0x3d4ccccd
 80029d8:	20000834 	.word	0x20000834
 80029dc:	3851b717 	.word	0x3851b717
 80029e0:	38d1b717 	.word	0x38d1b717

080029e4 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	hmotor4.counter = &htim5;
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <HUAN_MOTOR4_Init+0x48>)
 80029ea:	4a11      	ldr	r2, [pc, #68]	; (8002a30 <HUAN_MOTOR4_Init+0x4c>)
 80029ec:	601a      	str	r2, [r3, #0]
	hmotor4.dt = 0.05;
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <HUAN_MOTOR4_Init+0x48>)
 80029f0:	4a10      	ldr	r2, [pc, #64]	; (8002a34 <HUAN_MOTOR4_Init+0x50>)
 80029f2:	621a      	str	r2, [r3, #32]
	hmotor4.posTimer = &htim8;
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HUAN_MOTOR4_Init+0x48>)
 80029f6:	4a10      	ldr	r2, [pc, #64]	; (8002a38 <HUAN_MOTOR4_Init+0x54>)
 80029f8:	605a      	str	r2, [r3, #4]
	hmotor4.pos_channel = TIM_CHANNEL_2;
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <HUAN_MOTOR4_Init+0x48>)
 80029fc:	2204      	movs	r2, #4
 80029fe:	60da      	str	r2, [r3, #12]
	hmotor4.negTimer = &htim8;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HUAN_MOTOR4_Init+0x48>)
 8002a02:	4a0d      	ldr	r2, [pc, #52]	; (8002a38 <HUAN_MOTOR4_Init+0x54>)
 8002a04:	609a      	str	r2, [r3, #8]
	hmotor4.neg_channel = TIM_CHANNEL_1;
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <HUAN_MOTOR4_Init+0x48>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	611a      	str	r2, [r3, #16]
	hmotor4.kp = 0.00005;
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <HUAN_MOTOR4_Init+0x48>)
 8002a0e:	4a0b      	ldr	r2, [pc, #44]	; (8002a3c <HUAN_MOTOR4_Init+0x58>)
 8002a10:	615a      	str	r2, [r3, #20]
	hmotor4.ki = 0.0001;
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HUAN_MOTOR4_Init+0x48>)
 8002a14:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <HUAN_MOTOR4_Init+0x5c>)
 8002a16:	619a      	str	r2, [r3, #24]
	hmotor4.kd = 0.0000;
 8002a18:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <HUAN_MOTOR4_Init+0x48>)
 8002a1a:	f04f 0200 	mov.w	r2, #0
 8002a1e:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&hmotor4);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <HUAN_MOTOR4_Init+0x48>)
 8002a22:	f7fe fde1 	bl	80015e8 <huansic_motor_init>
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000a40 	.word	0x20000a40
 8002a30:	200007a4 	.word	0x200007a4
 8002a34:	3d4ccccd 	.word	0x3d4ccccd
 8002a38:	20000834 	.word	0x20000834
 8002a3c:	3851b717 	.word	0x3851b717
 8002a40:	38d1b717 	.word	0x38d1b717

08002a44 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
	himu.uartPort = &huart3;
 8002a48:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <HUAN_IMU_Init+0x14>)
 8002a4a:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <HUAN_IMU_Init+0x18>)
 8002a4c:	601a      	str	r2, [r3, #0]
	huansic_jy62_init(&himu);
 8002a4e:	4802      	ldr	r0, [pc, #8]	; (8002a58 <HUAN_IMU_Init+0x14>)
 8002a50:	f7fe fafc 	bl	800104c <huansic_jy62_init>
}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000a7c 	.word	0x20000a7c
 8002a5c:	200008c0 	.word	0x200008c0

08002a60 <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	hxb.uartPort = &huart2;
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <HUAN_ZIGBEE_Init+0x14>)
 8002a66:	4a04      	ldr	r2, [pc, #16]	; (8002a78 <HUAN_ZIGBEE_Init+0x18>)
 8002a68:	601a      	str	r2, [r3, #0]
	huansic_xb_init(&hxb);
 8002a6a:	4802      	ldr	r0, [pc, #8]	; (8002a74 <HUAN_ZIGBEE_Init+0x14>)
 8002a6c:	f7fe ffa0 	bl	80019b0 <huansic_xb_init>
}
 8002a70:	bf00      	nop
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000ab4 	.word	0x20000ab4
 8002a78:	2000087c 	.word	0x2000087c

08002a7c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a80:	b672      	cpsid	i
}
 8002a82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002a84:	e7fe      	b.n	8002a84 <Error_Handler+0x8>
	...

08002a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a8e:	4b15      	ldr	r3, [pc, #84]	; (8002ae4 <HAL_MspInit+0x5c>)
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <HAL_MspInit+0x5c>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6193      	str	r3, [r2, #24]
 8002a9a:	4b12      	ldr	r3, [pc, #72]	; (8002ae4 <HAL_MspInit+0x5c>)
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	4b0f      	ldr	r3, [pc, #60]	; (8002ae4 <HAL_MspInit+0x5c>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ae4 <HAL_MspInit+0x5c>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	61d3      	str	r3, [r2, #28]
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <HAL_MspInit+0x5c>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_MspInit+0x60>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <HAL_MspInit+0x60>)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bc80      	pop	{r7}
 8002ae2:	4770      	bx	lr
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40010000 	.word	0x40010000

08002aec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	; 0x28
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	609a      	str	r2, [r3, #8]
 8002b00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <HAL_I2C_MspInit+0x90>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d132      	bne.n	8002b72 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0c:	4b1c      	ldr	r3, [pc, #112]	; (8002b80 <HAL_I2C_MspInit+0x94>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_I2C_MspInit+0x94>)
 8002b12:	f043 0308 	orr.w	r3, r3, #8
 8002b16:	6193      	str	r3, [r2, #24]
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_I2C_MspInit+0x94>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2a:	2312      	movs	r3, #18
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b32:	f107 0314 	add.w	r3, r7, #20
 8002b36:	4619      	mov	r1, r3
 8002b38:	4812      	ldr	r0, [pc, #72]	; (8002b84 <HAL_I2C_MspInit+0x98>)
 8002b3a:	f001 f8b3 	bl	8003ca4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <HAL_I2C_MspInit+0x9c>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	f043 0302 	orr.w	r3, r3, #2
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
 8002b54:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <HAL_I2C_MspInit+0x9c>)
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_I2C_MspInit+0x94>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <HAL_I2C_MspInit+0x94>)
 8002b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b64:	61d3      	str	r3, [r2, #28]
 8002b66:	4b06      	ldr	r3, [pc, #24]	; (8002b80 <HAL_I2C_MspInit+0x94>)
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b72:	bf00      	nop
 8002b74:	3728      	adds	r7, #40	; 0x28
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40005400 	.word	0x40005400
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40010c00 	.word	0x40010c00
 8002b88:	40010000 	.word	0x40010000

08002b8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a1f      	ldr	r2, [pc, #124]	; (8002c18 <HAL_TIM_Base_MspInit+0x8c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b9e:	4b1f      	ldr	r3, [pc, #124]	; (8002c1c <HAL_TIM_Base_MspInit+0x90>)
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	4a1e      	ldr	r2, [pc, #120]	; (8002c1c <HAL_TIM_Base_MspInit+0x90>)
 8002ba4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ba8:	6193      	str	r3, [r2, #24]
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <HAL_TIM_Base_MspInit+0x90>)
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb2:	617b      	str	r3, [r7, #20]
 8002bb4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002bb6:	e02a      	b.n	8002c0e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a18      	ldr	r2, [pc, #96]	; (8002c20 <HAL_TIM_Base_MspInit+0x94>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d114      	bne.n	8002bec <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002bc2:	4b16      	ldr	r3, [pc, #88]	; (8002c1c <HAL_TIM_Base_MspInit+0x90>)
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	4a15      	ldr	r2, [pc, #84]	; (8002c1c <HAL_TIM_Base_MspInit+0x90>)
 8002bc8:	f043 0310 	orr.w	r3, r3, #16
 8002bcc:	61d3      	str	r3, [r2, #28]
 8002bce:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <HAL_TIM_Base_MspInit+0x90>)
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	f003 0310 	and.w	r3, r3, #16
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2101      	movs	r1, #1
 8002bde:	2036      	movs	r0, #54	; 0x36
 8002be0:	f000 fce9 	bl	80035b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002be4:	2036      	movs	r0, #54	; 0x36
 8002be6:	f000 fd02 	bl	80035ee <HAL_NVIC_EnableIRQ>
}
 8002bea:	e010      	b.n	8002c0e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0c      	ldr	r2, [pc, #48]	; (8002c24 <HAL_TIM_Base_MspInit+0x98>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d10b      	bne.n	8002c0e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_TIM_Base_MspInit+0x90>)
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	4a08      	ldr	r2, [pc, #32]	; (8002c1c <HAL_TIM_Base_MspInit+0x90>)
 8002bfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002c00:	6193      	str	r3, [r2, #24]
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_TIM_Base_MspInit+0x90>)
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
}
 8002c0e:	bf00      	nop
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40012c00 	.word	0x40012c00
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40001000 	.word	0x40001000
 8002c24:	40013400 	.word	0x40013400

08002c28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b090      	sub	sp, #64	; 0x40
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	605a      	str	r2, [r3, #4]
 8002c3a:	609a      	str	r2, [r3, #8]
 8002c3c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c46:	d14f      	bne.n	8002ce8 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c48:	4b68      	ldr	r3, [pc, #416]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002c4a:	69db      	ldr	r3, [r3, #28]
 8002c4c:	4a67      	ldr	r2, [pc, #412]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	61d3      	str	r3, [r2, #28]
 8002c54:	4b65      	ldr	r3, [pc, #404]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c60:	4b62      	ldr	r3, [pc, #392]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	4a61      	ldr	r2, [pc, #388]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002c66:	f043 0304 	orr.w	r3, r3, #4
 8002c6a:	6193      	str	r3, [r2, #24]
 8002c6c:	4b5f      	ldr	r3, [pc, #380]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	627b      	str	r3, [r7, #36]	; 0x24
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c78:	4b5c      	ldr	r3, [pc, #368]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002c7a:	699b      	ldr	r3, [r3, #24]
 8002c7c:	4a5b      	ldr	r2, [pc, #364]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002c7e:	f043 0308 	orr.w	r3, r3, #8
 8002c82:	6193      	str	r3, [r2, #24]
 8002c84:	4b59      	ldr	r3, [pc, #356]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	623b      	str	r3, [r7, #32]
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c96:	2300      	movs	r3, #0
 8002c98:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4852      	ldr	r0, [pc, #328]	; (8002df0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002ca6:	f000 fffd 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002caa:	2308      	movs	r3, #8
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002cba:	4619      	mov	r1, r3
 8002cbc:	484d      	ldr	r0, [pc, #308]	; (8002df4 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002cbe:	f000 fff1 	bl	8003ca4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8002cc2:	4b4d      	ldr	r3, [pc, #308]	; (8002df8 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cd2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ce0:	4a45      	ldr	r2, [pc, #276]	; (8002df8 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002ce6:	e07c      	b.n	8002de2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a43      	ldr	r2, [pc, #268]	; (8002dfc <HAL_TIM_Encoder_MspInit+0x1d4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d124      	bne.n	8002d3c <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002cf2:	4b3e      	ldr	r3, [pc, #248]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	4a3d      	ldr	r2, [pc, #244]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002cf8:	f043 0302 	orr.w	r3, r3, #2
 8002cfc:	61d3      	str	r3, [r2, #28]
 8002cfe:	4b3b      	ldr	r3, [pc, #236]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	61fb      	str	r3, [r7, #28]
 8002d08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0a:	4b38      	ldr	r3, [pc, #224]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	4a37      	ldr	r2, [pc, #220]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002d10:	f043 0304 	orr.w	r3, r3, #4
 8002d14:	6193      	str	r3, [r2, #24]
 8002d16:	4b35      	ldr	r3, [pc, #212]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f003 0304 	and.w	r3, r3, #4
 8002d1e:	61bb      	str	r3, [r7, #24]
 8002d20:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d22:	23c0      	movs	r3, #192	; 0xc0
 8002d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d26:	2300      	movs	r3, #0
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d32:	4619      	mov	r1, r3
 8002d34:	482e      	ldr	r0, [pc, #184]	; (8002df0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002d36:	f000 ffb5 	bl	8003ca4 <HAL_GPIO_Init>
}
 8002d3a:	e052      	b.n	8002de2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a2f      	ldr	r2, [pc, #188]	; (8002e00 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d124      	bne.n	8002d90 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002d46:	4b29      	ldr	r3, [pc, #164]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	4a28      	ldr	r2, [pc, #160]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002d4c:	f043 0304 	orr.w	r3, r3, #4
 8002d50:	61d3      	str	r3, [r2, #28]
 8002d52:	4b26      	ldr	r3, [pc, #152]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002d54:	69db      	ldr	r3, [r3, #28]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5e:	4b23      	ldr	r3, [pc, #140]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002d60:	699b      	ldr	r3, [r3, #24]
 8002d62:	4a22      	ldr	r2, [pc, #136]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002d64:	f043 0308 	orr.w	r3, r3, #8
 8002d68:	6193      	str	r3, [r2, #24]
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	613b      	str	r3, [r7, #16]
 8002d74:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d76:	23c0      	movs	r3, #192	; 0xc0
 8002d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002d86:	4619      	mov	r1, r3
 8002d88:	481a      	ldr	r0, [pc, #104]	; (8002df4 <HAL_TIM_Encoder_MspInit+0x1cc>)
 8002d8a:	f000 ff8b 	bl	8003ca4 <HAL_GPIO_Init>
}
 8002d8e:	e028      	b.n	8002de2 <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a1b      	ldr	r2, [pc, #108]	; (8002e04 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d123      	bne.n	8002de2 <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d9a:	4b14      	ldr	r3, [pc, #80]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	4a13      	ldr	r2, [pc, #76]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002da0:	f043 0308 	orr.w	r3, r3, #8
 8002da4:	61d3      	str	r3, [r2, #28]
 8002da6:	4b11      	ldr	r3, [pc, #68]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db2:	4b0e      	ldr	r3, [pc, #56]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	4a0d      	ldr	r2, [pc, #52]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002db8:	f043 0304 	orr.w	r3, r3, #4
 8002dbc:	6193      	str	r3, [r2, #24]
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	; (8002dec <HAL_TIM_Encoder_MspInit+0x1c4>)
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	f003 0304 	and.w	r3, r3, #4
 8002dc6:	60bb      	str	r3, [r7, #8]
 8002dc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4804      	ldr	r0, [pc, #16]	; (8002df0 <HAL_TIM_Encoder_MspInit+0x1c8>)
 8002dde:	f000 ff61 	bl	8003ca4 <HAL_GPIO_Init>
}
 8002de2:	bf00      	nop
 8002de4:	3740      	adds	r7, #64	; 0x40
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40010800 	.word	0x40010800
 8002df4:	40010c00 	.word	0x40010c00
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40000400 	.word	0x40000400
 8002e00:	40000800 	.word	0x40000800
 8002e04:	40000c00 	.word	0x40000c00

08002e08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e10:	f107 0310 	add.w	r3, r7, #16
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	605a      	str	r2, [r3, #4]
 8002e1a:	609a      	str	r2, [r3, #8]
 8002e1c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a1f      	ldr	r2, [pc, #124]	; (8002ea0 <HAL_TIM_MspPostInit+0x98>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d119      	bne.n	8002e5c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e28:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <HAL_TIM_MspPostInit+0x9c>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ea4 <HAL_TIM_MspPostInit+0x9c>)
 8002e2e:	f043 0304 	orr.w	r3, r3, #4
 8002e32:	6193      	str	r3, [r2, #24]
 8002e34:	4b1b      	ldr	r3, [pc, #108]	; (8002ea4 <HAL_TIM_MspPostInit+0x9c>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0304 	and.w	r3, r3, #4
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002e40:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002e44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e4e:	f107 0310 	add.w	r3, r7, #16
 8002e52:	4619      	mov	r1, r3
 8002e54:	4814      	ldr	r0, [pc, #80]	; (8002ea8 <HAL_TIM_MspPostInit+0xa0>)
 8002e56:	f000 ff25 	bl	8003ca4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002e5a:	e01d      	b.n	8002e98 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a12      	ldr	r2, [pc, #72]	; (8002eac <HAL_TIM_MspPostInit+0xa4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d118      	bne.n	8002e98 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e66:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <HAL_TIM_MspPostInit+0x9c>)
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	4a0e      	ldr	r2, [pc, #56]	; (8002ea4 <HAL_TIM_MspPostInit+0x9c>)
 8002e6c:	f043 0310 	orr.w	r3, r3, #16
 8002e70:	6193      	str	r3, [r2, #24]
 8002e72:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <HAL_TIM_MspPostInit+0x9c>)
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	f003 0310 	and.w	r3, r3, #16
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002e7e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002e82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e84:	2302      	movs	r3, #2
 8002e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2302      	movs	r3, #2
 8002e8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e8c:	f107 0310 	add.w	r3, r7, #16
 8002e90:	4619      	mov	r1, r3
 8002e92:	4807      	ldr	r0, [pc, #28]	; (8002eb0 <HAL_TIM_MspPostInit+0xa8>)
 8002e94:	f000 ff06 	bl	8003ca4 <HAL_GPIO_Init>
}
 8002e98:	bf00      	nop
 8002e9a:	3720      	adds	r7, #32
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40012c00 	.word	0x40012c00
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40010800 	.word	0x40010800
 8002eac:	40013400 	.word	0x40013400
 8002eb0:	40011000 	.word	0x40011000

08002eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08c      	sub	sp, #48	; 0x30
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a66      	ldr	r2, [pc, #408]	; (8003068 <HAL_UART_MspInit+0x1b4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d156      	bne.n	8002f82 <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ed4:	4b65      	ldr	r3, [pc, #404]	; (800306c <HAL_UART_MspInit+0x1b8>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	4a64      	ldr	r2, [pc, #400]	; (800306c <HAL_UART_MspInit+0x1b8>)
 8002eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ede:	61d3      	str	r3, [r2, #28]
 8002ee0:	4b62      	ldr	r3, [pc, #392]	; (800306c <HAL_UART_MspInit+0x1b8>)
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eec:	4b5f      	ldr	r3, [pc, #380]	; (800306c <HAL_UART_MspInit+0x1b8>)
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	4a5e      	ldr	r2, [pc, #376]	; (800306c <HAL_UART_MspInit+0x1b8>)
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	6193      	str	r3, [r2, #24]
 8002ef8:	4b5c      	ldr	r3, [pc, #368]	; (800306c <HAL_UART_MspInit+0x1b8>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	617b      	str	r3, [r7, #20]
 8002f02:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8002f04:	2304      	movs	r3, #4
 8002f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 8002f10:	f107 031c 	add.w	r3, r7, #28
 8002f14:	4619      	mov	r1, r3
 8002f16:	4856      	ldr	r0, [pc, #344]	; (8003070 <HAL_UART_MspInit+0x1bc>)
 8002f18:	f000 fec4 	bl	8003ca4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f20:	2300      	movs	r3, #0
 8002f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8002f28:	f107 031c 	add.w	r3, r7, #28
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4850      	ldr	r0, [pc, #320]	; (8003070 <HAL_UART_MspInit+0x1bc>)
 8002f30:	f000 feb8 	bl	8003ca4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002f34:	4b4f      	ldr	r3, [pc, #316]	; (8003074 <HAL_UART_MspInit+0x1c0>)
 8002f36:	4a50      	ldr	r2, [pc, #320]	; (8003078 <HAL_UART_MspInit+0x1c4>)
 8002f38:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f3a:	4b4e      	ldr	r3, [pc, #312]	; (8003074 <HAL_UART_MspInit+0x1c0>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f40:	4b4c      	ldr	r3, [pc, #304]	; (8003074 <HAL_UART_MspInit+0x1c0>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f46:	4b4b      	ldr	r3, [pc, #300]	; (8003074 <HAL_UART_MspInit+0x1c0>)
 8002f48:	2280      	movs	r2, #128	; 0x80
 8002f4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f4c:	4b49      	ldr	r3, [pc, #292]	; (8003074 <HAL_UART_MspInit+0x1c0>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f52:	4b48      	ldr	r3, [pc, #288]	; (8003074 <HAL_UART_MspInit+0x1c0>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002f58:	4b46      	ldr	r3, [pc, #280]	; (8003074 <HAL_UART_MspInit+0x1c0>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f5e:	4b45      	ldr	r3, [pc, #276]	; (8003074 <HAL_UART_MspInit+0x1c0>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002f64:	4843      	ldr	r0, [pc, #268]	; (8003074 <HAL_UART_MspInit+0x1c0>)
 8002f66:	f000 fb5d 	bl	8003624 <HAL_DMA_Init>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002f70:	f7ff fd84 	bl	8002a7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a3f      	ldr	r2, [pc, #252]	; (8003074 <HAL_UART_MspInit+0x1c0>)
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38
 8002f7a:	4a3e      	ldr	r2, [pc, #248]	; (8003074 <HAL_UART_MspInit+0x1c0>)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002f80:	e06e      	b.n	8003060 <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a3d      	ldr	r2, [pc, #244]	; (800307c <HAL_UART_MspInit+0x1c8>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d169      	bne.n	8003060 <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f8c:	4b37      	ldr	r3, [pc, #220]	; (800306c <HAL_UART_MspInit+0x1b8>)
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	4a36      	ldr	r2, [pc, #216]	; (800306c <HAL_UART_MspInit+0x1b8>)
 8002f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f96:	61d3      	str	r3, [r2, #28]
 8002f98:	4b34      	ldr	r3, [pc, #208]	; (800306c <HAL_UART_MspInit+0x1b8>)
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fa4:	4b31      	ldr	r3, [pc, #196]	; (800306c <HAL_UART_MspInit+0x1b8>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	4a30      	ldr	r2, [pc, #192]	; (800306c <HAL_UART_MspInit+0x1b8>)
 8002faa:	f043 0310 	orr.w	r3, r3, #16
 8002fae:	6193      	str	r3, [r2, #24]
 8002fb0:	4b2e      	ldr	r3, [pc, #184]	; (800306c <HAL_UART_MspInit+0x1b8>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8002fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8002fca:	f107 031c 	add.w	r3, r7, #28
 8002fce:	4619      	mov	r1, r3
 8002fd0:	482b      	ldr	r0, [pc, #172]	; (8003080 <HAL_UART_MspInit+0x1cc>)
 8002fd2:	f000 fe67 	bl	8003ca4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 8002fd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8002fe4:	f107 031c 	add.w	r3, r7, #28
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4825      	ldr	r0, [pc, #148]	; (8003080 <HAL_UART_MspInit+0x1cc>)
 8002fec:	f000 fe5a 	bl	8003ca4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002ff0:	4b24      	ldr	r3, [pc, #144]	; (8003084 <HAL_UART_MspInit+0x1d0>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	f043 0310 	orr.w	r3, r3, #16
 800300c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800300e:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <HAL_UART_MspInit+0x1d0>)
 8003010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003012:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003014:	4b1c      	ldr	r3, [pc, #112]	; (8003088 <HAL_UART_MspInit+0x1d4>)
 8003016:	4a1d      	ldr	r2, [pc, #116]	; (800308c <HAL_UART_MspInit+0x1d8>)
 8003018:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <HAL_UART_MspInit+0x1d4>)
 800301c:	2200      	movs	r2, #0
 800301e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_UART_MspInit+0x1d4>)
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003026:	4b18      	ldr	r3, [pc, #96]	; (8003088 <HAL_UART_MspInit+0x1d4>)
 8003028:	2280      	movs	r2, #128	; 0x80
 800302a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800302c:	4b16      	ldr	r3, [pc, #88]	; (8003088 <HAL_UART_MspInit+0x1d4>)
 800302e:	2200      	movs	r2, #0
 8003030:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003032:	4b15      	ldr	r3, [pc, #84]	; (8003088 <HAL_UART_MspInit+0x1d4>)
 8003034:	2200      	movs	r2, #0
 8003036:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003038:	4b13      	ldr	r3, [pc, #76]	; (8003088 <HAL_UART_MspInit+0x1d4>)
 800303a:	2200      	movs	r2, #0
 800303c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800303e:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_UART_MspInit+0x1d4>)
 8003040:	2200      	movs	r2, #0
 8003042:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003044:	4810      	ldr	r0, [pc, #64]	; (8003088 <HAL_UART_MspInit+0x1d4>)
 8003046:	f000 faed 	bl	8003624 <HAL_DMA_Init>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8003050:	f7ff fd14 	bl	8002a7c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <HAL_UART_MspInit+0x1d4>)
 8003058:	639a      	str	r2, [r3, #56]	; 0x38
 800305a:	4a0b      	ldr	r2, [pc, #44]	; (8003088 <HAL_UART_MspInit+0x1d4>)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8003060:	bf00      	nop
 8003062:	3730      	adds	r7, #48	; 0x30
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}
 8003068:	40004400 	.word	0x40004400
 800306c:	40021000 	.word	0x40021000
 8003070:	40010800 	.word	0x40010800
 8003074:	20000904 	.word	0x20000904
 8003078:	4002006c 	.word	0x4002006c
 800307c:	40004800 	.word	0x40004800
 8003080:	40011000 	.word	0x40011000
 8003084:	40010000 	.word	0x40010000
 8003088:	20000948 	.word	0x20000948
 800308c:	40020030 	.word	0x40020030

08003090 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003094:	e7fe      	b.n	8003094 <NMI_Handler+0x4>

08003096 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 800309a:	e7fe      	b.n	800309a <HardFault_Handler+0x4>

0800309c <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 800309c:	b480      	push	{r7}
 800309e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 80030a0:	e7fe      	b.n	80030a0 <MemManage_Handler+0x4>

080030a2 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 80030a6:	e7fe      	b.n	80030a6 <BusFault_Handler+0x4>

080030a8 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 80030ac:	e7fe      	b.n	80030ac <UsageFault_Handler+0x4>

080030ae <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bc80      	pop	{r7}
 80030b8:	4770      	bx	lr

080030ba <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80030d6:	f000 f97b 	bl	80033d0 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <DMA1_Channel3_IRQHandler>:

/**
 * @brief This function handles DMA1 channel3 global interrupt.
 */
void DMA1_Channel3_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	huansic_jy62_decodePackage(&himu);
 80030e4:	4805      	ldr	r0, [pc, #20]	; (80030fc <DMA1_Channel3_IRQHandler+0x1c>)
 80030e6:	f7fe f80b 	bl	8001100 <huansic_jy62_decodePackage>
	/* USER CODE END DMA1_Channel3_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80030ea:	4805      	ldr	r0, [pc, #20]	; (8003100 <DMA1_Channel3_IRQHandler+0x20>)
 80030ec:	f000 fb70 	bl	80037d0 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
	huansic_jy62_setDMA(&himu);
 80030f0:	4802      	ldr	r0, [pc, #8]	; (80030fc <DMA1_Channel3_IRQHandler+0x1c>)
 80030f2:	f7fe fa0f 	bl	8001514 <huansic_jy62_setDMA>
	/* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80030f6:	bf00      	nop
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	20000a7c 	.word	0x20000a7c
 8003100:	20000948 	.word	0x20000948

08003104 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if (hxb.nextPackageID == 0x00)
 8003108:	4b07      	ldr	r3, [pc, #28]	; (8003128 <DMA1_Channel6_IRQHandler+0x24>)
 800310a:	7a1b      	ldrb	r3, [r3, #8]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <DMA1_Channel6_IRQHandler+0x14>
		huansic_xb_decodeHeader(&hxb);
 8003110:	4805      	ldr	r0, [pc, #20]	; (8003128 <DMA1_Channel6_IRQHandler+0x24>)
 8003112:	f7fe fc63 	bl	80019dc <huansic_xb_decodeHeader>
 8003116:	e002      	b.n	800311e <DMA1_Channel6_IRQHandler+0x1a>
	else
		huansic_xb_decodeBody(&hxb);
 8003118:	4803      	ldr	r0, [pc, #12]	; (8003128 <DMA1_Channel6_IRQHandler+0x24>)
 800311a:	f7fe fc9d 	bl	8001a58 <huansic_xb_decodeBody>
	/* USER CODE END DMA1_Channel6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800311e:	4803      	ldr	r0, [pc, #12]	; (800312c <DMA1_Channel6_IRQHandler+0x28>)
 8003120:	f000 fb56 	bl	80037d0 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003124:	bf00      	nop
 8003126:	bd80      	pop	{r7, pc}
 8003128:	20000ab4 	.word	0x20000ab4
 800312c:	20000904 	.word	0x20000904

08003130 <TIM6_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt.
 */
void TIM6_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&hmotor1);
 8003134:	4808      	ldr	r0, [pc, #32]	; (8003158 <TIM6_IRQHandler+0x28>)
 8003136:	f7fe fb15 	bl	8001764 <huansic_motor_pid>
	huansic_motor_pid(&hmotor2);
 800313a:	4808      	ldr	r0, [pc, #32]	; (800315c <TIM6_IRQHandler+0x2c>)
 800313c:	f7fe fb12 	bl	8001764 <huansic_motor_pid>
	huansic_motor_pid(&hmotor3);
 8003140:	4807      	ldr	r0, [pc, #28]	; (8003160 <TIM6_IRQHandler+0x30>)
 8003142:	f7fe fb0f 	bl	8001764 <huansic_motor_pid>
	huansic_motor_pid(&hmotor4);
 8003146:	4807      	ldr	r0, [pc, #28]	; (8003164 <TIM6_IRQHandler+0x34>)
 8003148:	f7fe fb0c 	bl	8001764 <huansic_motor_pid>
	/* USER CODE END TIM6_IRQn 0 */
	HAL_TIM_IRQHandler(&htim6);
 800314c:	4806      	ldr	r0, [pc, #24]	; (8003168 <TIM6_IRQHandler+0x38>)
 800314e:	f001 ff47 	bl	8004fe0 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_IRQn 1 */

	/* USER CODE END TIM6_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	2000098c 	.word	0x2000098c
 800315c:	200009c8 	.word	0x200009c8
 8003160:	20000a04 	.word	0x20000a04
 8003164:	20000a40 	.word	0x20000a40
 8003168:	200007ec 	.word	0x200007ec

0800316c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
	return 1;
 8003170:	2301      	movs	r3, #1
}
 8003172:	4618      	mov	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <_kill>:

int _kill(int pid, int sig)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003184:	f003 f914 	bl	80063b0 <__errno>
 8003188:	4603      	mov	r3, r0
 800318a:	2216      	movs	r2, #22
 800318c:	601a      	str	r2, [r3, #0]
	return -1;
 800318e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <_exit>:

void _exit (int status)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80031a2:	f04f 31ff 	mov.w	r1, #4294967295
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ffe7 	bl	800317a <_kill>
	while (1) {}		/* Make sure we hang here */
 80031ac:	e7fe      	b.n	80031ac <_exit+0x12>

080031ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b086      	sub	sp, #24
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	60f8      	str	r0, [r7, #12]
 80031b6:	60b9      	str	r1, [r7, #8]
 80031b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
 80031be:	e00a      	b.n	80031d6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031c0:	f3af 8000 	nop.w
 80031c4:	4601      	mov	r1, r0
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	60ba      	str	r2, [r7, #8]
 80031cc:	b2ca      	uxtb	r2, r1
 80031ce:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	3301      	adds	r3, #1
 80031d4:	617b      	str	r3, [r7, #20]
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	429a      	cmp	r2, r3
 80031dc:	dbf0      	blt.n	80031c0 <_read+0x12>
	}

return len;
 80031de:	687b      	ldr	r3, [r7, #4]
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3718      	adds	r7, #24
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031f4:	2300      	movs	r3, #0
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	e009      	b.n	800320e <_write+0x26>
	{
		__io_putchar(*ptr++);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	60ba      	str	r2, [r7, #8]
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	3301      	adds	r3, #1
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	429a      	cmp	r2, r3
 8003214:	dbf1      	blt.n	80031fa <_write+0x12>
	}
	return len;
 8003216:	687b      	ldr	r3, [r7, #4]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}

08003220 <_close>:

int _close(int file)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
	return -1;
 8003228:	f04f 33ff 	mov.w	r3, #4294967295
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr

08003236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003246:	605a      	str	r2, [r3, #4]
	return 0;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr

08003254 <_isatty>:

int _isatty(int file)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
	return 1;
 800325c:	2301      	movs	r3, #1
}
 800325e:	4618      	mov	r0, r3
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr

08003268 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
	return 0;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr

08003280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003288:	4a14      	ldr	r2, [pc, #80]	; (80032dc <_sbrk+0x5c>)
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <_sbrk+0x60>)
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <_sbrk+0x64>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d102      	bne.n	80032a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <_sbrk+0x64>)
 800329e:	4a12      	ldr	r2, [pc, #72]	; (80032e8 <_sbrk+0x68>)
 80032a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032a2:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <_sbrk+0x64>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d207      	bcs.n	80032c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032b0:	f003 f87e 	bl	80063b0 <__errno>
 80032b4:	4603      	mov	r3, r0
 80032b6:	220c      	movs	r2, #12
 80032b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ba:	f04f 33ff 	mov.w	r3, #4294967295
 80032be:	e009      	b.n	80032d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <_sbrk+0x64>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032c6:	4b07      	ldr	r3, [pc, #28]	; (80032e4 <_sbrk+0x64>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4413      	add	r3, r2
 80032ce:	4a05      	ldr	r2, [pc, #20]	; (80032e4 <_sbrk+0x64>)
 80032d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032d2:	68fb      	ldr	r3, [r7, #12]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	2000c000 	.word	0x2000c000
 80032e0:	00000400 	.word	0x00000400
 80032e4:	20000bd0 	.word	0x20000bd0
 80032e8:	20000be8 	.word	0x20000be8

080032ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032f0:	bf00      	nop
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032f8:	480c      	ldr	r0, [pc, #48]	; (800332c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032fa:	490d      	ldr	r1, [pc, #52]	; (8003330 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003300:	e002      	b.n	8003308 <LoopCopyDataInit>

08003302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003306:	3304      	adds	r3, #4

08003308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800330c:	d3f9      	bcc.n	8003302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800330e:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003310:	4c0a      	ldr	r4, [pc, #40]	; (800333c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003314:	e001      	b.n	800331a <LoopFillZerobss>

08003316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003318:	3204      	adds	r2, #4

0800331a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800331c:	d3fb      	bcc.n	8003316 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800331e:	f7ff ffe5 	bl	80032ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003322:	f003 f85d 	bl	80063e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003326:	f7fe fe4f 	bl	8001fc8 <main>
  bx lr
 800332a:	4770      	bx	lr
  ldr r0, =_sdata
 800332c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003330:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003334:	08007594 	.word	0x08007594
  ldr r2, =_sbss
 8003338:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800333c:	20000be8 	.word	0x20000be8

08003340 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003340:	e7fe      	b.n	8003340 <ADC1_2_IRQHandler>
	...

08003344 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <HAL_Init+0x28>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a07      	ldr	r2, [pc, #28]	; (800336c <HAL_Init+0x28>)
 800334e:	f043 0310 	orr.w	r3, r3, #16
 8003352:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003354:	2003      	movs	r0, #3
 8003356:	f000 f923 	bl	80035a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800335a:	200f      	movs	r0, #15
 800335c:	f000 f808 	bl	8003370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003360:	f7ff fb92 	bl	8002a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40022000 	.word	0x40022000

08003370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003378:	4b12      	ldr	r3, [pc, #72]	; (80033c4 <HAL_InitTick+0x54>)
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	4b12      	ldr	r3, [pc, #72]	; (80033c8 <HAL_InitTick+0x58>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	4619      	mov	r1, r3
 8003382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003386:	fbb3 f3f1 	udiv	r3, r3, r1
 800338a:	fbb2 f3f3 	udiv	r3, r2, r3
 800338e:	4618      	mov	r0, r3
 8003390:	f000 f93b 	bl	800360a <HAL_SYSTICK_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e00e      	b.n	80033bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b0f      	cmp	r3, #15
 80033a2:	d80a      	bhi.n	80033ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033a4:	2200      	movs	r2, #0
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ac:	f000 f903 	bl	80035b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033b0:	4a06      	ldr	r2, [pc, #24]	; (80033cc <HAL_InitTick+0x5c>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
 80033b8:	e000      	b.n	80033bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	20000004 	.word	0x20000004
 80033c8:	2000000c 	.word	0x2000000c
 80033cc:	20000008 	.word	0x20000008

080033d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_IncTick+0x1c>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	461a      	mov	r2, r3
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <HAL_IncTick+0x20>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4413      	add	r3, r2
 80033e0:	4a03      	ldr	r2, [pc, #12]	; (80033f0 <HAL_IncTick+0x20>)
 80033e2:	6013      	str	r3, [r2, #0]
}
 80033e4:	bf00      	nop
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bc80      	pop	{r7}
 80033ea:	4770      	bx	lr
 80033ec:	2000000c 	.word	0x2000000c
 80033f0:	20000bd4 	.word	0x20000bd4

080033f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return uwTick;
 80033f8:	4b02      	ldr	r3, [pc, #8]	; (8003404 <HAL_GetTick+0x10>)
 80033fa:	681b      	ldr	r3, [r3, #0]
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr
 8003404:	20000bd4 	.word	0x20000bd4

08003408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <__NVIC_SetPriorityGrouping+0x44>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003424:	4013      	ands	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800343a:	4a04      	ldr	r2, [pc, #16]	; (800344c <__NVIC_SetPriorityGrouping+0x44>)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	60d3      	str	r3, [r2, #12]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <__NVIC_GetPriorityGrouping+0x18>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	f003 0307 	and.w	r3, r3, #7
}
 800345e:	4618      	mov	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	2b00      	cmp	r3, #0
 800347c:	db0b      	blt.n	8003496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	f003 021f 	and.w	r2, r3, #31
 8003484:	4906      	ldr	r1, [pc, #24]	; (80034a0 <__NVIC_EnableIRQ+0x34>)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2001      	movs	r0, #1
 800348e:	fa00 f202 	lsl.w	r2, r0, r2
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	e000e100 	.word	0xe000e100

080034a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	db0a      	blt.n	80034ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	490c      	ldr	r1, [pc, #48]	; (80034f0 <__NVIC_SetPriority+0x4c>)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	440b      	add	r3, r1
 80034c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034cc:	e00a      	b.n	80034e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4908      	ldr	r1, [pc, #32]	; (80034f4 <__NVIC_SetPriority+0x50>)
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	3b04      	subs	r3, #4
 80034dc:	0112      	lsls	r2, r2, #4
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	440b      	add	r3, r1
 80034e2:	761a      	strb	r2, [r3, #24]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000e100 	.word	0xe000e100
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f1c3 0307 	rsb	r3, r3, #7
 8003512:	2b04      	cmp	r3, #4
 8003514:	bf28      	it	cs
 8003516:	2304      	movcs	r3, #4
 8003518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3304      	adds	r3, #4
 800351e:	2b06      	cmp	r3, #6
 8003520:	d902      	bls.n	8003528 <NVIC_EncodePriority+0x30>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3b03      	subs	r3, #3
 8003526:	e000      	b.n	800352a <NVIC_EncodePriority+0x32>
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	f04f 32ff 	mov.w	r2, #4294967295
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	401a      	ands	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003540:	f04f 31ff 	mov.w	r1, #4294967295
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43d9      	mvns	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	4313      	orrs	r3, r2
         );
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800356c:	d301      	bcc.n	8003572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800356e:	2301      	movs	r3, #1
 8003570:	e00f      	b.n	8003592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003572:	4a0a      	ldr	r2, [pc, #40]	; (800359c <SysTick_Config+0x40>)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800357a:	210f      	movs	r1, #15
 800357c:	f04f 30ff 	mov.w	r0, #4294967295
 8003580:	f7ff ff90 	bl	80034a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <SysTick_Config+0x40>)
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800358a:	4b04      	ldr	r3, [pc, #16]	; (800359c <SysTick_Config+0x40>)
 800358c:	2207      	movs	r2, #7
 800358e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	e000e010 	.word	0xe000e010

080035a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff ff2d 	bl	8003408 <__NVIC_SetPriorityGrouping>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	4603      	mov	r3, r0
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035c8:	f7ff ff42 	bl	8003450 <__NVIC_GetPriorityGrouping>
 80035cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	6978      	ldr	r0, [r7, #20]
 80035d4:	f7ff ff90 	bl	80034f8 <NVIC_EncodePriority>
 80035d8:	4602      	mov	r2, r0
 80035da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035de:	4611      	mov	r1, r2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff ff5f 	bl	80034a4 <__NVIC_SetPriority>
}
 80035e6:	bf00      	nop
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4603      	mov	r3, r0
 80035f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff35 	bl	800346c <__NVIC_EnableIRQ>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ffa2 	bl	800355c <SysTick_Config>
 8003618:	4603      	mov	r3, r0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e059      	b.n	80036ee <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	4b2d      	ldr	r3, [pc, #180]	; (80036f8 <HAL_DMA_Init+0xd4>)
 8003642:	429a      	cmp	r2, r3
 8003644:	d80f      	bhi.n	8003666 <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <HAL_DMA_Init+0xd8>)
 800364e:	4413      	add	r3, r2
 8003650:	4a2b      	ldr	r2, [pc, #172]	; (8003700 <HAL_DMA_Init+0xdc>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	009a      	lsls	r2, r3, #2
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a28      	ldr	r2, [pc, #160]	; (8003704 <HAL_DMA_Init+0xe0>)
 8003662:	63da      	str	r2, [r3, #60]	; 0x3c
 8003664:	e00e      	b.n	8003684 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	4b26      	ldr	r3, [pc, #152]	; (8003708 <HAL_DMA_Init+0xe4>)
 800366e:	4413      	add	r3, r2
 8003670:	4a23      	ldr	r2, [pc, #140]	; (8003700 <HAL_DMA_Init+0xdc>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	009a      	lsls	r2, r3, #2
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a22      	ldr	r2, [pc, #136]	; (800370c <HAL_DMA_Init+0xe8>)
 8003682:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800369a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800369e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80036a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	40020407 	.word	0x40020407
 80036fc:	bffdfff8 	.word	0xbffdfff8
 8003700:	cccccccd 	.word	0xcccccccd
 8003704:	40020000 	.word	0x40020000
 8003708:	bffdfbf8 	.word	0xbffdfbf8
 800370c:	40020400 	.word	0x40020400

08003710 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
 800371c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800371e:	2300      	movs	r3, #0
 8003720:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_DMA_Start_IT+0x20>
 800372c:	2302      	movs	r3, #2
 800372e:	e04a      	b.n	80037c6 <HAL_DMA_Start_IT+0xb6>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800373e:	2b01      	cmp	r3, #1
 8003740:	d13a      	bne.n	80037b8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2202      	movs	r2, #2
 8003746:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 fa6e 	bl	8003c48 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 020e 	orr.w	r2, r2, #14
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	e00f      	b.n	80037a6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0204 	bic.w	r2, r2, #4
 8003794:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 020a 	orr.w	r2, r2, #10
 80037a4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	e005      	b.n	80037c4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
 80037c2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80037c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3718      	adds	r7, #24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	2204      	movs	r2, #4
 80037ee:	409a      	lsls	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 80f1 	beq.w	80039dc <HAL_DMA_IRQHandler+0x20c>
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 80eb 	beq.w	80039dc <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0320 	and.w	r3, r3, #32
 8003810:	2b00      	cmp	r3, #0
 8003812:	d107      	bne.n	8003824 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0204 	bic.w	r2, r2, #4
 8003822:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	461a      	mov	r2, r3
 800382a:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_DMA_IRQHandler+0x1d8>)
 800382c:	429a      	cmp	r2, r3
 800382e:	d958      	bls.n	80038e2 <HAL_DMA_IRQHandler+0x112>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a5d      	ldr	r2, [pc, #372]	; (80039ac <HAL_DMA_IRQHandler+0x1dc>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d04f      	beq.n	80038da <HAL_DMA_IRQHandler+0x10a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a5c      	ldr	r2, [pc, #368]	; (80039b0 <HAL_DMA_IRQHandler+0x1e0>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d048      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x106>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a5a      	ldr	r2, [pc, #360]	; (80039b4 <HAL_DMA_IRQHandler+0x1e4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d040      	beq.n	80038d0 <HAL_DMA_IRQHandler+0x100>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a59      	ldr	r2, [pc, #356]	; (80039b8 <HAL_DMA_IRQHandler+0x1e8>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d038      	beq.n	80038ca <HAL_DMA_IRQHandler+0xfa>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a57      	ldr	r2, [pc, #348]	; (80039bc <HAL_DMA_IRQHandler+0x1ec>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d030      	beq.n	80038c4 <HAL_DMA_IRQHandler+0xf4>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a56      	ldr	r2, [pc, #344]	; (80039c0 <HAL_DMA_IRQHandler+0x1f0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d028      	beq.n	80038be <HAL_DMA_IRQHandler+0xee>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a4d      	ldr	r2, [pc, #308]	; (80039a8 <HAL_DMA_IRQHandler+0x1d8>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d020      	beq.n	80038b8 <HAL_DMA_IRQHandler+0xe8>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a52      	ldr	r2, [pc, #328]	; (80039c4 <HAL_DMA_IRQHandler+0x1f4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d019      	beq.n	80038b4 <HAL_DMA_IRQHandler+0xe4>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a50      	ldr	r2, [pc, #320]	; (80039c8 <HAL_DMA_IRQHandler+0x1f8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d012      	beq.n	80038b0 <HAL_DMA_IRQHandler+0xe0>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a4f      	ldr	r2, [pc, #316]	; (80039cc <HAL_DMA_IRQHandler+0x1fc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d00a      	beq.n	80038aa <HAL_DMA_IRQHandler+0xda>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a4d      	ldr	r2, [pc, #308]	; (80039d0 <HAL_DMA_IRQHandler+0x200>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d102      	bne.n	80038a4 <HAL_DMA_IRQHandler+0xd4>
 800389e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038a2:	e01b      	b.n	80038dc <HAL_DMA_IRQHandler+0x10c>
 80038a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038a8:	e018      	b.n	80038dc <HAL_DMA_IRQHandler+0x10c>
 80038aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038ae:	e015      	b.n	80038dc <HAL_DMA_IRQHandler+0x10c>
 80038b0:	2340      	movs	r3, #64	; 0x40
 80038b2:	e013      	b.n	80038dc <HAL_DMA_IRQHandler+0x10c>
 80038b4:	2304      	movs	r3, #4
 80038b6:	e011      	b.n	80038dc <HAL_DMA_IRQHandler+0x10c>
 80038b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80038bc:	e00e      	b.n	80038dc <HAL_DMA_IRQHandler+0x10c>
 80038be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038c2:	e00b      	b.n	80038dc <HAL_DMA_IRQHandler+0x10c>
 80038c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80038c8:	e008      	b.n	80038dc <HAL_DMA_IRQHandler+0x10c>
 80038ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038ce:	e005      	b.n	80038dc <HAL_DMA_IRQHandler+0x10c>
 80038d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80038d4:	e002      	b.n	80038dc <HAL_DMA_IRQHandler+0x10c>
 80038d6:	2340      	movs	r3, #64	; 0x40
 80038d8:	e000      	b.n	80038dc <HAL_DMA_IRQHandler+0x10c>
 80038da:	2304      	movs	r3, #4
 80038dc:	4a3d      	ldr	r2, [pc, #244]	; (80039d4 <HAL_DMA_IRQHandler+0x204>)
 80038de:	6053      	str	r3, [r2, #4]
 80038e0:	e057      	b.n	8003992 <HAL_DMA_IRQHandler+0x1c2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a31      	ldr	r2, [pc, #196]	; (80039ac <HAL_DMA_IRQHandler+0x1dc>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d04f      	beq.n	800398c <HAL_DMA_IRQHandler+0x1bc>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a2f      	ldr	r2, [pc, #188]	; (80039b0 <HAL_DMA_IRQHandler+0x1e0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d048      	beq.n	8003988 <HAL_DMA_IRQHandler+0x1b8>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2e      	ldr	r2, [pc, #184]	; (80039b4 <HAL_DMA_IRQHandler+0x1e4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d040      	beq.n	8003982 <HAL_DMA_IRQHandler+0x1b2>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a2c      	ldr	r2, [pc, #176]	; (80039b8 <HAL_DMA_IRQHandler+0x1e8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d038      	beq.n	800397c <HAL_DMA_IRQHandler+0x1ac>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a2b      	ldr	r2, [pc, #172]	; (80039bc <HAL_DMA_IRQHandler+0x1ec>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d030      	beq.n	8003976 <HAL_DMA_IRQHandler+0x1a6>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a29      	ldr	r2, [pc, #164]	; (80039c0 <HAL_DMA_IRQHandler+0x1f0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d028      	beq.n	8003970 <HAL_DMA_IRQHandler+0x1a0>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a21      	ldr	r2, [pc, #132]	; (80039a8 <HAL_DMA_IRQHandler+0x1d8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d020      	beq.n	800396a <HAL_DMA_IRQHandler+0x19a>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a25      	ldr	r2, [pc, #148]	; (80039c4 <HAL_DMA_IRQHandler+0x1f4>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d019      	beq.n	8003966 <HAL_DMA_IRQHandler+0x196>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a24      	ldr	r2, [pc, #144]	; (80039c8 <HAL_DMA_IRQHandler+0x1f8>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d012      	beq.n	8003962 <HAL_DMA_IRQHandler+0x192>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a22      	ldr	r2, [pc, #136]	; (80039cc <HAL_DMA_IRQHandler+0x1fc>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00a      	beq.n	800395c <HAL_DMA_IRQHandler+0x18c>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a21      	ldr	r2, [pc, #132]	; (80039d0 <HAL_DMA_IRQHandler+0x200>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d102      	bne.n	8003956 <HAL_DMA_IRQHandler+0x186>
 8003950:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003954:	e01b      	b.n	800398e <HAL_DMA_IRQHandler+0x1be>
 8003956:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800395a:	e018      	b.n	800398e <HAL_DMA_IRQHandler+0x1be>
 800395c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003960:	e015      	b.n	800398e <HAL_DMA_IRQHandler+0x1be>
 8003962:	2340      	movs	r3, #64	; 0x40
 8003964:	e013      	b.n	800398e <HAL_DMA_IRQHandler+0x1be>
 8003966:	2304      	movs	r3, #4
 8003968:	e011      	b.n	800398e <HAL_DMA_IRQHandler+0x1be>
 800396a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800396e:	e00e      	b.n	800398e <HAL_DMA_IRQHandler+0x1be>
 8003970:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003974:	e00b      	b.n	800398e <HAL_DMA_IRQHandler+0x1be>
 8003976:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800397a:	e008      	b.n	800398e <HAL_DMA_IRQHandler+0x1be>
 800397c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003980:	e005      	b.n	800398e <HAL_DMA_IRQHandler+0x1be>
 8003982:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003986:	e002      	b.n	800398e <HAL_DMA_IRQHandler+0x1be>
 8003988:	2340      	movs	r3, #64	; 0x40
 800398a:	e000      	b.n	800398e <HAL_DMA_IRQHandler+0x1be>
 800398c:	2304      	movs	r3, #4
 800398e:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <HAL_DMA_IRQHandler+0x208>)
 8003990:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 8136 	beq.w	8003c08 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80039a4:	e130      	b.n	8003c08 <HAL_DMA_IRQHandler+0x438>
 80039a6:	bf00      	nop
 80039a8:	40020080 	.word	0x40020080
 80039ac:	40020008 	.word	0x40020008
 80039b0:	4002001c 	.word	0x4002001c
 80039b4:	40020030 	.word	0x40020030
 80039b8:	40020044 	.word	0x40020044
 80039bc:	40020058 	.word	0x40020058
 80039c0:	4002006c 	.word	0x4002006c
 80039c4:	40020408 	.word	0x40020408
 80039c8:	4002041c 	.word	0x4002041c
 80039cc:	40020430 	.word	0x40020430
 80039d0:	40020444 	.word	0x40020444
 80039d4:	40020400 	.word	0x40020400
 80039d8:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	2202      	movs	r2, #2
 80039e2:	409a      	lsls	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80dd 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0x3d8>
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80d7 	beq.w	8003ba8 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f022 020a 	bic.w	r2, r2, #10
 8003a16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	461a      	mov	r2, r3
 8003a26:	4b7b      	ldr	r3, [pc, #492]	; (8003c14 <HAL_DMA_IRQHandler+0x444>)
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d958      	bls.n	8003ade <HAL_DMA_IRQHandler+0x30e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a79      	ldr	r2, [pc, #484]	; (8003c18 <HAL_DMA_IRQHandler+0x448>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d04f      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x306>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a78      	ldr	r2, [pc, #480]	; (8003c1c <HAL_DMA_IRQHandler+0x44c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d048      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x302>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a76      	ldr	r2, [pc, #472]	; (8003c20 <HAL_DMA_IRQHandler+0x450>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d040      	beq.n	8003acc <HAL_DMA_IRQHandler+0x2fc>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a75      	ldr	r2, [pc, #468]	; (8003c24 <HAL_DMA_IRQHandler+0x454>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d038      	beq.n	8003ac6 <HAL_DMA_IRQHandler+0x2f6>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a73      	ldr	r2, [pc, #460]	; (8003c28 <HAL_DMA_IRQHandler+0x458>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d030      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x2f0>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a72      	ldr	r2, [pc, #456]	; (8003c2c <HAL_DMA_IRQHandler+0x45c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d028      	beq.n	8003aba <HAL_DMA_IRQHandler+0x2ea>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a69      	ldr	r2, [pc, #420]	; (8003c14 <HAL_DMA_IRQHandler+0x444>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d020      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x2e4>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a6e      	ldr	r2, [pc, #440]	; (8003c30 <HAL_DMA_IRQHandler+0x460>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d019      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x2e0>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a6c      	ldr	r2, [pc, #432]	; (8003c34 <HAL_DMA_IRQHandler+0x464>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d012      	beq.n	8003aac <HAL_DMA_IRQHandler+0x2dc>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a6b      	ldr	r2, [pc, #428]	; (8003c38 <HAL_DMA_IRQHandler+0x468>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00a      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x2d6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a69      	ldr	r2, [pc, #420]	; (8003c3c <HAL_DMA_IRQHandler+0x46c>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d102      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x2d0>
 8003a9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a9e:	e01b      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x308>
 8003aa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aa4:	e018      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x308>
 8003aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aaa:	e015      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x308>
 8003aac:	2320      	movs	r3, #32
 8003aae:	e013      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x308>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e011      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x308>
 8003ab4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ab8:	e00e      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x308>
 8003aba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003abe:	e00b      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x308>
 8003ac0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ac4:	e008      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x308>
 8003ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003aca:	e005      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x308>
 8003acc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ad0:	e002      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x308>
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	e000      	b.n	8003ad8 <HAL_DMA_IRQHandler+0x308>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	4a59      	ldr	r2, [pc, #356]	; (8003c40 <HAL_DMA_IRQHandler+0x470>)
 8003ada:	6053      	str	r3, [r2, #4]
 8003adc:	e057      	b.n	8003b8e <HAL_DMA_IRQHandler+0x3be>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a4d      	ldr	r2, [pc, #308]	; (8003c18 <HAL_DMA_IRQHandler+0x448>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d04f      	beq.n	8003b88 <HAL_DMA_IRQHandler+0x3b8>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a4b      	ldr	r2, [pc, #300]	; (8003c1c <HAL_DMA_IRQHandler+0x44c>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d048      	beq.n	8003b84 <HAL_DMA_IRQHandler+0x3b4>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a4a      	ldr	r2, [pc, #296]	; (8003c20 <HAL_DMA_IRQHandler+0x450>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d040      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x3ae>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a48      	ldr	r2, [pc, #288]	; (8003c24 <HAL_DMA_IRQHandler+0x454>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d038      	beq.n	8003b78 <HAL_DMA_IRQHandler+0x3a8>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a47      	ldr	r2, [pc, #284]	; (8003c28 <HAL_DMA_IRQHandler+0x458>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d030      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x3a2>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a45      	ldr	r2, [pc, #276]	; (8003c2c <HAL_DMA_IRQHandler+0x45c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d028      	beq.n	8003b6c <HAL_DMA_IRQHandler+0x39c>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a3d      	ldr	r2, [pc, #244]	; (8003c14 <HAL_DMA_IRQHandler+0x444>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d020      	beq.n	8003b66 <HAL_DMA_IRQHandler+0x396>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a41      	ldr	r2, [pc, #260]	; (8003c30 <HAL_DMA_IRQHandler+0x460>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d019      	beq.n	8003b62 <HAL_DMA_IRQHandler+0x392>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a40      	ldr	r2, [pc, #256]	; (8003c34 <HAL_DMA_IRQHandler+0x464>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d012      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x38e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a3e      	ldr	r2, [pc, #248]	; (8003c38 <HAL_DMA_IRQHandler+0x468>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d00a      	beq.n	8003b58 <HAL_DMA_IRQHandler+0x388>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a3d      	ldr	r2, [pc, #244]	; (8003c3c <HAL_DMA_IRQHandler+0x46c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d102      	bne.n	8003b52 <HAL_DMA_IRQHandler+0x382>
 8003b4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b50:	e01b      	b.n	8003b8a <HAL_DMA_IRQHandler+0x3ba>
 8003b52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b56:	e018      	b.n	8003b8a <HAL_DMA_IRQHandler+0x3ba>
 8003b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b5c:	e015      	b.n	8003b8a <HAL_DMA_IRQHandler+0x3ba>
 8003b5e:	2320      	movs	r3, #32
 8003b60:	e013      	b.n	8003b8a <HAL_DMA_IRQHandler+0x3ba>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e011      	b.n	8003b8a <HAL_DMA_IRQHandler+0x3ba>
 8003b66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b6a:	e00e      	b.n	8003b8a <HAL_DMA_IRQHandler+0x3ba>
 8003b6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003b70:	e00b      	b.n	8003b8a <HAL_DMA_IRQHandler+0x3ba>
 8003b72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b76:	e008      	b.n	8003b8a <HAL_DMA_IRQHandler+0x3ba>
 8003b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b7c:	e005      	b.n	8003b8a <HAL_DMA_IRQHandler+0x3ba>
 8003b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b82:	e002      	b.n	8003b8a <HAL_DMA_IRQHandler+0x3ba>
 8003b84:	2320      	movs	r3, #32
 8003b86:	e000      	b.n	8003b8a <HAL_DMA_IRQHandler+0x3ba>
 8003b88:	2302      	movs	r3, #2
 8003b8a:	4a2e      	ldr	r2, [pc, #184]	; (8003c44 <HAL_DMA_IRQHandler+0x474>)
 8003b8c:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d034      	beq.n	8003c08 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003ba6:	e02f      	b.n	8003c08 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	2208      	movs	r2, #8
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d028      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x43a>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	f003 0308 	and.w	r3, r3, #8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d023      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 020e 	bic.w	r2, r2, #14
 8003bd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bda:	2101      	movs	r1, #1
 8003bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8003be0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d004      	beq.n	8003c0a <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	4798      	blx	r3
    }
  }
  return;
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
}
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40020080 	.word	0x40020080
 8003c18:	40020008 	.word	0x40020008
 8003c1c:	4002001c 	.word	0x4002001c
 8003c20:	40020030 	.word	0x40020030
 8003c24:	40020044 	.word	0x40020044
 8003c28:	40020058 	.word	0x40020058
 8003c2c:	4002006c 	.word	0x4002006c
 8003c30:	40020408 	.word	0x40020408
 8003c34:	4002041c 	.word	0x4002041c
 8003c38:	40020430 	.word	0x40020430
 8003c3c:	40020444 	.word	0x40020444
 8003c40:	40020400 	.word	0x40020400
 8003c44:	40020000 	.word	0x40020000

08003c48 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	2101      	movs	r1, #1
 8003c60:	fa01 f202 	lsl.w	r2, r1, r2
 8003c64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d108      	bne.n	8003c88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68ba      	ldr	r2, [r7, #8]
 8003c84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c86:	e007      	b.n	8003c98 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	60da      	str	r2, [r3, #12]
}
 8003c98:	bf00      	nop
 8003c9a:	3714      	adds	r7, #20
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bc80      	pop	{r7}
 8003ca0:	4770      	bx	lr
	...

08003ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b08b      	sub	sp, #44	; 0x2c
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
 8003cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cb6:	e179      	b.n	8003fac <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003cb8:	2201      	movs	r2, #1
 8003cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	69fa      	ldr	r2, [r7, #28]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	f040 8168 	bne.w	8003fa6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	4a96      	ldr	r2, [pc, #600]	; (8003f34 <HAL_GPIO_Init+0x290>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d05e      	beq.n	8003d9e <HAL_GPIO_Init+0xfa>
 8003ce0:	4a94      	ldr	r2, [pc, #592]	; (8003f34 <HAL_GPIO_Init+0x290>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d875      	bhi.n	8003dd2 <HAL_GPIO_Init+0x12e>
 8003ce6:	4a94      	ldr	r2, [pc, #592]	; (8003f38 <HAL_GPIO_Init+0x294>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d058      	beq.n	8003d9e <HAL_GPIO_Init+0xfa>
 8003cec:	4a92      	ldr	r2, [pc, #584]	; (8003f38 <HAL_GPIO_Init+0x294>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d86f      	bhi.n	8003dd2 <HAL_GPIO_Init+0x12e>
 8003cf2:	4a92      	ldr	r2, [pc, #584]	; (8003f3c <HAL_GPIO_Init+0x298>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d052      	beq.n	8003d9e <HAL_GPIO_Init+0xfa>
 8003cf8:	4a90      	ldr	r2, [pc, #576]	; (8003f3c <HAL_GPIO_Init+0x298>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d869      	bhi.n	8003dd2 <HAL_GPIO_Init+0x12e>
 8003cfe:	4a90      	ldr	r2, [pc, #576]	; (8003f40 <HAL_GPIO_Init+0x29c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d04c      	beq.n	8003d9e <HAL_GPIO_Init+0xfa>
 8003d04:	4a8e      	ldr	r2, [pc, #568]	; (8003f40 <HAL_GPIO_Init+0x29c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d863      	bhi.n	8003dd2 <HAL_GPIO_Init+0x12e>
 8003d0a:	4a8e      	ldr	r2, [pc, #568]	; (8003f44 <HAL_GPIO_Init+0x2a0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d046      	beq.n	8003d9e <HAL_GPIO_Init+0xfa>
 8003d10:	4a8c      	ldr	r2, [pc, #560]	; (8003f44 <HAL_GPIO_Init+0x2a0>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d85d      	bhi.n	8003dd2 <HAL_GPIO_Init+0x12e>
 8003d16:	2b12      	cmp	r3, #18
 8003d18:	d82a      	bhi.n	8003d70 <HAL_GPIO_Init+0xcc>
 8003d1a:	2b12      	cmp	r3, #18
 8003d1c:	d859      	bhi.n	8003dd2 <HAL_GPIO_Init+0x12e>
 8003d1e:	a201      	add	r2, pc, #4	; (adr r2, 8003d24 <HAL_GPIO_Init+0x80>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d9f 	.word	0x08003d9f
 8003d28:	08003d79 	.word	0x08003d79
 8003d2c:	08003d8b 	.word	0x08003d8b
 8003d30:	08003dcd 	.word	0x08003dcd
 8003d34:	08003dd3 	.word	0x08003dd3
 8003d38:	08003dd3 	.word	0x08003dd3
 8003d3c:	08003dd3 	.word	0x08003dd3
 8003d40:	08003dd3 	.word	0x08003dd3
 8003d44:	08003dd3 	.word	0x08003dd3
 8003d48:	08003dd3 	.word	0x08003dd3
 8003d4c:	08003dd3 	.word	0x08003dd3
 8003d50:	08003dd3 	.word	0x08003dd3
 8003d54:	08003dd3 	.word	0x08003dd3
 8003d58:	08003dd3 	.word	0x08003dd3
 8003d5c:	08003dd3 	.word	0x08003dd3
 8003d60:	08003dd3 	.word	0x08003dd3
 8003d64:	08003dd3 	.word	0x08003dd3
 8003d68:	08003d81 	.word	0x08003d81
 8003d6c:	08003d95 	.word	0x08003d95
 8003d70:	4a75      	ldr	r2, [pc, #468]	; (8003f48 <HAL_GPIO_Init+0x2a4>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d013      	beq.n	8003d9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d76:	e02c      	b.n	8003dd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	623b      	str	r3, [r7, #32]
          break;
 8003d7e:	e029      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	3304      	adds	r3, #4
 8003d86:	623b      	str	r3, [r7, #32]
          break;
 8003d88:	e024      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	3308      	adds	r3, #8
 8003d90:	623b      	str	r3, [r7, #32]
          break;
 8003d92:	e01f      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	330c      	adds	r3, #12
 8003d9a:	623b      	str	r3, [r7, #32]
          break;
 8003d9c:	e01a      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d102      	bne.n	8003dac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003da6:	2304      	movs	r3, #4
 8003da8:	623b      	str	r3, [r7, #32]
          break;
 8003daa:	e013      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d105      	bne.n	8003dc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003db4:	2308      	movs	r3, #8
 8003db6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	69fa      	ldr	r2, [r7, #28]
 8003dbc:	611a      	str	r2, [r3, #16]
          break;
 8003dbe:	e009      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	615a      	str	r2, [r3, #20]
          break;
 8003dca:	e003      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	623b      	str	r3, [r7, #32]
          break;
 8003dd0:	e000      	b.n	8003dd4 <HAL_GPIO_Init+0x130>
          break;
 8003dd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2bff      	cmp	r3, #255	; 0xff
 8003dd8:	d801      	bhi.n	8003dde <HAL_GPIO_Init+0x13a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	e001      	b.n	8003de2 <HAL_GPIO_Init+0x13e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3304      	adds	r3, #4
 8003de2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2bff      	cmp	r3, #255	; 0xff
 8003de8:	d802      	bhi.n	8003df0 <HAL_GPIO_Init+0x14c>
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	e002      	b.n	8003df6 <HAL_GPIO_Init+0x152>
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	3b08      	subs	r3, #8
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	210f      	movs	r1, #15
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	fa01 f303 	lsl.w	r3, r1, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	401a      	ands	r2, r3
 8003e08:	6a39      	ldr	r1, [r7, #32]
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e10:	431a      	orrs	r2, r3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 80c1 	beq.w	8003fa6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003e24:	4b49      	ldr	r3, [pc, #292]	; (8003f4c <HAL_GPIO_Init+0x2a8>)
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	4a48      	ldr	r2, [pc, #288]	; (8003f4c <HAL_GPIO_Init+0x2a8>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	6193      	str	r3, [r2, #24]
 8003e30:	4b46      	ldr	r3, [pc, #280]	; (8003f4c <HAL_GPIO_Init+0x2a8>)
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	60bb      	str	r3, [r7, #8]
 8003e3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003e3c:	4a44      	ldr	r2, [pc, #272]	; (8003f50 <HAL_GPIO_Init+0x2ac>)
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	089b      	lsrs	r3, r3, #2
 8003e42:	3302      	adds	r3, #2
 8003e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	f003 0303 	and.w	r3, r3, #3
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	220f      	movs	r2, #15
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a3c      	ldr	r2, [pc, #240]	; (8003f54 <HAL_GPIO_Init+0x2b0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d01f      	beq.n	8003ea8 <HAL_GPIO_Init+0x204>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4a3b      	ldr	r2, [pc, #236]	; (8003f58 <HAL_GPIO_Init+0x2b4>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d019      	beq.n	8003ea4 <HAL_GPIO_Init+0x200>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a3a      	ldr	r2, [pc, #232]	; (8003f5c <HAL_GPIO_Init+0x2b8>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d013      	beq.n	8003ea0 <HAL_GPIO_Init+0x1fc>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	4a39      	ldr	r2, [pc, #228]	; (8003f60 <HAL_GPIO_Init+0x2bc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d00d      	beq.n	8003e9c <HAL_GPIO_Init+0x1f8>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a38      	ldr	r2, [pc, #224]	; (8003f64 <HAL_GPIO_Init+0x2c0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d007      	beq.n	8003e98 <HAL_GPIO_Init+0x1f4>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a37      	ldr	r2, [pc, #220]	; (8003f68 <HAL_GPIO_Init+0x2c4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d101      	bne.n	8003e94 <HAL_GPIO_Init+0x1f0>
 8003e90:	2305      	movs	r3, #5
 8003e92:	e00a      	b.n	8003eaa <HAL_GPIO_Init+0x206>
 8003e94:	2306      	movs	r3, #6
 8003e96:	e008      	b.n	8003eaa <HAL_GPIO_Init+0x206>
 8003e98:	2304      	movs	r3, #4
 8003e9a:	e006      	b.n	8003eaa <HAL_GPIO_Init+0x206>
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e004      	b.n	8003eaa <HAL_GPIO_Init+0x206>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e002      	b.n	8003eaa <HAL_GPIO_Init+0x206>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <HAL_GPIO_Init+0x206>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eac:	f002 0203 	and.w	r2, r2, #3
 8003eb0:	0092      	lsls	r2, r2, #2
 8003eb2:	4093      	lsls	r3, r2
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003eba:	4925      	ldr	r1, [pc, #148]	; (8003f50 <HAL_GPIO_Init+0x2ac>)
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d006      	beq.n	8003ee2 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ed4:	4b25      	ldr	r3, [pc, #148]	; (8003f6c <HAL_GPIO_Init+0x2c8>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	4924      	ldr	r1, [pc, #144]	; (8003f6c <HAL_GPIO_Init+0x2c8>)
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	600b      	str	r3, [r1, #0]
 8003ee0:	e006      	b.n	8003ef0 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ee2:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <HAL_GPIO_Init+0x2c8>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	4920      	ldr	r1, [pc, #128]	; (8003f6c <HAL_GPIO_Init+0x2c8>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d006      	beq.n	8003f0a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003efc:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <HAL_GPIO_Init+0x2c8>)
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	491a      	ldr	r1, [pc, #104]	; (8003f6c <HAL_GPIO_Init+0x2c8>)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
 8003f08:	e006      	b.n	8003f18 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003f0a:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <HAL_GPIO_Init+0x2c8>)
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	43db      	mvns	r3, r3
 8003f12:	4916      	ldr	r1, [pc, #88]	; (8003f6c <HAL_GPIO_Init+0x2c8>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d025      	beq.n	8003f70 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003f24:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <HAL_GPIO_Init+0x2c8>)
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	4910      	ldr	r1, [pc, #64]	; (8003f6c <HAL_GPIO_Init+0x2c8>)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	608b      	str	r3, [r1, #8]
 8003f30:	e025      	b.n	8003f7e <HAL_GPIO_Init+0x2da>
 8003f32:	bf00      	nop
 8003f34:	10320000 	.word	0x10320000
 8003f38:	10310000 	.word	0x10310000
 8003f3c:	10220000 	.word	0x10220000
 8003f40:	10210000 	.word	0x10210000
 8003f44:	10120000 	.word	0x10120000
 8003f48:	10110000 	.word	0x10110000
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	40010000 	.word	0x40010000
 8003f54:	40010800 	.word	0x40010800
 8003f58:	40010c00 	.word	0x40010c00
 8003f5c:	40011000 	.word	0x40011000
 8003f60:	40011400 	.word	0x40011400
 8003f64:	40011800 	.word	0x40011800
 8003f68:	40011c00 	.word	0x40011c00
 8003f6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003f70:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <HAL_GPIO_Init+0x324>)
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	43db      	mvns	r3, r3
 8003f78:	4913      	ldr	r1, [pc, #76]	; (8003fc8 <HAL_GPIO_Init+0x324>)
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d006      	beq.n	8003f98 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	; (8003fc8 <HAL_GPIO_Init+0x324>)
 8003f8c:	68da      	ldr	r2, [r3, #12]
 8003f8e:	490e      	ldr	r1, [pc, #56]	; (8003fc8 <HAL_GPIO_Init+0x324>)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	60cb      	str	r3, [r1, #12]
 8003f96:	e006      	b.n	8003fa6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_GPIO_Init+0x324>)
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	43db      	mvns	r3, r3
 8003fa0:	4909      	ldr	r1, [pc, #36]	; (8003fc8 <HAL_GPIO_Init+0x324>)
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	3301      	adds	r3, #1
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f47f ae7e 	bne.w	8003cb8 <HAL_GPIO_Init+0x14>
  }
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	372c      	adds	r7, #44	; 0x2c
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bc80      	pop	{r7}
 8003fc6:	4770      	bx	lr
 8003fc8:	40010400 	.word	0x40010400

08003fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	460b      	mov	r3, r1
 8003fd6:	807b      	strh	r3, [r7, #2]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003fdc:	787b      	ldrb	r3, [r7, #1]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d003      	beq.n	8003fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fe2:	887a      	ldrh	r2, [r7, #2]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fe8:	e003      	b.n	8003ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fea:	887b      	ldrh	r3, [r7, #2]
 8003fec:	041a      	lsls	r2, r3, #16
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	611a      	str	r2, [r3, #16]
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bc80      	pop	{r7}
 8003ffa:	4770      	bx	lr

08003ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e12b      	b.n	8004266 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004014:	b2db      	uxtb	r3, r3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d106      	bne.n	8004028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fe fd62 	bl	8002aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2224      	movs	r2, #36	; 0x24
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0201 	bic.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800404e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800405e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004060:	f000 fce6 	bl	8004a30 <HAL_RCC_GetPCLK1Freq>
 8004064:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4a81      	ldr	r2, [pc, #516]	; (8004270 <HAL_I2C_Init+0x274>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d807      	bhi.n	8004080 <HAL_I2C_Init+0x84>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4a80      	ldr	r2, [pc, #512]	; (8004274 <HAL_I2C_Init+0x278>)
 8004074:	4293      	cmp	r3, r2
 8004076:	bf94      	ite	ls
 8004078:	2301      	movls	r3, #1
 800407a:	2300      	movhi	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e006      	b.n	800408e <HAL_I2C_Init+0x92>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a7d      	ldr	r2, [pc, #500]	; (8004278 <HAL_I2C_Init+0x27c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	bf94      	ite	ls
 8004088:	2301      	movls	r3, #1
 800408a:	2300      	movhi	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e0e7      	b.n	8004266 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a78      	ldr	r2, [pc, #480]	; (800427c <HAL_I2C_Init+0x280>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	0c9b      	lsrs	r3, r3, #18
 80040a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	6a1b      	ldr	r3, [r3, #32]
 80040bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	4a6a      	ldr	r2, [pc, #424]	; (8004270 <HAL_I2C_Init+0x274>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d802      	bhi.n	80040d0 <HAL_I2C_Init+0xd4>
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	3301      	adds	r3, #1
 80040ce:	e009      	b.n	80040e4 <HAL_I2C_Init+0xe8>
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	4a69      	ldr	r2, [pc, #420]	; (8004280 <HAL_I2C_Init+0x284>)
 80040dc:	fba2 2303 	umull	r2, r3, r2, r3
 80040e0:	099b      	lsrs	r3, r3, #6
 80040e2:	3301      	adds	r3, #1
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	495c      	ldr	r1, [pc, #368]	; (8004270 <HAL_I2C_Init+0x274>)
 8004100:	428b      	cmp	r3, r1
 8004102:	d819      	bhi.n	8004138 <HAL_I2C_Init+0x13c>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	1e59      	subs	r1, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004112:	1c59      	adds	r1, r3, #1
 8004114:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004118:	400b      	ands	r3, r1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_I2C_Init+0x138>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1e59      	subs	r1, r3, #1
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	fbb1 f3f3 	udiv	r3, r1, r3
 800412c:	3301      	adds	r3, #1
 800412e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004132:	e051      	b.n	80041d8 <HAL_I2C_Init+0x1dc>
 8004134:	2304      	movs	r3, #4
 8004136:	e04f      	b.n	80041d8 <HAL_I2C_Init+0x1dc>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d111      	bne.n	8004164 <HAL_I2C_Init+0x168>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	1e58      	subs	r0, r3, #1
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6859      	ldr	r1, [r3, #4]
 8004148:	460b      	mov	r3, r1
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	440b      	add	r3, r1
 800414e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004152:	3301      	adds	r3, #1
 8004154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	e012      	b.n	800418a <HAL_I2C_Init+0x18e>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1e58      	subs	r0, r3, #1
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6859      	ldr	r1, [r3, #4]
 800416c:	460b      	mov	r3, r1
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	0099      	lsls	r1, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	fbb0 f3f3 	udiv	r3, r0, r3
 800417a:	3301      	adds	r3, #1
 800417c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_I2C_Init+0x196>
 800418e:	2301      	movs	r3, #1
 8004190:	e022      	b.n	80041d8 <HAL_I2C_Init+0x1dc>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10e      	bne.n	80041b8 <HAL_I2C_Init+0x1bc>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1e58      	subs	r0, r3, #1
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6859      	ldr	r1, [r3, #4]
 80041a2:	460b      	mov	r3, r1
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	440b      	add	r3, r1
 80041a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ac:	3301      	adds	r3, #1
 80041ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041b6:	e00f      	b.n	80041d8 <HAL_I2C_Init+0x1dc>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1e58      	subs	r0, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	460b      	mov	r3, r1
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	440b      	add	r3, r1
 80041c6:	0099      	lsls	r1, r3, #2
 80041c8:	440b      	add	r3, r1
 80041ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ce:	3301      	adds	r3, #1
 80041d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	6809      	ldr	r1, [r1, #0]
 80041dc:	4313      	orrs	r3, r2
 80041de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69da      	ldr	r2, [r3, #28]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004206:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6911      	ldr	r1, [r2, #16]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	68d2      	ldr	r2, [r2, #12]
 8004212:	4311      	orrs	r1, r2
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6812      	ldr	r2, [r2, #0]
 8004218:	430b      	orrs	r3, r1
 800421a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	430a      	orrs	r2, r1
 8004236:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	000186a0 	.word	0x000186a0
 8004274:	001e847f 	.word	0x001e847f
 8004278:	003d08ff 	.word	0x003d08ff
 800427c:	431bde83 	.word	0x431bde83
 8004280:	10624dd3 	.word	0x10624dd3

08004284 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b086      	sub	sp, #24
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e272      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 8087 	beq.w	80043b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80042a4:	4b92      	ldr	r3, [pc, #584]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 030c 	and.w	r3, r3, #12
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d00c      	beq.n	80042ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042b0:	4b8f      	ldr	r3, [pc, #572]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d112      	bne.n	80042e2 <HAL_RCC_OscConfig+0x5e>
 80042bc:	4b8c      	ldr	r3, [pc, #560]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c8:	d10b      	bne.n	80042e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ca:	4b89      	ldr	r3, [pc, #548]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d06c      	beq.n	80043b0 <HAL_RCC_OscConfig+0x12c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d168      	bne.n	80043b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e24c      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ea:	d106      	bne.n	80042fa <HAL_RCC_OscConfig+0x76>
 80042ec:	4b80      	ldr	r3, [pc, #512]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a7f      	ldr	r2, [pc, #508]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80042f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f6:	6013      	str	r3, [r2, #0]
 80042f8:	e02e      	b.n	8004358 <HAL_RCC_OscConfig+0xd4>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10c      	bne.n	800431c <HAL_RCC_OscConfig+0x98>
 8004302:	4b7b      	ldr	r3, [pc, #492]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a7a      	ldr	r2, [pc, #488]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4b78      	ldr	r3, [pc, #480]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a77      	ldr	r2, [pc, #476]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e01d      	b.n	8004358 <HAL_RCC_OscConfig+0xd4>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004324:	d10c      	bne.n	8004340 <HAL_RCC_OscConfig+0xbc>
 8004326:	4b72      	ldr	r3, [pc, #456]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a71      	ldr	r2, [pc, #452]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 800432c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	4b6f      	ldr	r3, [pc, #444]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a6e      	ldr	r2, [pc, #440]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800433c:	6013      	str	r3, [r2, #0]
 800433e:	e00b      	b.n	8004358 <HAL_RCC_OscConfig+0xd4>
 8004340:	4b6b      	ldr	r3, [pc, #428]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a6a      	ldr	r2, [pc, #424]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	4b68      	ldr	r3, [pc, #416]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a67      	ldr	r2, [pc, #412]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004356:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d013      	beq.n	8004388 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004360:	f7ff f848 	bl	80033f4 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004368:	f7ff f844 	bl	80033f4 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b64      	cmp	r3, #100	; 0x64
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e200      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	4b5d      	ldr	r3, [pc, #372]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d0f0      	beq.n	8004368 <HAL_RCC_OscConfig+0xe4>
 8004386:	e014      	b.n	80043b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7ff f834 	bl	80033f4 <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004390:	f7ff f830 	bl	80033f4 <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b64      	cmp	r3, #100	; 0x64
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e1ec      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043a2:	4b53      	ldr	r3, [pc, #332]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x10c>
 80043ae:	e000      	b.n	80043b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d063      	beq.n	8004486 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80043be:	4b4c      	ldr	r3, [pc, #304]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 030c 	and.w	r3, r3, #12
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80043ca:	4b49      	ldr	r3, [pc, #292]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f003 030c 	and.w	r3, r3, #12
 80043d2:	2b08      	cmp	r3, #8
 80043d4:	d11c      	bne.n	8004410 <HAL_RCC_OscConfig+0x18c>
 80043d6:	4b46      	ldr	r3, [pc, #280]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d116      	bne.n	8004410 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043e2:	4b43      	ldr	r3, [pc, #268]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_RCC_OscConfig+0x176>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d001      	beq.n	80043fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e1c0      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043fa:	4b3d      	ldr	r3, [pc, #244]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4939      	ldr	r1, [pc, #228]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 800440a:	4313      	orrs	r3, r2
 800440c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800440e:	e03a      	b.n	8004486 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d020      	beq.n	800445a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004418:	4b36      	ldr	r3, [pc, #216]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 800441a:	2201      	movs	r2, #1
 800441c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800441e:	f7fe ffe9 	bl	80033f4 <HAL_GetTick>
 8004422:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004426:	f7fe ffe5 	bl	80033f4 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b02      	cmp	r3, #2
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e1a1      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004438:	4b2d      	ldr	r3, [pc, #180]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004444:	4b2a      	ldr	r3, [pc, #168]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	4927      	ldr	r1, [pc, #156]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 8004454:	4313      	orrs	r3, r2
 8004456:	600b      	str	r3, [r1, #0]
 8004458:	e015      	b.n	8004486 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800445a:	4b26      	ldr	r3, [pc, #152]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004460:	f7fe ffc8 	bl	80033f4 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004468:	f7fe ffc4 	bl	80033f4 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e180      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800447a:	4b1d      	ldr	r3, [pc, #116]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1f0      	bne.n	8004468 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0308 	and.w	r3, r3, #8
 800448e:	2b00      	cmp	r3, #0
 8004490:	d03a      	beq.n	8004508 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d019      	beq.n	80044ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800449a:	4b17      	ldr	r3, [pc, #92]	; (80044f8 <HAL_RCC_OscConfig+0x274>)
 800449c:	2201      	movs	r2, #1
 800449e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044a0:	f7fe ffa8 	bl	80033f4 <HAL_GetTick>
 80044a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044a6:	e008      	b.n	80044ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a8:	f7fe ffa4 	bl	80033f4 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d901      	bls.n	80044ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	e160      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <HAL_RCC_OscConfig+0x26c>)
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d0f0      	beq.n	80044a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80044c6:	2001      	movs	r0, #1
 80044c8:	f000 fada 	bl	8004a80 <RCC_Delay>
 80044cc:	e01c      	b.n	8004508 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ce:	4b0a      	ldr	r3, [pc, #40]	; (80044f8 <HAL_RCC_OscConfig+0x274>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d4:	f7fe ff8e 	bl	80033f4 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044da:	e00f      	b.n	80044fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044dc:	f7fe ff8a 	bl	80033f4 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d908      	bls.n	80044fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e146      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000
 80044f4:	42420000 	.word	0x42420000
 80044f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044fc:	4b92      	ldr	r3, [pc, #584]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1e9      	bne.n	80044dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80a6 	beq.w	8004662 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004516:	2300      	movs	r3, #0
 8004518:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800451a:	4b8b      	ldr	r3, [pc, #556]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d10d      	bne.n	8004542 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004526:	4b88      	ldr	r3, [pc, #544]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	4a87      	ldr	r2, [pc, #540]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 800452c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004530:	61d3      	str	r3, [r2, #28]
 8004532:	4b85      	ldr	r3, [pc, #532]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800453a:	60bb      	str	r3, [r7, #8]
 800453c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800453e:	2301      	movs	r3, #1
 8004540:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004542:	4b82      	ldr	r3, [pc, #520]	; (800474c <HAL_RCC_OscConfig+0x4c8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800454a:	2b00      	cmp	r3, #0
 800454c:	d118      	bne.n	8004580 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454e:	4b7f      	ldr	r3, [pc, #508]	; (800474c <HAL_RCC_OscConfig+0x4c8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a7e      	ldr	r2, [pc, #504]	; (800474c <HAL_RCC_OscConfig+0x4c8>)
 8004554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004558:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800455a:	f7fe ff4b 	bl	80033f4 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004562:	f7fe ff47 	bl	80033f4 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b64      	cmp	r3, #100	; 0x64
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e103      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004574:	4b75      	ldr	r3, [pc, #468]	; (800474c <HAL_RCC_OscConfig+0x4c8>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b01      	cmp	r3, #1
 8004586:	d106      	bne.n	8004596 <HAL_RCC_OscConfig+0x312>
 8004588:	4b6f      	ldr	r3, [pc, #444]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4a6e      	ldr	r2, [pc, #440]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6213      	str	r3, [r2, #32]
 8004594:	e02d      	b.n	80045f2 <HAL_RCC_OscConfig+0x36e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10c      	bne.n	80045b8 <HAL_RCC_OscConfig+0x334>
 800459e:	4b6a      	ldr	r3, [pc, #424]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	4a69      	ldr	r2, [pc, #420]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	f023 0301 	bic.w	r3, r3, #1
 80045a8:	6213      	str	r3, [r2, #32]
 80045aa:	4b67      	ldr	r3, [pc, #412]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	4a66      	ldr	r2, [pc, #408]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	f023 0304 	bic.w	r3, r3, #4
 80045b4:	6213      	str	r3, [r2, #32]
 80045b6:	e01c      	b.n	80045f2 <HAL_RCC_OscConfig+0x36e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b05      	cmp	r3, #5
 80045be:	d10c      	bne.n	80045da <HAL_RCC_OscConfig+0x356>
 80045c0:	4b61      	ldr	r3, [pc, #388]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	4a60      	ldr	r2, [pc, #384]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045c6:	f043 0304 	orr.w	r3, r3, #4
 80045ca:	6213      	str	r3, [r2, #32]
 80045cc:	4b5e      	ldr	r3, [pc, #376]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	4a5d      	ldr	r2, [pc, #372]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	6213      	str	r3, [r2, #32]
 80045d8:	e00b      	b.n	80045f2 <HAL_RCC_OscConfig+0x36e>
 80045da:	4b5b      	ldr	r3, [pc, #364]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	4a5a      	ldr	r2, [pc, #360]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045e0:	f023 0301 	bic.w	r3, r3, #1
 80045e4:	6213      	str	r3, [r2, #32]
 80045e6:	4b58      	ldr	r3, [pc, #352]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	4a57      	ldr	r2, [pc, #348]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80045ec:	f023 0304 	bic.w	r3, r3, #4
 80045f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d015      	beq.n	8004626 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045fa:	f7fe fefb 	bl	80033f4 <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004600:	e00a      	b.n	8004618 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004602:	f7fe fef7 	bl	80033f4 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004610:	4293      	cmp	r3, r2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e0b1      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004618:	4b4b      	ldr	r3, [pc, #300]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0ee      	beq.n	8004602 <HAL_RCC_OscConfig+0x37e>
 8004624:	e014      	b.n	8004650 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004626:	f7fe fee5 	bl	80033f4 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800462c:	e00a      	b.n	8004644 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800462e:	f7fe fee1 	bl	80033f4 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	f241 3288 	movw	r2, #5000	; 0x1388
 800463c:	4293      	cmp	r3, r2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e09b      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004644:	4b40      	ldr	r3, [pc, #256]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1ee      	bne.n	800462e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d105      	bne.n	8004662 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004656:	4b3c      	ldr	r3, [pc, #240]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	4a3b      	ldr	r2, [pc, #236]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 800465c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004660:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 8087 	beq.w	800477a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800466c:	4b36      	ldr	r3, [pc, #216]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 030c 	and.w	r3, r3, #12
 8004674:	2b08      	cmp	r3, #8
 8004676:	d061      	beq.n	800473c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	2b02      	cmp	r3, #2
 800467e:	d146      	bne.n	800470e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004680:	4b33      	ldr	r3, [pc, #204]	; (8004750 <HAL_RCC_OscConfig+0x4cc>)
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004686:	f7fe feb5 	bl	80033f4 <HAL_GetTick>
 800468a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468e:	f7fe feb1 	bl	80033f4 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e06d      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046a0:	4b29      	ldr	r3, [pc, #164]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f0      	bne.n	800468e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b4:	d108      	bne.n	80046c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80046b6:	4b24      	ldr	r3, [pc, #144]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	4921      	ldr	r1, [pc, #132]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046c8:	4b1f      	ldr	r3, [pc, #124]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a19      	ldr	r1, [r3, #32]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	430b      	orrs	r3, r1
 80046da:	491b      	ldr	r1, [pc, #108]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e0:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <HAL_RCC_OscConfig+0x4cc>)
 80046e2:	2201      	movs	r2, #1
 80046e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e6:	f7fe fe85 	bl	80033f4 <HAL_GetTick>
 80046ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046ec:	e008      	b.n	8004700 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ee:	f7fe fe81 	bl	80033f4 <HAL_GetTick>
 80046f2:	4602      	mov	r2, r0
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	1ad3      	subs	r3, r2, r3
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	d901      	bls.n	8004700 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e03d      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004700:	4b11      	ldr	r3, [pc, #68]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0f0      	beq.n	80046ee <HAL_RCC_OscConfig+0x46a>
 800470c:	e035      	b.n	800477a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800470e:	4b10      	ldr	r3, [pc, #64]	; (8004750 <HAL_RCC_OscConfig+0x4cc>)
 8004710:	2200      	movs	r2, #0
 8004712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004714:	f7fe fe6e 	bl	80033f4 <HAL_GetTick>
 8004718:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800471a:	e008      	b.n	800472e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471c:	f7fe fe6a 	bl	80033f4 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	2b02      	cmp	r3, #2
 8004728:	d901      	bls.n	800472e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e026      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800472e:	4b06      	ldr	r3, [pc, #24]	; (8004748 <HAL_RCC_OscConfig+0x4c4>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d1f0      	bne.n	800471c <HAL_RCC_OscConfig+0x498>
 800473a:	e01e      	b.n	800477a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69db      	ldr	r3, [r3, #28]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d107      	bne.n	8004754 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e019      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
 8004748:	40021000 	.word	0x40021000
 800474c:	40007000 	.word	0x40007000
 8004750:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004754:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <HAL_RCC_OscConfig+0x500>)
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	429a      	cmp	r2, r3
 8004766:	d106      	bne.n	8004776 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004772:	429a      	cmp	r2, r3
 8004774:	d001      	beq.n	800477a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3718      	adds	r7, #24
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40021000 	.word	0x40021000

08004788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e0d0      	b.n	800493e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800479c:	4b6a      	ldr	r3, [pc, #424]	; (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d910      	bls.n	80047cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047aa:	4b67      	ldr	r3, [pc, #412]	; (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 0207 	bic.w	r2, r3, #7
 80047b2:	4965      	ldr	r1, [pc, #404]	; (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	4313      	orrs	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ba:	4b63      	ldr	r3, [pc, #396]	; (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d001      	beq.n	80047cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e0b8      	b.n	800493e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d020      	beq.n	800481a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 0304 	and.w	r3, r3, #4
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047e4:	4b59      	ldr	r3, [pc, #356]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a58      	ldr	r2, [pc, #352]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80047ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d005      	beq.n	8004808 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047fc:	4b53      	ldr	r3, [pc, #332]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	4a52      	ldr	r2, [pc, #328]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004802:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004806:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004808:	4b50      	ldr	r3, [pc, #320]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	494d      	ldr	r1, [pc, #308]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d040      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d107      	bne.n	800483e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800482e:	4b47      	ldr	r3, [pc, #284]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d115      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e07f      	b.n	800493e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b02      	cmp	r3, #2
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004846:	4b41      	ldr	r3, [pc, #260]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e073      	b.n	800493e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004856:	4b3d      	ldr	r3, [pc, #244]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e06b      	b.n	800493e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004866:	4b39      	ldr	r3, [pc, #228]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f023 0203 	bic.w	r2, r3, #3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	4936      	ldr	r1, [pc, #216]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004874:	4313      	orrs	r3, r2
 8004876:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004878:	f7fe fdbc 	bl	80033f4 <HAL_GetTick>
 800487c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800487e:	e00a      	b.n	8004896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004880:	f7fe fdb8 	bl	80033f4 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	; 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e053      	b.n	800493e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004896:	4b2d      	ldr	r3, [pc, #180]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f003 020c 	and.w	r2, r3, #12
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d1eb      	bne.n	8004880 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048a8:	4b27      	ldr	r3, [pc, #156]	; (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d210      	bcs.n	80048d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048b6:	4b24      	ldr	r3, [pc, #144]	; (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f023 0207 	bic.w	r2, r3, #7
 80048be:	4922      	ldr	r1, [pc, #136]	; (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048c6:	4b20      	ldr	r3, [pc, #128]	; (8004948 <HAL_RCC_ClockConfig+0x1c0>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d001      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e032      	b.n	800493e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d008      	beq.n	80048f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048e4:	4b19      	ldr	r3, [pc, #100]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	4916      	ldr	r1, [pc, #88]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d009      	beq.n	8004916 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004902:	4b12      	ldr	r3, [pc, #72]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	00db      	lsls	r3, r3, #3
 8004910:	490e      	ldr	r1, [pc, #56]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 8004912:	4313      	orrs	r3, r2
 8004914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004916:	f000 f821 	bl	800495c <HAL_RCC_GetSysClockFreq>
 800491a:	4602      	mov	r2, r0
 800491c:	4b0b      	ldr	r3, [pc, #44]	; (800494c <HAL_RCC_ClockConfig+0x1c4>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	490a      	ldr	r1, [pc, #40]	; (8004950 <HAL_RCC_ClockConfig+0x1c8>)
 8004928:	5ccb      	ldrb	r3, [r1, r3]
 800492a:	fa22 f303 	lsr.w	r3, r2, r3
 800492e:	4a09      	ldr	r2, [pc, #36]	; (8004954 <HAL_RCC_ClockConfig+0x1cc>)
 8004930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004932:	4b09      	ldr	r3, [pc, #36]	; (8004958 <HAL_RCC_ClockConfig+0x1d0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe fd1a 	bl	8003370 <HAL_InitTick>

  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3710      	adds	r7, #16
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40022000 	.word	0x40022000
 800494c:	40021000 	.word	0x40021000
 8004950:	080074a0 	.word	0x080074a0
 8004954:	20000004 	.word	0x20000004
 8004958:	20000008 	.word	0x20000008

0800495c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800495c:	b490      	push	{r4, r7}
 800495e:	b08a      	sub	sp, #40	; 0x28
 8004960:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004962:	4b29      	ldr	r3, [pc, #164]	; (8004a08 <HAL_RCC_GetSysClockFreq+0xac>)
 8004964:	1d3c      	adds	r4, r7, #4
 8004966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800496c:	f240 2301 	movw	r3, #513	; 0x201
 8004970:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004972:	2300      	movs	r3, #0
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	2300      	movs	r3, #0
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	2300      	movs	r3, #0
 800497c:	627b      	str	r3, [r7, #36]	; 0x24
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004982:	2300      	movs	r3, #0
 8004984:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004986:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	f003 030c 	and.w	r3, r3, #12
 8004992:	2b04      	cmp	r3, #4
 8004994:	d002      	beq.n	800499c <HAL_RCC_GetSysClockFreq+0x40>
 8004996:	2b08      	cmp	r3, #8
 8004998:	d003      	beq.n	80049a2 <HAL_RCC_GetSysClockFreq+0x46>
 800499a:	e02b      	b.n	80049f4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800499c:	4b1c      	ldr	r3, [pc, #112]	; (8004a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 800499e:	623b      	str	r3, [r7, #32]
      break;
 80049a0:	e02b      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049a2:	69fb      	ldr	r3, [r7, #28]
 80049a4:	0c9b      	lsrs	r3, r3, #18
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	3328      	adds	r3, #40	; 0x28
 80049ac:	443b      	add	r3, r7
 80049ae:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049b2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d012      	beq.n	80049e4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049be:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <HAL_RCC_GetSysClockFreq+0xb0>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	0c5b      	lsrs	r3, r3, #17
 80049c4:	f003 0301 	and.w	r3, r3, #1
 80049c8:	3328      	adds	r3, #40	; 0x28
 80049ca:	443b      	add	r3, r7
 80049cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80049d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	4a0e      	ldr	r2, [pc, #56]	; (8004a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049d6:	fb03 f202 	mul.w	r2, r3, r2
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
 80049e2:	e004      	b.n	80049ee <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	4a0b      	ldr	r2, [pc, #44]	; (8004a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049e8:	fb02 f303 	mul.w	r3, r2, r3
 80049ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	623b      	str	r3, [r7, #32]
      break;
 80049f2:	e002      	b.n	80049fa <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80049f4:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 80049f6:	623b      	str	r3, [r7, #32]
      break;
 80049f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049fa:	6a3b      	ldr	r3, [r7, #32]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3728      	adds	r7, #40	; 0x28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bc90      	pop	{r4, r7}
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	0800747c 	.word	0x0800747c
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	00f42400 	.word	0x00f42400
 8004a14:	003d0900 	.word	0x003d0900
 8004a18:	007a1200 	.word	0x007a1200

08004a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a20:	4b02      	ldr	r3, [pc, #8]	; (8004a2c <HAL_RCC_GetHCLKFreq+0x10>)
 8004a22:	681b      	ldr	r3, [r3, #0]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	20000004 	.word	0x20000004

08004a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a34:	f7ff fff2 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	f003 0307 	and.w	r3, r3, #7
 8004a44:	4903      	ldr	r1, [pc, #12]	; (8004a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a46:	5ccb      	ldrb	r3, [r1, r3]
 8004a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000
 8004a54:	080074b0 	.word	0x080074b0

08004a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a5c:	f7ff ffde 	bl	8004a1c <HAL_RCC_GetHCLKFreq>
 8004a60:	4602      	mov	r2, r0
 8004a62:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	0adb      	lsrs	r3, r3, #11
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	4903      	ldr	r1, [pc, #12]	; (8004a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a6e:	5ccb      	ldrb	r3, [r1, r3]
 8004a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	080074b0 	.word	0x080074b0

08004a80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a88:	4b0a      	ldr	r3, [pc, #40]	; (8004ab4 <RCC_Delay+0x34>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a0a      	ldr	r2, [pc, #40]	; (8004ab8 <RCC_Delay+0x38>)
 8004a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a92:	0a5b      	lsrs	r3, r3, #9
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a9c:	bf00      	nop
  }
  while (Delay --);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	1e5a      	subs	r2, r3, #1
 8004aa2:	60fa      	str	r2, [r7, #12]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f9      	bne.n	8004a9c <RCC_Delay+0x1c>
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bc80      	pop	{r7}
 8004ab2:	4770      	bx	lr
 8004ab4:	20000004 	.word	0x20000004
 8004ab8:	10624dd3 	.word	0x10624dd3

08004abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e041      	b.n	8004b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fe f852 	bl	8002b8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3304      	adds	r3, #4
 8004af8:	4619      	mov	r1, r3
 8004afa:	4610      	mov	r0, r2
 8004afc:	f000 fd28 	bl	8005550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}

08004b5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b5a:	b580      	push	{r7, lr}
 8004b5c:	b082      	sub	sp, #8
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e041      	b.n	8004bf0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f839 	bl	8004bf8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2202      	movs	r2, #2
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3304      	adds	r3, #4
 8004b96:	4619      	mov	r1, r3
 8004b98:	4610      	mov	r0, r2
 8004b9a:	f000 fcd9 	bl	8005550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr
	...

08004c0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d109      	bne.n	8004c30 <HAL_TIM_PWM_Start+0x24>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	bf14      	ite	ne
 8004c28:	2301      	movne	r3, #1
 8004c2a:	2300      	moveq	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	e022      	b.n	8004c76 <HAL_TIM_PWM_Start+0x6a>
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d109      	bne.n	8004c4a <HAL_TIM_PWM_Start+0x3e>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	bf14      	ite	ne
 8004c42:	2301      	movne	r3, #1
 8004c44:	2300      	moveq	r3, #0
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	e015      	b.n	8004c76 <HAL_TIM_PWM_Start+0x6a>
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d109      	bne.n	8004c64 <HAL_TIM_PWM_Start+0x58>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	bf14      	ite	ne
 8004c5c:	2301      	movne	r3, #1
 8004c5e:	2300      	moveq	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e008      	b.n	8004c76 <HAL_TIM_PWM_Start+0x6a>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	bf14      	ite	ne
 8004c70:	2301      	movne	r3, #1
 8004c72:	2300      	moveq	r3, #0
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e072      	b.n	8004d64 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d104      	bne.n	8004c8e <HAL_TIM_PWM_Start+0x82>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2202      	movs	r2, #2
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c8c:	e013      	b.n	8004cb6 <HAL_TIM_PWM_Start+0xaa>
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d104      	bne.n	8004c9e <HAL_TIM_PWM_Start+0x92>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2202      	movs	r2, #2
 8004c98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c9c:	e00b      	b.n	8004cb6 <HAL_TIM_PWM_Start+0xaa>
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	2b08      	cmp	r3, #8
 8004ca2:	d104      	bne.n	8004cae <HAL_TIM_PWM_Start+0xa2>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cac:	e003      	b.n	8004cb6 <HAL_TIM_PWM_Start+0xaa>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	6839      	ldr	r1, [r7, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 ff02 	bl	8005ac8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a28      	ldr	r2, [pc, #160]	; (8004d6c <HAL_TIM_PWM_Start+0x160>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d004      	beq.n	8004cd8 <HAL_TIM_PWM_Start+0xcc>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a27      	ldr	r2, [pc, #156]	; (8004d70 <HAL_TIM_PWM_Start+0x164>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d101      	bne.n	8004cdc <HAL_TIM_PWM_Start+0xd0>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <HAL_TIM_PWM_Start+0xd2>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d007      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004cf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a1d      	ldr	r2, [pc, #116]	; (8004d6c <HAL_TIM_PWM_Start+0x160>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d018      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x122>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <HAL_TIM_PWM_Start+0x164>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d013      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x122>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0e:	d00e      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x122>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a17      	ldr	r2, [pc, #92]	; (8004d74 <HAL_TIM_PWM_Start+0x168>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d009      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x122>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a16      	ldr	r2, [pc, #88]	; (8004d78 <HAL_TIM_PWM_Start+0x16c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d004      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x122>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <HAL_TIM_PWM_Start+0x170>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d111      	bne.n	8004d52 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b06      	cmp	r3, #6
 8004d3e:	d010      	beq.n	8004d62 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d50:	e007      	b.n	8004d62 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0201 	orr.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40012c00 	.word	0x40012c00
 8004d70:	40013400 	.word	0x40013400
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40000800 	.word	0x40000800
 8004d7c:	40000c00 	.word	0x40000c00

08004d80 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e093      	b.n	8004ebc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d106      	bne.n	8004dae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f7fd ff3d 	bl	8002c28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dc4:	f023 0307 	bic.w	r3, r3, #7
 8004dc8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	f000 fbbb 	bl	8005550 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	697a      	ldr	r2, [r7, #20]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e02:	f023 0303 	bic.w	r3, r3, #3
 8004e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	689a      	ldr	r2, [r3, #8]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	4313      	orrs	r3, r2
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004e20:	f023 030c 	bic.w	r3, r3, #12
 8004e24:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	011a      	lsls	r2, r3, #4
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	031b      	lsls	r3, r3, #12
 8004e50:	4313      	orrs	r3, r2
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004e5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	697a      	ldr	r2, [r7, #20]
 8004e78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3718      	adds	r7, #24
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ed4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004edc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ee4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004eec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d110      	bne.n	8004f16 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ef4:	7bfb      	ldrb	r3, [r7, #15]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d102      	bne.n	8004f00 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004efa:	7b7b      	ldrb	r3, [r7, #13]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d001      	beq.n	8004f04 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e069      	b.n	8004fd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f14:	e031      	b.n	8004f7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d110      	bne.n	8004f3e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f1c:	7bbb      	ldrb	r3, [r7, #14]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d102      	bne.n	8004f28 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f22:	7b3b      	ldrb	r3, [r7, #12]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d001      	beq.n	8004f2c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e055      	b.n	8004fd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f3c:	e01d      	b.n	8004f7a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d108      	bne.n	8004f56 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f44:	7bbb      	ldrb	r3, [r7, #14]
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d105      	bne.n	8004f56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004f4a:	7b7b      	ldrb	r3, [r7, #13]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d102      	bne.n	8004f56 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004f50:	7b3b      	ldrb	r3, [r7, #12]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d001      	beq.n	8004f5a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e03e      	b.n	8004fd8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2202      	movs	r2, #2
 8004f66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2202      	movs	r2, #2
 8004f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <HAL_TIM_Encoder_Start+0xc4>
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d008      	beq.n	8004f98 <HAL_TIM_Encoder_Start+0xd4>
 8004f86:	e00f      	b.n	8004fa8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	2100      	movs	r1, #0
 8004f90:	4618      	mov	r0, r3
 8004f92:	f000 fd99 	bl	8005ac8 <TIM_CCxChannelCmd>
      break;
 8004f96:	e016      	b.n	8004fc6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	2104      	movs	r1, #4
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fd91 	bl	8005ac8 <TIM_CCxChannelCmd>
      break;
 8004fa6:	e00e      	b.n	8004fc6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2201      	movs	r2, #1
 8004fae:	2100      	movs	r1, #0
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fd89 	bl	8005ac8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	2104      	movs	r1, #4
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fd82 	bl	8005ac8 <TIM_CCxChannelCmd>
      break;
 8004fc4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 0201 	orr.w	r2, r2, #1
 8004fd4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3710      	adds	r7, #16
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0302 	and.w	r3, r3, #2
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d122      	bne.n	800503c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b02      	cmp	r3, #2
 8005002:	d11b      	bne.n	800503c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f06f 0202 	mvn.w	r2, #2
 800500c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fa78 	bl	8005518 <HAL_TIM_IC_CaptureCallback>
 8005028:	e005      	b.n	8005036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa6b 	bl	8005506 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fa7a 	bl	800552a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	f003 0304 	and.w	r3, r3, #4
 8005046:	2b04      	cmp	r3, #4
 8005048:	d122      	bne.n	8005090 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68db      	ldr	r3, [r3, #12]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b04      	cmp	r3, #4
 8005056:	d11b      	bne.n	8005090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0204 	mvn.w	r2, #4
 8005060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2202      	movs	r2, #2
 8005066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 fa4e 	bl	8005518 <HAL_TIM_IC_CaptureCallback>
 800507c:	e005      	b.n	800508a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fa41 	bl	8005506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fa50 	bl	800552a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0308 	and.w	r3, r3, #8
 800509a:	2b08      	cmp	r3, #8
 800509c:	d122      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d11b      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f06f 0208 	mvn.w	r2, #8
 80050b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2204      	movs	r2, #4
 80050ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	f003 0303 	and.w	r3, r3, #3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fa24 	bl	8005518 <HAL_TIM_IC_CaptureCallback>
 80050d0:	e005      	b.n	80050de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa17 	bl	8005506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fa26 	bl	800552a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0310 	and.w	r3, r3, #16
 80050ee:	2b10      	cmp	r3, #16
 80050f0:	d122      	bne.n	8005138 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b10      	cmp	r3, #16
 80050fe:	d11b      	bne.n	8005138 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0210 	mvn.w	r2, #16
 8005108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2208      	movs	r2, #8
 800510e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69db      	ldr	r3, [r3, #28]
 8005116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f9fa 	bl	8005518 <HAL_TIM_IC_CaptureCallback>
 8005124:	e005      	b.n	8005132 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f9ed 	bl	8005506 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f9fc 	bl	800552a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b01      	cmp	r3, #1
 8005144:	d10e      	bne.n	8005164 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b01      	cmp	r3, #1
 8005152:	d107      	bne.n	8005164 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0201 	mvn.w	r2, #1
 800515c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f9c8 	bl	80054f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516e:	2b80      	cmp	r3, #128	; 0x80
 8005170:	d10e      	bne.n	8005190 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517c:	2b80      	cmp	r3, #128	; 0x80
 800517e:	d107      	bne.n	8005190 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 fd86 	bl	8005c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519a:	2b40      	cmp	r3, #64	; 0x40
 800519c:	d10e      	bne.n	80051bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	d107      	bne.n	80051bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f9c0 	bl	800553c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	d10e      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b20      	cmp	r3, #32
 80051d6:	d107      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0220 	mvn.w	r2, #32
 80051e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fd51 	bl	8005c8a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005202:	2b01      	cmp	r3, #1
 8005204:	d101      	bne.n	800520a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005206:	2302      	movs	r3, #2
 8005208:	e0ac      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x174>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b0c      	cmp	r3, #12
 8005216:	f200 809f 	bhi.w	8005358 <HAL_TIM_PWM_ConfigChannel+0x168>
 800521a:	a201      	add	r2, pc, #4	; (adr r2, 8005220 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800521c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005220:	08005255 	.word	0x08005255
 8005224:	08005359 	.word	0x08005359
 8005228:	08005359 	.word	0x08005359
 800522c:	08005359 	.word	0x08005359
 8005230:	08005295 	.word	0x08005295
 8005234:	08005359 	.word	0x08005359
 8005238:	08005359 	.word	0x08005359
 800523c:	08005359 	.word	0x08005359
 8005240:	080052d7 	.word	0x080052d7
 8005244:	08005359 	.word	0x08005359
 8005248:	08005359 	.word	0x08005359
 800524c:	08005359 	.word	0x08005359
 8005250:	08005317 	.word	0x08005317
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68b9      	ldr	r1, [r7, #8]
 800525a:	4618      	mov	r0, r3
 800525c:	f000 f9f2 	bl	8005644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f042 0208 	orr.w	r2, r2, #8
 800526e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699a      	ldr	r2, [r3, #24]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f022 0204 	bic.w	r2, r2, #4
 800527e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6999      	ldr	r1, [r3, #24]
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	691a      	ldr	r2, [r3, #16]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	619a      	str	r2, [r3, #24]
      break;
 8005292:	e062      	b.n	800535a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68b9      	ldr	r1, [r7, #8]
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fa42 	bl	8005724 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699a      	ldr	r2, [r3, #24]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6999      	ldr	r1, [r3, #24]
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	021a      	lsls	r2, r3, #8
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	619a      	str	r2, [r3, #24]
      break;
 80052d4:	e041      	b.n	800535a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fa95 	bl	800580c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f042 0208 	orr.w	r2, r2, #8
 80052f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	69da      	ldr	r2, [r3, #28]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0204 	bic.w	r2, r2, #4
 8005300:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69d9      	ldr	r1, [r3, #28]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	61da      	str	r2, [r3, #28]
      break;
 8005314:	e021      	b.n	800535a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68b9      	ldr	r1, [r7, #8]
 800531c:	4618      	mov	r0, r3
 800531e:	f000 fae9 	bl	80058f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69da      	ldr	r2, [r3, #28]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	69da      	ldr	r2, [r3, #28]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69d9      	ldr	r1, [r3, #28]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	021a      	lsls	r2, r3, #8
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	61da      	str	r2, [r3, #28]
      break;
 8005356:	e000      	b.n	800535a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005358:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800537c:	2b01      	cmp	r3, #1
 800537e:	d101      	bne.n	8005384 <HAL_TIM_ConfigClockSource+0x18>
 8005380:	2302      	movs	r3, #2
 8005382:	e0b3      	b.n	80054ec <HAL_TIM_ConfigClockSource+0x180>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053bc:	d03e      	beq.n	800543c <HAL_TIM_ConfigClockSource+0xd0>
 80053be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053c2:	f200 8087 	bhi.w	80054d4 <HAL_TIM_ConfigClockSource+0x168>
 80053c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ca:	f000 8085 	beq.w	80054d8 <HAL_TIM_ConfigClockSource+0x16c>
 80053ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d2:	d87f      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x168>
 80053d4:	2b70      	cmp	r3, #112	; 0x70
 80053d6:	d01a      	beq.n	800540e <HAL_TIM_ConfigClockSource+0xa2>
 80053d8:	2b70      	cmp	r3, #112	; 0x70
 80053da:	d87b      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x168>
 80053dc:	2b60      	cmp	r3, #96	; 0x60
 80053de:	d050      	beq.n	8005482 <HAL_TIM_ConfigClockSource+0x116>
 80053e0:	2b60      	cmp	r3, #96	; 0x60
 80053e2:	d877      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x168>
 80053e4:	2b50      	cmp	r3, #80	; 0x50
 80053e6:	d03c      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0xf6>
 80053e8:	2b50      	cmp	r3, #80	; 0x50
 80053ea:	d873      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x168>
 80053ec:	2b40      	cmp	r3, #64	; 0x40
 80053ee:	d058      	beq.n	80054a2 <HAL_TIM_ConfigClockSource+0x136>
 80053f0:	2b40      	cmp	r3, #64	; 0x40
 80053f2:	d86f      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x168>
 80053f4:	2b30      	cmp	r3, #48	; 0x30
 80053f6:	d064      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0x156>
 80053f8:	2b30      	cmp	r3, #48	; 0x30
 80053fa:	d86b      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x168>
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d060      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0x156>
 8005400:	2b20      	cmp	r3, #32
 8005402:	d867      	bhi.n	80054d4 <HAL_TIM_ConfigClockSource+0x168>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d05c      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0x156>
 8005408:	2b10      	cmp	r3, #16
 800540a:	d05a      	beq.n	80054c2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800540c:	e062      	b.n	80054d4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6899      	ldr	r1, [r3, #8]
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f000 fb34 	bl	8005a8a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005430:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	609a      	str	r2, [r3, #8]
      break;
 800543a:	e04e      	b.n	80054da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6818      	ldr	r0, [r3, #0]
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	6899      	ldr	r1, [r3, #8]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f000 fb1d 	bl	8005a8a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800545e:	609a      	str	r2, [r3, #8]
      break;
 8005460:	e03b      	b.n	80054da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6859      	ldr	r1, [r3, #4]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	461a      	mov	r2, r3
 8005470:	f000 fa94 	bl	800599c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2150      	movs	r1, #80	; 0x50
 800547a:	4618      	mov	r0, r3
 800547c:	f000 faeb 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 8005480:	e02b      	b.n	80054da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	6859      	ldr	r1, [r3, #4]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	461a      	mov	r2, r3
 8005490:	f000 fab2 	bl	80059f8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2160      	movs	r1, #96	; 0x60
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fadb 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 80054a0:	e01b      	b.n	80054da <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	6859      	ldr	r1, [r3, #4]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	461a      	mov	r2, r3
 80054b0:	f000 fa74 	bl	800599c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2140      	movs	r1, #64	; 0x40
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 facb 	bl	8005a56 <TIM_ITRx_SetConfig>
      break;
 80054c0:	e00b      	b.n	80054da <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4619      	mov	r1, r3
 80054cc:	4610      	mov	r0, r2
 80054ce:	f000 fac2 	bl	8005a56 <TIM_ITRx_SetConfig>
        break;
 80054d2:	e002      	b.n	80054da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054d4:	bf00      	nop
 80054d6:	e000      	b.n	80054da <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	bc80      	pop	{r7}
 8005504:	4770      	bx	lr

08005506 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	bc80      	pop	{r7}
 8005516:	4770      	bx	lr

08005518 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	bc80      	pop	{r7}
 8005528:	4770      	bx	lr

0800552a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr
	...

08005550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a33      	ldr	r2, [pc, #204]	; (8005630 <TIM_Base_SetConfig+0xe0>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d013      	beq.n	8005590 <TIM_Base_SetConfig+0x40>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a32      	ldr	r2, [pc, #200]	; (8005634 <TIM_Base_SetConfig+0xe4>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00f      	beq.n	8005590 <TIM_Base_SetConfig+0x40>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005576:	d00b      	beq.n	8005590 <TIM_Base_SetConfig+0x40>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a2f      	ldr	r2, [pc, #188]	; (8005638 <TIM_Base_SetConfig+0xe8>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <TIM_Base_SetConfig+0x40>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a2e      	ldr	r2, [pc, #184]	; (800563c <TIM_Base_SetConfig+0xec>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <TIM_Base_SetConfig+0x40>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a2d      	ldr	r2, [pc, #180]	; (8005640 <TIM_Base_SetConfig+0xf0>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d108      	bne.n	80055a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a22      	ldr	r2, [pc, #136]	; (8005630 <TIM_Base_SetConfig+0xe0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <TIM_Base_SetConfig+0x82>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a21      	ldr	r2, [pc, #132]	; (8005634 <TIM_Base_SetConfig+0xe4>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00f      	beq.n	80055d2 <TIM_Base_SetConfig+0x82>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055b8:	d00b      	beq.n	80055d2 <TIM_Base_SetConfig+0x82>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a1e      	ldr	r2, [pc, #120]	; (8005638 <TIM_Base_SetConfig+0xe8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_Base_SetConfig+0x82>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a1d      	ldr	r2, [pc, #116]	; (800563c <TIM_Base_SetConfig+0xec>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_Base_SetConfig+0x82>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a1c      	ldr	r2, [pc, #112]	; (8005640 <TIM_Base_SetConfig+0xf0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d108      	bne.n	80055e4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a09      	ldr	r2, [pc, #36]	; (8005630 <TIM_Base_SetConfig+0xe0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_Base_SetConfig+0xc8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a08      	ldr	r2, [pc, #32]	; (8005634 <TIM_Base_SetConfig+0xe4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d103      	bne.n	8005620 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	615a      	str	r2, [r3, #20]
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	bc80      	pop	{r7}
 800562e:	4770      	bx	lr
 8005630:	40012c00 	.word	0x40012c00
 8005634:	40013400 	.word	0x40013400
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	40000c00 	.word	0x40000c00

08005644 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f023 0201 	bic.w	r2, r3, #1
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0303 	bic.w	r3, r3, #3
 800567a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f023 0302 	bic.w	r3, r3, #2
 800568c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a20      	ldr	r2, [pc, #128]	; (800571c <TIM_OC1_SetConfig+0xd8>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d003      	beq.n	80056a8 <TIM_OC1_SetConfig+0x64>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a1f      	ldr	r2, [pc, #124]	; (8005720 <TIM_OC1_SetConfig+0xdc>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d10c      	bne.n	80056c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0308 	bic.w	r3, r3, #8
 80056ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f023 0304 	bic.w	r3, r3, #4
 80056c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a15      	ldr	r2, [pc, #84]	; (800571c <TIM_OC1_SetConfig+0xd8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_OC1_SetConfig+0x8e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a14      	ldr	r2, [pc, #80]	; (8005720 <TIM_OC1_SetConfig+0xdc>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d111      	bne.n	80056f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	699b      	ldr	r3, [r3, #24]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	621a      	str	r2, [r3, #32]
}
 8005710:	bf00      	nop
 8005712:	371c      	adds	r7, #28
 8005714:	46bd      	mov	sp, r7
 8005716:	bc80      	pop	{r7}
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	40012c00 	.word	0x40012c00
 8005720:	40013400 	.word	0x40013400

08005724 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	f023 0210 	bic.w	r2, r3, #16
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800575a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	021b      	lsls	r3, r3, #8
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4313      	orrs	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f023 0320 	bic.w	r3, r3, #32
 800576e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a21      	ldr	r2, [pc, #132]	; (8005804 <TIM_OC2_SetConfig+0xe0>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_OC2_SetConfig+0x68>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a20      	ldr	r2, [pc, #128]	; (8005808 <TIM_OC2_SetConfig+0xe4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d10d      	bne.n	80057a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005792:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	011b      	lsls	r3, r3, #4
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a16      	ldr	r2, [pc, #88]	; (8005804 <TIM_OC2_SetConfig+0xe0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_OC2_SetConfig+0x94>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <TIM_OC2_SetConfig+0xe4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d113      	bne.n	80057e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	621a      	str	r2, [r3, #32]
}
 80057fa:	bf00      	nop
 80057fc:	371c      	adds	r7, #28
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr
 8005804:	40012c00 	.word	0x40012c00
 8005808:	40013400 	.word	0x40013400

0800580c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800580c:	b480      	push	{r7}
 800580e:	b087      	sub	sp, #28
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800583a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0303 	bic.w	r3, r3, #3
 8005842:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	4313      	orrs	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005854:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a21      	ldr	r2, [pc, #132]	; (80058ec <TIM_OC3_SetConfig+0xe0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d003      	beq.n	8005872 <TIM_OC3_SetConfig+0x66>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a20      	ldr	r2, [pc, #128]	; (80058f0 <TIM_OC3_SetConfig+0xe4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d10d      	bne.n	800588e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005878:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	021b      	lsls	r3, r3, #8
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800588c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a16      	ldr	r2, [pc, #88]	; (80058ec <TIM_OC3_SetConfig+0xe0>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d003      	beq.n	800589e <TIM_OC3_SetConfig+0x92>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a15      	ldr	r2, [pc, #84]	; (80058f0 <TIM_OC3_SetConfig+0xe4>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d113      	bne.n	80058c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	011b      	lsls	r3, r3, #4
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	011b      	lsls	r3, r3, #4
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	685a      	ldr	r2, [r3, #4]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	697a      	ldr	r2, [r7, #20]
 80058de:	621a      	str	r2, [r3, #32]
}
 80058e0:	bf00      	nop
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bc80      	pop	{r7}
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	40012c00 	.word	0x40012c00
 80058f0:	40013400 	.word	0x40013400

080058f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005922:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800592a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	021b      	lsls	r3, r3, #8
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800593e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	031b      	lsls	r3, r3, #12
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a11      	ldr	r2, [pc, #68]	; (8005994 <TIM_OC4_SetConfig+0xa0>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d003      	beq.n	800595c <TIM_OC4_SetConfig+0x68>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a10      	ldr	r2, [pc, #64]	; (8005998 <TIM_OC4_SetConfig+0xa4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d109      	bne.n	8005970 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005962:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	019b      	lsls	r3, r3, #6
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	4313      	orrs	r3, r2
 800596e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	621a      	str	r2, [r3, #32]
}
 800598a:	bf00      	nop
 800598c:	371c      	adds	r7, #28
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40013400 	.word	0x40013400

0800599c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f023 0201 	bic.w	r2, r3, #1
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	011b      	lsls	r3, r3, #4
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	f023 030a 	bic.w	r3, r3, #10
 80059d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4313      	orrs	r3, r2
 80059e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	621a      	str	r2, [r3, #32]
}
 80059ee:	bf00      	nop
 80059f0:	371c      	adds	r7, #28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bc80      	pop	{r7}
 80059f6:	4770      	bx	lr

080059f8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	f023 0210 	bic.w	r2, r3, #16
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a22:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	031b      	lsls	r3, r3, #12
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a34:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	697a      	ldr	r2, [r7, #20]
 8005a44:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	621a      	str	r2, [r3, #32]
}
 8005a4c:	bf00      	nop
 8005a4e:	371c      	adds	r7, #28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bc80      	pop	{r7}
 8005a54:	4770      	bx	lr

08005a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f043 0307 	orr.w	r3, r3, #7
 8005a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	609a      	str	r2, [r3, #8]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr

08005a8a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b087      	sub	sp, #28
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	60b9      	str	r1, [r7, #8]
 8005a94:	607a      	str	r2, [r7, #4]
 8005a96:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aa4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	021a      	lsls	r2, r3, #8
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	431a      	orrs	r2, r3
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	609a      	str	r2, [r3, #8]
}
 8005abe:	bf00      	nop
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bc80      	pop	{r7}
 8005ac6:	4770      	bx	lr

08005ac8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2201      	movs	r2, #1
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a1a      	ldr	r2, [r3, #32]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	43db      	mvns	r3, r3
 8005aea:	401a      	ands	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a1a      	ldr	r2, [r3, #32]
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	fa01 f303 	lsl.w	r3, r1, r3
 8005b00:	431a      	orrs	r2, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	621a      	str	r2, [r3, #32]
}
 8005b06:	bf00      	nop
 8005b08:	371c      	adds	r7, #28
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e050      	b.n	8005bca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4313      	orrs	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1b      	ldr	r2, [pc, #108]	; (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d018      	beq.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d013      	beq.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7e:	d00e      	beq.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a15      	ldr	r2, [pc, #84]	; (8005bdc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d009      	beq.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a14      	ldr	r2, [pc, #80]	; (8005be0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d004      	beq.n	8005b9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a12      	ldr	r2, [pc, #72]	; (8005be4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d10c      	bne.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	68ba      	ldr	r2, [r7, #8]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bc80      	pop	{r7}
 8005bd2:	4770      	bx	lr
 8005bd4:	40012c00 	.word	0x40012c00
 8005bd8:	40013400 	.word	0x40013400
 8005bdc:	40000400 	.word	0x40000400
 8005be0:	40000800 	.word	0x40000800
 8005be4:	40000c00 	.word	0x40000c00

08005be8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e03d      	b.n	8005c80 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	69db      	ldr	r3, [r3, #28]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bc80      	pop	{r7}
 8005c88:	4770      	bx	lr

08005c8a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bc80      	pop	{r7}
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bc80      	pop	{r7}
 8005cac:	4770      	bx	lr

08005cae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e03f      	b.n	8005d40 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d106      	bne.n	8005cda <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f7fd f8ed 	bl	8002eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2224      	movs	r2, #36	; 0x24
 8005cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cf0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 fab0 	bl	8006258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	691a      	ldr	r2, [r3, #16]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d06:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d16:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68da      	ldr	r2, [r3, #12]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d26:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2220      	movs	r2, #32
 8005d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	4613      	mov	r3, r2
 8005d56:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d17c      	bne.n	8005e62 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_UART_Transmit+0x2c>
 8005d6e:	88fb      	ldrh	r3, [r7, #6]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e075      	b.n	8005e64 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d101      	bne.n	8005d86 <HAL_UART_Transmit+0x3e>
 8005d82:	2302      	movs	r3, #2
 8005d84:	e06e      	b.n	8005e64 <HAL_UART_Transmit+0x11c>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2201      	movs	r2, #1
 8005d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2221      	movs	r2, #33	; 0x21
 8005d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d9c:	f7fd fb2a 	bl	80033f4 <HAL_GetTick>
 8005da0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	88fa      	ldrh	r2, [r7, #6]
 8005da6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	88fa      	ldrh	r2, [r7, #6]
 8005dac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db6:	d108      	bne.n	8005dca <HAL_UART_Transmit+0x82>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d104      	bne.n	8005dca <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	e003      	b.n	8005dd2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005dda:	e02a      	b.n	8005e32 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2200      	movs	r2, #0
 8005de4:	2180      	movs	r1, #128	; 0x80
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f946 	bl	8006078 <UART_WaitOnFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e036      	b.n	8005e64 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10b      	bne.n	8005e14 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e0a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	3302      	adds	r3, #2
 8005e10:	61bb      	str	r3, [r7, #24]
 8005e12:	e007      	b.n	8005e24 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	781a      	ldrb	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	3301      	adds	r3, #1
 8005e22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e28:	b29b      	uxth	r3, r3
 8005e2a:	3b01      	subs	r3, #1
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1cf      	bne.n	8005ddc <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2200      	movs	r2, #0
 8005e44:	2140      	movs	r1, #64	; 0x40
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f916 	bl	8006078 <UART_WaitOnFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e006      	b.n	8005e64 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e000      	b.n	8005e64 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e62:	2302      	movs	r3, #2
  }
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3720      	adds	r7, #32
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	d11d      	bne.n	8005ec2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <HAL_UART_Receive_DMA+0x26>
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e016      	b.n	8005ec4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_UART_Receive_DMA+0x38>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e00f      	b.n	8005ec4 <HAL_UART_Receive_DMA+0x58>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005eb2:	88fb      	ldrh	r3, [r7, #6]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f927 	bl	800610c <UART_Start_Receive_DMA>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	e000      	b.n	8005ec4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ec2:	2302      	movs	r3, #2
  }
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc80      	pop	{r7}
 8005edc:	4770      	bx	lr

08005ede <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005ee6:	bf00      	nop
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bc80      	pop	{r7}
 8005eee:	4770      	bx	lr

08005ef0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ef8:	bf00      	nop
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bc80      	pop	{r7}
 8005f00:	4770      	bx	lr

08005f02 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f02:	b480      	push	{r7}
 8005f04:	b083      	sub	sp, #12
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	460b      	mov	r3, r1
 8005f0c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bc80      	pop	{r7}
 8005f16:	4770      	bx	lr

08005f18 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f24:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d12a      	bne.n	8005f8a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	68da      	ldr	r2, [r3, #12]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f48:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695a      	ldr	r2, [r3, #20]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f022 0201 	bic.w	r2, r2, #1
 8005f58:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	695a      	ldr	r2, [r3, #20]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f68:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d107      	bne.n	8005f8a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68da      	ldr	r2, [r3, #12]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f022 0210 	bic.w	r2, r2, #16
 8005f88:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d106      	bne.n	8005fa0 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f96:	4619      	mov	r1, r3
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f7ff ffb2 	bl	8005f02 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f9e:	e002      	b.n	8005fa6 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8005fa0:	68f8      	ldr	r0, [r7, #12]
 8005fa2:	f7ff ff93 	bl	8005ecc <HAL_UART_RxCpltCallback>
}
 8005fa6:	bf00      	nop
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d108      	bne.n	8005fd6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fc8:	085b      	lsrs	r3, r3, #1
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	4619      	mov	r1, r3
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	f7ff ff97 	bl	8005f02 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fd4:	e002      	b.n	8005fdc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7ff ff81 	bl	8005ede <HAL_UART_RxHalfCpltCallback>
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006000:	2b00      	cmp	r3, #0
 8006002:	bf14      	ite	ne
 8006004:	2301      	movne	r3, #1
 8006006:	2300      	moveq	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b21      	cmp	r3, #33	; 0x21
 8006016:	d108      	bne.n	800602a <UART_DMAError+0x46>
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d005      	beq.n	800602a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	2200      	movs	r2, #0
 8006022:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006024:	68b8      	ldr	r0, [r7, #8]
 8006026:	f000 f8d5 	bl	80061d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006034:	2b00      	cmp	r3, #0
 8006036:	bf14      	ite	ne
 8006038:	2301      	movne	r3, #1
 800603a:	2300      	moveq	r3, #0
 800603c:	b2db      	uxtb	r3, r3
 800603e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b22      	cmp	r3, #34	; 0x22
 800604a:	d108      	bne.n	800605e <UART_DMAError+0x7a>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2200      	movs	r2, #0
 8006056:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006058:	68b8      	ldr	r0, [r7, #8]
 800605a:	f000 f8d0 	bl	80061fe <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006062:	f043 0210 	orr.w	r2, r3, #16
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800606a:	68b8      	ldr	r0, [r7, #8]
 800606c:	f7ff ff40 	bl	8005ef0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006070:	bf00      	nop
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006088:	e02c      	b.n	80060e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006090:	d028      	beq.n	80060e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d007      	beq.n	80060a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006098:	f7fd f9ac 	bl	80033f4 <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d21d      	bcs.n	80060e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68da      	ldr	r2, [r3, #12]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80060b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	695a      	ldr	r2, [r3, #20]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0201 	bic.w	r2, r2, #1
 80060c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2220      	movs	r2, #32
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2220      	movs	r2, #32
 80060d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	e00f      	b.n	8006104 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	4013      	ands	r3, r2
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	bf0c      	ite	eq
 80060f4:	2301      	moveq	r3, #1
 80060f6:	2300      	movne	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	461a      	mov	r2, r3
 80060fc:	79fb      	ldrb	r3, [r7, #7]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d0c3      	beq.n	800608a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3710      	adds	r7, #16
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b086      	sub	sp, #24
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	4613      	mov	r3, r2
 8006118:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	88fa      	ldrh	r2, [r7, #6]
 8006124:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2222      	movs	r2, #34	; 0x22
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006138:	4a23      	ldr	r2, [pc, #140]	; (80061c8 <UART_Start_Receive_DMA+0xbc>)
 800613a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006140:	4a22      	ldr	r2, [pc, #136]	; (80061cc <UART_Start_Receive_DMA+0xc0>)
 8006142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006148:	4a21      	ldr	r2, [pc, #132]	; (80061d0 <UART_Start_Receive_DMA+0xc4>)
 800614a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006150:	2200      	movs	r2, #0
 8006152:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006154:	f107 0308 	add.w	r3, r7, #8
 8006158:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3304      	adds	r3, #4
 8006164:	4619      	mov	r1, r3
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	88fb      	ldrh	r3, [r7, #6]
 800616c:	f7fd fad0 	bl	8003710 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006170:	2300      	movs	r3, #0
 8006172:	613b      	str	r3, [r7, #16]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	613b      	str	r3, [r7, #16]
 8006184:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68da      	ldr	r2, [r3, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800619c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695a      	ldr	r2, [r3, #20]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f042 0201 	orr.w	r2, r2, #1
 80061ac:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695a      	ldr	r2, [r3, #20]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061bc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	08005f19 	.word	0x08005f19
 80061cc:	08005faf 	.word	0x08005faf
 80061d0:	08005fe5 	.word	0x08005fe5

080061d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80061ea:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bc80      	pop	{r7}
 80061fc:	4770      	bx	lr

080061fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006214:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695a      	ldr	r2, [r3, #20]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0201 	bic.w	r2, r2, #1
 8006224:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	2b01      	cmp	r3, #1
 800622c:	d107      	bne.n	800623e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68da      	ldr	r2, [r3, #12]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0210 	bic.w	r2, r2, #16
 800623c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	bc80      	pop	{r7}
 8006254:	4770      	bx	lr
	...

08006258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	68da      	ldr	r2, [r3, #12]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	431a      	orrs	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	4313      	orrs	r3, r2
 8006286:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006292:	f023 030c 	bic.w	r3, r3, #12
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6812      	ldr	r2, [r2, #0]
 800629a:	68b9      	ldr	r1, [r7, #8]
 800629c:	430b      	orrs	r3, r1
 800629e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	699a      	ldr	r2, [r3, #24]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a2c      	ldr	r2, [pc, #176]	; (800636c <UART_SetConfig+0x114>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d103      	bne.n	80062c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80062c0:	f7fe fbca 	bl	8004a58 <HAL_RCC_GetPCLK2Freq>
 80062c4:	60f8      	str	r0, [r7, #12]
 80062c6:	e002      	b.n	80062ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80062c8:	f7fe fbb2 	bl	8004a30 <HAL_RCC_GetPCLK1Freq>
 80062cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4613      	mov	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4413      	add	r3, r2
 80062d6:	009a      	lsls	r2, r3, #2
 80062d8:	441a      	add	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	4a22      	ldr	r2, [pc, #136]	; (8006370 <UART_SetConfig+0x118>)
 80062e6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ea:	095b      	lsrs	r3, r3, #5
 80062ec:	0119      	lsls	r1, r3, #4
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	4613      	mov	r3, r2
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	4413      	add	r3, r2
 80062f6:	009a      	lsls	r2, r3, #2
 80062f8:	441a      	add	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	fbb2 f2f3 	udiv	r2, r2, r3
 8006304:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <UART_SetConfig+0x118>)
 8006306:	fba3 0302 	umull	r0, r3, r3, r2
 800630a:	095b      	lsrs	r3, r3, #5
 800630c:	2064      	movs	r0, #100	; 0x64
 800630e:	fb00 f303 	mul.w	r3, r0, r3
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	011b      	lsls	r3, r3, #4
 8006316:	3332      	adds	r3, #50	; 0x32
 8006318:	4a15      	ldr	r2, [pc, #84]	; (8006370 <UART_SetConfig+0x118>)
 800631a:	fba2 2303 	umull	r2, r3, r2, r3
 800631e:	095b      	lsrs	r3, r3, #5
 8006320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006324:	4419      	add	r1, r3
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	009a      	lsls	r2, r3, #2
 8006330:	441a      	add	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	fbb2 f2f3 	udiv	r2, r2, r3
 800633c:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <UART_SetConfig+0x118>)
 800633e:	fba3 0302 	umull	r0, r3, r3, r2
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	2064      	movs	r0, #100	; 0x64
 8006346:	fb00 f303 	mul.w	r3, r0, r3
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	3332      	adds	r3, #50	; 0x32
 8006350:	4a07      	ldr	r2, [pc, #28]	; (8006370 <UART_SetConfig+0x118>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	f003 020f 	and.w	r2, r3, #15
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	440a      	add	r2, r1
 8006362:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}
 800636c:	40013800 	.word	0x40013800
 8006370:	51eb851f 	.word	0x51eb851f

08006374 <__assert_func>:
 8006374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006376:	4614      	mov	r4, r2
 8006378:	461a      	mov	r2, r3
 800637a:	4b09      	ldr	r3, [pc, #36]	; (80063a0 <__assert_func+0x2c>)
 800637c:	4605      	mov	r5, r0
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	68d8      	ldr	r0, [r3, #12]
 8006382:	b14c      	cbz	r4, 8006398 <__assert_func+0x24>
 8006384:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <__assert_func+0x30>)
 8006386:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800638a:	9100      	str	r1, [sp, #0]
 800638c:	462b      	mov	r3, r5
 800638e:	4906      	ldr	r1, [pc, #24]	; (80063a8 <__assert_func+0x34>)
 8006390:	f000 f814 	bl	80063bc <fiprintf>
 8006394:	f000 fbfe 	bl	8006b94 <abort>
 8006398:	4b04      	ldr	r3, [pc, #16]	; (80063ac <__assert_func+0x38>)
 800639a:	461c      	mov	r4, r3
 800639c:	e7f3      	b.n	8006386 <__assert_func+0x12>
 800639e:	bf00      	nop
 80063a0:	20000010 	.word	0x20000010
 80063a4:	080074b8 	.word	0x080074b8
 80063a8:	080074c5 	.word	0x080074c5
 80063ac:	080074f3 	.word	0x080074f3

080063b0 <__errno>:
 80063b0:	4b01      	ldr	r3, [pc, #4]	; (80063b8 <__errno+0x8>)
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	20000010 	.word	0x20000010

080063bc <fiprintf>:
 80063bc:	b40e      	push	{r1, r2, r3}
 80063be:	b503      	push	{r0, r1, lr}
 80063c0:	4601      	mov	r1, r0
 80063c2:	ab03      	add	r3, sp, #12
 80063c4:	4805      	ldr	r0, [pc, #20]	; (80063dc <fiprintf+0x20>)
 80063c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80063ca:	6800      	ldr	r0, [r0, #0]
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	f000 f85b 	bl	8006488 <_vfiprintf_r>
 80063d2:	b002      	add	sp, #8
 80063d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80063d8:	b003      	add	sp, #12
 80063da:	4770      	bx	lr
 80063dc:	20000010 	.word	0x20000010

080063e0 <__libc_init_array>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	2600      	movs	r6, #0
 80063e4:	4d0c      	ldr	r5, [pc, #48]	; (8006418 <__libc_init_array+0x38>)
 80063e6:	4c0d      	ldr	r4, [pc, #52]	; (800641c <__libc_init_array+0x3c>)
 80063e8:	1b64      	subs	r4, r4, r5
 80063ea:	10a4      	asrs	r4, r4, #2
 80063ec:	42a6      	cmp	r6, r4
 80063ee:	d109      	bne.n	8006404 <__libc_init_array+0x24>
 80063f0:	f001 f810 	bl	8007414 <_init>
 80063f4:	2600      	movs	r6, #0
 80063f6:	4d0a      	ldr	r5, [pc, #40]	; (8006420 <__libc_init_array+0x40>)
 80063f8:	4c0a      	ldr	r4, [pc, #40]	; (8006424 <__libc_init_array+0x44>)
 80063fa:	1b64      	subs	r4, r4, r5
 80063fc:	10a4      	asrs	r4, r4, #2
 80063fe:	42a6      	cmp	r6, r4
 8006400:	d105      	bne.n	800640e <__libc_init_array+0x2e>
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	f855 3b04 	ldr.w	r3, [r5], #4
 8006408:	4798      	blx	r3
 800640a:	3601      	adds	r6, #1
 800640c:	e7ee      	b.n	80063ec <__libc_init_array+0xc>
 800640e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006412:	4798      	blx	r3
 8006414:	3601      	adds	r6, #1
 8006416:	e7f2      	b.n	80063fe <__libc_init_array+0x1e>
 8006418:	0800758c 	.word	0x0800758c
 800641c:	0800758c 	.word	0x0800758c
 8006420:	0800758c 	.word	0x0800758c
 8006424:	08007590 	.word	0x08007590

08006428 <memset>:
 8006428:	4603      	mov	r3, r0
 800642a:	4402      	add	r2, r0
 800642c:	4293      	cmp	r3, r2
 800642e:	d100      	bne.n	8006432 <memset+0xa>
 8006430:	4770      	bx	lr
 8006432:	f803 1b01 	strb.w	r1, [r3], #1
 8006436:	e7f9      	b.n	800642c <memset+0x4>

08006438 <__sfputc_r>:
 8006438:	6893      	ldr	r3, [r2, #8]
 800643a:	b410      	push	{r4}
 800643c:	3b01      	subs	r3, #1
 800643e:	2b00      	cmp	r3, #0
 8006440:	6093      	str	r3, [r2, #8]
 8006442:	da07      	bge.n	8006454 <__sfputc_r+0x1c>
 8006444:	6994      	ldr	r4, [r2, #24]
 8006446:	42a3      	cmp	r3, r4
 8006448:	db01      	blt.n	800644e <__sfputc_r+0x16>
 800644a:	290a      	cmp	r1, #10
 800644c:	d102      	bne.n	8006454 <__sfputc_r+0x1c>
 800644e:	bc10      	pop	{r4}
 8006450:	f000 bae0 	b.w	8006a14 <__swbuf_r>
 8006454:	6813      	ldr	r3, [r2, #0]
 8006456:	1c58      	adds	r0, r3, #1
 8006458:	6010      	str	r0, [r2, #0]
 800645a:	7019      	strb	r1, [r3, #0]
 800645c:	4608      	mov	r0, r1
 800645e:	bc10      	pop	{r4}
 8006460:	4770      	bx	lr

08006462 <__sfputs_r>:
 8006462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006464:	4606      	mov	r6, r0
 8006466:	460f      	mov	r7, r1
 8006468:	4614      	mov	r4, r2
 800646a:	18d5      	adds	r5, r2, r3
 800646c:	42ac      	cmp	r4, r5
 800646e:	d101      	bne.n	8006474 <__sfputs_r+0x12>
 8006470:	2000      	movs	r0, #0
 8006472:	e007      	b.n	8006484 <__sfputs_r+0x22>
 8006474:	463a      	mov	r2, r7
 8006476:	4630      	mov	r0, r6
 8006478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800647c:	f7ff ffdc 	bl	8006438 <__sfputc_r>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d1f3      	bne.n	800646c <__sfputs_r+0xa>
 8006484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006488 <_vfiprintf_r>:
 8006488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800648c:	460d      	mov	r5, r1
 800648e:	4614      	mov	r4, r2
 8006490:	4698      	mov	r8, r3
 8006492:	4606      	mov	r6, r0
 8006494:	b09d      	sub	sp, #116	; 0x74
 8006496:	b118      	cbz	r0, 80064a0 <_vfiprintf_r+0x18>
 8006498:	6983      	ldr	r3, [r0, #24]
 800649a:	b90b      	cbnz	r3, 80064a0 <_vfiprintf_r+0x18>
 800649c:	f000 fc98 	bl	8006dd0 <__sinit>
 80064a0:	4b89      	ldr	r3, [pc, #548]	; (80066c8 <_vfiprintf_r+0x240>)
 80064a2:	429d      	cmp	r5, r3
 80064a4:	d11b      	bne.n	80064de <_vfiprintf_r+0x56>
 80064a6:	6875      	ldr	r5, [r6, #4]
 80064a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064aa:	07d9      	lsls	r1, r3, #31
 80064ac:	d405      	bmi.n	80064ba <_vfiprintf_r+0x32>
 80064ae:	89ab      	ldrh	r3, [r5, #12]
 80064b0:	059a      	lsls	r2, r3, #22
 80064b2:	d402      	bmi.n	80064ba <_vfiprintf_r+0x32>
 80064b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064b6:	f000 fd29 	bl	8006f0c <__retarget_lock_acquire_recursive>
 80064ba:	89ab      	ldrh	r3, [r5, #12]
 80064bc:	071b      	lsls	r3, r3, #28
 80064be:	d501      	bpl.n	80064c4 <_vfiprintf_r+0x3c>
 80064c0:	692b      	ldr	r3, [r5, #16]
 80064c2:	b9eb      	cbnz	r3, 8006500 <_vfiprintf_r+0x78>
 80064c4:	4629      	mov	r1, r5
 80064c6:	4630      	mov	r0, r6
 80064c8:	f000 faf6 	bl	8006ab8 <__swsetup_r>
 80064cc:	b1c0      	cbz	r0, 8006500 <_vfiprintf_r+0x78>
 80064ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064d0:	07dc      	lsls	r4, r3, #31
 80064d2:	d50e      	bpl.n	80064f2 <_vfiprintf_r+0x6a>
 80064d4:	f04f 30ff 	mov.w	r0, #4294967295
 80064d8:	b01d      	add	sp, #116	; 0x74
 80064da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064de:	4b7b      	ldr	r3, [pc, #492]	; (80066cc <_vfiprintf_r+0x244>)
 80064e0:	429d      	cmp	r5, r3
 80064e2:	d101      	bne.n	80064e8 <_vfiprintf_r+0x60>
 80064e4:	68b5      	ldr	r5, [r6, #8]
 80064e6:	e7df      	b.n	80064a8 <_vfiprintf_r+0x20>
 80064e8:	4b79      	ldr	r3, [pc, #484]	; (80066d0 <_vfiprintf_r+0x248>)
 80064ea:	429d      	cmp	r5, r3
 80064ec:	bf08      	it	eq
 80064ee:	68f5      	ldreq	r5, [r6, #12]
 80064f0:	e7da      	b.n	80064a8 <_vfiprintf_r+0x20>
 80064f2:	89ab      	ldrh	r3, [r5, #12]
 80064f4:	0598      	lsls	r0, r3, #22
 80064f6:	d4ed      	bmi.n	80064d4 <_vfiprintf_r+0x4c>
 80064f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064fa:	f000 fd08 	bl	8006f0e <__retarget_lock_release_recursive>
 80064fe:	e7e9      	b.n	80064d4 <_vfiprintf_r+0x4c>
 8006500:	2300      	movs	r3, #0
 8006502:	9309      	str	r3, [sp, #36]	; 0x24
 8006504:	2320      	movs	r3, #32
 8006506:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800650a:	2330      	movs	r3, #48	; 0x30
 800650c:	f04f 0901 	mov.w	r9, #1
 8006510:	f8cd 800c 	str.w	r8, [sp, #12]
 8006514:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80066d4 <_vfiprintf_r+0x24c>
 8006518:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800651c:	4623      	mov	r3, r4
 800651e:	469a      	mov	sl, r3
 8006520:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006524:	b10a      	cbz	r2, 800652a <_vfiprintf_r+0xa2>
 8006526:	2a25      	cmp	r2, #37	; 0x25
 8006528:	d1f9      	bne.n	800651e <_vfiprintf_r+0x96>
 800652a:	ebba 0b04 	subs.w	fp, sl, r4
 800652e:	d00b      	beq.n	8006548 <_vfiprintf_r+0xc0>
 8006530:	465b      	mov	r3, fp
 8006532:	4622      	mov	r2, r4
 8006534:	4629      	mov	r1, r5
 8006536:	4630      	mov	r0, r6
 8006538:	f7ff ff93 	bl	8006462 <__sfputs_r>
 800653c:	3001      	adds	r0, #1
 800653e:	f000 80aa 	beq.w	8006696 <_vfiprintf_r+0x20e>
 8006542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006544:	445a      	add	r2, fp
 8006546:	9209      	str	r2, [sp, #36]	; 0x24
 8006548:	f89a 3000 	ldrb.w	r3, [sl]
 800654c:	2b00      	cmp	r3, #0
 800654e:	f000 80a2 	beq.w	8006696 <_vfiprintf_r+0x20e>
 8006552:	2300      	movs	r3, #0
 8006554:	f04f 32ff 	mov.w	r2, #4294967295
 8006558:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800655c:	f10a 0a01 	add.w	sl, sl, #1
 8006560:	9304      	str	r3, [sp, #16]
 8006562:	9307      	str	r3, [sp, #28]
 8006564:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006568:	931a      	str	r3, [sp, #104]	; 0x68
 800656a:	4654      	mov	r4, sl
 800656c:	2205      	movs	r2, #5
 800656e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006572:	4858      	ldr	r0, [pc, #352]	; (80066d4 <_vfiprintf_r+0x24c>)
 8006574:	f000 fd32 	bl	8006fdc <memchr>
 8006578:	9a04      	ldr	r2, [sp, #16]
 800657a:	b9d8      	cbnz	r0, 80065b4 <_vfiprintf_r+0x12c>
 800657c:	06d1      	lsls	r1, r2, #27
 800657e:	bf44      	itt	mi
 8006580:	2320      	movmi	r3, #32
 8006582:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006586:	0713      	lsls	r3, r2, #28
 8006588:	bf44      	itt	mi
 800658a:	232b      	movmi	r3, #43	; 0x2b
 800658c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006590:	f89a 3000 	ldrb.w	r3, [sl]
 8006594:	2b2a      	cmp	r3, #42	; 0x2a
 8006596:	d015      	beq.n	80065c4 <_vfiprintf_r+0x13c>
 8006598:	4654      	mov	r4, sl
 800659a:	2000      	movs	r0, #0
 800659c:	f04f 0c0a 	mov.w	ip, #10
 80065a0:	9a07      	ldr	r2, [sp, #28]
 80065a2:	4621      	mov	r1, r4
 80065a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065a8:	3b30      	subs	r3, #48	; 0x30
 80065aa:	2b09      	cmp	r3, #9
 80065ac:	d94e      	bls.n	800664c <_vfiprintf_r+0x1c4>
 80065ae:	b1b0      	cbz	r0, 80065de <_vfiprintf_r+0x156>
 80065b0:	9207      	str	r2, [sp, #28]
 80065b2:	e014      	b.n	80065de <_vfiprintf_r+0x156>
 80065b4:	eba0 0308 	sub.w	r3, r0, r8
 80065b8:	fa09 f303 	lsl.w	r3, r9, r3
 80065bc:	4313      	orrs	r3, r2
 80065be:	46a2      	mov	sl, r4
 80065c0:	9304      	str	r3, [sp, #16]
 80065c2:	e7d2      	b.n	800656a <_vfiprintf_r+0xe2>
 80065c4:	9b03      	ldr	r3, [sp, #12]
 80065c6:	1d19      	adds	r1, r3, #4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	9103      	str	r1, [sp, #12]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	bfbb      	ittet	lt
 80065d0:	425b      	neglt	r3, r3
 80065d2:	f042 0202 	orrlt.w	r2, r2, #2
 80065d6:	9307      	strge	r3, [sp, #28]
 80065d8:	9307      	strlt	r3, [sp, #28]
 80065da:	bfb8      	it	lt
 80065dc:	9204      	strlt	r2, [sp, #16]
 80065de:	7823      	ldrb	r3, [r4, #0]
 80065e0:	2b2e      	cmp	r3, #46	; 0x2e
 80065e2:	d10c      	bne.n	80065fe <_vfiprintf_r+0x176>
 80065e4:	7863      	ldrb	r3, [r4, #1]
 80065e6:	2b2a      	cmp	r3, #42	; 0x2a
 80065e8:	d135      	bne.n	8006656 <_vfiprintf_r+0x1ce>
 80065ea:	9b03      	ldr	r3, [sp, #12]
 80065ec:	3402      	adds	r4, #2
 80065ee:	1d1a      	adds	r2, r3, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	9203      	str	r2, [sp, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	bfb8      	it	lt
 80065f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80065fc:	9305      	str	r3, [sp, #20]
 80065fe:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80066d8 <_vfiprintf_r+0x250>
 8006602:	2203      	movs	r2, #3
 8006604:	4650      	mov	r0, sl
 8006606:	7821      	ldrb	r1, [r4, #0]
 8006608:	f000 fce8 	bl	8006fdc <memchr>
 800660c:	b140      	cbz	r0, 8006620 <_vfiprintf_r+0x198>
 800660e:	2340      	movs	r3, #64	; 0x40
 8006610:	eba0 000a 	sub.w	r0, r0, sl
 8006614:	fa03 f000 	lsl.w	r0, r3, r0
 8006618:	9b04      	ldr	r3, [sp, #16]
 800661a:	3401      	adds	r4, #1
 800661c:	4303      	orrs	r3, r0
 800661e:	9304      	str	r3, [sp, #16]
 8006620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006624:	2206      	movs	r2, #6
 8006626:	482d      	ldr	r0, [pc, #180]	; (80066dc <_vfiprintf_r+0x254>)
 8006628:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800662c:	f000 fcd6 	bl	8006fdc <memchr>
 8006630:	2800      	cmp	r0, #0
 8006632:	d03f      	beq.n	80066b4 <_vfiprintf_r+0x22c>
 8006634:	4b2a      	ldr	r3, [pc, #168]	; (80066e0 <_vfiprintf_r+0x258>)
 8006636:	bb1b      	cbnz	r3, 8006680 <_vfiprintf_r+0x1f8>
 8006638:	9b03      	ldr	r3, [sp, #12]
 800663a:	3307      	adds	r3, #7
 800663c:	f023 0307 	bic.w	r3, r3, #7
 8006640:	3308      	adds	r3, #8
 8006642:	9303      	str	r3, [sp, #12]
 8006644:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006646:	443b      	add	r3, r7
 8006648:	9309      	str	r3, [sp, #36]	; 0x24
 800664a:	e767      	b.n	800651c <_vfiprintf_r+0x94>
 800664c:	460c      	mov	r4, r1
 800664e:	2001      	movs	r0, #1
 8006650:	fb0c 3202 	mla	r2, ip, r2, r3
 8006654:	e7a5      	b.n	80065a2 <_vfiprintf_r+0x11a>
 8006656:	2300      	movs	r3, #0
 8006658:	f04f 0c0a 	mov.w	ip, #10
 800665c:	4619      	mov	r1, r3
 800665e:	3401      	adds	r4, #1
 8006660:	9305      	str	r3, [sp, #20]
 8006662:	4620      	mov	r0, r4
 8006664:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006668:	3a30      	subs	r2, #48	; 0x30
 800666a:	2a09      	cmp	r2, #9
 800666c:	d903      	bls.n	8006676 <_vfiprintf_r+0x1ee>
 800666e:	2b00      	cmp	r3, #0
 8006670:	d0c5      	beq.n	80065fe <_vfiprintf_r+0x176>
 8006672:	9105      	str	r1, [sp, #20]
 8006674:	e7c3      	b.n	80065fe <_vfiprintf_r+0x176>
 8006676:	4604      	mov	r4, r0
 8006678:	2301      	movs	r3, #1
 800667a:	fb0c 2101 	mla	r1, ip, r1, r2
 800667e:	e7f0      	b.n	8006662 <_vfiprintf_r+0x1da>
 8006680:	ab03      	add	r3, sp, #12
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	462a      	mov	r2, r5
 8006686:	4630      	mov	r0, r6
 8006688:	4b16      	ldr	r3, [pc, #88]	; (80066e4 <_vfiprintf_r+0x25c>)
 800668a:	a904      	add	r1, sp, #16
 800668c:	f3af 8000 	nop.w
 8006690:	4607      	mov	r7, r0
 8006692:	1c78      	adds	r0, r7, #1
 8006694:	d1d6      	bne.n	8006644 <_vfiprintf_r+0x1bc>
 8006696:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006698:	07d9      	lsls	r1, r3, #31
 800669a:	d405      	bmi.n	80066a8 <_vfiprintf_r+0x220>
 800669c:	89ab      	ldrh	r3, [r5, #12]
 800669e:	059a      	lsls	r2, r3, #22
 80066a0:	d402      	bmi.n	80066a8 <_vfiprintf_r+0x220>
 80066a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066a4:	f000 fc33 	bl	8006f0e <__retarget_lock_release_recursive>
 80066a8:	89ab      	ldrh	r3, [r5, #12]
 80066aa:	065b      	lsls	r3, r3, #25
 80066ac:	f53f af12 	bmi.w	80064d4 <_vfiprintf_r+0x4c>
 80066b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066b2:	e711      	b.n	80064d8 <_vfiprintf_r+0x50>
 80066b4:	ab03      	add	r3, sp, #12
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	462a      	mov	r2, r5
 80066ba:	4630      	mov	r0, r6
 80066bc:	4b09      	ldr	r3, [pc, #36]	; (80066e4 <_vfiprintf_r+0x25c>)
 80066be:	a904      	add	r1, sp, #16
 80066c0:	f000 f882 	bl	80067c8 <_printf_i>
 80066c4:	e7e4      	b.n	8006690 <_vfiprintf_r+0x208>
 80066c6:	bf00      	nop
 80066c8:	0800754c 	.word	0x0800754c
 80066cc:	0800756c 	.word	0x0800756c
 80066d0:	0800752c 	.word	0x0800752c
 80066d4:	080074f8 	.word	0x080074f8
 80066d8:	080074fe 	.word	0x080074fe
 80066dc:	08007502 	.word	0x08007502
 80066e0:	00000000 	.word	0x00000000
 80066e4:	08006463 	.word	0x08006463

080066e8 <_printf_common>:
 80066e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ec:	4616      	mov	r6, r2
 80066ee:	4699      	mov	r9, r3
 80066f0:	688a      	ldr	r2, [r1, #8]
 80066f2:	690b      	ldr	r3, [r1, #16]
 80066f4:	4607      	mov	r7, r0
 80066f6:	4293      	cmp	r3, r2
 80066f8:	bfb8      	it	lt
 80066fa:	4613      	movlt	r3, r2
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006702:	460c      	mov	r4, r1
 8006704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006708:	b10a      	cbz	r2, 800670e <_printf_common+0x26>
 800670a:	3301      	adds	r3, #1
 800670c:	6033      	str	r3, [r6, #0]
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	0699      	lsls	r1, r3, #26
 8006712:	bf42      	ittt	mi
 8006714:	6833      	ldrmi	r3, [r6, #0]
 8006716:	3302      	addmi	r3, #2
 8006718:	6033      	strmi	r3, [r6, #0]
 800671a:	6825      	ldr	r5, [r4, #0]
 800671c:	f015 0506 	ands.w	r5, r5, #6
 8006720:	d106      	bne.n	8006730 <_printf_common+0x48>
 8006722:	f104 0a19 	add.w	sl, r4, #25
 8006726:	68e3      	ldr	r3, [r4, #12]
 8006728:	6832      	ldr	r2, [r6, #0]
 800672a:	1a9b      	subs	r3, r3, r2
 800672c:	42ab      	cmp	r3, r5
 800672e:	dc28      	bgt.n	8006782 <_printf_common+0x9a>
 8006730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006734:	1e13      	subs	r3, r2, #0
 8006736:	6822      	ldr	r2, [r4, #0]
 8006738:	bf18      	it	ne
 800673a:	2301      	movne	r3, #1
 800673c:	0692      	lsls	r2, r2, #26
 800673e:	d42d      	bmi.n	800679c <_printf_common+0xb4>
 8006740:	4649      	mov	r1, r9
 8006742:	4638      	mov	r0, r7
 8006744:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006748:	47c0      	blx	r8
 800674a:	3001      	adds	r0, #1
 800674c:	d020      	beq.n	8006790 <_printf_common+0xa8>
 800674e:	6823      	ldr	r3, [r4, #0]
 8006750:	68e5      	ldr	r5, [r4, #12]
 8006752:	f003 0306 	and.w	r3, r3, #6
 8006756:	2b04      	cmp	r3, #4
 8006758:	bf18      	it	ne
 800675a:	2500      	movne	r5, #0
 800675c:	6832      	ldr	r2, [r6, #0]
 800675e:	f04f 0600 	mov.w	r6, #0
 8006762:	68a3      	ldr	r3, [r4, #8]
 8006764:	bf08      	it	eq
 8006766:	1aad      	subeq	r5, r5, r2
 8006768:	6922      	ldr	r2, [r4, #16]
 800676a:	bf08      	it	eq
 800676c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006770:	4293      	cmp	r3, r2
 8006772:	bfc4      	itt	gt
 8006774:	1a9b      	subgt	r3, r3, r2
 8006776:	18ed      	addgt	r5, r5, r3
 8006778:	341a      	adds	r4, #26
 800677a:	42b5      	cmp	r5, r6
 800677c:	d11a      	bne.n	80067b4 <_printf_common+0xcc>
 800677e:	2000      	movs	r0, #0
 8006780:	e008      	b.n	8006794 <_printf_common+0xac>
 8006782:	2301      	movs	r3, #1
 8006784:	4652      	mov	r2, sl
 8006786:	4649      	mov	r1, r9
 8006788:	4638      	mov	r0, r7
 800678a:	47c0      	blx	r8
 800678c:	3001      	adds	r0, #1
 800678e:	d103      	bne.n	8006798 <_printf_common+0xb0>
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006798:	3501      	adds	r5, #1
 800679a:	e7c4      	b.n	8006726 <_printf_common+0x3e>
 800679c:	2030      	movs	r0, #48	; 0x30
 800679e:	18e1      	adds	r1, r4, r3
 80067a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067a4:	1c5a      	adds	r2, r3, #1
 80067a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067aa:	4422      	add	r2, r4
 80067ac:	3302      	adds	r3, #2
 80067ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067b2:	e7c5      	b.n	8006740 <_printf_common+0x58>
 80067b4:	2301      	movs	r3, #1
 80067b6:	4622      	mov	r2, r4
 80067b8:	4649      	mov	r1, r9
 80067ba:	4638      	mov	r0, r7
 80067bc:	47c0      	blx	r8
 80067be:	3001      	adds	r0, #1
 80067c0:	d0e6      	beq.n	8006790 <_printf_common+0xa8>
 80067c2:	3601      	adds	r6, #1
 80067c4:	e7d9      	b.n	800677a <_printf_common+0x92>
	...

080067c8 <_printf_i>:
 80067c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067cc:	7e0f      	ldrb	r7, [r1, #24]
 80067ce:	4691      	mov	r9, r2
 80067d0:	2f78      	cmp	r7, #120	; 0x78
 80067d2:	4680      	mov	r8, r0
 80067d4:	460c      	mov	r4, r1
 80067d6:	469a      	mov	sl, r3
 80067d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067de:	d807      	bhi.n	80067f0 <_printf_i+0x28>
 80067e0:	2f62      	cmp	r7, #98	; 0x62
 80067e2:	d80a      	bhi.n	80067fa <_printf_i+0x32>
 80067e4:	2f00      	cmp	r7, #0
 80067e6:	f000 80d9 	beq.w	800699c <_printf_i+0x1d4>
 80067ea:	2f58      	cmp	r7, #88	; 0x58
 80067ec:	f000 80a4 	beq.w	8006938 <_printf_i+0x170>
 80067f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067f8:	e03a      	b.n	8006870 <_printf_i+0xa8>
 80067fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067fe:	2b15      	cmp	r3, #21
 8006800:	d8f6      	bhi.n	80067f0 <_printf_i+0x28>
 8006802:	a101      	add	r1, pc, #4	; (adr r1, 8006808 <_printf_i+0x40>)
 8006804:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006808:	08006861 	.word	0x08006861
 800680c:	08006875 	.word	0x08006875
 8006810:	080067f1 	.word	0x080067f1
 8006814:	080067f1 	.word	0x080067f1
 8006818:	080067f1 	.word	0x080067f1
 800681c:	080067f1 	.word	0x080067f1
 8006820:	08006875 	.word	0x08006875
 8006824:	080067f1 	.word	0x080067f1
 8006828:	080067f1 	.word	0x080067f1
 800682c:	080067f1 	.word	0x080067f1
 8006830:	080067f1 	.word	0x080067f1
 8006834:	08006983 	.word	0x08006983
 8006838:	080068a5 	.word	0x080068a5
 800683c:	08006965 	.word	0x08006965
 8006840:	080067f1 	.word	0x080067f1
 8006844:	080067f1 	.word	0x080067f1
 8006848:	080069a5 	.word	0x080069a5
 800684c:	080067f1 	.word	0x080067f1
 8006850:	080068a5 	.word	0x080068a5
 8006854:	080067f1 	.word	0x080067f1
 8006858:	080067f1 	.word	0x080067f1
 800685c:	0800696d 	.word	0x0800696d
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	1d1a      	adds	r2, r3, #4
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	602a      	str	r2, [r5, #0]
 8006868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800686c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006870:	2301      	movs	r3, #1
 8006872:	e0a4      	b.n	80069be <_printf_i+0x1f6>
 8006874:	6820      	ldr	r0, [r4, #0]
 8006876:	6829      	ldr	r1, [r5, #0]
 8006878:	0606      	lsls	r6, r0, #24
 800687a:	f101 0304 	add.w	r3, r1, #4
 800687e:	d50a      	bpl.n	8006896 <_printf_i+0xce>
 8006880:	680e      	ldr	r6, [r1, #0]
 8006882:	602b      	str	r3, [r5, #0]
 8006884:	2e00      	cmp	r6, #0
 8006886:	da03      	bge.n	8006890 <_printf_i+0xc8>
 8006888:	232d      	movs	r3, #45	; 0x2d
 800688a:	4276      	negs	r6, r6
 800688c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006890:	230a      	movs	r3, #10
 8006892:	485e      	ldr	r0, [pc, #376]	; (8006a0c <_printf_i+0x244>)
 8006894:	e019      	b.n	80068ca <_printf_i+0x102>
 8006896:	680e      	ldr	r6, [r1, #0]
 8006898:	f010 0f40 	tst.w	r0, #64	; 0x40
 800689c:	602b      	str	r3, [r5, #0]
 800689e:	bf18      	it	ne
 80068a0:	b236      	sxthne	r6, r6
 80068a2:	e7ef      	b.n	8006884 <_printf_i+0xbc>
 80068a4:	682b      	ldr	r3, [r5, #0]
 80068a6:	6820      	ldr	r0, [r4, #0]
 80068a8:	1d19      	adds	r1, r3, #4
 80068aa:	6029      	str	r1, [r5, #0]
 80068ac:	0601      	lsls	r1, r0, #24
 80068ae:	d501      	bpl.n	80068b4 <_printf_i+0xec>
 80068b0:	681e      	ldr	r6, [r3, #0]
 80068b2:	e002      	b.n	80068ba <_printf_i+0xf2>
 80068b4:	0646      	lsls	r6, r0, #25
 80068b6:	d5fb      	bpl.n	80068b0 <_printf_i+0xe8>
 80068b8:	881e      	ldrh	r6, [r3, #0]
 80068ba:	2f6f      	cmp	r7, #111	; 0x6f
 80068bc:	bf0c      	ite	eq
 80068be:	2308      	moveq	r3, #8
 80068c0:	230a      	movne	r3, #10
 80068c2:	4852      	ldr	r0, [pc, #328]	; (8006a0c <_printf_i+0x244>)
 80068c4:	2100      	movs	r1, #0
 80068c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ca:	6865      	ldr	r5, [r4, #4]
 80068cc:	2d00      	cmp	r5, #0
 80068ce:	bfa8      	it	ge
 80068d0:	6821      	ldrge	r1, [r4, #0]
 80068d2:	60a5      	str	r5, [r4, #8]
 80068d4:	bfa4      	itt	ge
 80068d6:	f021 0104 	bicge.w	r1, r1, #4
 80068da:	6021      	strge	r1, [r4, #0]
 80068dc:	b90e      	cbnz	r6, 80068e2 <_printf_i+0x11a>
 80068de:	2d00      	cmp	r5, #0
 80068e0:	d04d      	beq.n	800697e <_printf_i+0x1b6>
 80068e2:	4615      	mov	r5, r2
 80068e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80068e8:	fb03 6711 	mls	r7, r3, r1, r6
 80068ec:	5dc7      	ldrb	r7, [r0, r7]
 80068ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068f2:	4637      	mov	r7, r6
 80068f4:	42bb      	cmp	r3, r7
 80068f6:	460e      	mov	r6, r1
 80068f8:	d9f4      	bls.n	80068e4 <_printf_i+0x11c>
 80068fa:	2b08      	cmp	r3, #8
 80068fc:	d10b      	bne.n	8006916 <_printf_i+0x14e>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	07de      	lsls	r6, r3, #31
 8006902:	d508      	bpl.n	8006916 <_printf_i+0x14e>
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	6861      	ldr	r1, [r4, #4]
 8006908:	4299      	cmp	r1, r3
 800690a:	bfde      	ittt	le
 800690c:	2330      	movle	r3, #48	; 0x30
 800690e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006912:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006916:	1b52      	subs	r2, r2, r5
 8006918:	6122      	str	r2, [r4, #16]
 800691a:	464b      	mov	r3, r9
 800691c:	4621      	mov	r1, r4
 800691e:	4640      	mov	r0, r8
 8006920:	f8cd a000 	str.w	sl, [sp]
 8006924:	aa03      	add	r2, sp, #12
 8006926:	f7ff fedf 	bl	80066e8 <_printf_common>
 800692a:	3001      	adds	r0, #1
 800692c:	d14c      	bne.n	80069c8 <_printf_i+0x200>
 800692e:	f04f 30ff 	mov.w	r0, #4294967295
 8006932:	b004      	add	sp, #16
 8006934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006938:	4834      	ldr	r0, [pc, #208]	; (8006a0c <_printf_i+0x244>)
 800693a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800693e:	6829      	ldr	r1, [r5, #0]
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	f851 6b04 	ldr.w	r6, [r1], #4
 8006946:	6029      	str	r1, [r5, #0]
 8006948:	061d      	lsls	r5, r3, #24
 800694a:	d514      	bpl.n	8006976 <_printf_i+0x1ae>
 800694c:	07df      	lsls	r7, r3, #31
 800694e:	bf44      	itt	mi
 8006950:	f043 0320 	orrmi.w	r3, r3, #32
 8006954:	6023      	strmi	r3, [r4, #0]
 8006956:	b91e      	cbnz	r6, 8006960 <_printf_i+0x198>
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	f023 0320 	bic.w	r3, r3, #32
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	2310      	movs	r3, #16
 8006962:	e7af      	b.n	80068c4 <_printf_i+0xfc>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	f043 0320 	orr.w	r3, r3, #32
 800696a:	6023      	str	r3, [r4, #0]
 800696c:	2378      	movs	r3, #120	; 0x78
 800696e:	4828      	ldr	r0, [pc, #160]	; (8006a10 <_printf_i+0x248>)
 8006970:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006974:	e7e3      	b.n	800693e <_printf_i+0x176>
 8006976:	0659      	lsls	r1, r3, #25
 8006978:	bf48      	it	mi
 800697a:	b2b6      	uxthmi	r6, r6
 800697c:	e7e6      	b.n	800694c <_printf_i+0x184>
 800697e:	4615      	mov	r5, r2
 8006980:	e7bb      	b.n	80068fa <_printf_i+0x132>
 8006982:	682b      	ldr	r3, [r5, #0]
 8006984:	6826      	ldr	r6, [r4, #0]
 8006986:	1d18      	adds	r0, r3, #4
 8006988:	6961      	ldr	r1, [r4, #20]
 800698a:	6028      	str	r0, [r5, #0]
 800698c:	0635      	lsls	r5, r6, #24
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	d501      	bpl.n	8006996 <_printf_i+0x1ce>
 8006992:	6019      	str	r1, [r3, #0]
 8006994:	e002      	b.n	800699c <_printf_i+0x1d4>
 8006996:	0670      	lsls	r0, r6, #25
 8006998:	d5fb      	bpl.n	8006992 <_printf_i+0x1ca>
 800699a:	8019      	strh	r1, [r3, #0]
 800699c:	2300      	movs	r3, #0
 800699e:	4615      	mov	r5, r2
 80069a0:	6123      	str	r3, [r4, #16]
 80069a2:	e7ba      	b.n	800691a <_printf_i+0x152>
 80069a4:	682b      	ldr	r3, [r5, #0]
 80069a6:	2100      	movs	r1, #0
 80069a8:	1d1a      	adds	r2, r3, #4
 80069aa:	602a      	str	r2, [r5, #0]
 80069ac:	681d      	ldr	r5, [r3, #0]
 80069ae:	6862      	ldr	r2, [r4, #4]
 80069b0:	4628      	mov	r0, r5
 80069b2:	f000 fb13 	bl	8006fdc <memchr>
 80069b6:	b108      	cbz	r0, 80069bc <_printf_i+0x1f4>
 80069b8:	1b40      	subs	r0, r0, r5
 80069ba:	6060      	str	r0, [r4, #4]
 80069bc:	6863      	ldr	r3, [r4, #4]
 80069be:	6123      	str	r3, [r4, #16]
 80069c0:	2300      	movs	r3, #0
 80069c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069c6:	e7a8      	b.n	800691a <_printf_i+0x152>
 80069c8:	462a      	mov	r2, r5
 80069ca:	4649      	mov	r1, r9
 80069cc:	4640      	mov	r0, r8
 80069ce:	6923      	ldr	r3, [r4, #16]
 80069d0:	47d0      	blx	sl
 80069d2:	3001      	adds	r0, #1
 80069d4:	d0ab      	beq.n	800692e <_printf_i+0x166>
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	079b      	lsls	r3, r3, #30
 80069da:	d413      	bmi.n	8006a04 <_printf_i+0x23c>
 80069dc:	68e0      	ldr	r0, [r4, #12]
 80069de:	9b03      	ldr	r3, [sp, #12]
 80069e0:	4298      	cmp	r0, r3
 80069e2:	bfb8      	it	lt
 80069e4:	4618      	movlt	r0, r3
 80069e6:	e7a4      	b.n	8006932 <_printf_i+0x16a>
 80069e8:	2301      	movs	r3, #1
 80069ea:	4632      	mov	r2, r6
 80069ec:	4649      	mov	r1, r9
 80069ee:	4640      	mov	r0, r8
 80069f0:	47d0      	blx	sl
 80069f2:	3001      	adds	r0, #1
 80069f4:	d09b      	beq.n	800692e <_printf_i+0x166>
 80069f6:	3501      	adds	r5, #1
 80069f8:	68e3      	ldr	r3, [r4, #12]
 80069fa:	9903      	ldr	r1, [sp, #12]
 80069fc:	1a5b      	subs	r3, r3, r1
 80069fe:	42ab      	cmp	r3, r5
 8006a00:	dcf2      	bgt.n	80069e8 <_printf_i+0x220>
 8006a02:	e7eb      	b.n	80069dc <_printf_i+0x214>
 8006a04:	2500      	movs	r5, #0
 8006a06:	f104 0619 	add.w	r6, r4, #25
 8006a0a:	e7f5      	b.n	80069f8 <_printf_i+0x230>
 8006a0c:	08007509 	.word	0x08007509
 8006a10:	0800751a 	.word	0x0800751a

08006a14 <__swbuf_r>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	460e      	mov	r6, r1
 8006a18:	4614      	mov	r4, r2
 8006a1a:	4605      	mov	r5, r0
 8006a1c:	b118      	cbz	r0, 8006a26 <__swbuf_r+0x12>
 8006a1e:	6983      	ldr	r3, [r0, #24]
 8006a20:	b90b      	cbnz	r3, 8006a26 <__swbuf_r+0x12>
 8006a22:	f000 f9d5 	bl	8006dd0 <__sinit>
 8006a26:	4b21      	ldr	r3, [pc, #132]	; (8006aac <__swbuf_r+0x98>)
 8006a28:	429c      	cmp	r4, r3
 8006a2a:	d12b      	bne.n	8006a84 <__swbuf_r+0x70>
 8006a2c:	686c      	ldr	r4, [r5, #4]
 8006a2e:	69a3      	ldr	r3, [r4, #24]
 8006a30:	60a3      	str	r3, [r4, #8]
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	071a      	lsls	r2, r3, #28
 8006a36:	d52f      	bpl.n	8006a98 <__swbuf_r+0x84>
 8006a38:	6923      	ldr	r3, [r4, #16]
 8006a3a:	b36b      	cbz	r3, 8006a98 <__swbuf_r+0x84>
 8006a3c:	6923      	ldr	r3, [r4, #16]
 8006a3e:	6820      	ldr	r0, [r4, #0]
 8006a40:	b2f6      	uxtb	r6, r6
 8006a42:	1ac0      	subs	r0, r0, r3
 8006a44:	6963      	ldr	r3, [r4, #20]
 8006a46:	4637      	mov	r7, r6
 8006a48:	4283      	cmp	r3, r0
 8006a4a:	dc04      	bgt.n	8006a56 <__swbuf_r+0x42>
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 f92a 	bl	8006ca8 <_fflush_r>
 8006a54:	bb30      	cbnz	r0, 8006aa4 <__swbuf_r+0x90>
 8006a56:	68a3      	ldr	r3, [r4, #8]
 8006a58:	3001      	adds	r0, #1
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	60a3      	str	r3, [r4, #8]
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	6022      	str	r2, [r4, #0]
 8006a64:	701e      	strb	r6, [r3, #0]
 8006a66:	6963      	ldr	r3, [r4, #20]
 8006a68:	4283      	cmp	r3, r0
 8006a6a:	d004      	beq.n	8006a76 <__swbuf_r+0x62>
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	07db      	lsls	r3, r3, #31
 8006a70:	d506      	bpl.n	8006a80 <__swbuf_r+0x6c>
 8006a72:	2e0a      	cmp	r6, #10
 8006a74:	d104      	bne.n	8006a80 <__swbuf_r+0x6c>
 8006a76:	4621      	mov	r1, r4
 8006a78:	4628      	mov	r0, r5
 8006a7a:	f000 f915 	bl	8006ca8 <_fflush_r>
 8006a7e:	b988      	cbnz	r0, 8006aa4 <__swbuf_r+0x90>
 8006a80:	4638      	mov	r0, r7
 8006a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a84:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <__swbuf_r+0x9c>)
 8006a86:	429c      	cmp	r4, r3
 8006a88:	d101      	bne.n	8006a8e <__swbuf_r+0x7a>
 8006a8a:	68ac      	ldr	r4, [r5, #8]
 8006a8c:	e7cf      	b.n	8006a2e <__swbuf_r+0x1a>
 8006a8e:	4b09      	ldr	r3, [pc, #36]	; (8006ab4 <__swbuf_r+0xa0>)
 8006a90:	429c      	cmp	r4, r3
 8006a92:	bf08      	it	eq
 8006a94:	68ec      	ldreq	r4, [r5, #12]
 8006a96:	e7ca      	b.n	8006a2e <__swbuf_r+0x1a>
 8006a98:	4621      	mov	r1, r4
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f000 f80c 	bl	8006ab8 <__swsetup_r>
 8006aa0:	2800      	cmp	r0, #0
 8006aa2:	d0cb      	beq.n	8006a3c <__swbuf_r+0x28>
 8006aa4:	f04f 37ff 	mov.w	r7, #4294967295
 8006aa8:	e7ea      	b.n	8006a80 <__swbuf_r+0x6c>
 8006aaa:	bf00      	nop
 8006aac:	0800754c 	.word	0x0800754c
 8006ab0:	0800756c 	.word	0x0800756c
 8006ab4:	0800752c 	.word	0x0800752c

08006ab8 <__swsetup_r>:
 8006ab8:	4b32      	ldr	r3, [pc, #200]	; (8006b84 <__swsetup_r+0xcc>)
 8006aba:	b570      	push	{r4, r5, r6, lr}
 8006abc:	681d      	ldr	r5, [r3, #0]
 8006abe:	4606      	mov	r6, r0
 8006ac0:	460c      	mov	r4, r1
 8006ac2:	b125      	cbz	r5, 8006ace <__swsetup_r+0x16>
 8006ac4:	69ab      	ldr	r3, [r5, #24]
 8006ac6:	b913      	cbnz	r3, 8006ace <__swsetup_r+0x16>
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 f981 	bl	8006dd0 <__sinit>
 8006ace:	4b2e      	ldr	r3, [pc, #184]	; (8006b88 <__swsetup_r+0xd0>)
 8006ad0:	429c      	cmp	r4, r3
 8006ad2:	d10f      	bne.n	8006af4 <__swsetup_r+0x3c>
 8006ad4:	686c      	ldr	r4, [r5, #4]
 8006ad6:	89a3      	ldrh	r3, [r4, #12]
 8006ad8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006adc:	0719      	lsls	r1, r3, #28
 8006ade:	d42c      	bmi.n	8006b3a <__swsetup_r+0x82>
 8006ae0:	06dd      	lsls	r5, r3, #27
 8006ae2:	d411      	bmi.n	8006b08 <__swsetup_r+0x50>
 8006ae4:	2309      	movs	r3, #9
 8006ae6:	6033      	str	r3, [r6, #0]
 8006ae8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006aec:	f04f 30ff 	mov.w	r0, #4294967295
 8006af0:	81a3      	strh	r3, [r4, #12]
 8006af2:	e03e      	b.n	8006b72 <__swsetup_r+0xba>
 8006af4:	4b25      	ldr	r3, [pc, #148]	; (8006b8c <__swsetup_r+0xd4>)
 8006af6:	429c      	cmp	r4, r3
 8006af8:	d101      	bne.n	8006afe <__swsetup_r+0x46>
 8006afa:	68ac      	ldr	r4, [r5, #8]
 8006afc:	e7eb      	b.n	8006ad6 <__swsetup_r+0x1e>
 8006afe:	4b24      	ldr	r3, [pc, #144]	; (8006b90 <__swsetup_r+0xd8>)
 8006b00:	429c      	cmp	r4, r3
 8006b02:	bf08      	it	eq
 8006b04:	68ec      	ldreq	r4, [r5, #12]
 8006b06:	e7e6      	b.n	8006ad6 <__swsetup_r+0x1e>
 8006b08:	0758      	lsls	r0, r3, #29
 8006b0a:	d512      	bpl.n	8006b32 <__swsetup_r+0x7a>
 8006b0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b0e:	b141      	cbz	r1, 8006b22 <__swsetup_r+0x6a>
 8006b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b14:	4299      	cmp	r1, r3
 8006b16:	d002      	beq.n	8006b1e <__swsetup_r+0x66>
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f000 fa6d 	bl	8006ff8 <_free_r>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	6363      	str	r3, [r4, #52]	; 0x34
 8006b22:	89a3      	ldrh	r3, [r4, #12]
 8006b24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b28:	81a3      	strh	r3, [r4, #12]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	6063      	str	r3, [r4, #4]
 8006b2e:	6923      	ldr	r3, [r4, #16]
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	89a3      	ldrh	r3, [r4, #12]
 8006b34:	f043 0308 	orr.w	r3, r3, #8
 8006b38:	81a3      	strh	r3, [r4, #12]
 8006b3a:	6923      	ldr	r3, [r4, #16]
 8006b3c:	b94b      	cbnz	r3, 8006b52 <__swsetup_r+0x9a>
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b48:	d003      	beq.n	8006b52 <__swsetup_r+0x9a>
 8006b4a:	4621      	mov	r1, r4
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f000 fa05 	bl	8006f5c <__smakebuf_r>
 8006b52:	89a0      	ldrh	r0, [r4, #12]
 8006b54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b58:	f010 0301 	ands.w	r3, r0, #1
 8006b5c:	d00a      	beq.n	8006b74 <__swsetup_r+0xbc>
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60a3      	str	r3, [r4, #8]
 8006b62:	6963      	ldr	r3, [r4, #20]
 8006b64:	425b      	negs	r3, r3
 8006b66:	61a3      	str	r3, [r4, #24]
 8006b68:	6923      	ldr	r3, [r4, #16]
 8006b6a:	b943      	cbnz	r3, 8006b7e <__swsetup_r+0xc6>
 8006b6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b70:	d1ba      	bne.n	8006ae8 <__swsetup_r+0x30>
 8006b72:	bd70      	pop	{r4, r5, r6, pc}
 8006b74:	0781      	lsls	r1, r0, #30
 8006b76:	bf58      	it	pl
 8006b78:	6963      	ldrpl	r3, [r4, #20]
 8006b7a:	60a3      	str	r3, [r4, #8]
 8006b7c:	e7f4      	b.n	8006b68 <__swsetup_r+0xb0>
 8006b7e:	2000      	movs	r0, #0
 8006b80:	e7f7      	b.n	8006b72 <__swsetup_r+0xba>
 8006b82:	bf00      	nop
 8006b84:	20000010 	.word	0x20000010
 8006b88:	0800754c 	.word	0x0800754c
 8006b8c:	0800756c 	.word	0x0800756c
 8006b90:	0800752c 	.word	0x0800752c

08006b94 <abort>:
 8006b94:	2006      	movs	r0, #6
 8006b96:	b508      	push	{r3, lr}
 8006b98:	f000 fb42 	bl	8007220 <raise>
 8006b9c:	2001      	movs	r0, #1
 8006b9e:	f7fc fafc 	bl	800319a <_exit>
	...

08006ba4 <__sflush_r>:
 8006ba4:	898a      	ldrh	r2, [r1, #12]
 8006ba6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba8:	4605      	mov	r5, r0
 8006baa:	0710      	lsls	r0, r2, #28
 8006bac:	460c      	mov	r4, r1
 8006bae:	d457      	bmi.n	8006c60 <__sflush_r+0xbc>
 8006bb0:	684b      	ldr	r3, [r1, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	dc04      	bgt.n	8006bc0 <__sflush_r+0x1c>
 8006bb6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	dc01      	bgt.n	8006bc0 <__sflush_r+0x1c>
 8006bbc:	2000      	movs	r0, #0
 8006bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bc2:	2e00      	cmp	r6, #0
 8006bc4:	d0fa      	beq.n	8006bbc <__sflush_r+0x18>
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006bcc:	682f      	ldr	r7, [r5, #0]
 8006bce:	602b      	str	r3, [r5, #0]
 8006bd0:	d032      	beq.n	8006c38 <__sflush_r+0x94>
 8006bd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	075a      	lsls	r2, r3, #29
 8006bd8:	d505      	bpl.n	8006be6 <__sflush_r+0x42>
 8006bda:	6863      	ldr	r3, [r4, #4]
 8006bdc:	1ac0      	subs	r0, r0, r3
 8006bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006be0:	b10b      	cbz	r3, 8006be6 <__sflush_r+0x42>
 8006be2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006be4:	1ac0      	subs	r0, r0, r3
 8006be6:	2300      	movs	r3, #0
 8006be8:	4602      	mov	r2, r0
 8006bea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bec:	4628      	mov	r0, r5
 8006bee:	6a21      	ldr	r1, [r4, #32]
 8006bf0:	47b0      	blx	r6
 8006bf2:	1c43      	adds	r3, r0, #1
 8006bf4:	89a3      	ldrh	r3, [r4, #12]
 8006bf6:	d106      	bne.n	8006c06 <__sflush_r+0x62>
 8006bf8:	6829      	ldr	r1, [r5, #0]
 8006bfa:	291d      	cmp	r1, #29
 8006bfc:	d82c      	bhi.n	8006c58 <__sflush_r+0xb4>
 8006bfe:	4a29      	ldr	r2, [pc, #164]	; (8006ca4 <__sflush_r+0x100>)
 8006c00:	40ca      	lsrs	r2, r1
 8006c02:	07d6      	lsls	r6, r2, #31
 8006c04:	d528      	bpl.n	8006c58 <__sflush_r+0xb4>
 8006c06:	2200      	movs	r2, #0
 8006c08:	6062      	str	r2, [r4, #4]
 8006c0a:	6922      	ldr	r2, [r4, #16]
 8006c0c:	04d9      	lsls	r1, r3, #19
 8006c0e:	6022      	str	r2, [r4, #0]
 8006c10:	d504      	bpl.n	8006c1c <__sflush_r+0x78>
 8006c12:	1c42      	adds	r2, r0, #1
 8006c14:	d101      	bne.n	8006c1a <__sflush_r+0x76>
 8006c16:	682b      	ldr	r3, [r5, #0]
 8006c18:	b903      	cbnz	r3, 8006c1c <__sflush_r+0x78>
 8006c1a:	6560      	str	r0, [r4, #84]	; 0x54
 8006c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c1e:	602f      	str	r7, [r5, #0]
 8006c20:	2900      	cmp	r1, #0
 8006c22:	d0cb      	beq.n	8006bbc <__sflush_r+0x18>
 8006c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c28:	4299      	cmp	r1, r3
 8006c2a:	d002      	beq.n	8006c32 <__sflush_r+0x8e>
 8006c2c:	4628      	mov	r0, r5
 8006c2e:	f000 f9e3 	bl	8006ff8 <_free_r>
 8006c32:	2000      	movs	r0, #0
 8006c34:	6360      	str	r0, [r4, #52]	; 0x34
 8006c36:	e7c2      	b.n	8006bbe <__sflush_r+0x1a>
 8006c38:	6a21      	ldr	r1, [r4, #32]
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	4628      	mov	r0, r5
 8006c3e:	47b0      	blx	r6
 8006c40:	1c41      	adds	r1, r0, #1
 8006c42:	d1c7      	bne.n	8006bd4 <__sflush_r+0x30>
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0c4      	beq.n	8006bd4 <__sflush_r+0x30>
 8006c4a:	2b1d      	cmp	r3, #29
 8006c4c:	d001      	beq.n	8006c52 <__sflush_r+0xae>
 8006c4e:	2b16      	cmp	r3, #22
 8006c50:	d101      	bne.n	8006c56 <__sflush_r+0xb2>
 8006c52:	602f      	str	r7, [r5, #0]
 8006c54:	e7b2      	b.n	8006bbc <__sflush_r+0x18>
 8006c56:	89a3      	ldrh	r3, [r4, #12]
 8006c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c5c:	81a3      	strh	r3, [r4, #12]
 8006c5e:	e7ae      	b.n	8006bbe <__sflush_r+0x1a>
 8006c60:	690f      	ldr	r7, [r1, #16]
 8006c62:	2f00      	cmp	r7, #0
 8006c64:	d0aa      	beq.n	8006bbc <__sflush_r+0x18>
 8006c66:	0793      	lsls	r3, r2, #30
 8006c68:	bf18      	it	ne
 8006c6a:	2300      	movne	r3, #0
 8006c6c:	680e      	ldr	r6, [r1, #0]
 8006c6e:	bf08      	it	eq
 8006c70:	694b      	ldreq	r3, [r1, #20]
 8006c72:	1bf6      	subs	r6, r6, r7
 8006c74:	600f      	str	r7, [r1, #0]
 8006c76:	608b      	str	r3, [r1, #8]
 8006c78:	2e00      	cmp	r6, #0
 8006c7a:	dd9f      	ble.n	8006bbc <__sflush_r+0x18>
 8006c7c:	4633      	mov	r3, r6
 8006c7e:	463a      	mov	r2, r7
 8006c80:	4628      	mov	r0, r5
 8006c82:	6a21      	ldr	r1, [r4, #32]
 8006c84:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c88:	47e0      	blx	ip
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	dc06      	bgt.n	8006c9c <__sflush_r+0xf8>
 8006c8e:	89a3      	ldrh	r3, [r4, #12]
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295
 8006c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c98:	81a3      	strh	r3, [r4, #12]
 8006c9a:	e790      	b.n	8006bbe <__sflush_r+0x1a>
 8006c9c:	4407      	add	r7, r0
 8006c9e:	1a36      	subs	r6, r6, r0
 8006ca0:	e7ea      	b.n	8006c78 <__sflush_r+0xd4>
 8006ca2:	bf00      	nop
 8006ca4:	20400001 	.word	0x20400001

08006ca8 <_fflush_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	690b      	ldr	r3, [r1, #16]
 8006cac:	4605      	mov	r5, r0
 8006cae:	460c      	mov	r4, r1
 8006cb0:	b913      	cbnz	r3, 8006cb8 <_fflush_r+0x10>
 8006cb2:	2500      	movs	r5, #0
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
 8006cb8:	b118      	cbz	r0, 8006cc2 <_fflush_r+0x1a>
 8006cba:	6983      	ldr	r3, [r0, #24]
 8006cbc:	b90b      	cbnz	r3, 8006cc2 <_fflush_r+0x1a>
 8006cbe:	f000 f887 	bl	8006dd0 <__sinit>
 8006cc2:	4b14      	ldr	r3, [pc, #80]	; (8006d14 <_fflush_r+0x6c>)
 8006cc4:	429c      	cmp	r4, r3
 8006cc6:	d11b      	bne.n	8006d00 <_fflush_r+0x58>
 8006cc8:	686c      	ldr	r4, [r5, #4]
 8006cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d0ef      	beq.n	8006cb2 <_fflush_r+0xa>
 8006cd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006cd4:	07d0      	lsls	r0, r2, #31
 8006cd6:	d404      	bmi.n	8006ce2 <_fflush_r+0x3a>
 8006cd8:	0599      	lsls	r1, r3, #22
 8006cda:	d402      	bmi.n	8006ce2 <_fflush_r+0x3a>
 8006cdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cde:	f000 f915 	bl	8006f0c <__retarget_lock_acquire_recursive>
 8006ce2:	4628      	mov	r0, r5
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	f7ff ff5d 	bl	8006ba4 <__sflush_r>
 8006cea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cec:	4605      	mov	r5, r0
 8006cee:	07da      	lsls	r2, r3, #31
 8006cf0:	d4e0      	bmi.n	8006cb4 <_fflush_r+0xc>
 8006cf2:	89a3      	ldrh	r3, [r4, #12]
 8006cf4:	059b      	lsls	r3, r3, #22
 8006cf6:	d4dd      	bmi.n	8006cb4 <_fflush_r+0xc>
 8006cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cfa:	f000 f908 	bl	8006f0e <__retarget_lock_release_recursive>
 8006cfe:	e7d9      	b.n	8006cb4 <_fflush_r+0xc>
 8006d00:	4b05      	ldr	r3, [pc, #20]	; (8006d18 <_fflush_r+0x70>)
 8006d02:	429c      	cmp	r4, r3
 8006d04:	d101      	bne.n	8006d0a <_fflush_r+0x62>
 8006d06:	68ac      	ldr	r4, [r5, #8]
 8006d08:	e7df      	b.n	8006cca <_fflush_r+0x22>
 8006d0a:	4b04      	ldr	r3, [pc, #16]	; (8006d1c <_fflush_r+0x74>)
 8006d0c:	429c      	cmp	r4, r3
 8006d0e:	bf08      	it	eq
 8006d10:	68ec      	ldreq	r4, [r5, #12]
 8006d12:	e7da      	b.n	8006cca <_fflush_r+0x22>
 8006d14:	0800754c 	.word	0x0800754c
 8006d18:	0800756c 	.word	0x0800756c
 8006d1c:	0800752c 	.word	0x0800752c

08006d20 <std>:
 8006d20:	2300      	movs	r3, #0
 8006d22:	b510      	push	{r4, lr}
 8006d24:	4604      	mov	r4, r0
 8006d26:	e9c0 3300 	strd	r3, r3, [r0]
 8006d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d2e:	6083      	str	r3, [r0, #8]
 8006d30:	8181      	strh	r1, [r0, #12]
 8006d32:	6643      	str	r3, [r0, #100]	; 0x64
 8006d34:	81c2      	strh	r2, [r0, #14]
 8006d36:	6183      	str	r3, [r0, #24]
 8006d38:	4619      	mov	r1, r3
 8006d3a:	2208      	movs	r2, #8
 8006d3c:	305c      	adds	r0, #92	; 0x5c
 8006d3e:	f7ff fb73 	bl	8006428 <memset>
 8006d42:	4b05      	ldr	r3, [pc, #20]	; (8006d58 <std+0x38>)
 8006d44:	6224      	str	r4, [r4, #32]
 8006d46:	6263      	str	r3, [r4, #36]	; 0x24
 8006d48:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <std+0x3c>)
 8006d4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d4c:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <std+0x40>)
 8006d4e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d50:	4b04      	ldr	r3, [pc, #16]	; (8006d64 <std+0x44>)
 8006d52:	6323      	str	r3, [r4, #48]	; 0x30
 8006d54:	bd10      	pop	{r4, pc}
 8006d56:	bf00      	nop
 8006d58:	08007259 	.word	0x08007259
 8006d5c:	0800727b 	.word	0x0800727b
 8006d60:	080072b3 	.word	0x080072b3
 8006d64:	080072d7 	.word	0x080072d7

08006d68 <_cleanup_r>:
 8006d68:	4901      	ldr	r1, [pc, #4]	; (8006d70 <_cleanup_r+0x8>)
 8006d6a:	f000 b8af 	b.w	8006ecc <_fwalk_reent>
 8006d6e:	bf00      	nop
 8006d70:	08006ca9 	.word	0x08006ca9

08006d74 <__sfmoreglue>:
 8006d74:	2268      	movs	r2, #104	; 0x68
 8006d76:	b570      	push	{r4, r5, r6, lr}
 8006d78:	1e4d      	subs	r5, r1, #1
 8006d7a:	4355      	muls	r5, r2
 8006d7c:	460e      	mov	r6, r1
 8006d7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d82:	f000 f9a1 	bl	80070c8 <_malloc_r>
 8006d86:	4604      	mov	r4, r0
 8006d88:	b140      	cbz	r0, 8006d9c <__sfmoreglue+0x28>
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	e9c0 1600 	strd	r1, r6, [r0]
 8006d90:	300c      	adds	r0, #12
 8006d92:	60a0      	str	r0, [r4, #8]
 8006d94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d98:	f7ff fb46 	bl	8006428 <memset>
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}

08006da0 <__sfp_lock_acquire>:
 8006da0:	4801      	ldr	r0, [pc, #4]	; (8006da8 <__sfp_lock_acquire+0x8>)
 8006da2:	f000 b8b3 	b.w	8006f0c <__retarget_lock_acquire_recursive>
 8006da6:	bf00      	nop
 8006da8:	20000bd9 	.word	0x20000bd9

08006dac <__sfp_lock_release>:
 8006dac:	4801      	ldr	r0, [pc, #4]	; (8006db4 <__sfp_lock_release+0x8>)
 8006dae:	f000 b8ae 	b.w	8006f0e <__retarget_lock_release_recursive>
 8006db2:	bf00      	nop
 8006db4:	20000bd9 	.word	0x20000bd9

08006db8 <__sinit_lock_acquire>:
 8006db8:	4801      	ldr	r0, [pc, #4]	; (8006dc0 <__sinit_lock_acquire+0x8>)
 8006dba:	f000 b8a7 	b.w	8006f0c <__retarget_lock_acquire_recursive>
 8006dbe:	bf00      	nop
 8006dc0:	20000bda 	.word	0x20000bda

08006dc4 <__sinit_lock_release>:
 8006dc4:	4801      	ldr	r0, [pc, #4]	; (8006dcc <__sinit_lock_release+0x8>)
 8006dc6:	f000 b8a2 	b.w	8006f0e <__retarget_lock_release_recursive>
 8006dca:	bf00      	nop
 8006dcc:	20000bda 	.word	0x20000bda

08006dd0 <__sinit>:
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	f7ff fff0 	bl	8006db8 <__sinit_lock_acquire>
 8006dd8:	69a3      	ldr	r3, [r4, #24]
 8006dda:	b11b      	cbz	r3, 8006de4 <__sinit+0x14>
 8006ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de0:	f7ff bff0 	b.w	8006dc4 <__sinit_lock_release>
 8006de4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006de8:	6523      	str	r3, [r4, #80]	; 0x50
 8006dea:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <__sinit+0x68>)
 8006dec:	4a13      	ldr	r2, [pc, #76]	; (8006e3c <__sinit+0x6c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006df2:	42a3      	cmp	r3, r4
 8006df4:	bf08      	it	eq
 8006df6:	2301      	moveq	r3, #1
 8006df8:	4620      	mov	r0, r4
 8006dfa:	bf08      	it	eq
 8006dfc:	61a3      	streq	r3, [r4, #24]
 8006dfe:	f000 f81f 	bl	8006e40 <__sfp>
 8006e02:	6060      	str	r0, [r4, #4]
 8006e04:	4620      	mov	r0, r4
 8006e06:	f000 f81b 	bl	8006e40 <__sfp>
 8006e0a:	60a0      	str	r0, [r4, #8]
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	f000 f817 	bl	8006e40 <__sfp>
 8006e12:	2200      	movs	r2, #0
 8006e14:	2104      	movs	r1, #4
 8006e16:	60e0      	str	r0, [r4, #12]
 8006e18:	6860      	ldr	r0, [r4, #4]
 8006e1a:	f7ff ff81 	bl	8006d20 <std>
 8006e1e:	2201      	movs	r2, #1
 8006e20:	2109      	movs	r1, #9
 8006e22:	68a0      	ldr	r0, [r4, #8]
 8006e24:	f7ff ff7c 	bl	8006d20 <std>
 8006e28:	2202      	movs	r2, #2
 8006e2a:	2112      	movs	r1, #18
 8006e2c:	68e0      	ldr	r0, [r4, #12]
 8006e2e:	f7ff ff77 	bl	8006d20 <std>
 8006e32:	2301      	movs	r3, #1
 8006e34:	61a3      	str	r3, [r4, #24]
 8006e36:	e7d1      	b.n	8006ddc <__sinit+0xc>
 8006e38:	080074f4 	.word	0x080074f4
 8006e3c:	08006d69 	.word	0x08006d69

08006e40 <__sfp>:
 8006e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e42:	4607      	mov	r7, r0
 8006e44:	f7ff ffac 	bl	8006da0 <__sfp_lock_acquire>
 8006e48:	4b1e      	ldr	r3, [pc, #120]	; (8006ec4 <__sfp+0x84>)
 8006e4a:	681e      	ldr	r6, [r3, #0]
 8006e4c:	69b3      	ldr	r3, [r6, #24]
 8006e4e:	b913      	cbnz	r3, 8006e56 <__sfp+0x16>
 8006e50:	4630      	mov	r0, r6
 8006e52:	f7ff ffbd 	bl	8006dd0 <__sinit>
 8006e56:	3648      	adds	r6, #72	; 0x48
 8006e58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	d503      	bpl.n	8006e68 <__sfp+0x28>
 8006e60:	6833      	ldr	r3, [r6, #0]
 8006e62:	b30b      	cbz	r3, 8006ea8 <__sfp+0x68>
 8006e64:	6836      	ldr	r6, [r6, #0]
 8006e66:	e7f7      	b.n	8006e58 <__sfp+0x18>
 8006e68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e6c:	b9d5      	cbnz	r5, 8006ea4 <__sfp+0x64>
 8006e6e:	4b16      	ldr	r3, [pc, #88]	; (8006ec8 <__sfp+0x88>)
 8006e70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e74:	60e3      	str	r3, [r4, #12]
 8006e76:	6665      	str	r5, [r4, #100]	; 0x64
 8006e78:	f000 f847 	bl	8006f0a <__retarget_lock_init_recursive>
 8006e7c:	f7ff ff96 	bl	8006dac <__sfp_lock_release>
 8006e80:	2208      	movs	r2, #8
 8006e82:	4629      	mov	r1, r5
 8006e84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e8c:	6025      	str	r5, [r4, #0]
 8006e8e:	61a5      	str	r5, [r4, #24]
 8006e90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e94:	f7ff fac8 	bl	8006428 <memset>
 8006e98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ea4:	3468      	adds	r4, #104	; 0x68
 8006ea6:	e7d9      	b.n	8006e5c <__sfp+0x1c>
 8006ea8:	2104      	movs	r1, #4
 8006eaa:	4638      	mov	r0, r7
 8006eac:	f7ff ff62 	bl	8006d74 <__sfmoreglue>
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	6030      	str	r0, [r6, #0]
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d1d5      	bne.n	8006e64 <__sfp+0x24>
 8006eb8:	f7ff ff78 	bl	8006dac <__sfp_lock_release>
 8006ebc:	230c      	movs	r3, #12
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	e7ee      	b.n	8006ea0 <__sfp+0x60>
 8006ec2:	bf00      	nop
 8006ec4:	080074f4 	.word	0x080074f4
 8006ec8:	ffff0001 	.word	0xffff0001

08006ecc <_fwalk_reent>:
 8006ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed0:	4606      	mov	r6, r0
 8006ed2:	4688      	mov	r8, r1
 8006ed4:	2700      	movs	r7, #0
 8006ed6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006eda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ede:	f1b9 0901 	subs.w	r9, r9, #1
 8006ee2:	d505      	bpl.n	8006ef0 <_fwalk_reent+0x24>
 8006ee4:	6824      	ldr	r4, [r4, #0]
 8006ee6:	2c00      	cmp	r4, #0
 8006ee8:	d1f7      	bne.n	8006eda <_fwalk_reent+0xe>
 8006eea:	4638      	mov	r0, r7
 8006eec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ef0:	89ab      	ldrh	r3, [r5, #12]
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d907      	bls.n	8006f06 <_fwalk_reent+0x3a>
 8006ef6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006efa:	3301      	adds	r3, #1
 8006efc:	d003      	beq.n	8006f06 <_fwalk_reent+0x3a>
 8006efe:	4629      	mov	r1, r5
 8006f00:	4630      	mov	r0, r6
 8006f02:	47c0      	blx	r8
 8006f04:	4307      	orrs	r7, r0
 8006f06:	3568      	adds	r5, #104	; 0x68
 8006f08:	e7e9      	b.n	8006ede <_fwalk_reent+0x12>

08006f0a <__retarget_lock_init_recursive>:
 8006f0a:	4770      	bx	lr

08006f0c <__retarget_lock_acquire_recursive>:
 8006f0c:	4770      	bx	lr

08006f0e <__retarget_lock_release_recursive>:
 8006f0e:	4770      	bx	lr

08006f10 <__swhatbuf_r>:
 8006f10:	b570      	push	{r4, r5, r6, lr}
 8006f12:	460e      	mov	r6, r1
 8006f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f18:	4614      	mov	r4, r2
 8006f1a:	2900      	cmp	r1, #0
 8006f1c:	461d      	mov	r5, r3
 8006f1e:	b096      	sub	sp, #88	; 0x58
 8006f20:	da08      	bge.n	8006f34 <__swhatbuf_r+0x24>
 8006f22:	2200      	movs	r2, #0
 8006f24:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006f28:	602a      	str	r2, [r5, #0]
 8006f2a:	061a      	lsls	r2, r3, #24
 8006f2c:	d410      	bmi.n	8006f50 <__swhatbuf_r+0x40>
 8006f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f32:	e00e      	b.n	8006f52 <__swhatbuf_r+0x42>
 8006f34:	466a      	mov	r2, sp
 8006f36:	f000 f9f5 	bl	8007324 <_fstat_r>
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	dbf1      	blt.n	8006f22 <__swhatbuf_r+0x12>
 8006f3e:	9a01      	ldr	r2, [sp, #4]
 8006f40:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f44:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f48:	425a      	negs	r2, r3
 8006f4a:	415a      	adcs	r2, r3
 8006f4c:	602a      	str	r2, [r5, #0]
 8006f4e:	e7ee      	b.n	8006f2e <__swhatbuf_r+0x1e>
 8006f50:	2340      	movs	r3, #64	; 0x40
 8006f52:	2000      	movs	r0, #0
 8006f54:	6023      	str	r3, [r4, #0]
 8006f56:	b016      	add	sp, #88	; 0x58
 8006f58:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f5c <__smakebuf_r>:
 8006f5c:	898b      	ldrh	r3, [r1, #12]
 8006f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f60:	079d      	lsls	r5, r3, #30
 8006f62:	4606      	mov	r6, r0
 8006f64:	460c      	mov	r4, r1
 8006f66:	d507      	bpl.n	8006f78 <__smakebuf_r+0x1c>
 8006f68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	6123      	str	r3, [r4, #16]
 8006f70:	2301      	movs	r3, #1
 8006f72:	6163      	str	r3, [r4, #20]
 8006f74:	b002      	add	sp, #8
 8006f76:	bd70      	pop	{r4, r5, r6, pc}
 8006f78:	466a      	mov	r2, sp
 8006f7a:	ab01      	add	r3, sp, #4
 8006f7c:	f7ff ffc8 	bl	8006f10 <__swhatbuf_r>
 8006f80:	9900      	ldr	r1, [sp, #0]
 8006f82:	4605      	mov	r5, r0
 8006f84:	4630      	mov	r0, r6
 8006f86:	f000 f89f 	bl	80070c8 <_malloc_r>
 8006f8a:	b948      	cbnz	r0, 8006fa0 <__smakebuf_r+0x44>
 8006f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f90:	059a      	lsls	r2, r3, #22
 8006f92:	d4ef      	bmi.n	8006f74 <__smakebuf_r+0x18>
 8006f94:	f023 0303 	bic.w	r3, r3, #3
 8006f98:	f043 0302 	orr.w	r3, r3, #2
 8006f9c:	81a3      	strh	r3, [r4, #12]
 8006f9e:	e7e3      	b.n	8006f68 <__smakebuf_r+0xc>
 8006fa0:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <__smakebuf_r+0x7c>)
 8006fa2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006fa4:	89a3      	ldrh	r3, [r4, #12]
 8006fa6:	6020      	str	r0, [r4, #0]
 8006fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fac:	81a3      	strh	r3, [r4, #12]
 8006fae:	9b00      	ldr	r3, [sp, #0]
 8006fb0:	6120      	str	r0, [r4, #16]
 8006fb2:	6163      	str	r3, [r4, #20]
 8006fb4:	9b01      	ldr	r3, [sp, #4]
 8006fb6:	b15b      	cbz	r3, 8006fd0 <__smakebuf_r+0x74>
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fbe:	f000 f9c3 	bl	8007348 <_isatty_r>
 8006fc2:	b128      	cbz	r0, 8006fd0 <__smakebuf_r+0x74>
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	f023 0303 	bic.w	r3, r3, #3
 8006fca:	f043 0301 	orr.w	r3, r3, #1
 8006fce:	81a3      	strh	r3, [r4, #12]
 8006fd0:	89a0      	ldrh	r0, [r4, #12]
 8006fd2:	4305      	orrs	r5, r0
 8006fd4:	81a5      	strh	r5, [r4, #12]
 8006fd6:	e7cd      	b.n	8006f74 <__smakebuf_r+0x18>
 8006fd8:	08006d69 	.word	0x08006d69

08006fdc <memchr>:
 8006fdc:	4603      	mov	r3, r0
 8006fde:	b510      	push	{r4, lr}
 8006fe0:	b2c9      	uxtb	r1, r1
 8006fe2:	4402      	add	r2, r0
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	d101      	bne.n	8006fee <memchr+0x12>
 8006fea:	2000      	movs	r0, #0
 8006fec:	e003      	b.n	8006ff6 <memchr+0x1a>
 8006fee:	7804      	ldrb	r4, [r0, #0]
 8006ff0:	3301      	adds	r3, #1
 8006ff2:	428c      	cmp	r4, r1
 8006ff4:	d1f6      	bne.n	8006fe4 <memchr+0x8>
 8006ff6:	bd10      	pop	{r4, pc}

08006ff8 <_free_r>:
 8006ff8:	b538      	push	{r3, r4, r5, lr}
 8006ffa:	4605      	mov	r5, r0
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	d040      	beq.n	8007082 <_free_r+0x8a>
 8007000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007004:	1f0c      	subs	r4, r1, #4
 8007006:	2b00      	cmp	r3, #0
 8007008:	bfb8      	it	lt
 800700a:	18e4      	addlt	r4, r4, r3
 800700c:	f000 f9be 	bl	800738c <__malloc_lock>
 8007010:	4a1c      	ldr	r2, [pc, #112]	; (8007084 <_free_r+0x8c>)
 8007012:	6813      	ldr	r3, [r2, #0]
 8007014:	b933      	cbnz	r3, 8007024 <_free_r+0x2c>
 8007016:	6063      	str	r3, [r4, #4]
 8007018:	6014      	str	r4, [r2, #0]
 800701a:	4628      	mov	r0, r5
 800701c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007020:	f000 b9ba 	b.w	8007398 <__malloc_unlock>
 8007024:	42a3      	cmp	r3, r4
 8007026:	d908      	bls.n	800703a <_free_r+0x42>
 8007028:	6820      	ldr	r0, [r4, #0]
 800702a:	1821      	adds	r1, r4, r0
 800702c:	428b      	cmp	r3, r1
 800702e:	bf01      	itttt	eq
 8007030:	6819      	ldreq	r1, [r3, #0]
 8007032:	685b      	ldreq	r3, [r3, #4]
 8007034:	1809      	addeq	r1, r1, r0
 8007036:	6021      	streq	r1, [r4, #0]
 8007038:	e7ed      	b.n	8007016 <_free_r+0x1e>
 800703a:	461a      	mov	r2, r3
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	b10b      	cbz	r3, 8007044 <_free_r+0x4c>
 8007040:	42a3      	cmp	r3, r4
 8007042:	d9fa      	bls.n	800703a <_free_r+0x42>
 8007044:	6811      	ldr	r1, [r2, #0]
 8007046:	1850      	adds	r0, r2, r1
 8007048:	42a0      	cmp	r0, r4
 800704a:	d10b      	bne.n	8007064 <_free_r+0x6c>
 800704c:	6820      	ldr	r0, [r4, #0]
 800704e:	4401      	add	r1, r0
 8007050:	1850      	adds	r0, r2, r1
 8007052:	4283      	cmp	r3, r0
 8007054:	6011      	str	r1, [r2, #0]
 8007056:	d1e0      	bne.n	800701a <_free_r+0x22>
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	4401      	add	r1, r0
 800705e:	6011      	str	r1, [r2, #0]
 8007060:	6053      	str	r3, [r2, #4]
 8007062:	e7da      	b.n	800701a <_free_r+0x22>
 8007064:	d902      	bls.n	800706c <_free_r+0x74>
 8007066:	230c      	movs	r3, #12
 8007068:	602b      	str	r3, [r5, #0]
 800706a:	e7d6      	b.n	800701a <_free_r+0x22>
 800706c:	6820      	ldr	r0, [r4, #0]
 800706e:	1821      	adds	r1, r4, r0
 8007070:	428b      	cmp	r3, r1
 8007072:	bf01      	itttt	eq
 8007074:	6819      	ldreq	r1, [r3, #0]
 8007076:	685b      	ldreq	r3, [r3, #4]
 8007078:	1809      	addeq	r1, r1, r0
 800707a:	6021      	streq	r1, [r4, #0]
 800707c:	6063      	str	r3, [r4, #4]
 800707e:	6054      	str	r4, [r2, #4]
 8007080:	e7cb      	b.n	800701a <_free_r+0x22>
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	20000bdc 	.word	0x20000bdc

08007088 <sbrk_aligned>:
 8007088:	b570      	push	{r4, r5, r6, lr}
 800708a:	4e0e      	ldr	r6, [pc, #56]	; (80070c4 <sbrk_aligned+0x3c>)
 800708c:	460c      	mov	r4, r1
 800708e:	6831      	ldr	r1, [r6, #0]
 8007090:	4605      	mov	r5, r0
 8007092:	b911      	cbnz	r1, 800709a <sbrk_aligned+0x12>
 8007094:	f000 f88c 	bl	80071b0 <_sbrk_r>
 8007098:	6030      	str	r0, [r6, #0]
 800709a:	4621      	mov	r1, r4
 800709c:	4628      	mov	r0, r5
 800709e:	f000 f887 	bl	80071b0 <_sbrk_r>
 80070a2:	1c43      	adds	r3, r0, #1
 80070a4:	d00a      	beq.n	80070bc <sbrk_aligned+0x34>
 80070a6:	1cc4      	adds	r4, r0, #3
 80070a8:	f024 0403 	bic.w	r4, r4, #3
 80070ac:	42a0      	cmp	r0, r4
 80070ae:	d007      	beq.n	80070c0 <sbrk_aligned+0x38>
 80070b0:	1a21      	subs	r1, r4, r0
 80070b2:	4628      	mov	r0, r5
 80070b4:	f000 f87c 	bl	80071b0 <_sbrk_r>
 80070b8:	3001      	adds	r0, #1
 80070ba:	d101      	bne.n	80070c0 <sbrk_aligned+0x38>
 80070bc:	f04f 34ff 	mov.w	r4, #4294967295
 80070c0:	4620      	mov	r0, r4
 80070c2:	bd70      	pop	{r4, r5, r6, pc}
 80070c4:	20000be0 	.word	0x20000be0

080070c8 <_malloc_r>:
 80070c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070cc:	1ccd      	adds	r5, r1, #3
 80070ce:	f025 0503 	bic.w	r5, r5, #3
 80070d2:	3508      	adds	r5, #8
 80070d4:	2d0c      	cmp	r5, #12
 80070d6:	bf38      	it	cc
 80070d8:	250c      	movcc	r5, #12
 80070da:	2d00      	cmp	r5, #0
 80070dc:	4607      	mov	r7, r0
 80070de:	db01      	blt.n	80070e4 <_malloc_r+0x1c>
 80070e0:	42a9      	cmp	r1, r5
 80070e2:	d905      	bls.n	80070f0 <_malloc_r+0x28>
 80070e4:	230c      	movs	r3, #12
 80070e6:	2600      	movs	r6, #0
 80070e8:	603b      	str	r3, [r7, #0]
 80070ea:	4630      	mov	r0, r6
 80070ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070f0:	4e2e      	ldr	r6, [pc, #184]	; (80071ac <_malloc_r+0xe4>)
 80070f2:	f000 f94b 	bl	800738c <__malloc_lock>
 80070f6:	6833      	ldr	r3, [r6, #0]
 80070f8:	461c      	mov	r4, r3
 80070fa:	bb34      	cbnz	r4, 800714a <_malloc_r+0x82>
 80070fc:	4629      	mov	r1, r5
 80070fe:	4638      	mov	r0, r7
 8007100:	f7ff ffc2 	bl	8007088 <sbrk_aligned>
 8007104:	1c43      	adds	r3, r0, #1
 8007106:	4604      	mov	r4, r0
 8007108:	d14d      	bne.n	80071a6 <_malloc_r+0xde>
 800710a:	6834      	ldr	r4, [r6, #0]
 800710c:	4626      	mov	r6, r4
 800710e:	2e00      	cmp	r6, #0
 8007110:	d140      	bne.n	8007194 <_malloc_r+0xcc>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	4631      	mov	r1, r6
 8007116:	4638      	mov	r0, r7
 8007118:	eb04 0803 	add.w	r8, r4, r3
 800711c:	f000 f848 	bl	80071b0 <_sbrk_r>
 8007120:	4580      	cmp	r8, r0
 8007122:	d13a      	bne.n	800719a <_malloc_r+0xd2>
 8007124:	6821      	ldr	r1, [r4, #0]
 8007126:	3503      	adds	r5, #3
 8007128:	1a6d      	subs	r5, r5, r1
 800712a:	f025 0503 	bic.w	r5, r5, #3
 800712e:	3508      	adds	r5, #8
 8007130:	2d0c      	cmp	r5, #12
 8007132:	bf38      	it	cc
 8007134:	250c      	movcc	r5, #12
 8007136:	4638      	mov	r0, r7
 8007138:	4629      	mov	r1, r5
 800713a:	f7ff ffa5 	bl	8007088 <sbrk_aligned>
 800713e:	3001      	adds	r0, #1
 8007140:	d02b      	beq.n	800719a <_malloc_r+0xd2>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	442b      	add	r3, r5
 8007146:	6023      	str	r3, [r4, #0]
 8007148:	e00e      	b.n	8007168 <_malloc_r+0xa0>
 800714a:	6822      	ldr	r2, [r4, #0]
 800714c:	1b52      	subs	r2, r2, r5
 800714e:	d41e      	bmi.n	800718e <_malloc_r+0xc6>
 8007150:	2a0b      	cmp	r2, #11
 8007152:	d916      	bls.n	8007182 <_malloc_r+0xba>
 8007154:	1961      	adds	r1, r4, r5
 8007156:	42a3      	cmp	r3, r4
 8007158:	6025      	str	r5, [r4, #0]
 800715a:	bf18      	it	ne
 800715c:	6059      	strne	r1, [r3, #4]
 800715e:	6863      	ldr	r3, [r4, #4]
 8007160:	bf08      	it	eq
 8007162:	6031      	streq	r1, [r6, #0]
 8007164:	5162      	str	r2, [r4, r5]
 8007166:	604b      	str	r3, [r1, #4]
 8007168:	4638      	mov	r0, r7
 800716a:	f104 060b 	add.w	r6, r4, #11
 800716e:	f000 f913 	bl	8007398 <__malloc_unlock>
 8007172:	f026 0607 	bic.w	r6, r6, #7
 8007176:	1d23      	adds	r3, r4, #4
 8007178:	1af2      	subs	r2, r6, r3
 800717a:	d0b6      	beq.n	80070ea <_malloc_r+0x22>
 800717c:	1b9b      	subs	r3, r3, r6
 800717e:	50a3      	str	r3, [r4, r2]
 8007180:	e7b3      	b.n	80070ea <_malloc_r+0x22>
 8007182:	6862      	ldr	r2, [r4, #4]
 8007184:	42a3      	cmp	r3, r4
 8007186:	bf0c      	ite	eq
 8007188:	6032      	streq	r2, [r6, #0]
 800718a:	605a      	strne	r2, [r3, #4]
 800718c:	e7ec      	b.n	8007168 <_malloc_r+0xa0>
 800718e:	4623      	mov	r3, r4
 8007190:	6864      	ldr	r4, [r4, #4]
 8007192:	e7b2      	b.n	80070fa <_malloc_r+0x32>
 8007194:	4634      	mov	r4, r6
 8007196:	6876      	ldr	r6, [r6, #4]
 8007198:	e7b9      	b.n	800710e <_malloc_r+0x46>
 800719a:	230c      	movs	r3, #12
 800719c:	4638      	mov	r0, r7
 800719e:	603b      	str	r3, [r7, #0]
 80071a0:	f000 f8fa 	bl	8007398 <__malloc_unlock>
 80071a4:	e7a1      	b.n	80070ea <_malloc_r+0x22>
 80071a6:	6025      	str	r5, [r4, #0]
 80071a8:	e7de      	b.n	8007168 <_malloc_r+0xa0>
 80071aa:	bf00      	nop
 80071ac:	20000bdc 	.word	0x20000bdc

080071b0 <_sbrk_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	2300      	movs	r3, #0
 80071b4:	4d05      	ldr	r5, [pc, #20]	; (80071cc <_sbrk_r+0x1c>)
 80071b6:	4604      	mov	r4, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	602b      	str	r3, [r5, #0]
 80071bc:	f7fc f860 	bl	8003280 <_sbrk>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d102      	bne.n	80071ca <_sbrk_r+0x1a>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	b103      	cbz	r3, 80071ca <_sbrk_r+0x1a>
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	20000be4 	.word	0x20000be4

080071d0 <_raise_r>:
 80071d0:	291f      	cmp	r1, #31
 80071d2:	b538      	push	{r3, r4, r5, lr}
 80071d4:	4604      	mov	r4, r0
 80071d6:	460d      	mov	r5, r1
 80071d8:	d904      	bls.n	80071e4 <_raise_r+0x14>
 80071da:	2316      	movs	r3, #22
 80071dc:	6003      	str	r3, [r0, #0]
 80071de:	f04f 30ff 	mov.w	r0, #4294967295
 80071e2:	bd38      	pop	{r3, r4, r5, pc}
 80071e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80071e6:	b112      	cbz	r2, 80071ee <_raise_r+0x1e>
 80071e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80071ec:	b94b      	cbnz	r3, 8007202 <_raise_r+0x32>
 80071ee:	4620      	mov	r0, r4
 80071f0:	f000 f830 	bl	8007254 <_getpid_r>
 80071f4:	462a      	mov	r2, r5
 80071f6:	4601      	mov	r1, r0
 80071f8:	4620      	mov	r0, r4
 80071fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071fe:	f000 b817 	b.w	8007230 <_kill_r>
 8007202:	2b01      	cmp	r3, #1
 8007204:	d00a      	beq.n	800721c <_raise_r+0x4c>
 8007206:	1c59      	adds	r1, r3, #1
 8007208:	d103      	bne.n	8007212 <_raise_r+0x42>
 800720a:	2316      	movs	r3, #22
 800720c:	6003      	str	r3, [r0, #0]
 800720e:	2001      	movs	r0, #1
 8007210:	e7e7      	b.n	80071e2 <_raise_r+0x12>
 8007212:	2400      	movs	r4, #0
 8007214:	4628      	mov	r0, r5
 8007216:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800721a:	4798      	blx	r3
 800721c:	2000      	movs	r0, #0
 800721e:	e7e0      	b.n	80071e2 <_raise_r+0x12>

08007220 <raise>:
 8007220:	4b02      	ldr	r3, [pc, #8]	; (800722c <raise+0xc>)
 8007222:	4601      	mov	r1, r0
 8007224:	6818      	ldr	r0, [r3, #0]
 8007226:	f7ff bfd3 	b.w	80071d0 <_raise_r>
 800722a:	bf00      	nop
 800722c:	20000010 	.word	0x20000010

08007230 <_kill_r>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	2300      	movs	r3, #0
 8007234:	4d06      	ldr	r5, [pc, #24]	; (8007250 <_kill_r+0x20>)
 8007236:	4604      	mov	r4, r0
 8007238:	4608      	mov	r0, r1
 800723a:	4611      	mov	r1, r2
 800723c:	602b      	str	r3, [r5, #0]
 800723e:	f7fb ff9c 	bl	800317a <_kill>
 8007242:	1c43      	adds	r3, r0, #1
 8007244:	d102      	bne.n	800724c <_kill_r+0x1c>
 8007246:	682b      	ldr	r3, [r5, #0]
 8007248:	b103      	cbz	r3, 800724c <_kill_r+0x1c>
 800724a:	6023      	str	r3, [r4, #0]
 800724c:	bd38      	pop	{r3, r4, r5, pc}
 800724e:	bf00      	nop
 8007250:	20000be4 	.word	0x20000be4

08007254 <_getpid_r>:
 8007254:	f7fb bf8a 	b.w	800316c <_getpid>

08007258 <__sread>:
 8007258:	b510      	push	{r4, lr}
 800725a:	460c      	mov	r4, r1
 800725c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007260:	f000 f8a0 	bl	80073a4 <_read_r>
 8007264:	2800      	cmp	r0, #0
 8007266:	bfab      	itete	ge
 8007268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800726a:	89a3      	ldrhlt	r3, [r4, #12]
 800726c:	181b      	addge	r3, r3, r0
 800726e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007272:	bfac      	ite	ge
 8007274:	6563      	strge	r3, [r4, #84]	; 0x54
 8007276:	81a3      	strhlt	r3, [r4, #12]
 8007278:	bd10      	pop	{r4, pc}

0800727a <__swrite>:
 800727a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800727e:	461f      	mov	r7, r3
 8007280:	898b      	ldrh	r3, [r1, #12]
 8007282:	4605      	mov	r5, r0
 8007284:	05db      	lsls	r3, r3, #23
 8007286:	460c      	mov	r4, r1
 8007288:	4616      	mov	r6, r2
 800728a:	d505      	bpl.n	8007298 <__swrite+0x1e>
 800728c:	2302      	movs	r3, #2
 800728e:	2200      	movs	r2, #0
 8007290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007294:	f000 f868 	bl	8007368 <_lseek_r>
 8007298:	89a3      	ldrh	r3, [r4, #12]
 800729a:	4632      	mov	r2, r6
 800729c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072a0:	81a3      	strh	r3, [r4, #12]
 80072a2:	4628      	mov	r0, r5
 80072a4:	463b      	mov	r3, r7
 80072a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072ae:	f000 b817 	b.w	80072e0 <_write_r>

080072b2 <__sseek>:
 80072b2:	b510      	push	{r4, lr}
 80072b4:	460c      	mov	r4, r1
 80072b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ba:	f000 f855 	bl	8007368 <_lseek_r>
 80072be:	1c43      	adds	r3, r0, #1
 80072c0:	89a3      	ldrh	r3, [r4, #12]
 80072c2:	bf15      	itete	ne
 80072c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80072c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072ce:	81a3      	strheq	r3, [r4, #12]
 80072d0:	bf18      	it	ne
 80072d2:	81a3      	strhne	r3, [r4, #12]
 80072d4:	bd10      	pop	{r4, pc}

080072d6 <__sclose>:
 80072d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072da:	f000 b813 	b.w	8007304 <_close_r>
	...

080072e0 <_write_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	4611      	mov	r1, r2
 80072e8:	2200      	movs	r2, #0
 80072ea:	4d05      	ldr	r5, [pc, #20]	; (8007300 <_write_r+0x20>)
 80072ec:	602a      	str	r2, [r5, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f7fb ff7a 	bl	80031e8 <_write>
 80072f4:	1c43      	adds	r3, r0, #1
 80072f6:	d102      	bne.n	80072fe <_write_r+0x1e>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	b103      	cbz	r3, 80072fe <_write_r+0x1e>
 80072fc:	6023      	str	r3, [r4, #0]
 80072fe:	bd38      	pop	{r3, r4, r5, pc}
 8007300:	20000be4 	.word	0x20000be4

08007304 <_close_r>:
 8007304:	b538      	push	{r3, r4, r5, lr}
 8007306:	2300      	movs	r3, #0
 8007308:	4d05      	ldr	r5, [pc, #20]	; (8007320 <_close_r+0x1c>)
 800730a:	4604      	mov	r4, r0
 800730c:	4608      	mov	r0, r1
 800730e:	602b      	str	r3, [r5, #0]
 8007310:	f7fb ff86 	bl	8003220 <_close>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	d102      	bne.n	800731e <_close_r+0x1a>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	b103      	cbz	r3, 800731e <_close_r+0x1a>
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	bd38      	pop	{r3, r4, r5, pc}
 8007320:	20000be4 	.word	0x20000be4

08007324 <_fstat_r>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	2300      	movs	r3, #0
 8007328:	4d06      	ldr	r5, [pc, #24]	; (8007344 <_fstat_r+0x20>)
 800732a:	4604      	mov	r4, r0
 800732c:	4608      	mov	r0, r1
 800732e:	4611      	mov	r1, r2
 8007330:	602b      	str	r3, [r5, #0]
 8007332:	f7fb ff80 	bl	8003236 <_fstat>
 8007336:	1c43      	adds	r3, r0, #1
 8007338:	d102      	bne.n	8007340 <_fstat_r+0x1c>
 800733a:	682b      	ldr	r3, [r5, #0]
 800733c:	b103      	cbz	r3, 8007340 <_fstat_r+0x1c>
 800733e:	6023      	str	r3, [r4, #0]
 8007340:	bd38      	pop	{r3, r4, r5, pc}
 8007342:	bf00      	nop
 8007344:	20000be4 	.word	0x20000be4

08007348 <_isatty_r>:
 8007348:	b538      	push	{r3, r4, r5, lr}
 800734a:	2300      	movs	r3, #0
 800734c:	4d05      	ldr	r5, [pc, #20]	; (8007364 <_isatty_r+0x1c>)
 800734e:	4604      	mov	r4, r0
 8007350:	4608      	mov	r0, r1
 8007352:	602b      	str	r3, [r5, #0]
 8007354:	f7fb ff7e 	bl	8003254 <_isatty>
 8007358:	1c43      	adds	r3, r0, #1
 800735a:	d102      	bne.n	8007362 <_isatty_r+0x1a>
 800735c:	682b      	ldr	r3, [r5, #0]
 800735e:	b103      	cbz	r3, 8007362 <_isatty_r+0x1a>
 8007360:	6023      	str	r3, [r4, #0]
 8007362:	bd38      	pop	{r3, r4, r5, pc}
 8007364:	20000be4 	.word	0x20000be4

08007368 <_lseek_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4604      	mov	r4, r0
 800736c:	4608      	mov	r0, r1
 800736e:	4611      	mov	r1, r2
 8007370:	2200      	movs	r2, #0
 8007372:	4d05      	ldr	r5, [pc, #20]	; (8007388 <_lseek_r+0x20>)
 8007374:	602a      	str	r2, [r5, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	f7fb ff76 	bl	8003268 <_lseek>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d102      	bne.n	8007386 <_lseek_r+0x1e>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	b103      	cbz	r3, 8007386 <_lseek_r+0x1e>
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	20000be4 	.word	0x20000be4

0800738c <__malloc_lock>:
 800738c:	4801      	ldr	r0, [pc, #4]	; (8007394 <__malloc_lock+0x8>)
 800738e:	f7ff bdbd 	b.w	8006f0c <__retarget_lock_acquire_recursive>
 8007392:	bf00      	nop
 8007394:	20000bd8 	.word	0x20000bd8

08007398 <__malloc_unlock>:
 8007398:	4801      	ldr	r0, [pc, #4]	; (80073a0 <__malloc_unlock+0x8>)
 800739a:	f7ff bdb8 	b.w	8006f0e <__retarget_lock_release_recursive>
 800739e:	bf00      	nop
 80073a0:	20000bd8 	.word	0x20000bd8

080073a4 <_read_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4604      	mov	r4, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	4611      	mov	r1, r2
 80073ac:	2200      	movs	r2, #0
 80073ae:	4d05      	ldr	r5, [pc, #20]	; (80073c4 <_read_r+0x20>)
 80073b0:	602a      	str	r2, [r5, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	f7fb fefb 	bl	80031ae <_read>
 80073b8:	1c43      	adds	r3, r0, #1
 80073ba:	d102      	bne.n	80073c2 <_read_r+0x1e>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	b103      	cbz	r3, 80073c2 <_read_r+0x1e>
 80073c0:	6023      	str	r3, [r4, #0]
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
 80073c4:	20000be4 	.word	0x20000be4

080073c8 <roundf>:
 80073c8:	b508      	push	{r3, lr}
 80073ca:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80073ce:	3b7f      	subs	r3, #127	; 0x7f
 80073d0:	2b16      	cmp	r3, #22
 80073d2:	4601      	mov	r1, r0
 80073d4:	4602      	mov	r2, r0
 80073d6:	dc14      	bgt.n	8007402 <roundf+0x3a>
 80073d8:	2b00      	cmp	r3, #0
 80073da:	da07      	bge.n	80073ec <roundf+0x24>
 80073dc:	3301      	adds	r3, #1
 80073de:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 80073e2:	d101      	bne.n	80073e8 <roundf+0x20>
 80073e4:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 80073e8:	4608      	mov	r0, r1
 80073ea:	bd08      	pop	{r3, pc}
 80073ec:	4808      	ldr	r0, [pc, #32]	; (8007410 <roundf+0x48>)
 80073ee:	4118      	asrs	r0, r3
 80073f0:	4201      	tst	r1, r0
 80073f2:	d0f9      	beq.n	80073e8 <roundf+0x20>
 80073f4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073f8:	4119      	asrs	r1, r3
 80073fa:	4411      	add	r1, r2
 80073fc:	ea21 0100 	bic.w	r1, r1, r0
 8007400:	e7f2      	b.n	80073e8 <roundf+0x20>
 8007402:	2b80      	cmp	r3, #128	; 0x80
 8007404:	d1f0      	bne.n	80073e8 <roundf+0x20>
 8007406:	f7f9 fb33 	bl	8000a70 <__addsf3>
 800740a:	4601      	mov	r1, r0
 800740c:	e7ec      	b.n	80073e8 <roundf+0x20>
 800740e:	bf00      	nop
 8007410:	007fffff 	.word	0x007fffff

08007414 <_init>:
 8007414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007416:	bf00      	nop
 8007418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800741a:	bc08      	pop	{r3}
 800741c:	469e      	mov	lr, r3
 800741e:	4770      	bx	lr

08007420 <_fini>:
 8007420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007422:	bf00      	nop
 8007424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007426:	bc08      	pop	{r3}
 8007428:	469e      	mov	lr, r3
 800742a:	4770      	bx	lr
