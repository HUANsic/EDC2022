
EDC_GeneralCore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a128  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  0800a310  0800a310  0001a310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa70  0800aa70  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  0800aa70  0800aa70  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800aa70  0800aa70  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa70  0800aa70  0001aa70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa74  0800aa74  0001aa74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800aa78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007e20  2000007c  0800aaf4  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007e9c  0800aaf4  00027e9c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013731  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031f1  00000000  00000000  000337d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  000369c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f8  00000000  00000000  00037cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c0c4  00000000  00000000  00038ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c44  00000000  00000000  00054f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e086  00000000  00000000  0006cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ac4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c6c  00000000  00000000  0010aca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000007c 	.word	0x2000007c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800a2f8 	.word	0x0800a2f8

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000080 	.word	0x20000080
 8000224:	0800a2f8 	.word	0x0800a2f8

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_frsub>:
 8000a64:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a68:	e002      	b.n	8000a70 <__addsf3>
 8000a6a:	bf00      	nop

08000a6c <__aeabi_fsub>:
 8000a6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a70 <__addsf3>:
 8000a70:	0042      	lsls	r2, r0, #1
 8000a72:	bf1f      	itttt	ne
 8000a74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a78:	ea92 0f03 	teqne	r2, r3
 8000a7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a84:	d06a      	beq.n	8000b5c <__addsf3+0xec>
 8000a86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a8e:	bfc1      	itttt	gt
 8000a90:	18d2      	addgt	r2, r2, r3
 8000a92:	4041      	eorgt	r1, r0
 8000a94:	4048      	eorgt	r0, r1
 8000a96:	4041      	eorgt	r1, r0
 8000a98:	bfb8      	it	lt
 8000a9a:	425b      	neglt	r3, r3
 8000a9c:	2b19      	cmp	r3, #25
 8000a9e:	bf88      	it	hi
 8000aa0:	4770      	bxhi	lr
 8000aa2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aa6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aaa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000aba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000abe:	bf18      	it	ne
 8000ac0:	4249      	negne	r1, r1
 8000ac2:	ea92 0f03 	teq	r2, r3
 8000ac6:	d03f      	beq.n	8000b48 <__addsf3+0xd8>
 8000ac8:	f1a2 0201 	sub.w	r2, r2, #1
 8000acc:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad0:	eb10 000c 	adds.w	r0, r0, ip
 8000ad4:	f1c3 0320 	rsb	r3, r3, #32
 8000ad8:	fa01 f103 	lsl.w	r1, r1, r3
 8000adc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae0:	d502      	bpl.n	8000ae8 <__addsf3+0x78>
 8000ae2:	4249      	negs	r1, r1
 8000ae4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ae8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000aec:	d313      	bcc.n	8000b16 <__addsf3+0xa6>
 8000aee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000af2:	d306      	bcc.n	8000b02 <__addsf3+0x92>
 8000af4:	0840      	lsrs	r0, r0, #1
 8000af6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000afa:	f102 0201 	add.w	r2, r2, #1
 8000afe:	2afe      	cmp	r2, #254	; 0xfe
 8000b00:	d251      	bcs.n	8000ba6 <__addsf3+0x136>
 8000b02:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b0a:	bf08      	it	eq
 8000b0c:	f020 0001 	biceq.w	r0, r0, #1
 8000b10:	ea40 0003 	orr.w	r0, r0, r3
 8000b14:	4770      	bx	lr
 8000b16:	0049      	lsls	r1, r1, #1
 8000b18:	eb40 0000 	adc.w	r0, r0, r0
 8000b1c:	3a01      	subs	r2, #1
 8000b1e:	bf28      	it	cs
 8000b20:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b24:	d2ed      	bcs.n	8000b02 <__addsf3+0x92>
 8000b26:	fab0 fc80 	clz	ip, r0
 8000b2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b36:	bfaa      	itet	ge
 8000b38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b3c:	4252      	neglt	r2, r2
 8000b3e:	4318      	orrge	r0, r3
 8000b40:	bfbc      	itt	lt
 8000b42:	40d0      	lsrlt	r0, r2
 8000b44:	4318      	orrlt	r0, r3
 8000b46:	4770      	bx	lr
 8000b48:	f092 0f00 	teq	r2, #0
 8000b4c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b50:	bf06      	itte	eq
 8000b52:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b56:	3201      	addeq	r2, #1
 8000b58:	3b01      	subne	r3, #1
 8000b5a:	e7b5      	b.n	8000ac8 <__addsf3+0x58>
 8000b5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b64:	bf18      	it	ne
 8000b66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b6a:	d021      	beq.n	8000bb0 <__addsf3+0x140>
 8000b6c:	ea92 0f03 	teq	r2, r3
 8000b70:	d004      	beq.n	8000b7c <__addsf3+0x10c>
 8000b72:	f092 0f00 	teq	r2, #0
 8000b76:	bf08      	it	eq
 8000b78:	4608      	moveq	r0, r1
 8000b7a:	4770      	bx	lr
 8000b7c:	ea90 0f01 	teq	r0, r1
 8000b80:	bf1c      	itt	ne
 8000b82:	2000      	movne	r0, #0
 8000b84:	4770      	bxne	lr
 8000b86:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b8a:	d104      	bne.n	8000b96 <__addsf3+0x126>
 8000b8c:	0040      	lsls	r0, r0, #1
 8000b8e:	bf28      	it	cs
 8000b90:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	4770      	bx	lr
 8000b96:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b9a:	bf3c      	itt	cc
 8000b9c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba0:	4770      	bxcc	lr
 8000ba2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	4770      	bx	lr
 8000bb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bb4:	bf16      	itet	ne
 8000bb6:	4608      	movne	r0, r1
 8000bb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bbc:	4601      	movne	r1, r0
 8000bbe:	0242      	lsls	r2, r0, #9
 8000bc0:	bf06      	itte	eq
 8000bc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bc6:	ea90 0f01 	teqeq	r0, r1
 8000bca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bce:	4770      	bx	lr

08000bd0 <__aeabi_ui2f>:
 8000bd0:	f04f 0300 	mov.w	r3, #0
 8000bd4:	e004      	b.n	8000be0 <__aeabi_i2f+0x8>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_i2f>:
 8000bd8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	bf48      	it	mi
 8000bde:	4240      	negmi	r0, r0
 8000be0:	ea5f 0c00 	movs.w	ip, r0
 8000be4:	bf08      	it	eq
 8000be6:	4770      	bxeq	lr
 8000be8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bec:	4601      	mov	r1, r0
 8000bee:	f04f 0000 	mov.w	r0, #0
 8000bf2:	e01c      	b.n	8000c2e <__aeabi_l2f+0x2a>

08000bf4 <__aeabi_ul2f>:
 8000bf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000bf8:	bf08      	it	eq
 8000bfa:	4770      	bxeq	lr
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	e00a      	b.n	8000c18 <__aeabi_l2f+0x14>
 8000c02:	bf00      	nop

08000c04 <__aeabi_l2f>:
 8000c04:	ea50 0201 	orrs.w	r2, r0, r1
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c10:	d502      	bpl.n	8000c18 <__aeabi_l2f+0x14>
 8000c12:	4240      	negs	r0, r0
 8000c14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c18:	ea5f 0c01 	movs.w	ip, r1
 8000c1c:	bf02      	ittt	eq
 8000c1e:	4684      	moveq	ip, r0
 8000c20:	4601      	moveq	r1, r0
 8000c22:	2000      	moveq	r0, #0
 8000c24:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c28:	bf08      	it	eq
 8000c2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c32:	fabc f28c 	clz	r2, ip
 8000c36:	3a08      	subs	r2, #8
 8000c38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c3c:	db10      	blt.n	8000c60 <__aeabi_l2f+0x5c>
 8000c3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c42:	4463      	add	r3, ip
 8000c44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c48:	f1c2 0220 	rsb	r2, r2, #32
 8000c4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c50:	fa20 f202 	lsr.w	r2, r0, r2
 8000c54:	eb43 0002 	adc.w	r0, r3, r2
 8000c58:	bf08      	it	eq
 8000c5a:	f020 0001 	biceq.w	r0, r0, #1
 8000c5e:	4770      	bx	lr
 8000c60:	f102 0220 	add.w	r2, r2, #32
 8000c64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c68:	f1c2 0220 	rsb	r2, r2, #32
 8000c6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c70:	fa21 f202 	lsr.w	r2, r1, r2
 8000c74:	eb43 0002 	adc.w	r0, r3, r2
 8000c78:	bf08      	it	eq
 8000c7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_fmul>:
 8000c80:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000c84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c88:	bf1e      	ittt	ne
 8000c8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c8e:	ea92 0f0c 	teqne	r2, ip
 8000c92:	ea93 0f0c 	teqne	r3, ip
 8000c96:	d06f      	beq.n	8000d78 <__aeabi_fmul+0xf8>
 8000c98:	441a      	add	r2, r3
 8000c9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c9e:	0240      	lsls	r0, r0, #9
 8000ca0:	bf18      	it	ne
 8000ca2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ca6:	d01e      	beq.n	8000ce6 <__aeabi_fmul+0x66>
 8000ca8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cb0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cb4:	fba0 3101 	umull	r3, r1, r0, r1
 8000cb8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000cbc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000cc0:	bf3e      	ittt	cc
 8000cc2:	0049      	lslcc	r1, r1, #1
 8000cc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cc8:	005b      	lslcc	r3, r3, #1
 8000cca:	ea40 0001 	orr.w	r0, r0, r1
 8000cce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cd2:	2afd      	cmp	r2, #253	; 0xfd
 8000cd4:	d81d      	bhi.n	8000d12 <__aeabi_fmul+0x92>
 8000cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	4770      	bx	lr
 8000ce6:	f090 0f00 	teq	r0, #0
 8000cea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000cee:	bf08      	it	eq
 8000cf0:	0249      	lsleq	r1, r1, #9
 8000cf2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cf6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000cfa:	3a7f      	subs	r2, #127	; 0x7f
 8000cfc:	bfc2      	ittt	gt
 8000cfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d06:	4770      	bxgt	lr
 8000d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	dc5d      	bgt.n	8000dd0 <__aeabi_fmul+0x150>
 8000d14:	f112 0f19 	cmn.w	r2, #25
 8000d18:	bfdc      	itt	le
 8000d1a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d1e:	4770      	bxle	lr
 8000d20:	f1c2 0200 	rsb	r2, r2, #0
 8000d24:	0041      	lsls	r1, r0, #1
 8000d26:	fa21 f102 	lsr.w	r1, r1, r2
 8000d2a:	f1c2 0220 	rsb	r2, r2, #32
 8000d2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d36:	f140 0000 	adc.w	r0, r0, #0
 8000d3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d3e:	bf08      	it	eq
 8000d40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d44:	4770      	bx	lr
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d4e:	bf02      	ittt	eq
 8000d50:	0040      	lsleq	r0, r0, #1
 8000d52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d56:	3a01      	subeq	r2, #1
 8000d58:	d0f9      	beq.n	8000d4e <__aeabi_fmul+0xce>
 8000d5a:	ea40 000c 	orr.w	r0, r0, ip
 8000d5e:	f093 0f00 	teq	r3, #0
 8000d62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d66:	bf02      	ittt	eq
 8000d68:	0049      	lsleq	r1, r1, #1
 8000d6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d6e:	3b01      	subeq	r3, #1
 8000d70:	d0f9      	beq.n	8000d66 <__aeabi_fmul+0xe6>
 8000d72:	ea41 010c 	orr.w	r1, r1, ip
 8000d76:	e78f      	b.n	8000c98 <__aeabi_fmul+0x18>
 8000d78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d7c:	ea92 0f0c 	teq	r2, ip
 8000d80:	bf18      	it	ne
 8000d82:	ea93 0f0c 	teqne	r3, ip
 8000d86:	d00a      	beq.n	8000d9e <__aeabi_fmul+0x11e>
 8000d88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000d8c:	bf18      	it	ne
 8000d8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d92:	d1d8      	bne.n	8000d46 <__aeabi_fmul+0xc6>
 8000d94:	ea80 0001 	eor.w	r0, r0, r1
 8000d98:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d9c:	4770      	bx	lr
 8000d9e:	f090 0f00 	teq	r0, #0
 8000da2:	bf17      	itett	ne
 8000da4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000da8:	4608      	moveq	r0, r1
 8000daa:	f091 0f00 	teqne	r1, #0
 8000dae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000db2:	d014      	beq.n	8000dde <__aeabi_fmul+0x15e>
 8000db4:	ea92 0f0c 	teq	r2, ip
 8000db8:	d101      	bne.n	8000dbe <__aeabi_fmul+0x13e>
 8000dba:	0242      	lsls	r2, r0, #9
 8000dbc:	d10f      	bne.n	8000dde <__aeabi_fmul+0x15e>
 8000dbe:	ea93 0f0c 	teq	r3, ip
 8000dc2:	d103      	bne.n	8000dcc <__aeabi_fmul+0x14c>
 8000dc4:	024b      	lsls	r3, r1, #9
 8000dc6:	bf18      	it	ne
 8000dc8:	4608      	movne	r0, r1
 8000dca:	d108      	bne.n	8000dde <__aeabi_fmul+0x15e>
 8000dcc:	ea80 0001 	eor.w	r0, r0, r1
 8000dd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ddc:	4770      	bx	lr
 8000dde:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000de2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_fdiv>:
 8000de8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000dec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000df0:	bf1e      	ittt	ne
 8000df2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000df6:	ea92 0f0c 	teqne	r2, ip
 8000dfa:	ea93 0f0c 	teqne	r3, ip
 8000dfe:	d069      	beq.n	8000ed4 <__aeabi_fdiv+0xec>
 8000e00:	eba2 0203 	sub.w	r2, r2, r3
 8000e04:	ea80 0c01 	eor.w	ip, r0, r1
 8000e08:	0249      	lsls	r1, r1, #9
 8000e0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e0e:	d037      	beq.n	8000e80 <__aeabi_fdiv+0x98>
 8000e10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e20:	428b      	cmp	r3, r1
 8000e22:	bf38      	it	cc
 8000e24:	005b      	lslcc	r3, r3, #1
 8000e26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	bf24      	itt	cs
 8000e32:	1a5b      	subcs	r3, r3, r1
 8000e34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e3c:	bf24      	itt	cs
 8000e3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e4a:	bf24      	itt	cs
 8000e4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e58:	bf24      	itt	cs
 8000e5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e62:	011b      	lsls	r3, r3, #4
 8000e64:	bf18      	it	ne
 8000e66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e6a:	d1e0      	bne.n	8000e2e <__aeabi_fdiv+0x46>
 8000e6c:	2afd      	cmp	r2, #253	; 0xfd
 8000e6e:	f63f af50 	bhi.w	8000d12 <__aeabi_fmul+0x92>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e78:	bf08      	it	eq
 8000e7a:	f020 0001 	biceq.w	r0, r0, #1
 8000e7e:	4770      	bx	lr
 8000e80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e88:	327f      	adds	r2, #127	; 0x7f
 8000e8a:	bfc2      	ittt	gt
 8000e8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e94:	4770      	bxgt	lr
 8000e96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e9a:	f04f 0300 	mov.w	r3, #0
 8000e9e:	3a01      	subs	r2, #1
 8000ea0:	e737      	b.n	8000d12 <__aeabi_fmul+0x92>
 8000ea2:	f092 0f00 	teq	r2, #0
 8000ea6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eaa:	bf02      	ittt	eq
 8000eac:	0040      	lsleq	r0, r0, #1
 8000eae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb2:	3a01      	subeq	r2, #1
 8000eb4:	d0f9      	beq.n	8000eaa <__aeabi_fdiv+0xc2>
 8000eb6:	ea40 000c 	orr.w	r0, r0, ip
 8000eba:	f093 0f00 	teq	r3, #0
 8000ebe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec2:	bf02      	ittt	eq
 8000ec4:	0049      	lsleq	r1, r1, #1
 8000ec6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eca:	3b01      	subeq	r3, #1
 8000ecc:	d0f9      	beq.n	8000ec2 <__aeabi_fdiv+0xda>
 8000ece:	ea41 010c 	orr.w	r1, r1, ip
 8000ed2:	e795      	b.n	8000e00 <__aeabi_fdiv+0x18>
 8000ed4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ed8:	ea92 0f0c 	teq	r2, ip
 8000edc:	d108      	bne.n	8000ef0 <__aeabi_fdiv+0x108>
 8000ede:	0242      	lsls	r2, r0, #9
 8000ee0:	f47f af7d 	bne.w	8000dde <__aeabi_fmul+0x15e>
 8000ee4:	ea93 0f0c 	teq	r3, ip
 8000ee8:	f47f af70 	bne.w	8000dcc <__aeabi_fmul+0x14c>
 8000eec:	4608      	mov	r0, r1
 8000eee:	e776      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000ef0:	ea93 0f0c 	teq	r3, ip
 8000ef4:	d104      	bne.n	8000f00 <__aeabi_fdiv+0x118>
 8000ef6:	024b      	lsls	r3, r1, #9
 8000ef8:	f43f af4c 	beq.w	8000d94 <__aeabi_fmul+0x114>
 8000efc:	4608      	mov	r0, r1
 8000efe:	e76e      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000f00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f04:	bf18      	it	ne
 8000f06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f0a:	d1ca      	bne.n	8000ea2 <__aeabi_fdiv+0xba>
 8000f0c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f10:	f47f af5c 	bne.w	8000dcc <__aeabi_fmul+0x14c>
 8000f14:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f18:	f47f af3c 	bne.w	8000d94 <__aeabi_fmul+0x114>
 8000f1c:	e75f      	b.n	8000dde <__aeabi_fmul+0x15e>
 8000f1e:	bf00      	nop

08000f20 <__gesf2>:
 8000f20:	f04f 3cff 	mov.w	ip, #4294967295
 8000f24:	e006      	b.n	8000f34 <__cmpsf2+0x4>
 8000f26:	bf00      	nop

08000f28 <__lesf2>:
 8000f28:	f04f 0c01 	mov.w	ip, #1
 8000f2c:	e002      	b.n	8000f34 <__cmpsf2+0x4>
 8000f2e:	bf00      	nop

08000f30 <__cmpsf2>:
 8000f30:	f04f 0c01 	mov.w	ip, #1
 8000f34:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f38:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f3c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f40:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f44:	bf18      	it	ne
 8000f46:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f4a:	d011      	beq.n	8000f70 <__cmpsf2+0x40>
 8000f4c:	b001      	add	sp, #4
 8000f4e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f52:	bf18      	it	ne
 8000f54:	ea90 0f01 	teqne	r0, r1
 8000f58:	bf58      	it	pl
 8000f5a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f5e:	bf88      	it	hi
 8000f60:	17c8      	asrhi	r0, r1, #31
 8000f62:	bf38      	it	cc
 8000f64:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f68:	bf18      	it	ne
 8000f6a:	f040 0001 	orrne.w	r0, r0, #1
 8000f6e:	4770      	bx	lr
 8000f70:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f74:	d102      	bne.n	8000f7c <__cmpsf2+0x4c>
 8000f76:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f7a:	d105      	bne.n	8000f88 <__cmpsf2+0x58>
 8000f7c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f80:	d1e4      	bne.n	8000f4c <__cmpsf2+0x1c>
 8000f82:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f86:	d0e1      	beq.n	8000f4c <__cmpsf2+0x1c>
 8000f88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__aeabi_cfrcmple>:
 8000f90:	4684      	mov	ip, r0
 8000f92:	4608      	mov	r0, r1
 8000f94:	4661      	mov	r1, ip
 8000f96:	e7ff      	b.n	8000f98 <__aeabi_cfcmpeq>

08000f98 <__aeabi_cfcmpeq>:
 8000f98:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f9a:	f7ff ffc9 	bl	8000f30 <__cmpsf2>
 8000f9e:	2800      	cmp	r0, #0
 8000fa0:	bf48      	it	mi
 8000fa2:	f110 0f00 	cmnmi.w	r0, #0
 8000fa6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fa8 <__aeabi_fcmpeq>:
 8000fa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fac:	f7ff fff4 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fb0:	bf0c      	ite	eq
 8000fb2:	2001      	moveq	r0, #1
 8000fb4:	2000      	movne	r0, #0
 8000fb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fba:	bf00      	nop

08000fbc <__aeabi_fcmplt>:
 8000fbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fc0:	f7ff ffea 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fc4:	bf34      	ite	cc
 8000fc6:	2001      	movcc	r0, #1
 8000fc8:	2000      	movcs	r0, #0
 8000fca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fce:	bf00      	nop

08000fd0 <__aeabi_fcmple>:
 8000fd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd4:	f7ff ffe0 	bl	8000f98 <__aeabi_cfcmpeq>
 8000fd8:	bf94      	ite	ls
 8000fda:	2001      	movls	r0, #1
 8000fdc:	2000      	movhi	r0, #0
 8000fde:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_fcmpge>:
 8000fe4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe8:	f7ff ffd2 	bl	8000f90 <__aeabi_cfrcmple>
 8000fec:	bf94      	ite	ls
 8000fee:	2001      	movls	r0, #1
 8000ff0:	2000      	movhi	r0, #0
 8000ff2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff6:	bf00      	nop

08000ff8 <__aeabi_fcmpgt>:
 8000ff8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ffc:	f7ff ffc8 	bl	8000f90 <__aeabi_cfrcmple>
 8001000:	bf34      	ite	cc
 8001002:	2001      	movcc	r0, #1
 8001004:	2000      	movcs	r0, #0
 8001006:	f85d fb08 	ldr.w	pc, [sp], #8
 800100a:	bf00      	nop

0800100c <__aeabi_f2uiz>:
 800100c:	0042      	lsls	r2, r0, #1
 800100e:	d20e      	bcs.n	800102e <__aeabi_f2uiz+0x22>
 8001010:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001014:	d30b      	bcc.n	800102e <__aeabi_f2uiz+0x22>
 8001016:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800101a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800101e:	d409      	bmi.n	8001034 <__aeabi_f2uiz+0x28>
 8001020:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001024:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001028:	fa23 f002 	lsr.w	r0, r3, r2
 800102c:	4770      	bx	lr
 800102e:	f04f 0000 	mov.w	r0, #0
 8001032:	4770      	bx	lr
 8001034:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001038:	d101      	bne.n	800103e <__aeabi_f2uiz+0x32>
 800103a:	0242      	lsls	r2, r0, #9
 800103c:	d102      	bne.n	8001044 <__aeabi_f2uiz+0x38>
 800103e:	f04f 30ff 	mov.w	r0, #4294967295
 8001042:	4770      	bx	lr
 8001044:	f04f 0000 	mov.w	r0, #0
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <Find_crash>:
extern Rectangle obstacles[5];			// area that depletes charge faster
extern Coordinate oppoBeacons[3];		// opponent charging station coordinate
extern Queue openlist;
extern List closelist;

uint8_t Find_crash(uint16_t cor, uint8_t flag) {
 800104c:	b490      	push	{r4, r7}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	80fb      	strh	r3, [r7, #6]
 8001058:	4613      	mov	r3, r2
 800105a:	717b      	strb	r3, [r7, #5]
	uint16_t x = cor / 256;
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	81bb      	strh	r3, [r7, #12]
	uint16_t y = cor % 256;
 8001062:	88fb      	ldrh	r3, [r7, #6]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	817b      	strh	r3, [r7, #10]

	if (flag == 0) {
 8001068:	797b      	ldrb	r3, [r7, #5]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d101      	bne.n	8001072 <Find_crash+0x26>
		return 1;
 800106e:	2301      	movs	r3, #1
 8001070:	e109      	b.n	8001286 <Find_crash+0x23a>
	}
	if (flag == 1) {
 8001072:	797b      	ldrb	r3, [r7, #5]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d151      	bne.n	800111c <Find_crash+0xd0>
		//walls
		if ((x >= 38 && x <= 40) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 8001078:	89bb      	ldrh	r3, [r7, #12]
 800107a:	2b25      	cmp	r3, #37	; 0x25
 800107c:	d910      	bls.n	80010a0 <Find_crash+0x54>
 800107e:	89bb      	ldrh	r3, [r7, #12]
 8001080:	2b28      	cmp	r3, #40	; 0x28
 8001082:	d80d      	bhi.n	80010a0 <Find_crash+0x54>
 8001084:	897b      	ldrh	r3, [r7, #10]
 8001086:	2b25      	cmp	r3, #37	; 0x25
 8001088:	d902      	bls.n	8001090 <Find_crash+0x44>
 800108a:	897b      	ldrh	r3, [r7, #10]
 800108c:	2b6b      	cmp	r3, #107	; 0x6b
 800108e:	d905      	bls.n	800109c <Find_crash+0x50>
 8001090:	897b      	ldrh	r3, [r7, #10]
 8001092:	2b92      	cmp	r3, #146	; 0x92
 8001094:	d904      	bls.n	80010a0 <Find_crash+0x54>
 8001096:	897b      	ldrh	r3, [r7, #10]
 8001098:	2bd8      	cmp	r3, #216	; 0xd8
 800109a:	d801      	bhi.n	80010a0 <Find_crash+0x54>
			return 0;
 800109c:	2300      	movs	r3, #0
 800109e:	e0f2      	b.n	8001286 <Find_crash+0x23a>
		}
		if ((x >= 214 && x <= 216) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 80010a0:	89bb      	ldrh	r3, [r7, #12]
 80010a2:	2bd5      	cmp	r3, #213	; 0xd5
 80010a4:	d910      	bls.n	80010c8 <Find_crash+0x7c>
 80010a6:	89bb      	ldrh	r3, [r7, #12]
 80010a8:	2bd8      	cmp	r3, #216	; 0xd8
 80010aa:	d80d      	bhi.n	80010c8 <Find_crash+0x7c>
 80010ac:	897b      	ldrh	r3, [r7, #10]
 80010ae:	2b25      	cmp	r3, #37	; 0x25
 80010b0:	d902      	bls.n	80010b8 <Find_crash+0x6c>
 80010b2:	897b      	ldrh	r3, [r7, #10]
 80010b4:	2b6b      	cmp	r3, #107	; 0x6b
 80010b6:	d905      	bls.n	80010c4 <Find_crash+0x78>
 80010b8:	897b      	ldrh	r3, [r7, #10]
 80010ba:	2b92      	cmp	r3, #146	; 0x92
 80010bc:	d904      	bls.n	80010c8 <Find_crash+0x7c>
 80010be:	897b      	ldrh	r3, [r7, #10]
 80010c0:	2bd8      	cmp	r3, #216	; 0xd8
 80010c2:	d801      	bhi.n	80010c8 <Find_crash+0x7c>
			return 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	e0de      	b.n	8001286 <Find_crash+0x23a>
		}
		if ((y >= 38 && y <= 40) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 80010c8:	897b      	ldrh	r3, [r7, #10]
 80010ca:	2b25      	cmp	r3, #37	; 0x25
 80010cc:	d910      	bls.n	80010f0 <Find_crash+0xa4>
 80010ce:	897b      	ldrh	r3, [r7, #10]
 80010d0:	2b28      	cmp	r3, #40	; 0x28
 80010d2:	d80d      	bhi.n	80010f0 <Find_crash+0xa4>
 80010d4:	89bb      	ldrh	r3, [r7, #12]
 80010d6:	2b25      	cmp	r3, #37	; 0x25
 80010d8:	d902      	bls.n	80010e0 <Find_crash+0x94>
 80010da:	89bb      	ldrh	r3, [r7, #12]
 80010dc:	2b6b      	cmp	r3, #107	; 0x6b
 80010de:	d905      	bls.n	80010ec <Find_crash+0xa0>
 80010e0:	89bb      	ldrh	r3, [r7, #12]
 80010e2:	2b92      	cmp	r3, #146	; 0x92
 80010e4:	d904      	bls.n	80010f0 <Find_crash+0xa4>
 80010e6:	89bb      	ldrh	r3, [r7, #12]
 80010e8:	2bd8      	cmp	r3, #216	; 0xd8
 80010ea:	d801      	bhi.n	80010f0 <Find_crash+0xa4>
			return 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	e0ca      	b.n	8001286 <Find_crash+0x23a>
		}
		if ((y >= 214 && y <= 216) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 80010f0:	897b      	ldrh	r3, [r7, #10]
 80010f2:	2bd5      	cmp	r3, #213	; 0xd5
 80010f4:	d910      	bls.n	8001118 <Find_crash+0xcc>
 80010f6:	897b      	ldrh	r3, [r7, #10]
 80010f8:	2bd8      	cmp	r3, #216	; 0xd8
 80010fa:	d80d      	bhi.n	8001118 <Find_crash+0xcc>
 80010fc:	89bb      	ldrh	r3, [r7, #12]
 80010fe:	2b25      	cmp	r3, #37	; 0x25
 8001100:	d902      	bls.n	8001108 <Find_crash+0xbc>
 8001102:	89bb      	ldrh	r3, [r7, #12]
 8001104:	2b6b      	cmp	r3, #107	; 0x6b
 8001106:	d905      	bls.n	8001114 <Find_crash+0xc8>
 8001108:	89bb      	ldrh	r3, [r7, #12]
 800110a:	2b92      	cmp	r3, #146	; 0x92
 800110c:	d904      	bls.n	8001118 <Find_crash+0xcc>
 800110e:	89bb      	ldrh	r3, [r7, #12]
 8001110:	2bd8      	cmp	r3, #216	; 0xd8
 8001112:	d801      	bhi.n	8001118 <Find_crash+0xcc>
			return 0;
 8001114:	2300      	movs	r3, #0
 8001116:	e0b6      	b.n	8001286 <Find_crash+0x23a>
		}
		return 1;
 8001118:	2301      	movs	r3, #1
 800111a:	e0b4      	b.n	8001286 <Find_crash+0x23a>
	}
	//walls
	if ((x >= 38 && x <= 40) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 800111c:	89bb      	ldrh	r3, [r7, #12]
 800111e:	2b25      	cmp	r3, #37	; 0x25
 8001120:	d910      	bls.n	8001144 <Find_crash+0xf8>
 8001122:	89bb      	ldrh	r3, [r7, #12]
 8001124:	2b28      	cmp	r3, #40	; 0x28
 8001126:	d80d      	bhi.n	8001144 <Find_crash+0xf8>
 8001128:	897b      	ldrh	r3, [r7, #10]
 800112a:	2b25      	cmp	r3, #37	; 0x25
 800112c:	d902      	bls.n	8001134 <Find_crash+0xe8>
 800112e:	897b      	ldrh	r3, [r7, #10]
 8001130:	2b6b      	cmp	r3, #107	; 0x6b
 8001132:	d905      	bls.n	8001140 <Find_crash+0xf4>
 8001134:	897b      	ldrh	r3, [r7, #10]
 8001136:	2b92      	cmp	r3, #146	; 0x92
 8001138:	d904      	bls.n	8001144 <Find_crash+0xf8>
 800113a:	897b      	ldrh	r3, [r7, #10]
 800113c:	2bd8      	cmp	r3, #216	; 0xd8
 800113e:	d801      	bhi.n	8001144 <Find_crash+0xf8>
		return 0;
 8001140:	2300      	movs	r3, #0
 8001142:	e0a0      	b.n	8001286 <Find_crash+0x23a>
	}
	if ((x >= 214 && x <= 216) && ((y >= 38 && y <= 107) || (y >= 147 && y <= 216))) {
 8001144:	89bb      	ldrh	r3, [r7, #12]
 8001146:	2bd5      	cmp	r3, #213	; 0xd5
 8001148:	d910      	bls.n	800116c <Find_crash+0x120>
 800114a:	89bb      	ldrh	r3, [r7, #12]
 800114c:	2bd8      	cmp	r3, #216	; 0xd8
 800114e:	d80d      	bhi.n	800116c <Find_crash+0x120>
 8001150:	897b      	ldrh	r3, [r7, #10]
 8001152:	2b25      	cmp	r3, #37	; 0x25
 8001154:	d902      	bls.n	800115c <Find_crash+0x110>
 8001156:	897b      	ldrh	r3, [r7, #10]
 8001158:	2b6b      	cmp	r3, #107	; 0x6b
 800115a:	d905      	bls.n	8001168 <Find_crash+0x11c>
 800115c:	897b      	ldrh	r3, [r7, #10]
 800115e:	2b92      	cmp	r3, #146	; 0x92
 8001160:	d904      	bls.n	800116c <Find_crash+0x120>
 8001162:	897b      	ldrh	r3, [r7, #10]
 8001164:	2bd8      	cmp	r3, #216	; 0xd8
 8001166:	d801      	bhi.n	800116c <Find_crash+0x120>
		return 0;
 8001168:	2300      	movs	r3, #0
 800116a:	e08c      	b.n	8001286 <Find_crash+0x23a>
	}
	if ((y >= 38 && y <= 40) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 800116c:	897b      	ldrh	r3, [r7, #10]
 800116e:	2b25      	cmp	r3, #37	; 0x25
 8001170:	d910      	bls.n	8001194 <Find_crash+0x148>
 8001172:	897b      	ldrh	r3, [r7, #10]
 8001174:	2b28      	cmp	r3, #40	; 0x28
 8001176:	d80d      	bhi.n	8001194 <Find_crash+0x148>
 8001178:	89bb      	ldrh	r3, [r7, #12]
 800117a:	2b25      	cmp	r3, #37	; 0x25
 800117c:	d902      	bls.n	8001184 <Find_crash+0x138>
 800117e:	89bb      	ldrh	r3, [r7, #12]
 8001180:	2b6b      	cmp	r3, #107	; 0x6b
 8001182:	d905      	bls.n	8001190 <Find_crash+0x144>
 8001184:	89bb      	ldrh	r3, [r7, #12]
 8001186:	2b92      	cmp	r3, #146	; 0x92
 8001188:	d904      	bls.n	8001194 <Find_crash+0x148>
 800118a:	89bb      	ldrh	r3, [r7, #12]
 800118c:	2bd8      	cmp	r3, #216	; 0xd8
 800118e:	d801      	bhi.n	8001194 <Find_crash+0x148>
		return 0;
 8001190:	2300      	movs	r3, #0
 8001192:	e078      	b.n	8001286 <Find_crash+0x23a>
	}
	if ((y >= 214 && y <= 216) && ((x >= 38 && x <= 107) || (x >= 147 && x <= 216))) {
 8001194:	897b      	ldrh	r3, [r7, #10]
 8001196:	2bd5      	cmp	r3, #213	; 0xd5
 8001198:	d910      	bls.n	80011bc <Find_crash+0x170>
 800119a:	897b      	ldrh	r3, [r7, #10]
 800119c:	2bd8      	cmp	r3, #216	; 0xd8
 800119e:	d80d      	bhi.n	80011bc <Find_crash+0x170>
 80011a0:	89bb      	ldrh	r3, [r7, #12]
 80011a2:	2b25      	cmp	r3, #37	; 0x25
 80011a4:	d902      	bls.n	80011ac <Find_crash+0x160>
 80011a6:	89bb      	ldrh	r3, [r7, #12]
 80011a8:	2b6b      	cmp	r3, #107	; 0x6b
 80011aa:	d905      	bls.n	80011b8 <Find_crash+0x16c>
 80011ac:	89bb      	ldrh	r3, [r7, #12]
 80011ae:	2b92      	cmp	r3, #146	; 0x92
 80011b0:	d904      	bls.n	80011bc <Find_crash+0x170>
 80011b2:	89bb      	ldrh	r3, [r7, #12]
 80011b4:	2bd8      	cmp	r3, #216	; 0xd8
 80011b6:	d801      	bhi.n	80011bc <Find_crash+0x170>
		return 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e064      	b.n	8001286 <Find_crash+0x23a>
	}
	//obstacles
	for (uint8_t k = 0; k < 5; k++) {
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]
 80011c0:	e026      	b.n	8001210 <Find_crash+0x1c4>
		if (x >= obstacles[k].coord1.x && y >= obstacles[k].coord1.y && x <= obstacles[k].coord2.x
 80011c2:	89bb      	ldrh	r3, [r7, #12]
 80011c4:	7bfa      	ldrb	r2, [r7, #15]
 80011c6:	4932      	ldr	r1, [pc, #200]	; (8001290 <Find_crash+0x244>)
 80011c8:	f931 2032 	ldrsh.w	r2, [r1, r2, lsl #3]
 80011cc:	4293      	cmp	r3, r2
 80011ce:	db1c      	blt.n	800120a <Find_crash+0x1be>
 80011d0:	897a      	ldrh	r2, [r7, #10]
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	492e      	ldr	r1, [pc, #184]	; (8001290 <Find_crash+0x244>)
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	440b      	add	r3, r1
 80011da:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011de:	429a      	cmp	r2, r3
 80011e0:	db13      	blt.n	800120a <Find_crash+0x1be>
 80011e2:	89ba      	ldrh	r2, [r7, #12]
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	492a      	ldr	r1, [pc, #168]	; (8001290 <Find_crash+0x244>)
 80011e8:	00db      	lsls	r3, r3, #3
 80011ea:	440b      	add	r3, r1
 80011ec:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	dc0a      	bgt.n	800120a <Find_crash+0x1be>
				&& y <= obstacles[k].coord2.y) {
 80011f4:	897a      	ldrh	r2, [r7, #10]
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	4925      	ldr	r1, [pc, #148]	; (8001290 <Find_crash+0x244>)
 80011fa:	00db      	lsls	r3, r3, #3
 80011fc:	440b      	add	r3, r1
 80011fe:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001202:	429a      	cmp	r2, r3
 8001204:	dc01      	bgt.n	800120a <Find_crash+0x1be>
			return 0;
 8001206:	2300      	movs	r3, #0
 8001208:	e03d      	b.n	8001286 <Find_crash+0x23a>
	for (uint8_t k = 0; k < 5; k++) {
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	3301      	adds	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	7bfb      	ldrb	r3, [r7, #15]
 8001212:	2b04      	cmp	r3, #4
 8001214:	d9d5      	bls.n	80011c2 <Find_crash+0x176>
		}
	}
	// oppoBeacons
	for (uint8_t k = 0; k <= 2; k++) {
 8001216:	2300      	movs	r3, #0
 8001218:	73bb      	strb	r3, [r7, #14]
 800121a:	e030      	b.n	800127e <Find_crash+0x232>
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 800121c:	89bb      	ldrh	r3, [r7, #12]
 800121e:	7bba      	ldrb	r2, [r7, #14]
 8001220:	491c      	ldr	r1, [pc, #112]	; (8001294 <Find_crash+0x248>)
 8001222:	f931 2022 	ldrsh.w	r2, [r1, r2, lsl #2]
 8001226:	1a9b      	subs	r3, r3, r2
				+ (y - oppoBeacons[k].y) * (y - oppoBeacons[k].y);
 8001228:	b29b      	uxth	r3, r3
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 800122a:	89ba      	ldrh	r2, [r7, #12]
 800122c:	7bb9      	ldrb	r1, [r7, #14]
 800122e:	4819      	ldr	r0, [pc, #100]	; (8001294 <Find_crash+0x248>)
 8001230:	f930 1021 	ldrsh.w	r1, [r0, r1, lsl #2]
 8001234:	1a52      	subs	r2, r2, r1
				+ (y - oppoBeacons[k].y) * (y - oppoBeacons[k].y);
 8001236:	b292      	uxth	r2, r2
 8001238:	fb02 f303 	mul.w	r3, r2, r3
 800123c:	b29a      	uxth	r2, r3
 800123e:	8979      	ldrh	r1, [r7, #10]
 8001240:	7bbb      	ldrb	r3, [r7, #14]
 8001242:	4814      	ldr	r0, [pc, #80]	; (8001294 <Find_crash+0x248>)
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4403      	add	r3, r0
 8001248:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800124c:	1acb      	subs	r3, r1, r3
 800124e:	b299      	uxth	r1, r3
 8001250:	8978      	ldrh	r0, [r7, #10]
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	4c0f      	ldr	r4, [pc, #60]	; (8001294 <Find_crash+0x248>)
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4423      	add	r3, r4
 800125a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800125e:	1ac3      	subs	r3, r0, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	fb01 f303 	mul.w	r3, r1, r3
 8001266:	b29b      	uxth	r3, r3
		uint16_t distance = (x - oppoBeacons[k].x) * (x - oppoBeacons[k].x)
 8001268:	4413      	add	r3, r2
 800126a:	813b      	strh	r3, [r7, #8]
		if (distance <= 400) {
 800126c:	893b      	ldrh	r3, [r7, #8]
 800126e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001272:	d801      	bhi.n	8001278 <Find_crash+0x22c>
			return 0;
 8001274:	2300      	movs	r3, #0
 8001276:	e006      	b.n	8001286 <Find_crash+0x23a>
	for (uint8_t k = 0; k <= 2; k++) {
 8001278:	7bbb      	ldrb	r3, [r7, #14]
 800127a:	3301      	adds	r3, #1
 800127c:	73bb      	strb	r3, [r7, #14]
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d9cb      	bls.n	800121c <Find_crash+0x1d0>
		}
	}
	return 1;
 8001284:	2301      	movs	r3, #1
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bc90      	pop	{r4, r7}
 800128e:	4770      	bx	lr
 8001290:	20000b74 	.word	0x20000b74
 8001294:	20000ba8 	.word	0x20000ba8

08001298 <cal_H>:

uint16_t cal_H(uint16_t cor1, uint16_t cor2) {
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	460a      	mov	r2, r1
 80012a2:	80fb      	strh	r3, [r7, #6]
 80012a4:	4613      	mov	r3, r2
 80012a6:	80bb      	strh	r3, [r7, #4]
	uint16_t x1 = cor1 / 256;
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	0a1b      	lsrs	r3, r3, #8
 80012ac:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cor1 % 256;
 80012ae:	88fb      	ldrh	r3, [r7, #6]
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = cor2 / 256;
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	0a1b      	lsrs	r3, r3, #8
 80012b8:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = cor2 % 256;
 80012ba:	88bb      	ldrh	r3, [r7, #4]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	813b      	strh	r3, [r7, #8]
	return abs(x1 - x2) + abs(y1 - y2);
 80012c0:	89fa      	ldrh	r2, [r7, #14]
 80012c2:	897b      	ldrh	r3, [r7, #10]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bfb8      	it	lt
 80012ca:	425b      	neglt	r3, r3
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	89b9      	ldrh	r1, [r7, #12]
 80012d0:	893b      	ldrh	r3, [r7, #8]
 80012d2:	1acb      	subs	r3, r1, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bfb8      	it	lt
 80012d8:	425b      	neglt	r3, r3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4413      	add	r3, r2
 80012de:	b29b      	uxth	r3, r3
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <dir>:

int8_t dir(uint16_t cor1, uint16_t cor2) {
 80012ea:	b480      	push	{r7}
 80012ec:	b085      	sub	sp, #20
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	460a      	mov	r2, r1
 80012f4:	80fb      	strh	r3, [r7, #6]
 80012f6:	4613      	mov	r3, r2
 80012f8:	80bb      	strh	r3, [r7, #4]
	uint16_t x1 = cor1 / 256;
 80012fa:	88fb      	ldrh	r3, [r7, #6]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cor1 % 256;
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	b2db      	uxtb	r3, r3
 8001304:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = cor2 / 256;
 8001306:	88bb      	ldrh	r3, [r7, #4]
 8001308:	0a1b      	lsrs	r3, r3, #8
 800130a:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = cor2 % 256;
 800130c:	88bb      	ldrh	r3, [r7, #4]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	813b      	strh	r3, [r7, #8]
	return ((x2 - x1) + 2 * (y2 - y1));
 8001312:	897b      	ldrh	r3, [r7, #10]
 8001314:	b2da      	uxtb	r2, r3
 8001316:	89fb      	ldrh	r3, [r7, #14]
 8001318:	b2db      	uxtb	r3, r3
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	b2da      	uxtb	r2, r3
 800131e:	8939      	ldrh	r1, [r7, #8]
 8001320:	89bb      	ldrh	r3, [r7, #12]
 8001322:	1acb      	subs	r3, r1, r3
 8001324:	b2db      	uxtb	r3, r3
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4413      	add	r3, r2
 800132c:	b2db      	uxtb	r3, r3
 800132e:	b25b      	sxtb	r3, r3
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <findend>:

uint8_t findend(uint16_t cur, uint16_t end, uint8_t step)
{
 800133a:	b480      	push	{r7}
 800133c:	b085      	sub	sp, #20
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	80fb      	strh	r3, [r7, #6]
 8001344:	460b      	mov	r3, r1
 8001346:	80bb      	strh	r3, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	70fb      	strb	r3, [r7, #3]
	uint16_t x1 = cur / 256;
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	81fb      	strh	r3, [r7, #14]
	uint16_t y1 = cur % 256;
 8001352:	88fb      	ldrh	r3, [r7, #6]
 8001354:	b2db      	uxtb	r3, r3
 8001356:	81bb      	strh	r3, [r7, #12]
	uint16_t x2 = end / 256;
 8001358:	88bb      	ldrh	r3, [r7, #4]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	817b      	strh	r3, [r7, #10]
	uint16_t y2 = end % 256;
 800135e:	88bb      	ldrh	r3, [r7, #4]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	813b      	strh	r3, [r7, #8]
	if (abs(x2 - x1) < step && abs(y2 - y1) < step)
 8001364:	897a      	ldrh	r2, [r7, #10]
 8001366:	89fb      	ldrh	r3, [r7, #14]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800136e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001372:	78fb      	ldrb	r3, [r7, #3]
 8001374:	429a      	cmp	r2, r3
 8001376:	da0b      	bge.n	8001390 <findend+0x56>
 8001378:	893a      	ldrh	r2, [r7, #8]
 800137a:	89bb      	ldrh	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001382:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	429a      	cmp	r2, r3
 800138a:	da01      	bge.n	8001390 <findend+0x56>
	{
		return 1;
 800138c:	2301      	movs	r3, #1
 800138e:	e000      	b.n	8001392 <findend+0x58>
	}
	else
		return 0;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <Find_around_node>:

void Find_around_node(uint16_t currentindex, int8_t lastdir, A_Star_Node *end, uint8_t step) {
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b099      	sub	sp, #100	; 0x64
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	603a      	str	r2, [r7, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4603      	mov	r3, r0
 80013a8:	80fb      	strh	r3, [r7, #6]
 80013aa:	460b      	mov	r3, r1
 80013ac:	717b      	strb	r3, [r7, #5]
 80013ae:	4613      	mov	r3, r2
 80013b0:	713b      	strb	r3, [r7, #4]
	uint16_t x = openlist.buffer[currentindex].cor / 256;
 80013b2:	88fa      	ldrh	r2, [r7, #6]
 80013b4:	49b3      	ldr	r1, [pc, #716]	; (8001684 <Find_around_node+0x2e8>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	3304      	adds	r3, #4
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint16_t y = openlist.buffer[currentindex].cor % 256;
 80013ca:	88fa      	ldrh	r2, [r7, #6]
 80013cc:	49ad      	ldr	r1, [pc, #692]	; (8001684 <Find_around_node+0x2e8>)
 80013ce:	4613      	mov	r3, r2
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	4413      	add	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	440b      	add	r3, r1
 80013d8:	3304      	adds	r3, #4
 80013da:	881b      	ldrh	r3, [r3, #0]
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	uint8_t obstacleflag = 1;		//负责检测采取何种程度的避障
 80013e2:	2301      	movs	r3, #1
 80013e4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	// left
	if (x >= step) {
 80013e8:	793b      	ldrb	r3, [r7, #4]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80013f0:	429a      	cmp	r2, r3
 80013f2:	f0c0 80a3 	bcc.w	800153c <Find_around_node+0x1a0>
		uint16_t curx = x - step;
 80013f6:	793b      	ldrb	r3, [r7, #4]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		uint16_t cury = y;
 8001404:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001408:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
		uint16_t coordinateindex = curx * 256 + cury;
 800140c:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	b29a      	uxth	r2, r3
 8001414:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001418:	4413      	add	r3, r2
 800141a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		if (Find_crash(coordinateindex, obstacleflag)) {
 800141e:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001422:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8001426:	4611      	mov	r1, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff fe0f 	bl	800104c <Find_crash>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 8083 	beq.w	800153c <Find_around_node+0x1a0>
			//not in close_list
			if (!findin_list(coordinateindex))
 8001436:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800143a:	4618      	mov	r0, r3
 800143c:	f002 fde2 	bl	8004004 <findin_list>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d17a      	bne.n	800153c <Find_around_node+0x1a0>
					{
				uint16_t index = findin_queue(coordinateindex);
 8001446:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800144a:	4618      	mov	r0, r3
 800144c:	f002 fdac 	bl	8003fa8 <findin_queue>
 8001450:	4603      	mov	r3, r0
 8001452:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 8001456:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800145a:	85bb      	strh	r3, [r7, #44]	; 0x2c
				newnode.fatherindex = currentindex;
 800145c:	88fb      	ldrh	r3, [r7, #6]
 800145e:	86fb      	strh	r3, [r7, #54]	; 0x36
				newnode.cost = openlist.buffer[currentindex].cost + step;
 8001460:	88fa      	ldrh	r2, [r7, #6]
 8001462:	4988      	ldr	r1, [pc, #544]	; (8001684 <Find_around_node+0x2e8>)
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001472:	4623      	mov	r3, r4
 8001474:	461c      	mov	r4, r3
 8001476:	793b      	ldrb	r3, [r7, #4]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fbad 	bl	8000bd8 <__aeabi_i2f>
 800147e:	4603      	mov	r3, r0
 8001480:	4619      	mov	r1, r3
 8001482:	4620      	mov	r0, r4
 8001484:	f7ff faf4 	bl	8000a70 <__addsf3>
 8001488:	4603      	mov	r3, r0
 800148a:	f8c7 302e 	str.w	r3, [r7, #46]	; 0x2e
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 800148e:	f8d7 402e 	ldr.w	r4, [r7, #46]	; 0x2e
 8001492:	4623      	mov	r3, r4
 8001494:	461c      	mov	r4, r3
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	881a      	ldrh	r2, [r3, #0]
 800149a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fef9 	bl	8001298 <cal_H>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fb95 	bl	8000bd8 <__aeabi_i2f>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4619      	mov	r1, r3
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7ff fadc 	bl	8000a70 <__addsf3>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 80014be:	88fa      	ldrh	r2, [r7, #6]
 80014c0:	4970      	ldr	r1, [pc, #448]	; (8001684 <Find_around_node+0x2e8>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	3304      	adds	r3, #4
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80014d4:	4611      	mov	r1, r2
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ff07 	bl	80012ea <dir>
 80014dc:	4603      	mov	r3, r0
 80014de:	461a      	mov	r2, r3
 80014e0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d017      	beq.n	8001518 <Find_around_node+0x17c>
						&& lastdir != 0)
 80014e8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d013      	beq.n	8001518 <Find_around_node+0x17c>
					newnode.total += 10 * step;
 80014f0:	f8d7 4032 	ldr.w	r4, [r7, #50]	; 0x32
 80014f4:	4623      	mov	r3, r4
 80014f6:	461c      	mov	r4, r3
 80014f8:	793a      	ldrb	r2, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fb68 	bl	8000bd8 <__aeabi_i2f>
 8001508:	4603      	mov	r3, r0
 800150a:	4619      	mov	r1, r3
 800150c:	4620      	mov	r0, r4
 800150e:	f7ff faaf 	bl	8000a70 <__addsf3>
 8001512:	4603      	mov	r3, r0
 8001514:	f8c7 3032 	str.w	r3, [r7, #50]	; 0x32
				if (!index)	//not in open_list
 8001518:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800151c:	2b00      	cmp	r3, #0
 800151e:	d105      	bne.n	800152c <Find_around_node+0x190>
				{
					queue_append(&newnode);
 8001520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001524:	4618      	mov	r0, r3
 8001526:	f002 fc67 	bl	8003df8 <queue_append>
 800152a:	e007      	b.n	800153c <Find_around_node+0x1a0>
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 800152c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001530:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f002 fd8a 	bl	8004050 <editcost>
				}
			}
		}
	}
	// right
	if (x <= 255 - step) {
 800153c:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8001540:	793b      	ldrb	r3, [r7, #4]
 8001542:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8001546:	429a      	cmp	r2, r3
 8001548:	f300 80a6 	bgt.w	8001698 <Find_around_node+0x2fc>
		uint16_t curx = x + step;
 800154c:	793b      	ldrb	r3, [r7, #4]
 800154e:	b29a      	uxth	r2, r3
 8001550:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001554:	4413      	add	r3, r2
 8001556:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
		uint16_t cury = y;
 800155a:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800155e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		uint16_t coordinateindex = curx * 256 + cury;
 8001562:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b29a      	uxth	r2, r3
 800156a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800156e:	4413      	add	r3, r2
 8001570:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		if (Find_crash(coordinateindex, obstacleflag)) {
 8001574:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001578:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fd64 	bl	800104c <Find_crash>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	f000 8086 	beq.w	8001698 <Find_around_node+0x2fc>
			//not in close_list
			if (!findin_list(coordinateindex))
 800158c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001590:	4618      	mov	r0, r3
 8001592:	f002 fd37 	bl	8004004 <findin_list>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d17d      	bne.n	8001698 <Find_around_node+0x2fc>
					{
				uint16_t index = findin_queue(coordinateindex);
 800159c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80015a0:	4618      	mov	r0, r3
 80015a2:	f002 fd01 	bl	8003fa8 <findin_queue>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 80015ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80015b0:	843b      	strh	r3, [r7, #32]
				newnode.fatherindex = currentindex;
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	857b      	strh	r3, [r7, #42]	; 0x2a
				newnode.cost = openlist.buffer[currentindex].cost + step;
 80015b6:	88fa      	ldrh	r2, [r7, #6]
 80015b8:	4932      	ldr	r1, [pc, #200]	; (8001684 <Find_around_node+0x2e8>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	440b      	add	r3, r1
 80015c4:	f8d3 4006 	ldr.w	r4, [r3, #6]
 80015c8:	4623      	mov	r3, r4
 80015ca:	461c      	mov	r4, r3
 80015cc:	793b      	ldrb	r3, [r7, #4]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7ff fb02 	bl	8000bd8 <__aeabi_i2f>
 80015d4:	4603      	mov	r3, r0
 80015d6:	4619      	mov	r1, r3
 80015d8:	4620      	mov	r0, r4
 80015da:	f7ff fa49 	bl	8000a70 <__addsf3>
 80015de:	4603      	mov	r3, r0
 80015e0:	f8c7 3022 	str.w	r3, [r7, #34]	; 0x22
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 80015e4:	f8d7 4022 	ldr.w	r4, [r7, #34]	; 0x22
 80015e8:	4623      	mov	r3, r4
 80015ea:	461c      	mov	r4, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	881a      	ldrh	r2, [r3, #0]
 80015f0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fe4e 	bl	8001298 <cal_H>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff faea 	bl	8000bd8 <__aeabi_i2f>
 8001604:	4603      	mov	r3, r0
 8001606:	4619      	mov	r1, r3
 8001608:	4620      	mov	r0, r4
 800160a:	f7ff fa31 	bl	8000a70 <__addsf3>
 800160e:	4603      	mov	r3, r0
 8001610:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 8001614:	88fa      	ldrh	r2, [r7, #6]
 8001616:	491b      	ldr	r1, [pc, #108]	; (8001684 <Find_around_node+0x2e8>)
 8001618:	4613      	mov	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	4413      	add	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	3304      	adds	r3, #4
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800162a:	4611      	mov	r1, r2
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fe5c 	bl	80012ea <dir>
 8001632:	4603      	mov	r3, r0
 8001634:	461a      	mov	r2, r3
 8001636:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800163a:	4293      	cmp	r3, r2
 800163c:	d017      	beq.n	800166e <Find_around_node+0x2d2>
						&& lastdir != 0)
 800163e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d013      	beq.n	800166e <Find_around_node+0x2d2>
					newnode.total += 10 * step;
 8001646:	f8d7 4026 	ldr.w	r4, [r7, #38]	; 0x26
 800164a:	4623      	mov	r3, r4
 800164c:	461c      	mov	r4, r3
 800164e:	793a      	ldrb	r2, [r7, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fabd 	bl	8000bd8 <__aeabi_i2f>
 800165e:	4603      	mov	r3, r0
 8001660:	4619      	mov	r1, r3
 8001662:	4620      	mov	r0, r4
 8001664:	f7ff fa04 	bl	8000a70 <__addsf3>
 8001668:	4603      	mov	r3, r0
 800166a:	f8c7 3026 	str.w	r3, [r7, #38]	; 0x26
				if (!index)	//not in open_list
 800166e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001672:	2b00      	cmp	r3, #0
 8001674:	d108      	bne.n	8001688 <Find_around_node+0x2ec>
				{
					queue_append(&newnode);
 8001676:	f107 0320 	add.w	r3, r7, #32
 800167a:	4618      	mov	r0, r3
 800167c:	f002 fbbc 	bl	8003df8 <queue_append>
 8001680:	e00a      	b.n	8001698 <Find_around_node+0x2fc>
 8001682:	bf00      	nop
 8001684:	20000bec 	.word	0x20000bec
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 8001688:	f107 0220 	add.w	r2, r7, #32
 800168c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8001690:	4611      	mov	r1, r2
 8001692:	4618      	mov	r0, r3
 8001694:	f002 fcdc 	bl	8004050 <editcost>
				}
			}
		}
	}
	// up
	if (y >= step) {
 8001698:	793b      	ldrb	r3, [r7, #4]
 800169a:	b29b      	uxth	r3, r3
 800169c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80016a0:	429a      	cmp	r2, r3
 80016a2:	f0c0 80a3 	bcc.w	80017ec <Find_around_node+0x450>
		uint16_t curx = x;
 80016a6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80016aa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		uint16_t cury = y - step;
 80016ae:	793b      	ldrb	r3, [r7, #4]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		uint16_t coordinateindex = curx * 256 + cury;
 80016bc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80016c8:	4413      	add	r3, r2
 80016ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		if (Find_crash(coordinateindex, obstacleflag)) {
 80016ce:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80016d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80016d6:	4611      	mov	r1, r2
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fcb7 	bl	800104c <Find_crash>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 8083 	beq.w	80017ec <Find_around_node+0x450>
			//not in close_list
			if (!findin_list(coordinateindex))
 80016e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80016ea:	4618      	mov	r0, r3
 80016ec:	f002 fc8a 	bl	8004004 <findin_list>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d17a      	bne.n	80017ec <Find_around_node+0x450>
					{
				uint16_t index = findin_queue(coordinateindex);
 80016f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fc54 	bl	8003fa8 <findin_queue>
 8001700:	4603      	mov	r3, r0
 8001702:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 8001706:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800170a:	82bb      	strh	r3, [r7, #20]
				newnode.fatherindex = currentindex;
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	83fb      	strh	r3, [r7, #30]
				newnode.cost = openlist.buffer[currentindex].cost + step;
 8001710:	88fa      	ldrh	r2, [r7, #6]
 8001712:	4987      	ldr	r1, [pc, #540]	; (8001930 <Find_around_node+0x594>)
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001722:	4623      	mov	r3, r4
 8001724:	461c      	mov	r4, r3
 8001726:	793b      	ldrb	r3, [r7, #4]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fa55 	bl	8000bd8 <__aeabi_i2f>
 800172e:	4603      	mov	r3, r0
 8001730:	4619      	mov	r1, r3
 8001732:	4620      	mov	r0, r4
 8001734:	f7ff f99c 	bl	8000a70 <__addsf3>
 8001738:	4603      	mov	r3, r0
 800173a:	f8c7 3016 	str.w	r3, [r7, #22]
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 800173e:	f8d7 4016 	ldr.w	r4, [r7, #22]
 8001742:	4623      	mov	r3, r4
 8001744:	461c      	mov	r4, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	881a      	ldrh	r2, [r3, #0]
 800174a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800174e:	4611      	mov	r1, r2
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fda1 	bl	8001298 <cal_H>
 8001756:	4603      	mov	r3, r0
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fa3d 	bl	8000bd8 <__aeabi_i2f>
 800175e:	4603      	mov	r3, r0
 8001760:	4619      	mov	r1, r3
 8001762:	4620      	mov	r0, r4
 8001764:	f7ff f984 	bl	8000a70 <__addsf3>
 8001768:	4603      	mov	r3, r0
 800176a:	f8c7 301a 	str.w	r3, [r7, #26]
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 800176e:	88fa      	ldrh	r2, [r7, #6]
 8001770:	496f      	ldr	r1, [pc, #444]	; (8001930 <Find_around_node+0x594>)
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	440b      	add	r3, r1
 800177c:	3304      	adds	r3, #4
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8001784:	4611      	mov	r1, r2
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff fdaf 	bl	80012ea <dir>
 800178c:	4603      	mov	r3, r0
 800178e:	461a      	mov	r2, r3
 8001790:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001794:	4293      	cmp	r3, r2
 8001796:	d017      	beq.n	80017c8 <Find_around_node+0x42c>
						&& lastdir != 0)
 8001798:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d013      	beq.n	80017c8 <Find_around_node+0x42c>
					newnode.total += 10 * step;
 80017a0:	f8d7 401a 	ldr.w	r4, [r7, #26]
 80017a4:	4623      	mov	r3, r4
 80017a6:	461c      	mov	r4, r3
 80017a8:	793a      	ldrb	r2, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fa10 	bl	8000bd8 <__aeabi_i2f>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4619      	mov	r1, r3
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff f957 	bl	8000a70 <__addsf3>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f8c7 301a 	str.w	r3, [r7, #26]
				if (!index)	//not in open_list
 80017c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <Find_around_node+0x440>
				{
					queue_append(&newnode);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4618      	mov	r0, r3
 80017d6:	f002 fb0f 	bl	8003df8 <queue_append>
 80017da:	e007      	b.n	80017ec <Find_around_node+0x450>
				}
				else	//in open_list
				{
					editcost(index, &newnode);
 80017dc:	f107 0214 	add.w	r2, r7, #20
 80017e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80017e4:	4611      	mov	r1, r2
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 fc32 	bl	8004050 <editcost>
				}
			}
		}
	}
	// down
	if (y <= 255 - step) {
 80017ec:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80017f0:	793b      	ldrb	r3, [r7, #4]
 80017f2:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80017f6:	429a      	cmp	r2, r3
 80017f8:	f300 8096 	bgt.w	8001928 <Find_around_node+0x58c>
		uint16_t curx = x;
 80017fc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8001800:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		uint16_t cury = y + step;
 8001804:	793b      	ldrb	r3, [r7, #4]
 8001806:	b29a      	uxth	r2, r3
 8001808:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 800180c:	4413      	add	r3, r2
 800180e:	87fb      	strh	r3, [r7, #62]	; 0x3e
		uint16_t coordinateindex = curx * 256 + cury;
 8001810:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	b29a      	uxth	r2, r3
 8001818:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800181a:	4413      	add	r3, r2
 800181c:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (Find_crash(coordinateindex, obstacleflag)) {
 800181e:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 8001822:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fc10 	bl	800104c <Find_crash>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d07a      	beq.n	8001928 <Find_around_node+0x58c>
			//not in close_list
			if (!findin_list(coordinateindex))
 8001832:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001834:	4618      	mov	r0, r3
 8001836:	f002 fbe5 	bl	8004004 <findin_list>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d173      	bne.n	8001928 <Find_around_node+0x58c>
					{
				uint16_t index = findin_queue(coordinateindex);
 8001840:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001842:	4618      	mov	r0, r3
 8001844:	f002 fbb0 	bl	8003fa8 <findin_queue>
 8001848:	4603      	mov	r3, r0
 800184a:	877b      	strh	r3, [r7, #58]	; 0x3a
				A_Star_Node newnode;
				newnode.cor = coordinateindex;
 800184c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800184e:	813b      	strh	r3, [r7, #8]
				newnode.fatherindex = currentindex;
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	827b      	strh	r3, [r7, #18]
				newnode.cost = openlist.buffer[currentindex].cost + step;
 8001854:	88fa      	ldrh	r2, [r7, #6]
 8001856:	4936      	ldr	r1, [pc, #216]	; (8001930 <Find_around_node+0x594>)
 8001858:	4613      	mov	r3, r2
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4413      	add	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	f8d3 4006 	ldr.w	r4, [r3, #6]
 8001866:	4623      	mov	r3, r4
 8001868:	461c      	mov	r4, r3
 800186a:	793b      	ldrb	r3, [r7, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff f9b3 	bl	8000bd8 <__aeabi_i2f>
 8001872:	4603      	mov	r3, r0
 8001874:	4619      	mov	r1, r3
 8001876:	4620      	mov	r0, r4
 8001878:	f7ff f8fa 	bl	8000a70 <__addsf3>
 800187c:	4603      	mov	r3, r0
 800187e:	f8c7 300a 	str.w	r3, [r7, #10]
				//newnode.cost = openlist.buffer[currentindex].cost +
				newnode.total = newnode.cost + cal_H(coordinateindex, end->cor);
 8001882:	f8d7 400a 	ldr.w	r4, [r7, #10]
 8001886:	4623      	mov	r3, r4
 8001888:	461c      	mov	r4, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	881a      	ldrh	r2, [r3, #0]
 800188e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001890:	4611      	mov	r1, r2
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fd00 	bl	8001298 <cal_H>
 8001898:	4603      	mov	r3, r0
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff f99c 	bl	8000bd8 <__aeabi_i2f>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4619      	mov	r1, r3
 80018a4:	4620      	mov	r0, r4
 80018a6:	f7ff f8e3 	bl	8000a70 <__addsf3>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f8c7 300e 	str.w	r3, [r7, #14]
				if (dir(openlist.buffer[currentindex].cor, coordinateindex) != lastdir
 80018b0:	88fa      	ldrh	r2, [r7, #6]
 80018b2:	491f      	ldr	r1, [pc, #124]	; (8001930 <Find_around_node+0x594>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	3304      	adds	r3, #4
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80018c4:	4611      	mov	r1, r2
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff fd0f 	bl	80012ea <dir>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d017      	beq.n	8001908 <Find_around_node+0x56c>
						&& lastdir != 0)
 80018d8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <Find_around_node+0x56c>
					newnode.total += 10 * step;
 80018e0:	f8d7 400e 	ldr.w	r4, [r7, #14]
 80018e4:	4623      	mov	r3, r4
 80018e6:	461c      	mov	r4, r3
 80018e8:	793a      	ldrb	r2, [r7, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff f970 	bl	8000bd8 <__aeabi_i2f>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4619      	mov	r1, r3
 80018fc:	4620      	mov	r0, r4
 80018fe:	f7ff f8b7 	bl	8000a70 <__addsf3>
 8001902:	4603      	mov	r3, r0
 8001904:	f8c7 300e 	str.w	r3, [r7, #14]
				if (!index)	//not in open_list
 8001908:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800190a:	2b00      	cmp	r3, #0
 800190c:	d105      	bne.n	800191a <Find_around_node+0x57e>
				{
					queue_append(&newnode);
 800190e:	f107 0308 	add.w	r3, r7, #8
 8001912:	4618      	mov	r0, r3
 8001914:	f002 fa70 	bl	8003df8 <queue_append>
					editcost(index, &newnode);
				}
			}
		}
	}
}
 8001918:	e006      	b.n	8001928 <Find_around_node+0x58c>
					editcost(index, &newnode);
 800191a:	f107 0208 	add.w	r2, r7, #8
 800191e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001920:	4611      	mov	r1, r2
 8001922:	4618      	mov	r0, r3
 8001924:	f002 fb94 	bl	8004050 <editcost>
}
 8001928:	bf00      	nop
 800192a:	3764      	adds	r7, #100	; 0x64
 800192c:	46bd      	mov	sp, r7
 800192e:	bd90      	pop	{r4, r7, pc}
 8001930:	20000bec 	.word	0x20000bec

08001934 <A_Star_main>:

uint8_t A_Star_main(Coordinate *start, Coordinate *last, uint8_t step) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b09e      	sub	sp, #120	; 0x78
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	4613      	mov	r3, r2
 8001940:	71fb      	strb	r3, [r7, #7]
	A_Star_Node begin;
	A_Star_Node end;
	begin.cor = (start->x) * 256 + start->y;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001948:	b29b      	uxth	r3, r3
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	b29a      	uxth	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001954:	b29b      	uxth	r3, r3
 8001956:	4413      	add	r3, r2
 8001958:	b29b      	uxth	r3, r3
 800195a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	end.cor = (last->x) * 256 + last->y;
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001964:	b29b      	uxth	r3, r3
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b29a      	uxth	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001970:	b29b      	uxth	r3, r3
 8001972:	4413      	add	r3, r2
 8001974:	b29b      	uxth	r3, r3
 8001976:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	begin.cost = 0;
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	f8c7 305e 	str.w	r3, [r7, #94]	; 0x5e
	begin.total = 0;
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	f8c7 3062 	str.w	r3, [r7, #98]	; 0x62
	begin.fatherindex = 65535;
 800198a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800198e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	queue_append(&begin);
 8001992:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001996:	4618      	mov	r0, r3
 8001998:	f002 fa2e 	bl	8003df8 <queue_append>
	uint16_t curindex = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	uint16_t Flag = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	int8_t lastdir = 0;     		// left:-step up:-2*step right:step down:2*step
 80019a8:	2300      	movs	r3, #0
 80019aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (1) {
		curindex = queue_top();
 80019ae:	f002 fadb 	bl	8003f68 <queue_top>
 80019b2:	4603      	mov	r3, r0
 80019b4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		if (curindex == 65535)
 80019b8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80019bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d101      	bne.n	80019c8 <A_Star_main+0x94>
			return 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	e148      	b.n	8001c5a <A_Star_main+0x326>
		if (openlist.buffer[curindex].fatherindex != 65535) {
 80019c8:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80019cc:	49a5      	ldr	r1, [pc, #660]	; (8001c64 <A_Star_main+0x330>)
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	440b      	add	r3, r1
 80019d8:	330e      	adds	r3, #14
 80019da:	881b      	ldrh	r3, [r3, #0]
 80019dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d022      	beq.n	8001a2a <A_Star_main+0xf6>
			lastdir = dir(openlist.buffer[openlist.buffer[curindex].fatherindex].cor,
 80019e4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80019e8:	499e      	ldr	r1, [pc, #632]	; (8001c64 <A_Star_main+0x330>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	4413      	add	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	330e      	adds	r3, #14
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4a9a      	ldr	r2, [pc, #616]	; (8001c64 <A_Star_main+0x330>)
 80019fc:	460b      	mov	r3, r1
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	440b      	add	r3, r1
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	3304      	adds	r3, #4
 8001a08:	8818      	ldrh	r0, [r3, #0]
 8001a0a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001a0e:	4995      	ldr	r1, [pc, #596]	; (8001c64 <A_Star_main+0x330>)
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	440b      	add	r3, r1
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f7ff fc63 	bl	80012ea <dir>
 8001a24:	4603      	mov	r3, r0
 8001a26:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					openlist.buffer[curindex].cor);
		}
		list_append(openlist.buffer[curindex].cor);
 8001a2a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001a2e:	498d      	ldr	r1, [pc, #564]	; (8001c64 <A_Star_main+0x330>)
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	881b      	ldrh	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f002 fa64 	bl	8003f0c <list_append>
		if(findend(openlist.buffer[curindex].cor, end.cor, step))
 8001a44:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001a48:	4986      	ldr	r1, [pc, #536]	; (8001c64 <A_Star_main+0x330>)
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	440b      	add	r3, r1
 8001a54:	3304      	adds	r3, #4
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	f8b7 1050 	ldrh.w	r1, [r7, #80]	; 0x50
 8001a5c:	79fa      	ldrb	r2, [r7, #7]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff fc6b 	bl	800133a <findend>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d022      	beq.n	8001ab0 <A_Star_main+0x17c>
		{
			Flag = curindex;
 8001a6a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001a6e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			break;
 8001a72:	bf00      	nop
		Find_around_node(curindex, lastdir, &end, step);
	}

	//we now get the path
	Coordinate Astar_path[16];
	Astar_path[15].x = last->x;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	Astar_path[15].y = last->y;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001a84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t i = 14;
 8001a88:	230e      	movs	r3, #14
 8001a8a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	A_Star_Node *p = &openlist.buffer[Flag];
 8001a8e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4a72      	ldr	r2, [pc, #456]	; (8001c64 <A_Star_main+0x330>)
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	673b      	str	r3, [r7, #112]	; 0x70
	if (p->cor != end.cor) {
 8001aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001aa4:	881a      	ldrh	r2, [r3, #0]
 8001aa6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d027      	beq.n	8001afe <A_Star_main+0x1ca>
 8001aae:	e009      	b.n	8001ac4 <A_Star_main+0x190>
		Find_around_node(curindex, lastdir, &end, step);
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001ab6:	f997 1077 	ldrsb.w	r1, [r7, #119]	; 0x77
 8001aba:	f8b7 006e 	ldrh.w	r0, [r7, #110]	; 0x6e
 8001abe:	f7ff fc6d 	bl	800139c <Find_around_node>
		curindex = queue_top();
 8001ac2:	e774      	b.n	80019ae <A_Star_main+0x7a>
		Astar_path[i].x = p->cor / 256;
 8001ac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ac6:	881b      	ldrh	r3, [r3, #0]
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001ad0:	b212      	sxth	r2, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	3378      	adds	r3, #120	; 0x78
 8001ad6:	443b      	add	r3, r7
 8001ad8:	f823 2c68 	strh.w	r2, [r3, #-104]
		Astar_path[i].y = p->cor % 256;
 8001adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	b21a      	sxth	r2, r3
 8001ae2:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	b212      	sxth	r2, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	3378      	adds	r3, #120	; 0x78
 8001aee:	443b      	add	r3, r7
 8001af0:	f823 2c66 	strh.w	r2, [r3, #-102]
		i--;
 8001af4:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001af8:	3b01      	subs	r3, #1
 8001afa:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
	}
	if (p->fatherindex != 65535)
 8001afe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b00:	895b      	ldrh	r3, [r3, #10]
 8001b02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d07a      	beq.n	8001c00 <A_Star_main+0x2cc>
		lastdir = dir(openlist.buffer[p->fatherindex].cor, p->cor);
 8001b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b0c:	895b      	ldrh	r3, [r3, #10]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4a54      	ldr	r2, [pc, #336]	; (8001c64 <A_Star_main+0x330>)
 8001b12:	460b      	mov	r3, r1
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	440b      	add	r3, r1
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	881a      	ldrh	r2, [r3, #0]
 8001b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	4619      	mov	r1, r3
 8001b26:	4610      	mov	r0, r2
 8001b28:	f7ff fbdf 	bl	80012ea <dir>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (p->fatherindex != 65535) {
 8001b32:	e065      	b.n	8001c00 <A_Star_main+0x2cc>
		if (lastdir != dir(openlist.buffer[p->fatherindex].cor, p->cor))
 8001b34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b36:	895b      	ldrh	r3, [r3, #10]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4a4a      	ldr	r2, [pc, #296]	; (8001c64 <A_Star_main+0x330>)
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	440b      	add	r3, r1
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	4413      	add	r3, r2
 8001b46:	3304      	adds	r3, #4
 8001b48:	881a      	ldrh	r2, [r3, #0]
 8001b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4610      	mov	r0, r2
 8001b52:	f7ff fbca 	bl	80012ea <dir>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d043      	beq.n	8001bea <A_Star_main+0x2b6>
		{
			Astar_path[i].x = p->cor / 256;
 8001b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b6e:	b212      	sxth	r2, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	3378      	adds	r3, #120	; 0x78
 8001b74:	443b      	add	r3, r7
 8001b76:	f823 2c68 	strh.w	r2, [r3, #-104]
			Astar_path[i].y = p->cor % 256;
 8001b7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	b21a      	sxth	r2, r3
 8001b80:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	b212      	sxth	r2, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	3378      	adds	r3, #120	; 0x78
 8001b8c:	443b      	add	r3, r7
 8001b8e:	f823 2c66 	strh.w	r2, [r3, #-102]
			if (i == 1) {
 8001b92:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d10e      	bne.n	8001bb8 <A_Star_main+0x284>
				i = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
				p = &(openlist.buffer[p->fatherindex]);
 8001ba0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ba2:	895b      	ldrh	r3, [r3, #10]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	4a2d      	ldr	r2, [pc, #180]	; (8001c64 <A_Star_main+0x330>)
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	673b      	str	r3, [r7, #112]	; 0x70
				break;
 8001bb6:	e029      	b.n	8001c0c <A_Star_main+0x2d8>
			}
			i = i - 1;
 8001bb8:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
			lastdir = dir(openlist.buffer[p->fatherindex].cor, p->cor);
 8001bc2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bc4:	895b      	ldrh	r3, [r3, #10]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4a26      	ldr	r2, [pc, #152]	; (8001c64 <A_Star_main+0x330>)
 8001bca:	460b      	mov	r3, r1
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	440b      	add	r3, r1
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	881a      	ldrh	r2, [r3, #0]
 8001bd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4610      	mov	r0, r2
 8001be0:	f7ff fb83 	bl	80012ea <dir>
 8001be4:	4603      	mov	r3, r0
 8001be6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
		p = &(openlist.buffer[p->fatherindex]);
 8001bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001bec:	895b      	ldrh	r3, [r3, #10]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4413      	add	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4a1a      	ldr	r2, [pc, #104]	; (8001c64 <A_Star_main+0x330>)
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	673b      	str	r3, [r7, #112]	; 0x70
	while (p->fatherindex != 65535) {
 8001c00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c02:	895b      	ldrh	r3, [r3, #10]
 8001c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d193      	bne.n	8001b34 <A_Star_main+0x200>
	}
	Astar_path[i].x = p->cor / 256;
 8001c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c0e:	881b      	ldrh	r3, [r3, #0]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c18:	b212      	sxth	r2, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	3378      	adds	r3, #120	; 0x78
 8001c1e:	443b      	add	r3, r7
 8001c20:	f823 2c68 	strh.w	r2, [r3, #-104]
	Astar_path[i].y = p->cor % 256;
 8001c24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	b21a      	sxth	r2, r3
 8001c2a:	f897 3076 	ldrb.w	r3, [r7, #118]	; 0x76
 8001c2e:	b2d2      	uxtb	r2, r2
 8001c30:	b212      	sxth	r2, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	3378      	adds	r3, #120	; 0x78
 8001c36:	443b      	add	r3, r7
 8001c38:	f823 2c66 	strh.w	r2, [r3, #-102]

	Lane_init();
 8001c3c:	f002 f8ce 	bl	8003ddc <Lane_init>
	uint8_t Laneis_OK = Insert_inLane(&Astar_path[0], i);
 8001c40:	f897 2076 	ldrb.w	r2, [r7, #118]	; 0x76
 8001c44:	f107 0310 	add.w	r3, r7, #16
 8001c48:	4611      	mov	r1, r2
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f002 fa4a 	bl	80040e4 <Insert_inLane>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

	return Laneis_OK;
 8001c56:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3778      	adds	r7, #120	; 0x78
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	20000bec 	.word	0x20000bec

08001c68 <mingyan_pathfind_avoidObstacle>:
	cmotor_rf.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
	cmotor_lb.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
	cmotor_rb.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
}

uint8_t mingyan_pathfind_avoidObstacle(Coordinate *start, Coordinate *end) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
	return A_Star_main(start, end, 5);
 8001c72:	2205      	movs	r2, #5
 8001c74:	6839      	ldr	r1, [r7, #0]
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff fe5c 	bl	8001934 <A_Star_main>
 8001c7c:	4603      	mov	r3, r0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <huansic_jy62_init>:
/*
 * 		Initializes the port of the IMU.
 * 		@param	himu	jy62 pending initialization
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_init(JY62_HandleTypeDef *himu) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	// perform some necessary checks
	if (!himu)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <huansic_jy62_init+0x12>
		return IMU_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e026      	b.n	8001ce8 <huansic_jy62_init+0x60>

	if (!himu->huart)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <huansic_jy62_init+0x1e>
		return IMU_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e020      	b.n	8001ce8 <huansic_jy62_init+0x60>
	HAL_UART_Init(himu->huart);
	HAL_Delay(10);
#endif
#endif

	HAL_Delay(3);
 8001ca6:	2003      	movs	r0, #3
 8001ca8:	f003 f93c 	bl	8004f24 <HAL_Delay>

	// reset z-axis angle
	HAL_UART_Transmit(himu->huart, JY62_RESET_Z_ANGLE, 3, 10);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6818      	ldr	r0, [r3, #0]
 8001cb0:	230a      	movs	r3, #10
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <huansic_jy62_init+0x68>)
 8001cb6:	f006 fab1 	bl	800821c <HAL_UART_Transmit>

// instead, just use DMA
	himu->pending_alignment = 0;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6818      	ldr	r0, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3334      	adds	r3, #52	; 0x34
 8001cca:	2221      	movs	r2, #33	; 0x21
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f006 fb67 	bl	80083a0 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0204 	bic.w	r2, r2, #4
 8001ce4:	601a      	str	r2, [r3, #0]

#ifdef HUANSIC_JY62_DEBUG
	himu->counter = 0;
#endif

	return IMU_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3708      	adds	r7, #8
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	20000000 	.word	0x20000000

08001cf4 <huansic_jy62_dma_isr>:
/*
 * 		Handles the dma interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_dma_isr(JY62_HandleTypeDef *himu) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	if (!himu)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <huansic_jy62_dma_isr+0x12>
		return IMU_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e112      	b.n	8001f2c <huansic_jy62_dma_isr+0x238>

	uint8_t temp8, i, i11;

	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 8001d06:	2300      	movs	r3, #0
 8001d08:	73fb      	strb	r3, [r7, #15]
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73bb      	strb	r3, [r7, #14]
 8001d0e:	e0ed      	b.n	8001eec <huansic_jy62_dma_isr+0x1f8>
		if (himu->buffer[0 + i11] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 8001d10:	7bbb      	ldrb	r3, [r7, #14]
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	4413      	add	r3, r2
 8001d16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d1a:	2b55      	cmp	r3, #85	; 0x55
 8001d1c:	d01c      	beq.n	8001d58 <huansic_jy62_dma_isr+0x64>
			himu->pending_alignment = 1;		// enter aligning mode if not already
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6818      	ldr	r0, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3334      	adds	r3, #52	; 0x34
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4619      	mov	r1, r3
 8001d32:	f006 fb05 	bl	8008340 <HAL_UART_Receive_IT>
			if (i) {
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <huansic_jy62_dma_isr+0x60>
				__huansic_jy62_decode_temp(himu, i - 1);
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	4619      	mov	r1, r3
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 fa6b 	bl	8002220 <__huansic_jy62_decode_temp>
				himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8001d4a:	f003 f8e1 	bl	8004f10 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
			}
			return IMU_HEADER_ERROR;
 8001d54:	2305      	movs	r3, #5
 8001d56:	e0e9      	b.n	8001f2c <huansic_jy62_dma_isr+0x238>
		} else {
			// check sum
			temp8 = himu->buffer[0 + i11];
 8001d58:	7bbb      	ldrb	r3, [r7, #14]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d62:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[1 + i11];
 8001d64:	7bbb      	ldrb	r3, [r7, #14]
 8001d66:	3301      	adds	r3, #1
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001d70:	7b7b      	ldrb	r3, [r7, #13]
 8001d72:	4413      	add	r3, r2
 8001d74:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[2 + i11];
 8001d76:	7bbb      	ldrb	r3, [r7, #14]
 8001d78:	3302      	adds	r3, #2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001d82:	7b7b      	ldrb	r3, [r7, #13]
 8001d84:	4413      	add	r3, r2
 8001d86:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[3 + i11];
 8001d88:	7bbb      	ldrb	r3, [r7, #14]
 8001d8a:	3303      	adds	r3, #3
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001d94:	7b7b      	ldrb	r3, [r7, #13]
 8001d96:	4413      	add	r3, r2
 8001d98:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[4 + i11];
 8001d9a:	7bbb      	ldrb	r3, [r7, #14]
 8001d9c:	3304      	adds	r3, #4
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001da6:	7b7b      	ldrb	r3, [r7, #13]
 8001da8:	4413      	add	r3, r2
 8001daa:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[5 + i11];
 8001dac:	7bbb      	ldrb	r3, [r7, #14]
 8001dae:	3305      	adds	r3, #5
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	4413      	add	r3, r2
 8001db4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001db8:	7b7b      	ldrb	r3, [r7, #13]
 8001dba:	4413      	add	r3, r2
 8001dbc:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[6 + i11];
 8001dbe:	7bbb      	ldrb	r3, [r7, #14]
 8001dc0:	3306      	adds	r3, #6
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001dca:	7b7b      	ldrb	r3, [r7, #13]
 8001dcc:	4413      	add	r3, r2
 8001dce:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[7 + i11];
 8001dd0:	7bbb      	ldrb	r3, [r7, #14]
 8001dd2:	3307      	adds	r3, #7
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001ddc:	7b7b      	ldrb	r3, [r7, #13]
 8001dde:	4413      	add	r3, r2
 8001de0:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[8 + i11];
 8001de2:	7bbb      	ldrb	r3, [r7, #14]
 8001de4:	3308      	adds	r3, #8
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001dee:	7b7b      	ldrb	r3, [r7, #13]
 8001df0:	4413      	add	r3, r2
 8001df2:	737b      	strb	r3, [r7, #13]
			temp8 += himu->buffer[9 + i11];
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	3309      	adds	r3, #9
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8001e00:	7b7b      	ldrb	r3, [r7, #13]
 8001e02:	4413      	add	r3, r2
 8001e04:	737b      	strb	r3, [r7, #13]

			if (temp8 != himu->buffer[10 + i11]) {		// check
 8001e06:	7bbb      	ldrb	r3, [r7, #14]
 8001e08:	330a      	adds	r3, #10
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e12:	7b7a      	ldrb	r2, [r7, #13]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d01c      	beq.n	8001e52 <huansic_jy62_dma_isr+0x15e>
				himu->pending_alignment = 1;		// enter aligning mode if not already
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3334      	adds	r3, #52	; 0x34
 8001e28:	2201      	movs	r2, #1
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f006 fa88 	bl	8008340 <HAL_UART_Receive_IT>
				if (i) {
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <huansic_jy62_dma_isr+0x15a>
					__huansic_jy62_decode_temp(himu, i - 1);
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f9ee 	bl	8002220 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8001e44:	f003 f864 	bl	8004f10 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_SUM_ERROR;
 8001e4e:	2304      	movs	r3, #4
 8001e50:	e06c      	b.n	8001f2c <huansic_jy62_dma_isr+0x238>
			}

			if (himu->buffer[1 + i11] == HUANSIC_JY62_ACCEL) 		// then decode
 8001e52:	7bbb      	ldrb	r3, [r7, #14]
 8001e54:	3301      	adds	r3, #1
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e5e:	2b51      	cmp	r3, #81	; 0x51
 8001e60:	d105      	bne.n	8001e6e <huansic_jy62_dma_isr+0x17a>
				__huansic_jy62_decode_accel(himu, i);
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	4619      	mov	r1, r3
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f8c6 	bl	8001ff8 <__huansic_jy62_decode_accel>
 8001e6c:	e038      	b.n	8001ee0 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_OMEGA)
 8001e6e:	7bbb      	ldrb	r3, [r7, #14]
 8001e70:	3301      	adds	r3, #1
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	4413      	add	r3, r2
 8001e76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e7a:	2b52      	cmp	r3, #82	; 0x52
 8001e7c:	d105      	bne.n	8001e8a <huansic_jy62_dma_isr+0x196>
				__huansic_jy62_decode_omega(himu, i);
 8001e7e:	7bfb      	ldrb	r3, [r7, #15]
 8001e80:	4619      	mov	r1, r3
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f922 	bl	80020cc <__huansic_jy62_decode_omega>
 8001e88:	e02a      	b.n	8001ee0 <huansic_jy62_dma_isr+0x1ec>
			else if (himu->buffer[1 + i11] == HUANSIC_JY62_THETA)
 8001e8a:	7bbb      	ldrb	r3, [r7, #14]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	4413      	add	r3, r2
 8001e92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e96:	2b53      	cmp	r3, #83	; 0x53
 8001e98:	d105      	bne.n	8001ea6 <huansic_jy62_dma_isr+0x1b2>
				__huansic_jy62_decode_theta(himu, i);
 8001e9a:	7bfb      	ldrb	r3, [r7, #15]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f968 	bl	8002174 <__huansic_jy62_decode_theta>
 8001ea4:	e01c      	b.n	8001ee0 <huansic_jy62_dma_isr+0x1ec>
			else {
				himu->pending_alignment = 1;		// enter aligning mode if not already
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
				HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3334      	adds	r3, #52	; 0x34
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	4619      	mov	r1, r3
 8001eba:	f006 fa41 	bl	8008340 <HAL_UART_Receive_IT>
				if (i) {
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00b      	beq.n	8001edc <huansic_jy62_dma_isr+0x1e8>
					__huansic_jy62_decode_temp(himu, i - 1);
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f9a7 	bl	8002220 <__huansic_jy62_decode_temp>
					himu->lastUpdated = HAL_GetTick();		// record if there has been a valid one
 8001ed2:	f003 f81d 	bl	8004f10 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	631a      	str	r2, [r3, #48]	; 0x30
				}
				return IMU_PID_ERROR;
 8001edc:	2306      	movs	r3, #6
 8001ede:	e025      	b.n	8001f2c <huansic_jy62_dma_isr+0x238>
	for (i = 0, i11 = 0; i < 3; i++, i11 += 11) {
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	73fb      	strb	r3, [r7, #15]
 8001ee6:	7bbb      	ldrb	r3, [r7, #14]
 8001ee8:	330b      	adds	r3, #11
 8001eea:	73bb      	strb	r3, [r7, #14]
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	f67f af0e 	bls.w	8001d10 <huansic_jy62_dma_isr+0x1c>
		}

	}

	// it should only reach this point if the package is fully valid
	himu->lastUpdated = HAL_GetTick();
 8001ef4:	f003 f80c 	bl	8004f10 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	631a      	str	r2, [r3, #48]	; 0x30
	__huansic_jy62_decode_temp(himu, 2);
 8001efe:	2102      	movs	r1, #2
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f000 f98d 	bl	8002220 <__huansic_jy62_decode_temp>
	// start to receive the next package
	HAL_UART_Receive_DMA(himu->huart, &himu->buffer[0], 33);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3334      	adds	r3, #52	; 0x34
 8001f0e:	2221      	movs	r2, #33	; 0x21
 8001f10:	4619      	mov	r1, r3
 8001f12:	f006 fa45 	bl	80083a0 <HAL_UART_Receive_DMA>
	himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0204 	bic.w	r2, r2, #4
 8001f28:	601a      	str	r2, [r3, #0]
#ifdef HUANSIC_JY62_DEBUG
	himu->counter++;
	HAL_GPIO_WritePin(himu->port, himu->pin, himu->counter & (1 << 5));
#endif

	return IMU_OK;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <huansic_jy62_isr>:
/*
 * 		Handles the interrupts.
 * 		@param	himu	jy62 whose port has sent out the interrupt signal
 * 		@retval	enum IMU_STATUS
 */
enum IMU_STATUS huansic_jy62_isr(JY62_HandleTypeDef *himu) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
	if (!himu)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <huansic_jy62_isr+0x12>
		return IMU_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e029      	b.n	8001f9a <huansic_jy62_isr+0x66>

	if (himu->buffer[0] != HUANSIC_JY62_HEADER) {		// header mis-aligned
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f4c:	2b55      	cmp	r3, #85	; 0x55
 8001f4e:	d00d      	beq.n	8001f6c <huansic_jy62_isr+0x38>
		himu->pending_alignment = 1;		// enter aligning mode if not already
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);		// check next byte
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3334      	adds	r3, #52	; 0x34
 8001f60:	2201      	movs	r2, #1
 8001f62:	4619      	mov	r1, r3
 8001f64:	f006 f9ec 	bl	8008340 <HAL_UART_Receive_IT>
		return IMU_HEADER_ERROR;
 8001f68:	2305      	movs	r3, #5
 8001f6a:	e016      	b.n	8001f9a <huansic_jy62_isr+0x66>
	} else {
		// header just aligned
		himu->pending_alignment = 0;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
		HAL_UART_Receive_DMA(himu->huart, &himu->buffer[1], 32);		// receive the rest
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3335      	adds	r3, #53	; 0x35
 8001f7c:	2220      	movs	r2, #32
 8001f7e:	4619      	mov	r1, r3
 8001f80:	f006 fa0e 	bl	80083a0 <HAL_UART_Receive_DMA>
		himu->hdma->Instance->CCR &= ~DMA_IT_HT;		// disable half transfer interrupt
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0204 	bic.w	r2, r2, #4
 8001f96:	601a      	str	r2, [r3, #0]
		return IMU_OK;
 8001f98:	2300      	movs	r3, #0
	}
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <huansic_jy62_dma_error>:
/*
 * 		Handles the dma errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_dma_error(JY62_HandleTypeDef *himu){
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b082      	sub	sp, #8
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3334      	adds	r3, #52	; 0x34
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	f006 f9bf 	bl	8008340 <HAL_UART_Receive_IT>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <huansic_jy62_error>:
/*
 * 		Handles the errors.
 * 		@param	himu	jy62 whose port has sent out the error
 * 		@retval	enum IMU_STATUS
 */
void huansic_jy62_error(JY62_HandleTypeDef *himu){
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
	// nothing much to do with error
	himu->pending_alignment = 1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
	HAL_UART_Receive_IT(himu->huart, &himu->buffer[0], 1);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6818      	ldr	r0, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3334      	adds	r3, #52	; 0x34
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f006 f9ab 	bl	8008340 <HAL_UART_Receive_IT>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	0000      	movs	r0, r0
 8001ff4:	0000      	movs	r0, r0
	...

08001ff8 <__huansic_jy62_decode_accel>:

/***************	functions used by the library; not visible to users		***************/

static inline void __huansic_jy62_decode_accel(JY62_HandleTypeDef *himu, uint8_t location) {
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8002004:	2300      	movs	r3, #0
 8002006:	73fb      	strb	r3, [r7, #15]
 8002008:	e050      	b.n	80020ac <__huansic_jy62_decode_accel+0xb4>
		temp = himu->buffer[3 + 2 * i + location * 11];
 800200a:	7bfb      	ldrb	r3, [r7, #15]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	1cd9      	adds	r1, r3, #3
 8002010:	78fa      	ldrb	r2, [r7, #3]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	440b      	add	r3, r1
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	4413      	add	r3, r2
 8002022:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002026:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 8002028:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	3301      	adds	r3, #1
 8002034:	0059      	lsls	r1, r3, #1
 8002036:	78fa      	ldrb	r2, [r7, #3]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4413      	add	r3, r2
 8002042:	440b      	add	r3, r1
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4413      	add	r3, r2
 8002048:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800204c:	b21a      	sxth	r2, r3
 800204e:	89bb      	ldrh	r3, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	81bb      	strh	r3, [r7, #12]
		himu->accel[i] = (float) temp * 16 * 9.8 / 32768;
 8002054:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fdbd 	bl	8000bd8 <__aeabi_i2f>
 800205e:	4603      	mov	r3, r0
 8002060:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fe0b 	bl	8000c80 <__aeabi_fmul>
 800206a:	4603      	mov	r3, r0
 800206c:	4618      	mov	r0, r3
 800206e:	f7fe fa3f 	bl	80004f0 <__aeabi_f2d>
 8002072:	a313      	add	r3, pc, #76	; (adr r3, 80020c0 <__huansic_jy62_decode_accel+0xc8>)
 8002074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002078:	f7fe fa92 	bl	80005a0 <__aeabi_dmul>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f04f 0200 	mov.w	r2, #0
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <__huansic_jy62_decode_accel+0xd0>)
 800208a:	f7fe fbb3 	bl	80007f4 <__aeabi_ddiv>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	7bfc      	ldrb	r4, [r7, #15]
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f7fe fc94 	bl	80009c4 <__aeabi_d2f>
 800209c:	4601      	mov	r1, r0
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	1ca2      	adds	r2, r4, #2
 80020a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	3301      	adds	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d9ab      	bls.n	800200a <__huansic_jy62_decode_accel+0x12>
	}
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd90      	pop	{r4, r7, pc}
 80020bc:	f3af 8000 	nop.w
 80020c0:	9999999a 	.word	0x9999999a
 80020c4:	40239999 	.word	0x40239999
 80020c8:	40e00000 	.word	0x40e00000

080020cc <__huansic_jy62_decode_omega>:

static inline void __huansic_jy62_decode_omega(JY62_HandleTypeDef *himu, uint8_t location) {
 80020cc:	b590      	push	{r4, r7, lr}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	e03f      	b.n	800215e <__huansic_jy62_decode_omega+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	1cd9      	adds	r1, r3, #3
 80020e4:	78fa      	ldrb	r2, [r7, #3]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	440b      	add	r3, r1
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020fa:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 80020fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	3301      	adds	r3, #1
 8002108:	0059      	lsls	r1, r3, #1
 800210a:	78fa      	ldrb	r2, [r7, #3]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4413      	add	r3, r2
 8002116:	440b      	add	r3, r1
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002120:	b21a      	sxth	r2, r3
 8002122:	89bb      	ldrh	r3, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	81bb      	strh	r3, [r7, #12]
		himu->omega[i] = (float) temp * 2000 / 32768;
 8002128:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fd53 	bl	8000bd8 <__aeabi_i2f>
 8002132:	4603      	mov	r3, r0
 8002134:	490e      	ldr	r1, [pc, #56]	; (8002170 <__huansic_jy62_decode_omega+0xa4>)
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fda2 	bl	8000c80 <__aeabi_fmul>
 800213c:	4603      	mov	r3, r0
 800213e:	7bfc      	ldrb	r4, [r7, #15]
 8002140:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe fe4f 	bl	8000de8 <__aeabi_fdiv>
 800214a:	4603      	mov	r3, r0
 800214c:	4619      	mov	r1, r3
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	1d23      	adds	r3, r4, #4
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	6059      	str	r1, [r3, #4]
	for (i = 0; i < 3; i++) {
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	3301      	adds	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d9bc      	bls.n	80020de <__huansic_jy62_decode_omega+0x12>
	}
}
 8002164:	bf00      	nop
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}
 800216e:	bf00      	nop
 8002170:	44fa0000 	.word	0x44fa0000

08002174 <__huansic_jy62_decode_theta>:

static inline void __huansic_jy62_decode_theta(JY62_HandleTypeDef *himu, uint8_t location) {
 8002174:	b590      	push	{r4, r7, lr}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
	int16_t temp;
	uint8_t i;
	for (i = 0; i < 3; i++) {
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]
 8002184:	e03f      	b.n	8002206 <__huansic_jy62_decode_theta+0x92>
		temp = himu->buffer[3 + 2 * i + location * 11];
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	1cd9      	adds	r1, r3, #3
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	440b      	add	r3, r1
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021a2:	81bb      	strh	r3, [r7, #12]
		temp <<= 8;
 80021a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	81bb      	strh	r3, [r7, #12]
		temp |= himu->buffer[2 + 2 * i + location * 11];
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	3301      	adds	r3, #1
 80021b0:	0059      	lsls	r1, r3, #1
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	440b      	add	r3, r1
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	4413      	add	r3, r2
 80021c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021c8:	b21a      	sxth	r2, r3
 80021ca:	89bb      	ldrh	r3, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	81bb      	strh	r3, [r7, #12]
		himu->theta[i] = (float) temp * 180 / 32768;
 80021d0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe fcff 	bl	8000bd8 <__aeabi_i2f>
 80021da:	4603      	mov	r3, r0
 80021dc:	490e      	ldr	r1, [pc, #56]	; (8002218 <__huansic_jy62_decode_theta+0xa4>)
 80021de:	4618      	mov	r0, r3
 80021e0:	f7fe fd4e 	bl	8000c80 <__aeabi_fmul>
 80021e4:	4603      	mov	r3, r0
 80021e6:	7bfc      	ldrb	r4, [r7, #15]
 80021e8:	f04f 418e 	mov.w	r1, #1191182336	; 0x47000000
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7fe fdfb 	bl	8000de8 <__aeabi_fdiv>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4619      	mov	r1, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f104 0208 	add.w	r2, r4, #8
 80021fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 3; i++) {
 8002200:	7bfb      	ldrb	r3, [r7, #15]
 8002202:	3301      	adds	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d9bc      	bls.n	8002186 <__huansic_jy62_decode_theta+0x12>
	}
}
 800220c:	bf00      	nop
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	bd90      	pop	{r4, r7, pc}
 8002216:	bf00      	nop
 8002218:	43340000 	.word	0x43340000
 800221c:	00000000 	.word	0x00000000

08002220 <__huansic_jy62_decode_temp>:

static inline void __huansic_jy62_decode_temp(JY62_HandleTypeDef *himu, uint8_t location) {
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	460b      	mov	r3, r1
 800222a:	70fb      	strb	r3, [r7, #3]
	int16_t temp;

	temp = himu->buffer[8 + location * 11];
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	4613      	mov	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	3308      	adds	r3, #8
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4413      	add	r3, r2
 800223e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002242:	81fb      	strh	r3, [r7, #14]
	temp <<= 8;
 8002244:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	81fb      	strh	r3, [r7, #14]
	temp |= himu->buffer[9 + location * 11];
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	3309      	adds	r3, #9
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	4413      	add	r3, r2
 800225e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002262:	b21a      	sxth	r2, r3
 8002264:	89fb      	ldrh	r3, [r7, #14]
 8002266:	4313      	orrs	r3, r2
 8002268:	81fb      	strh	r3, [r7, #14]
	himu->temperature = (float) temp / 340 + 36.53;
 800226a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fcb2 	bl	8000bd8 <__aeabi_i2f>
 8002274:	4603      	mov	r3, r0
 8002276:	4910      	ldr	r1, [pc, #64]	; (80022b8 <__huansic_jy62_decode_temp+0x98>)
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe fdb5 	bl	8000de8 <__aeabi_fdiv>
 800227e:	4603      	mov	r3, r0
 8002280:	4618      	mov	r0, r3
 8002282:	f7fe f935 	bl	80004f0 <__aeabi_f2d>
 8002286:	a30a      	add	r3, pc, #40	; (adr r3, 80022b0 <__huansic_jy62_decode_temp+0x90>)
 8002288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228c:	f7fd ffd2 	bl	8000234 <__adddf3>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	f7fe fb94 	bl	80009c4 <__aeabi_d2f>
 800229c:	4602      	mov	r2, r0
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	f3af 8000 	nop.w
 80022b0:	0a3d70a4 	.word	0x0a3d70a4
 80022b4:	404243d7 	.word	0x404243d7
 80022b8:	43aa0000 	.word	0x43aa0000

080022bc <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
	...

080022d0 <huansic_order_new>:
		orderBuffers[i].id = -1;
	for (i = 0; i < 5; i++)
		delivering[i] = &orderBuffers[i];		// give it some default value
}

Order* huansic_order_new(int8_t id) {
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e2:	d101      	bne.n	80022e8 <huansic_order_new+0x18>
		return 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	e046      	b.n	8002376 <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80022e8:	2300      	movs	r3, #0
 80022ea:	73fb      	strb	r3, [r7, #15]
 80022ec:	e017      	b.n	800231e <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 80022ee:	7bfa      	ldrb	r2, [r7, #15]
 80022f0:	4923      	ldr	r1, [pc, #140]	; (8002380 <huansic_order_new+0xb0>)
 80022f2:	4613      	mov	r3, r2
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	4413      	add	r3, r2
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	440b      	add	r3, r1
 80022fc:	3310      	adds	r3, #16
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	429a      	cmp	r2, r3
 8002306:	d107      	bne.n	8002318 <huansic_order_new+0x48>
			return &orderBuffers[i];
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4a1b      	ldr	r2, [pc, #108]	; (8002380 <huansic_order_new+0xb0>)
 8002314:	4413      	add	r3, r2
 8002316:	e02e      	b.n	8002376 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002318:	7bfb      	ldrb	r3, [r7, #15]
 800231a:	3301      	adds	r3, #1
 800231c:	73fb      	strb	r3, [r7, #15]
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	2b3b      	cmp	r3, #59	; 0x3b
 8002322:	d9e4      	bls.n	80022ee <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002324:	2300      	movs	r3, #0
 8002326:	73fb      	strb	r3, [r7, #15]
 8002328:	e021      	b.n	800236e <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 800232a:	7bfa      	ldrb	r2, [r7, #15]
 800232c:	4914      	ldr	r1, [pc, #80]	; (8002380 <huansic_order_new+0xb0>)
 800232e:	4613      	mov	r3, r2
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4413      	add	r3, r2
 8002334:	00db      	lsls	r3, r3, #3
 8002336:	440b      	add	r3, r1
 8002338:	3310      	adds	r3, #16
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d112      	bne.n	8002368 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8002348:	480d      	ldr	r0, [pc, #52]	; (8002380 <huansic_order_new+0xb0>)
 800234a:	4613      	mov	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4403      	add	r3, r0
 8002354:	3310      	adds	r3, #16
 8002356:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 8002358:	7bfa      	ldrb	r2, [r7, #15]
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4a07      	ldr	r2, [pc, #28]	; (8002380 <huansic_order_new+0xb0>)
 8002364:	4413      	add	r3, r2
 8002366:	e006      	b.n	8002376 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	3301      	adds	r3, #1
 800236c:	73fb      	strb	r3, [r7, #15]
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	2b3b      	cmp	r3, #59	; 0x3b
 8002372:	d9da      	bls.n	800232a <huansic_order_new+0x5a>
		}
	}

	return 0;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3714      	adds	r7, #20
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	20000098 	.word	0x20000098

08002384 <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002394:	d103      	bne.n	800239e <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ff90 	bl	80022bc <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 800239c:	e003      	b.n	80023a6 <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f04f 32ff 	mov.w	r2, #4294967295
 80023a4:	611a      	str	r2, [r3, #16]
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <huansic_motor_init+0x1c>
 80023c0:	4b55      	ldr	r3, [pc, #340]	; (8002518 <huansic_motor_init+0x168>)
 80023c2:	4a56      	ldr	r2, [pc, #344]	; (800251c <huansic_motor_init+0x16c>)
 80023c4:	210c      	movs	r1, #12
 80023c6:	4856      	ldr	r0, [pc, #344]	; (8002520 <huansic_motor_init+0x170>)
 80023c8:	f006 fd6c 	bl	8008ea4 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d105      	bne.n	80023e0 <huansic_motor_init+0x30>
 80023d4:	4b53      	ldr	r3, [pc, #332]	; (8002524 <huansic_motor_init+0x174>)
 80023d6:	4a51      	ldr	r2, [pc, #324]	; (800251c <huansic_motor_init+0x16c>)
 80023d8:	210d      	movs	r1, #13
 80023da:	4851      	ldr	r0, [pc, #324]	; (8002520 <huansic_motor_init+0x170>)
 80023dc:	f006 fd62 	bl	8008ea4 <__assert_func>
	assert(hmotor->dt);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	f04f 0100 	mov.w	r1, #0
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fddd 	bl	8000fa8 <__aeabi_fcmpeq>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d005      	beq.n	8002400 <huansic_motor_init+0x50>
 80023f4:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <huansic_motor_init+0x178>)
 80023f6:	4a49      	ldr	r2, [pc, #292]	; (800251c <huansic_motor_init+0x16c>)
 80023f8:	210e      	movs	r1, #14
 80023fa:	4849      	ldr	r0, [pc, #292]	; (8002520 <huansic_motor_init+0x170>)
 80023fc:	f006 fd52 	bl	8008ea4 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	84da      	strh	r2, [r3, #38]	; 0x26
	hmotor->lastError = 0;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f04f 0200 	mov.w	r2, #0
 800240c:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f04f 0200 	mov.w	r2, #0
 8002414:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2200      	movs	r2, #0
 8002436:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2200      	movs	r2, #0
 8002448:	635a      	str	r2, [r3, #52]	; 0x34
 800244a:	e01c      	b.n	8002486 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d105      	bne.n	8002460 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2200      	movs	r2, #0
 800245c:	639a      	str	r2, [r3, #56]	; 0x38
 800245e:	e012      	b.n	8002486 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d105      	bne.n	8002474 <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2200      	movs	r2, #0
 8002470:	63da      	str	r2, [r3, #60]	; 0x3c
 8002472:	e008      	b.n	8002486 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	2b0c      	cmp	r3, #12
 800247a:	d104      	bne.n	8002486 <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2200      	movs	r2, #0
 8002484:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d026      	beq.n	80024dc <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d105      	bne.n	80024a2 <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2200      	movs	r2, #0
 800249e:	635a      	str	r2, [r3, #52]	; 0x34
 80024a0:	e01c      	b.n	80024dc <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d105      	bne.n	80024b6 <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2200      	movs	r2, #0
 80024b2:	639a      	str	r2, [r3, #56]	; 0x38
 80024b4:	e012      	b.n	80024dc <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	d105      	bne.n	80024ca <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2200      	movs	r2, #0
 80024c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80024c8:	e008      	b.n	80024dc <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b0c      	cmp	r3, #12
 80024d0:	d104      	bne.n	80024dc <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2200      	movs	r2, #0
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	213c      	movs	r1, #60	; 0x3c
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 ff58 	bl	8007398 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4619      	mov	r1, r3
 80024f2:	4610      	mov	r0, r2
 80024f4:	f004 fdf4 	bl	80070e0 <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689a      	ldr	r2, [r3, #8]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f004 fde8 	bl	80070e0 <HAL_TIM_PWM_Start>
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	0800a310 	.word	0x0800a310
 800251c:	0800a380 	.word	0x0800a380
 8002520:	0800a320 	.word	0x0800a320
 8002524:	0800a340 	.word	0x0800a340
 8002528:	0800a354 	.word	0x0800a354

0800252c <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 800252c:	b590      	push	{r4, r7, lr}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
	int16_t newTick = 0x0FFFF & hmotor->counter->Instance->CNT;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	82fb      	strh	r3, [r7, #22]
	if (hmotor->encoderInverted)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <huansic_motor_pid+0x24>
		newTick = -newTick;
 8002548:	8afb      	ldrh	r3, [r7, #22]
 800254a:	425b      	negs	r3, r3
 800254c:	b29b      	uxth	r3, r3
 800254e:	82fb      	strh	r3, [r7, #22]
	int16_t diffTick = newTick - hmotor->lastTick;
 8002550:	8afa      	ldrh	r2, [r7, #22]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	b29b      	uxth	r3, r3
 800255a:	82bb      	strh	r3, [r7, #20]

	hmotor->lastTick = newTick;
 800255c:	8afa      	ldrh	r2, [r7, #22]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	84da      	strh	r2, [r3, #38]	; 0x26

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 8002562:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fb36 	bl	8000bd8 <__aeabi_i2f>
 800256c:	4602      	mov	r2, r0
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f7fe fc37 	bl	8000de8 <__aeabi_fdiv>
 800257a:	4603      	mov	r3, r0
 800257c:	461a      	mov	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c
	//hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	4619      	mov	r1, r3
 8002590:	4610      	mov	r0, r2
 8002592:	f7fe fa6b 	bl	8000a6c <__aeabi_fsub>
 8002596:	4603      	mov	r3, r0
 8002598:	4619      	mov	r1, r3
 800259a:	4620      	mov	r0, r4
 800259c:	f7fe fa66 	bl	8000a6c <__aeabi_fsub>
 80025a0:	4603      	mov	r3, r0
 80025a2:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	4619      	mov	r1, r3
 80025ae:	4610      	mov	r0, r2
 80025b0:	f7fe fa5c 	bl	8000a6c <__aeabi_fsub>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461a      	mov	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	4619      	mov	r1, r3
 80025c6:	4610      	mov	r0, r2
 80025c8:	f7fe fa52 	bl	8000a70 <__addsf3>
 80025cc:	4603      	mov	r3, r0
 80025ce:	461a      	mov	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	695a      	ldr	r2, [r3, #20]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f7fe fb4e 	bl	8000c80 <__aeabi_fmul>
 80025e4:	4603      	mov	r3, r0
 80025e6:	461c      	mov	r4, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699a      	ldr	r2, [r3, #24]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025f0:	4619      	mov	r1, r3
 80025f2:	4610      	mov	r0, r2
 80025f4:	f7fe fb44 	bl	8000c80 <__aeabi_fmul>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4619      	mov	r1, r3
 80025fc:	4620      	mov	r0, r4
 80025fe:	f7fe fa37 	bl	8000a70 <__addsf3>
 8002602:	4603      	mov	r3, r0
 8002604:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69db      	ldr	r3, [r3, #28]
 800260a:	6939      	ldr	r1, [r7, #16]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fb37 	bl	8000c80 <__aeabi_fmul>
 8002612:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8002614:	4619      	mov	r1, r3
 8002616:	4620      	mov	r0, r4
 8002618:	f7fe fa2a 	bl	8000a70 <__addsf3>
 800261c:	4603      	mov	r3, r0
 800261e:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 8002620:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f7fe fce7 	bl	8000ff8 <__aeabi_fcmpgt>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d002      	beq.n	8002636 <huansic_motor_pid+0x10a>
 8002630:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002634:	e009      	b.n	800264a <huansic_motor_pid+0x11e>
 8002636:	4954      	ldr	r1, [pc, #336]	; (8002788 <huansic_motor_pid+0x25c>)
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7fe fcbf 	bl	8000fbc <__aeabi_fcmplt>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <huansic_motor_pid+0x11c>
 8002644:	4b50      	ldr	r3, [pc, #320]	; (8002788 <huansic_motor_pid+0x25c>)
 8002646:	e000      	b.n	800264a <huansic_motor_pid+0x11e>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 800264c:	f04f 0100 	mov.w	r1, #0
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7fe fcd1 	bl	8000ff8 <__aeabi_fcmpgt>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d019      	beq.n	8002690 <huansic_motor_pid+0x164>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fab0 	bl	8000bd0 <__aeabi_ui2f>
 8002670:	4603      	mov	r3, r0
 8002672:	4619      	mov	r1, r3
 8002674:	4620      	mov	r0, r4
 8002676:	f7fe fb03 	bl	8000c80 <__aeabi_fmul>
 800267a:	4603      	mov	r3, r0
 800267c:	4618      	mov	r0, r3
 800267e:	f007 fe15 	bl	800a2ac <roundf>
 8002682:	4603      	mov	r3, r0
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fcc1 	bl	800100c <__aeabi_f2uiz>
 800268a:	4603      	mov	r3, r0
 800268c:	b29b      	uxth	r3, r3
 800268e:	e000      	b.n	8002692 <huansic_motor_pid+0x166>
 8002690:	2300      	movs	r3, #0
 8002692:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 8002694:	f04f 0100 	mov.w	r1, #0
 8002698:	68f8      	ldr	r0, [r7, #12]
 800269a:	f7fe fc8f 	bl	8000fbc <__aeabi_fcmplt>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d019      	beq.n	80026d8 <huansic_motor_pid+0x1ac>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fa8c 	bl	8000bd0 <__aeabi_ui2f>
 80026b8:	4603      	mov	r3, r0
 80026ba:	4619      	mov	r1, r3
 80026bc:	4620      	mov	r0, r4
 80026be:	f7fe fadf 	bl	8000c80 <__aeabi_fmul>
 80026c2:	4603      	mov	r3, r0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f007 fdf1 	bl	800a2ac <roundf>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fe fc9d 	bl	800100c <__aeabi_f2uiz>
 80026d2:	4603      	mov	r3, r0
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	e000      	b.n	80026da <huansic_motor_pid+0x1ae>
 80026d8:	2300      	movs	r3, #0
 80026da:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d105      	bne.n	80026f0 <huansic_motor_pid+0x1c4>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	897a      	ldrh	r2, [r7, #10]
 80026ec:	635a      	str	r2, [r3, #52]	; 0x34
 80026ee:	e01c      	b.n	800272a <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d105      	bne.n	8002704 <huansic_motor_pid+0x1d8>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	897a      	ldrh	r2, [r7, #10]
 8002700:	639a      	str	r2, [r3, #56]	; 0x38
 8002702:	e012      	b.n	800272a <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d105      	bne.n	8002718 <huansic_motor_pid+0x1ec>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	897a      	ldrh	r2, [r7, #10]
 8002714:	63da      	str	r2, [r3, #60]	; 0x3c
 8002716:	e008      	b.n	800272a <huansic_motor_pid+0x1fe>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b0c      	cmp	r3, #12
 800271e:	d104      	bne.n	800272a <huansic_motor_pid+0x1fe>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	897a      	ldrh	r2, [r7, #10]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d026      	beq.n	8002780 <huansic_motor_pid+0x254>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <huansic_motor_pid+0x21a>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	893a      	ldrh	r2, [r7, #8]
 8002742:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8002744:	e01c      	b.n	8002780 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	2b04      	cmp	r3, #4
 800274c:	d105      	bne.n	800275a <huansic_motor_pid+0x22e>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	893a      	ldrh	r2, [r7, #8]
 8002756:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002758:	e012      	b.n	8002780 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b08      	cmp	r3, #8
 8002760:	d105      	bne.n	800276e <huansic_motor_pid+0x242>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	893a      	ldrh	r2, [r7, #8]
 800276a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800276c:	e008      	b.n	8002780 <huansic_motor_pid+0x254>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d104      	bne.n	8002780 <huansic_motor_pid+0x254>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	893a      	ldrh	r2, [r7, #8]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002780:	bf00      	nop
 8002782:	371c      	adds	r7, #28
 8002784:	46bd      	mov	sp, r7
 8002786:	bd90      	pop	{r4, r7, pc}
 8002788:	bf800000 	.word	0xbf800000

0800278c <custom_order_new_failed>:
extern float myCharge;				// current charge returned by Master

// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms

__weak void custom_order_new_failed(uint8_t id) {
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	4603      	mov	r3, r0
 8002794:	71fb      	strb	r3, [r7, #7]

}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	hxb->nextPackageLength = 6;		// header length
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2206      	movs	r2, #6
 80027ac:	725a      	strb	r2, [r3, #9]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6818      	ldr	r0, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f103 010a 	add.w	r1, r3, #10
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	7a5b      	ldrb	r3, [r3, #9]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	f005 fdee 	bl	80083a0 <HAL_UART_Receive_DMA>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <huansic_xb_decodeHeader>:

uint8_t huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	// checksum
	if (hxb->buffer[5]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	7bda      	ldrb	r2, [r3, #15]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7a99      	ldrb	r1, [r3, #10]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7adb      	ldrb	r3, [r3, #11]
 80027e0:	404b      	eors	r3, r1
 80027e2:	b2d9      	uxtb	r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	7b1b      	ldrb	r3, [r3, #12]
 80027e8:	404b      	eors	r3, r1
 80027ea:	b2d9      	uxtb	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	7b5b      	ldrb	r3, [r3, #13]
 80027f0:	404b      	eors	r3, r1
 80027f2:	b2d9      	uxtb	r1, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	7b9b      	ldrb	r3, [r3, #14]
 80027f8:	404b      	eors	r3, r1
 80027fa:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <huansic_xb_decodeHeader+0x38>
		return 0;
 8002800:	2300      	movs	r3, #0
 8002802:	e01d      	b.n	8002840 <huansic_xb_decodeHeader+0x74>

	// get and check packet ID
	if (hxb->buffer[0] != 0x01 && hxb->buffer[0] != 0x05)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7a9b      	ldrb	r3, [r3, #10]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d005      	beq.n	8002818 <huansic_xb_decodeHeader+0x4c>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7a9b      	ldrb	r3, [r3, #10]
 8002810:	2b05      	cmp	r3, #5
 8002812:	d001      	beq.n	8002818 <huansic_xb_decodeHeader+0x4c>
		return 0;
 8002814:	2300      	movs	r3, #0
 8002816:	e013      	b.n	8002840 <huansic_xb_decodeHeader+0x74>
	hxb->nextPackageID = hxb->buffer[0];
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	7a9a      	ldrb	r2, [r3, #10]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	721a      	strb	r2, [r3, #8]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	7b9a      	ldrb	r2, [r3, #14]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	725a      	strb	r2, [r3, #9]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6818      	ldr	r0, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f103 010a 	add.w	r1, r3, #10
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	7a5b      	ldrb	r3, [r3, #9]
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	f005 fdb1 	bl	80083a0 <HAL_UART_Receive_DMA>
	return 1;
 800283e:	2301      	movs	r3, #1
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}

08002848 <huansic_xb_decodeBody>:

void huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	76fb      	strb	r3, [r7, #27]
 8002854:	2300      	movs	r3, #0
 8002856:	777b      	strb	r3, [r7, #29]
	uint32_t temp;
	if (hxb->nextPackageID == 0x01) {		// game information
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	7a1b      	ldrb	r3, [r3, #8]
 800285c:	2b01      	cmp	r3, #1
 800285e:	f040 816d 	bne.w	8002b3c <huansic_xb_decodeBody+0x2f4>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8002862:	7f7b      	ldrb	r3, [r7, #29]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	777a      	strb	r2, [r7, #29]
 8002868:	461a      	mov	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	7a9a      	ldrb	r2, [r3, #10]
 8002870:	4b8c      	ldr	r3, [pc, #560]	; (8002aa4 <huansic_xb_decodeBody+0x25c>)
 8002872:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8002874:	7f7b      	ldrb	r3, [r7, #29]
 8002876:	3301      	adds	r3, #1
 8002878:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 800287a:	2300      	movs	r3, #0
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	e075      	b.n	800296c <huansic_xb_decodeBody+0x124>
			index += 2;
 8002880:	7f7b      	ldrb	r3, [r7, #29]
 8002882:	3302      	adds	r3, #2
 8002884:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index++] << 8;
 8002886:	7f7b      	ldrb	r3, [r7, #29]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	777a      	strb	r2, [r7, #29]
 800288c:	461a      	mov	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	7a9b      	ldrb	r3, [r3, #10]
 8002894:	021a      	lsls	r2, r3, #8
 8002896:	7ffb      	ldrb	r3, [r7, #31]
 8002898:	b211      	sxth	r1, r2
 800289a:	4a83      	ldr	r2, [pc, #524]	; (8002aa8 <huansic_xb_decodeBody+0x260>)
 800289c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index++];
 80028a0:	7f7b      	ldrb	r3, [r7, #29]
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	777a      	strb	r2, [r7, #29]
 80028a6:	461a      	mov	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4413      	add	r3, r2
 80028ac:	7a9a      	ldrb	r2, [r3, #10]
 80028ae:	7ffb      	ldrb	r3, [r7, #31]
 80028b0:	b211      	sxth	r1, r2
 80028b2:	4a7d      	ldr	r2, [pc, #500]	; (8002aa8 <huansic_xb_decodeBody+0x260>)
 80028b4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 80028b8:	7f7b      	ldrb	r3, [r7, #29]
 80028ba:	3302      	adds	r3, #2
 80028bc:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index++] << 8;
 80028be:	7f7b      	ldrb	r3, [r7, #29]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	777a      	strb	r2, [r7, #29]
 80028c4:	461a      	mov	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	7a9b      	ldrb	r3, [r3, #10]
 80028cc:	021a      	lsls	r2, r3, #8
 80028ce:	7ffb      	ldrb	r3, [r7, #31]
 80028d0:	b211      	sxth	r1, r2
 80028d2:	4a75      	ldr	r2, [pc, #468]	; (8002aa8 <huansic_xb_decodeBody+0x260>)
 80028d4:	00db      	lsls	r3, r3, #3
 80028d6:	4413      	add	r3, r2
 80028d8:	460a      	mov	r2, r1
 80028da:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 80028dc:	7f7b      	ldrb	r3, [r7, #29]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	7a9a      	ldrb	r2, [r3, #10]
 80028e4:	7ffb      	ldrb	r3, [r7, #31]
 80028e6:	b211      	sxth	r1, r2
 80028e8:	4a6f      	ldr	r2, [pc, #444]	; (8002aa8 <huansic_xb_decodeBody+0x260>)
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	460a      	mov	r2, r1
 80028f0:	805a      	strh	r2, [r3, #2]
			index += 2;
 80028f2:	7f7b      	ldrb	r3, [r7, #29]
 80028f4:	3302      	adds	r3, #2
 80028f6:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index++] << 8;
 80028f8:	7f7b      	ldrb	r3, [r7, #29]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	777a      	strb	r2, [r7, #29]
 80028fe:	461a      	mov	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4413      	add	r3, r2
 8002904:	7a9b      	ldrb	r3, [r3, #10]
 8002906:	021a      	lsls	r2, r3, #8
 8002908:	7ffb      	ldrb	r3, [r7, #31]
 800290a:	b211      	sxth	r1, r2
 800290c:	4a66      	ldr	r2, [pc, #408]	; (8002aa8 <huansic_xb_decodeBody+0x260>)
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	4413      	add	r3, r2
 8002912:	460a      	mov	r2, r1
 8002914:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8002916:	7f7b      	ldrb	r3, [r7, #29]
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4413      	add	r3, r2
 800291c:	7a9a      	ldrb	r2, [r3, #10]
 800291e:	7ffb      	ldrb	r3, [r7, #31]
 8002920:	b211      	sxth	r1, r2
 8002922:	4a61      	ldr	r2, [pc, #388]	; (8002aa8 <huansic_xb_decodeBody+0x260>)
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	460a      	mov	r2, r1
 800292a:	809a      	strh	r2, [r3, #4]
			index += 2;
 800292c:	7f7b      	ldrb	r3, [r7, #29]
 800292e:	3302      	adds	r3, #2
 8002930:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index++] << 8;
 8002932:	7f7b      	ldrb	r3, [r7, #29]
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	777a      	strb	r2, [r7, #29]
 8002938:	461a      	mov	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	7a9b      	ldrb	r3, [r3, #10]
 8002940:	021a      	lsls	r2, r3, #8
 8002942:	7ffb      	ldrb	r3, [r7, #31]
 8002944:	b211      	sxth	r1, r2
 8002946:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <huansic_xb_decodeBody+0x260>)
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4413      	add	r3, r2
 800294c:	460a      	mov	r2, r1
 800294e:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 8002950:	7f7b      	ldrb	r3, [r7, #29]
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	7a9a      	ldrb	r2, [r3, #10]
 8002958:	7ffb      	ldrb	r3, [r7, #31]
 800295a:	b211      	sxth	r1, r2
 800295c:	4a52      	ldr	r2, [pc, #328]	; (8002aa8 <huansic_xb_decodeBody+0x260>)
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	460a      	mov	r2, r1
 8002964:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 8002966:	7ffb      	ldrb	r3, [r7, #31]
 8002968:	3301      	adds	r3, #1
 800296a:	77fb      	strb	r3, [r7, #31]
 800296c:	7ffb      	ldrb	r3, [r7, #31]
 800296e:	2b04      	cmp	r3, #4
 8002970:	d986      	bls.n	8002880 <huansic_xb_decodeBody+0x38>
		}

		/* total time of this round */
		index++;
 8002972:	7f7b      	ldrb	r3, [r7, #29]
 8002974:	3301      	adds	r3, #1
 8002976:	777b      	strb	r3, [r7, #29]
		gameStageTimeLimit = hxb->buffer[index++];
 8002978:	7f7b      	ldrb	r3, [r7, #29]
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	777a      	strb	r2, [r7, #29]
 800297e:	461a      	mov	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4413      	add	r3, r2
 8002984:	7a9b      	ldrb	r3, [r3, #10]
 8002986:	461a      	mov	r2, r3
 8002988:	4b48      	ldr	r3, [pc, #288]	; (8002aac <huansic_xb_decodeBody+0x264>)
 800298a:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 800298c:	4b47      	ldr	r3, [pc, #284]	; (8002aac <huansic_xb_decodeBody+0x264>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	4a46      	ldr	r2, [pc, #280]	; (8002aac <huansic_xb_decodeBody+0x264>)
 8002994:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8002996:	7f7b      	ldrb	r3, [r7, #29]
 8002998:	1c5a      	adds	r2, r3, #1
 800299a:	777a      	strb	r2, [r7, #29]
 800299c:	461a      	mov	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	7a9b      	ldrb	r3, [r3, #10]
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b41      	ldr	r3, [pc, #260]	; (8002aac <huansic_xb_decodeBody+0x264>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	4a3f      	ldr	r2, [pc, #252]	; (8002aac <huansic_xb_decodeBody+0x264>)
 80029ae:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 80029b0:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <huansic_xb_decodeBody+0x264>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	021b      	lsls	r3, r3, #8
 80029b6:	4a3d      	ldr	r2, [pc, #244]	; (8002aac <huansic_xb_decodeBody+0x264>)
 80029b8:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 80029ba:	7f7b      	ldrb	r3, [r7, #29]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	777a      	strb	r2, [r7, #29]
 80029c0:	461a      	mov	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	7a9b      	ldrb	r3, [r3, #10]
 80029c8:	461a      	mov	r2, r3
 80029ca:	4b38      	ldr	r3, [pc, #224]	; (8002aac <huansic_xb_decodeBody+0x264>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	4a36      	ldr	r2, [pc, #216]	; (8002aac <huansic_xb_decodeBody+0x264>)
 80029d2:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 80029d4:	4b35      	ldr	r3, [pc, #212]	; (8002aac <huansic_xb_decodeBody+0x264>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	021b      	lsls	r3, r3, #8
 80029da:	4a34      	ldr	r2, [pc, #208]	; (8002aac <huansic_xb_decodeBody+0x264>)
 80029dc:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 80029de:	7f7b      	ldrb	r3, [r7, #29]
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	777a      	strb	r2, [r7, #29]
 80029e4:	461a      	mov	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4413      	add	r3, r2
 80029ea:	7a9b      	ldrb	r3, [r3, #10]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <huansic_xb_decodeBody+0x264>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	4a2d      	ldr	r2, [pc, #180]	; (8002aac <huansic_xb_decodeBody+0x264>)
 80029f6:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 80029f8:	7f7b      	ldrb	r3, [r7, #29]
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	4413      	add	r3, r2
 80029fe:	7a9b      	ldrb	r3, [r3, #10]
 8002a00:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002a02:	2300      	movs	r3, #0
 8002a04:	77fb      	strb	r3, [r7, #31]
 8002a06:	e03e      	b.n	8002a86 <huansic_xb_decodeBody+0x23e>
			index += 2;
 8002a08:	7f7b      	ldrb	r3, [r7, #29]
 8002a0a:	3302      	adds	r3, #2
 8002a0c:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8002a0e:	7f7b      	ldrb	r3, [r7, #29]
 8002a10:	1c5a      	adds	r2, r3, #1
 8002a12:	777a      	strb	r2, [r7, #29]
 8002a14:	461a      	mov	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	7a9b      	ldrb	r3, [r3, #10]
 8002a1c:	021a      	lsls	r2, r3, #8
 8002a1e:	7ffb      	ldrb	r3, [r7, #31]
 8002a20:	b211      	sxth	r1, r2
 8002a22:	4a23      	ldr	r2, [pc, #140]	; (8002ab0 <huansic_xb_decodeBody+0x268>)
 8002a24:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x = hxb->buffer[index++];
 8002a28:	7f7b      	ldrb	r3, [r7, #29]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	777a      	strb	r2, [r7, #29]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4413      	add	r3, r2
 8002a34:	7a9a      	ldrb	r2, [r3, #10]
 8002a36:	7ffb      	ldrb	r3, [r7, #31]
 8002a38:	b211      	sxth	r1, r2
 8002a3a:	4a1d      	ldr	r2, [pc, #116]	; (8002ab0 <huansic_xb_decodeBody+0x268>)
 8002a3c:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002a40:	7f7b      	ldrb	r3, [r7, #29]
 8002a42:	3302      	adds	r3, #2
 8002a44:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002a46:	7f7b      	ldrb	r3, [r7, #29]
 8002a48:	1c5a      	adds	r2, r3, #1
 8002a4a:	777a      	strb	r2, [r7, #29]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4413      	add	r3, r2
 8002a52:	7a9b      	ldrb	r3, [r3, #10]
 8002a54:	021a      	lsls	r2, r3, #8
 8002a56:	7ffb      	ldrb	r3, [r7, #31]
 8002a58:	b211      	sxth	r1, r2
 8002a5a:	4a15      	ldr	r2, [pc, #84]	; (8002ab0 <huansic_xb_decodeBody+0x268>)
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	460a      	mov	r2, r1
 8002a62:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y = hxb->buffer[index++];
 8002a64:	7f7b      	ldrb	r3, [r7, #29]
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	777a      	strb	r2, [r7, #29]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4413      	add	r3, r2
 8002a70:	7a9a      	ldrb	r2, [r3, #10]
 8002a72:	7ffb      	ldrb	r3, [r7, #31]
 8002a74:	b211      	sxth	r1, r2
 8002a76:	4a0e      	ldr	r2, [pc, #56]	; (8002ab0 <huansic_xb_decodeBody+0x268>)
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	460a      	mov	r2, r1
 8002a7e:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8002a80:	7ffb      	ldrb	r3, [r7, #31]
 8002a82:	3301      	adds	r3, #1
 8002a84:	77fb      	strb	r3, [r7, #31]
 8002a86:	7ffa      	ldrb	r2, [r7, #31]
 8002a88:	7efb      	ldrb	r3, [r7, #27]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d3bc      	bcc.n	8002a08 <huansic_xb_decodeBody+0x1c0>
		}

		/* opponent beacons */
		index++;
 8002a8e:	7f7b      	ldrb	r3, [r7, #29]
 8002a90:	3301      	adds	r3, #1
 8002a92:	777b      	strb	r3, [r7, #29]
		listLength = hxb->buffer[index];
 8002a94:	7f7b      	ldrb	r3, [r7, #29]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	4413      	add	r3, r2
 8002a9a:	7a9b      	ldrb	r3, [r3, #10]
 8002a9c:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	77fb      	strb	r3, [r7, #31]
 8002aa2:	e046      	b.n	8002b32 <huansic_xb_decodeBody+0x2ea>
 8002aa4:	20000b68 	.word	0x20000b68
 8002aa8:	20000b74 	.word	0x20000b74
 8002aac:	20000b6c 	.word	0x20000b6c
 8002ab0:	20000b9c 	.word	0x20000b9c
			index += 2;
 8002ab4:	7f7b      	ldrb	r3, [r7, #29]
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8002aba:	7f7b      	ldrb	r3, [r7, #29]
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	777a      	strb	r2, [r7, #29]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	7a9b      	ldrb	r3, [r3, #10]
 8002ac8:	021a      	lsls	r2, r3, #8
 8002aca:	7ffb      	ldrb	r3, [r7, #31]
 8002acc:	b211      	sxth	r1, r2
 8002ace:	4a9f      	ldr	r2, [pc, #636]	; (8002d4c <huansic_xb_decodeBody+0x504>)
 8002ad0:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x = hxb->buffer[index++];
 8002ad4:	7f7b      	ldrb	r3, [r7, #29]
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	777a      	strb	r2, [r7, #29]
 8002ada:	461a      	mov	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	7a9a      	ldrb	r2, [r3, #10]
 8002ae2:	7ffb      	ldrb	r3, [r7, #31]
 8002ae4:	b211      	sxth	r1, r2
 8002ae6:	4a99      	ldr	r2, [pc, #612]	; (8002d4c <huansic_xb_decodeBody+0x504>)
 8002ae8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8002aec:	7f7b      	ldrb	r3, [r7, #29]
 8002aee:	3302      	adds	r3, #2
 8002af0:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002af2:	7f7b      	ldrb	r3, [r7, #29]
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	777a      	strb	r2, [r7, #29]
 8002af8:	461a      	mov	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4413      	add	r3, r2
 8002afe:	7a9b      	ldrb	r3, [r3, #10]
 8002b00:	021a      	lsls	r2, r3, #8
 8002b02:	7ffb      	ldrb	r3, [r7, #31]
 8002b04:	b211      	sxth	r1, r2
 8002b06:	4a91      	ldr	r2, [pc, #580]	; (8002d4c <huansic_xb_decodeBody+0x504>)
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8002b10:	7f7b      	ldrb	r3, [r7, #29]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	777a      	strb	r2, [r7, #29]
 8002b16:	461a      	mov	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	7a9a      	ldrb	r2, [r3, #10]
 8002b1e:	7ffb      	ldrb	r3, [r7, #31]
 8002b20:	b211      	sxth	r1, r2
 8002b22:	4a8a      	ldr	r2, [pc, #552]	; (8002d4c <huansic_xb_decodeBody+0x504>)
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	4413      	add	r3, r2
 8002b28:	460a      	mov	r2, r1
 8002b2a:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8002b2c:	7ffb      	ldrb	r3, [r7, #31]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	77fb      	strb	r3, [r7, #31]
 8002b32:	7ffa      	ldrb	r2, [r7, #31]
 8002b34:	7efb      	ldrb	r3, [r7, #27]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d3bc      	bcc.n	8002ab4 <huansic_xb_decodeBody+0x26c>
 8002b3a:	e31a      	b.n	8003172 <huansic_xb_decodeBody+0x92a>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7a1b      	ldrb	r3, [r3, #8]
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	f040 8316 	bne.w	8003172 <huansic_xb_decodeBody+0x92a>
		/* game status */
		gameStatus = hxb->buffer[index++];
 8002b46:	7f7b      	ldrb	r3, [r7, #29]
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	777a      	strb	r2, [r7, #29]
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	7a9a      	ldrb	r2, [r3, #10]
 8002b54:	4b7e      	ldr	r3, [pc, #504]	; (8002d50 <huansic_xb_decodeBody+0x508>)
 8002b56:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 8002b58:	7f7b      	ldrb	r3, [r7, #29]
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	777a      	strb	r2, [r7, #29]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	7a9b      	ldrb	r3, [r3, #10]
 8002b66:	461a      	mov	r2, r3
 8002b68:	4b7a      	ldr	r3, [pc, #488]	; (8002d54 <huansic_xb_decodeBody+0x50c>)
 8002b6a:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 8002b6c:	4b79      	ldr	r3, [pc, #484]	; (8002d54 <huansic_xb_decodeBody+0x50c>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	4a78      	ldr	r2, [pc, #480]	; (8002d54 <huansic_xb_decodeBody+0x50c>)
 8002b74:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8002b76:	7f7b      	ldrb	r3, [r7, #29]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	777a      	strb	r2, [r7, #29]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	7a9b      	ldrb	r3, [r3, #10]
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b73      	ldr	r3, [pc, #460]	; (8002d54 <huansic_xb_decodeBody+0x50c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	4a71      	ldr	r2, [pc, #452]	; (8002d54 <huansic_xb_decodeBody+0x50c>)
 8002b8e:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8002b90:	4b70      	ldr	r3, [pc, #448]	; (8002d54 <huansic_xb_decodeBody+0x50c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	021b      	lsls	r3, r3, #8
 8002b96:	4a6f      	ldr	r2, [pc, #444]	; (8002d54 <huansic_xb_decodeBody+0x50c>)
 8002b98:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8002b9a:	7f7b      	ldrb	r3, [r7, #29]
 8002b9c:	1c5a      	adds	r2, r3, #1
 8002b9e:	777a      	strb	r2, [r7, #29]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	7a9b      	ldrb	r3, [r3, #10]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	4b6a      	ldr	r3, [pc, #424]	; (8002d54 <huansic_xb_decodeBody+0x50c>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	4a68      	ldr	r2, [pc, #416]	; (8002d54 <huansic_xb_decodeBody+0x50c>)
 8002bb2:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8002bb4:	4b67      	ldr	r3, [pc, #412]	; (8002d54 <huansic_xb_decodeBody+0x50c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	021b      	lsls	r3, r3, #8
 8002bba:	4a66      	ldr	r2, [pc, #408]	; (8002d54 <huansic_xb_decodeBody+0x50c>)
 8002bbc:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8002bbe:	7f7b      	ldrb	r3, [r7, #29]
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	777a      	strb	r2, [r7, #29]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4413      	add	r3, r2
 8002bca:	7a9b      	ldrb	r3, [r3, #10]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4b61      	ldr	r3, [pc, #388]	; (8002d54 <huansic_xb_decodeBody+0x50c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	4a5f      	ldr	r2, [pc, #380]	; (8002d54 <huansic_xb_decodeBody+0x50c>)
 8002bd6:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 8002bd8:	4b5f      	ldr	r3, [pc, #380]	; (8002d58 <huansic_xb_decodeBody+0x510>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b5d      	ldr	r3, [pc, #372]	; (8002d54 <huansic_xb_decodeBody+0x50c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	4a5e      	ldr	r2, [pc, #376]	; (8002d5c <huansic_xb_decodeBody+0x514>)
 8002be4:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 8002be6:	7f7b      	ldrb	r3, [r7, #29]
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	777a      	strb	r2, [r7, #29]
 8002bec:	461a      	mov	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	7a9b      	ldrb	r3, [r3, #10]
 8002bf4:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002bfc:	7f7b      	ldrb	r3, [r7, #29]
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	777a      	strb	r2, [r7, #29]
 8002c02:	461a      	mov	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4413      	add	r3, r2
 8002c08:	7a9b      	ldrb	r3, [r3, #10]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002c18:	7f7b      	ldrb	r3, [r7, #29]
 8002c1a:	1c5a      	adds	r2, r3, #1
 8002c1c:	777a      	strb	r2, [r7, #29]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4413      	add	r3, r2
 8002c24:	7a9b      	ldrb	r3, [r3, #10]
 8002c26:	461a      	mov	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002c34:	7f7b      	ldrb	r3, [r7, #29]
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	777a      	strb	r2, [r7, #29]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4413      	add	r3, r2
 8002c40:	7a9b      	ldrb	r3, [r3, #10]
 8002c42:	461a      	mov	r2, r3
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 8002c4a:	f107 0310 	add.w	r3, r7, #16
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a43      	ldr	r2, [pc, #268]	; (8002d60 <huansic_xb_decodeBody+0x518>)
 8002c52:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 2;
 8002c54:	7f7b      	ldrb	r3, [r7, #29]
 8002c56:	3302      	adds	r3, #2
 8002c58:	777b      	strb	r3, [r7, #29]
		myCoord.x = (uint16_t) hxb->buffer[index++] << 8;
 8002c5a:	7f7b      	ldrb	r3, [r7, #29]
 8002c5c:	1c5a      	adds	r2, r3, #1
 8002c5e:	777a      	strb	r2, [r7, #29]
 8002c60:	461a      	mov	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4413      	add	r3, r2
 8002c66:	7a9b      	ldrb	r3, [r3, #10]
 8002c68:	021b      	lsls	r3, r3, #8
 8002c6a:	b21a      	sxth	r2, r3
 8002c6c:	4b3d      	ldr	r3, [pc, #244]	; (8002d64 <huansic_xb_decodeBody+0x51c>)
 8002c6e:	801a      	strh	r2, [r3, #0]
		myCoord.x = hxb->buffer[index++];
 8002c70:	7f7b      	ldrb	r3, [r7, #29]
 8002c72:	1c5a      	adds	r2, r3, #1
 8002c74:	777a      	strb	r2, [r7, #29]
 8002c76:	461a      	mov	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	7a9b      	ldrb	r3, [r3, #10]
 8002c7e:	b21a      	sxth	r2, r3
 8002c80:	4b38      	ldr	r3, [pc, #224]	; (8002d64 <huansic_xb_decodeBody+0x51c>)
 8002c82:	801a      	strh	r2, [r3, #0]
		index += 2;
 8002c84:	7f7b      	ldrb	r3, [r7, #29]
 8002c86:	3302      	adds	r3, #2
 8002c88:	777b      	strb	r3, [r7, #29]
		myCoord.y = (uint16_t) hxb->buffer[index++] << 8;
 8002c8a:	7f7b      	ldrb	r3, [r7, #29]
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	777a      	strb	r2, [r7, #29]
 8002c90:	461a      	mov	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	7a9b      	ldrb	r3, [r3, #10]
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	b21a      	sxth	r2, r3
 8002c9c:	4b31      	ldr	r3, [pc, #196]	; (8002d64 <huansic_xb_decodeBody+0x51c>)
 8002c9e:	805a      	strh	r2, [r3, #2]
		myCoord.y = hxb->buffer[index++];
 8002ca0:	7f7b      	ldrb	r3, [r7, #29]
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	777a      	strb	r2, [r7, #29]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4413      	add	r3, r2
 8002cac:	7a9b      	ldrb	r3, [r3, #10]
 8002cae:	b21a      	sxth	r2, r3
 8002cb0:	4b2c      	ldr	r3, [pc, #176]	; (8002d64 <huansic_xb_decodeBody+0x51c>)
 8002cb2:	805a      	strh	r2, [r3, #2]

		/* fetch battery */
		temp = hxb->buffer[index++];
 8002cb4:	7f7b      	ldrb	r3, [r7, #29]
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	777a      	strb	r2, [r7, #29]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	7a9b      	ldrb	r3, [r3, #10]
 8002cc2:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002cca:	7f7b      	ldrb	r3, [r7, #29]
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	777a      	strb	r2, [r7, #29]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	7a9b      	ldrb	r3, [r3, #10]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002ce6:	7f7b      	ldrb	r3, [r7, #29]
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	777a      	strb	r2, [r7, #29]
 8002cec:	461a      	mov	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	7a9b      	ldrb	r3, [r3, #10]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	021b      	lsls	r3, r3, #8
 8002d00:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002d02:	7f7b      	ldrb	r3, [r7, #29]
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	777a      	strb	r2, [r7, #29]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	7a9b      	ldrb	r3, [r3, #10]
 8002d10:	461a      	mov	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 8002d18:	f107 0310 	add.w	r3, r7, #16
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <huansic_xb_decodeBody+0x520>)
 8002d20:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <huansic_xb_decodeBody+0x524>)
 8002d24:	f107 0308 	add.w	r3, r7, #8
 8002d28:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d2c:	6018      	str	r0, [r3, #0]
 8002d2e:	3304      	adds	r3, #4
 8002d30:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 8002d36:	7f7b      	ldrb	r3, [r7, #29]
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	777a      	strb	r2, [r7, #29]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4413      	add	r3, r2
 8002d42:	7a9b      	ldrb	r3, [r3, #10]
 8002d44:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002d46:	2300      	movs	r3, #0
 8002d48:	77fb      	strb	r3, [r7, #31]
 8002d4a:	e0fd      	b.n	8002f48 <huansic_xb_decodeBody+0x700>
 8002d4c:	20000ba8 	.word	0x20000ba8
 8002d50:	20000b69 	.word	0x20000b69
 8002d54:	20000b70 	.word	0x20000b70
 8002d58:	20000b6c 	.word	0x20000b6c
 8002d5c:	20000bd8 	.word	0x20000bd8
 8002d60:	20000bd0 	.word	0x20000bd0
 8002d64:	20000bc8 	.word	0x20000bc8
 8002d68:	20000bd4 	.word	0x20000bd4
 8002d6c:	0800a360 	.word	0x0800a360
			temp = hxb->buffer[index + 24];
 8002d70:	7f7b      	ldrb	r3, [r7, #29]
 8002d72:	3318      	adds	r3, #24
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	4413      	add	r3, r2
 8002d78:	7a9b      	ldrb	r3, [r3, #10]
 8002d7a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	021b      	lsls	r3, r3, #8
 8002d80:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 25];
 8002d82:	7f7b      	ldrb	r3, [r7, #29]
 8002d84:	3319      	adds	r3, #25
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	4413      	add	r3, r2
 8002d8a:	7a9b      	ldrb	r3, [r3, #10]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 26];
 8002d9a:	7f7b      	ldrb	r3, [r7, #29]
 8002d9c:	331a      	adds	r3, #26
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	7a9b      	ldrb	r3, [r3, #10]
 8002da4:	461a      	mov	r2, r3
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	021b      	lsls	r3, r3, #8
 8002db0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 27];
 8002db2:	7f7b      	ldrb	r3, [r7, #29]
 8002db4:	331b      	adds	r3, #27
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4413      	add	r3, r2
 8002dba:	7a9b      	ldrb	r3, [r3, #10]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	b25b      	sxtb	r3, r3
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fa81 	bl	80022d0 <huansic_order_new>
 8002dce:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d108      	bne.n	8002de8 <huansic_xb_decodeBody+0x5a0>
				index += 28;
 8002dd6:	7f7b      	ldrb	r3, [r7, #29]
 8002dd8:	331c      	adds	r3, #28
 8002dda:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7ff fcd3 	bl	800278c <custom_order_new_failed>
				continue;
 8002de6:	e0ac      	b.n	8002f42 <huansic_xb_decodeBody+0x6fa>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002de8:	7f7b      	ldrb	r3, [r7, #29]
 8002dea:	3302      	adds	r3, #2
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	4413      	add	r3, r2
 8002df0:	7a9b      	ldrb	r3, [r3, #10]
 8002df2:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 8002df4:	b21a      	sxth	r2, r3
 8002df6:	7f7b      	ldrb	r3, [r7, #29]
 8002df8:	3303      	adds	r3, #3
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	440b      	add	r3, r1
 8002dfe:	7a9b      	ldrb	r3, [r3, #10]
 8002e00:	b21b      	sxth	r3, r3
 8002e02:	4313      	orrs	r3, r2
 8002e04:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002e0a:	7f7b      	ldrb	r3, [r7, #29]
 8002e0c:	3306      	adds	r3, #6
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4413      	add	r3, r2
 8002e12:	7a9b      	ldrb	r3, [r3, #10]
 8002e14:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 8002e16:	b21a      	sxth	r2, r3
 8002e18:	7f7b      	ldrb	r3, [r7, #29]
 8002e1a:	3307      	adds	r3, #7
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	440b      	add	r3, r1
 8002e20:	7a9b      	ldrb	r3, [r3, #10]
 8002e22:	b21b      	sxth	r3, r3
 8002e24:	4313      	orrs	r3, r2
 8002e26:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8002e2c:	7f7b      	ldrb	r3, [r7, #29]
 8002e2e:	330a      	adds	r3, #10
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	4413      	add	r3, r2
 8002e34:	7a9b      	ldrb	r3, [r3, #10]
 8002e36:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 8002e38:	b21a      	sxth	r2, r3
 8002e3a:	7f7b      	ldrb	r3, [r7, #29]
 8002e3c:	330b      	adds	r3, #11
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	440b      	add	r3, r1
 8002e42:	7a9b      	ldrb	r3, [r3, #10]
 8002e44:	b21b      	sxth	r3, r3
 8002e46:	4313      	orrs	r3, r2
 8002e48:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002e4e:	7f7b      	ldrb	r3, [r7, #29]
 8002e50:	330e      	adds	r3, #14
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	7a9b      	ldrb	r3, [r3, #10]
 8002e58:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 8002e5a:	b21a      	sxth	r2, r3
 8002e5c:	7f7b      	ldrb	r3, [r7, #29]
 8002e5e:	330f      	adds	r3, #15
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	440b      	add	r3, r1
 8002e64:	7a9b      	ldrb	r3, [r3, #10]
 8002e66:	b21b      	sxth	r3, r3
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 8002e70:	7f7b      	ldrb	r3, [r7, #29]
 8002e72:	3310      	adds	r3, #16
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	4413      	add	r3, r2
 8002e78:	7a9b      	ldrb	r3, [r3, #10]
 8002e7a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 8002e82:	7f7b      	ldrb	r3, [r7, #29]
 8002e84:	3311      	adds	r3, #17
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	4413      	add	r3, r2
 8002e8a:	7a9b      	ldrb	r3, [r3, #10]
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 8002e9a:	7f7b      	ldrb	r3, [r7, #29]
 8002e9c:	3312      	adds	r3, #18
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	7a9b      	ldrb	r3, [r3, #10]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	021b      	lsls	r3, r3, #8
 8002eb0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 8002eb2:	7f7b      	ldrb	r3, [r7, #29]
 8002eb4:	3313      	adds	r3, #19
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4413      	add	r3, r2
 8002eba:	7a9b      	ldrb	r3, [r3, #10]
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8002eca:	7f7b      	ldrb	r3, [r7, #29]
 8002ecc:	3314      	adds	r3, #20
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	7a9b      	ldrb	r3, [r3, #10]
 8002ed4:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	021b      	lsls	r3, r3, #8
 8002eda:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 8002edc:	7f7b      	ldrb	r3, [r7, #29]
 8002ede:	3315      	adds	r3, #21
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	7a9b      	ldrb	r3, [r3, #10]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	021b      	lsls	r3, r3, #8
 8002ef2:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 8002ef4:	7f7b      	ldrb	r3, [r7, #29]
 8002ef6:	3316      	adds	r3, #22
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	4413      	add	r3, r2
 8002efc:	7a9b      	ldrb	r3, [r3, #10]
 8002efe:	461a      	mov	r2, r3
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 8002f0c:	7f7b      	ldrb	r3, [r7, #29]
 8002f0e:	3317      	adds	r3, #23
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	7a9b      	ldrb	r3, [r3, #10]
 8002f16:	461a      	mov	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 8002f1e:	f107 0310 	add.w	r3, r7, #16
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 28;
 8002f28:	7f7b      	ldrb	r3, [r7, #29]
 8002f2a:	331c      	adds	r3, #28
 8002f2c:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	691a      	ldr	r2, [r3, #16]
 8002f32:	7f3b      	ldrb	r3, [r7, #28]
 8002f34:	1c59      	adds	r1, r3, #1
 8002f36:	7739      	strb	r1, [r7, #28]
 8002f38:	b252      	sxtb	r2, r2
 8002f3a:	3320      	adds	r3, #32
 8002f3c:	443b      	add	r3, r7
 8002f3e:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 8002f42:	7ffb      	ldrb	r3, [r7, #31]
 8002f44:	3301      	adds	r3, #1
 8002f46:	77fb      	strb	r3, [r7, #31]
 8002f48:	7ffa      	ldrb	r2, [r7, #31]
 8002f4a:	7efb      	ldrb	r3, [r7, #27]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	f4ff af0f 	bcc.w	8002d70 <huansic_xb_decodeBody+0x528>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	77fb      	strb	r3, [r7, #31]
 8002f56:	e02d      	b.n	8002fb4 <huansic_xb_decodeBody+0x76c>
			if (delivering[i]->id != -1) {
 8002f58:	7ffb      	ldrb	r3, [r7, #31]
 8002f5a:	4a90      	ldr	r2, [pc, #576]	; (800319c <huansic_xb_decodeBody+0x954>)
 8002f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f66:	d022      	beq.n	8002fae <huansic_xb_decodeBody+0x766>
				for (j = 0; i < updatedOrderIndex; j++)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	77bb      	strb	r3, [r7, #30]
 8002f6c:	e011      	b.n	8002f92 <huansic_xb_decodeBody+0x74a>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 8002f6e:	7ffb      	ldrb	r3, [r7, #31]
 8002f70:	4a8a      	ldr	r2, [pc, #552]	; (800319c <huansic_xb_decodeBody+0x954>)
 8002f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	7fba      	ldrb	r2, [r7, #30]
 8002f7a:	3220      	adds	r2, #32
 8002f7c:	443a      	add	r2, r7
 8002f7e:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d102      	bne.n	8002f8c <huansic_xb_decodeBody+0x744>
						j = 255;
 8002f86:	23ff      	movs	r3, #255	; 0xff
 8002f88:	77bb      	strb	r3, [r7, #30]
						break;
 8002f8a:	e006      	b.n	8002f9a <huansic_xb_decodeBody+0x752>
				for (j = 0; i < updatedOrderIndex; j++)
 8002f8c:	7fbb      	ldrb	r3, [r7, #30]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	77bb      	strb	r3, [r7, #30]
 8002f92:	7ffa      	ldrb	r2, [r7, #31]
 8002f94:	7f3b      	ldrb	r3, [r7, #28]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d3e9      	bcc.n	8002f6e <huansic_xb_decodeBody+0x726>
					}
				if (j != 255)
 8002f9a:	7fbb      	ldrb	r3, [r7, #30]
 8002f9c:	2bff      	cmp	r3, #255	; 0xff
 8002f9e:	d006      	beq.n	8002fae <huansic_xb_decodeBody+0x766>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 8002fa0:	7ffb      	ldrb	r3, [r7, #31]
 8002fa2:	4a7e      	ldr	r2, [pc, #504]	; (800319c <huansic_xb_decodeBody+0x954>)
 8002fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff f9eb 	bl	8002384 <huansic_order_delete>
		for (i = 0; i < 5; i++)
 8002fae:	7ffb      	ldrb	r3, [r7, #31]
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	77fb      	strb	r3, [r7, #31]
 8002fb4:	7ffb      	ldrb	r3, [r7, #31]
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d9ce      	bls.n	8002f58 <huansic_xb_decodeBody+0x710>
			}

		/* record latest order */
		temp = hxb->buffer[index + 24];
 8002fba:	7f7b      	ldrb	r3, [r7, #29]
 8002fbc:	3318      	adds	r3, #24
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	7a9b      	ldrb	r3, [r3, #10]
 8002fc4:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 25];
 8002fcc:	7f7b      	ldrb	r3, [r7, #29]
 8002fce:	3319      	adds	r3, #25
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	7a9b      	ldrb	r3, [r3, #10]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 26];
 8002fe4:	7f7b      	ldrb	r3, [r7, #29]
 8002fe6:	331a      	adds	r3, #26
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4413      	add	r3, r2
 8002fec:	7a9b      	ldrb	r3, [r3, #10]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	021b      	lsls	r3, r3, #8
 8002ffa:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 27];
 8002ffc:	7f7b      	ldrb	r3, [r7, #29]
 8002ffe:	331b      	adds	r3, #27
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	7a9b      	ldrb	r3, [r3, #10]
 8003006:	461a      	mov	r2, r3
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	b25b      	sxtb	r3, r3
 8003012:	4618      	mov	r0, r3
 8003014:	f7ff f95c 	bl	80022d0 <huansic_order_new>
 8003018:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d108      	bne.n	8003032 <huansic_xb_decodeBody+0x7ea>
			index += 28;
 8003020:	7f7b      	ldrb	r3, [r7, #29]
 8003022:	331c      	adds	r3, #28
 8003024:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff fbae 	bl	800278c <custom_order_new_failed>
 8003030:	e09f      	b.n	8003172 <huansic_xb_decodeBody+0x92a>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8003032:	7f7b      	ldrb	r3, [r7, #29]
 8003034:	3302      	adds	r3, #2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	7a9b      	ldrb	r3, [r3, #10]
 800303c:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 800303e:	b21a      	sxth	r2, r3
 8003040:	7f7b      	ldrb	r3, [r7, #29]
 8003042:	3303      	adds	r3, #3
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	440b      	add	r3, r1
 8003048:	7a9b      	ldrb	r3, [r3, #10]
 800304a:	b21b      	sxth	r3, r3
 800304c:	4313      	orrs	r3, r2
 800304e:	b21a      	sxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8003054:	7f7b      	ldrb	r3, [r7, #29]
 8003056:	3306      	adds	r3, #6
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	4413      	add	r3, r2
 800305c:	7a9b      	ldrb	r3, [r3, #10]
 800305e:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 8003060:	b21a      	sxth	r2, r3
 8003062:	7f7b      	ldrb	r3, [r7, #29]
 8003064:	3307      	adds	r3, #7
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	440b      	add	r3, r1
 800306a:	7a9b      	ldrb	r3, [r3, #10]
 800306c:	b21b      	sxth	r3, r3
 800306e:	4313      	orrs	r3, r2
 8003070:	b21a      	sxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	805a      	strh	r2, [r3, #2]
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8003076:	7f7b      	ldrb	r3, [r7, #29]
 8003078:	330a      	adds	r3, #10
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	4413      	add	r3, r2
 800307e:	7a9b      	ldrb	r3, [r3, #10]
 8003080:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 8003082:	b21a      	sxth	r2, r3
 8003084:	7f7b      	ldrb	r3, [r7, #29]
 8003086:	330b      	adds	r3, #11
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	440b      	add	r3, r1
 800308c:	7a9b      	ldrb	r3, [r3, #10]
 800308e:	b21b      	sxth	r3, r3
 8003090:	4313      	orrs	r3, r2
 8003092:	b21a      	sxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8003098:	7f7b      	ldrb	r3, [r7, #29]
 800309a:	330e      	adds	r3, #14
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	4413      	add	r3, r2
 80030a0:	7a9b      	ldrb	r3, [r3, #10]
 80030a2:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 80030a4:	b21a      	sxth	r2, r3
 80030a6:	7f7b      	ldrb	r3, [r7, #29]
 80030a8:	330f      	adds	r3, #15
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	440b      	add	r3, r1
 80030ae:	7a9b      	ldrb	r3, [r3, #10]
 80030b0:	b21b      	sxth	r3, r3
 80030b2:	4313      	orrs	r3, r2
 80030b4:	b21a      	sxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 80030ba:	7f7b      	ldrb	r3, [r7, #29]
 80030bc:	3310      	adds	r3, #16
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4413      	add	r3, r2
 80030c2:	7a9b      	ldrb	r3, [r3, #10]
 80030c4:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	021b      	lsls	r3, r3, #8
 80030ca:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 80030cc:	7f7b      	ldrb	r3, [r7, #29]
 80030ce:	3311      	adds	r3, #17
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	4413      	add	r3, r2
 80030d4:	7a9b      	ldrb	r3, [r3, #10]
 80030d6:	461a      	mov	r2, r3
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 80030e4:	7f7b      	ldrb	r3, [r7, #29]
 80030e6:	3312      	adds	r3, #18
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	4413      	add	r3, r2
 80030ec:	7a9b      	ldrb	r3, [r3, #10]
 80030ee:	461a      	mov	r2, r3
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	021b      	lsls	r3, r3, #8
 80030fa:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 80030fc:	7f7b      	ldrb	r3, [r7, #29]
 80030fe:	3313      	adds	r3, #19
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4413      	add	r3, r2
 8003104:	7a9b      	ldrb	r3, [r3, #10]
 8003106:	461a      	mov	r2, r3
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8003114:	7f7b      	ldrb	r3, [r7, #29]
 8003116:	3314      	adds	r3, #20
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	7a9b      	ldrb	r3, [r3, #10]
 800311e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	021b      	lsls	r3, r3, #8
 8003124:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 8003126:	7f7b      	ldrb	r3, [r7, #29]
 8003128:	3315      	adds	r3, #21
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4413      	add	r3, r2
 800312e:	7a9b      	ldrb	r3, [r3, #10]
 8003130:	461a      	mov	r2, r3
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4313      	orrs	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	021b      	lsls	r3, r3, #8
 800313c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 800313e:	7f7b      	ldrb	r3, [r7, #29]
 8003140:	3316      	adds	r3, #22
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	4413      	add	r3, r2
 8003146:	7a9b      	ldrb	r3, [r3, #10]
 8003148:	461a      	mov	r2, r3
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 8003156:	7f7b      	ldrb	r3, [r7, #29]
 8003158:	3317      	adds	r3, #23
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	7a9b      	ldrb	r3, [r3, #10]
 8003160:	461a      	mov	r2, r3
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 8003168:	f107 0310 	add.w	r3, r7, #16
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	615a      	str	r2, [r3, #20]
		}
	}

	// set up next DMA
	hxb->nextPackageLength = 6;		// header length
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2206      	movs	r2, #6
 8003176:	725a      	strb	r2, [r3, #9]
	hxb->nextPackageID = 0x00;		// the next one is header
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6818      	ldr	r0, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f103 010a 	add.w	r1, r3, #10
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7a5b      	ldrb	r3, [r3, #9]
 800318c:	b29b      	uxth	r3, r3
 800318e:	461a      	mov	r2, r3
 8003190:	f005 f906 	bl	80083a0 <HAL_UART_Receive_DMA>
}
 8003194:	bf00      	nop
 8003196:	3720      	adds	r7, #32
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000bb4 	.word	0x20000bb4

080031a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

 	HAL_Init();
 80031a6:	f001 fe5b 	bl	8004e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031aa:	f000 f89b 	bl	80032e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031ae:	f000 fc95 	bl	8003adc <MX_GPIO_Init>
  MX_DMA_Init();
 80031b2:	f000 fc6d 	bl	8003a90 <MX_DMA_Init>
  MX_I2C1_Init();
 80031b6:	f000 f8db 	bl	8003370 <MX_I2C1_Init>
  MX_TIM1_Init();
 80031ba:	f000 f907 	bl	80033cc <MX_TIM1_Init>
  MX_TIM2_Init();
 80031be:	f000 f9c9 	bl	8003554 <MX_TIM2_Init>
  MX_TIM3_Init();
 80031c2:	f000 fa1b 	bl	80035fc <MX_TIM3_Init>
  MX_TIM4_Init();
 80031c6:	f000 fa6d 	bl	80036a4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80031ca:	f000 fabf 	bl	800374c <MX_TIM5_Init>
  MX_TIM8_Init();
 80031ce:	f000 fb47 	bl	8003860 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80031d2:	f000 fc09 	bl	80039e8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80031d6:	f000 fc31 	bl	8003a3c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 80031da:	f000 fb0b 	bl	80037f4 <MX_TIM6_Init>
  ssd1306_Init();
 80031de:	f000 fff1 	bl	80041c4 <ssd1306_Init>
  /* USER CODE BEGIN 2 */
    //Motor init
	cmotor_lf.encoderInverted = 1;
 80031e2:	4b34      	ldr	r3, [pc, #208]	; (80032b4 <main+0x114>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.encoderInverted = 1;
 80031ea:	4b33      	ldr	r3, [pc, #204]	; (80032b8 <main+0x118>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	HUAN_MOTOR1_Init();
 80031f2:	f000 fcc9 	bl	8003b88 <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 80031f6:	f000 fcfb 	bl	8003bf0 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 80031fa:	f000 fd2d 	bl	8003c58 <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 80031fe:	f000 fd5f 	bl	8003cc0 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 8003202:	f000 fd91 	bl	8003d28 <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 8003206:	f000 fd9d 	bl	8003d44 <HUAN_ZIGBEE_Init>
	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	//Set PID timer after data stables
	HAL_Delay(20);
 800320a:	2014      	movs	r0, #20
 800320c:	f001 fe8a 	bl	8004f24 <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 8003210:	482a      	ldr	r0, [pc, #168]	; (80032bc <main+0x11c>)
 8003212:	f003 fead 	bl	8006f70 <HAL_TIM_Base_Start_IT>

	initangleZ = himu.theta[2];
 8003216:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <main+0x120>)
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	4a2a      	ldr	r2, [pc, #168]	; (80032c4 <main+0x124>)
 800321c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	sprintf(firstLine, "Good");
 800321e:	492a      	ldr	r1, [pc, #168]	; (80032c8 <main+0x128>)
 8003220:	482a      	ldr	r0, [pc, #168]	; (80032cc <main+0x12c>)
 8003222:	f006 f99d 	bl	8009560 <siprintf>
	ssd1306_WriteString(firstLine, Font_6x8, White);
 8003226:	4a2a      	ldr	r2, [pc, #168]	; (80032d0 <main+0x130>)
 8003228:	2301      	movs	r3, #1
 800322a:	ca06      	ldmia	r2, {r1, r2}
 800322c:	4827      	ldr	r0, [pc, #156]	; (80032cc <main+0x12c>)
 800322e:	f001 f957 	bl	80044e0 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003232:	f001 f853 	bl	80042dc <ssd1306_UpdateScreen>
	myCoord.x = 45;
 8003236:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <main+0x134>)
 8003238:	222d      	movs	r2, #45	; 0x2d
 800323a:	801a      	strh	r2, [r3, #0]
	myCoord.y = 45;
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <main+0x134>)
 800323e:	222d      	movs	r2, #45	; 0x2d
 8003240:	805a      	strh	r2, [r3, #2]
	Coordinate goal;
	goal.x = 210;
 8003242:	23d2      	movs	r3, #210	; 0xd2
 8003244:	803b      	strh	r3, [r7, #0]
	goal.y = 210;
 8003246:	23d2      	movs	r3, #210	; 0xd2
 8003248:	807b      	strh	r3, [r7, #2]
	uint8_t flag = mingyan_pathfind_avoidObstacle(&myCoord, &goal);
 800324a:	463b      	mov	r3, r7
 800324c:	4619      	mov	r1, r3
 800324e:	4821      	ldr	r0, [pc, #132]	; (80032d4 <main+0x134>)
 8003250:	f7fe fd0a 	bl	8001c68 <mingyan_pathfind_avoidObstacle>
 8003254:	4603      	mov	r3, r0
 8003256:	71fb      	strb	r3, [r7, #7]
//		HAL_Delay(1000);
//		chao_move_angle(270, 2000);

//    	isArrived = GotoDestination(goal); //暂时不用管，还没有调通
//    	if (isArrived == 1) break;
		while(!gameStatus){		// if the game is not running
 8003258:	bf00      	nop
 800325a:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <main+0x138>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <main+0xd8>
	    	LED1_ON;
 8003262:	2201      	movs	r2, #1
 8003264:	2101      	movs	r1, #1
 8003266:	481d      	ldr	r0, [pc, #116]	; (80032dc <main+0x13c>)
 8003268:	f002 fda4 	bl	8005db4 <HAL_GPIO_WritePin>
			break;
 800326c:	bf00      	nop
		}

		while (gameStage == 0) {		// pre-match
 800326e:	e003      	b.n	8003278 <main+0xd8>
			if (!gameStatus)	// if the game stopped
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <main+0x138>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d004      	beq.n	8003282 <main+0xe2>
		while (gameStage == 0) {		// pre-match
 8003278:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <main+0x140>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0f7      	beq.n	8003270 <main+0xd0>
 8003280:	e005      	b.n	800328e <main+0xee>
				break;
 8003282:	bf00      	nop
			// do some initialization

			// find angle offset
		}

		while (gameStage == 1){			// first-half
 8003284:	e003      	b.n	800328e <main+0xee>
			if (!gameStatus)	// if the game stopped
 8003286:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <main+0x138>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d004      	beq.n	8003298 <main+0xf8>
		while (gameStage == 1){			// first-half
 800328e:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <main+0x140>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d0f7      	beq.n	8003286 <main+0xe6>
 8003296:	e005      	b.n	80032a4 <main+0x104>
				break;
 8003298:	bf00      	nop

		}

		while (gameStage == 2){			// second-half
 800329a:	e003      	b.n	80032a4 <main+0x104>
			if (!gameStatus)	// if the game stopped
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <main+0x138>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d004      	beq.n	80032ae <main+0x10e>
		while (gameStage == 2){			// second-half
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <main+0x140>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d0f7      	beq.n	800329c <main+0xfc>
 80032ac:	e7d4      	b.n	8003258 <main+0xb8>
				break;
 80032ae:	bf00      	nop
		while(!gameStatus){		// if the game is not running
 80032b0:	e7d2      	b.n	8003258 <main+0xb8>
 80032b2:	bf00      	nop
 80032b4:	20000994 	.word	0x20000994
 80032b8:	20000a0c 	.word	0x20000a0c
 80032bc:	200007f4 	.word	0x200007f4
 80032c0:	20000a84 	.word	0x20000a84
 80032c4:	20000bcc 	.word	0x20000bcc
 80032c8:	0800a368 	.word	0x0800a368
 80032cc:	20000bdc 	.word	0x20000bdc
 80032d0:	20000004 	.word	0x20000004
 80032d4:	20000bc8 	.word	0x20000bc8
 80032d8:	20000b69 	.word	0x20000b69
 80032dc:	40010c00 	.word	0x40010c00
 80032e0:	20000b68 	.word	0x20000b68

080032e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b090      	sub	sp, #64	; 0x40
 80032e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ea:	f107 0318 	add.w	r3, r7, #24
 80032ee:	2228      	movs	r2, #40	; 0x28
 80032f0:	2100      	movs	r1, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	f005 fe3e 	bl	8008f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032f8:	1d3b      	adds	r3, r7, #4
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	605a      	str	r2, [r3, #4]
 8003300:	609a      	str	r2, [r3, #8]
 8003302:	60da      	str	r2, [r3, #12]
 8003304:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003306:	2301      	movs	r3, #1
 8003308:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800330a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800330e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8003310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003314:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003316:	2301      	movs	r3, #1
 8003318:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800331a:	2302      	movs	r3, #2
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800331e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003322:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003324:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003328:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800332a:	f107 0318 	add.w	r3, r7, #24
 800332e:	4618      	mov	r0, r3
 8003330:	f003 f9b2 	bl	8006698 <HAL_RCC_OscConfig>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800333a:	f000 fd49 	bl	8003dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800333e:	230f      	movs	r3, #15
 8003340:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003342:	2302      	movs	r3, #2
 8003344:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800334a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800334e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003354:	1d3b      	adds	r3, r7, #4
 8003356:	2102      	movs	r1, #2
 8003358:	4618      	mov	r0, r3
 800335a:	f003 fc1f 	bl	8006b9c <HAL_RCC_ClockConfig>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8003364:	f000 fd34 	bl	8003dd0 <Error_Handler>
  }
}
 8003368:	bf00      	nop
 800336a:	3740      	adds	r7, #64	; 0x40
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003374:	4b12      	ldr	r3, [pc, #72]	; (80033c0 <MX_I2C1_Init+0x50>)
 8003376:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <MX_I2C1_Init+0x54>)
 8003378:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <MX_I2C1_Init+0x50>)
 800337c:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <MX_I2C1_Init+0x58>)
 800337e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003380:	4b0f      	ldr	r3, [pc, #60]	; (80033c0 <MX_I2C1_Init+0x50>)
 8003382:	2200      	movs	r2, #0
 8003384:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003386:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <MX_I2C1_Init+0x50>)
 8003388:	2200      	movs	r2, #0
 800338a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800338c:	4b0c      	ldr	r3, [pc, #48]	; (80033c0 <MX_I2C1_Init+0x50>)
 800338e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003392:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003394:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <MX_I2C1_Init+0x50>)
 8003396:	2200      	movs	r2, #0
 8003398:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800339a:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <MX_I2C1_Init+0x50>)
 800339c:	2200      	movs	r2, #0
 800339e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033a0:	4b07      	ldr	r3, [pc, #28]	; (80033c0 <MX_I2C1_Init+0x50>)
 80033a2:	2200      	movs	r2, #0
 80033a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <MX_I2C1_Init+0x50>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80033ac:	4804      	ldr	r0, [pc, #16]	; (80033c0 <MX_I2C1_Init+0x50>)
 80033ae:	f002 fd19 	bl	8005de4 <HAL_I2C_Init>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80033b8:	f000 fd0a 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	20000638 	.word	0x20000638
 80033c4:	40005400 	.word	0x40005400
 80033c8:	000186a0 	.word	0x000186a0

080033cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b096      	sub	sp, #88	; 0x58
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	605a      	str	r2, [r3, #4]
 80033dc:	609a      	str	r2, [r3, #8]
 80033de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ee:	2200      	movs	r2, #0
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	605a      	str	r2, [r3, #4]
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	60da      	str	r2, [r3, #12]
 80033f8:	611a      	str	r2, [r3, #16]
 80033fa:	615a      	str	r2, [r3, #20]
 80033fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033fe:	1d3b      	adds	r3, r7, #4
 8003400:	2220      	movs	r2, #32
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f005 fdb5 	bl	8008f74 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800340a:	4b50      	ldr	r3, [pc, #320]	; (800354c <MX_TIM1_Init+0x180>)
 800340c:	4a50      	ldr	r2, [pc, #320]	; (8003550 <MX_TIM1_Init+0x184>)
 800340e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003410:	4b4e      	ldr	r3, [pc, #312]	; (800354c <MX_TIM1_Init+0x180>)
 8003412:	2200      	movs	r2, #0
 8003414:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003416:	4b4d      	ldr	r3, [pc, #308]	; (800354c <MX_TIM1_Init+0x180>)
 8003418:	2200      	movs	r2, #0
 800341a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800341c:	4b4b      	ldr	r3, [pc, #300]	; (800354c <MX_TIM1_Init+0x180>)
 800341e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003422:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003424:	4b49      	ldr	r3, [pc, #292]	; (800354c <MX_TIM1_Init+0x180>)
 8003426:	2200      	movs	r2, #0
 8003428:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800342a:	4b48      	ldr	r3, [pc, #288]	; (800354c <MX_TIM1_Init+0x180>)
 800342c:	2200      	movs	r2, #0
 800342e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003430:	4b46      	ldr	r3, [pc, #280]	; (800354c <MX_TIM1_Init+0x180>)
 8003432:	2200      	movs	r2, #0
 8003434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003436:	4845      	ldr	r0, [pc, #276]	; (800354c <MX_TIM1_Init+0x180>)
 8003438:	f003 fd4a 	bl	8006ed0 <HAL_TIM_Base_Init>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003442:	f000 fcc5 	bl	8003dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800344a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800344c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003450:	4619      	mov	r1, r3
 8003452:	483e      	ldr	r0, [pc, #248]	; (800354c <MX_TIM1_Init+0x180>)
 8003454:	f004 f9f4 	bl	8007840 <HAL_TIM_ConfigClockSource>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800345e:	f000 fcb7 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003462:	483a      	ldr	r0, [pc, #232]	; (800354c <MX_TIM1_Init+0x180>)
 8003464:	f003 fde4 	bl	8007030 <HAL_TIM_PWM_Init>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d001      	beq.n	8003472 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800346e:	f000 fcaf 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003472:	2300      	movs	r3, #0
 8003474:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003476:	2300      	movs	r3, #0
 8003478:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800347a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800347e:	4619      	mov	r1, r3
 8003480:	4832      	ldr	r0, [pc, #200]	; (800354c <MX_TIM1_Init+0x180>)
 8003482:	f004 fdaf 	bl	8007fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800348c:	f000 fca0 	bl	8003dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003490:	2360      	movs	r3, #96	; 0x60
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003498:	2300      	movs	r3, #0
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800349c:	2300      	movs	r3, #0
 800349e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80034a4:	2300      	movs	r3, #0
 80034a6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80034a8:	2300      	movs	r3, #0
 80034aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034b0:	2200      	movs	r2, #0
 80034b2:	4619      	mov	r1, r3
 80034b4:	4825      	ldr	r0, [pc, #148]	; (800354c <MX_TIM1_Init+0x180>)
 80034b6:	f004 f905 	bl	80076c4 <HAL_TIM_PWM_ConfigChannel>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80034c0:	f000 fc86 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c8:	2204      	movs	r2, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	481f      	ldr	r0, [pc, #124]	; (800354c <MX_TIM1_Init+0x180>)
 80034ce:	f004 f8f9 	bl	80076c4 <HAL_TIM_PWM_ConfigChannel>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80034d8:	f000 fc7a 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e0:	2208      	movs	r2, #8
 80034e2:	4619      	mov	r1, r3
 80034e4:	4819      	ldr	r0, [pc, #100]	; (800354c <MX_TIM1_Init+0x180>)
 80034e6:	f004 f8ed 	bl	80076c4 <HAL_TIM_PWM_ConfigChannel>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d001      	beq.n	80034f4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80034f0:	f000 fc6e 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80034f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f8:	220c      	movs	r2, #12
 80034fa:	4619      	mov	r1, r3
 80034fc:	4813      	ldr	r0, [pc, #76]	; (800354c <MX_TIM1_Init+0x180>)
 80034fe:	f004 f8e1 	bl	80076c4 <HAL_TIM_PWM_ConfigChannel>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8003508:	f000 fc62 	bl	8003dd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800350c:	2300      	movs	r3, #0
 800350e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003510:	2300      	movs	r3, #0
 8003512:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003514:	2300      	movs	r3, #0
 8003516:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003524:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003526:	2300      	movs	r3, #0
 8003528:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800352a:	1d3b      	adds	r3, r7, #4
 800352c:	4619      	mov	r1, r3
 800352e:	4807      	ldr	r0, [pc, #28]	; (800354c <MX_TIM1_Init+0x180>)
 8003530:	f004 fdc4 	bl	80080bc <HAL_TIMEx_ConfigBreakDeadTime>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 800353a:	f000 fc49 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800353e:	4803      	ldr	r0, [pc, #12]	; (800354c <MX_TIM1_Init+0x180>)
 8003540:	f001 f9e6 	bl	8004910 <HAL_TIM_MspPostInit>

}
 8003544:	bf00      	nop
 8003546:	3758      	adds	r7, #88	; 0x58
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	2000068c 	.word	0x2000068c
 8003550:	40012c00 	.word	0x40012c00

08003554 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08c      	sub	sp, #48	; 0x30
 8003558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800355a:	f107 030c 	add.w	r3, r7, #12
 800355e:	2224      	movs	r2, #36	; 0x24
 8003560:	2100      	movs	r1, #0
 8003562:	4618      	mov	r0, r3
 8003564:	f005 fd06 	bl	8008f74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003568:	1d3b      	adds	r3, r7, #4
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003570:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <MX_TIM2_Init+0xa4>)
 8003572:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003576:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003578:	4b1f      	ldr	r3, [pc, #124]	; (80035f8 <MX_TIM2_Init+0xa4>)
 800357a:	2200      	movs	r2, #0
 800357c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800357e:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <MX_TIM2_Init+0xa4>)
 8003580:	2200      	movs	r2, #0
 8003582:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8003584:	4b1c      	ldr	r3, [pc, #112]	; (80035f8 <MX_TIM2_Init+0xa4>)
 8003586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800358a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800358c:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <MX_TIM2_Init+0xa4>)
 800358e:	2200      	movs	r2, #0
 8003590:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003592:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <MX_TIM2_Init+0xa4>)
 8003594:	2200      	movs	r2, #0
 8003596:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8003598:	2301      	movs	r3, #1
 800359a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800359c:	2300      	movs	r3, #0
 800359e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035a0:	2301      	movs	r3, #1
 80035a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80035ac:	2300      	movs	r3, #0
 80035ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035b0:	2301      	movs	r3, #1
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035b4:	2300      	movs	r3, #0
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80035bc:	f107 030c 	add.w	r3, r7, #12
 80035c0:	4619      	mov	r1, r3
 80035c2:	480d      	ldr	r0, [pc, #52]	; (80035f8 <MX_TIM2_Init+0xa4>)
 80035c4:	f003 fe46 	bl	8007254 <HAL_TIM_Encoder_Init>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80035ce:	f000 fbff 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80035da:	1d3b      	adds	r3, r7, #4
 80035dc:	4619      	mov	r1, r3
 80035de:	4806      	ldr	r0, [pc, #24]	; (80035f8 <MX_TIM2_Init+0xa4>)
 80035e0:	f004 fd00 	bl	8007fe4 <HAL_TIMEx_MasterConfigSynchronization>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80035ea:	f000 fbf1 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80035ee:	bf00      	nop
 80035f0:	3730      	adds	r7, #48	; 0x30
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	200006d4 	.word	0x200006d4

080035fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b08c      	sub	sp, #48	; 0x30
 8003600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003602:	f107 030c 	add.w	r3, r7, #12
 8003606:	2224      	movs	r2, #36	; 0x24
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f005 fcb2 	bl	8008f74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003610:	1d3b      	adds	r3, r7, #4
 8003612:	2200      	movs	r2, #0
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003618:	4b20      	ldr	r3, [pc, #128]	; (800369c <MX_TIM3_Init+0xa0>)
 800361a:	4a21      	ldr	r2, [pc, #132]	; (80036a0 <MX_TIM3_Init+0xa4>)
 800361c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800361e:	4b1f      	ldr	r3, [pc, #124]	; (800369c <MX_TIM3_Init+0xa0>)
 8003620:	2200      	movs	r2, #0
 8003622:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <MX_TIM3_Init+0xa0>)
 8003626:	2200      	movs	r2, #0
 8003628:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800362a:	4b1c      	ldr	r3, [pc, #112]	; (800369c <MX_TIM3_Init+0xa0>)
 800362c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003630:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003632:	4b1a      	ldr	r3, [pc, #104]	; (800369c <MX_TIM3_Init+0xa0>)
 8003634:	2200      	movs	r2, #0
 8003636:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003638:	4b18      	ldr	r3, [pc, #96]	; (800369c <MX_TIM3_Init+0xa0>)
 800363a:	2200      	movs	r2, #0
 800363c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800363e:	2301      	movs	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003642:	2300      	movs	r3, #0
 8003644:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003646:	2301      	movs	r3, #1
 8003648:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003652:	2300      	movs	r3, #0
 8003654:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003656:	2301      	movs	r3, #1
 8003658:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800365a:	2300      	movs	r3, #0
 800365c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800365e:	2300      	movs	r3, #0
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003662:	f107 030c 	add.w	r3, r7, #12
 8003666:	4619      	mov	r1, r3
 8003668:	480c      	ldr	r0, [pc, #48]	; (800369c <MX_TIM3_Init+0xa0>)
 800366a:	f003 fdf3 	bl	8007254 <HAL_TIM_Encoder_Init>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8003674:	f000 fbac 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003678:	2300      	movs	r3, #0
 800367a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800367c:	2300      	movs	r3, #0
 800367e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003680:	1d3b      	adds	r3, r7, #4
 8003682:	4619      	mov	r1, r3
 8003684:	4805      	ldr	r0, [pc, #20]	; (800369c <MX_TIM3_Init+0xa0>)
 8003686:	f004 fcad 	bl	8007fe4 <HAL_TIMEx_MasterConfigSynchronization>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8003690:	f000 fb9e 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003694:	bf00      	nop
 8003696:	3730      	adds	r7, #48	; 0x30
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	2000071c 	.word	0x2000071c
 80036a0:	40000400 	.word	0x40000400

080036a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b08c      	sub	sp, #48	; 0x30
 80036a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80036aa:	f107 030c 	add.w	r3, r7, #12
 80036ae:	2224      	movs	r2, #36	; 0x24
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f005 fc5e 	bl	8008f74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036b8:	1d3b      	adds	r3, r7, #4
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80036c0:	4b20      	ldr	r3, [pc, #128]	; (8003744 <MX_TIM4_Init+0xa0>)
 80036c2:	4a21      	ldr	r2, [pc, #132]	; (8003748 <MX_TIM4_Init+0xa4>)
 80036c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80036c6:	4b1f      	ldr	r3, [pc, #124]	; (8003744 <MX_TIM4_Init+0xa0>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036cc:	4b1d      	ldr	r3, [pc, #116]	; (8003744 <MX_TIM4_Init+0xa0>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80036d2:	4b1c      	ldr	r3, [pc, #112]	; (8003744 <MX_TIM4_Init+0xa0>)
 80036d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036d8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036da:	4b1a      	ldr	r3, [pc, #104]	; (8003744 <MX_TIM4_Init+0xa0>)
 80036dc:	2200      	movs	r2, #0
 80036de:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e0:	4b18      	ldr	r3, [pc, #96]	; (8003744 <MX_TIM4_Init+0xa0>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80036e6:	2301      	movs	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80036ea:	2300      	movs	r3, #0
 80036ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80036ee:	2301      	movs	r3, #1
 80036f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80036fa:	2300      	movs	r3, #0
 80036fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80036fe:	2301      	movs	r3, #1
 8003700:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003702:	2300      	movs	r3, #0
 8003704:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800370a:	f107 030c 	add.w	r3, r7, #12
 800370e:	4619      	mov	r1, r3
 8003710:	480c      	ldr	r0, [pc, #48]	; (8003744 <MX_TIM4_Init+0xa0>)
 8003712:	f003 fd9f 	bl	8007254 <HAL_TIM_Encoder_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800371c:	f000 fb58 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003720:	2300      	movs	r3, #0
 8003722:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	4619      	mov	r1, r3
 800372c:	4805      	ldr	r0, [pc, #20]	; (8003744 <MX_TIM4_Init+0xa0>)
 800372e:	f004 fc59 	bl	8007fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8003738:	f000 fb4a 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800373c:	bf00      	nop
 800373e:	3730      	adds	r7, #48	; 0x30
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000764 	.word	0x20000764
 8003748:	40000800 	.word	0x40000800

0800374c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08c      	sub	sp, #48	; 0x30
 8003750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003752:	f107 030c 	add.w	r3, r7, #12
 8003756:	2224      	movs	r2, #36	; 0x24
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f005 fc0a 	bl	8008f74 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003760:	1d3b      	adds	r3, r7, #4
 8003762:	2200      	movs	r2, #0
 8003764:	601a      	str	r2, [r3, #0]
 8003766:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003768:	4b20      	ldr	r3, [pc, #128]	; (80037ec <MX_TIM5_Init+0xa0>)
 800376a:	4a21      	ldr	r2, [pc, #132]	; (80037f0 <MX_TIM5_Init+0xa4>)
 800376c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800376e:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <MX_TIM5_Init+0xa0>)
 8003770:	2200      	movs	r2, #0
 8003772:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003774:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <MX_TIM5_Init+0xa0>)
 8003776:	2200      	movs	r2, #0
 8003778:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800377a:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <MX_TIM5_Init+0xa0>)
 800377c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003780:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003782:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <MX_TIM5_Init+0xa0>)
 8003784:	2200      	movs	r2, #0
 8003786:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003788:	4b18      	ldr	r3, [pc, #96]	; (80037ec <MX_TIM5_Init+0xa0>)
 800378a:	2200      	movs	r2, #0
 800378c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800378e:	2301      	movs	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003792:	2300      	movs	r3, #0
 8003794:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003796:	2301      	movs	r3, #1
 8003798:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800379a:	2300      	movs	r3, #0
 800379c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800379e:	2300      	movs	r3, #0
 80037a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80037a2:	2300      	movs	r3, #0
 80037a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037a6:	2301      	movs	r3, #1
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037aa:	2300      	movs	r3, #0
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80037b2:	f107 030c 	add.w	r3, r7, #12
 80037b6:	4619      	mov	r1, r3
 80037b8:	480c      	ldr	r0, [pc, #48]	; (80037ec <MX_TIM5_Init+0xa0>)
 80037ba:	f003 fd4b 	bl	8007254 <HAL_TIM_Encoder_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80037c4:	f000 fb04 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037c8:	2300      	movs	r3, #0
 80037ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80037d0:	1d3b      	adds	r3, r7, #4
 80037d2:	4619      	mov	r1, r3
 80037d4:	4805      	ldr	r0, [pc, #20]	; (80037ec <MX_TIM5_Init+0xa0>)
 80037d6:	f004 fc05 	bl	8007fe4 <HAL_TIMEx_MasterConfigSynchronization>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80037e0:	f000 faf6 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80037e4:	bf00      	nop
 80037e6:	3730      	adds	r7, #48	; 0x30
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	200007ac 	.word	0x200007ac
 80037f0:	40000c00 	.word	0x40000c00

080037f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037fa:	463b      	mov	r3, r7
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
 8003800:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003802:	4b15      	ldr	r3, [pc, #84]	; (8003858 <MX_TIM6_Init+0x64>)
 8003804:	4a15      	ldr	r2, [pc, #84]	; (800385c <MX_TIM6_Init+0x68>)
 8003806:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8003808:	4b13      	ldr	r3, [pc, #76]	; (8003858 <MX_TIM6_Init+0x64>)
 800380a:	2247      	movs	r2, #71	; 0x47
 800380c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800380e:	4b12      	ldr	r3, [pc, #72]	; (8003858 <MX_TIM6_Init+0x64>)
 8003810:	2200      	movs	r2, #0
 8003812:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 8003814:	4b10      	ldr	r3, [pc, #64]	; (8003858 <MX_TIM6_Init+0x64>)
 8003816:	f24c 3250 	movw	r2, #50000	; 0xc350
 800381a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800381c:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <MX_TIM6_Init+0x64>)
 800381e:	2200      	movs	r2, #0
 8003820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003822:	480d      	ldr	r0, [pc, #52]	; (8003858 <MX_TIM6_Init+0x64>)
 8003824:	f003 fb54 	bl	8006ed0 <HAL_TIM_Base_Init>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800382e:	f000 facf 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003832:	2300      	movs	r3, #0
 8003834:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003836:	2300      	movs	r3, #0
 8003838:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800383a:	463b      	mov	r3, r7
 800383c:	4619      	mov	r1, r3
 800383e:	4806      	ldr	r0, [pc, #24]	; (8003858 <MX_TIM6_Init+0x64>)
 8003840:	f004 fbd0 	bl	8007fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800384a:	f000 fac1 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	200007f4 	.word	0x200007f4
 800385c:	40001000 	.word	0x40001000

08003860 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b096      	sub	sp, #88	; 0x58
 8003864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003866:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	605a      	str	r2, [r3, #4]
 8003870:	609a      	str	r2, [r3, #8]
 8003872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003874:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800387e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	605a      	str	r2, [r3, #4]
 8003888:	609a      	str	r2, [r3, #8]
 800388a:	60da      	str	r2, [r3, #12]
 800388c:	611a      	str	r2, [r3, #16]
 800388e:	615a      	str	r2, [r3, #20]
 8003890:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003892:	1d3b      	adds	r3, r7, #4
 8003894:	2220      	movs	r2, #32
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f005 fb6b 	bl	8008f74 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800389e:	4b50      	ldr	r3, [pc, #320]	; (80039e0 <MX_TIM8_Init+0x180>)
 80038a0:	4a50      	ldr	r2, [pc, #320]	; (80039e4 <MX_TIM8_Init+0x184>)
 80038a2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80038a4:	4b4e      	ldr	r3, [pc, #312]	; (80039e0 <MX_TIM8_Init+0x180>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038aa:	4b4d      	ldr	r3, [pc, #308]	; (80039e0 <MX_TIM8_Init+0x180>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80038b0:	4b4b      	ldr	r3, [pc, #300]	; (80039e0 <MX_TIM8_Init+0x180>)
 80038b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038b6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038b8:	4b49      	ldr	r3, [pc, #292]	; (80039e0 <MX_TIM8_Init+0x180>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80038be:	4b48      	ldr	r3, [pc, #288]	; (80039e0 <MX_TIM8_Init+0x180>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038c4:	4b46      	ldr	r3, [pc, #280]	; (80039e0 <MX_TIM8_Init+0x180>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80038ca:	4845      	ldr	r0, [pc, #276]	; (80039e0 <MX_TIM8_Init+0x180>)
 80038cc:	f003 fb00 	bl	8006ed0 <HAL_TIM_Base_Init>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80038d6:	f000 fa7b 	bl	8003dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038de:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80038e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038e4:	4619      	mov	r1, r3
 80038e6:	483e      	ldr	r0, [pc, #248]	; (80039e0 <MX_TIM8_Init+0x180>)
 80038e8:	f003 ffaa 	bl	8007840 <HAL_TIM_ConfigClockSource>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80038f2:	f000 fa6d 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80038f6:	483a      	ldr	r0, [pc, #232]	; (80039e0 <MX_TIM8_Init+0x180>)
 80038f8:	f003 fb9a 	bl	8007030 <HAL_TIM_PWM_Init>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8003902:	f000 fa65 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003906:	2300      	movs	r3, #0
 8003908:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800390a:	2300      	movs	r3, #0
 800390c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800390e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003912:	4619      	mov	r1, r3
 8003914:	4832      	ldr	r0, [pc, #200]	; (80039e0 <MX_TIM8_Init+0x180>)
 8003916:	f004 fb65 	bl	8007fe4 <HAL_TIMEx_MasterConfigSynchronization>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8003920:	f000 fa56 	bl	8003dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003924:	2360      	movs	r3, #96	; 0x60
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800392c:	2300      	movs	r3, #0
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003930:	2300      	movs	r3, #0
 8003932:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003934:	2300      	movs	r3, #0
 8003936:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003938:	2300      	movs	r3, #0
 800393a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800393c:	2300      	movs	r3, #0
 800393e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003944:	2200      	movs	r2, #0
 8003946:	4619      	mov	r1, r3
 8003948:	4825      	ldr	r0, [pc, #148]	; (80039e0 <MX_TIM8_Init+0x180>)
 800394a:	f003 febb 	bl	80076c4 <HAL_TIM_PWM_ConfigChannel>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8003954:	f000 fa3c 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800395c:	2204      	movs	r2, #4
 800395e:	4619      	mov	r1, r3
 8003960:	481f      	ldr	r0, [pc, #124]	; (80039e0 <MX_TIM8_Init+0x180>)
 8003962:	f003 feaf 	bl	80076c4 <HAL_TIM_PWM_ConfigChannel>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800396c:	f000 fa30 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003974:	2208      	movs	r2, #8
 8003976:	4619      	mov	r1, r3
 8003978:	4819      	ldr	r0, [pc, #100]	; (80039e0 <MX_TIM8_Init+0x180>)
 800397a:	f003 fea3 	bl	80076c4 <HAL_TIM_PWM_ConfigChannel>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8003984:	f000 fa24 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800398c:	220c      	movs	r2, #12
 800398e:	4619      	mov	r1, r3
 8003990:	4813      	ldr	r0, [pc, #76]	; (80039e0 <MX_TIM8_Init+0x180>)
 8003992:	f003 fe97 	bl	80076c4 <HAL_TIM_PWM_ConfigChannel>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d001      	beq.n	80039a0 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 800399c:	f000 fa18 	bl	8003dd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80039be:	1d3b      	adds	r3, r7, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4807      	ldr	r0, [pc, #28]	; (80039e0 <MX_TIM8_Init+0x180>)
 80039c4:	f004 fb7a 	bl	80080bc <HAL_TIMEx_ConfigBreakDeadTime>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80039ce:	f000 f9ff 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80039d2:	4803      	ldr	r0, [pc, #12]	; (80039e0 <MX_TIM8_Init+0x180>)
 80039d4:	f000 ff9c 	bl	8004910 <HAL_TIM_MspPostInit>

}
 80039d8:	bf00      	nop
 80039da:	3758      	adds	r7, #88	; 0x58
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	2000083c 	.word	0x2000083c
 80039e4:	40013400 	.word	0x40013400

080039e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <MX_USART2_UART_Init+0x4c>)
 80039ee:	4a12      	ldr	r2, [pc, #72]	; (8003a38 <MX_USART2_UART_Init+0x50>)
 80039f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039f2:	4b10      	ldr	r3, [pc, #64]	; (8003a34 <MX_USART2_UART_Init+0x4c>)
 80039f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039fa:	4b0e      	ldr	r3, [pc, #56]	; (8003a34 <MX_USART2_UART_Init+0x4c>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <MX_USART2_UART_Init+0x4c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a06:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <MX_USART2_UART_Init+0x4c>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <MX_USART2_UART_Init+0x4c>)
 8003a0e:	220c      	movs	r2, #12
 8003a10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <MX_USART2_UART_Init+0x4c>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a18:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <MX_USART2_UART_Init+0x4c>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003a1e:	4805      	ldr	r0, [pc, #20]	; (8003a34 <MX_USART2_UART_Init+0x4c>)
 8003a20:	f004 fbaf 	bl	8008182 <HAL_UART_Init>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003a2a:	f000 f9d1 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	20000884 	.word	0x20000884
 8003a38:	40004400 	.word	0x40004400

08003a3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003a40:	4b11      	ldr	r3, [pc, #68]	; (8003a88 <MX_USART3_UART_Init+0x4c>)
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <MX_USART3_UART_Init+0x50>)
 8003a44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003a46:	4b10      	ldr	r3, [pc, #64]	; (8003a88 <MX_USART3_UART_Init+0x4c>)
 8003a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003a4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003a4e:	4b0e      	ldr	r3, [pc, #56]	; (8003a88 <MX_USART3_UART_Init+0x4c>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <MX_USART3_UART_Init+0x4c>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003a5a:	4b0b      	ldr	r3, [pc, #44]	; (8003a88 <MX_USART3_UART_Init+0x4c>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <MX_USART3_UART_Init+0x4c>)
 8003a62:	220c      	movs	r2, #12
 8003a64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a66:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <MX_USART3_UART_Init+0x4c>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a6c:	4b06      	ldr	r3, [pc, #24]	; (8003a88 <MX_USART3_UART_Init+0x4c>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003a72:	4805      	ldr	r0, [pc, #20]	; (8003a88 <MX_USART3_UART_Init+0x4c>)
 8003a74:	f004 fb85 	bl	8008182 <HAL_UART_Init>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003a7e:	f000 f9a7 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003a82:	bf00      	nop
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	200008c8 	.word	0x200008c8
 8003a8c:	40004800 	.word	0x40004800

08003a90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <MX_DMA_Init+0x48>)
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	4a0f      	ldr	r2, [pc, #60]	; (8003ad8 <MX_DMA_Init+0x48>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6153      	str	r3, [r2, #20]
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <MX_DMA_Init+0x48>)
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	607b      	str	r3, [r7, #4]
 8003aac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	200d      	movs	r0, #13
 8003ab4:	f001 fb31 	bl	800511a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003ab8:	200d      	movs	r0, #13
 8003aba:	f001 fb4a 	bl	8005152 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	2102      	movs	r1, #2
 8003ac2:	2010      	movs	r0, #16
 8003ac4:	f001 fb29 	bl	800511a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003ac8:	2010      	movs	r0, #16
 8003aca:	f001 fb42 	bl	8005152 <HAL_NVIC_EnableIRQ>

}
 8003ace:	bf00      	nop
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40021000 	.word	0x40021000

08003adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b088      	sub	sp, #32
 8003ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae2:	f107 0310 	add.w	r3, r7, #16
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	605a      	str	r2, [r3, #4]
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003af0:	4b23      	ldr	r3, [pc, #140]	; (8003b80 <MX_GPIO_Init+0xa4>)
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	4a22      	ldr	r2, [pc, #136]	; (8003b80 <MX_GPIO_Init+0xa4>)
 8003af6:	f043 0320 	orr.w	r3, r3, #32
 8003afa:	6193      	str	r3, [r2, #24]
 8003afc:	4b20      	ldr	r3, [pc, #128]	; (8003b80 <MX_GPIO_Init+0xa4>)
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b08:	4b1d      	ldr	r3, [pc, #116]	; (8003b80 <MX_GPIO_Init+0xa4>)
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	4a1c      	ldr	r2, [pc, #112]	; (8003b80 <MX_GPIO_Init+0xa4>)
 8003b0e:	f043 0304 	orr.w	r3, r3, #4
 8003b12:	6193      	str	r3, [r2, #24]
 8003b14:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <MX_GPIO_Init+0xa4>)
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	f003 0304 	and.w	r3, r3, #4
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b20:	4b17      	ldr	r3, [pc, #92]	; (8003b80 <MX_GPIO_Init+0xa4>)
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	4a16      	ldr	r2, [pc, #88]	; (8003b80 <MX_GPIO_Init+0xa4>)
 8003b26:	f043 0308 	orr.w	r3, r3, #8
 8003b2a:	6193      	str	r3, [r2, #24]
 8003b2c:	4b14      	ldr	r3, [pc, #80]	; (8003b80 <MX_GPIO_Init+0xa4>)
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b38:	4b11      	ldr	r3, [pc, #68]	; (8003b80 <MX_GPIO_Init+0xa4>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	4a10      	ldr	r2, [pc, #64]	; (8003b80 <MX_GPIO_Init+0xa4>)
 8003b3e:	f043 0310 	orr.w	r3, r3, #16
 8003b42:	6193      	str	r3, [r2, #24]
 8003b44:	4b0e      	ldr	r3, [pc, #56]	; (8003b80 <MX_GPIO_Init+0xa4>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8003b50:	2200      	movs	r2, #0
 8003b52:	2107      	movs	r1, #7
 8003b54:	480b      	ldr	r0, [pc, #44]	; (8003b84 <MX_GPIO_Init+0xa8>)
 8003b56:	f002 f92d 	bl	8005db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8003b5a:	2307      	movs	r3, #7
 8003b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b66:	2302      	movs	r3, #2
 8003b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b6a:	f107 0310 	add.w	r3, r7, #16
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4804      	ldr	r0, [pc, #16]	; (8003b84 <MX_GPIO_Init+0xa8>)
 8003b72:	f001 ff8b 	bl	8005a8c <HAL_GPIO_Init>

}
 8003b76:	bf00      	nop
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40010c00 	.word	0x40010c00

08003b88 <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 8003b8c:	4b11      	ldr	r3, [pc, #68]	; (8003bd4 <HUAN_MOTOR1_Init+0x4c>)
 8003b8e:	4a12      	ldr	r2, [pc, #72]	; (8003bd8 <HUAN_MOTOR1_Init+0x50>)
 8003b90:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 8003b92:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <HUAN_MOTOR1_Init+0x4c>)
 8003b94:	4a11      	ldr	r2, [pc, #68]	; (8003bdc <HUAN_MOTOR1_Init+0x54>)
 8003b96:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 8003b98:	4b0e      	ldr	r3, [pc, #56]	; (8003bd4 <HUAN_MOTOR1_Init+0x4c>)
 8003b9a:	4a11      	ldr	r2, [pc, #68]	; (8003be0 <HUAN_MOTOR1_Init+0x58>)
 8003b9c:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <HUAN_MOTOR1_Init+0x4c>)
 8003ba0:	220c      	movs	r2, #12
 8003ba2:	60da      	str	r2, [r3, #12]
//	cmotor_lf.pos_channel = TIM_CHANNEL_3;
	cmotor_lf.negTimer = &htim1;
 8003ba4:	4b0b      	ldr	r3, [pc, #44]	; (8003bd4 <HUAN_MOTOR1_Init+0x4c>)
 8003ba6:	4a0e      	ldr	r2, [pc, #56]	; (8003be0 <HUAN_MOTOR1_Init+0x58>)
 8003ba8:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 8003baa:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <HUAN_MOTOR1_Init+0x4c>)
 8003bac:	2208      	movs	r2, #8
 8003bae:	611a      	str	r2, [r3, #16]
//	cmotor_lf.neg_channel = TIM_CHANNEL_4;
	cmotor_lf.encoderInverted = 1;
 8003bb0:	4b08      	ldr	r3, [pc, #32]	; (8003bd4 <HUAN_MOTOR1_Init+0x4c>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lf.kp = 0.0003;
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <HUAN_MOTOR1_Init+0x4c>)
 8003bba:	4a0a      	ldr	r2, [pc, #40]	; (8003be4 <HUAN_MOTOR1_Init+0x5c>)
 8003bbc:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 8003bbe:	4b05      	ldr	r3, [pc, #20]	; (8003bd4 <HUAN_MOTOR1_Init+0x4c>)
 8003bc0:	4a09      	ldr	r2, [pc, #36]	; (8003be8 <HUAN_MOTOR1_Init+0x60>)
 8003bc2:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 8003bc4:	4b03      	ldr	r3, [pc, #12]	; (8003bd4 <HUAN_MOTOR1_Init+0x4c>)
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HUAN_MOTOR1_Init+0x64>)
 8003bc8:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 8003bca:	4802      	ldr	r0, [pc, #8]	; (8003bd4 <HUAN_MOTOR1_Init+0x4c>)
 8003bcc:	f7fe fbf0 	bl	80023b0 <huansic_motor_init>
}
 8003bd0:	bf00      	nop
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	20000994 	.word	0x20000994
 8003bd8:	200006d4 	.word	0x200006d4
 8003bdc:	3d4ccccd 	.word	0x3d4ccccd
 8003be0:	2000068c 	.word	0x2000068c
 8003be4:	399d4952 	.word	0x399d4952
 8003be8:	37a7c5ac 	.word	0x37a7c5ac
 8003bec:	387ba882 	.word	0x387ba882

08003bf0 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 8003bf4:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <HUAN_MOTOR2_Init+0x4c>)
 8003bf6:	4a12      	ldr	r2, [pc, #72]	; (8003c40 <HUAN_MOTOR2_Init+0x50>)
 8003bf8:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <HUAN_MOTOR2_Init+0x4c>)
 8003bfc:	4a11      	ldr	r2, [pc, #68]	; (8003c44 <HUAN_MOTOR2_Init+0x54>)
 8003bfe:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 8003c00:	4b0e      	ldr	r3, [pc, #56]	; (8003c3c <HUAN_MOTOR2_Init+0x4c>)
 8003c02:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <HUAN_MOTOR2_Init+0x58>)
 8003c04:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 8003c06:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <HUAN_MOTOR2_Init+0x4c>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	; (8003c3c <HUAN_MOTOR2_Init+0x4c>)
 8003c0e:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <HUAN_MOTOR2_Init+0x58>)
 8003c10:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HUAN_MOTOR2_Init+0x4c>)
 8003c14:	2204      	movs	r2, #4
 8003c16:	611a      	str	r2, [r3, #16]
	cmotor_rf.encoderInverted = 0;
 8003c18:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <HUAN_MOTOR2_Init+0x4c>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rf.kp = 0.0003;
 8003c20:	4b06      	ldr	r3, [pc, #24]	; (8003c3c <HUAN_MOTOR2_Init+0x4c>)
 8003c22:	4a0a      	ldr	r2, [pc, #40]	; (8003c4c <HUAN_MOTOR2_Init+0x5c>)
 8003c24:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 8003c26:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <HUAN_MOTOR2_Init+0x4c>)
 8003c28:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <HUAN_MOTOR2_Init+0x60>)
 8003c2a:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 8003c2c:	4b03      	ldr	r3, [pc, #12]	; (8003c3c <HUAN_MOTOR2_Init+0x4c>)
 8003c2e:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <HUAN_MOTOR2_Init+0x64>)
 8003c30:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 8003c32:	4802      	ldr	r0, [pc, #8]	; (8003c3c <HUAN_MOTOR2_Init+0x4c>)
 8003c34:	f7fe fbbc 	bl	80023b0 <huansic_motor_init>
}
 8003c38:	bf00      	nop
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	200009d0 	.word	0x200009d0
 8003c40:	20000764 	.word	0x20000764
 8003c44:	3d4ccccd 	.word	0x3d4ccccd
 8003c48:	2000068c 	.word	0x2000068c
 8003c4c:	399d4952 	.word	0x399d4952
 8003c50:	37a7c5ac 	.word	0x37a7c5ac
 8003c54:	387ba882 	.word	0x387ba882

08003c58 <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 8003c5c:	4b11      	ldr	r3, [pc, #68]	; (8003ca4 <HUAN_MOTOR3_Init+0x4c>)
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <HUAN_MOTOR3_Init+0x50>)
 8003c60:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 8003c62:	4b10      	ldr	r3, [pc, #64]	; (8003ca4 <HUAN_MOTOR3_Init+0x4c>)
 8003c64:	4a11      	ldr	r2, [pc, #68]	; (8003cac <HUAN_MOTOR3_Init+0x54>)
 8003c66:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 8003c68:	4b0e      	ldr	r3, [pc, #56]	; (8003ca4 <HUAN_MOTOR3_Init+0x4c>)
 8003c6a:	4a11      	ldr	r2, [pc, #68]	; (8003cb0 <HUAN_MOTOR3_Init+0x58>)
 8003c6c:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	; (8003ca4 <HUAN_MOTOR3_Init+0x4c>)
 8003c70:	220c      	movs	r2, #12
 8003c72:	60da      	str	r2, [r3, #12]
//	cmotor_lb.pos_channel = TIM_CHANNEL_3;
	cmotor_lb.negTimer = &htim8;
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <HUAN_MOTOR3_Init+0x4c>)
 8003c76:	4a0e      	ldr	r2, [pc, #56]	; (8003cb0 <HUAN_MOTOR3_Init+0x58>)
 8003c78:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ca4 <HUAN_MOTOR3_Init+0x4c>)
 8003c7c:	2208      	movs	r2, #8
 8003c7e:	611a      	str	r2, [r3, #16]
//	cmotor_lb.neg_channel = TIM_CHANNEL_4;
	cmotor_lb.encoderInverted = 1;
 8003c80:	4b08      	ldr	r3, [pc, #32]	; (8003ca4 <HUAN_MOTOR3_Init+0x4c>)
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_lb.kp = 0.0003;
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <HUAN_MOTOR3_Init+0x4c>)
 8003c8a:	4a0a      	ldr	r2, [pc, #40]	; (8003cb4 <HUAN_MOTOR3_Init+0x5c>)
 8003c8c:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 8003c8e:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HUAN_MOTOR3_Init+0x4c>)
 8003c90:	4a09      	ldr	r2, [pc, #36]	; (8003cb8 <HUAN_MOTOR3_Init+0x60>)
 8003c92:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <HUAN_MOTOR3_Init+0x4c>)
 8003c96:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <HUAN_MOTOR3_Init+0x64>)
 8003c98:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 8003c9a:	4802      	ldr	r0, [pc, #8]	; (8003ca4 <HUAN_MOTOR3_Init+0x4c>)
 8003c9c:	f7fe fb88 	bl	80023b0 <huansic_motor_init>
}
 8003ca0:	bf00      	nop
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20000a0c 	.word	0x20000a0c
 8003ca8:	2000071c 	.word	0x2000071c
 8003cac:	3d4ccccd 	.word	0x3d4ccccd
 8003cb0:	2000083c 	.word	0x2000083c
 8003cb4:	399d4952 	.word	0x399d4952
 8003cb8:	37a7c5ac 	.word	0x37a7c5ac
 8003cbc:	387ba882 	.word	0x387ba882

08003cc0 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 8003cc4:	4b11      	ldr	r3, [pc, #68]	; (8003d0c <HUAN_MOTOR4_Init+0x4c>)
 8003cc6:	4a12      	ldr	r2, [pc, #72]	; (8003d10 <HUAN_MOTOR4_Init+0x50>)
 8003cc8:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <HUAN_MOTOR4_Init+0x4c>)
 8003ccc:	4a11      	ldr	r2, [pc, #68]	; (8003d14 <HUAN_MOTOR4_Init+0x54>)
 8003cce:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 8003cd0:	4b0e      	ldr	r3, [pc, #56]	; (8003d0c <HUAN_MOTOR4_Init+0x4c>)
 8003cd2:	4a11      	ldr	r2, [pc, #68]	; (8003d18 <HUAN_MOTOR4_Init+0x58>)
 8003cd4:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <HUAN_MOTOR4_Init+0x4c>)
 8003cd8:	2200      	movs	r2, #0
 8003cda:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 8003cdc:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <HUAN_MOTOR4_Init+0x4c>)
 8003cde:	4a0e      	ldr	r2, [pc, #56]	; (8003d18 <HUAN_MOTOR4_Init+0x58>)
 8003ce0:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <HUAN_MOTOR4_Init+0x4c>)
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	611a      	str	r2, [r3, #16]
	cmotor_rb.encoderInverted = 0;
 8003ce8:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <HUAN_MOTOR4_Init+0x4c>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	cmotor_rb.kp = 0.0003;
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HUAN_MOTOR4_Init+0x4c>)
 8003cf2:	4a0a      	ldr	r2, [pc, #40]	; (8003d1c <HUAN_MOTOR4_Init+0x5c>)
 8003cf4:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HUAN_MOTOR4_Init+0x4c>)
 8003cf8:	4a09      	ldr	r2, [pc, #36]	; (8003d20 <HUAN_MOTOR4_Init+0x60>)
 8003cfa:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <HUAN_MOTOR4_Init+0x4c>)
 8003cfe:	4a09      	ldr	r2, [pc, #36]	; (8003d24 <HUAN_MOTOR4_Init+0x64>)
 8003d00:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 8003d02:	4802      	ldr	r0, [pc, #8]	; (8003d0c <HUAN_MOTOR4_Init+0x4c>)
 8003d04:	f7fe fb54 	bl	80023b0 <huansic_motor_init>
}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20000a48 	.word	0x20000a48
 8003d10:	200007ac 	.word	0x200007ac
 8003d14:	3d4ccccd 	.word	0x3d4ccccd
 8003d18:	2000083c 	.word	0x2000083c
 8003d1c:	399d4952 	.word	0x399d4952
 8003d20:	37a7c5ac 	.word	0x37a7c5ac
 8003d24:	387ba882 	.word	0x387ba882

08003d28 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
	himu.huart = &huart3;
 8003d2c:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <HUAN_IMU_Init+0x14>)
 8003d2e:	4a04      	ldr	r2, [pc, #16]	; (8003d40 <HUAN_IMU_Init+0x18>)
 8003d30:	601a      	str	r2, [r3, #0]
	huansic_jy62_init(&himu);
 8003d32:	4802      	ldr	r0, [pc, #8]	; (8003d3c <HUAN_IMU_Init+0x14>)
 8003d34:	f7fd ffa8 	bl	8001c88 <huansic_jy62_init>
}
 8003d38:	bf00      	nop
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000a84 	.word	0x20000a84
 8003d40:	200008c8 	.word	0x200008c8

08003d44 <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
	hxb.uartPort = &huart2;
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <HUAN_ZIGBEE_Init+0x14>)
 8003d4a:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <HUAN_ZIGBEE_Init+0x18>)
 8003d4c:	601a      	str	r2, [r3, #0]
	huansic_xb_init(&hxb);
 8003d4e:	4802      	ldr	r0, [pc, #8]	; (8003d58 <HUAN_ZIGBEE_Init+0x14>)
 8003d50:	f7fe fd26 	bl	80027a0 <huansic_xb_init>
}
 8003d54:	bf00      	nop
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000adc 	.word	0x20000adc
 8003d5c:	20000884 	.word	0x20000884

08003d60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8003d68:	4b0a      	ldr	r3, [pc, #40]	; (8003d94 <HAL_UART_RxCpltCallback+0x34>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d10b      	bne.n	8003d8a <HAL_UART_RxCpltCallback+0x2a>
		if (himu.pending_alignment)
 8003d72:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <HAL_UART_RxCpltCallback+0x34>)
 8003d74:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d003      	beq.n	8003d84 <HAL_UART_RxCpltCallback+0x24>
			huansic_jy62_isr(&himu);
 8003d7c:	4805      	ldr	r0, [pc, #20]	; (8003d94 <HAL_UART_RxCpltCallback+0x34>)
 8003d7e:	f7fe f8d9 	bl	8001f34 <huansic_jy62_isr>
		else
			huansic_jy62_dma_isr(&himu);
	} /*else if(){

	} */
}
 8003d82:	e002      	b.n	8003d8a <HAL_UART_RxCpltCallback+0x2a>
			huansic_jy62_dma_isr(&himu);
 8003d84:	4803      	ldr	r0, [pc, #12]	; (8003d94 <HAL_UART_RxCpltCallback+0x34>)
 8003d86:	f7fd ffb5 	bl	8001cf4 <huansic_jy62_dma_isr>
}
 8003d8a:	bf00      	nop
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	20000a84 	.word	0x20000a84

08003d98 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
	if (himu.huart == huart) {
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <HAL_UART_ErrorCallback+0x34>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d10b      	bne.n	8003dc2 <HAL_UART_ErrorCallback+0x2a>
		if (himu.pending_alignment)
 8003daa:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <HAL_UART_ErrorCallback+0x34>)
 8003dac:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <HAL_UART_ErrorCallback+0x24>
			huansic_jy62_error(&himu);
 8003db4:	4805      	ldr	r0, [pc, #20]	; (8003dcc <HAL_UART_ErrorCallback+0x34>)
 8003db6:	f7fe f908 	bl	8001fca <huansic_jy62_error>
		else
			huansic_jy62_dma_error(&himu);
	} /*else if(){

	}*/
}
 8003dba:	e002      	b.n	8003dc2 <HAL_UART_ErrorCallback+0x2a>
			huansic_jy62_dma_error(&himu);
 8003dbc:	4803      	ldr	r0, [pc, #12]	; (8003dcc <HAL_UART_ErrorCallback+0x34>)
 8003dbe:	f7fe f8f0 	bl	8001fa2 <huansic_jy62_dma_error>
}
 8003dc2:	bf00      	nop
 8003dc4:	3708      	adds	r7, #8
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000a84 	.word	0x20000a84

08003dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003dd4:	b672      	cpsid	i
}
 8003dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003dd8:	e7fe      	b.n	8003dd8 <Error_Handler+0x8>
	...

08003ddc <Lane_init>:
	closelist.Head = 0;
	closelist.Tail = 0;
	closelist.Length = 0;
}

void Lane_init(void){
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
	pathlane.Head = 0;
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <Lane_init+0x18>)
 8003de2:	2200      	movs	r2, #0
 8003de4:	801a      	strh	r2, [r3, #0]
	pathlane.Length = 0;
 8003de6:	4b03      	ldr	r3, [pc, #12]	; (8003df4 <Lane_init+0x18>)
 8003de8:	2200      	movs	r2, #0
 8003dea:	805a      	strh	r2, [r3, #2]
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bc80      	pop	{r7}
 8003df2:	4770      	bx	lr
 8003df4:	20007bf8 	.word	0x20007bf8

08003df8 <queue_append>:

uint8_t queue_append(A_Star_Node* node)
{
 8003df8:	b590      	push	{r4, r7, lr}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
	if (openlist.Length + openlist.Head >= QUEUE_SIZE)
 8003e00:	4b41      	ldr	r3, [pc, #260]	; (8003f08 <queue_append+0x110>)
 8003e02:	885b      	ldrh	r3, [r3, #2]
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b40      	ldr	r3, [pc, #256]	; (8003f08 <queue_append+0x110>)
 8003e08:	881b      	ldrh	r3, [r3, #0]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e10:	db01      	blt.n	8003e16 <queue_append+0x1e>
	{
		return 0;
 8003e12:	2300      	movs	r3, #0
 8003e14:	e073      	b.n	8003efe <queue_append+0x106>
	}
	else
	{
		uint16_t i = 0;
 8003e16:	2300      	movs	r3, #0
 8003e18:	82fb      	strh	r3, [r7, #22]
		while (i < openlist.Length)
 8003e1a:	e052      	b.n	8003ec2 <queue_append+0xca>
		{
			if (openlist.buffer[i + openlist.Head].total <= node->total)
 8003e1c:	8afb      	ldrh	r3, [r7, #22]
 8003e1e:	4a3a      	ldr	r2, [pc, #232]	; (8003f08 <queue_append+0x110>)
 8003e20:	8812      	ldrh	r2, [r2, #0]
 8003e22:	441a      	add	r2, r3
 8003e24:	4938      	ldr	r1, [pc, #224]	; (8003f08 <queue_append+0x110>)
 8003e26:	4613      	mov	r3, r2
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	f8d2 2006 	ldr.w	r2, [r2, #6]
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fd f8c7 	bl	8000fd0 <__aeabi_fcmple>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d003      	beq.n	8003e50 <queue_append+0x58>
			{
				i++;
 8003e48:	8afb      	ldrh	r3, [r7, #22]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	82fb      	strh	r3, [r7, #22]
 8003e4e:	e038      	b.n	8003ec2 <queue_append+0xca>
			}
			else
			{
				A_Star_Node change;
				while (i < openlist.Length + 1)
 8003e50:	e02a      	b.n	8003ea8 <queue_append+0xb0>
				{
					change = openlist.buffer[i + openlist.Head];
 8003e52:	8afb      	ldrh	r3, [r7, #22]
 8003e54:	4a2c      	ldr	r2, [pc, #176]	; (8003f08 <queue_append+0x110>)
 8003e56:	8812      	ldrh	r2, [r2, #0]
 8003e58:	441a      	add	r2, r3
 8003e5a:	492b      	ldr	r1, [pc, #172]	; (8003f08 <queue_append+0x110>)
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	18ca      	adds	r2, r1, r3
 8003e66:	f107 0308 	add.w	r3, r7, #8
 8003e6a:	3204      	adds	r2, #4
 8003e6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
					openlist.buffer[i + openlist.Head] = *node;
 8003e72:	8afb      	ldrh	r3, [r7, #22]
 8003e74:	4a24      	ldr	r2, [pc, #144]	; (8003f08 <queue_append+0x110>)
 8003e76:	8812      	ldrh	r2, [r2, #0]
 8003e78:	441a      	add	r2, r3
 8003e7a:	4923      	ldr	r1, [pc, #140]	; (8003f08 <queue_append+0x110>)
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4413      	add	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	440b      	add	r3, r1
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	6810      	ldr	r0, [r2, #0]
 8003e8c:	6851      	ldr	r1, [r2, #4]
 8003e8e:	6892      	ldr	r2, [r2, #8]
 8003e90:	c307      	stmia	r3!, {r0, r1, r2}
					*node = change;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	461c      	mov	r4, r3
 8003e96:	f107 0308 	add.w	r3, r7, #8
 8003e9a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003e9c:	6020      	str	r0, [r4, #0]
 8003e9e:	6061      	str	r1, [r4, #4]
 8003ea0:	60a2      	str	r2, [r4, #8]
					i++;
 8003ea2:	8afb      	ldrh	r3, [r7, #22]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	82fb      	strh	r3, [r7, #22]
				while (i < openlist.Length + 1)
 8003ea8:	4b17      	ldr	r3, [pc, #92]	; (8003f08 <queue_append+0x110>)
 8003eaa:	885b      	ldrh	r3, [r3, #2]
 8003eac:	8afa      	ldrh	r2, [r7, #22]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d9cf      	bls.n	8003e52 <queue_append+0x5a>
				}
				openlist.Length += 1;
 8003eb2:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <queue_append+0x110>)
 8003eb4:	885b      	ldrh	r3, [r3, #2]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	4b13      	ldr	r3, [pc, #76]	; (8003f08 <queue_append+0x110>)
 8003ebc:	805a      	strh	r2, [r3, #2]
				return 1;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e01d      	b.n	8003efe <queue_append+0x106>
		while (i < openlist.Length)
 8003ec2:	4b11      	ldr	r3, [pc, #68]	; (8003f08 <queue_append+0x110>)
 8003ec4:	885b      	ldrh	r3, [r3, #2]
 8003ec6:	8afa      	ldrh	r2, [r7, #22]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d3a7      	bcc.n	8003e1c <queue_append+0x24>
			}
		}
		openlist.buffer[openlist.Head + openlist.Length] = *node;
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <queue_append+0x110>)
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <queue_append+0x110>)
 8003ed4:	885b      	ldrh	r3, [r3, #2]
 8003ed6:	441a      	add	r2, r3
 8003ed8:	490b      	ldr	r1, [pc, #44]	; (8003f08 <queue_append+0x110>)
 8003eda:	4613      	mov	r3, r2
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	4413      	add	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	6810      	ldr	r0, [r2, #0]
 8003eea:	6851      	ldr	r1, [r2, #4]
 8003eec:	6892      	ldr	r2, [r2, #8]
 8003eee:	c307      	stmia	r3!, {r0, r1, r2}
		openlist.Length++;
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <queue_append+0x110>)
 8003ef2:	885b      	ldrh	r3, [r3, #2]
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <queue_append+0x110>)
 8003efa:	805a      	strh	r2, [r3, #2]
		return 1;
 8003efc:	2301      	movs	r3, #1
	}
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	371c      	adds	r7, #28
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd90      	pop	{r4, r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000bec 	.word	0x20000bec

08003f0c <list_append>:

uint8_t list_append(uint16_t c)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	4603      	mov	r3, r0
 8003f14:	80fb      	strh	r3, [r7, #6]
	if (closelist.Length >= LIST_SIZE)
 8003f16:	4b13      	ldr	r3, [pc, #76]	; (8003f64 <list_append+0x58>)
 8003f18:	889b      	ldrh	r3, [r3, #4]
 8003f1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f1e:	d301      	bcc.n	8003f24 <list_append+0x18>
	{
		return 0;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e01a      	b.n	8003f5a <list_append+0x4e>
	}
	else
	{
		closelist.buffer[closelist.Tail] = c;
 8003f24:	4b0f      	ldr	r3, [pc, #60]	; (8003f64 <list_append+0x58>)
 8003f26:	885b      	ldrh	r3, [r3, #2]
 8003f28:	4a0e      	ldr	r2, [pc, #56]	; (8003f64 <list_append+0x58>)
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	4413      	add	r3, r2
 8003f2e:	88fa      	ldrh	r2, [r7, #6]
 8003f30:	80da      	strh	r2, [r3, #6]
		closelist.Tail = (closelist.Tail + 1) % LIST_SIZE;
 8003f32:	4b0c      	ldr	r3, [pc, #48]	; (8003f64 <list_append+0x58>)
 8003f34:	885b      	ldrh	r3, [r3, #2]
 8003f36:	3301      	adds	r3, #1
 8003f38:	425a      	negs	r2, r3
 8003f3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f3e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8003f42:	bf58      	it	pl
 8003f44:	4253      	negpl	r3, r2
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <list_append+0x58>)
 8003f4a:	805a      	strh	r2, [r3, #2]
		closelist.Length++;
 8003f4c:	4b05      	ldr	r3, [pc, #20]	; (8003f64 <list_append+0x58>)
 8003f4e:	889b      	ldrh	r3, [r3, #4]
 8003f50:	3301      	adds	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	4b03      	ldr	r3, [pc, #12]	; (8003f64 <list_append+0x58>)
 8003f56:	809a      	strh	r2, [r3, #4]
		return 1;
 8003f58:	2301      	movs	r3, #1
	}
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	20006bf0 	.word	0x20006bf0

08003f68 <queue_top>:

uint16_t queue_top()
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
	if (openlist.Length > 0)
 8003f6c:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <queue_top+0x3c>)
 8003f6e:	885b      	ldrh	r3, [r3, #2]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d010      	beq.n	8003f96 <queue_top+0x2e>
	{
		openlist.Head++;
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <queue_top+0x3c>)
 8003f76:	881b      	ldrh	r3, [r3, #0]
 8003f78:	3301      	adds	r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <queue_top+0x3c>)
 8003f7e:	801a      	strh	r2, [r3, #0]
		openlist.Length--;
 8003f80:	4b08      	ldr	r3, [pc, #32]	; (8003fa4 <queue_top+0x3c>)
 8003f82:	885b      	ldrh	r3, [r3, #2]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <queue_top+0x3c>)
 8003f8a:	805a      	strh	r2, [r3, #2]
		return openlist.Head - 1;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <queue_top+0x3c>)
 8003f8e:	881b      	ldrh	r3, [r3, #0]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	e001      	b.n	8003f9a <queue_top+0x32>
	}
	else {
		return 65535;
 8003f96:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bc80      	pop	{r7}
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	20000bec 	.word	0x20000bec

08003fa8 <findin_queue>:

uint16_t findin_queue(uint16_t c)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < openlist.Length; i++)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	81fb      	strh	r3, [r7, #14]
 8003fb6:	e017      	b.n	8003fe8 <findin_queue+0x40>
	{
		if (openlist.buffer[i + openlist.Head].cor == c) return (i + openlist.Head);
 8003fb8:	89fb      	ldrh	r3, [r7, #14]
 8003fba:	4a11      	ldr	r2, [pc, #68]	; (8004000 <findin_queue+0x58>)
 8003fbc:	8812      	ldrh	r2, [r2, #0]
 8003fbe:	441a      	add	r2, r3
 8003fc0:	490f      	ldr	r1, [pc, #60]	; (8004000 <findin_queue+0x58>)
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	440b      	add	r3, r1
 8003fcc:	3304      	adds	r3, #4
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	88fa      	ldrh	r2, [r7, #6]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d105      	bne.n	8003fe2 <findin_queue+0x3a>
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <findin_queue+0x58>)
 8003fd8:	881a      	ldrh	r2, [r3, #0]
 8003fda:	89fb      	ldrh	r3, [r7, #14]
 8003fdc:	4413      	add	r3, r2
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	e008      	b.n	8003ff4 <findin_queue+0x4c>
	for (i = 0; i < openlist.Length; i++)
 8003fe2:	89fb      	ldrh	r3, [r7, #14]
 8003fe4:	3301      	adds	r3, #1
 8003fe6:	81fb      	strh	r3, [r7, #14]
 8003fe8:	4b05      	ldr	r3, [pc, #20]	; (8004000 <findin_queue+0x58>)
 8003fea:	885b      	ldrh	r3, [r3, #2]
 8003fec:	89fa      	ldrh	r2, [r7, #14]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d3e2      	bcc.n	8003fb8 <findin_queue+0x10>
	}
	return 0;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bc80      	pop	{r7}
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	20000bec 	.word	0x20000bec

08004004 <findin_list>:
	}
	return 0;
}

uint8_t findin_list(uint16_t c)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	for (i = 0; i < closelist.Length; i++)
 800400e:	2300      	movs	r3, #0
 8004010:	81fb      	strh	r3, [r7, #14]
 8004012:	e00f      	b.n	8004034 <findin_list+0x30>
	{
		if (closelist.buffer[i + closelist.Head] == c) return 1;
 8004014:	89fb      	ldrh	r3, [r7, #14]
 8004016:	4a0d      	ldr	r2, [pc, #52]	; (800404c <findin_list+0x48>)
 8004018:	8812      	ldrh	r2, [r2, #0]
 800401a:	4413      	add	r3, r2
 800401c:	4a0b      	ldr	r2, [pc, #44]	; (800404c <findin_list+0x48>)
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	4413      	add	r3, r2
 8004022:	88db      	ldrh	r3, [r3, #6]
 8004024:	88fa      	ldrh	r2, [r7, #6]
 8004026:	429a      	cmp	r2, r3
 8004028:	d101      	bne.n	800402e <findin_list+0x2a>
 800402a:	2301      	movs	r3, #1
 800402c:	e008      	b.n	8004040 <findin_list+0x3c>
	for (i = 0; i < closelist.Length; i++)
 800402e:	89fb      	ldrh	r3, [r7, #14]
 8004030:	3301      	adds	r3, #1
 8004032:	81fb      	strh	r3, [r7, #14]
 8004034:	4b05      	ldr	r3, [pc, #20]	; (800404c <findin_list+0x48>)
 8004036:	889b      	ldrh	r3, [r3, #4]
 8004038:	89fa      	ldrh	r2, [r7, #14]
 800403a:	429a      	cmp	r2, r3
 800403c:	d3ea      	bcc.n	8004014 <findin_list+0x10>
	}
	return 0;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	3714      	adds	r7, #20
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20006bf0 	.word	0x20006bf0

08004050 <editcost>:

void editcost(uint16_t index, A_Star_Node* node)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	4603      	mov	r3, r0
 8004058:	6039      	str	r1, [r7, #0]
 800405a:	80fb      	strh	r3, [r7, #6]
	if (openlist.buffer[index].total > node->total)
 800405c:	88fa      	ldrh	r2, [r7, #6]
 800405e:	4920      	ldr	r1, [pc, #128]	; (80040e0 <editcost+0x90>)
 8004060:	4613      	mov	r3, r2
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	f8d3 300a 	ldr.w	r3, [r3, #10]
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	f8d2 2006 	ldr.w	r2, [r2, #6]
 8004074:	4611      	mov	r1, r2
 8004076:	4618      	mov	r0, r3
 8004078:	f7fc ffbe 	bl	8000ff8 <__aeabi_fcmpgt>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d100      	bne.n	8004084 <editcost+0x34>
	{
		openlist.buffer[index].total = node->total;
		openlist.buffer[index].cost = node->cost;
		openlist.buffer[index].fatherindex = node->fatherindex;
	}
}
 8004082:	e029      	b.n	80040d8 <editcost+0x88>
		openlist.buffer[index].total = node->total;
 8004084:	88fa      	ldrh	r2, [r7, #6]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	f8d3 1006 	ldr.w	r1, [r3, #6]
 800408c:	460b      	mov	r3, r1
 800408e:	4619      	mov	r1, r3
 8004090:	4813      	ldr	r0, [pc, #76]	; (80040e0 <editcost+0x90>)
 8004092:	4613      	mov	r3, r2
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4403      	add	r3, r0
 800409c:	460a      	mov	r2, r1
 800409e:	f8c3 200a 	str.w	r2, [r3, #10]
		openlist.buffer[index].cost = node->cost;
 80040a2:	88fa      	ldrh	r2, [r7, #6]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	f8d3 1002 	ldr.w	r1, [r3, #2]
 80040aa:	460b      	mov	r3, r1
 80040ac:	4619      	mov	r1, r3
 80040ae:	480c      	ldr	r0, [pc, #48]	; (80040e0 <editcost+0x90>)
 80040b0:	4613      	mov	r3, r2
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	4403      	add	r3, r0
 80040ba:	460a      	mov	r2, r1
 80040bc:	f8c3 2006 	str.w	r2, [r3, #6]
		openlist.buffer[index].fatherindex = node->fatherindex;
 80040c0:	88fa      	ldrh	r2, [r7, #6]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	8958      	ldrh	r0, [r3, #10]
 80040c6:	4906      	ldr	r1, [pc, #24]	; (80040e0 <editcost+0x90>)
 80040c8:	4613      	mov	r3, r2
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	330e      	adds	r3, #14
 80040d4:	4602      	mov	r2, r0
 80040d6:	801a      	strh	r2, [r3, #0]
}
 80040d8:	bf00      	nop
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000bec 	.word	0x20000bec

080040e4 <Insert_inLane>:

uint8_t Insert_inLane(Coordinate *head_coor, uint8_t head_index)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	460b      	mov	r3, r1
 80040ee:	70fb      	strb	r3, [r7, #3]
	if(!head_coor) return 0;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <Insert_inLane+0x16>
 80040f6:	2300      	movs	r3, #0
 80040f8:	e025      	b.n	8004146 <Insert_inLane+0x62>
	pathlane.Head = 0;
 80040fa:	4b15      	ldr	r3, [pc, #84]	; (8004150 <Insert_inLane+0x6c>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	801a      	strh	r2, [r3, #0]
	pathlane.Length = 16 - head_index;
 8004100:	78fb      	ldrb	r3, [r7, #3]
 8004102:	b29b      	uxth	r3, r3
 8004104:	f1c3 0310 	rsb	r3, r3, #16
 8004108:	b29a      	uxth	r2, r3
 800410a:	4b11      	ldr	r3, [pc, #68]	; (8004150 <Insert_inLane+0x6c>)
 800410c:	805a      	strh	r2, [r3, #2]
	for(uint8_t i = head_index; i < 16; i++)
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	73fb      	strb	r3, [r7, #15]
 8004112:	e014      	b.n	800413e <Insert_inLane+0x5a>
	{
		pathlane.buffer[pathlane.Head + i - head_index] = *(head_coor + i);
 8004114:	7bfb      	ldrb	r3, [r7, #15]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	18d1      	adds	r1, r2, r3
 800411c:	4b0c      	ldr	r3, [pc, #48]	; (8004150 <Insert_inLane+0x6c>)
 800411e:	881b      	ldrh	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	7bfb      	ldrb	r3, [r7, #15]
 8004124:	441a      	add	r2, r3
 8004126:	78fb      	ldrb	r3, [r7, #3]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	4a09      	ldr	r2, [pc, #36]	; (8004150 <Insert_inLane+0x6c>)
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	3304      	adds	r3, #4
 8004132:	460a      	mov	r2, r1
 8004134:	6810      	ldr	r0, [r2, #0]
 8004136:	6018      	str	r0, [r3, #0]
	for(uint8_t i = head_index; i < 16; i++)
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	3301      	adds	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
 800413e:	7bfb      	ldrb	r3, [r7, #15]
 8004140:	2b0f      	cmp	r3, #15
 8004142:	d9e7      	bls.n	8004114 <Insert_inLane+0x30>
	}
	return 1;
 8004144:	2301      	movs	r3, #1
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	bc80      	pop	{r7}
 800414e:	4770      	bx	lr
 8004150:	20007bf8 	.word	0x20007bf8

08004154 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004158:	bf00      	nop
 800415a:	46bd      	mov	sp, r7
 800415c:	bc80      	pop	{r7}
 800415e:	4770      	bx	lr

08004160 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af04      	add	r7, sp, #16
 8004166:	4603      	mov	r3, r0
 8004168:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800416a:	f04f 33ff 	mov.w	r3, #4294967295
 800416e:	9302      	str	r3, [sp, #8]
 8004170:	2301      	movs	r3, #1
 8004172:	9301      	str	r3, [sp, #4]
 8004174:	1dfb      	adds	r3, r7, #7
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	2301      	movs	r3, #1
 800417a:	2200      	movs	r2, #0
 800417c:	2178      	movs	r1, #120	; 0x78
 800417e:	4803      	ldr	r0, [pc, #12]	; (800418c <ssd1306_WriteCommand+0x2c>)
 8004180:	f001 ff74 	bl	800606c <HAL_I2C_Mem_Write>
}
 8004184:	bf00      	nop
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	20000638 	.word	0x20000638

08004190 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af04      	add	r7, sp, #16
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	b29b      	uxth	r3, r3
 800419e:	f04f 32ff 	mov.w	r2, #4294967295
 80041a2:	9202      	str	r2, [sp, #8]
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	2301      	movs	r3, #1
 80041ac:	2240      	movs	r2, #64	; 0x40
 80041ae:	2178      	movs	r1, #120	; 0x78
 80041b0:	4803      	ldr	r0, [pc, #12]	; (80041c0 <ssd1306_WriteData+0x30>)
 80041b2:	f001 ff5b 	bl	800606c <HAL_I2C_Mem_Write>
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	20000638 	.word	0x20000638

080041c4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80041c8:	f7ff ffc4 	bl	8004154 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80041cc:	2064      	movs	r0, #100	; 0x64
 80041ce:	f000 fea9 	bl	8004f24 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80041d2:	2000      	movs	r0, #0
 80041d4:	f000 f9be 	bl	8004554 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80041d8:	2020      	movs	r0, #32
 80041da:	f7ff ffc1 	bl	8004160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80041de:	2000      	movs	r0, #0
 80041e0:	f7ff ffbe 	bl	8004160 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80041e4:	20b0      	movs	r0, #176	; 0xb0
 80041e6:	f7ff ffbb 	bl	8004160 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80041ea:	20c8      	movs	r0, #200	; 0xc8
 80041ec:	f7ff ffb8 	bl	8004160 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80041f0:	2000      	movs	r0, #0
 80041f2:	f7ff ffb5 	bl	8004160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80041f6:	2010      	movs	r0, #16
 80041f8:	f7ff ffb2 	bl	8004160 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80041fc:	2040      	movs	r0, #64	; 0x40
 80041fe:	f7ff ffaf 	bl	8004160 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004202:	20ff      	movs	r0, #255	; 0xff
 8004204:	f000 f992 	bl	800452c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004208:	20a1      	movs	r0, #161	; 0xa1
 800420a:	f7ff ffa9 	bl	8004160 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800420e:	20a6      	movs	r0, #166	; 0xa6
 8004210:	f7ff ffa6 	bl	8004160 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004214:	20a8      	movs	r0, #168	; 0xa8
 8004216:	f7ff ffa3 	bl	8004160 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 800421a:	201f      	movs	r0, #31
 800421c:	f7ff ffa0 	bl	8004160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004220:	20a4      	movs	r0, #164	; 0xa4
 8004222:	f7ff ff9d 	bl	8004160 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004226:	20d3      	movs	r0, #211	; 0xd3
 8004228:	f7ff ff9a 	bl	8004160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800422c:	2000      	movs	r0, #0
 800422e:	f7ff ff97 	bl	8004160 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004232:	20d5      	movs	r0, #213	; 0xd5
 8004234:	f7ff ff94 	bl	8004160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004238:	20f0      	movs	r0, #240	; 0xf0
 800423a:	f7ff ff91 	bl	8004160 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800423e:	20d9      	movs	r0, #217	; 0xd9
 8004240:	f7ff ff8e 	bl	8004160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8004244:	2022      	movs	r0, #34	; 0x22
 8004246:	f7ff ff8b 	bl	8004160 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800424a:	20da      	movs	r0, #218	; 0xda
 800424c:	f7ff ff88 	bl	8004160 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8004250:	2002      	movs	r0, #2
 8004252:	f7ff ff85 	bl	8004160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8004256:	20db      	movs	r0, #219	; 0xdb
 8004258:	f7ff ff82 	bl	8004160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800425c:	2020      	movs	r0, #32
 800425e:	f7ff ff7f 	bl	8004160 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8004262:	208d      	movs	r0, #141	; 0x8d
 8004264:	f7ff ff7c 	bl	8004160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004268:	2014      	movs	r0, #20
 800426a:	f7ff ff79 	bl	8004160 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800426e:	2001      	movs	r0, #1
 8004270:	f000 f970 	bl	8004554 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004274:	2000      	movs	r0, #0
 8004276:	f000 f80f 	bl	8004298 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800427a:	f000 f82f 	bl	80042dc <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800427e:	4b05      	ldr	r3, [pc, #20]	; (8004294 <ssd1306_Init+0xd0>)
 8004280:	2200      	movs	r2, #0
 8004282:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004284:	4b03      	ldr	r3, [pc, #12]	; (8004294 <ssd1306_Init+0xd0>)
 8004286:	2200      	movs	r2, #0
 8004288:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 800428a:	4b02      	ldr	r3, [pc, #8]	; (8004294 <ssd1306_Init+0xd0>)
 800428c:	2201      	movs	r2, #1
 800428e:	711a      	strb	r2, [r3, #4]
}
 8004290:	bf00      	nop
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20007e7c 	.word	0x20007e7c

08004298 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	e00d      	b.n	80042c4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <ssd1306_Fill+0x1a>
 80042ae:	2100      	movs	r1, #0
 80042b0:	e000      	b.n	80042b4 <ssd1306_Fill+0x1c>
 80042b2:	21ff      	movs	r1, #255	; 0xff
 80042b4:	4a08      	ldr	r2, [pc, #32]	; (80042d8 <ssd1306_Fill+0x40>)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4413      	add	r3, r2
 80042ba:	460a      	mov	r2, r1
 80042bc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	3301      	adds	r3, #1
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ca:	d3ed      	bcc.n	80042a8 <ssd1306_Fill+0x10>
    }
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr
 80042d8:	20007c7c 	.word	0x20007c7c

080042dc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80042e2:	2300      	movs	r3, #0
 80042e4:	71fb      	strb	r3, [r7, #7]
 80042e6:	e016      	b.n	8004316 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	3b50      	subs	r3, #80	; 0x50
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7ff ff36 	bl	8004160 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80042f4:	2000      	movs	r0, #0
 80042f6:	f7ff ff33 	bl	8004160 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80042fa:	2010      	movs	r0, #16
 80042fc:	f7ff ff30 	bl	8004160 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	01db      	lsls	r3, r3, #7
 8004304:	4a08      	ldr	r2, [pc, #32]	; (8004328 <ssd1306_UpdateScreen+0x4c>)
 8004306:	4413      	add	r3, r2
 8004308:	2180      	movs	r1, #128	; 0x80
 800430a:	4618      	mov	r0, r3
 800430c:	f7ff ff40 	bl	8004190 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	3301      	adds	r3, #1
 8004314:	71fb      	strb	r3, [r7, #7]
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	2b03      	cmp	r3, #3
 800431a:	d9e5      	bls.n	80042e8 <ssd1306_UpdateScreen+0xc>
    }
}
 800431c:	bf00      	nop
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20007c7c 	.word	0x20007c7c

0800432c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
 8004336:	460b      	mov	r3, r1
 8004338:	71bb      	strb	r3, [r7, #6]
 800433a:	4613      	mov	r3, r2
 800433c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	2b00      	cmp	r3, #0
 8004344:	db3d      	blt.n	80043c2 <ssd1306_DrawPixel+0x96>
 8004346:	79bb      	ldrb	r3, [r7, #6]
 8004348:	2b1f      	cmp	r3, #31
 800434a:	d83a      	bhi.n	80043c2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 800434c:	797b      	ldrb	r3, [r7, #5]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d11a      	bne.n	8004388 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004352:	79fa      	ldrb	r2, [r7, #7]
 8004354:	79bb      	ldrb	r3, [r7, #6]
 8004356:	08db      	lsrs	r3, r3, #3
 8004358:	b2d8      	uxtb	r0, r3
 800435a:	4603      	mov	r3, r0
 800435c:	01db      	lsls	r3, r3, #7
 800435e:	4413      	add	r3, r2
 8004360:	4a1a      	ldr	r2, [pc, #104]	; (80043cc <ssd1306_DrawPixel+0xa0>)
 8004362:	5cd3      	ldrb	r3, [r2, r3]
 8004364:	b25a      	sxtb	r2, r3
 8004366:	79bb      	ldrb	r3, [r7, #6]
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	2101      	movs	r1, #1
 800436e:	fa01 f303 	lsl.w	r3, r1, r3
 8004372:	b25b      	sxtb	r3, r3
 8004374:	4313      	orrs	r3, r2
 8004376:	b259      	sxtb	r1, r3
 8004378:	79fa      	ldrb	r2, [r7, #7]
 800437a:	4603      	mov	r3, r0
 800437c:	01db      	lsls	r3, r3, #7
 800437e:	4413      	add	r3, r2
 8004380:	b2c9      	uxtb	r1, r1
 8004382:	4a12      	ldr	r2, [pc, #72]	; (80043cc <ssd1306_DrawPixel+0xa0>)
 8004384:	54d1      	strb	r1, [r2, r3]
 8004386:	e01d      	b.n	80043c4 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004388:	79fa      	ldrb	r2, [r7, #7]
 800438a:	79bb      	ldrb	r3, [r7, #6]
 800438c:	08db      	lsrs	r3, r3, #3
 800438e:	b2d8      	uxtb	r0, r3
 8004390:	4603      	mov	r3, r0
 8004392:	01db      	lsls	r3, r3, #7
 8004394:	4413      	add	r3, r2
 8004396:	4a0d      	ldr	r2, [pc, #52]	; (80043cc <ssd1306_DrawPixel+0xa0>)
 8004398:	5cd3      	ldrb	r3, [r2, r3]
 800439a:	b25a      	sxtb	r2, r3
 800439c:	79bb      	ldrb	r3, [r7, #6]
 800439e:	f003 0307 	and.w	r3, r3, #7
 80043a2:	2101      	movs	r1, #1
 80043a4:	fa01 f303 	lsl.w	r3, r1, r3
 80043a8:	b25b      	sxtb	r3, r3
 80043aa:	43db      	mvns	r3, r3
 80043ac:	b25b      	sxtb	r3, r3
 80043ae:	4013      	ands	r3, r2
 80043b0:	b259      	sxtb	r1, r3
 80043b2:	79fa      	ldrb	r2, [r7, #7]
 80043b4:	4603      	mov	r3, r0
 80043b6:	01db      	lsls	r3, r3, #7
 80043b8:	4413      	add	r3, r2
 80043ba:	b2c9      	uxtb	r1, r1
 80043bc:	4a03      	ldr	r2, [pc, #12]	; (80043cc <ssd1306_DrawPixel+0xa0>)
 80043be:	54d1      	strb	r1, [r2, r3]
 80043c0:	e000      	b.n	80043c4 <ssd1306_DrawPixel+0x98>
        return;
 80043c2:	bf00      	nop
    }
}
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	20007c7c 	.word	0x20007c7c

080043d0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b089      	sub	sp, #36	; 0x24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4604      	mov	r4, r0
 80043d8:	1d38      	adds	r0, r7, #4
 80043da:	e880 0006 	stmia.w	r0, {r1, r2}
 80043de:	461a      	mov	r2, r3
 80043e0:	4623      	mov	r3, r4
 80043e2:	73fb      	strb	r3, [r7, #15]
 80043e4:	4613      	mov	r3, r2
 80043e6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b1f      	cmp	r3, #31
 80043ec:	d902      	bls.n	80043f4 <ssd1306_WriteChar+0x24>
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b7e      	cmp	r3, #126	; 0x7e
 80043f2:	d901      	bls.n	80043f8 <ssd1306_WriteChar+0x28>
        return 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e06d      	b.n	80044d4 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80043f8:	4b38      	ldr	r3, [pc, #224]	; (80044dc <ssd1306_WriteChar+0x10c>)
 80043fa:	881b      	ldrh	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	793b      	ldrb	r3, [r7, #4]
 8004400:	4413      	add	r3, r2
 8004402:	2b80      	cmp	r3, #128	; 0x80
 8004404:	dc06      	bgt.n	8004414 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8004406:	4b35      	ldr	r3, [pc, #212]	; (80044dc <ssd1306_WriteChar+0x10c>)
 8004408:	885b      	ldrh	r3, [r3, #2]
 800440a:	461a      	mov	r2, r3
 800440c:	797b      	ldrb	r3, [r7, #5]
 800440e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8004410:	2b20      	cmp	r3, #32
 8004412:	dd01      	ble.n	8004418 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8004414:	2300      	movs	r3, #0
 8004416:	e05d      	b.n	80044d4 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8004418:	2300      	movs	r3, #0
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	e04c      	b.n	80044b8 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	3b20      	subs	r3, #32
 8004424:	7979      	ldrb	r1, [r7, #5]
 8004426:	fb01 f303 	mul.w	r3, r1, r3
 800442a:	4619      	mov	r1, r3
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	440b      	add	r3, r1
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	4413      	add	r3, r2
 8004434:	881b      	ldrh	r3, [r3, #0]
 8004436:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8004438:	2300      	movs	r3, #0
 800443a:	61bb      	str	r3, [r7, #24]
 800443c:	e034      	b.n	80044a8 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	69bb      	ldr	r3, [r7, #24]
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d012      	beq.n	8004474 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800444e:	4b23      	ldr	r3, [pc, #140]	; (80044dc <ssd1306_WriteChar+0x10c>)
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b2da      	uxtb	r2, r3
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	4413      	add	r3, r2
 800445a:	b2d8      	uxtb	r0, r3
 800445c:	4b1f      	ldr	r3, [pc, #124]	; (80044dc <ssd1306_WriteChar+0x10c>)
 800445e:	885b      	ldrh	r3, [r3, #2]
 8004460:	b2da      	uxtb	r2, r3
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	b2db      	uxtb	r3, r3
 8004466:	4413      	add	r3, r2
 8004468:	b2db      	uxtb	r3, r3
 800446a:	7bba      	ldrb	r2, [r7, #14]
 800446c:	4619      	mov	r1, r3
 800446e:	f7ff ff5d 	bl	800432c <ssd1306_DrawPixel>
 8004472:	e016      	b.n	80044a2 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004474:	4b19      	ldr	r3, [pc, #100]	; (80044dc <ssd1306_WriteChar+0x10c>)
 8004476:	881b      	ldrh	r3, [r3, #0]
 8004478:	b2da      	uxtb	r2, r3
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	4413      	add	r3, r2
 8004480:	b2d8      	uxtb	r0, r3
 8004482:	4b16      	ldr	r3, [pc, #88]	; (80044dc <ssd1306_WriteChar+0x10c>)
 8004484:	885b      	ldrh	r3, [r3, #2]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	b2db      	uxtb	r3, r3
 800448c:	4413      	add	r3, r2
 800448e:	b2d9      	uxtb	r1, r3
 8004490:	7bbb      	ldrb	r3, [r7, #14]
 8004492:	2b00      	cmp	r3, #0
 8004494:	bf0c      	ite	eq
 8004496:	2301      	moveq	r3, #1
 8004498:	2300      	movne	r3, #0
 800449a:	b2db      	uxtb	r3, r3
 800449c:	461a      	mov	r2, r3
 800449e:	f7ff ff45 	bl	800432c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	3301      	adds	r3, #1
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	793b      	ldrb	r3, [r7, #4]
 80044aa:	461a      	mov	r2, r3
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d3c5      	bcc.n	800443e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3301      	adds	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
 80044b8:	797b      	ldrb	r3, [r7, #5]
 80044ba:	461a      	mov	r2, r3
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	4293      	cmp	r3, r2
 80044c0:	d3ad      	bcc.n	800441e <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80044c2:	4b06      	ldr	r3, [pc, #24]	; (80044dc <ssd1306_WriteChar+0x10c>)
 80044c4:	881a      	ldrh	r2, [r3, #0]
 80044c6:	793b      	ldrb	r3, [r7, #4]
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	4413      	add	r3, r2
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	4b03      	ldr	r3, [pc, #12]	; (80044dc <ssd1306_WriteChar+0x10c>)
 80044d0:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3724      	adds	r7, #36	; 0x24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd90      	pop	{r4, r7, pc}
 80044dc:	20007e7c 	.word	0x20007e7c

080044e0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	1d38      	adds	r0, r7, #4
 80044ea:	e880 0006 	stmia.w	r0, {r1, r2}
 80044ee:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80044f0:	e012      	b.n	8004518 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	7818      	ldrb	r0, [r3, #0]
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	1d3a      	adds	r2, r7, #4
 80044fa:	ca06      	ldmia	r2, {r1, r2}
 80044fc:	f7ff ff68 	bl	80043d0 <ssd1306_WriteChar>
 8004500:	4603      	mov	r3, r0
 8004502:	461a      	mov	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	781b      	ldrb	r3, [r3, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d002      	beq.n	8004512 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	e008      	b.n	8004524 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3301      	adds	r3, #1
 8004516:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e8      	bne.n	80044f2 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	781b      	ldrb	r3, [r3, #0]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004536:	2381      	movs	r3, #129	; 0x81
 8004538:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff fe0f 	bl	8004160 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004542:	79fb      	ldrb	r3, [r7, #7]
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fe0b 	bl	8004160 <ssd1306_WriteCommand>
}
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800455e:	79fb      	ldrb	r3, [r7, #7]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004564:	23af      	movs	r3, #175	; 0xaf
 8004566:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004568:	4b08      	ldr	r3, [pc, #32]	; (800458c <ssd1306_SetDisplayOn+0x38>)
 800456a:	2201      	movs	r2, #1
 800456c:	715a      	strb	r2, [r3, #5]
 800456e:	e004      	b.n	800457a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004570:	23ae      	movs	r3, #174	; 0xae
 8004572:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004574:	4b05      	ldr	r3, [pc, #20]	; (800458c <ssd1306_SetDisplayOn+0x38>)
 8004576:	2200      	movs	r2, #0
 8004578:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff fdef 	bl	8004160 <ssd1306_WriteCommand>
}
 8004582:	bf00      	nop
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	20007e7c 	.word	0x20007e7c

08004590 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004596:	4b15      	ldr	r3, [pc, #84]	; (80045ec <HAL_MspInit+0x5c>)
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	4a14      	ldr	r2, [pc, #80]	; (80045ec <HAL_MspInit+0x5c>)
 800459c:	f043 0301 	orr.w	r3, r3, #1
 80045a0:	6193      	str	r3, [r2, #24]
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <HAL_MspInit+0x5c>)
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	60bb      	str	r3, [r7, #8]
 80045ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <HAL_MspInit+0x5c>)
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	4a0e      	ldr	r2, [pc, #56]	; (80045ec <HAL_MspInit+0x5c>)
 80045b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b8:	61d3      	str	r3, [r2, #28]
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <HAL_MspInit+0x5c>)
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c2:	607b      	str	r3, [r7, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_MspInit+0x60>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	4a04      	ldr	r2, [pc, #16]	; (80045f0 <HAL_MspInit+0x60>)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045e2:	bf00      	nop
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40010000 	.word	0x40010000

080045f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b08a      	sub	sp, #40	; 0x28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045fc:	f107 0314 	add.w	r3, r7, #20
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	605a      	str	r2, [r3, #4]
 8004606:	609a      	str	r2, [r3, #8]
 8004608:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <HAL_I2C_MspInit+0x90>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d132      	bne.n	800467a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004614:	4b1c      	ldr	r3, [pc, #112]	; (8004688 <HAL_I2C_MspInit+0x94>)
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <HAL_I2C_MspInit+0x94>)
 800461a:	f043 0308 	orr.w	r3, r3, #8
 800461e:	6193      	str	r3, [r2, #24]
 8004620:	4b19      	ldr	r3, [pc, #100]	; (8004688 <HAL_I2C_MspInit+0x94>)
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800462c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004632:	2312      	movs	r3, #18
 8004634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004636:	2303      	movs	r3, #3
 8004638:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800463a:	f107 0314 	add.w	r3, r7, #20
 800463e:	4619      	mov	r1, r3
 8004640:	4812      	ldr	r0, [pc, #72]	; (800468c <HAL_I2C_MspInit+0x98>)
 8004642:	f001 fa23 	bl	8005a8c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8004646:	4b12      	ldr	r3, [pc, #72]	; (8004690 <HAL_I2C_MspInit+0x9c>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004652:	627b      	str	r3, [r7, #36]	; 0x24
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	f043 0302 	orr.w	r3, r3, #2
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
 800465c:	4a0c      	ldr	r2, [pc, #48]	; (8004690 <HAL_I2C_MspInit+0x9c>)
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004662:	4b09      	ldr	r3, [pc, #36]	; (8004688 <HAL_I2C_MspInit+0x94>)
 8004664:	69db      	ldr	r3, [r3, #28]
 8004666:	4a08      	ldr	r2, [pc, #32]	; (8004688 <HAL_I2C_MspInit+0x94>)
 8004668:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800466c:	61d3      	str	r3, [r2, #28]
 800466e:	4b06      	ldr	r3, [pc, #24]	; (8004688 <HAL_I2C_MspInit+0x94>)
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800467a:	bf00      	nop
 800467c:	3728      	adds	r7, #40	; 0x28
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40005400 	.word	0x40005400
 8004688:	40021000 	.word	0x40021000
 800468c:	40010c00 	.word	0x40010c00
 8004690:	40010000 	.word	0x40010000

08004694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a1f      	ldr	r2, [pc, #124]	; (8004720 <HAL_TIM_Base_MspInit+0x8c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d10c      	bne.n	80046c0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046a6:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <HAL_TIM_Base_MspInit+0x90>)
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	4a1e      	ldr	r2, [pc, #120]	; (8004724 <HAL_TIM_Base_MspInit+0x90>)
 80046ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80046b0:	6193      	str	r3, [r2, #24]
 80046b2:	4b1c      	ldr	r3, [pc, #112]	; (8004724 <HAL_TIM_Base_MspInit+0x90>)
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80046be:	e02a      	b.n	8004716 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a18      	ldr	r2, [pc, #96]	; (8004728 <HAL_TIM_Base_MspInit+0x94>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d114      	bne.n	80046f4 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80046ca:	4b16      	ldr	r3, [pc, #88]	; (8004724 <HAL_TIM_Base_MspInit+0x90>)
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	4a15      	ldr	r2, [pc, #84]	; (8004724 <HAL_TIM_Base_MspInit+0x90>)
 80046d0:	f043 0310 	orr.w	r3, r3, #16
 80046d4:	61d3      	str	r3, [r2, #28]
 80046d6:	4b13      	ldr	r3, [pc, #76]	; (8004724 <HAL_TIM_Base_MspInit+0x90>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 80046e2:	2200      	movs	r2, #0
 80046e4:	2101      	movs	r1, #1
 80046e6:	2036      	movs	r0, #54	; 0x36
 80046e8:	f000 fd17 	bl	800511a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80046ec:	2036      	movs	r0, #54	; 0x36
 80046ee:	f000 fd30 	bl	8005152 <HAL_NVIC_EnableIRQ>
}
 80046f2:	e010      	b.n	8004716 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a0c      	ldr	r2, [pc, #48]	; (800472c <HAL_TIM_Base_MspInit+0x98>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d10b      	bne.n	8004716 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <HAL_TIM_Base_MspInit+0x90>)
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	4a08      	ldr	r2, [pc, #32]	; (8004724 <HAL_TIM_Base_MspInit+0x90>)
 8004704:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004708:	6193      	str	r3, [r2, #24]
 800470a:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_TIM_Base_MspInit+0x90>)
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004712:	60fb      	str	r3, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
}
 8004716:	bf00      	nop
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40012c00 	.word	0x40012c00
 8004724:	40021000 	.word	0x40021000
 8004728:	40001000 	.word	0x40001000
 800472c:	40013400 	.word	0x40013400

08004730 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b090      	sub	sp, #64	; 0x40
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004738:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800473c:	2200      	movs	r2, #0
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	605a      	str	r2, [r3, #4]
 8004742:	609a      	str	r2, [r3, #8]
 8004744:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800474e:	d14f      	bne.n	80047f0 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004750:	4b68      	ldr	r3, [pc, #416]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	4a67      	ldr	r2, [pc, #412]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004756:	f043 0301 	orr.w	r3, r3, #1
 800475a:	61d3      	str	r3, [r2, #28]
 800475c:	4b65      	ldr	r3, [pc, #404]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800475e:	69db      	ldr	r3, [r3, #28]
 8004760:	f003 0301 	and.w	r3, r3, #1
 8004764:	62bb      	str	r3, [r7, #40]	; 0x28
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004768:	4b62      	ldr	r3, [pc, #392]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	4a61      	ldr	r2, [pc, #388]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800476e:	f043 0304 	orr.w	r3, r3, #4
 8004772:	6193      	str	r3, [r2, #24]
 8004774:	4b5f      	ldr	r3, [pc, #380]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
 800477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004780:	4b5c      	ldr	r3, [pc, #368]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	4a5b      	ldr	r2, [pc, #364]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004786:	f043 0308 	orr.w	r3, r3, #8
 800478a:	6193      	str	r3, [r2, #24]
 800478c:	4b59      	ldr	r3, [pc, #356]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f003 0308 	and.w	r3, r3, #8
 8004794:	623b      	str	r3, [r7, #32]
 8004796:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004798:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800479e:	2300      	movs	r3, #0
 80047a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047aa:	4619      	mov	r1, r3
 80047ac:	4852      	ldr	r0, [pc, #328]	; (80048f8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80047ae:	f001 f96d 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80047b2:	2308      	movs	r3, #8
 80047b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047b6:	2300      	movs	r3, #0
 80047b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80047c2:	4619      	mov	r1, r3
 80047c4:	484d      	ldr	r0, [pc, #308]	; (80048fc <HAL_TIM_Encoder_MspInit+0x1cc>)
 80047c6:	f001 f961 	bl	8005a8c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 80047ca:	4b4d      	ldr	r3, [pc, #308]	; (8004900 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047da:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80047de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047e8:	4a45      	ldr	r2, [pc, #276]	; (8004900 <HAL_TIM_Encoder_MspInit+0x1d0>)
 80047ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ec:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80047ee:	e07c      	b.n	80048ea <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a43      	ldr	r2, [pc, #268]	; (8004904 <HAL_TIM_Encoder_MspInit+0x1d4>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d124      	bne.n	8004844 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80047fa:	4b3e      	ldr	r3, [pc, #248]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	4a3d      	ldr	r2, [pc, #244]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004800:	f043 0302 	orr.w	r3, r3, #2
 8004804:	61d3      	str	r3, [r2, #28]
 8004806:	4b3b      	ldr	r3, [pc, #236]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004812:	4b38      	ldr	r3, [pc, #224]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	4a37      	ldr	r2, [pc, #220]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004818:	f043 0304 	orr.w	r3, r3, #4
 800481c:	6193      	str	r3, [r2, #24]
 800481e:	4b35      	ldr	r3, [pc, #212]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f003 0304 	and.w	r3, r3, #4
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800482a:	23c0      	movs	r3, #192	; 0xc0
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800482e:	2300      	movs	r3, #0
 8004830:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004832:	2300      	movs	r3, #0
 8004834:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004836:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800483a:	4619      	mov	r1, r3
 800483c:	482e      	ldr	r0, [pc, #184]	; (80048f8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 800483e:	f001 f925 	bl	8005a8c <HAL_GPIO_Init>
}
 8004842:	e052      	b.n	80048ea <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a2f      	ldr	r2, [pc, #188]	; (8004908 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d124      	bne.n	8004898 <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800484e:	4b29      	ldr	r3, [pc, #164]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	4a28      	ldr	r2, [pc, #160]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004854:	f043 0304 	orr.w	r3, r3, #4
 8004858:	61d3      	str	r3, [r2, #28]
 800485a:	4b26      	ldr	r3, [pc, #152]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004866:	4b23      	ldr	r3, [pc, #140]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	4a22      	ldr	r2, [pc, #136]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800486c:	f043 0308 	orr.w	r3, r3, #8
 8004870:	6193      	str	r3, [r2, #24]
 8004872:	4b20      	ldr	r3, [pc, #128]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	613b      	str	r3, [r7, #16]
 800487c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800487e:	23c0      	movs	r3, #192	; 0xc0
 8004880:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004882:	2300      	movs	r3, #0
 8004884:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004886:	2300      	movs	r3, #0
 8004888:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800488a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800488e:	4619      	mov	r1, r3
 8004890:	481a      	ldr	r0, [pc, #104]	; (80048fc <HAL_TIM_Encoder_MspInit+0x1cc>)
 8004892:	f001 f8fb 	bl	8005a8c <HAL_GPIO_Init>
}
 8004896:	e028      	b.n	80048ea <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1b      	ldr	r2, [pc, #108]	; (800490c <HAL_TIM_Encoder_MspInit+0x1dc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d123      	bne.n	80048ea <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80048a2:	4b14      	ldr	r3, [pc, #80]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80048a8:	f043 0308 	orr.w	r3, r3, #8
 80048ac:	61d3      	str	r3, [r2, #28]
 80048ae:	4b11      	ldr	r3, [pc, #68]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ba:	4b0e      	ldr	r3, [pc, #56]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	4a0d      	ldr	r2, [pc, #52]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80048c0:	f043 0304 	orr.w	r3, r3, #4
 80048c4:	6193      	str	r3, [r2, #24]
 80048c6:	4b0b      	ldr	r3, [pc, #44]	; (80048f4 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80048d2:	2303      	movs	r3, #3
 80048d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048d6:	2300      	movs	r3, #0
 80048d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80048e2:	4619      	mov	r1, r3
 80048e4:	4804      	ldr	r0, [pc, #16]	; (80048f8 <HAL_TIM_Encoder_MspInit+0x1c8>)
 80048e6:	f001 f8d1 	bl	8005a8c <HAL_GPIO_Init>
}
 80048ea:	bf00      	nop
 80048ec:	3740      	adds	r7, #64	; 0x40
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40021000 	.word	0x40021000
 80048f8:	40010800 	.word	0x40010800
 80048fc:	40010c00 	.word	0x40010c00
 8004900:	40010000 	.word	0x40010000
 8004904:	40000400 	.word	0x40000400
 8004908:	40000800 	.word	0x40000800
 800490c:	40000c00 	.word	0x40000c00

08004910 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b088      	sub	sp, #32
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004918:	f107 0310 	add.w	r3, r7, #16
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a1f      	ldr	r2, [pc, #124]	; (80049a8 <HAL_TIM_MspPostInit+0x98>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d119      	bne.n	8004964 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004930:	4b1e      	ldr	r3, [pc, #120]	; (80049ac <HAL_TIM_MspPostInit+0x9c>)
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	4a1d      	ldr	r2, [pc, #116]	; (80049ac <HAL_TIM_MspPostInit+0x9c>)
 8004936:	f043 0304 	orr.w	r3, r3, #4
 800493a:	6193      	str	r3, [r2, #24]
 800493c:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <HAL_TIM_MspPostInit+0x9c>)
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004948:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800494c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800494e:	2302      	movs	r3, #2
 8004950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004952:	2302      	movs	r3, #2
 8004954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004956:	f107 0310 	add.w	r3, r7, #16
 800495a:	4619      	mov	r1, r3
 800495c:	4814      	ldr	r0, [pc, #80]	; (80049b0 <HAL_TIM_MspPostInit+0xa0>)
 800495e:	f001 f895 	bl	8005a8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004962:	e01d      	b.n	80049a0 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a12      	ldr	r2, [pc, #72]	; (80049b4 <HAL_TIM_MspPostInit+0xa4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d118      	bne.n	80049a0 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800496e:	4b0f      	ldr	r3, [pc, #60]	; (80049ac <HAL_TIM_MspPostInit+0x9c>)
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	4a0e      	ldr	r2, [pc, #56]	; (80049ac <HAL_TIM_MspPostInit+0x9c>)
 8004974:	f043 0310 	orr.w	r3, r3, #16
 8004978:	6193      	str	r3, [r2, #24]
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <HAL_TIM_MspPostInit+0x9c>)
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	60bb      	str	r3, [r7, #8]
 8004984:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004986:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800498a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498c:	2302      	movs	r3, #2
 800498e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004990:	2302      	movs	r3, #2
 8004992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004994:	f107 0310 	add.w	r3, r7, #16
 8004998:	4619      	mov	r1, r3
 800499a:	4807      	ldr	r0, [pc, #28]	; (80049b8 <HAL_TIM_MspPostInit+0xa8>)
 800499c:	f001 f876 	bl	8005a8c <HAL_GPIO_Init>
}
 80049a0:	bf00      	nop
 80049a2:	3720      	adds	r7, #32
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40012c00 	.word	0x40012c00
 80049ac:	40021000 	.word	0x40021000
 80049b0:	40010800 	.word	0x40010800
 80049b4:	40013400 	.word	0x40013400
 80049b8:	40011000 	.word	0x40011000

080049bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08c      	sub	sp, #48	; 0x30
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c4:	f107 031c 	add.w	r3, r7, #28
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	609a      	str	r2, [r3, #8]
 80049d0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a6a      	ldr	r2, [pc, #424]	; (8004b80 <HAL_UART_MspInit+0x1c4>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d156      	bne.n	8004a8a <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80049dc:	4b69      	ldr	r3, [pc, #420]	; (8004b84 <HAL_UART_MspInit+0x1c8>)
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	4a68      	ldr	r2, [pc, #416]	; (8004b84 <HAL_UART_MspInit+0x1c8>)
 80049e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049e6:	61d3      	str	r3, [r2, #28]
 80049e8:	4b66      	ldr	r3, [pc, #408]	; (8004b84 <HAL_UART_MspInit+0x1c8>)
 80049ea:	69db      	ldr	r3, [r3, #28]
 80049ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049f4:	4b63      	ldr	r3, [pc, #396]	; (8004b84 <HAL_UART_MspInit+0x1c8>)
 80049f6:	699b      	ldr	r3, [r3, #24]
 80049f8:	4a62      	ldr	r2, [pc, #392]	; (8004b84 <HAL_UART_MspInit+0x1c8>)
 80049fa:	f043 0304 	orr.w	r3, r3, #4
 80049fe:	6193      	str	r3, [r2, #24]
 8004a00:	4b60      	ldr	r3, [pc, #384]	; (8004b84 <HAL_UART_MspInit+0x1c8>)
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a10:	2302      	movs	r3, #2
 8004a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a14:	2303      	movs	r3, #3
 8004a16:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 8004a18:	f107 031c 	add.w	r3, r7, #28
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	485a      	ldr	r0, [pc, #360]	; (8004b88 <HAL_UART_MspInit+0x1cc>)
 8004a20:	f001 f834 	bl	8005a8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 8004a24:	2308      	movs	r3, #8
 8004a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8004a30:	f107 031c 	add.w	r3, r7, #28
 8004a34:	4619      	mov	r1, r3
 8004a36:	4854      	ldr	r0, [pc, #336]	; (8004b88 <HAL_UART_MspInit+0x1cc>)
 8004a38:	f001 f828 	bl	8005a8c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8004a3c:	4b53      	ldr	r3, [pc, #332]	; (8004b8c <HAL_UART_MspInit+0x1d0>)
 8004a3e:	4a54      	ldr	r2, [pc, #336]	; (8004b90 <HAL_UART_MspInit+0x1d4>)
 8004a40:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004a42:	4b52      	ldr	r3, [pc, #328]	; (8004b8c <HAL_UART_MspInit+0x1d0>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004a48:	4b50      	ldr	r3, [pc, #320]	; (8004b8c <HAL_UART_MspInit+0x1d0>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004a4e:	4b4f      	ldr	r3, [pc, #316]	; (8004b8c <HAL_UART_MspInit+0x1d0>)
 8004a50:	2280      	movs	r2, #128	; 0x80
 8004a52:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004a54:	4b4d      	ldr	r3, [pc, #308]	; (8004b8c <HAL_UART_MspInit+0x1d0>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004a5a:	4b4c      	ldr	r3, [pc, #304]	; (8004b8c <HAL_UART_MspInit+0x1d0>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004a60:	4b4a      	ldr	r3, [pc, #296]	; (8004b8c <HAL_UART_MspInit+0x1d0>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004a66:	4b49      	ldr	r3, [pc, #292]	; (8004b8c <HAL_UART_MspInit+0x1d0>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004a6c:	4847      	ldr	r0, [pc, #284]	; (8004b8c <HAL_UART_MspInit+0x1d0>)
 8004a6e:	f000 fb8b 	bl	8005188 <HAL_DMA_Init>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8004a78:	f7ff f9aa 	bl	8003dd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a43      	ldr	r2, [pc, #268]	; (8004b8c <HAL_UART_MspInit+0x1d0>)
 8004a80:	639a      	str	r2, [r3, #56]	; 0x38
 8004a82:	4a42      	ldr	r2, [pc, #264]	; (8004b8c <HAL_UART_MspInit+0x1d0>)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004a88:	e076      	b.n	8004b78 <HAL_UART_MspInit+0x1bc>
  else if(huart->Instance==USART3)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a41      	ldr	r2, [pc, #260]	; (8004b94 <HAL_UART_MspInit+0x1d8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d171      	bne.n	8004b78 <HAL_UART_MspInit+0x1bc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004a94:	4b3b      	ldr	r3, [pc, #236]	; (8004b84 <HAL_UART_MspInit+0x1c8>)
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	4a3a      	ldr	r2, [pc, #232]	; (8004b84 <HAL_UART_MspInit+0x1c8>)
 8004a9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a9e:	61d3      	str	r3, [r2, #28]
 8004aa0:	4b38      	ldr	r3, [pc, #224]	; (8004b84 <HAL_UART_MspInit+0x1c8>)
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004aa8:	613b      	str	r3, [r7, #16]
 8004aaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aac:	4b35      	ldr	r3, [pc, #212]	; (8004b84 <HAL_UART_MspInit+0x1c8>)
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	4a34      	ldr	r2, [pc, #208]	; (8004b84 <HAL_UART_MspInit+0x1c8>)
 8004ab2:	f043 0310 	orr.w	r3, r3, #16
 8004ab6:	6193      	str	r3, [r2, #24]
 8004ab8:	4b32      	ldr	r3, [pc, #200]	; (8004b84 <HAL_UART_MspInit+0x1c8>)
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	f003 0310 	and.w	r3, r3, #16
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8004ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aca:	2302      	movs	r3, #2
 8004acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8004ad2:	f107 031c 	add.w	r3, r7, #28
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	482f      	ldr	r0, [pc, #188]	; (8004b98 <HAL_UART_MspInit+0x1dc>)
 8004ada:	f000 ffd7 	bl	8005a8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 8004ade:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8004aec:	f107 031c 	add.w	r3, r7, #28
 8004af0:	4619      	mov	r1, r3
 8004af2:	4829      	ldr	r0, [pc, #164]	; (8004b98 <HAL_UART_MspInit+0x1dc>)
 8004af4:	f000 ffca 	bl	8005a8c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8004af8:	4b28      	ldr	r3, [pc, #160]	; (8004b9c <HAL_UART_MspInit+0x1e0>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b00:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	f043 0310 	orr.w	r3, r3, #16
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b16:	4a21      	ldr	r2, [pc, #132]	; (8004b9c <HAL_UART_MspInit+0x1e0>)
 8004b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1a:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004b1c:	4b20      	ldr	r3, [pc, #128]	; (8004ba0 <HAL_UART_MspInit+0x1e4>)
 8004b1e:	4a21      	ldr	r2, [pc, #132]	; (8004ba4 <HAL_UART_MspInit+0x1e8>)
 8004b20:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b22:	4b1f      	ldr	r3, [pc, #124]	; (8004ba0 <HAL_UART_MspInit+0x1e4>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b28:	4b1d      	ldr	r3, [pc, #116]	; (8004ba0 <HAL_UART_MspInit+0x1e4>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ba0 <HAL_UART_MspInit+0x1e4>)
 8004b30:	2280      	movs	r2, #128	; 0x80
 8004b32:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b34:	4b1a      	ldr	r3, [pc, #104]	; (8004ba0 <HAL_UART_MspInit+0x1e4>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b3a:	4b19      	ldr	r3, [pc, #100]	; (8004ba0 <HAL_UART_MspInit+0x1e4>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004b40:	4b17      	ldr	r3, [pc, #92]	; (8004ba0 <HAL_UART_MspInit+0x1e4>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b46:	4b16      	ldr	r3, [pc, #88]	; (8004ba0 <HAL_UART_MspInit+0x1e4>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004b4c:	4814      	ldr	r0, [pc, #80]	; (8004ba0 <HAL_UART_MspInit+0x1e4>)
 8004b4e:	f000 fb1b 	bl	8005188 <HAL_DMA_Init>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 8004b58:	f7ff f93a 	bl	8003dd0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <HAL_UART_MspInit+0x1e4>)
 8004b60:	639a      	str	r2, [r3, #56]	; 0x38
 8004b62:	4a0f      	ldr	r2, [pc, #60]	; (8004ba0 <HAL_UART_MspInit+0x1e4>)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 2, 0);
 8004b68:	2200      	movs	r2, #0
 8004b6a:	2102      	movs	r1, #2
 8004b6c:	2027      	movs	r0, #39	; 0x27
 8004b6e:	f000 fad4 	bl	800511a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004b72:	2027      	movs	r0, #39	; 0x27
 8004b74:	f000 faed 	bl	8005152 <HAL_NVIC_EnableIRQ>
}
 8004b78:	bf00      	nop
 8004b7a:	3730      	adds	r7, #48	; 0x30
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	40004400 	.word	0x40004400
 8004b84:	40021000 	.word	0x40021000
 8004b88:	40010800 	.word	0x40010800
 8004b8c:	2000090c 	.word	0x2000090c
 8004b90:	4002006c 	.word	0x4002006c
 8004b94:	40004800 	.word	0x40004800
 8004b98:	40011000 	.word	0x40011000
 8004b9c:	40010000 	.word	0x40010000
 8004ba0:	20000950 	.word	0x20000950
 8004ba4:	40020030 	.word	0x40020030

08004ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8004bac:	e7fe      	b.n	8004bac <NMI_Handler+0x4>

08004bae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bb2:	e7fe      	b.n	8004bb2 <HardFault_Handler+0x4>

08004bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004bb8:	e7fe      	b.n	8004bb8 <MemManage_Handler+0x4>

08004bba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bbe:	e7fe      	b.n	8004bbe <BusFault_Handler+0x4>

08004bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bc4:	e7fe      	b.n	8004bc4 <UsageFault_Handler+0x4>

08004bc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bca:	bf00      	nop
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bc80      	pop	{r7}
 8004bd0:	4770      	bx	lr

08004bd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bd2:	b480      	push	{r7}
 8004bd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bd6:	bf00      	nop
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bc80      	pop	{r7}
 8004bdc:	4770      	bx	lr

08004bde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bde:	b480      	push	{r7}
 8004be0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004be2:	bf00      	nop
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bc80      	pop	{r7}
 8004be8:	4770      	bx	lr

08004bea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bee:	f000 f97d 	bl	8004eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
	...

08004bf8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004bfc:	4802      	ldr	r0, [pc, #8]	; (8004c08 <DMA1_Channel3_IRQHandler+0x10>)
 8004bfe:	f000 fcdb 	bl	80055b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004c02:	bf00      	nop
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000950 	.word	0x20000950

08004c0c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if (hxb.nextPackageID == 0x00)
 8004c10:	4b07      	ldr	r3, [pc, #28]	; (8004c30 <DMA1_Channel6_IRQHandler+0x24>)
 8004c12:	7a1b      	ldrb	r3, [r3, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d103      	bne.n	8004c20 <DMA1_Channel6_IRQHandler+0x14>
		huansic_xb_decodeHeader(&hxb);
 8004c18:	4805      	ldr	r0, [pc, #20]	; (8004c30 <DMA1_Channel6_IRQHandler+0x24>)
 8004c1a:	f7fd fdd7 	bl	80027cc <huansic_xb_decodeHeader>
 8004c1e:	e002      	b.n	8004c26 <DMA1_Channel6_IRQHandler+0x1a>
	else
		huansic_xb_decodeBody(&hxb);
 8004c20:	4803      	ldr	r0, [pc, #12]	; (8004c30 <DMA1_Channel6_IRQHandler+0x24>)
 8004c22:	f7fd fe11 	bl	8002848 <huansic_xb_decodeBody>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004c26:	4803      	ldr	r0, [pc, #12]	; (8004c34 <DMA1_Channel6_IRQHandler+0x28>)
 8004c28:	f000 fcc6 	bl	80055b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8004c2c:	bf00      	nop
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	20000adc 	.word	0x20000adc
 8004c34:	2000090c 	.word	0x2000090c

08004c38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004c3c:	4802      	ldr	r0, [pc, #8]	; (8004c48 <USART3_IRQHandler+0x10>)
 8004c3e:	f003 fbdf 	bl	8008400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004c42:	bf00      	nop
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	200008c8 	.word	0x200008c8

08004c4c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 8004c50:	4808      	ldr	r0, [pc, #32]	; (8004c74 <TIM6_IRQHandler+0x28>)
 8004c52:	f7fd fc6b 	bl	800252c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 8004c56:	4808      	ldr	r0, [pc, #32]	; (8004c78 <TIM6_IRQHandler+0x2c>)
 8004c58:	f7fd fc68 	bl	800252c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 8004c5c:	4807      	ldr	r0, [pc, #28]	; (8004c7c <TIM6_IRQHandler+0x30>)
 8004c5e:	f7fd fc65 	bl	800252c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 8004c62:	4807      	ldr	r0, [pc, #28]	; (8004c80 <TIM6_IRQHandler+0x34>)
 8004c64:	f7fd fc62 	bl	800252c <huansic_motor_pid>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004c68:	4806      	ldr	r0, [pc, #24]	; (8004c84 <TIM6_IRQHandler+0x38>)
 8004c6a:	f002 fc23 	bl	80074b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8004c6e:	bf00      	nop
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000994 	.word	0x20000994
 8004c78:	200009d0 	.word	0x200009d0
 8004c7c:	20000a0c 	.word	0x20000a0c
 8004c80:	20000a48 	.word	0x20000a48
 8004c84:	200007f4 	.word	0x200007f4

08004c88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
	return 1;
 8004c8c:	2301      	movs	r3, #1
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr

08004c96 <_kill>:

int _kill(int pid, int sig)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b082      	sub	sp, #8
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004ca0:	f004 f91e 	bl	8008ee0 <__errno>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2216      	movs	r2, #22
 8004ca8:	601a      	str	r2, [r3, #0]
	return -1;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3708      	adds	r7, #8
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <_exit>:

void _exit (int status)
{
 8004cb6:	b580      	push	{r7, lr}
 8004cb8:	b082      	sub	sp, #8
 8004cba:	af00      	add	r7, sp, #0
 8004cbc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004cbe:	f04f 31ff 	mov.w	r1, #4294967295
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f7ff ffe7 	bl	8004c96 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004cc8:	e7fe      	b.n	8004cc8 <_exit+0x12>

08004cca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b086      	sub	sp, #24
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
 8004cda:	e00a      	b.n	8004cf2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004cdc:	f3af 8000 	nop.w
 8004ce0:	4601      	mov	r1, r0
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	60ba      	str	r2, [r7, #8]
 8004ce8:	b2ca      	uxtb	r2, r1
 8004cea:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	dbf0      	blt.n	8004cdc <_read+0x12>
	}

return len;
 8004cfa:	687b      	ldr	r3, [r7, #4]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3718      	adds	r7, #24
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e009      	b.n	8004d2a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	60ba      	str	r2, [r7, #8]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	3301      	adds	r3, #1
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	dbf1      	blt.n	8004d16 <_write+0x12>
	}
	return len;
 8004d32:	687b      	ldr	r3, [r7, #4]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <_close>:

int _close(int file)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	return -1;
 8004d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr

08004d52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
 8004d5a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d62:	605a      	str	r2, [r3, #4]
	return 0;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr

08004d70 <_isatty>:

int _isatty(int file)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	return 1;
 8004d78:	2301      	movs	r3, #1
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr

08004d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b085      	sub	sp, #20
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	607a      	str	r2, [r7, #4]
	return 0;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr

08004d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004da4:	4a14      	ldr	r2, [pc, #80]	; (8004df8 <_sbrk+0x5c>)
 8004da6:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <_sbrk+0x60>)
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004db0:	4b13      	ldr	r3, [pc, #76]	; (8004e00 <_sbrk+0x64>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d102      	bne.n	8004dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004db8:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <_sbrk+0x64>)
 8004dba:	4a12      	ldr	r2, [pc, #72]	; (8004e04 <_sbrk+0x68>)
 8004dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dbe:	4b10      	ldr	r3, [pc, #64]	; (8004e00 <_sbrk+0x64>)
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d207      	bcs.n	8004ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004dcc:	f004 f888 	bl	8008ee0 <__errno>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	220c      	movs	r2, #12
 8004dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dda:	e009      	b.n	8004df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ddc:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <_sbrk+0x64>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004de2:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <_sbrk+0x64>)
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4413      	add	r3, r2
 8004dea:	4a05      	ldr	r2, [pc, #20]	; (8004e00 <_sbrk+0x64>)
 8004dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004dee:	68fb      	ldr	r3, [r7, #12]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	2000c000 	.word	0x2000c000
 8004dfc:	00000400 	.word	0x00000400
 8004e00:	20007e84 	.word	0x20007e84
 8004e04:	20007ea0 	.word	0x20007ea0

08004e08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e0c:	bf00      	nop
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr

08004e14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004e14:	480c      	ldr	r0, [pc, #48]	; (8004e48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004e16:	490d      	ldr	r1, [pc, #52]	; (8004e4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004e18:	4a0d      	ldr	r2, [pc, #52]	; (8004e50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e1c:	e002      	b.n	8004e24 <LoopCopyDataInit>

08004e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e22:	3304      	adds	r3, #4

08004e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e28:	d3f9      	bcc.n	8004e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e2a:	4a0a      	ldr	r2, [pc, #40]	; (8004e54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004e2c:	4c0a      	ldr	r4, [pc, #40]	; (8004e58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e30:	e001      	b.n	8004e36 <LoopFillZerobss>

08004e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e34:	3204      	adds	r2, #4

08004e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e38:	d3fb      	bcc.n	8004e32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004e3a:	f7ff ffe5 	bl	8004e08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e3e:	f004 f867 	bl	8008f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004e42:	f7fe f9ad 	bl	80031a0 <main>
  bx lr
 8004e46:	4770      	bx	lr
  ldr r0, =_sdata
 8004e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e4c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004e50:	0800aa78 	.word	0x0800aa78
  ldr r2, =_sbss
 8004e54:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8004e58:	20007e9c 	.word	0x20007e9c

08004e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004e5c:	e7fe      	b.n	8004e5c <ADC1_2_IRQHandler>
	...

08004e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e64:	4b08      	ldr	r3, [pc, #32]	; (8004e88 <HAL_Init+0x28>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a07      	ldr	r2, [pc, #28]	; (8004e88 <HAL_Init+0x28>)
 8004e6a:	f043 0310 	orr.w	r3, r3, #16
 8004e6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e70:	2003      	movs	r0, #3
 8004e72:	f000 f947 	bl	8005104 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e76:	200f      	movs	r0, #15
 8004e78:	f000 f808 	bl	8004e8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e7c:	f7ff fb88 	bl	8004590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	40022000 	.word	0x40022000

08004e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e94:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <HAL_InitTick+0x54>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <HAL_InitTick+0x58>)
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f95f 	bl	800516e <HAL_SYSTICK_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d001      	beq.n	8004eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e00e      	b.n	8004ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b0f      	cmp	r3, #15
 8004ebe:	d80a      	bhi.n	8004ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	6879      	ldr	r1, [r7, #4]
 8004ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec8:	f000 f927 	bl	800511a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ecc:	4a06      	ldr	r2, [pc, #24]	; (8004ee8 <HAL_InitTick+0x5c>)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	e000      	b.n	8004ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	2000000c 	.word	0x2000000c
 8004ee4:	20000014 	.word	0x20000014
 8004ee8:	20000010 	.word	0x20000010

08004eec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <HAL_IncTick+0x1c>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	4b05      	ldr	r3, [pc, #20]	; (8004f0c <HAL_IncTick+0x20>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4413      	add	r3, r2
 8004efc:	4a03      	ldr	r2, [pc, #12]	; (8004f0c <HAL_IncTick+0x20>)
 8004efe:	6013      	str	r3, [r2, #0]
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr
 8004f08:	20000014 	.word	0x20000014
 8004f0c:	20007e88 	.word	0x20007e88

08004f10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return uwTick;
 8004f14:	4b02      	ldr	r3, [pc, #8]	; (8004f20 <HAL_GetTick+0x10>)
 8004f16:	681b      	ldr	r3, [r3, #0]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr
 8004f20:	20007e88 	.word	0x20007e88

08004f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f2c:	f7ff fff0 	bl	8004f10 <HAL_GetTick>
 8004f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d005      	beq.n	8004f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f3e:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <HAL_Delay+0x44>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4413      	add	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f4a:	bf00      	nop
 8004f4c:	f7ff ffe0 	bl	8004f10 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d8f7      	bhi.n	8004f4c <HAL_Delay+0x28>
  {
  }
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000014 	.word	0x20000014

08004f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f88:	4013      	ands	r3, r2
 8004f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f9e:	4a04      	ldr	r2, [pc, #16]	; (8004fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	60d3      	str	r3, [r2, #12]
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bc80      	pop	{r7}
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	e000ed00 	.word	0xe000ed00

08004fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004fb8:	4b04      	ldr	r3, [pc, #16]	; (8004fcc <__NVIC_GetPriorityGrouping+0x18>)
 8004fba:	68db      	ldr	r3, [r3, #12]
 8004fbc:	0a1b      	lsrs	r3, r3, #8
 8004fbe:	f003 0307 	and.w	r3, r3, #7
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	e000ed00 	.word	0xe000ed00

08004fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	db0b      	blt.n	8004ffa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fe2:	79fb      	ldrb	r3, [r7, #7]
 8004fe4:	f003 021f 	and.w	r2, r3, #31
 8004fe8:	4906      	ldr	r1, [pc, #24]	; (8005004 <__NVIC_EnableIRQ+0x34>)
 8004fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ffa:	bf00      	nop
 8004ffc:	370c      	adds	r7, #12
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr
 8005004:	e000e100 	.word	0xe000e100

08005008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	4603      	mov	r3, r0
 8005010:	6039      	str	r1, [r7, #0]
 8005012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005018:	2b00      	cmp	r3, #0
 800501a:	db0a      	blt.n	8005032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	b2da      	uxtb	r2, r3
 8005020:	490c      	ldr	r1, [pc, #48]	; (8005054 <__NVIC_SetPriority+0x4c>)
 8005022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005026:	0112      	lsls	r2, r2, #4
 8005028:	b2d2      	uxtb	r2, r2
 800502a:	440b      	add	r3, r1
 800502c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005030:	e00a      	b.n	8005048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	b2da      	uxtb	r2, r3
 8005036:	4908      	ldr	r1, [pc, #32]	; (8005058 <__NVIC_SetPriority+0x50>)
 8005038:	79fb      	ldrb	r3, [r7, #7]
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	3b04      	subs	r3, #4
 8005040:	0112      	lsls	r2, r2, #4
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	440b      	add	r3, r1
 8005046:	761a      	strb	r2, [r3, #24]
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	bc80      	pop	{r7}
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	e000e100 	.word	0xe000e100
 8005058:	e000ed00 	.word	0xe000ed00

0800505c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800505c:	b480      	push	{r7}
 800505e:	b089      	sub	sp, #36	; 0x24
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f1c3 0307 	rsb	r3, r3, #7
 8005076:	2b04      	cmp	r3, #4
 8005078:	bf28      	it	cs
 800507a:	2304      	movcs	r3, #4
 800507c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	3304      	adds	r3, #4
 8005082:	2b06      	cmp	r3, #6
 8005084:	d902      	bls.n	800508c <NVIC_EncodePriority+0x30>
 8005086:	69fb      	ldr	r3, [r7, #28]
 8005088:	3b03      	subs	r3, #3
 800508a:	e000      	b.n	800508e <NVIC_EncodePriority+0x32>
 800508c:	2300      	movs	r3, #0
 800508e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005090:	f04f 32ff 	mov.w	r2, #4294967295
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43da      	mvns	r2, r3
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	401a      	ands	r2, r3
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050a4:	f04f 31ff 	mov.w	r1, #4294967295
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	fa01 f303 	lsl.w	r3, r1, r3
 80050ae:	43d9      	mvns	r1, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050b4:	4313      	orrs	r3, r2
         );
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3724      	adds	r7, #36	; 0x24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bc80      	pop	{r7}
 80050be:	4770      	bx	lr

080050c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050d0:	d301      	bcc.n	80050d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050d2:	2301      	movs	r3, #1
 80050d4:	e00f      	b.n	80050f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050d6:	4a0a      	ldr	r2, [pc, #40]	; (8005100 <SysTick_Config+0x40>)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3b01      	subs	r3, #1
 80050dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050de:	210f      	movs	r1, #15
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295
 80050e4:	f7ff ff90 	bl	8005008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050e8:	4b05      	ldr	r3, [pc, #20]	; (8005100 <SysTick_Config+0x40>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ee:	4b04      	ldr	r3, [pc, #16]	; (8005100 <SysTick_Config+0x40>)
 80050f0:	2207      	movs	r2, #7
 80050f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050f4:	2300      	movs	r3, #0
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	e000e010 	.word	0xe000e010

08005104 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff ff2d 	bl	8004f6c <__NVIC_SetPriorityGrouping>
}
 8005112:	bf00      	nop
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800511a:	b580      	push	{r7, lr}
 800511c:	b086      	sub	sp, #24
 800511e:	af00      	add	r7, sp, #0
 8005120:	4603      	mov	r3, r0
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	607a      	str	r2, [r7, #4]
 8005126:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800512c:	f7ff ff42 	bl	8004fb4 <__NVIC_GetPriorityGrouping>
 8005130:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	68b9      	ldr	r1, [r7, #8]
 8005136:	6978      	ldr	r0, [r7, #20]
 8005138:	f7ff ff90 	bl	800505c <NVIC_EncodePriority>
 800513c:	4602      	mov	r2, r0
 800513e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005142:	4611      	mov	r1, r2
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff ff5f 	bl	8005008 <__NVIC_SetPriority>
}
 800514a:	bf00      	nop
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005152:	b580      	push	{r7, lr}
 8005154:	b082      	sub	sp, #8
 8005156:	af00      	add	r7, sp, #0
 8005158:	4603      	mov	r3, r0
 800515a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800515c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005160:	4618      	mov	r0, r3
 8005162:	f7ff ff35 	bl	8004fd0 <__NVIC_EnableIRQ>
}
 8005166:	bf00      	nop
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b082      	sub	sp, #8
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff ffa2 	bl	80050c0 <SysTick_Config>
 800517c:	4603      	mov	r3, r0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3708      	adds	r7, #8
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e059      	b.n	8005252 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	461a      	mov	r2, r3
 80051a4:	4b2d      	ldr	r3, [pc, #180]	; (800525c <HAL_DMA_Init+0xd4>)
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d80f      	bhi.n	80051ca <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	461a      	mov	r2, r3
 80051b0:	4b2b      	ldr	r3, [pc, #172]	; (8005260 <HAL_DMA_Init+0xd8>)
 80051b2:	4413      	add	r3, r2
 80051b4:	4a2b      	ldr	r2, [pc, #172]	; (8005264 <HAL_DMA_Init+0xdc>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	091b      	lsrs	r3, r3, #4
 80051bc:	009a      	lsls	r2, r3, #2
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a28      	ldr	r2, [pc, #160]	; (8005268 <HAL_DMA_Init+0xe0>)
 80051c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80051c8:	e00e      	b.n	80051e8 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	4b26      	ldr	r3, [pc, #152]	; (800526c <HAL_DMA_Init+0xe4>)
 80051d2:	4413      	add	r3, r2
 80051d4:	4a23      	ldr	r2, [pc, #140]	; (8005264 <HAL_DMA_Init+0xdc>)
 80051d6:	fba2 2303 	umull	r2, r3, r2, r3
 80051da:	091b      	lsrs	r3, r3, #4
 80051dc:	009a      	lsls	r2, r3, #2
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a22      	ldr	r2, [pc, #136]	; (8005270 <HAL_DMA_Init+0xe8>)
 80051e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80051fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8005202:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800520c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005218:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005224:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3714      	adds	r7, #20
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr
 800525c:	40020407 	.word	0x40020407
 8005260:	bffdfff8 	.word	0xbffdfff8
 8005264:	cccccccd 	.word	0xcccccccd
 8005268:	40020000 	.word	0x40020000
 800526c:	bffdfbf8 	.word	0xbffdfbf8
 8005270:	40020400 	.word	0x40020400

08005274 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f893 3020 	ldrb.w	r3, [r3, #32]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d101      	bne.n	8005294 <HAL_DMA_Start_IT+0x20>
 8005290:	2302      	movs	r3, #2
 8005292:	e04a      	b.n	800532a <HAL_DMA_Start_IT+0xb6>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d13a      	bne.n	800531c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2202      	movs	r2, #2
 80052aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 0201 	bic.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 fbb0 	bl	8005a30 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d008      	beq.n	80052ea <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 020e 	orr.w	r2, r2, #14
 80052e6:	601a      	str	r2, [r3, #0]
 80052e8:	e00f      	b.n	800530a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 0204 	bic.w	r2, r2, #4
 80052f8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 020a 	orr.w	r2, r2, #10
 8005308:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0201 	orr.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	e005      	b.n	8005328 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005324:	2302      	movs	r3, #2
 8005326:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005328:	7dfb      	ldrb	r3, [r7, #23]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005344:	2b02      	cmp	r3, #2
 8005346:	d008      	beq.n	800535a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2204      	movs	r2, #4
 800534c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e020      	b.n	800539c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 020e 	bic.w	r2, r2, #14
 8005368:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0201 	bic.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005382:	2101      	movs	r1, #1
 8005384:	fa01 f202 	lsl.w	r2, r1, r2
 8005388:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800539a:	7bfb      	ldrb	r3, [r7, #15]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bc80      	pop	{r7}
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b084      	sub	sp, #16
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053b0:	2300      	movs	r3, #0
 80053b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053ba:	2b02      	cmp	r3, #2
 80053bc:	d005      	beq.n	80053ca <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2204      	movs	r2, #4
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	73fb      	strb	r3, [r7, #15]
 80053c8:	e0d6      	b.n	8005578 <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f022 020e 	bic.w	r2, r2, #14
 80053d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f022 0201 	bic.w	r2, r2, #1
 80053e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	4b64      	ldr	r3, [pc, #400]	; (8005584 <HAL_DMA_Abort_IT+0x1dc>)
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d958      	bls.n	80054a8 <HAL_DMA_Abort_IT+0x100>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a63      	ldr	r2, [pc, #396]	; (8005588 <HAL_DMA_Abort_IT+0x1e0>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d04f      	beq.n	80054a0 <HAL_DMA_Abort_IT+0xf8>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a61      	ldr	r2, [pc, #388]	; (800558c <HAL_DMA_Abort_IT+0x1e4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d048      	beq.n	800549c <HAL_DMA_Abort_IT+0xf4>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a60      	ldr	r2, [pc, #384]	; (8005590 <HAL_DMA_Abort_IT+0x1e8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d040      	beq.n	8005496 <HAL_DMA_Abort_IT+0xee>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a5e      	ldr	r2, [pc, #376]	; (8005594 <HAL_DMA_Abort_IT+0x1ec>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d038      	beq.n	8005490 <HAL_DMA_Abort_IT+0xe8>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a5d      	ldr	r2, [pc, #372]	; (8005598 <HAL_DMA_Abort_IT+0x1f0>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d030      	beq.n	800548a <HAL_DMA_Abort_IT+0xe2>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a5b      	ldr	r2, [pc, #364]	; (800559c <HAL_DMA_Abort_IT+0x1f4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d028      	beq.n	8005484 <HAL_DMA_Abort_IT+0xdc>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a53      	ldr	r2, [pc, #332]	; (8005584 <HAL_DMA_Abort_IT+0x1dc>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d020      	beq.n	800547e <HAL_DMA_Abort_IT+0xd6>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a57      	ldr	r2, [pc, #348]	; (80055a0 <HAL_DMA_Abort_IT+0x1f8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d019      	beq.n	800547a <HAL_DMA_Abort_IT+0xd2>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a56      	ldr	r2, [pc, #344]	; (80055a4 <HAL_DMA_Abort_IT+0x1fc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d012      	beq.n	8005476 <HAL_DMA_Abort_IT+0xce>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a54      	ldr	r2, [pc, #336]	; (80055a8 <HAL_DMA_Abort_IT+0x200>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00a      	beq.n	8005470 <HAL_DMA_Abort_IT+0xc8>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a53      	ldr	r2, [pc, #332]	; (80055ac <HAL_DMA_Abort_IT+0x204>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d102      	bne.n	800546a <HAL_DMA_Abort_IT+0xc2>
 8005464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005468:	e01b      	b.n	80054a2 <HAL_DMA_Abort_IT+0xfa>
 800546a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800546e:	e018      	b.n	80054a2 <HAL_DMA_Abort_IT+0xfa>
 8005470:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005474:	e015      	b.n	80054a2 <HAL_DMA_Abort_IT+0xfa>
 8005476:	2310      	movs	r3, #16
 8005478:	e013      	b.n	80054a2 <HAL_DMA_Abort_IT+0xfa>
 800547a:	2301      	movs	r3, #1
 800547c:	e011      	b.n	80054a2 <HAL_DMA_Abort_IT+0xfa>
 800547e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005482:	e00e      	b.n	80054a2 <HAL_DMA_Abort_IT+0xfa>
 8005484:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005488:	e00b      	b.n	80054a2 <HAL_DMA_Abort_IT+0xfa>
 800548a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800548e:	e008      	b.n	80054a2 <HAL_DMA_Abort_IT+0xfa>
 8005490:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005494:	e005      	b.n	80054a2 <HAL_DMA_Abort_IT+0xfa>
 8005496:	f44f 7380 	mov.w	r3, #256	; 0x100
 800549a:	e002      	b.n	80054a2 <HAL_DMA_Abort_IT+0xfa>
 800549c:	2310      	movs	r3, #16
 800549e:	e000      	b.n	80054a2 <HAL_DMA_Abort_IT+0xfa>
 80054a0:	2301      	movs	r3, #1
 80054a2:	4a43      	ldr	r2, [pc, #268]	; (80055b0 <HAL_DMA_Abort_IT+0x208>)
 80054a4:	6053      	str	r3, [r2, #4]
 80054a6:	e057      	b.n	8005558 <HAL_DMA_Abort_IT+0x1b0>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a36      	ldr	r2, [pc, #216]	; (8005588 <HAL_DMA_Abort_IT+0x1e0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d04f      	beq.n	8005552 <HAL_DMA_Abort_IT+0x1aa>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a35      	ldr	r2, [pc, #212]	; (800558c <HAL_DMA_Abort_IT+0x1e4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d048      	beq.n	800554e <HAL_DMA_Abort_IT+0x1a6>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a33      	ldr	r2, [pc, #204]	; (8005590 <HAL_DMA_Abort_IT+0x1e8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d040      	beq.n	8005548 <HAL_DMA_Abort_IT+0x1a0>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a32      	ldr	r2, [pc, #200]	; (8005594 <HAL_DMA_Abort_IT+0x1ec>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d038      	beq.n	8005542 <HAL_DMA_Abort_IT+0x19a>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a30      	ldr	r2, [pc, #192]	; (8005598 <HAL_DMA_Abort_IT+0x1f0>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d030      	beq.n	800553c <HAL_DMA_Abort_IT+0x194>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a2f      	ldr	r2, [pc, #188]	; (800559c <HAL_DMA_Abort_IT+0x1f4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d028      	beq.n	8005536 <HAL_DMA_Abort_IT+0x18e>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a26      	ldr	r2, [pc, #152]	; (8005584 <HAL_DMA_Abort_IT+0x1dc>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d020      	beq.n	8005530 <HAL_DMA_Abort_IT+0x188>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a2b      	ldr	r2, [pc, #172]	; (80055a0 <HAL_DMA_Abort_IT+0x1f8>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d019      	beq.n	800552c <HAL_DMA_Abort_IT+0x184>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a29      	ldr	r2, [pc, #164]	; (80055a4 <HAL_DMA_Abort_IT+0x1fc>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d012      	beq.n	8005528 <HAL_DMA_Abort_IT+0x180>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a28      	ldr	r2, [pc, #160]	; (80055a8 <HAL_DMA_Abort_IT+0x200>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d00a      	beq.n	8005522 <HAL_DMA_Abort_IT+0x17a>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a26      	ldr	r2, [pc, #152]	; (80055ac <HAL_DMA_Abort_IT+0x204>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d102      	bne.n	800551c <HAL_DMA_Abort_IT+0x174>
 8005516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800551a:	e01b      	b.n	8005554 <HAL_DMA_Abort_IT+0x1ac>
 800551c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005520:	e018      	b.n	8005554 <HAL_DMA_Abort_IT+0x1ac>
 8005522:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005526:	e015      	b.n	8005554 <HAL_DMA_Abort_IT+0x1ac>
 8005528:	2310      	movs	r3, #16
 800552a:	e013      	b.n	8005554 <HAL_DMA_Abort_IT+0x1ac>
 800552c:	2301      	movs	r3, #1
 800552e:	e011      	b.n	8005554 <HAL_DMA_Abort_IT+0x1ac>
 8005530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005534:	e00e      	b.n	8005554 <HAL_DMA_Abort_IT+0x1ac>
 8005536:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800553a:	e00b      	b.n	8005554 <HAL_DMA_Abort_IT+0x1ac>
 800553c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005540:	e008      	b.n	8005554 <HAL_DMA_Abort_IT+0x1ac>
 8005542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005546:	e005      	b.n	8005554 <HAL_DMA_Abort_IT+0x1ac>
 8005548:	f44f 7380 	mov.w	r3, #256	; 0x100
 800554c:	e002      	b.n	8005554 <HAL_DMA_Abort_IT+0x1ac>
 800554e:	2310      	movs	r3, #16
 8005550:	e000      	b.n	8005554 <HAL_DMA_Abort_IT+0x1ac>
 8005552:	2301      	movs	r3, #1
 8005554:	4a17      	ldr	r2, [pc, #92]	; (80055b4 <HAL_DMA_Abort_IT+0x20c>)
 8005556:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556c:	2b00      	cmp	r3, #0
 800556e:	d003      	beq.n	8005578 <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
    } 
  }
  return status;
 8005578:	7bfb      	ldrb	r3, [r7, #15]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	40020080 	.word	0x40020080
 8005588:	40020008 	.word	0x40020008
 800558c:	4002001c 	.word	0x4002001c
 8005590:	40020030 	.word	0x40020030
 8005594:	40020044 	.word	0x40020044
 8005598:	40020058 	.word	0x40020058
 800559c:	4002006c 	.word	0x4002006c
 80055a0:	40020408 	.word	0x40020408
 80055a4:	4002041c 	.word	0x4002041c
 80055a8:	40020430 	.word	0x40020430
 80055ac:	40020444 	.word	0x40020444
 80055b0:	40020400 	.word	0x40020400
 80055b4:	40020000 	.word	0x40020000

080055b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d4:	2204      	movs	r2, #4
 80055d6:	409a      	lsls	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4013      	ands	r3, r2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80f1 	beq.w	80057c4 <HAL_DMA_IRQHandler+0x20c>
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 80eb 	beq.w	80057c4 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d107      	bne.n	800560c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0204 	bic.w	r2, r2, #4
 800560a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	4b5f      	ldr	r3, [pc, #380]	; (8005790 <HAL_DMA_IRQHandler+0x1d8>)
 8005614:	429a      	cmp	r2, r3
 8005616:	d958      	bls.n	80056ca <HAL_DMA_IRQHandler+0x112>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a5d      	ldr	r2, [pc, #372]	; (8005794 <HAL_DMA_IRQHandler+0x1dc>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d04f      	beq.n	80056c2 <HAL_DMA_IRQHandler+0x10a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a5c      	ldr	r2, [pc, #368]	; (8005798 <HAL_DMA_IRQHandler+0x1e0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d048      	beq.n	80056be <HAL_DMA_IRQHandler+0x106>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a5a      	ldr	r2, [pc, #360]	; (800579c <HAL_DMA_IRQHandler+0x1e4>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d040      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x100>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a59      	ldr	r2, [pc, #356]	; (80057a0 <HAL_DMA_IRQHandler+0x1e8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d038      	beq.n	80056b2 <HAL_DMA_IRQHandler+0xfa>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a57      	ldr	r2, [pc, #348]	; (80057a4 <HAL_DMA_IRQHandler+0x1ec>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d030      	beq.n	80056ac <HAL_DMA_IRQHandler+0xf4>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a56      	ldr	r2, [pc, #344]	; (80057a8 <HAL_DMA_IRQHandler+0x1f0>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d028      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xee>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a4d      	ldr	r2, [pc, #308]	; (8005790 <HAL_DMA_IRQHandler+0x1d8>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d020      	beq.n	80056a0 <HAL_DMA_IRQHandler+0xe8>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a52      	ldr	r2, [pc, #328]	; (80057ac <HAL_DMA_IRQHandler+0x1f4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d019      	beq.n	800569c <HAL_DMA_IRQHandler+0xe4>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a50      	ldr	r2, [pc, #320]	; (80057b0 <HAL_DMA_IRQHandler+0x1f8>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d012      	beq.n	8005698 <HAL_DMA_IRQHandler+0xe0>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a4f      	ldr	r2, [pc, #316]	; (80057b4 <HAL_DMA_IRQHandler+0x1fc>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d00a      	beq.n	8005692 <HAL_DMA_IRQHandler+0xda>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a4d      	ldr	r2, [pc, #308]	; (80057b8 <HAL_DMA_IRQHandler+0x200>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d102      	bne.n	800568c <HAL_DMA_IRQHandler+0xd4>
 8005686:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800568a:	e01b      	b.n	80056c4 <HAL_DMA_IRQHandler+0x10c>
 800568c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005690:	e018      	b.n	80056c4 <HAL_DMA_IRQHandler+0x10c>
 8005692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005696:	e015      	b.n	80056c4 <HAL_DMA_IRQHandler+0x10c>
 8005698:	2340      	movs	r3, #64	; 0x40
 800569a:	e013      	b.n	80056c4 <HAL_DMA_IRQHandler+0x10c>
 800569c:	2304      	movs	r3, #4
 800569e:	e011      	b.n	80056c4 <HAL_DMA_IRQHandler+0x10c>
 80056a0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80056a4:	e00e      	b.n	80056c4 <HAL_DMA_IRQHandler+0x10c>
 80056a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056aa:	e00b      	b.n	80056c4 <HAL_DMA_IRQHandler+0x10c>
 80056ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80056b0:	e008      	b.n	80056c4 <HAL_DMA_IRQHandler+0x10c>
 80056b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056b6:	e005      	b.n	80056c4 <HAL_DMA_IRQHandler+0x10c>
 80056b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056bc:	e002      	b.n	80056c4 <HAL_DMA_IRQHandler+0x10c>
 80056be:	2340      	movs	r3, #64	; 0x40
 80056c0:	e000      	b.n	80056c4 <HAL_DMA_IRQHandler+0x10c>
 80056c2:	2304      	movs	r3, #4
 80056c4:	4a3d      	ldr	r2, [pc, #244]	; (80057bc <HAL_DMA_IRQHandler+0x204>)
 80056c6:	6053      	str	r3, [r2, #4]
 80056c8:	e057      	b.n	800577a <HAL_DMA_IRQHandler+0x1c2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a31      	ldr	r2, [pc, #196]	; (8005794 <HAL_DMA_IRQHandler+0x1dc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d04f      	beq.n	8005774 <HAL_DMA_IRQHandler+0x1bc>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a2f      	ldr	r2, [pc, #188]	; (8005798 <HAL_DMA_IRQHandler+0x1e0>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d048      	beq.n	8005770 <HAL_DMA_IRQHandler+0x1b8>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a2e      	ldr	r2, [pc, #184]	; (800579c <HAL_DMA_IRQHandler+0x1e4>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d040      	beq.n	800576a <HAL_DMA_IRQHandler+0x1b2>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <HAL_DMA_IRQHandler+0x1e8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d038      	beq.n	8005764 <HAL_DMA_IRQHandler+0x1ac>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a2b      	ldr	r2, [pc, #172]	; (80057a4 <HAL_DMA_IRQHandler+0x1ec>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d030      	beq.n	800575e <HAL_DMA_IRQHandler+0x1a6>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a29      	ldr	r2, [pc, #164]	; (80057a8 <HAL_DMA_IRQHandler+0x1f0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d028      	beq.n	8005758 <HAL_DMA_IRQHandler+0x1a0>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a21      	ldr	r2, [pc, #132]	; (8005790 <HAL_DMA_IRQHandler+0x1d8>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d020      	beq.n	8005752 <HAL_DMA_IRQHandler+0x19a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a25      	ldr	r2, [pc, #148]	; (80057ac <HAL_DMA_IRQHandler+0x1f4>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d019      	beq.n	800574e <HAL_DMA_IRQHandler+0x196>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a24      	ldr	r2, [pc, #144]	; (80057b0 <HAL_DMA_IRQHandler+0x1f8>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d012      	beq.n	800574a <HAL_DMA_IRQHandler+0x192>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a22      	ldr	r2, [pc, #136]	; (80057b4 <HAL_DMA_IRQHandler+0x1fc>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00a      	beq.n	8005744 <HAL_DMA_IRQHandler+0x18c>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a21      	ldr	r2, [pc, #132]	; (80057b8 <HAL_DMA_IRQHandler+0x200>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d102      	bne.n	800573e <HAL_DMA_IRQHandler+0x186>
 8005738:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800573c:	e01b      	b.n	8005776 <HAL_DMA_IRQHandler+0x1be>
 800573e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005742:	e018      	b.n	8005776 <HAL_DMA_IRQHandler+0x1be>
 8005744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005748:	e015      	b.n	8005776 <HAL_DMA_IRQHandler+0x1be>
 800574a:	2340      	movs	r3, #64	; 0x40
 800574c:	e013      	b.n	8005776 <HAL_DMA_IRQHandler+0x1be>
 800574e:	2304      	movs	r3, #4
 8005750:	e011      	b.n	8005776 <HAL_DMA_IRQHandler+0x1be>
 8005752:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005756:	e00e      	b.n	8005776 <HAL_DMA_IRQHandler+0x1be>
 8005758:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800575c:	e00b      	b.n	8005776 <HAL_DMA_IRQHandler+0x1be>
 800575e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005762:	e008      	b.n	8005776 <HAL_DMA_IRQHandler+0x1be>
 8005764:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005768:	e005      	b.n	8005776 <HAL_DMA_IRQHandler+0x1be>
 800576a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800576e:	e002      	b.n	8005776 <HAL_DMA_IRQHandler+0x1be>
 8005770:	2340      	movs	r3, #64	; 0x40
 8005772:	e000      	b.n	8005776 <HAL_DMA_IRQHandler+0x1be>
 8005774:	2304      	movs	r3, #4
 8005776:	4a12      	ldr	r2, [pc, #72]	; (80057c0 <HAL_DMA_IRQHandler+0x208>)
 8005778:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8136 	beq.w	80059f0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800578c:	e130      	b.n	80059f0 <HAL_DMA_IRQHandler+0x438>
 800578e:	bf00      	nop
 8005790:	40020080 	.word	0x40020080
 8005794:	40020008 	.word	0x40020008
 8005798:	4002001c 	.word	0x4002001c
 800579c:	40020030 	.word	0x40020030
 80057a0:	40020044 	.word	0x40020044
 80057a4:	40020058 	.word	0x40020058
 80057a8:	4002006c 	.word	0x4002006c
 80057ac:	40020408 	.word	0x40020408
 80057b0:	4002041c 	.word	0x4002041c
 80057b4:	40020430 	.word	0x40020430
 80057b8:	40020444 	.word	0x40020444
 80057bc:	40020400 	.word	0x40020400
 80057c0:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c8:	2202      	movs	r2, #2
 80057ca:	409a      	lsls	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 80dd 	beq.w	8005990 <HAL_DMA_IRQHandler+0x3d8>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 80d7 	beq.w	8005990 <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0320 	and.w	r3, r3, #32
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10b      	bne.n	8005808 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f022 020a 	bic.w	r2, r2, #10
 80057fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	461a      	mov	r2, r3
 800580e:	4b7b      	ldr	r3, [pc, #492]	; (80059fc <HAL_DMA_IRQHandler+0x444>)
 8005810:	429a      	cmp	r2, r3
 8005812:	d958      	bls.n	80058c6 <HAL_DMA_IRQHandler+0x30e>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a79      	ldr	r2, [pc, #484]	; (8005a00 <HAL_DMA_IRQHandler+0x448>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d04f      	beq.n	80058be <HAL_DMA_IRQHandler+0x306>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a78      	ldr	r2, [pc, #480]	; (8005a04 <HAL_DMA_IRQHandler+0x44c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d048      	beq.n	80058ba <HAL_DMA_IRQHandler+0x302>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a76      	ldr	r2, [pc, #472]	; (8005a08 <HAL_DMA_IRQHandler+0x450>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d040      	beq.n	80058b4 <HAL_DMA_IRQHandler+0x2fc>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a75      	ldr	r2, [pc, #468]	; (8005a0c <HAL_DMA_IRQHandler+0x454>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d038      	beq.n	80058ae <HAL_DMA_IRQHandler+0x2f6>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a73      	ldr	r2, [pc, #460]	; (8005a10 <HAL_DMA_IRQHandler+0x458>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d030      	beq.n	80058a8 <HAL_DMA_IRQHandler+0x2f0>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a72      	ldr	r2, [pc, #456]	; (8005a14 <HAL_DMA_IRQHandler+0x45c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d028      	beq.n	80058a2 <HAL_DMA_IRQHandler+0x2ea>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a69      	ldr	r2, [pc, #420]	; (80059fc <HAL_DMA_IRQHandler+0x444>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d020      	beq.n	800589c <HAL_DMA_IRQHandler+0x2e4>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a6e      	ldr	r2, [pc, #440]	; (8005a18 <HAL_DMA_IRQHandler+0x460>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d019      	beq.n	8005898 <HAL_DMA_IRQHandler+0x2e0>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a6c      	ldr	r2, [pc, #432]	; (8005a1c <HAL_DMA_IRQHandler+0x464>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d012      	beq.n	8005894 <HAL_DMA_IRQHandler+0x2dc>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a6b      	ldr	r2, [pc, #428]	; (8005a20 <HAL_DMA_IRQHandler+0x468>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00a      	beq.n	800588e <HAL_DMA_IRQHandler+0x2d6>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a69      	ldr	r2, [pc, #420]	; (8005a24 <HAL_DMA_IRQHandler+0x46c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d102      	bne.n	8005888 <HAL_DMA_IRQHandler+0x2d0>
 8005882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005886:	e01b      	b.n	80058c0 <HAL_DMA_IRQHandler+0x308>
 8005888:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800588c:	e018      	b.n	80058c0 <HAL_DMA_IRQHandler+0x308>
 800588e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005892:	e015      	b.n	80058c0 <HAL_DMA_IRQHandler+0x308>
 8005894:	2320      	movs	r3, #32
 8005896:	e013      	b.n	80058c0 <HAL_DMA_IRQHandler+0x308>
 8005898:	2302      	movs	r3, #2
 800589a:	e011      	b.n	80058c0 <HAL_DMA_IRQHandler+0x308>
 800589c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058a0:	e00e      	b.n	80058c0 <HAL_DMA_IRQHandler+0x308>
 80058a2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80058a6:	e00b      	b.n	80058c0 <HAL_DMA_IRQHandler+0x308>
 80058a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058ac:	e008      	b.n	80058c0 <HAL_DMA_IRQHandler+0x308>
 80058ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058b2:	e005      	b.n	80058c0 <HAL_DMA_IRQHandler+0x308>
 80058b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058b8:	e002      	b.n	80058c0 <HAL_DMA_IRQHandler+0x308>
 80058ba:	2320      	movs	r3, #32
 80058bc:	e000      	b.n	80058c0 <HAL_DMA_IRQHandler+0x308>
 80058be:	2302      	movs	r3, #2
 80058c0:	4a59      	ldr	r2, [pc, #356]	; (8005a28 <HAL_DMA_IRQHandler+0x470>)
 80058c2:	6053      	str	r3, [r2, #4]
 80058c4:	e057      	b.n	8005976 <HAL_DMA_IRQHandler+0x3be>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a4d      	ldr	r2, [pc, #308]	; (8005a00 <HAL_DMA_IRQHandler+0x448>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d04f      	beq.n	8005970 <HAL_DMA_IRQHandler+0x3b8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a4b      	ldr	r2, [pc, #300]	; (8005a04 <HAL_DMA_IRQHandler+0x44c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d048      	beq.n	800596c <HAL_DMA_IRQHandler+0x3b4>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a4a      	ldr	r2, [pc, #296]	; (8005a08 <HAL_DMA_IRQHandler+0x450>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d040      	beq.n	8005966 <HAL_DMA_IRQHandler+0x3ae>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a48      	ldr	r2, [pc, #288]	; (8005a0c <HAL_DMA_IRQHandler+0x454>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d038      	beq.n	8005960 <HAL_DMA_IRQHandler+0x3a8>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a47      	ldr	r2, [pc, #284]	; (8005a10 <HAL_DMA_IRQHandler+0x458>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d030      	beq.n	800595a <HAL_DMA_IRQHandler+0x3a2>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a45      	ldr	r2, [pc, #276]	; (8005a14 <HAL_DMA_IRQHandler+0x45c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d028      	beq.n	8005954 <HAL_DMA_IRQHandler+0x39c>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a3d      	ldr	r2, [pc, #244]	; (80059fc <HAL_DMA_IRQHandler+0x444>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d020      	beq.n	800594e <HAL_DMA_IRQHandler+0x396>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a41      	ldr	r2, [pc, #260]	; (8005a18 <HAL_DMA_IRQHandler+0x460>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d019      	beq.n	800594a <HAL_DMA_IRQHandler+0x392>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a40      	ldr	r2, [pc, #256]	; (8005a1c <HAL_DMA_IRQHandler+0x464>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d012      	beq.n	8005946 <HAL_DMA_IRQHandler+0x38e>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a3e      	ldr	r2, [pc, #248]	; (8005a20 <HAL_DMA_IRQHandler+0x468>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00a      	beq.n	8005940 <HAL_DMA_IRQHandler+0x388>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a3d      	ldr	r2, [pc, #244]	; (8005a24 <HAL_DMA_IRQHandler+0x46c>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d102      	bne.n	800593a <HAL_DMA_IRQHandler+0x382>
 8005934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005938:	e01b      	b.n	8005972 <HAL_DMA_IRQHandler+0x3ba>
 800593a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800593e:	e018      	b.n	8005972 <HAL_DMA_IRQHandler+0x3ba>
 8005940:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005944:	e015      	b.n	8005972 <HAL_DMA_IRQHandler+0x3ba>
 8005946:	2320      	movs	r3, #32
 8005948:	e013      	b.n	8005972 <HAL_DMA_IRQHandler+0x3ba>
 800594a:	2302      	movs	r3, #2
 800594c:	e011      	b.n	8005972 <HAL_DMA_IRQHandler+0x3ba>
 800594e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005952:	e00e      	b.n	8005972 <HAL_DMA_IRQHandler+0x3ba>
 8005954:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005958:	e00b      	b.n	8005972 <HAL_DMA_IRQHandler+0x3ba>
 800595a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800595e:	e008      	b.n	8005972 <HAL_DMA_IRQHandler+0x3ba>
 8005960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005964:	e005      	b.n	8005972 <HAL_DMA_IRQHandler+0x3ba>
 8005966:	f44f 7300 	mov.w	r3, #512	; 0x200
 800596a:	e002      	b.n	8005972 <HAL_DMA_IRQHandler+0x3ba>
 800596c:	2320      	movs	r3, #32
 800596e:	e000      	b.n	8005972 <HAL_DMA_IRQHandler+0x3ba>
 8005970:	2302      	movs	r3, #2
 8005972:	4a2e      	ldr	r2, [pc, #184]	; (8005a2c <HAL_DMA_IRQHandler+0x474>)
 8005974:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005982:	2b00      	cmp	r3, #0
 8005984:	d034      	beq.n	80059f0 <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800598e:	e02f      	b.n	80059f0 <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	2208      	movs	r2, #8
 8005996:	409a      	lsls	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4013      	ands	r3, r2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d028      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x43a>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f003 0308 	and.w	r3, r3, #8
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d023      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 020e 	bic.w	r2, r2, #14
 80059b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c2:	2101      	movs	r1, #1
 80059c4:	fa01 f202 	lsl.w	r2, r1, r2
 80059c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2201      	movs	r2, #1
 80059ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d004      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	4798      	blx	r3
    }
  }
  return;
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
}
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
 80059fa:	bf00      	nop
 80059fc:	40020080 	.word	0x40020080
 8005a00:	40020008 	.word	0x40020008
 8005a04:	4002001c 	.word	0x4002001c
 8005a08:	40020030 	.word	0x40020030
 8005a0c:	40020044 	.word	0x40020044
 8005a10:	40020058 	.word	0x40020058
 8005a14:	4002006c 	.word	0x4002006c
 8005a18:	40020408 	.word	0x40020408
 8005a1c:	4002041c 	.word	0x4002041c
 8005a20:	40020430 	.word	0x40020430
 8005a24:	40020444 	.word	0x40020444
 8005a28:	40020400 	.word	0x40020400
 8005a2c:	40020000 	.word	0x40020000

08005a30 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	2101      	movs	r1, #1
 8005a48:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	2b10      	cmp	r3, #16
 8005a5c:	d108      	bne.n	8005a70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005a6e:	e007      	b.n	8005a80 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	60da      	str	r2, [r3, #12]
}
 8005a80:	bf00      	nop
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bc80      	pop	{r7}
 8005a88:	4770      	bx	lr
	...

08005a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b08b      	sub	sp, #44	; 0x2c
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005a96:	2300      	movs	r3, #0
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a9e:	e179      	b.n	8005d94 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69fa      	ldr	r2, [r7, #28]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	f040 8168 	bne.w	8005d8e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	4a96      	ldr	r2, [pc, #600]	; (8005d1c <HAL_GPIO_Init+0x290>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d05e      	beq.n	8005b86 <HAL_GPIO_Init+0xfa>
 8005ac8:	4a94      	ldr	r2, [pc, #592]	; (8005d1c <HAL_GPIO_Init+0x290>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d875      	bhi.n	8005bba <HAL_GPIO_Init+0x12e>
 8005ace:	4a94      	ldr	r2, [pc, #592]	; (8005d20 <HAL_GPIO_Init+0x294>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d058      	beq.n	8005b86 <HAL_GPIO_Init+0xfa>
 8005ad4:	4a92      	ldr	r2, [pc, #584]	; (8005d20 <HAL_GPIO_Init+0x294>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d86f      	bhi.n	8005bba <HAL_GPIO_Init+0x12e>
 8005ada:	4a92      	ldr	r2, [pc, #584]	; (8005d24 <HAL_GPIO_Init+0x298>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d052      	beq.n	8005b86 <HAL_GPIO_Init+0xfa>
 8005ae0:	4a90      	ldr	r2, [pc, #576]	; (8005d24 <HAL_GPIO_Init+0x298>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d869      	bhi.n	8005bba <HAL_GPIO_Init+0x12e>
 8005ae6:	4a90      	ldr	r2, [pc, #576]	; (8005d28 <HAL_GPIO_Init+0x29c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d04c      	beq.n	8005b86 <HAL_GPIO_Init+0xfa>
 8005aec:	4a8e      	ldr	r2, [pc, #568]	; (8005d28 <HAL_GPIO_Init+0x29c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d863      	bhi.n	8005bba <HAL_GPIO_Init+0x12e>
 8005af2:	4a8e      	ldr	r2, [pc, #568]	; (8005d2c <HAL_GPIO_Init+0x2a0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d046      	beq.n	8005b86 <HAL_GPIO_Init+0xfa>
 8005af8:	4a8c      	ldr	r2, [pc, #560]	; (8005d2c <HAL_GPIO_Init+0x2a0>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d85d      	bhi.n	8005bba <HAL_GPIO_Init+0x12e>
 8005afe:	2b12      	cmp	r3, #18
 8005b00:	d82a      	bhi.n	8005b58 <HAL_GPIO_Init+0xcc>
 8005b02:	2b12      	cmp	r3, #18
 8005b04:	d859      	bhi.n	8005bba <HAL_GPIO_Init+0x12e>
 8005b06:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <HAL_GPIO_Init+0x80>)
 8005b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0c:	08005b87 	.word	0x08005b87
 8005b10:	08005b61 	.word	0x08005b61
 8005b14:	08005b73 	.word	0x08005b73
 8005b18:	08005bb5 	.word	0x08005bb5
 8005b1c:	08005bbb 	.word	0x08005bbb
 8005b20:	08005bbb 	.word	0x08005bbb
 8005b24:	08005bbb 	.word	0x08005bbb
 8005b28:	08005bbb 	.word	0x08005bbb
 8005b2c:	08005bbb 	.word	0x08005bbb
 8005b30:	08005bbb 	.word	0x08005bbb
 8005b34:	08005bbb 	.word	0x08005bbb
 8005b38:	08005bbb 	.word	0x08005bbb
 8005b3c:	08005bbb 	.word	0x08005bbb
 8005b40:	08005bbb 	.word	0x08005bbb
 8005b44:	08005bbb 	.word	0x08005bbb
 8005b48:	08005bbb 	.word	0x08005bbb
 8005b4c:	08005bbb 	.word	0x08005bbb
 8005b50:	08005b69 	.word	0x08005b69
 8005b54:	08005b7d 	.word	0x08005b7d
 8005b58:	4a75      	ldr	r2, [pc, #468]	; (8005d30 <HAL_GPIO_Init+0x2a4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d013      	beq.n	8005b86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005b5e:	e02c      	b.n	8005bba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	623b      	str	r3, [r7, #32]
          break;
 8005b66:	e029      	b.n	8005bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	3304      	adds	r3, #4
 8005b6e:	623b      	str	r3, [r7, #32]
          break;
 8005b70:	e024      	b.n	8005bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	3308      	adds	r3, #8
 8005b78:	623b      	str	r3, [r7, #32]
          break;
 8005b7a:	e01f      	b.n	8005bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	330c      	adds	r3, #12
 8005b82:	623b      	str	r3, [r7, #32]
          break;
 8005b84:	e01a      	b.n	8005bbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d102      	bne.n	8005b94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005b8e:	2304      	movs	r3, #4
 8005b90:	623b      	str	r3, [r7, #32]
          break;
 8005b92:	e013      	b.n	8005bbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d105      	bne.n	8005ba8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005b9c:	2308      	movs	r3, #8
 8005b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	611a      	str	r2, [r3, #16]
          break;
 8005ba6:	e009      	b.n	8005bbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ba8:	2308      	movs	r3, #8
 8005baa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	615a      	str	r2, [r3, #20]
          break;
 8005bb2:	e003      	b.n	8005bbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	623b      	str	r3, [r7, #32]
          break;
 8005bb8:	e000      	b.n	8005bbc <HAL_GPIO_Init+0x130>
          break;
 8005bba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	2bff      	cmp	r3, #255	; 0xff
 8005bc0:	d801      	bhi.n	8005bc6 <HAL_GPIO_Init+0x13a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	e001      	b.n	8005bca <HAL_GPIO_Init+0x13e>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	3304      	adds	r3, #4
 8005bca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2bff      	cmp	r3, #255	; 0xff
 8005bd0:	d802      	bhi.n	8005bd8 <HAL_GPIO_Init+0x14c>
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	e002      	b.n	8005bde <HAL_GPIO_Init+0x152>
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	3b08      	subs	r3, #8
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	210f      	movs	r1, #15
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bec:	43db      	mvns	r3, r3
 8005bee:	401a      	ands	r2, r3
 8005bf0:	6a39      	ldr	r1, [r7, #32]
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f000 80c1 	beq.w	8005d8e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005c0c:	4b49      	ldr	r3, [pc, #292]	; (8005d34 <HAL_GPIO_Init+0x2a8>)
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	4a48      	ldr	r2, [pc, #288]	; (8005d34 <HAL_GPIO_Init+0x2a8>)
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	6193      	str	r3, [r2, #24]
 8005c18:	4b46      	ldr	r3, [pc, #280]	; (8005d34 <HAL_GPIO_Init+0x2a8>)
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	60bb      	str	r3, [r7, #8]
 8005c22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005c24:	4a44      	ldr	r2, [pc, #272]	; (8005d38 <HAL_GPIO_Init+0x2ac>)
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	089b      	lsrs	r3, r3, #2
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	220f      	movs	r2, #15
 8005c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c40:	43db      	mvns	r3, r3
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4013      	ands	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a3c      	ldr	r2, [pc, #240]	; (8005d3c <HAL_GPIO_Init+0x2b0>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d01f      	beq.n	8005c90 <HAL_GPIO_Init+0x204>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	4a3b      	ldr	r2, [pc, #236]	; (8005d40 <HAL_GPIO_Init+0x2b4>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d019      	beq.n	8005c8c <HAL_GPIO_Init+0x200>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a3a      	ldr	r2, [pc, #232]	; (8005d44 <HAL_GPIO_Init+0x2b8>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d013      	beq.n	8005c88 <HAL_GPIO_Init+0x1fc>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a39      	ldr	r2, [pc, #228]	; (8005d48 <HAL_GPIO_Init+0x2bc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d00d      	beq.n	8005c84 <HAL_GPIO_Init+0x1f8>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a38      	ldr	r2, [pc, #224]	; (8005d4c <HAL_GPIO_Init+0x2c0>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d007      	beq.n	8005c80 <HAL_GPIO_Init+0x1f4>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a37      	ldr	r2, [pc, #220]	; (8005d50 <HAL_GPIO_Init+0x2c4>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d101      	bne.n	8005c7c <HAL_GPIO_Init+0x1f0>
 8005c78:	2305      	movs	r3, #5
 8005c7a:	e00a      	b.n	8005c92 <HAL_GPIO_Init+0x206>
 8005c7c:	2306      	movs	r3, #6
 8005c7e:	e008      	b.n	8005c92 <HAL_GPIO_Init+0x206>
 8005c80:	2304      	movs	r3, #4
 8005c82:	e006      	b.n	8005c92 <HAL_GPIO_Init+0x206>
 8005c84:	2303      	movs	r3, #3
 8005c86:	e004      	b.n	8005c92 <HAL_GPIO_Init+0x206>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e002      	b.n	8005c92 <HAL_GPIO_Init+0x206>
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e000      	b.n	8005c92 <HAL_GPIO_Init+0x206>
 8005c90:	2300      	movs	r3, #0
 8005c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c94:	f002 0203 	and.w	r2, r2, #3
 8005c98:	0092      	lsls	r2, r2, #2
 8005c9a:	4093      	lsls	r3, r2
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005ca2:	4925      	ldr	r1, [pc, #148]	; (8005d38 <HAL_GPIO_Init+0x2ac>)
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	089b      	lsrs	r3, r3, #2
 8005ca8:	3302      	adds	r3, #2
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d006      	beq.n	8005cca <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005cbc:	4b25      	ldr	r3, [pc, #148]	; (8005d54 <HAL_GPIO_Init+0x2c8>)
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	4924      	ldr	r1, [pc, #144]	; (8005d54 <HAL_GPIO_Init+0x2c8>)
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	600b      	str	r3, [r1, #0]
 8005cc8:	e006      	b.n	8005cd8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005cca:	4b22      	ldr	r3, [pc, #136]	; (8005d54 <HAL_GPIO_Init+0x2c8>)
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	4920      	ldr	r1, [pc, #128]	; (8005d54 <HAL_GPIO_Init+0x2c8>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d006      	beq.n	8005cf2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005ce4:	4b1b      	ldr	r3, [pc, #108]	; (8005d54 <HAL_GPIO_Init+0x2c8>)
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	491a      	ldr	r1, [pc, #104]	; (8005d54 <HAL_GPIO_Init+0x2c8>)
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	604b      	str	r3, [r1, #4]
 8005cf0:	e006      	b.n	8005d00 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005cf2:	4b18      	ldr	r3, [pc, #96]	; (8005d54 <HAL_GPIO_Init+0x2c8>)
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	43db      	mvns	r3, r3
 8005cfa:	4916      	ldr	r1, [pc, #88]	; (8005d54 <HAL_GPIO_Init+0x2c8>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d025      	beq.n	8005d58 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005d0c:	4b11      	ldr	r3, [pc, #68]	; (8005d54 <HAL_GPIO_Init+0x2c8>)
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	4910      	ldr	r1, [pc, #64]	; (8005d54 <HAL_GPIO_Init+0x2c8>)
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	608b      	str	r3, [r1, #8]
 8005d18:	e025      	b.n	8005d66 <HAL_GPIO_Init+0x2da>
 8005d1a:	bf00      	nop
 8005d1c:	10320000 	.word	0x10320000
 8005d20:	10310000 	.word	0x10310000
 8005d24:	10220000 	.word	0x10220000
 8005d28:	10210000 	.word	0x10210000
 8005d2c:	10120000 	.word	0x10120000
 8005d30:	10110000 	.word	0x10110000
 8005d34:	40021000 	.word	0x40021000
 8005d38:	40010000 	.word	0x40010000
 8005d3c:	40010800 	.word	0x40010800
 8005d40:	40010c00 	.word	0x40010c00
 8005d44:	40011000 	.word	0x40011000
 8005d48:	40011400 	.word	0x40011400
 8005d4c:	40011800 	.word	0x40011800
 8005d50:	40011c00 	.word	0x40011c00
 8005d54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005d58:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <HAL_GPIO_Init+0x324>)
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	43db      	mvns	r3, r3
 8005d60:	4913      	ldr	r1, [pc, #76]	; (8005db0 <HAL_GPIO_Init+0x324>)
 8005d62:	4013      	ands	r3, r2
 8005d64:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d006      	beq.n	8005d80 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005d72:	4b0f      	ldr	r3, [pc, #60]	; (8005db0 <HAL_GPIO_Init+0x324>)
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	490e      	ldr	r1, [pc, #56]	; (8005db0 <HAL_GPIO_Init+0x324>)
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	60cb      	str	r3, [r1, #12]
 8005d7e:	e006      	b.n	8005d8e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005d80:	4b0b      	ldr	r3, [pc, #44]	; (8005db0 <HAL_GPIO_Init+0x324>)
 8005d82:	68da      	ldr	r2, [r3, #12]
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	43db      	mvns	r3, r3
 8005d88:	4909      	ldr	r1, [pc, #36]	; (8005db0 <HAL_GPIO_Init+0x324>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d90:	3301      	adds	r3, #1
 8005d92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f47f ae7e 	bne.w	8005aa0 <HAL_GPIO_Init+0x14>
  }
}
 8005da4:	bf00      	nop
 8005da6:	bf00      	nop
 8005da8:	372c      	adds	r7, #44	; 0x2c
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bc80      	pop	{r7}
 8005dae:	4770      	bx	lr
 8005db0:	40010400 	.word	0x40010400

08005db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	807b      	strh	r3, [r7, #2]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005dc4:	787b      	ldrb	r3, [r7, #1]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d003      	beq.n	8005dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dca:	887a      	ldrh	r2, [r7, #2]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005dd0:	e003      	b.n	8005dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005dd2:	887b      	ldrh	r3, [r7, #2]
 8005dd4:	041a      	lsls	r2, r3, #16
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	611a      	str	r2, [r3, #16]
}
 8005dda:	bf00      	nop
 8005ddc:	370c      	adds	r7, #12
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr

08005de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e12b      	b.n	800604e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fe fbf2 	bl	80045f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2224      	movs	r2, #36	; 0x24
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0201 	bic.w	r2, r2, #1
 8005e26:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e36:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681a      	ldr	r2, [r3, #0]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e46:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e48:	f000 fffc 	bl	8006e44 <HAL_RCC_GetPCLK1Freq>
 8005e4c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	4a81      	ldr	r2, [pc, #516]	; (8006058 <HAL_I2C_Init+0x274>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d807      	bhi.n	8005e68 <HAL_I2C_Init+0x84>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4a80      	ldr	r2, [pc, #512]	; (800605c <HAL_I2C_Init+0x278>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	bf94      	ite	ls
 8005e60:	2301      	movls	r3, #1
 8005e62:	2300      	movhi	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	e006      	b.n	8005e76 <HAL_I2C_Init+0x92>
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	4a7d      	ldr	r2, [pc, #500]	; (8006060 <HAL_I2C_Init+0x27c>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	bf94      	ite	ls
 8005e70:	2301      	movls	r3, #1
 8005e72:	2300      	movhi	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e0e7      	b.n	800604e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4a78      	ldr	r2, [pc, #480]	; (8006064 <HAL_I2C_Init+0x280>)
 8005e82:	fba2 2303 	umull	r2, r3, r2, r3
 8005e86:	0c9b      	lsrs	r3, r3, #18
 8005e88:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	4a6a      	ldr	r2, [pc, #424]	; (8006058 <HAL_I2C_Init+0x274>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d802      	bhi.n	8005eb8 <HAL_I2C_Init+0xd4>
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	e009      	b.n	8005ecc <HAL_I2C_Init+0xe8>
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005ebe:	fb02 f303 	mul.w	r3, r2, r3
 8005ec2:	4a69      	ldr	r2, [pc, #420]	; (8006068 <HAL_I2C_Init+0x284>)
 8005ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec8:	099b      	lsrs	r3, r3, #6
 8005eca:	3301      	adds	r3, #1
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6812      	ldr	r2, [r2, #0]
 8005ed0:	430b      	orrs	r3, r1
 8005ed2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005ede:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	495c      	ldr	r1, [pc, #368]	; (8006058 <HAL_I2C_Init+0x274>)
 8005ee8:	428b      	cmp	r3, r1
 8005eea:	d819      	bhi.n	8005f20 <HAL_I2C_Init+0x13c>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	1e59      	subs	r1, r3, #1
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	005b      	lsls	r3, r3, #1
 8005ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8005efa:	1c59      	adds	r1, r3, #1
 8005efc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f00:	400b      	ands	r3, r1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d00a      	beq.n	8005f1c <HAL_I2C_Init+0x138>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1e59      	subs	r1, r3, #1
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	005b      	lsls	r3, r3, #1
 8005f10:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f14:	3301      	adds	r3, #1
 8005f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f1a:	e051      	b.n	8005fc0 <HAL_I2C_Init+0x1dc>
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	e04f      	b.n	8005fc0 <HAL_I2C_Init+0x1dc>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d111      	bne.n	8005f4c <HAL_I2C_Init+0x168>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	1e58      	subs	r0, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6859      	ldr	r1, [r3, #4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	005b      	lsls	r3, r3, #1
 8005f34:	440b      	add	r3, r1
 8005f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	bf0c      	ite	eq
 8005f44:	2301      	moveq	r3, #1
 8005f46:	2300      	movne	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	e012      	b.n	8005f72 <HAL_I2C_Init+0x18e>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	1e58      	subs	r0, r3, #1
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6859      	ldr	r1, [r3, #4]
 8005f54:	460b      	mov	r3, r1
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	0099      	lsls	r1, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f62:	3301      	adds	r3, #1
 8005f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	bf0c      	ite	eq
 8005f6c:	2301      	moveq	r3, #1
 8005f6e:	2300      	movne	r3, #0
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <HAL_I2C_Init+0x196>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e022      	b.n	8005fc0 <HAL_I2C_Init+0x1dc>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10e      	bne.n	8005fa0 <HAL_I2C_Init+0x1bc>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	1e58      	subs	r0, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6859      	ldr	r1, [r3, #4]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	005b      	lsls	r3, r3, #1
 8005f8e:	440b      	add	r3, r1
 8005f90:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f94:	3301      	adds	r3, #1
 8005f96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f9e:	e00f      	b.n	8005fc0 <HAL_I2C_Init+0x1dc>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	1e58      	subs	r0, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6859      	ldr	r1, [r3, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	440b      	add	r3, r1
 8005fae:	0099      	lsls	r1, r3, #2
 8005fb0:	440b      	add	r3, r1
 8005fb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fbc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	6809      	ldr	r1, [r1, #0]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	69da      	ldr	r2, [r3, #28]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005fee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6911      	ldr	r1, [r2, #16]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	68d2      	ldr	r2, [r2, #12]
 8005ffa:	4311      	orrs	r1, r2
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6812      	ldr	r2, [r2, #0]
 8006000:	430b      	orrs	r3, r1
 8006002:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	695a      	ldr	r2, [r3, #20]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0201 	orr.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2220      	movs	r2, #32
 800603a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800604c:	2300      	movs	r3, #0
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	000186a0 	.word	0x000186a0
 800605c:	001e847f 	.word	0x001e847f
 8006060:	003d08ff 	.word	0x003d08ff
 8006064:	431bde83 	.word	0x431bde83
 8006068:	10624dd3 	.word	0x10624dd3

0800606c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	4608      	mov	r0, r1
 8006076:	4611      	mov	r1, r2
 8006078:	461a      	mov	r2, r3
 800607a:	4603      	mov	r3, r0
 800607c:	817b      	strh	r3, [r7, #10]
 800607e:	460b      	mov	r3, r1
 8006080:	813b      	strh	r3, [r7, #8]
 8006082:	4613      	mov	r3, r2
 8006084:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006086:	f7fe ff43 	bl	8004f10 <HAL_GetTick>
 800608a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b20      	cmp	r3, #32
 8006096:	f040 80d9 	bne.w	800624c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	2319      	movs	r3, #25
 80060a0:	2201      	movs	r2, #1
 80060a2:	496d      	ldr	r1, [pc, #436]	; (8006258 <HAL_I2C_Mem_Write+0x1ec>)
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 f971 	bl	800638c <I2C_WaitOnFlagUntilTimeout>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80060b0:	2302      	movs	r3, #2
 80060b2:	e0cc      	b.n	800624e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d101      	bne.n	80060c2 <HAL_I2C_Mem_Write+0x56>
 80060be:	2302      	movs	r3, #2
 80060c0:	e0c5      	b.n	800624e <HAL_I2C_Mem_Write+0x1e2>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d007      	beq.n	80060e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2221      	movs	r2, #33	; 0x21
 80060fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2240      	movs	r2, #64	; 0x40
 8006104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6a3a      	ldr	r2, [r7, #32]
 8006112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006118:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800611e:	b29a      	uxth	r2, r3
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4a4d      	ldr	r2, [pc, #308]	; (800625c <HAL_I2C_Mem_Write+0x1f0>)
 8006128:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800612a:	88f8      	ldrh	r0, [r7, #6]
 800612c:	893a      	ldrh	r2, [r7, #8]
 800612e:	8979      	ldrh	r1, [r7, #10]
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	9301      	str	r3, [sp, #4]
 8006134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	4603      	mov	r3, r0
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 f890 	bl	8006260 <I2C_RequestMemoryWrite>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d052      	beq.n	80061ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e081      	b.n	800624e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800614a:	697a      	ldr	r2, [r7, #20]
 800614c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f000 f9f2 	bl	8006538 <I2C_WaitOnTXEFlagUntilTimeout>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00d      	beq.n	8006176 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800615e:	2b04      	cmp	r3, #4
 8006160:	d107      	bne.n	8006172 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006170:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e06b      	b.n	800624e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617a:	781a      	ldrb	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	1c5a      	adds	r2, r3, #1
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006190:	3b01      	subs	r3, #1
 8006192:	b29a      	uxth	r2, r3
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	f003 0304 	and.w	r3, r3, #4
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d11b      	bne.n	80061ec <HAL_I2C_Mem_Write+0x180>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d017      	beq.n	80061ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	781a      	ldrb	r2, [r3, #0]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1aa      	bne.n	800614a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061f4:	697a      	ldr	r2, [r7, #20]
 80061f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061f8:	68f8      	ldr	r0, [r7, #12]
 80061fa:	f000 f9de 	bl	80065ba <I2C_WaitOnBTFFlagUntilTimeout>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00d      	beq.n	8006220 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006208:	2b04      	cmp	r3, #4
 800620a:	d107      	bne.n	800621c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681a      	ldr	r2, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800621a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e016      	b.n	800624e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800622e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	e000      	b.n	800624e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800624c:	2302      	movs	r3, #2
  }
}
 800624e:	4618      	mov	r0, r3
 8006250:	3718      	adds	r7, #24
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	00100002 	.word	0x00100002
 800625c:	ffff0000 	.word	0xffff0000

08006260 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af02      	add	r7, sp, #8
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	4608      	mov	r0, r1
 800626a:	4611      	mov	r1, r2
 800626c:	461a      	mov	r2, r3
 800626e:	4603      	mov	r3, r0
 8006270:	817b      	strh	r3, [r7, #10]
 8006272:	460b      	mov	r3, r1
 8006274:	813b      	strh	r3, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006288:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800628a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	6a3b      	ldr	r3, [r7, #32]
 8006290:	2200      	movs	r2, #0
 8006292:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 f878 	bl	800638c <I2C_WaitOnFlagUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00d      	beq.n	80062be <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062b0:	d103      	bne.n	80062ba <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062b8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062ba:	2303      	movs	r3, #3
 80062bc:	e05f      	b.n	800637e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062be:	897b      	ldrh	r3, [r7, #10]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80062cc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	6a3a      	ldr	r2, [r7, #32]
 80062d2:	492d      	ldr	r1, [pc, #180]	; (8006388 <I2C_RequestMemoryWrite+0x128>)
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f8b0 	bl	800643a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d001      	beq.n	80062e4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e04c      	b.n	800637e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e4:	2300      	movs	r3, #0
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	617b      	str	r3, [r7, #20]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	617b      	str	r3, [r7, #20]
 80062f8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062fc:	6a39      	ldr	r1, [r7, #32]
 80062fe:	68f8      	ldr	r0, [r7, #12]
 8006300:	f000 f91a 	bl	8006538 <I2C_WaitOnTXEFlagUntilTimeout>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00d      	beq.n	8006326 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	2b04      	cmp	r3, #4
 8006310:	d107      	bne.n	8006322 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006320:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e02b      	b.n	800637e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006326:	88fb      	ldrh	r3, [r7, #6]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d105      	bne.n	8006338 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800632c:	893b      	ldrh	r3, [r7, #8]
 800632e:	b2da      	uxtb	r2, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	611a      	str	r2, [r3, #16]
 8006336:	e021      	b.n	800637c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006338:	893b      	ldrh	r3, [r7, #8]
 800633a:	0a1b      	lsrs	r3, r3, #8
 800633c:	b29b      	uxth	r3, r3
 800633e:	b2da      	uxtb	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006348:	6a39      	ldr	r1, [r7, #32]
 800634a:	68f8      	ldr	r0, [r7, #12]
 800634c:	f000 f8f4 	bl	8006538 <I2C_WaitOnTXEFlagUntilTimeout>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00d      	beq.n	8006372 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800635a:	2b04      	cmp	r3, #4
 800635c:	d107      	bne.n	800636e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800636c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e005      	b.n	800637e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006372:	893b      	ldrh	r3, [r7, #8]
 8006374:	b2da      	uxtb	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3718      	adds	r7, #24
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	00010002 	.word	0x00010002

0800638c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	4613      	mov	r3, r2
 800639a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800639c:	e025      	b.n	80063ea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a4:	d021      	beq.n	80063ea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a6:	f7fe fdb3 	bl	8004f10 <HAL_GetTick>
 80063aa:	4602      	mov	r2, r0
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d302      	bcc.n	80063bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d116      	bne.n	80063ea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2200      	movs	r2, #0
 80063c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	f043 0220 	orr.w	r2, r3, #32
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e023      	b.n	8006432 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	0c1b      	lsrs	r3, r3, #16
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d10d      	bne.n	8006410 <I2C_WaitOnFlagUntilTimeout+0x84>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	43da      	mvns	r2, r3
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	4013      	ands	r3, r2
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	bf0c      	ite	eq
 8006406:	2301      	moveq	r3, #1
 8006408:	2300      	movne	r3, #0
 800640a:	b2db      	uxtb	r3, r3
 800640c:	461a      	mov	r2, r3
 800640e:	e00c      	b.n	800642a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	43da      	mvns	r2, r3
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4013      	ands	r3, r2
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	bf0c      	ite	eq
 8006422:	2301      	moveq	r3, #1
 8006424:	2300      	movne	r3, #0
 8006426:	b2db      	uxtb	r3, r3
 8006428:	461a      	mov	r2, r3
 800642a:	79fb      	ldrb	r3, [r7, #7]
 800642c:	429a      	cmp	r2, r3
 800642e:	d0b6      	beq.n	800639e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006430:	2300      	movs	r3, #0
}
 8006432:	4618      	mov	r0, r3
 8006434:	3710      	adds	r7, #16
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}

0800643a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	60f8      	str	r0, [r7, #12]
 8006442:	60b9      	str	r1, [r7, #8]
 8006444:	607a      	str	r2, [r7, #4]
 8006446:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006448:	e051      	b.n	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006458:	d123      	bne.n	80064a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006468:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006472:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2200      	movs	r2, #0
 8006478:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	f043 0204 	orr.w	r2, r3, #4
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e046      	b.n	8006530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d021      	beq.n	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064aa:	f7fe fd31 	bl	8004f10 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d302      	bcc.n	80064c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d116      	bne.n	80064ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064da:	f043 0220 	orr.w	r2, r3, #32
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e020      	b.n	8006530 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	0c1b      	lsrs	r3, r3, #16
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d10c      	bne.n	8006512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	43da      	mvns	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	4013      	ands	r3, r2
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	bf14      	ite	ne
 800650a:	2301      	movne	r3, #1
 800650c:	2300      	moveq	r3, #0
 800650e:	b2db      	uxtb	r3, r3
 8006510:	e00b      	b.n	800652a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	43da      	mvns	r2, r3
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	4013      	ands	r3, r2
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	bf14      	ite	ne
 8006524:	2301      	movne	r3, #1
 8006526:	2300      	moveq	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	2b00      	cmp	r3, #0
 800652c:	d18d      	bne.n	800644a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006544:	e02d      	b.n	80065a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f000 f878 	bl	800663c <I2C_IsAcknowledgeFailed>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e02d      	b.n	80065b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655c:	d021      	beq.n	80065a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800655e:	f7fe fcd7 	bl	8004f10 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	68ba      	ldr	r2, [r7, #8]
 800656a:	429a      	cmp	r2, r3
 800656c:	d302      	bcc.n	8006574 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d116      	bne.n	80065a2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2220      	movs	r2, #32
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658e:	f043 0220 	orr.w	r2, r3, #32
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e007      	b.n	80065b2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	695b      	ldr	r3, [r3, #20]
 80065a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ac:	2b80      	cmp	r3, #128	; 0x80
 80065ae:	d1ca      	bne.n	8006546 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b084      	sub	sp, #16
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065c6:	e02d      	b.n	8006624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 f837 	bl	800663c <I2C_IsAcknowledgeFailed>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e02d      	b.n	8006634 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065de:	d021      	beq.n	8006624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065e0:	f7fe fc96 	bl	8004f10 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d302      	bcc.n	80065f6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d116      	bne.n	8006624 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	f043 0220 	orr.w	r2, r3, #32
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2200      	movs	r2, #0
 800661c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e007      	b.n	8006634 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b04      	cmp	r3, #4
 8006630:	d1ca      	bne.n	80065c8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	695b      	ldr	r3, [r3, #20]
 800664a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800664e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006652:	d11b      	bne.n	800668c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800665c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2220      	movs	r2, #32
 8006668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006678:	f043 0204 	orr.w	r2, r3, #4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e000      	b.n	800668e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	bc80      	pop	{r7}
 8006696:	4770      	bx	lr

08006698 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b086      	sub	sp, #24
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e272      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 8087 	beq.w	80067c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80066b8:	4b92      	ldr	r3, [pc, #584]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f003 030c 	and.w	r3, r3, #12
 80066c0:	2b04      	cmp	r3, #4
 80066c2:	d00c      	beq.n	80066de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80066c4:	4b8f      	ldr	r3, [pc, #572]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f003 030c 	and.w	r3, r3, #12
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d112      	bne.n	80066f6 <HAL_RCC_OscConfig+0x5e>
 80066d0:	4b8c      	ldr	r3, [pc, #560]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066dc:	d10b      	bne.n	80066f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066de:	4b89      	ldr	r3, [pc, #548]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d06c      	beq.n	80067c4 <HAL_RCC_OscConfig+0x12c>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d168      	bne.n	80067c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e24c      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066fe:	d106      	bne.n	800670e <HAL_RCC_OscConfig+0x76>
 8006700:	4b80      	ldr	r3, [pc, #512]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a7f      	ldr	r2, [pc, #508]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 8006706:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	e02e      	b.n	800676c <HAL_RCC_OscConfig+0xd4>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10c      	bne.n	8006730 <HAL_RCC_OscConfig+0x98>
 8006716:	4b7b      	ldr	r3, [pc, #492]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a7a      	ldr	r2, [pc, #488]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 800671c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	4b78      	ldr	r3, [pc, #480]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a77      	ldr	r2, [pc, #476]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 8006728:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	e01d      	b.n	800676c <HAL_RCC_OscConfig+0xd4>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006738:	d10c      	bne.n	8006754 <HAL_RCC_OscConfig+0xbc>
 800673a:	4b72      	ldr	r3, [pc, #456]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a71      	ldr	r2, [pc, #452]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 8006740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	4b6f      	ldr	r3, [pc, #444]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a6e      	ldr	r2, [pc, #440]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 800674c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	e00b      	b.n	800676c <HAL_RCC_OscConfig+0xd4>
 8006754:	4b6b      	ldr	r3, [pc, #428]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a6a      	ldr	r2, [pc, #424]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 800675a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	4b68      	ldr	r3, [pc, #416]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a67      	ldr	r2, [pc, #412]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 8006766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800676a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d013      	beq.n	800679c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006774:	f7fe fbcc 	bl	8004f10 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800677c:	f7fe fbc8 	bl	8004f10 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b64      	cmp	r3, #100	; 0x64
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e200      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678e:	4b5d      	ldr	r3, [pc, #372]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0f0      	beq.n	800677c <HAL_RCC_OscConfig+0xe4>
 800679a:	e014      	b.n	80067c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679c:	f7fe fbb8 	bl	8004f10 <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067a4:	f7fe fbb4 	bl	8004f10 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b64      	cmp	r3, #100	; 0x64
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e1ec      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067b6:	4b53      	ldr	r3, [pc, #332]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f0      	bne.n	80067a4 <HAL_RCC_OscConfig+0x10c>
 80067c2:	e000      	b.n	80067c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d063      	beq.n	800689a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067d2:	4b4c      	ldr	r3, [pc, #304]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f003 030c 	and.w	r3, r3, #12
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00b      	beq.n	80067f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80067de:	4b49      	ldr	r3, [pc, #292]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f003 030c 	and.w	r3, r3, #12
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d11c      	bne.n	8006824 <HAL_RCC_OscConfig+0x18c>
 80067ea:	4b46      	ldr	r3, [pc, #280]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d116      	bne.n	8006824 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067f6:	4b43      	ldr	r3, [pc, #268]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_RCC_OscConfig+0x176>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d001      	beq.n	800680e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e1c0      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680e:	4b3d      	ldr	r3, [pc, #244]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	4939      	ldr	r1, [pc, #228]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 800681e:	4313      	orrs	r3, r2
 8006820:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006822:	e03a      	b.n	800689a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d020      	beq.n	800686e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800682c:	4b36      	ldr	r3, [pc, #216]	; (8006908 <HAL_RCC_OscConfig+0x270>)
 800682e:	2201      	movs	r2, #1
 8006830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006832:	f7fe fb6d 	bl	8004f10 <HAL_GetTick>
 8006836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800683a:	f7fe fb69 	bl	8004f10 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e1a1      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684c:	4b2d      	ldr	r3, [pc, #180]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f0      	beq.n	800683a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006858:	4b2a      	ldr	r3, [pc, #168]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	4927      	ldr	r1, [pc, #156]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 8006868:	4313      	orrs	r3, r2
 800686a:	600b      	str	r3, [r1, #0]
 800686c:	e015      	b.n	800689a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800686e:	4b26      	ldr	r3, [pc, #152]	; (8006908 <HAL_RCC_OscConfig+0x270>)
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006874:	f7fe fb4c 	bl	8004f10 <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800687c:	f7fe fb48 	bl	8004f10 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e180      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800688e:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1f0      	bne.n	800687c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d03a      	beq.n	800691c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d019      	beq.n	80068e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ae:	4b17      	ldr	r3, [pc, #92]	; (800690c <HAL_RCC_OscConfig+0x274>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068b4:	f7fe fb2c 	bl	8004f10 <HAL_GetTick>
 80068b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ba:	e008      	b.n	80068ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068bc:	f7fe fb28 	bl	8004f10 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e160      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ce:	4b0d      	ldr	r3, [pc, #52]	; (8006904 <HAL_RCC_OscConfig+0x26c>)
 80068d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0f0      	beq.n	80068bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80068da:	2001      	movs	r0, #1
 80068dc:	f000 fada 	bl	8006e94 <RCC_Delay>
 80068e0:	e01c      	b.n	800691c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068e2:	4b0a      	ldr	r3, [pc, #40]	; (800690c <HAL_RCC_OscConfig+0x274>)
 80068e4:	2200      	movs	r2, #0
 80068e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068e8:	f7fe fb12 	bl	8004f10 <HAL_GetTick>
 80068ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068ee:	e00f      	b.n	8006910 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068f0:	f7fe fb0e 	bl	8004f10 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d908      	bls.n	8006910 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80068fe:	2303      	movs	r3, #3
 8006900:	e146      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
 8006902:	bf00      	nop
 8006904:	40021000 	.word	0x40021000
 8006908:	42420000 	.word	0x42420000
 800690c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006910:	4b92      	ldr	r3, [pc, #584]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1e9      	bne.n	80068f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	f000 80a6 	beq.w	8006a76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800692a:	2300      	movs	r3, #0
 800692c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800692e:	4b8b      	ldr	r3, [pc, #556]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006930:	69db      	ldr	r3, [r3, #28]
 8006932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10d      	bne.n	8006956 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800693a:	4b88      	ldr	r3, [pc, #544]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	4a87      	ldr	r2, [pc, #540]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006944:	61d3      	str	r3, [r2, #28]
 8006946:	4b85      	ldr	r3, [pc, #532]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006948:	69db      	ldr	r3, [r3, #28]
 800694a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800694e:	60bb      	str	r3, [r7, #8]
 8006950:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006952:	2301      	movs	r3, #1
 8006954:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006956:	4b82      	ldr	r3, [pc, #520]	; (8006b60 <HAL_RCC_OscConfig+0x4c8>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695e:	2b00      	cmp	r3, #0
 8006960:	d118      	bne.n	8006994 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006962:	4b7f      	ldr	r3, [pc, #508]	; (8006b60 <HAL_RCC_OscConfig+0x4c8>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a7e      	ldr	r2, [pc, #504]	; (8006b60 <HAL_RCC_OscConfig+0x4c8>)
 8006968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800696c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800696e:	f7fe facf 	bl	8004f10 <HAL_GetTick>
 8006972:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006974:	e008      	b.n	8006988 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006976:	f7fe facb 	bl	8004f10 <HAL_GetTick>
 800697a:	4602      	mov	r2, r0
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	2b64      	cmp	r3, #100	; 0x64
 8006982:	d901      	bls.n	8006988 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e103      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006988:	4b75      	ldr	r3, [pc, #468]	; (8006b60 <HAL_RCC_OscConfig+0x4c8>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006990:	2b00      	cmp	r3, #0
 8006992:	d0f0      	beq.n	8006976 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	2b01      	cmp	r3, #1
 800699a:	d106      	bne.n	80069aa <HAL_RCC_OscConfig+0x312>
 800699c:	4b6f      	ldr	r3, [pc, #444]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	4a6e      	ldr	r2, [pc, #440]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 80069a2:	f043 0301 	orr.w	r3, r3, #1
 80069a6:	6213      	str	r3, [r2, #32]
 80069a8:	e02d      	b.n	8006a06 <HAL_RCC_OscConfig+0x36e>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10c      	bne.n	80069cc <HAL_RCC_OscConfig+0x334>
 80069b2:	4b6a      	ldr	r3, [pc, #424]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	4a69      	ldr	r2, [pc, #420]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 80069b8:	f023 0301 	bic.w	r3, r3, #1
 80069bc:	6213      	str	r3, [r2, #32]
 80069be:	4b67      	ldr	r3, [pc, #412]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	4a66      	ldr	r2, [pc, #408]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 80069c4:	f023 0304 	bic.w	r3, r3, #4
 80069c8:	6213      	str	r3, [r2, #32]
 80069ca:	e01c      	b.n	8006a06 <HAL_RCC_OscConfig+0x36e>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	2b05      	cmp	r3, #5
 80069d2:	d10c      	bne.n	80069ee <HAL_RCC_OscConfig+0x356>
 80069d4:	4b61      	ldr	r3, [pc, #388]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	4a60      	ldr	r2, [pc, #384]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 80069da:	f043 0304 	orr.w	r3, r3, #4
 80069de:	6213      	str	r3, [r2, #32]
 80069e0:	4b5e      	ldr	r3, [pc, #376]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 80069e2:	6a1b      	ldr	r3, [r3, #32]
 80069e4:	4a5d      	ldr	r2, [pc, #372]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 80069e6:	f043 0301 	orr.w	r3, r3, #1
 80069ea:	6213      	str	r3, [r2, #32]
 80069ec:	e00b      	b.n	8006a06 <HAL_RCC_OscConfig+0x36e>
 80069ee:	4b5b      	ldr	r3, [pc, #364]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	4a5a      	ldr	r2, [pc, #360]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 80069f4:	f023 0301 	bic.w	r3, r3, #1
 80069f8:	6213      	str	r3, [r2, #32]
 80069fa:	4b58      	ldr	r3, [pc, #352]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	4a57      	ldr	r2, [pc, #348]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006a00:	f023 0304 	bic.w	r3, r3, #4
 8006a04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d015      	beq.n	8006a3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a0e:	f7fe fa7f 	bl	8004f10 <HAL_GetTick>
 8006a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a14:	e00a      	b.n	8006a2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a16:	f7fe fa7b 	bl	8004f10 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d901      	bls.n	8006a2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e0b1      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a2c:	4b4b      	ldr	r3, [pc, #300]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0ee      	beq.n	8006a16 <HAL_RCC_OscConfig+0x37e>
 8006a38:	e014      	b.n	8006a64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a3a:	f7fe fa69 	bl	8004f10 <HAL_GetTick>
 8006a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a40:	e00a      	b.n	8006a58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a42:	f7fe fa65 	bl	8004f10 <HAL_GetTick>
 8006a46:	4602      	mov	r2, r0
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d901      	bls.n	8006a58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e09b      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a58:	4b40      	ldr	r3, [pc, #256]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006a5a:	6a1b      	ldr	r3, [r3, #32]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1ee      	bne.n	8006a42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d105      	bne.n	8006a76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a6a:	4b3c      	ldr	r3, [pc, #240]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	4a3b      	ldr	r2, [pc, #236]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69db      	ldr	r3, [r3, #28]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8087 	beq.w	8006b8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a80:	4b36      	ldr	r3, [pc, #216]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f003 030c 	and.w	r3, r3, #12
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d061      	beq.n	8006b50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d146      	bne.n	8006b22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a94:	4b33      	ldr	r3, [pc, #204]	; (8006b64 <HAL_RCC_OscConfig+0x4cc>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a9a:	f7fe fa39 	bl	8004f10 <HAL_GetTick>
 8006a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006aa2:	f7fe fa35 	bl	8004f10 <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	d901      	bls.n	8006ab4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e06d      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006ab4:	4b29      	ldr	r3, [pc, #164]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1f0      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ac8:	d108      	bne.n	8006adc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006aca:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	4921      	ldr	r1, [pc, #132]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006adc:	4b1f      	ldr	r3, [pc, #124]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6a19      	ldr	r1, [r3, #32]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	430b      	orrs	r3, r1
 8006aee:	491b      	ldr	r1, [pc, #108]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006af0:	4313      	orrs	r3, r2
 8006af2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006af4:	4b1b      	ldr	r3, [pc, #108]	; (8006b64 <HAL_RCC_OscConfig+0x4cc>)
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006afa:	f7fe fa09 	bl	8004f10 <HAL_GetTick>
 8006afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b00:	e008      	b.n	8006b14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b02:	f7fe fa05 	bl	8004f10 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	2b02      	cmp	r3, #2
 8006b0e:	d901      	bls.n	8006b14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e03d      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006b14:	4b11      	ldr	r3, [pc, #68]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0f0      	beq.n	8006b02 <HAL_RCC_OscConfig+0x46a>
 8006b20:	e035      	b.n	8006b8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b22:	4b10      	ldr	r3, [pc, #64]	; (8006b64 <HAL_RCC_OscConfig+0x4cc>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b28:	f7fe f9f2 	bl	8004f10 <HAL_GetTick>
 8006b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b2e:	e008      	b.n	8006b42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b30:	f7fe f9ee 	bl	8004f10 <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e026      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006b42:	4b06      	ldr	r3, [pc, #24]	; (8006b5c <HAL_RCC_OscConfig+0x4c4>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1f0      	bne.n	8006b30 <HAL_RCC_OscConfig+0x498>
 8006b4e:	e01e      	b.n	8006b8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d107      	bne.n	8006b68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e019      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
 8006b5c:	40021000 	.word	0x40021000
 8006b60:	40007000 	.word	0x40007000
 8006b64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006b68:	4b0b      	ldr	r3, [pc, #44]	; (8006b98 <HAL_RCC_OscConfig+0x500>)
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d106      	bne.n	8006b8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d001      	beq.n	8006b8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	e000      	b.n	8006b90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	40021000 	.word	0x40021000

08006b9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e0d0      	b.n	8006d52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bb0:	4b6a      	ldr	r3, [pc, #424]	; (8006d5c <HAL_RCC_ClockConfig+0x1c0>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d910      	bls.n	8006be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bbe:	4b67      	ldr	r3, [pc, #412]	; (8006d5c <HAL_RCC_ClockConfig+0x1c0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f023 0207 	bic.w	r2, r3, #7
 8006bc6:	4965      	ldr	r1, [pc, #404]	; (8006d5c <HAL_RCC_ClockConfig+0x1c0>)
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bce:	4b63      	ldr	r3, [pc, #396]	; (8006d5c <HAL_RCC_ClockConfig+0x1c0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f003 0307 	and.w	r3, r3, #7
 8006bd6:	683a      	ldr	r2, [r7, #0]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d001      	beq.n	8006be0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e0b8      	b.n	8006d52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0302 	and.w	r3, r3, #2
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d020      	beq.n	8006c2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0304 	and.w	r3, r3, #4
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d005      	beq.n	8006c04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bf8:	4b59      	ldr	r3, [pc, #356]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	4a58      	ldr	r2, [pc, #352]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0308 	and.w	r3, r3, #8
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c10:	4b53      	ldr	r3, [pc, #332]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	4a52      	ldr	r2, [pc, #328]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c16:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006c1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c1c:	4b50      	ldr	r3, [pc, #320]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	494d      	ldr	r1, [pc, #308]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d040      	beq.n	8006cbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d107      	bne.n	8006c52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c42:	4b47      	ldr	r3, [pc, #284]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d115      	bne.n	8006c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e07f      	b.n	8006d52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d107      	bne.n	8006c6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c5a:	4b41      	ldr	r3, [pc, #260]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d109      	bne.n	8006c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e073      	b.n	8006d52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c6a:	4b3d      	ldr	r3, [pc, #244]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e06b      	b.n	8006d52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c7a:	4b39      	ldr	r3, [pc, #228]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	f023 0203 	bic.w	r2, r3, #3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	4936      	ldr	r1, [pc, #216]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c8c:	f7fe f940 	bl	8004f10 <HAL_GetTick>
 8006c90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c92:	e00a      	b.n	8006caa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c94:	f7fe f93c 	bl	8004f10 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e053      	b.n	8006d52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006caa:	4b2d      	ldr	r3, [pc, #180]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f003 020c 	and.w	r2, r3, #12
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d1eb      	bne.n	8006c94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cbc:	4b27      	ldr	r3, [pc, #156]	; (8006d5c <HAL_RCC_ClockConfig+0x1c0>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0307 	and.w	r3, r3, #7
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d210      	bcs.n	8006cec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cca:	4b24      	ldr	r3, [pc, #144]	; (8006d5c <HAL_RCC_ClockConfig+0x1c0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f023 0207 	bic.w	r2, r3, #7
 8006cd2:	4922      	ldr	r1, [pc, #136]	; (8006d5c <HAL_RCC_ClockConfig+0x1c0>)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cda:	4b20      	ldr	r3, [pc, #128]	; (8006d5c <HAL_RCC_ClockConfig+0x1c0>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d001      	beq.n	8006cec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e032      	b.n	8006d52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0304 	and.w	r3, r3, #4
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d008      	beq.n	8006d0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cf8:	4b19      	ldr	r3, [pc, #100]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	4916      	ldr	r1, [pc, #88]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d009      	beq.n	8006d2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d16:	4b12      	ldr	r3, [pc, #72]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	490e      	ldr	r1, [pc, #56]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006d26:	4313      	orrs	r3, r2
 8006d28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d2a:	f000 f821 	bl	8006d70 <HAL_RCC_GetSysClockFreq>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <HAL_RCC_ClockConfig+0x1c4>)
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	091b      	lsrs	r3, r3, #4
 8006d36:	f003 030f 	and.w	r3, r3, #15
 8006d3a:	490a      	ldr	r1, [pc, #40]	; (8006d64 <HAL_RCC_ClockConfig+0x1c8>)
 8006d3c:	5ccb      	ldrb	r3, [r1, r3]
 8006d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d42:	4a09      	ldr	r2, [pc, #36]	; (8006d68 <HAL_RCC_ClockConfig+0x1cc>)
 8006d44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006d46:	4b09      	ldr	r3, [pc, #36]	; (8006d6c <HAL_RCC_ClockConfig+0x1d0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fe f89e 	bl	8004e8c <HAL_InitTick>

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	40022000 	.word	0x40022000
 8006d60:	40021000 	.word	0x40021000
 8006d64:	0800a984 	.word	0x0800a984
 8006d68:	2000000c 	.word	0x2000000c
 8006d6c:	20000010 	.word	0x20000010

08006d70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d70:	b490      	push	{r4, r7}
 8006d72:	b08a      	sub	sp, #40	; 0x28
 8006d74:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006d76:	4b29      	ldr	r3, [pc, #164]	; (8006e1c <HAL_RCC_GetSysClockFreq+0xac>)
 8006d78:	1d3c      	adds	r4, r7, #4
 8006d7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006d80:	f240 2301 	movw	r3, #513	; 0x201
 8006d84:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	61fb      	str	r3, [r7, #28]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	627b      	str	r3, [r7, #36]	; 0x24
 8006d92:	2300      	movs	r3, #0
 8006d94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006d9a:	4b21      	ldr	r3, [pc, #132]	; (8006e20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	f003 030c 	and.w	r3, r3, #12
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d002      	beq.n	8006db0 <HAL_RCC_GetSysClockFreq+0x40>
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d003      	beq.n	8006db6 <HAL_RCC_GetSysClockFreq+0x46>
 8006dae:	e02b      	b.n	8006e08 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006db0:	4b1c      	ldr	r3, [pc, #112]	; (8006e24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006db2:	623b      	str	r3, [r7, #32]
      break;
 8006db4:	e02b      	b.n	8006e0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	0c9b      	lsrs	r3, r3, #18
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	3328      	adds	r3, #40	; 0x28
 8006dc0:	443b      	add	r3, r7
 8006dc2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006dc6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d012      	beq.n	8006df8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006dd2:	4b13      	ldr	r3, [pc, #76]	; (8006e20 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	0c5b      	lsrs	r3, r3, #17
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	3328      	adds	r3, #40	; 0x28
 8006dde:	443b      	add	r3, r7
 8006de0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006de4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	4a0e      	ldr	r2, [pc, #56]	; (8006e24 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006dea:	fb03 f202 	mul.w	r2, r3, r2
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df4:	627b      	str	r3, [r7, #36]	; 0x24
 8006df6:	e004      	b.n	8006e02 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	4a0b      	ldr	r2, [pc, #44]	; (8006e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dfc:	fb02 f303 	mul.w	r3, r2, r3
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e04:	623b      	str	r3, [r7, #32]
      break;
 8006e06:	e002      	b.n	8006e0e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006e08:	4b08      	ldr	r3, [pc, #32]	; (8006e2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e0a:	623b      	str	r3, [r7, #32]
      break;
 8006e0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3728      	adds	r7, #40	; 0x28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bc90      	pop	{r4, r7}
 8006e18:	4770      	bx	lr
 8006e1a:	bf00      	nop
 8006e1c:	0800a370 	.word	0x0800a370
 8006e20:	40021000 	.word	0x40021000
 8006e24:	00f42400 	.word	0x00f42400
 8006e28:	003d0900 	.word	0x003d0900
 8006e2c:	007a1200 	.word	0x007a1200

08006e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e30:	b480      	push	{r7}
 8006e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e34:	4b02      	ldr	r3, [pc, #8]	; (8006e40 <HAL_RCC_GetHCLKFreq+0x10>)
 8006e36:	681b      	ldr	r3, [r3, #0]
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bc80      	pop	{r7}
 8006e3e:	4770      	bx	lr
 8006e40:	2000000c 	.word	0x2000000c

08006e44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e48:	f7ff fff2 	bl	8006e30 <HAL_RCC_GetHCLKFreq>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	0a1b      	lsrs	r3, r3, #8
 8006e54:	f003 0307 	and.w	r3, r3, #7
 8006e58:	4903      	ldr	r1, [pc, #12]	; (8006e68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e5a:	5ccb      	ldrb	r3, [r1, r3]
 8006e5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	40021000 	.word	0x40021000
 8006e68:	0800a994 	.word	0x0800a994

08006e6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e70:	f7ff ffde 	bl	8006e30 <HAL_RCC_GetHCLKFreq>
 8006e74:	4602      	mov	r2, r0
 8006e76:	4b05      	ldr	r3, [pc, #20]	; (8006e8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	0adb      	lsrs	r3, r3, #11
 8006e7c:	f003 0307 	and.w	r3, r3, #7
 8006e80:	4903      	ldr	r1, [pc, #12]	; (8006e90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e82:	5ccb      	ldrb	r3, [r1, r3]
 8006e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	40021000 	.word	0x40021000
 8006e90:	0800a994 	.word	0x0800a994

08006e94 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b085      	sub	sp, #20
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006e9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ec8 <RCC_Delay+0x34>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <RCC_Delay+0x38>)
 8006ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea6:	0a5b      	lsrs	r3, r3, #9
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
 8006eae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006eb0:	bf00      	nop
  }
  while (Delay --);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	1e5a      	subs	r2, r3, #1
 8006eb6:	60fa      	str	r2, [r7, #12]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1f9      	bne.n	8006eb0 <RCC_Delay+0x1c>
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	3714      	adds	r7, #20
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bc80      	pop	{r7}
 8006ec6:	4770      	bx	lr
 8006ec8:	2000000c 	.word	0x2000000c
 8006ecc:	10624dd3 	.word	0x10624dd3

08006ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e041      	b.n	8006f66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d106      	bne.n	8006efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f7fd fbcc 	bl	8004694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	4610      	mov	r0, r2
 8006f10:	f000 fd88 	bl	8007a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
	...

08006f70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d001      	beq.n	8006f88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e044      	b.n	8007012 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f042 0201 	orr.w	r2, r2, #1
 8006f9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a1d      	ldr	r2, [pc, #116]	; (800701c <HAL_TIM_Base_Start_IT+0xac>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d018      	beq.n	8006fdc <HAL_TIM_Base_Start_IT+0x6c>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1c      	ldr	r2, [pc, #112]	; (8007020 <HAL_TIM_Base_Start_IT+0xb0>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d013      	beq.n	8006fdc <HAL_TIM_Base_Start_IT+0x6c>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fbc:	d00e      	beq.n	8006fdc <HAL_TIM_Base_Start_IT+0x6c>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a18      	ldr	r2, [pc, #96]	; (8007024 <HAL_TIM_Base_Start_IT+0xb4>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d009      	beq.n	8006fdc <HAL_TIM_Base_Start_IT+0x6c>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a16      	ldr	r2, [pc, #88]	; (8007028 <HAL_TIM_Base_Start_IT+0xb8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <HAL_TIM_Base_Start_IT+0x6c>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a15      	ldr	r2, [pc, #84]	; (800702c <HAL_TIM_Base_Start_IT+0xbc>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d111      	bne.n	8007000 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f003 0307 	and.w	r3, r3, #7
 8006fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b06      	cmp	r3, #6
 8006fec:	d010      	beq.n	8007010 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f042 0201 	orr.w	r2, r2, #1
 8006ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ffe:	e007      	b.n	8007010 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f042 0201 	orr.w	r2, r2, #1
 800700e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007010:	2300      	movs	r3, #0
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	bc80      	pop	{r7}
 800701a:	4770      	bx	lr
 800701c:	40012c00 	.word	0x40012c00
 8007020:	40013400 	.word	0x40013400
 8007024:	40000400 	.word	0x40000400
 8007028:	40000800 	.word	0x40000800
 800702c:	40000c00 	.word	0x40000c00

08007030 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e041      	b.n	80070c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007048:	b2db      	uxtb	r3, r3
 800704a:	2b00      	cmp	r3, #0
 800704c:	d106      	bne.n	800705c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f839 	bl	80070ce <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3304      	adds	r3, #4
 800706c:	4619      	mov	r1, r3
 800706e:	4610      	mov	r0, r2
 8007070:	f000 fcd8 	bl	8007a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2201      	movs	r2, #1
 80070a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2201      	movs	r2, #1
 80070b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80070c4:	2300      	movs	r3, #0
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b083      	sub	sp, #12
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	bc80      	pop	{r7}
 80070de:	4770      	bx	lr

080070e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d109      	bne.n	8007104 <HAL_TIM_PWM_Start+0x24>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	bf14      	ite	ne
 80070fc:	2301      	movne	r3, #1
 80070fe:	2300      	moveq	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	e022      	b.n	800714a <HAL_TIM_PWM_Start+0x6a>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b04      	cmp	r3, #4
 8007108:	d109      	bne.n	800711e <HAL_TIM_PWM_Start+0x3e>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b01      	cmp	r3, #1
 8007114:	bf14      	ite	ne
 8007116:	2301      	movne	r3, #1
 8007118:	2300      	moveq	r3, #0
 800711a:	b2db      	uxtb	r3, r3
 800711c:	e015      	b.n	800714a <HAL_TIM_PWM_Start+0x6a>
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	2b08      	cmp	r3, #8
 8007122:	d109      	bne.n	8007138 <HAL_TIM_PWM_Start+0x58>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b01      	cmp	r3, #1
 800712e:	bf14      	ite	ne
 8007130:	2301      	movne	r3, #1
 8007132:	2300      	moveq	r3, #0
 8007134:	b2db      	uxtb	r3, r3
 8007136:	e008      	b.n	800714a <HAL_TIM_PWM_Start+0x6a>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b01      	cmp	r3, #1
 8007142:	bf14      	ite	ne
 8007144:	2301      	movne	r3, #1
 8007146:	2300      	moveq	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d001      	beq.n	8007152 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e072      	b.n	8007238 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d104      	bne.n	8007162 <HAL_TIM_PWM_Start+0x82>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2202      	movs	r2, #2
 800715c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007160:	e013      	b.n	800718a <HAL_TIM_PWM_Start+0xaa>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b04      	cmp	r3, #4
 8007166:	d104      	bne.n	8007172 <HAL_TIM_PWM_Start+0x92>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2202      	movs	r2, #2
 800716c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007170:	e00b      	b.n	800718a <HAL_TIM_PWM_Start+0xaa>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2b08      	cmp	r3, #8
 8007176:	d104      	bne.n	8007182 <HAL_TIM_PWM_Start+0xa2>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007180:	e003      	b.n	800718a <HAL_TIM_PWM_Start+0xaa>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2202      	movs	r2, #2
 8007186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2201      	movs	r2, #1
 8007190:	6839      	ldr	r1, [r7, #0]
 8007192:	4618      	mov	r0, r3
 8007194:	f000 ff02 	bl	8007f9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a28      	ldr	r2, [pc, #160]	; (8007240 <HAL_TIM_PWM_Start+0x160>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d004      	beq.n	80071ac <HAL_TIM_PWM_Start+0xcc>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a27      	ldr	r2, [pc, #156]	; (8007244 <HAL_TIM_PWM_Start+0x164>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d101      	bne.n	80071b0 <HAL_TIM_PWM_Start+0xd0>
 80071ac:	2301      	movs	r3, #1
 80071ae:	e000      	b.n	80071b2 <HAL_TIM_PWM_Start+0xd2>
 80071b0:	2300      	movs	r3, #0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d007      	beq.n	80071c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80071c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a1d      	ldr	r2, [pc, #116]	; (8007240 <HAL_TIM_PWM_Start+0x160>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d018      	beq.n	8007202 <HAL_TIM_PWM_Start+0x122>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a1b      	ldr	r2, [pc, #108]	; (8007244 <HAL_TIM_PWM_Start+0x164>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d013      	beq.n	8007202 <HAL_TIM_PWM_Start+0x122>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e2:	d00e      	beq.n	8007202 <HAL_TIM_PWM_Start+0x122>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a17      	ldr	r2, [pc, #92]	; (8007248 <HAL_TIM_PWM_Start+0x168>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d009      	beq.n	8007202 <HAL_TIM_PWM_Start+0x122>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a16      	ldr	r2, [pc, #88]	; (800724c <HAL_TIM_PWM_Start+0x16c>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d004      	beq.n	8007202 <HAL_TIM_PWM_Start+0x122>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a14      	ldr	r2, [pc, #80]	; (8007250 <HAL_TIM_PWM_Start+0x170>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d111      	bne.n	8007226 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b06      	cmp	r3, #6
 8007212:	d010      	beq.n	8007236 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f042 0201 	orr.w	r2, r2, #1
 8007222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007224:	e007      	b.n	8007236 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f042 0201 	orr.w	r2, r2, #1
 8007234:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	40012c00 	.word	0x40012c00
 8007244:	40013400 	.word	0x40013400
 8007248:	40000400 	.word	0x40000400
 800724c:	40000800 	.word	0x40000800
 8007250:	40000c00 	.word	0x40000c00

08007254 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d101      	bne.n	8007268 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e093      	b.n	8007390 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b00      	cmp	r3, #0
 8007272:	d106      	bne.n	8007282 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f7fd fa57 	bl	8004730 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2202      	movs	r2, #2
 8007286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007298:	f023 0307 	bic.w	r3, r3, #7
 800729c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3304      	adds	r3, #4
 80072a6:	4619      	mov	r1, r3
 80072a8:	4610      	mov	r0, r2
 80072aa:	f000 fbbb 	bl	8007a24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	699b      	ldr	r3, [r3, #24]
 80072bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072d6:	f023 0303 	bic.w	r3, r3, #3
 80072da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	021b      	lsls	r3, r3, #8
 80072e6:	4313      	orrs	r3, r2
 80072e8:	693a      	ldr	r2, [r7, #16]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80072f4:	f023 030c 	bic.w	r3, r3, #12
 80072f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007304:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	68da      	ldr	r2, [r3, #12]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	021b      	lsls	r3, r3, #8
 8007310:	4313      	orrs	r3, r2
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	4313      	orrs	r3, r2
 8007316:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	011a      	lsls	r2, r3, #4
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	031b      	lsls	r3, r3, #12
 8007324:	4313      	orrs	r3, r2
 8007326:	693a      	ldr	r2, [r7, #16]
 8007328:	4313      	orrs	r3, r2
 800732a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007332:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	011b      	lsls	r3, r3, #4
 800733e:	4313      	orrs	r3, r2
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80073b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80073c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d110      	bne.n	80073ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d102      	bne.n	80073d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80073ce:	7b7b      	ldrb	r3, [r7, #13]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d001      	beq.n	80073d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e069      	b.n	80074ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073e8:	e031      	b.n	800744e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d110      	bne.n	8007412 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d102      	bne.n	80073fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80073f6:	7b3b      	ldrb	r3, [r7, #12]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d001      	beq.n	8007400 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e055      	b.n	80074ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007410:	e01d      	b.n	800744e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d108      	bne.n	800742a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d105      	bne.n	800742a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800741e:	7b7b      	ldrb	r3, [r7, #13]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d102      	bne.n	800742a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007424:	7b3b      	ldrb	r3, [r7, #12]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d001      	beq.n	800742e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e03e      	b.n	80074ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2202      	movs	r2, #2
 800743a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2202      	movs	r2, #2
 8007442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2202      	movs	r2, #2
 800744a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <HAL_TIM_Encoder_Start+0xc4>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2b04      	cmp	r3, #4
 8007458:	d008      	beq.n	800746c <HAL_TIM_Encoder_Start+0xd4>
 800745a:	e00f      	b.n	800747c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2201      	movs	r2, #1
 8007462:	2100      	movs	r1, #0
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fd99 	bl	8007f9c <TIM_CCxChannelCmd>
      break;
 800746a:	e016      	b.n	800749a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2201      	movs	r2, #1
 8007472:	2104      	movs	r1, #4
 8007474:	4618      	mov	r0, r3
 8007476:	f000 fd91 	bl	8007f9c <TIM_CCxChannelCmd>
      break;
 800747a:	e00e      	b.n	800749a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2201      	movs	r2, #1
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fd89 	bl	8007f9c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2201      	movs	r2, #1
 8007490:	2104      	movs	r1, #4
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fd82 	bl	8007f9c <TIM_CCxChannelCmd>
      break;
 8007498:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f042 0201 	orr.w	r2, r2, #1
 80074a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b02      	cmp	r3, #2
 80074c8:	d122      	bne.n	8007510 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d11b      	bne.n	8007510 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f06f 0202 	mvn.w	r2, #2
 80074e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 fa78 	bl	80079ec <HAL_TIM_IC_CaptureCallback>
 80074fc:	e005      	b.n	800750a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fa6b 	bl	80079da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 fa7a 	bl	80079fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	f003 0304 	and.w	r3, r3, #4
 800751a:	2b04      	cmp	r3, #4
 800751c:	d122      	bne.n	8007564 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b04      	cmp	r3, #4
 800752a:	d11b      	bne.n	8007564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f06f 0204 	mvn.w	r2, #4
 8007534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2202      	movs	r2, #2
 800753a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 fa4e 	bl	80079ec <HAL_TIM_IC_CaptureCallback>
 8007550:	e005      	b.n	800755e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fa41 	bl	80079da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fa50 	bl	80079fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b08      	cmp	r3, #8
 8007570:	d122      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0308 	and.w	r3, r3, #8
 800757c:	2b08      	cmp	r3, #8
 800757e:	d11b      	bne.n	80075b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f06f 0208 	mvn.w	r2, #8
 8007588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2204      	movs	r2, #4
 800758e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	69db      	ldr	r3, [r3, #28]
 8007596:	f003 0303 	and.w	r3, r3, #3
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fa24 	bl	80079ec <HAL_TIM_IC_CaptureCallback>
 80075a4:	e005      	b.n	80075b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 fa17 	bl	80079da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fa26 	bl	80079fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	2b10      	cmp	r3, #16
 80075c4:	d122      	bne.n	800760c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	f003 0310 	and.w	r3, r3, #16
 80075d0:	2b10      	cmp	r3, #16
 80075d2:	d11b      	bne.n	800760c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f06f 0210 	mvn.w	r2, #16
 80075dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2208      	movs	r2, #8
 80075e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f000 f9fa 	bl	80079ec <HAL_TIM_IC_CaptureCallback>
 80075f8:	e005      	b.n	8007606 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f9ed 	bl	80079da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f9fc 	bl	80079fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	f003 0301 	and.w	r3, r3, #1
 8007616:	2b01      	cmp	r3, #1
 8007618:	d10e      	bne.n	8007638 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	f003 0301 	and.w	r3, r3, #1
 8007624:	2b01      	cmp	r3, #1
 8007626:	d107      	bne.n	8007638 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f06f 0201 	mvn.w	r2, #1
 8007630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 f9c8 	bl	80079c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007642:	2b80      	cmp	r3, #128	; 0x80
 8007644:	d10e      	bne.n	8007664 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007650:	2b80      	cmp	r3, #128	; 0x80
 8007652:	d107      	bne.n	8007664 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800765c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fd86 	bl	8008170 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766e:	2b40      	cmp	r3, #64	; 0x40
 8007670:	d10e      	bne.n	8007690 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767c:	2b40      	cmp	r3, #64	; 0x40
 800767e:	d107      	bne.n	8007690 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 f9c0 	bl	8007a10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b20      	cmp	r3, #32
 800769c:	d10e      	bne.n	80076bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	f003 0320 	and.w	r3, r3, #32
 80076a8:	2b20      	cmp	r3, #32
 80076aa:	d107      	bne.n	80076bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f06f 0220 	mvn.w	r2, #32
 80076b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fd51 	bl	800815e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076bc:	bf00      	nop
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80076da:	2302      	movs	r3, #2
 80076dc:	e0ac      	b.n	8007838 <HAL_TIM_PWM_ConfigChannel+0x174>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2b0c      	cmp	r3, #12
 80076ea:	f200 809f 	bhi.w	800782c <HAL_TIM_PWM_ConfigChannel+0x168>
 80076ee:	a201      	add	r2, pc, #4	; (adr r2, 80076f4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80076f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f4:	08007729 	.word	0x08007729
 80076f8:	0800782d 	.word	0x0800782d
 80076fc:	0800782d 	.word	0x0800782d
 8007700:	0800782d 	.word	0x0800782d
 8007704:	08007769 	.word	0x08007769
 8007708:	0800782d 	.word	0x0800782d
 800770c:	0800782d 	.word	0x0800782d
 8007710:	0800782d 	.word	0x0800782d
 8007714:	080077ab 	.word	0x080077ab
 8007718:	0800782d 	.word	0x0800782d
 800771c:	0800782d 	.word	0x0800782d
 8007720:	0800782d 	.word	0x0800782d
 8007724:	080077eb 	.word	0x080077eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68b9      	ldr	r1, [r7, #8]
 800772e:	4618      	mov	r0, r3
 8007730:	f000 f9f2 	bl	8007b18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	699a      	ldr	r2, [r3, #24]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0208 	orr.w	r2, r2, #8
 8007742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	699a      	ldr	r2, [r3, #24]
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0204 	bic.w	r2, r2, #4
 8007752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6999      	ldr	r1, [r3, #24]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	691a      	ldr	r2, [r3, #16]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	619a      	str	r2, [r3, #24]
      break;
 8007766:	e062      	b.n	800782e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68b9      	ldr	r1, [r7, #8]
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fa42 	bl	8007bf8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	699a      	ldr	r2, [r3, #24]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	699a      	ldr	r2, [r3, #24]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6999      	ldr	r1, [r3, #24]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	691b      	ldr	r3, [r3, #16]
 800779e:	021a      	lsls	r2, r3, #8
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	430a      	orrs	r2, r1
 80077a6:	619a      	str	r2, [r3, #24]
      break;
 80077a8:	e041      	b.n	800782e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68b9      	ldr	r1, [r7, #8]
 80077b0:	4618      	mov	r0, r3
 80077b2:	f000 fa95 	bl	8007ce0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69da      	ldr	r2, [r3, #28]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f042 0208 	orr.w	r2, r2, #8
 80077c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69da      	ldr	r2, [r3, #28]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0204 	bic.w	r2, r2, #4
 80077d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69d9      	ldr	r1, [r3, #28]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	691a      	ldr	r2, [r3, #16]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	430a      	orrs	r2, r1
 80077e6:	61da      	str	r2, [r3, #28]
      break;
 80077e8:	e021      	b.n	800782e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68b9      	ldr	r1, [r7, #8]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f000 fae9 	bl	8007dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	69da      	ldr	r2, [r3, #28]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	69da      	ldr	r2, [r3, #28]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	69d9      	ldr	r1, [r3, #28]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	021a      	lsls	r2, r3, #8
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	61da      	str	r2, [r3, #28]
      break;
 800782a:	e000      	b.n	800782e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800782c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2200      	movs	r2, #0
 8007832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007850:	2b01      	cmp	r3, #1
 8007852:	d101      	bne.n	8007858 <HAL_TIM_ConfigClockSource+0x18>
 8007854:	2302      	movs	r3, #2
 8007856:	e0b3      	b.n	80079c0 <HAL_TIM_ConfigClockSource+0x180>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2201      	movs	r2, #1
 800785c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2202      	movs	r2, #2
 8007864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007876:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800787e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007890:	d03e      	beq.n	8007910 <HAL_TIM_ConfigClockSource+0xd0>
 8007892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007896:	f200 8087 	bhi.w	80079a8 <HAL_TIM_ConfigClockSource+0x168>
 800789a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800789e:	f000 8085 	beq.w	80079ac <HAL_TIM_ConfigClockSource+0x16c>
 80078a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078a6:	d87f      	bhi.n	80079a8 <HAL_TIM_ConfigClockSource+0x168>
 80078a8:	2b70      	cmp	r3, #112	; 0x70
 80078aa:	d01a      	beq.n	80078e2 <HAL_TIM_ConfigClockSource+0xa2>
 80078ac:	2b70      	cmp	r3, #112	; 0x70
 80078ae:	d87b      	bhi.n	80079a8 <HAL_TIM_ConfigClockSource+0x168>
 80078b0:	2b60      	cmp	r3, #96	; 0x60
 80078b2:	d050      	beq.n	8007956 <HAL_TIM_ConfigClockSource+0x116>
 80078b4:	2b60      	cmp	r3, #96	; 0x60
 80078b6:	d877      	bhi.n	80079a8 <HAL_TIM_ConfigClockSource+0x168>
 80078b8:	2b50      	cmp	r3, #80	; 0x50
 80078ba:	d03c      	beq.n	8007936 <HAL_TIM_ConfigClockSource+0xf6>
 80078bc:	2b50      	cmp	r3, #80	; 0x50
 80078be:	d873      	bhi.n	80079a8 <HAL_TIM_ConfigClockSource+0x168>
 80078c0:	2b40      	cmp	r3, #64	; 0x40
 80078c2:	d058      	beq.n	8007976 <HAL_TIM_ConfigClockSource+0x136>
 80078c4:	2b40      	cmp	r3, #64	; 0x40
 80078c6:	d86f      	bhi.n	80079a8 <HAL_TIM_ConfigClockSource+0x168>
 80078c8:	2b30      	cmp	r3, #48	; 0x30
 80078ca:	d064      	beq.n	8007996 <HAL_TIM_ConfigClockSource+0x156>
 80078cc:	2b30      	cmp	r3, #48	; 0x30
 80078ce:	d86b      	bhi.n	80079a8 <HAL_TIM_ConfigClockSource+0x168>
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d060      	beq.n	8007996 <HAL_TIM_ConfigClockSource+0x156>
 80078d4:	2b20      	cmp	r3, #32
 80078d6:	d867      	bhi.n	80079a8 <HAL_TIM_ConfigClockSource+0x168>
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d05c      	beq.n	8007996 <HAL_TIM_ConfigClockSource+0x156>
 80078dc:	2b10      	cmp	r3, #16
 80078de:	d05a      	beq.n	8007996 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80078e0:	e062      	b.n	80079a8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	6899      	ldr	r1, [r3, #8]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685a      	ldr	r2, [r3, #4]
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	f000 fb34 	bl	8007f5e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007904:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68fa      	ldr	r2, [r7, #12]
 800790c:	609a      	str	r2, [r3, #8]
      break;
 800790e:	e04e      	b.n	80079ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	6899      	ldr	r1, [r3, #8]
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	f000 fb1d 	bl	8007f5e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	689a      	ldr	r2, [r3, #8]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007932:	609a      	str	r2, [r3, #8]
      break;
 8007934:	e03b      	b.n	80079ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6818      	ldr	r0, [r3, #0]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	6859      	ldr	r1, [r3, #4]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	461a      	mov	r2, r3
 8007944:	f000 fa94 	bl	8007e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2150      	movs	r1, #80	; 0x50
 800794e:	4618      	mov	r0, r3
 8007950:	f000 faeb 	bl	8007f2a <TIM_ITRx_SetConfig>
      break;
 8007954:	e02b      	b.n	80079ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	6859      	ldr	r1, [r3, #4]
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	461a      	mov	r2, r3
 8007964:	f000 fab2 	bl	8007ecc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2160      	movs	r1, #96	; 0x60
 800796e:	4618      	mov	r0, r3
 8007970:	f000 fadb 	bl	8007f2a <TIM_ITRx_SetConfig>
      break;
 8007974:	e01b      	b.n	80079ae <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6818      	ldr	r0, [r3, #0]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	6859      	ldr	r1, [r3, #4]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	461a      	mov	r2, r3
 8007984:	f000 fa74 	bl	8007e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2140      	movs	r1, #64	; 0x40
 800798e:	4618      	mov	r0, r3
 8007990:	f000 facb 	bl	8007f2a <TIM_ITRx_SetConfig>
      break;
 8007994:	e00b      	b.n	80079ae <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4619      	mov	r1, r3
 80079a0:	4610      	mov	r0, r2
 80079a2:	f000 fac2 	bl	8007f2a <TIM_ITRx_SetConfig>
        break;
 80079a6:	e002      	b.n	80079ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80079a8:	bf00      	nop
 80079aa:	e000      	b.n	80079ae <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80079ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2201      	movs	r2, #1
 80079b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bc80      	pop	{r7}
 80079d8:	4770      	bx	lr

080079da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80079da:	b480      	push	{r7}
 80079dc:	b083      	sub	sp, #12
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80079e2:	bf00      	nop
 80079e4:	370c      	adds	r7, #12
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bc80      	pop	{r7}
 80079ea:	4770      	bx	lr

080079ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bc80      	pop	{r7}
 80079fc:	4770      	bx	lr

080079fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a06:	bf00      	nop
 8007a08:	370c      	adds	r7, #12
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bc80      	pop	{r7}
 8007a0e:	4770      	bx	lr

08007a10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc80      	pop	{r7}
 8007a20:	4770      	bx	lr
	...

08007a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b085      	sub	sp, #20
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a33      	ldr	r2, [pc, #204]	; (8007b04 <TIM_Base_SetConfig+0xe0>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d013      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a32      	ldr	r2, [pc, #200]	; (8007b08 <TIM_Base_SetConfig+0xe4>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d00f      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a4a:	d00b      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	4a2f      	ldr	r2, [pc, #188]	; (8007b0c <TIM_Base_SetConfig+0xe8>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d007      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4a2e      	ldr	r2, [pc, #184]	; (8007b10 <TIM_Base_SetConfig+0xec>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d003      	beq.n	8007a64 <TIM_Base_SetConfig+0x40>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	4a2d      	ldr	r2, [pc, #180]	; (8007b14 <TIM_Base_SetConfig+0xf0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d108      	bne.n	8007a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4a22      	ldr	r2, [pc, #136]	; (8007b04 <TIM_Base_SetConfig+0xe0>)
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d013      	beq.n	8007aa6 <TIM_Base_SetConfig+0x82>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	4a21      	ldr	r2, [pc, #132]	; (8007b08 <TIM_Base_SetConfig+0xe4>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d00f      	beq.n	8007aa6 <TIM_Base_SetConfig+0x82>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a8c:	d00b      	beq.n	8007aa6 <TIM_Base_SetConfig+0x82>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a1e      	ldr	r2, [pc, #120]	; (8007b0c <TIM_Base_SetConfig+0xe8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d007      	beq.n	8007aa6 <TIM_Base_SetConfig+0x82>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a1d      	ldr	r2, [pc, #116]	; (8007b10 <TIM_Base_SetConfig+0xec>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d003      	beq.n	8007aa6 <TIM_Base_SetConfig+0x82>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	4a1c      	ldr	r2, [pc, #112]	; (8007b14 <TIM_Base_SetConfig+0xf0>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d108      	bne.n	8007ab8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	4313      	orrs	r3, r2
 8007ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	689a      	ldr	r2, [r3, #8]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a09      	ldr	r2, [pc, #36]	; (8007b04 <TIM_Base_SetConfig+0xe0>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d003      	beq.n	8007aec <TIM_Base_SetConfig+0xc8>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a08      	ldr	r2, [pc, #32]	; (8007b08 <TIM_Base_SetConfig+0xe4>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d103      	bne.n	8007af4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	691a      	ldr	r2, [r3, #16]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	615a      	str	r2, [r3, #20]
}
 8007afa:	bf00      	nop
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bc80      	pop	{r7}
 8007b02:	4770      	bx	lr
 8007b04:	40012c00 	.word	0x40012c00
 8007b08:	40013400 	.word	0x40013400
 8007b0c:	40000400 	.word	0x40000400
 8007b10:	40000800 	.word	0x40000800
 8007b14:	40000c00 	.word	0x40000c00

08007b18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b087      	sub	sp, #28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6a1b      	ldr	r3, [r3, #32]
 8007b26:	f023 0201 	bic.w	r2, r3, #1
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 0303 	bic.w	r3, r3, #3
 8007b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	f023 0302 	bic.w	r3, r3, #2
 8007b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a20      	ldr	r2, [pc, #128]	; (8007bf0 <TIM_OC1_SetConfig+0xd8>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d003      	beq.n	8007b7c <TIM_OC1_SetConfig+0x64>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a1f      	ldr	r2, [pc, #124]	; (8007bf4 <TIM_OC1_SetConfig+0xdc>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d10c      	bne.n	8007b96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	f023 0308 	bic.w	r3, r3, #8
 8007b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	697a      	ldr	r2, [r7, #20]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f023 0304 	bic.w	r3, r3, #4
 8007b94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	4a15      	ldr	r2, [pc, #84]	; (8007bf0 <TIM_OC1_SetConfig+0xd8>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d003      	beq.n	8007ba6 <TIM_OC1_SetConfig+0x8e>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a14      	ldr	r2, [pc, #80]	; (8007bf4 <TIM_OC1_SetConfig+0xdc>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d111      	bne.n	8007bca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	693a      	ldr	r2, [r7, #16]
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	693a      	ldr	r2, [r7, #16]
 8007bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	685a      	ldr	r2, [r3, #4]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	621a      	str	r2, [r3, #32]
}
 8007be4:	bf00      	nop
 8007be6:	371c      	adds	r7, #28
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bc80      	pop	{r7}
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	40012c00 	.word	0x40012c00
 8007bf4:	40013400 	.word	0x40013400

08007bf8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b087      	sub	sp, #28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	f023 0210 	bic.w	r2, r3, #16
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a1b      	ldr	r3, [r3, #32]
 8007c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	699b      	ldr	r3, [r3, #24]
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	021b      	lsls	r3, r3, #8
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	f023 0320 	bic.w	r3, r3, #32
 8007c42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	011b      	lsls	r3, r3, #4
 8007c4a:	697a      	ldr	r2, [r7, #20]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a21      	ldr	r2, [pc, #132]	; (8007cd8 <TIM_OC2_SetConfig+0xe0>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d003      	beq.n	8007c60 <TIM_OC2_SetConfig+0x68>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a20      	ldr	r2, [pc, #128]	; (8007cdc <TIM_OC2_SetConfig+0xe4>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d10d      	bne.n	8007c7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	68db      	ldr	r3, [r3, #12]
 8007c6c:	011b      	lsls	r3, r3, #4
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a16      	ldr	r2, [pc, #88]	; (8007cd8 <TIM_OC2_SetConfig+0xe0>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d003      	beq.n	8007c8c <TIM_OC2_SetConfig+0x94>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a15      	ldr	r2, [pc, #84]	; (8007cdc <TIM_OC2_SetConfig+0xe4>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d113      	bne.n	8007cb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	695b      	ldr	r3, [r3, #20]
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	693a      	ldr	r2, [r7, #16]
 8007ca4:	4313      	orrs	r3, r2
 8007ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	693a      	ldr	r2, [r7, #16]
 8007cb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	621a      	str	r2, [r3, #32]
}
 8007cce:	bf00      	nop
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bc80      	pop	{r7}
 8007cd6:	4770      	bx	lr
 8007cd8:	40012c00 	.word	0x40012c00
 8007cdc:	40013400 	.word	0x40013400

08007ce0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b087      	sub	sp, #28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a1b      	ldr	r3, [r3, #32]
 8007cfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f023 0303 	bic.w	r3, r3, #3
 8007d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	021b      	lsls	r3, r3, #8
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a21      	ldr	r2, [pc, #132]	; (8007dc0 <TIM_OC3_SetConfig+0xe0>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d003      	beq.n	8007d46 <TIM_OC3_SetConfig+0x66>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a20      	ldr	r2, [pc, #128]	; (8007dc4 <TIM_OC3_SetConfig+0xe4>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d10d      	bne.n	8007d62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	021b      	lsls	r3, r3, #8
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	4313      	orrs	r3, r2
 8007d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a16      	ldr	r2, [pc, #88]	; (8007dc0 <TIM_OC3_SetConfig+0xe0>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d003      	beq.n	8007d72 <TIM_OC3_SetConfig+0x92>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a15      	ldr	r2, [pc, #84]	; (8007dc4 <TIM_OC3_SetConfig+0xe4>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d113      	bne.n	8007d9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	695b      	ldr	r3, [r3, #20]
 8007d86:	011b      	lsls	r3, r3, #4
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	011b      	lsls	r3, r3, #4
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	4313      	orrs	r3, r2
 8007d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	693a      	ldr	r2, [r7, #16]
 8007d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	697a      	ldr	r2, [r7, #20]
 8007db2:	621a      	str	r2, [r3, #32]
}
 8007db4:	bf00      	nop
 8007db6:	371c      	adds	r7, #28
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	40012c00 	.word	0x40012c00
 8007dc4:	40013400 	.word	0x40013400

08007dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a1b      	ldr	r3, [r3, #32]
 8007dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	021b      	lsls	r3, r3, #8
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	031b      	lsls	r3, r3, #12
 8007e1a:	693a      	ldr	r2, [r7, #16]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a11      	ldr	r2, [pc, #68]	; (8007e68 <TIM_OC4_SetConfig+0xa0>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d003      	beq.n	8007e30 <TIM_OC4_SetConfig+0x68>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a10      	ldr	r2, [pc, #64]	; (8007e6c <TIM_OC4_SetConfig+0xa4>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d109      	bne.n	8007e44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	695b      	ldr	r3, [r3, #20]
 8007e3c:	019b      	lsls	r3, r3, #6
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	4313      	orrs	r3, r2
 8007e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	685a      	ldr	r2, [r3, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	621a      	str	r2, [r3, #32]
}
 8007e5e:	bf00      	nop
 8007e60:	371c      	adds	r7, #28
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bc80      	pop	{r7}
 8007e66:	4770      	bx	lr
 8007e68:	40012c00 	.word	0x40012c00
 8007e6c:	40013400 	.word	0x40013400

08007e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	f023 0201 	bic.w	r2, r3, #1
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	f023 030a 	bic.w	r3, r3, #10
 8007eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	4313      	orrs	r3, r2
 8007eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	693a      	ldr	r2, [r7, #16]
 8007eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	621a      	str	r2, [r3, #32]
}
 8007ec2:	bf00      	nop
 8007ec4:	371c      	adds	r7, #28
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bc80      	pop	{r7}
 8007eca:	4770      	bx	lr

08007ecc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6a1b      	ldr	r3, [r3, #32]
 8007edc:	f023 0210 	bic.w	r2, r3, #16
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ef6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	031b      	lsls	r3, r3, #12
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	011b      	lsls	r3, r3, #4
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	621a      	str	r2, [r3, #32]
}
 8007f20:	bf00      	nop
 8007f22:	371c      	adds	r7, #28
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bc80      	pop	{r7}
 8007f28:	4770      	bx	lr

08007f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	f043 0307 	orr.w	r3, r3, #7
 8007f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	609a      	str	r2, [r3, #8]
}
 8007f54:	bf00      	nop
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bc80      	pop	{r7}
 8007f5c:	4770      	bx	lr

08007f5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f5e:	b480      	push	{r7}
 8007f60:	b087      	sub	sp, #28
 8007f62:	af00      	add	r7, sp, #0
 8007f64:	60f8      	str	r0, [r7, #12]
 8007f66:	60b9      	str	r1, [r7, #8]
 8007f68:	607a      	str	r2, [r7, #4]
 8007f6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	021a      	lsls	r2, r3, #8
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	431a      	orrs	r2, r3
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	609a      	str	r2, [r3, #8]
}
 8007f92:	bf00      	nop
 8007f94:	371c      	adds	r7, #28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bc80      	pop	{r7}
 8007f9a:	4770      	bx	lr

08007f9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	f003 031f 	and.w	r3, r3, #31
 8007fae:	2201      	movs	r2, #1
 8007fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6a1a      	ldr	r2, [r3, #32]
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	43db      	mvns	r3, r3
 8007fbe:	401a      	ands	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6a1a      	ldr	r2, [r3, #32]
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f003 031f 	and.w	r3, r3, #31
 8007fce:	6879      	ldr	r1, [r7, #4]
 8007fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd4:	431a      	orrs	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	621a      	str	r2, [r3, #32]
}
 8007fda:	bf00      	nop
 8007fdc:	371c      	adds	r7, #28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bc80      	pop	{r7}
 8007fe2:	4770      	bx	lr

08007fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d101      	bne.n	8007ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	e050      	b.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2202      	movs	r2, #2
 8008008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008022:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a1b      	ldr	r2, [pc, #108]	; (80080a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d018      	beq.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a19      	ldr	r2, [pc, #100]	; (80080ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d013      	beq.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008052:	d00e      	beq.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a15      	ldr	r2, [pc, #84]	; (80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d009      	beq.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a14      	ldr	r2, [pc, #80]	; (80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a12      	ldr	r2, [pc, #72]	; (80080b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d10c      	bne.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	4313      	orrs	r3, r2
 8008082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	bc80      	pop	{r7}
 80080a6:	4770      	bx	lr
 80080a8:	40012c00 	.word	0x40012c00
 80080ac:	40013400 	.word	0x40013400
 80080b0:	40000400 	.word	0x40000400
 80080b4:	40000800 	.word	0x40000800
 80080b8:	40000c00 	.word	0x40000c00

080080bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e03d      	b.n	8008154 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	685b      	ldr	r3, [r3, #4]
 8008106:	4313      	orrs	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4313      	orrs	r3, r2
 8008116:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	4313      	orrs	r3, r2
 8008124:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	4313      	orrs	r3, r2
 8008132:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	69db      	ldr	r3, [r3, #28]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr

0800815e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800815e:	b480      	push	{r7}
 8008160:	b083      	sub	sp, #12
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008166:	bf00      	nop
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	bc80      	pop	{r7}
 800816e:	4770      	bx	lr

08008170 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	bc80      	pop	{r7}
 8008180:	4770      	bx	lr

08008182 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b082      	sub	sp, #8
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e03f      	b.n	8008214 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800819a:	b2db      	uxtb	r3, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	d106      	bne.n	80081ae <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7fc fc07 	bl	80049bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2224      	movs	r2, #36	; 0x24
 80081b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	68da      	ldr	r2, [r3, #12]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fdde 	bl	8008d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	691a      	ldr	r2, [r3, #16]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	695a      	ldr	r2, [r3, #20]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68da      	ldr	r2, [r3, #12]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2220      	movs	r2, #32
 8008206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2220      	movs	r2, #32
 800820e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b08a      	sub	sp, #40	; 0x28
 8008220:	af02      	add	r7, sp, #8
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	603b      	str	r3, [r7, #0]
 8008228:	4613      	mov	r3, r2
 800822a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800822c:	2300      	movs	r3, #0
 800822e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b20      	cmp	r3, #32
 800823a:	d17c      	bne.n	8008336 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d002      	beq.n	8008248 <HAL_UART_Transmit+0x2c>
 8008242:	88fb      	ldrh	r3, [r7, #6]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	e075      	b.n	8008338 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008252:	2b01      	cmp	r3, #1
 8008254:	d101      	bne.n	800825a <HAL_UART_Transmit+0x3e>
 8008256:	2302      	movs	r3, #2
 8008258:	e06e      	b.n	8008338 <HAL_UART_Transmit+0x11c>
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2221      	movs	r2, #33	; 0x21
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008270:	f7fc fe4e 	bl	8004f10 <HAL_GetTick>
 8008274:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	88fa      	ldrh	r2, [r7, #6]
 800827a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	88fa      	ldrh	r2, [r7, #6]
 8008280:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	689b      	ldr	r3, [r3, #8]
 8008286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800828a:	d108      	bne.n	800829e <HAL_UART_Transmit+0x82>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d104      	bne.n	800829e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008294:	2300      	movs	r3, #0
 8008296:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	61bb      	str	r3, [r7, #24]
 800829c:	e003      	b.n	80082a6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80082a2:	2300      	movs	r3, #0
 80082a4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	2200      	movs	r2, #0
 80082aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80082ae:	e02a      	b.n	8008306 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	9300      	str	r3, [sp, #0]
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	2200      	movs	r2, #0
 80082b8:	2180      	movs	r1, #128	; 0x80
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 fb17 	bl	80088ee <UART_WaitOnFlagUntilTimeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e036      	b.n	8008338 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d10b      	bne.n	80082e8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80082d0:	69bb      	ldr	r3, [r7, #24]
 80082d2:	881b      	ldrh	r3, [r3, #0]
 80082d4:	461a      	mov	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80082de:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80082e0:	69bb      	ldr	r3, [r7, #24]
 80082e2:	3302      	adds	r3, #2
 80082e4:	61bb      	str	r3, [r7, #24]
 80082e6:	e007      	b.n	80082f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80082e8:	69fb      	ldr	r3, [r7, #28]
 80082ea:	781a      	ldrb	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80082f2:	69fb      	ldr	r3, [r7, #28]
 80082f4:	3301      	adds	r3, #1
 80082f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	3b01      	subs	r3, #1
 8008300:	b29a      	uxth	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800830a:	b29b      	uxth	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1cf      	bne.n	80082b0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	2200      	movs	r2, #0
 8008318:	2140      	movs	r1, #64	; 0x40
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f000 fae7 	bl	80088ee <UART_WaitOnFlagUntilTimeout>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d001      	beq.n	800832a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008326:	2303      	movs	r3, #3
 8008328:	e006      	b.n	8008338 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2220      	movs	r2, #32
 800832e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	e000      	b.n	8008338 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008336:	2302      	movs	r3, #2
  }
}
 8008338:	4618      	mov	r0, r3
 800833a:	3720      	adds	r7, #32
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	4613      	mov	r3, r2
 800834c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b20      	cmp	r3, #32
 8008358:	d11d      	bne.n	8008396 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <HAL_UART_Receive_IT+0x26>
 8008360:	88fb      	ldrh	r3, [r7, #6]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e016      	b.n	8008398 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008370:	2b01      	cmp	r3, #1
 8008372:	d101      	bne.n	8008378 <HAL_UART_Receive_IT+0x38>
 8008374:	2302      	movs	r3, #2
 8008376:	e00f      	b.n	8008398 <HAL_UART_Receive_IT+0x58>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2200      	movs	r2, #0
 8008384:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008386:	88fb      	ldrh	r3, [r7, #6]
 8008388:	461a      	mov	r2, r3
 800838a:	68b9      	ldr	r1, [r7, #8]
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 faf8 	bl	8008982 <UART_Start_Receive_IT>
 8008392:	4603      	mov	r3, r0
 8008394:	e000      	b.n	8008398 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008396:	2302      	movs	r3, #2
  }
}
 8008398:	4618      	mov	r0, r3
 800839a:	3710      	adds	r7, #16
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b084      	sub	sp, #16
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	4613      	mov	r3, r2
 80083ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b20      	cmp	r3, #32
 80083b8:	d11d      	bne.n	80083f6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d002      	beq.n	80083c6 <HAL_UART_Receive_DMA+0x26>
 80083c0:	88fb      	ldrh	r3, [r7, #6]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e016      	b.n	80083f8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d101      	bne.n	80083d8 <HAL_UART_Receive_DMA+0x38>
 80083d4:	2302      	movs	r3, #2
 80083d6:	e00f      	b.n	80083f8 <HAL_UART_Receive_DMA+0x58>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80083e6:	88fb      	ldrh	r3, [r7, #6]
 80083e8:	461a      	mov	r2, r3
 80083ea:	68b9      	ldr	r1, [r7, #8]
 80083ec:	68f8      	ldr	r0, [r7, #12]
 80083ee:	f000 fb01 	bl	80089f4 <UART_Start_Receive_DMA>
 80083f2:	4603      	mov	r3, r0
 80083f4:	e000      	b.n	80083f8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80083f6:	2302      	movs	r3, #2
  }
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b08a      	sub	sp, #40	; 0x28
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008420:	2300      	movs	r3, #0
 8008422:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008424:	2300      	movs	r3, #0
 8008426:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	f003 030f 	and.w	r3, r3, #15
 800842e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d10d      	bne.n	8008452 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	f003 0320 	and.w	r3, r3, #32
 800843c:	2b00      	cmp	r3, #0
 800843e:	d008      	beq.n	8008452 <HAL_UART_IRQHandler+0x52>
 8008440:	6a3b      	ldr	r3, [r7, #32]
 8008442:	f003 0320 	and.w	r3, r3, #32
 8008446:	2b00      	cmp	r3, #0
 8008448:	d003      	beq.n	8008452 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fbf2 	bl	8008c34 <UART_Receive_IT>
      return;
 8008450:	e17b      	b.n	800874a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	2b00      	cmp	r3, #0
 8008456:	f000 80b1 	beq.w	80085bc <HAL_UART_IRQHandler+0x1bc>
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	2b00      	cmp	r3, #0
 8008462:	d105      	bne.n	8008470 <HAL_UART_IRQHandler+0x70>
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800846a:	2b00      	cmp	r3, #0
 800846c:	f000 80a6 	beq.w	80085bc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <HAL_UART_IRQHandler+0x90>
 800847a:	6a3b      	ldr	r3, [r7, #32]
 800847c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008480:	2b00      	cmp	r3, #0
 8008482:	d005      	beq.n	8008490 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008488:	f043 0201 	orr.w	r2, r3, #1
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	f003 0304 	and.w	r3, r3, #4
 8008496:	2b00      	cmp	r3, #0
 8008498:	d00a      	beq.n	80084b0 <HAL_UART_IRQHandler+0xb0>
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	f003 0301 	and.w	r3, r3, #1
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a8:	f043 0202 	orr.w	r2, r3, #2
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <HAL_UART_IRQHandler+0xd0>
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d005      	beq.n	80084d0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c8:	f043 0204 	orr.w	r2, r3, #4
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	f003 0308 	and.w	r3, r3, #8
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00f      	beq.n	80084fa <HAL_UART_IRQHandler+0xfa>
 80084da:	6a3b      	ldr	r3, [r7, #32]
 80084dc:	f003 0320 	and.w	r3, r3, #32
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d104      	bne.n	80084ee <HAL_UART_IRQHandler+0xee>
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d005      	beq.n	80084fa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f2:	f043 0208 	orr.w	r2, r3, #8
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 811e 	beq.w	8008740 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	f003 0320 	and.w	r3, r3, #32
 800850a:	2b00      	cmp	r3, #0
 800850c:	d007      	beq.n	800851e <HAL_UART_IRQHandler+0x11e>
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	f003 0320 	and.w	r3, r3, #32
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 fb8b 	bl	8008c34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	695b      	ldr	r3, [r3, #20]
 8008524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008528:	2b00      	cmp	r3, #0
 800852a:	bf14      	ite	ne
 800852c:	2301      	movne	r3, #1
 800852e:	2300      	moveq	r3, #0
 8008530:	b2db      	uxtb	r3, r3
 8008532:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008538:	f003 0308 	and.w	r3, r3, #8
 800853c:	2b00      	cmp	r3, #0
 800853e:	d102      	bne.n	8008546 <HAL_UART_IRQHandler+0x146>
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d031      	beq.n	80085aa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 facd 	bl	8008ae6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	695b      	ldr	r3, [r3, #20]
 8008552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008556:	2b00      	cmp	r3, #0
 8008558:	d023      	beq.n	80085a2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	695a      	ldr	r2, [r3, #20]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008568:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800856e:	2b00      	cmp	r3, #0
 8008570:	d013      	beq.n	800859a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	4a76      	ldr	r2, [pc, #472]	; (8008750 <HAL_UART_IRQHandler+0x350>)
 8008578:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857e:	4618      	mov	r0, r3
 8008580:	f7fc ff12 	bl	80053a8 <HAL_DMA_Abort_IT>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d016      	beq.n	80085b8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008594:	4610      	mov	r0, r2
 8008596:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008598:	e00e      	b.n	80085b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f7fb fbfc 	bl	8003d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a0:	e00a      	b.n	80085b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f7fb fbf8 	bl	8003d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a8:	e006      	b.n	80085b8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7fb fbf4 	bl	8003d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80085b6:	e0c3      	b.n	8008740 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b8:	bf00      	nop
    return;
 80085ba:	e0c1      	b.n	8008740 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	f040 80a1 	bne.w	8008708 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80085c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c8:	f003 0310 	and.w	r3, r3, #16
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	f000 809b 	beq.w	8008708 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	f003 0310 	and.w	r3, r3, #16
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 8095 	beq.w	8008708 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085de:	2300      	movs	r3, #0
 80085e0:	60fb      	str	r3, [r7, #12]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d04e      	beq.n	80086a0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800860c:	8a3b      	ldrh	r3, [r7, #16]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 8098 	beq.w	8008744 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008618:	8a3a      	ldrh	r2, [r7, #16]
 800861a:	429a      	cmp	r2, r3
 800861c:	f080 8092 	bcs.w	8008744 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	8a3a      	ldrh	r2, [r7, #16]
 8008624:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	2b20      	cmp	r3, #32
 800862e:	d02b      	beq.n	8008688 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68da      	ldr	r2, [r3, #12]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800863e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	695a      	ldr	r2, [r3, #20]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f022 0201 	bic.w	r2, r2, #1
 800864e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	695a      	ldr	r2, [r3, #20]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800865e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2220      	movs	r2, #32
 8008664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68da      	ldr	r2, [r3, #12]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0210 	bic.w	r2, r2, #16
 800867c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008682:	4618      	mov	r0, r3
 8008684:	f7fc fe55 	bl	8005332 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008690:	b29b      	uxth	r3, r3
 8008692:	1ad3      	subs	r3, r2, r3
 8008694:	b29b      	uxth	r3, r3
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f86d 	bl	8008778 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800869e:	e051      	b.n	8008744 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d047      	beq.n	8008748 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80086b8:	8a7b      	ldrh	r3, [r7, #18]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d044      	beq.n	8008748 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68da      	ldr	r2, [r3, #12]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80086cc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	695a      	ldr	r2, [r3, #20]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f022 0201 	bic.w	r2, r2, #1
 80086dc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2200      	movs	r2, #0
 80086ea:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68da      	ldr	r2, [r3, #12]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f022 0210 	bic.w	r2, r2, #16
 80086fa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80086fc:	8a7b      	ldrh	r3, [r7, #18]
 80086fe:	4619      	mov	r1, r3
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 f839 	bl	8008778 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008706:	e01f      	b.n	8008748 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800870e:	2b00      	cmp	r3, #0
 8008710:	d008      	beq.n	8008724 <HAL_UART_IRQHandler+0x324>
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fa22 	bl	8008b66 <UART_Transmit_IT>
    return;
 8008722:	e012      	b.n	800874a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00d      	beq.n	800874a <HAL_UART_IRQHandler+0x34a>
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008734:	2b00      	cmp	r3, #0
 8008736:	d008      	beq.n	800874a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008738:	6878      	ldr	r0, [r7, #4]
 800873a:	f000 fa63 	bl	8008c04 <UART_EndTransmit_IT>
    return;
 800873e:	e004      	b.n	800874a <HAL_UART_IRQHandler+0x34a>
    return;
 8008740:	bf00      	nop
 8008742:	e002      	b.n	800874a <HAL_UART_IRQHandler+0x34a>
      return;
 8008744:	bf00      	nop
 8008746:	e000      	b.n	800874a <HAL_UART_IRQHandler+0x34a>
      return;
 8008748:	bf00      	nop
  }
}
 800874a:	3728      	adds	r7, #40	; 0x28
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}
 8008750:	08008b3f 	.word	0x08008b3f

08008754 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	bc80      	pop	{r7}
 8008764:	4770      	bx	lr

08008766 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800876e:	bf00      	nop
 8008770:	370c      	adds	r7, #12
 8008772:	46bd      	mov	sp, r7
 8008774:	bc80      	pop	{r7}
 8008776:	4770      	bx	lr

08008778 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	bc80      	pop	{r7}
 800878c:	4770      	bx	lr

0800878e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800879a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d12a      	bne.n	8008800 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2200      	movs	r2, #0
 80087ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80087be:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	695a      	ldr	r2, [r3, #20]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f022 0201 	bic.w	r2, r2, #1
 80087ce:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	695a      	ldr	r2, [r3, #20]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087de:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d107      	bne.n	8008800 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	68da      	ldr	r2, [r3, #12]
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f022 0210 	bic.w	r2, r2, #16
 80087fe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008804:	2b01      	cmp	r3, #1
 8008806:	d106      	bne.n	8008816 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800880c:	4619      	mov	r1, r3
 800880e:	68f8      	ldr	r0, [r7, #12]
 8008810:	f7ff ffb2 	bl	8008778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008814:	e002      	b.n	800881c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f7fb faa2 	bl	8003d60 <HAL_UART_RxCpltCallback>
}
 800881c:	bf00      	nop
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008830:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008836:	2b01      	cmp	r3, #1
 8008838:	d108      	bne.n	800884c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800883e:	085b      	lsrs	r3, r3, #1
 8008840:	b29b      	uxth	r3, r3
 8008842:	4619      	mov	r1, r3
 8008844:	68f8      	ldr	r0, [r7, #12]
 8008846:	f7ff ff97 	bl	8008778 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800884a:	e002      	b.n	8008852 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800884c:	68f8      	ldr	r0, [r7, #12]
 800884e:	f7ff ff8a 	bl	8008766 <HAL_UART_RxHalfCpltCallback>
}
 8008852:	bf00      	nop
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008862:	2300      	movs	r3, #0
 8008864:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	695b      	ldr	r3, [r3, #20]
 8008872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008876:	2b00      	cmp	r3, #0
 8008878:	bf14      	ite	ne
 800887a:	2301      	movne	r3, #1
 800887c:	2300      	moveq	r3, #0
 800887e:	b2db      	uxtb	r3, r3
 8008880:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b21      	cmp	r3, #33	; 0x21
 800888c:	d108      	bne.n	80088a0 <UART_DMAError+0x46>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d005      	beq.n	80088a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2200      	movs	r2, #0
 8008898:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800889a:	68b8      	ldr	r0, [r7, #8]
 800889c:	f000 f90e 	bl	8008abc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bf14      	ite	ne
 80088ae:	2301      	movne	r3, #1
 80088b0:	2300      	moveq	r3, #0
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b22      	cmp	r3, #34	; 0x22
 80088c0:	d108      	bne.n	80088d4 <UART_DMAError+0x7a>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d005      	beq.n	80088d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	2200      	movs	r2, #0
 80088cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80088ce:	68b8      	ldr	r0, [r7, #8]
 80088d0:	f000 f909 	bl	8008ae6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d8:	f043 0210 	orr.w	r2, r3, #16
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088e0:	68b8      	ldr	r0, [r7, #8]
 80088e2:	f7fb fa59 	bl	8003d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088e6:	bf00      	nop
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}

080088ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80088ee:	b580      	push	{r7, lr}
 80088f0:	b084      	sub	sp, #16
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	60f8      	str	r0, [r7, #12]
 80088f6:	60b9      	str	r1, [r7, #8]
 80088f8:	603b      	str	r3, [r7, #0]
 80088fa:	4613      	mov	r3, r2
 80088fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088fe:	e02c      	b.n	800895a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008906:	d028      	beq.n	800895a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d007      	beq.n	800891e <UART_WaitOnFlagUntilTimeout+0x30>
 800890e:	f7fc faff 	bl	8004f10 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	429a      	cmp	r2, r3
 800891c:	d21d      	bcs.n	800895a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68da      	ldr	r2, [r3, #12]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800892c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	695a      	ldr	r2, [r3, #20]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f022 0201 	bic.w	r2, r2, #1
 800893c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2220      	movs	r2, #32
 8008942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2220      	movs	r2, #32
 800894a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008956:	2303      	movs	r3, #3
 8008958:	e00f      	b.n	800897a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	4013      	ands	r3, r2
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	429a      	cmp	r2, r3
 8008968:	bf0c      	ite	eq
 800896a:	2301      	moveq	r3, #1
 800896c:	2300      	movne	r3, #0
 800896e:	b2db      	uxtb	r3, r3
 8008970:	461a      	mov	r2, r3
 8008972:	79fb      	ldrb	r3, [r7, #7]
 8008974:	429a      	cmp	r2, r3
 8008976:	d0c3      	beq.n	8008900 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008982:	b480      	push	{r7}
 8008984:	b085      	sub	sp, #20
 8008986:	af00      	add	r7, sp, #0
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	4613      	mov	r3, r2
 800898e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	68ba      	ldr	r2, [r7, #8]
 8008994:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	88fa      	ldrh	r2, [r7, #6]
 800899a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	88fa      	ldrh	r2, [r7, #6]
 80089a0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2200      	movs	r2, #0
 80089a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2222      	movs	r2, #34	; 0x22
 80089ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2200      	movs	r2, #0
 80089b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089c6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	695a      	ldr	r2, [r3, #20]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0201 	orr.w	r2, r2, #1
 80089d6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0220 	orr.w	r2, r2, #32
 80089e6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3714      	adds	r7, #20
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bc80      	pop	{r7}
 80089f2:	4770      	bx	lr

080089f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b086      	sub	sp, #24
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	4613      	mov	r3, r2
 8008a00:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	88fa      	ldrh	r2, [r7, #6]
 8008a0c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	2222      	movs	r2, #34	; 0x22
 8008a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	4a23      	ldr	r2, [pc, #140]	; (8008ab0 <UART_Start_Receive_DMA+0xbc>)
 8008a22:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a28:	4a22      	ldr	r2, [pc, #136]	; (8008ab4 <UART_Start_Receive_DMA+0xc0>)
 8008a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a30:	4a21      	ldr	r2, [pc, #132]	; (8008ab8 <UART_Start_Receive_DMA+0xc4>)
 8008a32:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a38:	2200      	movs	r2, #0
 8008a3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008a3c:	f107 0308 	add.w	r3, r7, #8
 8008a40:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	88fb      	ldrh	r3, [r7, #6]
 8008a54:	f7fc fc0e 	bl	8005274 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008a58:	2300      	movs	r3, #0
 8008a5a:	613b      	str	r3, [r7, #16]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	613b      	str	r3, [r7, #16]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	685b      	ldr	r3, [r3, #4]
 8008a6a:	613b      	str	r3, [r7, #16]
 8008a6c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	68da      	ldr	r2, [r3, #12]
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a84:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	695a      	ldr	r2, [r3, #20]
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f042 0201 	orr.w	r2, r2, #1
 8008a94:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	695a      	ldr	r2, [r3, #20]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008aa4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008aa6:	2300      	movs	r3, #0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3718      	adds	r7, #24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	0800878f 	.word	0x0800878f
 8008ab4:	08008825 	.word	0x08008825
 8008ab8:	0800885b 	.word	0x0800885b

08008abc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b083      	sub	sp, #12
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68da      	ldr	r2, [r3, #12]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008ad2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2220      	movs	r2, #32
 8008ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008adc:	bf00      	nop
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bc80      	pop	{r7}
 8008ae4:	4770      	bx	lr

08008ae6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ae6:	b480      	push	{r7}
 8008ae8:	b083      	sub	sp, #12
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	68da      	ldr	r2, [r3, #12]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008afc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	695a      	ldr	r2, [r3, #20]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f022 0201 	bic.w	r2, r2, #1
 8008b0c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d107      	bne.n	8008b26 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68da      	ldr	r2, [r3, #12]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f022 0210 	bic.w	r2, r2, #16
 8008b24:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bc80      	pop	{r7}
 8008b3c:	4770      	bx	lr

08008b3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b3e:	b580      	push	{r7, lr}
 8008b40:	b084      	sub	sp, #16
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2200      	movs	r2, #0
 8008b56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b58:	68f8      	ldr	r0, [r7, #12]
 8008b5a:	f7fb f91d 	bl	8003d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b5e:	bf00      	nop
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b085      	sub	sp, #20
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b21      	cmp	r3, #33	; 0x21
 8008b78:	d13e      	bne.n	8008bf8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b82:	d114      	bne.n	8008bae <UART_Transmit_IT+0x48>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d110      	bne.n	8008bae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	881b      	ldrh	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ba0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6a1b      	ldr	r3, [r3, #32]
 8008ba6:	1c9a      	adds	r2, r3, #2
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	621a      	str	r2, [r3, #32]
 8008bac:	e008      	b.n	8008bc0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6a1b      	ldr	r3, [r3, #32]
 8008bb2:	1c59      	adds	r1, r3, #1
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	6211      	str	r1, [r2, #32]
 8008bb8:	781a      	ldrb	r2, [r3, #0]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	3b01      	subs	r3, #1
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	4619      	mov	r1, r3
 8008bce:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10f      	bne.n	8008bf4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	68da      	ldr	r2, [r3, #12]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008be2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68da      	ldr	r2, [r3, #12]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bf2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	e000      	b.n	8008bfa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bf8:	2302      	movs	r3, #2
  }
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3714      	adds	r7, #20
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bc80      	pop	{r7}
 8008c02:	4770      	bx	lr

08008c04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	68da      	ldr	r2, [r3, #12]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f7ff fd95 	bl	8008754 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b22      	cmp	r3, #34	; 0x22
 8008c46:	f040 8099 	bne.w	8008d7c <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c52:	d117      	bne.n	8008c84 <UART_Receive_IT+0x50>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d113      	bne.n	8008c84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c64:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c7c:	1c9a      	adds	r2, r3, #2
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	629a      	str	r2, [r3, #40]	; 0x28
 8008c82:	e026      	b.n	8008cd2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c88:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c96:	d007      	beq.n	8008ca8 <UART_Receive_IT+0x74>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d10a      	bne.n	8008cb6 <UART_Receive_IT+0x82>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d106      	bne.n	8008cb6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	701a      	strb	r2, [r3, #0]
 8008cb4:	e008      	b.n	8008cc8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008cd6:	b29b      	uxth	r3, r3
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d148      	bne.n	8008d78 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68da      	ldr	r2, [r3, #12]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f022 0220 	bic.w	r2, r2, #32
 8008cf4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	695a      	ldr	r2, [r3, #20]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f022 0201 	bic.w	r2, r2, #1
 8008d14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d123      	bne.n	8008d6e <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68da      	ldr	r2, [r3, #12]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 0210 	bic.w	r2, r2, #16
 8008d3a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0310 	and.w	r3, r3, #16
 8008d46:	2b10      	cmp	r3, #16
 8008d48:	d10a      	bne.n	8008d60 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	60fb      	str	r3, [r7, #12]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	60fb      	str	r3, [r7, #12]
 8008d5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f7ff fd06 	bl	8008778 <HAL_UARTEx_RxEventCallback>
 8008d6c:	e002      	b.n	8008d74 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7fa fff6 	bl	8003d60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	e002      	b.n	8008d7e <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	e000      	b.n	8008d7e <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008d7c:	2302      	movs	r3, #2
  }
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3718      	adds	r7, #24
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}
	...

08008d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	691b      	ldr	r3, [r3, #16]
 8008d96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	430a      	orrs	r2, r1
 8008da4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	689a      	ldr	r2, [r3, #8]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	691b      	ldr	r3, [r3, #16]
 8008dae:	431a      	orrs	r2, r3
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	695b      	ldr	r3, [r3, #20]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008dc2:	f023 030c 	bic.w	r3, r3, #12
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	6812      	ldr	r2, [r2, #0]
 8008dca:	68b9      	ldr	r1, [r7, #8]
 8008dcc:	430b      	orrs	r3, r1
 8008dce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	699a      	ldr	r2, [r3, #24]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	430a      	orrs	r2, r1
 8008de4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a2c      	ldr	r2, [pc, #176]	; (8008e9c <UART_SetConfig+0x114>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d103      	bne.n	8008df8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008df0:	f7fe f83c 	bl	8006e6c <HAL_RCC_GetPCLK2Freq>
 8008df4:	60f8      	str	r0, [r7, #12]
 8008df6:	e002      	b.n	8008dfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008df8:	f7fe f824 	bl	8006e44 <HAL_RCC_GetPCLK1Freq>
 8008dfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	4613      	mov	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	009a      	lsls	r2, r3, #2
 8008e08:	441a      	add	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e14:	4a22      	ldr	r2, [pc, #136]	; (8008ea0 <UART_SetConfig+0x118>)
 8008e16:	fba2 2303 	umull	r2, r3, r2, r3
 8008e1a:	095b      	lsrs	r3, r3, #5
 8008e1c:	0119      	lsls	r1, r3, #4
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	4613      	mov	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4413      	add	r3, r2
 8008e26:	009a      	lsls	r2, r3, #2
 8008e28:	441a      	add	r2, r3
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e34:	4b1a      	ldr	r3, [pc, #104]	; (8008ea0 <UART_SetConfig+0x118>)
 8008e36:	fba3 0302 	umull	r0, r3, r3, r2
 8008e3a:	095b      	lsrs	r3, r3, #5
 8008e3c:	2064      	movs	r0, #100	; 0x64
 8008e3e:	fb00 f303 	mul.w	r3, r0, r3
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	011b      	lsls	r3, r3, #4
 8008e46:	3332      	adds	r3, #50	; 0x32
 8008e48:	4a15      	ldr	r2, [pc, #84]	; (8008ea0 <UART_SetConfig+0x118>)
 8008e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e4e:	095b      	lsrs	r3, r3, #5
 8008e50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e54:	4419      	add	r1, r3
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	4613      	mov	r3, r2
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	4413      	add	r3, r2
 8008e5e:	009a      	lsls	r2, r3, #2
 8008e60:	441a      	add	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	685b      	ldr	r3, [r3, #4]
 8008e66:	009b      	lsls	r3, r3, #2
 8008e68:	fbb2 f2f3 	udiv	r2, r2, r3
 8008e6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ea0 <UART_SetConfig+0x118>)
 8008e6e:	fba3 0302 	umull	r0, r3, r3, r2
 8008e72:	095b      	lsrs	r3, r3, #5
 8008e74:	2064      	movs	r0, #100	; 0x64
 8008e76:	fb00 f303 	mul.w	r3, r0, r3
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	3332      	adds	r3, #50	; 0x32
 8008e80:	4a07      	ldr	r2, [pc, #28]	; (8008ea0 <UART_SetConfig+0x118>)
 8008e82:	fba2 2303 	umull	r2, r3, r2, r3
 8008e86:	095b      	lsrs	r3, r3, #5
 8008e88:	f003 020f 	and.w	r2, r3, #15
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	440a      	add	r2, r1
 8008e92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008e94:	bf00      	nop
 8008e96:	3710      	adds	r7, #16
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	40013800 	.word	0x40013800
 8008ea0:	51eb851f 	.word	0x51eb851f

08008ea4 <__assert_func>:
 8008ea4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ea6:	4614      	mov	r4, r2
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	4b09      	ldr	r3, [pc, #36]	; (8008ed0 <__assert_func+0x2c>)
 8008eac:	4605      	mov	r5, r0
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68d8      	ldr	r0, [r3, #12]
 8008eb2:	b14c      	cbz	r4, 8008ec8 <__assert_func+0x24>
 8008eb4:	4b07      	ldr	r3, [pc, #28]	; (8008ed4 <__assert_func+0x30>)
 8008eb6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008eba:	9100      	str	r1, [sp, #0]
 8008ebc:	462b      	mov	r3, r5
 8008ebe:	4906      	ldr	r1, [pc, #24]	; (8008ed8 <__assert_func+0x34>)
 8008ec0:	f000 f814 	bl	8008eec <fiprintf>
 8008ec4:	f000 fc2c 	bl	8009720 <abort>
 8008ec8:	4b04      	ldr	r3, [pc, #16]	; (8008edc <__assert_func+0x38>)
 8008eca:	461c      	mov	r4, r3
 8008ecc:	e7f3      	b.n	8008eb6 <__assert_func+0x12>
 8008ece:	bf00      	nop
 8008ed0:	20000018 	.word	0x20000018
 8008ed4:	0800a99c 	.word	0x0800a99c
 8008ed8:	0800a9a9 	.word	0x0800a9a9
 8008edc:	0800a9d7 	.word	0x0800a9d7

08008ee0 <__errno>:
 8008ee0:	4b01      	ldr	r3, [pc, #4]	; (8008ee8 <__errno+0x8>)
 8008ee2:	6818      	ldr	r0, [r3, #0]
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	20000018 	.word	0x20000018

08008eec <fiprintf>:
 8008eec:	b40e      	push	{r1, r2, r3}
 8008eee:	b503      	push	{r0, r1, lr}
 8008ef0:	4601      	mov	r1, r0
 8008ef2:	ab03      	add	r3, sp, #12
 8008ef4:	4805      	ldr	r0, [pc, #20]	; (8008f0c <fiprintf+0x20>)
 8008ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008efa:	6800      	ldr	r0, [r0, #0]
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	f000 f869 	bl	8008fd4 <_vfiprintf_r>
 8008f02:	b002      	add	sp, #8
 8008f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f08:	b003      	add	sp, #12
 8008f0a:	4770      	bx	lr
 8008f0c:	20000018 	.word	0x20000018

08008f10 <__libc_init_array>:
 8008f10:	b570      	push	{r4, r5, r6, lr}
 8008f12:	2600      	movs	r6, #0
 8008f14:	4d0c      	ldr	r5, [pc, #48]	; (8008f48 <__libc_init_array+0x38>)
 8008f16:	4c0d      	ldr	r4, [pc, #52]	; (8008f4c <__libc_init_array+0x3c>)
 8008f18:	1b64      	subs	r4, r4, r5
 8008f1a:	10a4      	asrs	r4, r4, #2
 8008f1c:	42a6      	cmp	r6, r4
 8008f1e:	d109      	bne.n	8008f34 <__libc_init_array+0x24>
 8008f20:	f001 f9ea 	bl	800a2f8 <_init>
 8008f24:	2600      	movs	r6, #0
 8008f26:	4d0a      	ldr	r5, [pc, #40]	; (8008f50 <__libc_init_array+0x40>)
 8008f28:	4c0a      	ldr	r4, [pc, #40]	; (8008f54 <__libc_init_array+0x44>)
 8008f2a:	1b64      	subs	r4, r4, r5
 8008f2c:	10a4      	asrs	r4, r4, #2
 8008f2e:	42a6      	cmp	r6, r4
 8008f30:	d105      	bne.n	8008f3e <__libc_init_array+0x2e>
 8008f32:	bd70      	pop	{r4, r5, r6, pc}
 8008f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f38:	4798      	blx	r3
 8008f3a:	3601      	adds	r6, #1
 8008f3c:	e7ee      	b.n	8008f1c <__libc_init_array+0xc>
 8008f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f42:	4798      	blx	r3
 8008f44:	3601      	adds	r6, #1
 8008f46:	e7f2      	b.n	8008f2e <__libc_init_array+0x1e>
 8008f48:	0800aa70 	.word	0x0800aa70
 8008f4c:	0800aa70 	.word	0x0800aa70
 8008f50:	0800aa70 	.word	0x0800aa70
 8008f54:	0800aa74 	.word	0x0800aa74

08008f58 <memcpy>:
 8008f58:	440a      	add	r2, r1
 8008f5a:	4291      	cmp	r1, r2
 8008f5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f60:	d100      	bne.n	8008f64 <memcpy+0xc>
 8008f62:	4770      	bx	lr
 8008f64:	b510      	push	{r4, lr}
 8008f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f6a:	4291      	cmp	r1, r2
 8008f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f70:	d1f9      	bne.n	8008f66 <memcpy+0xe>
 8008f72:	bd10      	pop	{r4, pc}

08008f74 <memset>:
 8008f74:	4603      	mov	r3, r0
 8008f76:	4402      	add	r2, r0
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d100      	bne.n	8008f7e <memset+0xa>
 8008f7c:	4770      	bx	lr
 8008f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f82:	e7f9      	b.n	8008f78 <memset+0x4>

08008f84 <__sfputc_r>:
 8008f84:	6893      	ldr	r3, [r2, #8]
 8008f86:	b410      	push	{r4}
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	6093      	str	r3, [r2, #8]
 8008f8e:	da07      	bge.n	8008fa0 <__sfputc_r+0x1c>
 8008f90:	6994      	ldr	r4, [r2, #24]
 8008f92:	42a3      	cmp	r3, r4
 8008f94:	db01      	blt.n	8008f9a <__sfputc_r+0x16>
 8008f96:	290a      	cmp	r1, #10
 8008f98:	d102      	bne.n	8008fa0 <__sfputc_r+0x1c>
 8008f9a:	bc10      	pop	{r4}
 8008f9c:	f000 bb00 	b.w	80095a0 <__swbuf_r>
 8008fa0:	6813      	ldr	r3, [r2, #0]
 8008fa2:	1c58      	adds	r0, r3, #1
 8008fa4:	6010      	str	r0, [r2, #0]
 8008fa6:	7019      	strb	r1, [r3, #0]
 8008fa8:	4608      	mov	r0, r1
 8008faa:	bc10      	pop	{r4}
 8008fac:	4770      	bx	lr

08008fae <__sfputs_r>:
 8008fae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb0:	4606      	mov	r6, r0
 8008fb2:	460f      	mov	r7, r1
 8008fb4:	4614      	mov	r4, r2
 8008fb6:	18d5      	adds	r5, r2, r3
 8008fb8:	42ac      	cmp	r4, r5
 8008fba:	d101      	bne.n	8008fc0 <__sfputs_r+0x12>
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	e007      	b.n	8008fd0 <__sfputs_r+0x22>
 8008fc0:	463a      	mov	r2, r7
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc8:	f7ff ffdc 	bl	8008f84 <__sfputc_r>
 8008fcc:	1c43      	adds	r3, r0, #1
 8008fce:	d1f3      	bne.n	8008fb8 <__sfputs_r+0xa>
 8008fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fd4 <_vfiprintf_r>:
 8008fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd8:	460d      	mov	r5, r1
 8008fda:	4614      	mov	r4, r2
 8008fdc:	4698      	mov	r8, r3
 8008fde:	4606      	mov	r6, r0
 8008fe0:	b09d      	sub	sp, #116	; 0x74
 8008fe2:	b118      	cbz	r0, 8008fec <_vfiprintf_r+0x18>
 8008fe4:	6983      	ldr	r3, [r0, #24]
 8008fe6:	b90b      	cbnz	r3, 8008fec <_vfiprintf_r+0x18>
 8008fe8:	f000 fcb8 	bl	800995c <__sinit>
 8008fec:	4b89      	ldr	r3, [pc, #548]	; (8009214 <_vfiprintf_r+0x240>)
 8008fee:	429d      	cmp	r5, r3
 8008ff0:	d11b      	bne.n	800902a <_vfiprintf_r+0x56>
 8008ff2:	6875      	ldr	r5, [r6, #4]
 8008ff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ff6:	07d9      	lsls	r1, r3, #31
 8008ff8:	d405      	bmi.n	8009006 <_vfiprintf_r+0x32>
 8008ffa:	89ab      	ldrh	r3, [r5, #12]
 8008ffc:	059a      	lsls	r2, r3, #22
 8008ffe:	d402      	bmi.n	8009006 <_vfiprintf_r+0x32>
 8009000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009002:	f000 fd49 	bl	8009a98 <__retarget_lock_acquire_recursive>
 8009006:	89ab      	ldrh	r3, [r5, #12]
 8009008:	071b      	lsls	r3, r3, #28
 800900a:	d501      	bpl.n	8009010 <_vfiprintf_r+0x3c>
 800900c:	692b      	ldr	r3, [r5, #16]
 800900e:	b9eb      	cbnz	r3, 800904c <_vfiprintf_r+0x78>
 8009010:	4629      	mov	r1, r5
 8009012:	4630      	mov	r0, r6
 8009014:	f000 fb16 	bl	8009644 <__swsetup_r>
 8009018:	b1c0      	cbz	r0, 800904c <_vfiprintf_r+0x78>
 800901a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800901c:	07dc      	lsls	r4, r3, #31
 800901e:	d50e      	bpl.n	800903e <_vfiprintf_r+0x6a>
 8009020:	f04f 30ff 	mov.w	r0, #4294967295
 8009024:	b01d      	add	sp, #116	; 0x74
 8009026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902a:	4b7b      	ldr	r3, [pc, #492]	; (8009218 <_vfiprintf_r+0x244>)
 800902c:	429d      	cmp	r5, r3
 800902e:	d101      	bne.n	8009034 <_vfiprintf_r+0x60>
 8009030:	68b5      	ldr	r5, [r6, #8]
 8009032:	e7df      	b.n	8008ff4 <_vfiprintf_r+0x20>
 8009034:	4b79      	ldr	r3, [pc, #484]	; (800921c <_vfiprintf_r+0x248>)
 8009036:	429d      	cmp	r5, r3
 8009038:	bf08      	it	eq
 800903a:	68f5      	ldreq	r5, [r6, #12]
 800903c:	e7da      	b.n	8008ff4 <_vfiprintf_r+0x20>
 800903e:	89ab      	ldrh	r3, [r5, #12]
 8009040:	0598      	lsls	r0, r3, #22
 8009042:	d4ed      	bmi.n	8009020 <_vfiprintf_r+0x4c>
 8009044:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009046:	f000 fd28 	bl	8009a9a <__retarget_lock_release_recursive>
 800904a:	e7e9      	b.n	8009020 <_vfiprintf_r+0x4c>
 800904c:	2300      	movs	r3, #0
 800904e:	9309      	str	r3, [sp, #36]	; 0x24
 8009050:	2320      	movs	r3, #32
 8009052:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009056:	2330      	movs	r3, #48	; 0x30
 8009058:	f04f 0901 	mov.w	r9, #1
 800905c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009060:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009220 <_vfiprintf_r+0x24c>
 8009064:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009068:	4623      	mov	r3, r4
 800906a:	469a      	mov	sl, r3
 800906c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009070:	b10a      	cbz	r2, 8009076 <_vfiprintf_r+0xa2>
 8009072:	2a25      	cmp	r2, #37	; 0x25
 8009074:	d1f9      	bne.n	800906a <_vfiprintf_r+0x96>
 8009076:	ebba 0b04 	subs.w	fp, sl, r4
 800907a:	d00b      	beq.n	8009094 <_vfiprintf_r+0xc0>
 800907c:	465b      	mov	r3, fp
 800907e:	4622      	mov	r2, r4
 8009080:	4629      	mov	r1, r5
 8009082:	4630      	mov	r0, r6
 8009084:	f7ff ff93 	bl	8008fae <__sfputs_r>
 8009088:	3001      	adds	r0, #1
 800908a:	f000 80aa 	beq.w	80091e2 <_vfiprintf_r+0x20e>
 800908e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009090:	445a      	add	r2, fp
 8009092:	9209      	str	r2, [sp, #36]	; 0x24
 8009094:	f89a 3000 	ldrb.w	r3, [sl]
 8009098:	2b00      	cmp	r3, #0
 800909a:	f000 80a2 	beq.w	80091e2 <_vfiprintf_r+0x20e>
 800909e:	2300      	movs	r3, #0
 80090a0:	f04f 32ff 	mov.w	r2, #4294967295
 80090a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090a8:	f10a 0a01 	add.w	sl, sl, #1
 80090ac:	9304      	str	r3, [sp, #16]
 80090ae:	9307      	str	r3, [sp, #28]
 80090b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090b4:	931a      	str	r3, [sp, #104]	; 0x68
 80090b6:	4654      	mov	r4, sl
 80090b8:	2205      	movs	r2, #5
 80090ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090be:	4858      	ldr	r0, [pc, #352]	; (8009220 <_vfiprintf_r+0x24c>)
 80090c0:	f000 fd52 	bl	8009b68 <memchr>
 80090c4:	9a04      	ldr	r2, [sp, #16]
 80090c6:	b9d8      	cbnz	r0, 8009100 <_vfiprintf_r+0x12c>
 80090c8:	06d1      	lsls	r1, r2, #27
 80090ca:	bf44      	itt	mi
 80090cc:	2320      	movmi	r3, #32
 80090ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090d2:	0713      	lsls	r3, r2, #28
 80090d4:	bf44      	itt	mi
 80090d6:	232b      	movmi	r3, #43	; 0x2b
 80090d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090dc:	f89a 3000 	ldrb.w	r3, [sl]
 80090e0:	2b2a      	cmp	r3, #42	; 0x2a
 80090e2:	d015      	beq.n	8009110 <_vfiprintf_r+0x13c>
 80090e4:	4654      	mov	r4, sl
 80090e6:	2000      	movs	r0, #0
 80090e8:	f04f 0c0a 	mov.w	ip, #10
 80090ec:	9a07      	ldr	r2, [sp, #28]
 80090ee:	4621      	mov	r1, r4
 80090f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090f4:	3b30      	subs	r3, #48	; 0x30
 80090f6:	2b09      	cmp	r3, #9
 80090f8:	d94e      	bls.n	8009198 <_vfiprintf_r+0x1c4>
 80090fa:	b1b0      	cbz	r0, 800912a <_vfiprintf_r+0x156>
 80090fc:	9207      	str	r2, [sp, #28]
 80090fe:	e014      	b.n	800912a <_vfiprintf_r+0x156>
 8009100:	eba0 0308 	sub.w	r3, r0, r8
 8009104:	fa09 f303 	lsl.w	r3, r9, r3
 8009108:	4313      	orrs	r3, r2
 800910a:	46a2      	mov	sl, r4
 800910c:	9304      	str	r3, [sp, #16]
 800910e:	e7d2      	b.n	80090b6 <_vfiprintf_r+0xe2>
 8009110:	9b03      	ldr	r3, [sp, #12]
 8009112:	1d19      	adds	r1, r3, #4
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	9103      	str	r1, [sp, #12]
 8009118:	2b00      	cmp	r3, #0
 800911a:	bfbb      	ittet	lt
 800911c:	425b      	neglt	r3, r3
 800911e:	f042 0202 	orrlt.w	r2, r2, #2
 8009122:	9307      	strge	r3, [sp, #28]
 8009124:	9307      	strlt	r3, [sp, #28]
 8009126:	bfb8      	it	lt
 8009128:	9204      	strlt	r2, [sp, #16]
 800912a:	7823      	ldrb	r3, [r4, #0]
 800912c:	2b2e      	cmp	r3, #46	; 0x2e
 800912e:	d10c      	bne.n	800914a <_vfiprintf_r+0x176>
 8009130:	7863      	ldrb	r3, [r4, #1]
 8009132:	2b2a      	cmp	r3, #42	; 0x2a
 8009134:	d135      	bne.n	80091a2 <_vfiprintf_r+0x1ce>
 8009136:	9b03      	ldr	r3, [sp, #12]
 8009138:	3402      	adds	r4, #2
 800913a:	1d1a      	adds	r2, r3, #4
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	9203      	str	r2, [sp, #12]
 8009140:	2b00      	cmp	r3, #0
 8009142:	bfb8      	it	lt
 8009144:	f04f 33ff 	movlt.w	r3, #4294967295
 8009148:	9305      	str	r3, [sp, #20]
 800914a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009224 <_vfiprintf_r+0x250>
 800914e:	2203      	movs	r2, #3
 8009150:	4650      	mov	r0, sl
 8009152:	7821      	ldrb	r1, [r4, #0]
 8009154:	f000 fd08 	bl	8009b68 <memchr>
 8009158:	b140      	cbz	r0, 800916c <_vfiprintf_r+0x198>
 800915a:	2340      	movs	r3, #64	; 0x40
 800915c:	eba0 000a 	sub.w	r0, r0, sl
 8009160:	fa03 f000 	lsl.w	r0, r3, r0
 8009164:	9b04      	ldr	r3, [sp, #16]
 8009166:	3401      	adds	r4, #1
 8009168:	4303      	orrs	r3, r0
 800916a:	9304      	str	r3, [sp, #16]
 800916c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009170:	2206      	movs	r2, #6
 8009172:	482d      	ldr	r0, [pc, #180]	; (8009228 <_vfiprintf_r+0x254>)
 8009174:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009178:	f000 fcf6 	bl	8009b68 <memchr>
 800917c:	2800      	cmp	r0, #0
 800917e:	d03f      	beq.n	8009200 <_vfiprintf_r+0x22c>
 8009180:	4b2a      	ldr	r3, [pc, #168]	; (800922c <_vfiprintf_r+0x258>)
 8009182:	bb1b      	cbnz	r3, 80091cc <_vfiprintf_r+0x1f8>
 8009184:	9b03      	ldr	r3, [sp, #12]
 8009186:	3307      	adds	r3, #7
 8009188:	f023 0307 	bic.w	r3, r3, #7
 800918c:	3308      	adds	r3, #8
 800918e:	9303      	str	r3, [sp, #12]
 8009190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009192:	443b      	add	r3, r7
 8009194:	9309      	str	r3, [sp, #36]	; 0x24
 8009196:	e767      	b.n	8009068 <_vfiprintf_r+0x94>
 8009198:	460c      	mov	r4, r1
 800919a:	2001      	movs	r0, #1
 800919c:	fb0c 3202 	mla	r2, ip, r2, r3
 80091a0:	e7a5      	b.n	80090ee <_vfiprintf_r+0x11a>
 80091a2:	2300      	movs	r3, #0
 80091a4:	f04f 0c0a 	mov.w	ip, #10
 80091a8:	4619      	mov	r1, r3
 80091aa:	3401      	adds	r4, #1
 80091ac:	9305      	str	r3, [sp, #20]
 80091ae:	4620      	mov	r0, r4
 80091b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091b4:	3a30      	subs	r2, #48	; 0x30
 80091b6:	2a09      	cmp	r2, #9
 80091b8:	d903      	bls.n	80091c2 <_vfiprintf_r+0x1ee>
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0c5      	beq.n	800914a <_vfiprintf_r+0x176>
 80091be:	9105      	str	r1, [sp, #20]
 80091c0:	e7c3      	b.n	800914a <_vfiprintf_r+0x176>
 80091c2:	4604      	mov	r4, r0
 80091c4:	2301      	movs	r3, #1
 80091c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80091ca:	e7f0      	b.n	80091ae <_vfiprintf_r+0x1da>
 80091cc:	ab03      	add	r3, sp, #12
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	462a      	mov	r2, r5
 80091d2:	4630      	mov	r0, r6
 80091d4:	4b16      	ldr	r3, [pc, #88]	; (8009230 <_vfiprintf_r+0x25c>)
 80091d6:	a904      	add	r1, sp, #16
 80091d8:	f3af 8000 	nop.w
 80091dc:	4607      	mov	r7, r0
 80091de:	1c78      	adds	r0, r7, #1
 80091e0:	d1d6      	bne.n	8009190 <_vfiprintf_r+0x1bc>
 80091e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091e4:	07d9      	lsls	r1, r3, #31
 80091e6:	d405      	bmi.n	80091f4 <_vfiprintf_r+0x220>
 80091e8:	89ab      	ldrh	r3, [r5, #12]
 80091ea:	059a      	lsls	r2, r3, #22
 80091ec:	d402      	bmi.n	80091f4 <_vfiprintf_r+0x220>
 80091ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091f0:	f000 fc53 	bl	8009a9a <__retarget_lock_release_recursive>
 80091f4:	89ab      	ldrh	r3, [r5, #12]
 80091f6:	065b      	lsls	r3, r3, #25
 80091f8:	f53f af12 	bmi.w	8009020 <_vfiprintf_r+0x4c>
 80091fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091fe:	e711      	b.n	8009024 <_vfiprintf_r+0x50>
 8009200:	ab03      	add	r3, sp, #12
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	462a      	mov	r2, r5
 8009206:	4630      	mov	r0, r6
 8009208:	4b09      	ldr	r3, [pc, #36]	; (8009230 <_vfiprintf_r+0x25c>)
 800920a:	a904      	add	r1, sp, #16
 800920c:	f000 f882 	bl	8009314 <_printf_i>
 8009210:	e7e4      	b.n	80091dc <_vfiprintf_r+0x208>
 8009212:	bf00      	nop
 8009214:	0800aa30 	.word	0x0800aa30
 8009218:	0800aa50 	.word	0x0800aa50
 800921c:	0800aa10 	.word	0x0800aa10
 8009220:	0800a9dc 	.word	0x0800a9dc
 8009224:	0800a9e2 	.word	0x0800a9e2
 8009228:	0800a9e6 	.word	0x0800a9e6
 800922c:	00000000 	.word	0x00000000
 8009230:	08008faf 	.word	0x08008faf

08009234 <_printf_common>:
 8009234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009238:	4616      	mov	r6, r2
 800923a:	4699      	mov	r9, r3
 800923c:	688a      	ldr	r2, [r1, #8]
 800923e:	690b      	ldr	r3, [r1, #16]
 8009240:	4607      	mov	r7, r0
 8009242:	4293      	cmp	r3, r2
 8009244:	bfb8      	it	lt
 8009246:	4613      	movlt	r3, r2
 8009248:	6033      	str	r3, [r6, #0]
 800924a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800924e:	460c      	mov	r4, r1
 8009250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009254:	b10a      	cbz	r2, 800925a <_printf_common+0x26>
 8009256:	3301      	adds	r3, #1
 8009258:	6033      	str	r3, [r6, #0]
 800925a:	6823      	ldr	r3, [r4, #0]
 800925c:	0699      	lsls	r1, r3, #26
 800925e:	bf42      	ittt	mi
 8009260:	6833      	ldrmi	r3, [r6, #0]
 8009262:	3302      	addmi	r3, #2
 8009264:	6033      	strmi	r3, [r6, #0]
 8009266:	6825      	ldr	r5, [r4, #0]
 8009268:	f015 0506 	ands.w	r5, r5, #6
 800926c:	d106      	bne.n	800927c <_printf_common+0x48>
 800926e:	f104 0a19 	add.w	sl, r4, #25
 8009272:	68e3      	ldr	r3, [r4, #12]
 8009274:	6832      	ldr	r2, [r6, #0]
 8009276:	1a9b      	subs	r3, r3, r2
 8009278:	42ab      	cmp	r3, r5
 800927a:	dc28      	bgt.n	80092ce <_printf_common+0x9a>
 800927c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009280:	1e13      	subs	r3, r2, #0
 8009282:	6822      	ldr	r2, [r4, #0]
 8009284:	bf18      	it	ne
 8009286:	2301      	movne	r3, #1
 8009288:	0692      	lsls	r2, r2, #26
 800928a:	d42d      	bmi.n	80092e8 <_printf_common+0xb4>
 800928c:	4649      	mov	r1, r9
 800928e:	4638      	mov	r0, r7
 8009290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009294:	47c0      	blx	r8
 8009296:	3001      	adds	r0, #1
 8009298:	d020      	beq.n	80092dc <_printf_common+0xa8>
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	68e5      	ldr	r5, [r4, #12]
 800929e:	f003 0306 	and.w	r3, r3, #6
 80092a2:	2b04      	cmp	r3, #4
 80092a4:	bf18      	it	ne
 80092a6:	2500      	movne	r5, #0
 80092a8:	6832      	ldr	r2, [r6, #0]
 80092aa:	f04f 0600 	mov.w	r6, #0
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	bf08      	it	eq
 80092b2:	1aad      	subeq	r5, r5, r2
 80092b4:	6922      	ldr	r2, [r4, #16]
 80092b6:	bf08      	it	eq
 80092b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80092bc:	4293      	cmp	r3, r2
 80092be:	bfc4      	itt	gt
 80092c0:	1a9b      	subgt	r3, r3, r2
 80092c2:	18ed      	addgt	r5, r5, r3
 80092c4:	341a      	adds	r4, #26
 80092c6:	42b5      	cmp	r5, r6
 80092c8:	d11a      	bne.n	8009300 <_printf_common+0xcc>
 80092ca:	2000      	movs	r0, #0
 80092cc:	e008      	b.n	80092e0 <_printf_common+0xac>
 80092ce:	2301      	movs	r3, #1
 80092d0:	4652      	mov	r2, sl
 80092d2:	4649      	mov	r1, r9
 80092d4:	4638      	mov	r0, r7
 80092d6:	47c0      	blx	r8
 80092d8:	3001      	adds	r0, #1
 80092da:	d103      	bne.n	80092e4 <_printf_common+0xb0>
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295
 80092e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092e4:	3501      	adds	r5, #1
 80092e6:	e7c4      	b.n	8009272 <_printf_common+0x3e>
 80092e8:	2030      	movs	r0, #48	; 0x30
 80092ea:	18e1      	adds	r1, r4, r3
 80092ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092f0:	1c5a      	adds	r2, r3, #1
 80092f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092f6:	4422      	add	r2, r4
 80092f8:	3302      	adds	r3, #2
 80092fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092fe:	e7c5      	b.n	800928c <_printf_common+0x58>
 8009300:	2301      	movs	r3, #1
 8009302:	4622      	mov	r2, r4
 8009304:	4649      	mov	r1, r9
 8009306:	4638      	mov	r0, r7
 8009308:	47c0      	blx	r8
 800930a:	3001      	adds	r0, #1
 800930c:	d0e6      	beq.n	80092dc <_printf_common+0xa8>
 800930e:	3601      	adds	r6, #1
 8009310:	e7d9      	b.n	80092c6 <_printf_common+0x92>
	...

08009314 <_printf_i>:
 8009314:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009318:	7e0f      	ldrb	r7, [r1, #24]
 800931a:	4691      	mov	r9, r2
 800931c:	2f78      	cmp	r7, #120	; 0x78
 800931e:	4680      	mov	r8, r0
 8009320:	460c      	mov	r4, r1
 8009322:	469a      	mov	sl, r3
 8009324:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009326:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800932a:	d807      	bhi.n	800933c <_printf_i+0x28>
 800932c:	2f62      	cmp	r7, #98	; 0x62
 800932e:	d80a      	bhi.n	8009346 <_printf_i+0x32>
 8009330:	2f00      	cmp	r7, #0
 8009332:	f000 80d9 	beq.w	80094e8 <_printf_i+0x1d4>
 8009336:	2f58      	cmp	r7, #88	; 0x58
 8009338:	f000 80a4 	beq.w	8009484 <_printf_i+0x170>
 800933c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009340:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009344:	e03a      	b.n	80093bc <_printf_i+0xa8>
 8009346:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800934a:	2b15      	cmp	r3, #21
 800934c:	d8f6      	bhi.n	800933c <_printf_i+0x28>
 800934e:	a101      	add	r1, pc, #4	; (adr r1, 8009354 <_printf_i+0x40>)
 8009350:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009354:	080093ad 	.word	0x080093ad
 8009358:	080093c1 	.word	0x080093c1
 800935c:	0800933d 	.word	0x0800933d
 8009360:	0800933d 	.word	0x0800933d
 8009364:	0800933d 	.word	0x0800933d
 8009368:	0800933d 	.word	0x0800933d
 800936c:	080093c1 	.word	0x080093c1
 8009370:	0800933d 	.word	0x0800933d
 8009374:	0800933d 	.word	0x0800933d
 8009378:	0800933d 	.word	0x0800933d
 800937c:	0800933d 	.word	0x0800933d
 8009380:	080094cf 	.word	0x080094cf
 8009384:	080093f1 	.word	0x080093f1
 8009388:	080094b1 	.word	0x080094b1
 800938c:	0800933d 	.word	0x0800933d
 8009390:	0800933d 	.word	0x0800933d
 8009394:	080094f1 	.word	0x080094f1
 8009398:	0800933d 	.word	0x0800933d
 800939c:	080093f1 	.word	0x080093f1
 80093a0:	0800933d 	.word	0x0800933d
 80093a4:	0800933d 	.word	0x0800933d
 80093a8:	080094b9 	.word	0x080094b9
 80093ac:	682b      	ldr	r3, [r5, #0]
 80093ae:	1d1a      	adds	r2, r3, #4
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	602a      	str	r2, [r5, #0]
 80093b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80093b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093bc:	2301      	movs	r3, #1
 80093be:	e0a4      	b.n	800950a <_printf_i+0x1f6>
 80093c0:	6820      	ldr	r0, [r4, #0]
 80093c2:	6829      	ldr	r1, [r5, #0]
 80093c4:	0606      	lsls	r6, r0, #24
 80093c6:	f101 0304 	add.w	r3, r1, #4
 80093ca:	d50a      	bpl.n	80093e2 <_printf_i+0xce>
 80093cc:	680e      	ldr	r6, [r1, #0]
 80093ce:	602b      	str	r3, [r5, #0]
 80093d0:	2e00      	cmp	r6, #0
 80093d2:	da03      	bge.n	80093dc <_printf_i+0xc8>
 80093d4:	232d      	movs	r3, #45	; 0x2d
 80093d6:	4276      	negs	r6, r6
 80093d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093dc:	230a      	movs	r3, #10
 80093de:	485e      	ldr	r0, [pc, #376]	; (8009558 <_printf_i+0x244>)
 80093e0:	e019      	b.n	8009416 <_printf_i+0x102>
 80093e2:	680e      	ldr	r6, [r1, #0]
 80093e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80093e8:	602b      	str	r3, [r5, #0]
 80093ea:	bf18      	it	ne
 80093ec:	b236      	sxthne	r6, r6
 80093ee:	e7ef      	b.n	80093d0 <_printf_i+0xbc>
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	6820      	ldr	r0, [r4, #0]
 80093f4:	1d19      	adds	r1, r3, #4
 80093f6:	6029      	str	r1, [r5, #0]
 80093f8:	0601      	lsls	r1, r0, #24
 80093fa:	d501      	bpl.n	8009400 <_printf_i+0xec>
 80093fc:	681e      	ldr	r6, [r3, #0]
 80093fe:	e002      	b.n	8009406 <_printf_i+0xf2>
 8009400:	0646      	lsls	r6, r0, #25
 8009402:	d5fb      	bpl.n	80093fc <_printf_i+0xe8>
 8009404:	881e      	ldrh	r6, [r3, #0]
 8009406:	2f6f      	cmp	r7, #111	; 0x6f
 8009408:	bf0c      	ite	eq
 800940a:	2308      	moveq	r3, #8
 800940c:	230a      	movne	r3, #10
 800940e:	4852      	ldr	r0, [pc, #328]	; (8009558 <_printf_i+0x244>)
 8009410:	2100      	movs	r1, #0
 8009412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009416:	6865      	ldr	r5, [r4, #4]
 8009418:	2d00      	cmp	r5, #0
 800941a:	bfa8      	it	ge
 800941c:	6821      	ldrge	r1, [r4, #0]
 800941e:	60a5      	str	r5, [r4, #8]
 8009420:	bfa4      	itt	ge
 8009422:	f021 0104 	bicge.w	r1, r1, #4
 8009426:	6021      	strge	r1, [r4, #0]
 8009428:	b90e      	cbnz	r6, 800942e <_printf_i+0x11a>
 800942a:	2d00      	cmp	r5, #0
 800942c:	d04d      	beq.n	80094ca <_printf_i+0x1b6>
 800942e:	4615      	mov	r5, r2
 8009430:	fbb6 f1f3 	udiv	r1, r6, r3
 8009434:	fb03 6711 	mls	r7, r3, r1, r6
 8009438:	5dc7      	ldrb	r7, [r0, r7]
 800943a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800943e:	4637      	mov	r7, r6
 8009440:	42bb      	cmp	r3, r7
 8009442:	460e      	mov	r6, r1
 8009444:	d9f4      	bls.n	8009430 <_printf_i+0x11c>
 8009446:	2b08      	cmp	r3, #8
 8009448:	d10b      	bne.n	8009462 <_printf_i+0x14e>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	07de      	lsls	r6, r3, #31
 800944e:	d508      	bpl.n	8009462 <_printf_i+0x14e>
 8009450:	6923      	ldr	r3, [r4, #16]
 8009452:	6861      	ldr	r1, [r4, #4]
 8009454:	4299      	cmp	r1, r3
 8009456:	bfde      	ittt	le
 8009458:	2330      	movle	r3, #48	; 0x30
 800945a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800945e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009462:	1b52      	subs	r2, r2, r5
 8009464:	6122      	str	r2, [r4, #16]
 8009466:	464b      	mov	r3, r9
 8009468:	4621      	mov	r1, r4
 800946a:	4640      	mov	r0, r8
 800946c:	f8cd a000 	str.w	sl, [sp]
 8009470:	aa03      	add	r2, sp, #12
 8009472:	f7ff fedf 	bl	8009234 <_printf_common>
 8009476:	3001      	adds	r0, #1
 8009478:	d14c      	bne.n	8009514 <_printf_i+0x200>
 800947a:	f04f 30ff 	mov.w	r0, #4294967295
 800947e:	b004      	add	sp, #16
 8009480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009484:	4834      	ldr	r0, [pc, #208]	; (8009558 <_printf_i+0x244>)
 8009486:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800948a:	6829      	ldr	r1, [r5, #0]
 800948c:	6823      	ldr	r3, [r4, #0]
 800948e:	f851 6b04 	ldr.w	r6, [r1], #4
 8009492:	6029      	str	r1, [r5, #0]
 8009494:	061d      	lsls	r5, r3, #24
 8009496:	d514      	bpl.n	80094c2 <_printf_i+0x1ae>
 8009498:	07df      	lsls	r7, r3, #31
 800949a:	bf44      	itt	mi
 800949c:	f043 0320 	orrmi.w	r3, r3, #32
 80094a0:	6023      	strmi	r3, [r4, #0]
 80094a2:	b91e      	cbnz	r6, 80094ac <_printf_i+0x198>
 80094a4:	6823      	ldr	r3, [r4, #0]
 80094a6:	f023 0320 	bic.w	r3, r3, #32
 80094aa:	6023      	str	r3, [r4, #0]
 80094ac:	2310      	movs	r3, #16
 80094ae:	e7af      	b.n	8009410 <_printf_i+0xfc>
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	f043 0320 	orr.w	r3, r3, #32
 80094b6:	6023      	str	r3, [r4, #0]
 80094b8:	2378      	movs	r3, #120	; 0x78
 80094ba:	4828      	ldr	r0, [pc, #160]	; (800955c <_printf_i+0x248>)
 80094bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80094c0:	e7e3      	b.n	800948a <_printf_i+0x176>
 80094c2:	0659      	lsls	r1, r3, #25
 80094c4:	bf48      	it	mi
 80094c6:	b2b6      	uxthmi	r6, r6
 80094c8:	e7e6      	b.n	8009498 <_printf_i+0x184>
 80094ca:	4615      	mov	r5, r2
 80094cc:	e7bb      	b.n	8009446 <_printf_i+0x132>
 80094ce:	682b      	ldr	r3, [r5, #0]
 80094d0:	6826      	ldr	r6, [r4, #0]
 80094d2:	1d18      	adds	r0, r3, #4
 80094d4:	6961      	ldr	r1, [r4, #20]
 80094d6:	6028      	str	r0, [r5, #0]
 80094d8:	0635      	lsls	r5, r6, #24
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	d501      	bpl.n	80094e2 <_printf_i+0x1ce>
 80094de:	6019      	str	r1, [r3, #0]
 80094e0:	e002      	b.n	80094e8 <_printf_i+0x1d4>
 80094e2:	0670      	lsls	r0, r6, #25
 80094e4:	d5fb      	bpl.n	80094de <_printf_i+0x1ca>
 80094e6:	8019      	strh	r1, [r3, #0]
 80094e8:	2300      	movs	r3, #0
 80094ea:	4615      	mov	r5, r2
 80094ec:	6123      	str	r3, [r4, #16]
 80094ee:	e7ba      	b.n	8009466 <_printf_i+0x152>
 80094f0:	682b      	ldr	r3, [r5, #0]
 80094f2:	2100      	movs	r1, #0
 80094f4:	1d1a      	adds	r2, r3, #4
 80094f6:	602a      	str	r2, [r5, #0]
 80094f8:	681d      	ldr	r5, [r3, #0]
 80094fa:	6862      	ldr	r2, [r4, #4]
 80094fc:	4628      	mov	r0, r5
 80094fe:	f000 fb33 	bl	8009b68 <memchr>
 8009502:	b108      	cbz	r0, 8009508 <_printf_i+0x1f4>
 8009504:	1b40      	subs	r0, r0, r5
 8009506:	6060      	str	r0, [r4, #4]
 8009508:	6863      	ldr	r3, [r4, #4]
 800950a:	6123      	str	r3, [r4, #16]
 800950c:	2300      	movs	r3, #0
 800950e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009512:	e7a8      	b.n	8009466 <_printf_i+0x152>
 8009514:	462a      	mov	r2, r5
 8009516:	4649      	mov	r1, r9
 8009518:	4640      	mov	r0, r8
 800951a:	6923      	ldr	r3, [r4, #16]
 800951c:	47d0      	blx	sl
 800951e:	3001      	adds	r0, #1
 8009520:	d0ab      	beq.n	800947a <_printf_i+0x166>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	079b      	lsls	r3, r3, #30
 8009526:	d413      	bmi.n	8009550 <_printf_i+0x23c>
 8009528:	68e0      	ldr	r0, [r4, #12]
 800952a:	9b03      	ldr	r3, [sp, #12]
 800952c:	4298      	cmp	r0, r3
 800952e:	bfb8      	it	lt
 8009530:	4618      	movlt	r0, r3
 8009532:	e7a4      	b.n	800947e <_printf_i+0x16a>
 8009534:	2301      	movs	r3, #1
 8009536:	4632      	mov	r2, r6
 8009538:	4649      	mov	r1, r9
 800953a:	4640      	mov	r0, r8
 800953c:	47d0      	blx	sl
 800953e:	3001      	adds	r0, #1
 8009540:	d09b      	beq.n	800947a <_printf_i+0x166>
 8009542:	3501      	adds	r5, #1
 8009544:	68e3      	ldr	r3, [r4, #12]
 8009546:	9903      	ldr	r1, [sp, #12]
 8009548:	1a5b      	subs	r3, r3, r1
 800954a:	42ab      	cmp	r3, r5
 800954c:	dcf2      	bgt.n	8009534 <_printf_i+0x220>
 800954e:	e7eb      	b.n	8009528 <_printf_i+0x214>
 8009550:	2500      	movs	r5, #0
 8009552:	f104 0619 	add.w	r6, r4, #25
 8009556:	e7f5      	b.n	8009544 <_printf_i+0x230>
 8009558:	0800a9ed 	.word	0x0800a9ed
 800955c:	0800a9fe 	.word	0x0800a9fe

08009560 <siprintf>:
 8009560:	b40e      	push	{r1, r2, r3}
 8009562:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009566:	b500      	push	{lr}
 8009568:	b09c      	sub	sp, #112	; 0x70
 800956a:	ab1d      	add	r3, sp, #116	; 0x74
 800956c:	9002      	str	r0, [sp, #8]
 800956e:	9006      	str	r0, [sp, #24]
 8009570:	9107      	str	r1, [sp, #28]
 8009572:	9104      	str	r1, [sp, #16]
 8009574:	4808      	ldr	r0, [pc, #32]	; (8009598 <siprintf+0x38>)
 8009576:	4909      	ldr	r1, [pc, #36]	; (800959c <siprintf+0x3c>)
 8009578:	f853 2b04 	ldr.w	r2, [r3], #4
 800957c:	9105      	str	r1, [sp, #20]
 800957e:	6800      	ldr	r0, [r0, #0]
 8009580:	a902      	add	r1, sp, #8
 8009582:	9301      	str	r3, [sp, #4]
 8009584:	f000 fc7e 	bl	8009e84 <_svfiprintf_r>
 8009588:	2200      	movs	r2, #0
 800958a:	9b02      	ldr	r3, [sp, #8]
 800958c:	701a      	strb	r2, [r3, #0]
 800958e:	b01c      	add	sp, #112	; 0x70
 8009590:	f85d eb04 	ldr.w	lr, [sp], #4
 8009594:	b003      	add	sp, #12
 8009596:	4770      	bx	lr
 8009598:	20000018 	.word	0x20000018
 800959c:	ffff0208 	.word	0xffff0208

080095a0 <__swbuf_r>:
 80095a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a2:	460e      	mov	r6, r1
 80095a4:	4614      	mov	r4, r2
 80095a6:	4605      	mov	r5, r0
 80095a8:	b118      	cbz	r0, 80095b2 <__swbuf_r+0x12>
 80095aa:	6983      	ldr	r3, [r0, #24]
 80095ac:	b90b      	cbnz	r3, 80095b2 <__swbuf_r+0x12>
 80095ae:	f000 f9d5 	bl	800995c <__sinit>
 80095b2:	4b21      	ldr	r3, [pc, #132]	; (8009638 <__swbuf_r+0x98>)
 80095b4:	429c      	cmp	r4, r3
 80095b6:	d12b      	bne.n	8009610 <__swbuf_r+0x70>
 80095b8:	686c      	ldr	r4, [r5, #4]
 80095ba:	69a3      	ldr	r3, [r4, #24]
 80095bc:	60a3      	str	r3, [r4, #8]
 80095be:	89a3      	ldrh	r3, [r4, #12]
 80095c0:	071a      	lsls	r2, r3, #28
 80095c2:	d52f      	bpl.n	8009624 <__swbuf_r+0x84>
 80095c4:	6923      	ldr	r3, [r4, #16]
 80095c6:	b36b      	cbz	r3, 8009624 <__swbuf_r+0x84>
 80095c8:	6923      	ldr	r3, [r4, #16]
 80095ca:	6820      	ldr	r0, [r4, #0]
 80095cc:	b2f6      	uxtb	r6, r6
 80095ce:	1ac0      	subs	r0, r0, r3
 80095d0:	6963      	ldr	r3, [r4, #20]
 80095d2:	4637      	mov	r7, r6
 80095d4:	4283      	cmp	r3, r0
 80095d6:	dc04      	bgt.n	80095e2 <__swbuf_r+0x42>
 80095d8:	4621      	mov	r1, r4
 80095da:	4628      	mov	r0, r5
 80095dc:	f000 f92a 	bl	8009834 <_fflush_r>
 80095e0:	bb30      	cbnz	r0, 8009630 <__swbuf_r+0x90>
 80095e2:	68a3      	ldr	r3, [r4, #8]
 80095e4:	3001      	adds	r0, #1
 80095e6:	3b01      	subs	r3, #1
 80095e8:	60a3      	str	r3, [r4, #8]
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	1c5a      	adds	r2, r3, #1
 80095ee:	6022      	str	r2, [r4, #0]
 80095f0:	701e      	strb	r6, [r3, #0]
 80095f2:	6963      	ldr	r3, [r4, #20]
 80095f4:	4283      	cmp	r3, r0
 80095f6:	d004      	beq.n	8009602 <__swbuf_r+0x62>
 80095f8:	89a3      	ldrh	r3, [r4, #12]
 80095fa:	07db      	lsls	r3, r3, #31
 80095fc:	d506      	bpl.n	800960c <__swbuf_r+0x6c>
 80095fe:	2e0a      	cmp	r6, #10
 8009600:	d104      	bne.n	800960c <__swbuf_r+0x6c>
 8009602:	4621      	mov	r1, r4
 8009604:	4628      	mov	r0, r5
 8009606:	f000 f915 	bl	8009834 <_fflush_r>
 800960a:	b988      	cbnz	r0, 8009630 <__swbuf_r+0x90>
 800960c:	4638      	mov	r0, r7
 800960e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009610:	4b0a      	ldr	r3, [pc, #40]	; (800963c <__swbuf_r+0x9c>)
 8009612:	429c      	cmp	r4, r3
 8009614:	d101      	bne.n	800961a <__swbuf_r+0x7a>
 8009616:	68ac      	ldr	r4, [r5, #8]
 8009618:	e7cf      	b.n	80095ba <__swbuf_r+0x1a>
 800961a:	4b09      	ldr	r3, [pc, #36]	; (8009640 <__swbuf_r+0xa0>)
 800961c:	429c      	cmp	r4, r3
 800961e:	bf08      	it	eq
 8009620:	68ec      	ldreq	r4, [r5, #12]
 8009622:	e7ca      	b.n	80095ba <__swbuf_r+0x1a>
 8009624:	4621      	mov	r1, r4
 8009626:	4628      	mov	r0, r5
 8009628:	f000 f80c 	bl	8009644 <__swsetup_r>
 800962c:	2800      	cmp	r0, #0
 800962e:	d0cb      	beq.n	80095c8 <__swbuf_r+0x28>
 8009630:	f04f 37ff 	mov.w	r7, #4294967295
 8009634:	e7ea      	b.n	800960c <__swbuf_r+0x6c>
 8009636:	bf00      	nop
 8009638:	0800aa30 	.word	0x0800aa30
 800963c:	0800aa50 	.word	0x0800aa50
 8009640:	0800aa10 	.word	0x0800aa10

08009644 <__swsetup_r>:
 8009644:	4b32      	ldr	r3, [pc, #200]	; (8009710 <__swsetup_r+0xcc>)
 8009646:	b570      	push	{r4, r5, r6, lr}
 8009648:	681d      	ldr	r5, [r3, #0]
 800964a:	4606      	mov	r6, r0
 800964c:	460c      	mov	r4, r1
 800964e:	b125      	cbz	r5, 800965a <__swsetup_r+0x16>
 8009650:	69ab      	ldr	r3, [r5, #24]
 8009652:	b913      	cbnz	r3, 800965a <__swsetup_r+0x16>
 8009654:	4628      	mov	r0, r5
 8009656:	f000 f981 	bl	800995c <__sinit>
 800965a:	4b2e      	ldr	r3, [pc, #184]	; (8009714 <__swsetup_r+0xd0>)
 800965c:	429c      	cmp	r4, r3
 800965e:	d10f      	bne.n	8009680 <__swsetup_r+0x3c>
 8009660:	686c      	ldr	r4, [r5, #4]
 8009662:	89a3      	ldrh	r3, [r4, #12]
 8009664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009668:	0719      	lsls	r1, r3, #28
 800966a:	d42c      	bmi.n	80096c6 <__swsetup_r+0x82>
 800966c:	06dd      	lsls	r5, r3, #27
 800966e:	d411      	bmi.n	8009694 <__swsetup_r+0x50>
 8009670:	2309      	movs	r3, #9
 8009672:	6033      	str	r3, [r6, #0]
 8009674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009678:	f04f 30ff 	mov.w	r0, #4294967295
 800967c:	81a3      	strh	r3, [r4, #12]
 800967e:	e03e      	b.n	80096fe <__swsetup_r+0xba>
 8009680:	4b25      	ldr	r3, [pc, #148]	; (8009718 <__swsetup_r+0xd4>)
 8009682:	429c      	cmp	r4, r3
 8009684:	d101      	bne.n	800968a <__swsetup_r+0x46>
 8009686:	68ac      	ldr	r4, [r5, #8]
 8009688:	e7eb      	b.n	8009662 <__swsetup_r+0x1e>
 800968a:	4b24      	ldr	r3, [pc, #144]	; (800971c <__swsetup_r+0xd8>)
 800968c:	429c      	cmp	r4, r3
 800968e:	bf08      	it	eq
 8009690:	68ec      	ldreq	r4, [r5, #12]
 8009692:	e7e6      	b.n	8009662 <__swsetup_r+0x1e>
 8009694:	0758      	lsls	r0, r3, #29
 8009696:	d512      	bpl.n	80096be <__swsetup_r+0x7a>
 8009698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800969a:	b141      	cbz	r1, 80096ae <__swsetup_r+0x6a>
 800969c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096a0:	4299      	cmp	r1, r3
 80096a2:	d002      	beq.n	80096aa <__swsetup_r+0x66>
 80096a4:	4630      	mov	r0, r6
 80096a6:	f000 fa87 	bl	8009bb8 <_free_r>
 80096aa:	2300      	movs	r3, #0
 80096ac:	6363      	str	r3, [r4, #52]	; 0x34
 80096ae:	89a3      	ldrh	r3, [r4, #12]
 80096b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096b4:	81a3      	strh	r3, [r4, #12]
 80096b6:	2300      	movs	r3, #0
 80096b8:	6063      	str	r3, [r4, #4]
 80096ba:	6923      	ldr	r3, [r4, #16]
 80096bc:	6023      	str	r3, [r4, #0]
 80096be:	89a3      	ldrh	r3, [r4, #12]
 80096c0:	f043 0308 	orr.w	r3, r3, #8
 80096c4:	81a3      	strh	r3, [r4, #12]
 80096c6:	6923      	ldr	r3, [r4, #16]
 80096c8:	b94b      	cbnz	r3, 80096de <__swsetup_r+0x9a>
 80096ca:	89a3      	ldrh	r3, [r4, #12]
 80096cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096d4:	d003      	beq.n	80096de <__swsetup_r+0x9a>
 80096d6:	4621      	mov	r1, r4
 80096d8:	4630      	mov	r0, r6
 80096da:	f000 fa05 	bl	8009ae8 <__smakebuf_r>
 80096de:	89a0      	ldrh	r0, [r4, #12]
 80096e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096e4:	f010 0301 	ands.w	r3, r0, #1
 80096e8:	d00a      	beq.n	8009700 <__swsetup_r+0xbc>
 80096ea:	2300      	movs	r3, #0
 80096ec:	60a3      	str	r3, [r4, #8]
 80096ee:	6963      	ldr	r3, [r4, #20]
 80096f0:	425b      	negs	r3, r3
 80096f2:	61a3      	str	r3, [r4, #24]
 80096f4:	6923      	ldr	r3, [r4, #16]
 80096f6:	b943      	cbnz	r3, 800970a <__swsetup_r+0xc6>
 80096f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096fc:	d1ba      	bne.n	8009674 <__swsetup_r+0x30>
 80096fe:	bd70      	pop	{r4, r5, r6, pc}
 8009700:	0781      	lsls	r1, r0, #30
 8009702:	bf58      	it	pl
 8009704:	6963      	ldrpl	r3, [r4, #20]
 8009706:	60a3      	str	r3, [r4, #8]
 8009708:	e7f4      	b.n	80096f4 <__swsetup_r+0xb0>
 800970a:	2000      	movs	r0, #0
 800970c:	e7f7      	b.n	80096fe <__swsetup_r+0xba>
 800970e:	bf00      	nop
 8009710:	20000018 	.word	0x20000018
 8009714:	0800aa30 	.word	0x0800aa30
 8009718:	0800aa50 	.word	0x0800aa50
 800971c:	0800aa10 	.word	0x0800aa10

08009720 <abort>:
 8009720:	2006      	movs	r0, #6
 8009722:	b508      	push	{r3, lr}
 8009724:	f000 fce6 	bl	800a0f4 <raise>
 8009728:	2001      	movs	r0, #1
 800972a:	f7fb fac4 	bl	8004cb6 <_exit>
	...

08009730 <__sflush_r>:
 8009730:	898a      	ldrh	r2, [r1, #12]
 8009732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009734:	4605      	mov	r5, r0
 8009736:	0710      	lsls	r0, r2, #28
 8009738:	460c      	mov	r4, r1
 800973a:	d457      	bmi.n	80097ec <__sflush_r+0xbc>
 800973c:	684b      	ldr	r3, [r1, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	dc04      	bgt.n	800974c <__sflush_r+0x1c>
 8009742:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	dc01      	bgt.n	800974c <__sflush_r+0x1c>
 8009748:	2000      	movs	r0, #0
 800974a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800974c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800974e:	2e00      	cmp	r6, #0
 8009750:	d0fa      	beq.n	8009748 <__sflush_r+0x18>
 8009752:	2300      	movs	r3, #0
 8009754:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009758:	682f      	ldr	r7, [r5, #0]
 800975a:	602b      	str	r3, [r5, #0]
 800975c:	d032      	beq.n	80097c4 <__sflush_r+0x94>
 800975e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009760:	89a3      	ldrh	r3, [r4, #12]
 8009762:	075a      	lsls	r2, r3, #29
 8009764:	d505      	bpl.n	8009772 <__sflush_r+0x42>
 8009766:	6863      	ldr	r3, [r4, #4]
 8009768:	1ac0      	subs	r0, r0, r3
 800976a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800976c:	b10b      	cbz	r3, 8009772 <__sflush_r+0x42>
 800976e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009770:	1ac0      	subs	r0, r0, r3
 8009772:	2300      	movs	r3, #0
 8009774:	4602      	mov	r2, r0
 8009776:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009778:	4628      	mov	r0, r5
 800977a:	6a21      	ldr	r1, [r4, #32]
 800977c:	47b0      	blx	r6
 800977e:	1c43      	adds	r3, r0, #1
 8009780:	89a3      	ldrh	r3, [r4, #12]
 8009782:	d106      	bne.n	8009792 <__sflush_r+0x62>
 8009784:	6829      	ldr	r1, [r5, #0]
 8009786:	291d      	cmp	r1, #29
 8009788:	d82c      	bhi.n	80097e4 <__sflush_r+0xb4>
 800978a:	4a29      	ldr	r2, [pc, #164]	; (8009830 <__sflush_r+0x100>)
 800978c:	40ca      	lsrs	r2, r1
 800978e:	07d6      	lsls	r6, r2, #31
 8009790:	d528      	bpl.n	80097e4 <__sflush_r+0xb4>
 8009792:	2200      	movs	r2, #0
 8009794:	6062      	str	r2, [r4, #4]
 8009796:	6922      	ldr	r2, [r4, #16]
 8009798:	04d9      	lsls	r1, r3, #19
 800979a:	6022      	str	r2, [r4, #0]
 800979c:	d504      	bpl.n	80097a8 <__sflush_r+0x78>
 800979e:	1c42      	adds	r2, r0, #1
 80097a0:	d101      	bne.n	80097a6 <__sflush_r+0x76>
 80097a2:	682b      	ldr	r3, [r5, #0]
 80097a4:	b903      	cbnz	r3, 80097a8 <__sflush_r+0x78>
 80097a6:	6560      	str	r0, [r4, #84]	; 0x54
 80097a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80097aa:	602f      	str	r7, [r5, #0]
 80097ac:	2900      	cmp	r1, #0
 80097ae:	d0cb      	beq.n	8009748 <__sflush_r+0x18>
 80097b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097b4:	4299      	cmp	r1, r3
 80097b6:	d002      	beq.n	80097be <__sflush_r+0x8e>
 80097b8:	4628      	mov	r0, r5
 80097ba:	f000 f9fd 	bl	8009bb8 <_free_r>
 80097be:	2000      	movs	r0, #0
 80097c0:	6360      	str	r0, [r4, #52]	; 0x34
 80097c2:	e7c2      	b.n	800974a <__sflush_r+0x1a>
 80097c4:	6a21      	ldr	r1, [r4, #32]
 80097c6:	2301      	movs	r3, #1
 80097c8:	4628      	mov	r0, r5
 80097ca:	47b0      	blx	r6
 80097cc:	1c41      	adds	r1, r0, #1
 80097ce:	d1c7      	bne.n	8009760 <__sflush_r+0x30>
 80097d0:	682b      	ldr	r3, [r5, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0c4      	beq.n	8009760 <__sflush_r+0x30>
 80097d6:	2b1d      	cmp	r3, #29
 80097d8:	d001      	beq.n	80097de <__sflush_r+0xae>
 80097da:	2b16      	cmp	r3, #22
 80097dc:	d101      	bne.n	80097e2 <__sflush_r+0xb2>
 80097de:	602f      	str	r7, [r5, #0]
 80097e0:	e7b2      	b.n	8009748 <__sflush_r+0x18>
 80097e2:	89a3      	ldrh	r3, [r4, #12]
 80097e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097e8:	81a3      	strh	r3, [r4, #12]
 80097ea:	e7ae      	b.n	800974a <__sflush_r+0x1a>
 80097ec:	690f      	ldr	r7, [r1, #16]
 80097ee:	2f00      	cmp	r7, #0
 80097f0:	d0aa      	beq.n	8009748 <__sflush_r+0x18>
 80097f2:	0793      	lsls	r3, r2, #30
 80097f4:	bf18      	it	ne
 80097f6:	2300      	movne	r3, #0
 80097f8:	680e      	ldr	r6, [r1, #0]
 80097fa:	bf08      	it	eq
 80097fc:	694b      	ldreq	r3, [r1, #20]
 80097fe:	1bf6      	subs	r6, r6, r7
 8009800:	600f      	str	r7, [r1, #0]
 8009802:	608b      	str	r3, [r1, #8]
 8009804:	2e00      	cmp	r6, #0
 8009806:	dd9f      	ble.n	8009748 <__sflush_r+0x18>
 8009808:	4633      	mov	r3, r6
 800980a:	463a      	mov	r2, r7
 800980c:	4628      	mov	r0, r5
 800980e:	6a21      	ldr	r1, [r4, #32]
 8009810:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009814:	47e0      	blx	ip
 8009816:	2800      	cmp	r0, #0
 8009818:	dc06      	bgt.n	8009828 <__sflush_r+0xf8>
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	f04f 30ff 	mov.w	r0, #4294967295
 8009820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009824:	81a3      	strh	r3, [r4, #12]
 8009826:	e790      	b.n	800974a <__sflush_r+0x1a>
 8009828:	4407      	add	r7, r0
 800982a:	1a36      	subs	r6, r6, r0
 800982c:	e7ea      	b.n	8009804 <__sflush_r+0xd4>
 800982e:	bf00      	nop
 8009830:	20400001 	.word	0x20400001

08009834 <_fflush_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	690b      	ldr	r3, [r1, #16]
 8009838:	4605      	mov	r5, r0
 800983a:	460c      	mov	r4, r1
 800983c:	b913      	cbnz	r3, 8009844 <_fflush_r+0x10>
 800983e:	2500      	movs	r5, #0
 8009840:	4628      	mov	r0, r5
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	b118      	cbz	r0, 800984e <_fflush_r+0x1a>
 8009846:	6983      	ldr	r3, [r0, #24]
 8009848:	b90b      	cbnz	r3, 800984e <_fflush_r+0x1a>
 800984a:	f000 f887 	bl	800995c <__sinit>
 800984e:	4b14      	ldr	r3, [pc, #80]	; (80098a0 <_fflush_r+0x6c>)
 8009850:	429c      	cmp	r4, r3
 8009852:	d11b      	bne.n	800988c <_fflush_r+0x58>
 8009854:	686c      	ldr	r4, [r5, #4]
 8009856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0ef      	beq.n	800983e <_fflush_r+0xa>
 800985e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009860:	07d0      	lsls	r0, r2, #31
 8009862:	d404      	bmi.n	800986e <_fflush_r+0x3a>
 8009864:	0599      	lsls	r1, r3, #22
 8009866:	d402      	bmi.n	800986e <_fflush_r+0x3a>
 8009868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800986a:	f000 f915 	bl	8009a98 <__retarget_lock_acquire_recursive>
 800986e:	4628      	mov	r0, r5
 8009870:	4621      	mov	r1, r4
 8009872:	f7ff ff5d 	bl	8009730 <__sflush_r>
 8009876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009878:	4605      	mov	r5, r0
 800987a:	07da      	lsls	r2, r3, #31
 800987c:	d4e0      	bmi.n	8009840 <_fflush_r+0xc>
 800987e:	89a3      	ldrh	r3, [r4, #12]
 8009880:	059b      	lsls	r3, r3, #22
 8009882:	d4dd      	bmi.n	8009840 <_fflush_r+0xc>
 8009884:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009886:	f000 f908 	bl	8009a9a <__retarget_lock_release_recursive>
 800988a:	e7d9      	b.n	8009840 <_fflush_r+0xc>
 800988c:	4b05      	ldr	r3, [pc, #20]	; (80098a4 <_fflush_r+0x70>)
 800988e:	429c      	cmp	r4, r3
 8009890:	d101      	bne.n	8009896 <_fflush_r+0x62>
 8009892:	68ac      	ldr	r4, [r5, #8]
 8009894:	e7df      	b.n	8009856 <_fflush_r+0x22>
 8009896:	4b04      	ldr	r3, [pc, #16]	; (80098a8 <_fflush_r+0x74>)
 8009898:	429c      	cmp	r4, r3
 800989a:	bf08      	it	eq
 800989c:	68ec      	ldreq	r4, [r5, #12]
 800989e:	e7da      	b.n	8009856 <_fflush_r+0x22>
 80098a0:	0800aa30 	.word	0x0800aa30
 80098a4:	0800aa50 	.word	0x0800aa50
 80098a8:	0800aa10 	.word	0x0800aa10

080098ac <std>:
 80098ac:	2300      	movs	r3, #0
 80098ae:	b510      	push	{r4, lr}
 80098b0:	4604      	mov	r4, r0
 80098b2:	e9c0 3300 	strd	r3, r3, [r0]
 80098b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098ba:	6083      	str	r3, [r0, #8]
 80098bc:	8181      	strh	r1, [r0, #12]
 80098be:	6643      	str	r3, [r0, #100]	; 0x64
 80098c0:	81c2      	strh	r2, [r0, #14]
 80098c2:	6183      	str	r3, [r0, #24]
 80098c4:	4619      	mov	r1, r3
 80098c6:	2208      	movs	r2, #8
 80098c8:	305c      	adds	r0, #92	; 0x5c
 80098ca:	f7ff fb53 	bl	8008f74 <memset>
 80098ce:	4b05      	ldr	r3, [pc, #20]	; (80098e4 <std+0x38>)
 80098d0:	6224      	str	r4, [r4, #32]
 80098d2:	6263      	str	r3, [r4, #36]	; 0x24
 80098d4:	4b04      	ldr	r3, [pc, #16]	; (80098e8 <std+0x3c>)
 80098d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80098d8:	4b04      	ldr	r3, [pc, #16]	; (80098ec <std+0x40>)
 80098da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80098dc:	4b04      	ldr	r3, [pc, #16]	; (80098f0 <std+0x44>)
 80098de:	6323      	str	r3, [r4, #48]	; 0x30
 80098e0:	bd10      	pop	{r4, pc}
 80098e2:	bf00      	nop
 80098e4:	0800a12d 	.word	0x0800a12d
 80098e8:	0800a14f 	.word	0x0800a14f
 80098ec:	0800a187 	.word	0x0800a187
 80098f0:	0800a1ab 	.word	0x0800a1ab

080098f4 <_cleanup_r>:
 80098f4:	4901      	ldr	r1, [pc, #4]	; (80098fc <_cleanup_r+0x8>)
 80098f6:	f000 b8af 	b.w	8009a58 <_fwalk_reent>
 80098fa:	bf00      	nop
 80098fc:	08009835 	.word	0x08009835

08009900 <__sfmoreglue>:
 8009900:	2268      	movs	r2, #104	; 0x68
 8009902:	b570      	push	{r4, r5, r6, lr}
 8009904:	1e4d      	subs	r5, r1, #1
 8009906:	4355      	muls	r5, r2
 8009908:	460e      	mov	r6, r1
 800990a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800990e:	f000 f9bb 	bl	8009c88 <_malloc_r>
 8009912:	4604      	mov	r4, r0
 8009914:	b140      	cbz	r0, 8009928 <__sfmoreglue+0x28>
 8009916:	2100      	movs	r1, #0
 8009918:	e9c0 1600 	strd	r1, r6, [r0]
 800991c:	300c      	adds	r0, #12
 800991e:	60a0      	str	r0, [r4, #8]
 8009920:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009924:	f7ff fb26 	bl	8008f74 <memset>
 8009928:	4620      	mov	r0, r4
 800992a:	bd70      	pop	{r4, r5, r6, pc}

0800992c <__sfp_lock_acquire>:
 800992c:	4801      	ldr	r0, [pc, #4]	; (8009934 <__sfp_lock_acquire+0x8>)
 800992e:	f000 b8b3 	b.w	8009a98 <__retarget_lock_acquire_recursive>
 8009932:	bf00      	nop
 8009934:	20007e8d 	.word	0x20007e8d

08009938 <__sfp_lock_release>:
 8009938:	4801      	ldr	r0, [pc, #4]	; (8009940 <__sfp_lock_release+0x8>)
 800993a:	f000 b8ae 	b.w	8009a9a <__retarget_lock_release_recursive>
 800993e:	bf00      	nop
 8009940:	20007e8d 	.word	0x20007e8d

08009944 <__sinit_lock_acquire>:
 8009944:	4801      	ldr	r0, [pc, #4]	; (800994c <__sinit_lock_acquire+0x8>)
 8009946:	f000 b8a7 	b.w	8009a98 <__retarget_lock_acquire_recursive>
 800994a:	bf00      	nop
 800994c:	20007e8e 	.word	0x20007e8e

08009950 <__sinit_lock_release>:
 8009950:	4801      	ldr	r0, [pc, #4]	; (8009958 <__sinit_lock_release+0x8>)
 8009952:	f000 b8a2 	b.w	8009a9a <__retarget_lock_release_recursive>
 8009956:	bf00      	nop
 8009958:	20007e8e 	.word	0x20007e8e

0800995c <__sinit>:
 800995c:	b510      	push	{r4, lr}
 800995e:	4604      	mov	r4, r0
 8009960:	f7ff fff0 	bl	8009944 <__sinit_lock_acquire>
 8009964:	69a3      	ldr	r3, [r4, #24]
 8009966:	b11b      	cbz	r3, 8009970 <__sinit+0x14>
 8009968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800996c:	f7ff bff0 	b.w	8009950 <__sinit_lock_release>
 8009970:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009974:	6523      	str	r3, [r4, #80]	; 0x50
 8009976:	4b13      	ldr	r3, [pc, #76]	; (80099c4 <__sinit+0x68>)
 8009978:	4a13      	ldr	r2, [pc, #76]	; (80099c8 <__sinit+0x6c>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	62a2      	str	r2, [r4, #40]	; 0x28
 800997e:	42a3      	cmp	r3, r4
 8009980:	bf08      	it	eq
 8009982:	2301      	moveq	r3, #1
 8009984:	4620      	mov	r0, r4
 8009986:	bf08      	it	eq
 8009988:	61a3      	streq	r3, [r4, #24]
 800998a:	f000 f81f 	bl	80099cc <__sfp>
 800998e:	6060      	str	r0, [r4, #4]
 8009990:	4620      	mov	r0, r4
 8009992:	f000 f81b 	bl	80099cc <__sfp>
 8009996:	60a0      	str	r0, [r4, #8]
 8009998:	4620      	mov	r0, r4
 800999a:	f000 f817 	bl	80099cc <__sfp>
 800999e:	2200      	movs	r2, #0
 80099a0:	2104      	movs	r1, #4
 80099a2:	60e0      	str	r0, [r4, #12]
 80099a4:	6860      	ldr	r0, [r4, #4]
 80099a6:	f7ff ff81 	bl	80098ac <std>
 80099aa:	2201      	movs	r2, #1
 80099ac:	2109      	movs	r1, #9
 80099ae:	68a0      	ldr	r0, [r4, #8]
 80099b0:	f7ff ff7c 	bl	80098ac <std>
 80099b4:	2202      	movs	r2, #2
 80099b6:	2112      	movs	r1, #18
 80099b8:	68e0      	ldr	r0, [r4, #12]
 80099ba:	f7ff ff77 	bl	80098ac <std>
 80099be:	2301      	movs	r3, #1
 80099c0:	61a3      	str	r3, [r4, #24]
 80099c2:	e7d1      	b.n	8009968 <__sinit+0xc>
 80099c4:	0800a9d8 	.word	0x0800a9d8
 80099c8:	080098f5 	.word	0x080098f5

080099cc <__sfp>:
 80099cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ce:	4607      	mov	r7, r0
 80099d0:	f7ff ffac 	bl	800992c <__sfp_lock_acquire>
 80099d4:	4b1e      	ldr	r3, [pc, #120]	; (8009a50 <__sfp+0x84>)
 80099d6:	681e      	ldr	r6, [r3, #0]
 80099d8:	69b3      	ldr	r3, [r6, #24]
 80099da:	b913      	cbnz	r3, 80099e2 <__sfp+0x16>
 80099dc:	4630      	mov	r0, r6
 80099de:	f7ff ffbd 	bl	800995c <__sinit>
 80099e2:	3648      	adds	r6, #72	; 0x48
 80099e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	d503      	bpl.n	80099f4 <__sfp+0x28>
 80099ec:	6833      	ldr	r3, [r6, #0]
 80099ee:	b30b      	cbz	r3, 8009a34 <__sfp+0x68>
 80099f0:	6836      	ldr	r6, [r6, #0]
 80099f2:	e7f7      	b.n	80099e4 <__sfp+0x18>
 80099f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80099f8:	b9d5      	cbnz	r5, 8009a30 <__sfp+0x64>
 80099fa:	4b16      	ldr	r3, [pc, #88]	; (8009a54 <__sfp+0x88>)
 80099fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009a00:	60e3      	str	r3, [r4, #12]
 8009a02:	6665      	str	r5, [r4, #100]	; 0x64
 8009a04:	f000 f847 	bl	8009a96 <__retarget_lock_init_recursive>
 8009a08:	f7ff ff96 	bl	8009938 <__sfp_lock_release>
 8009a0c:	2208      	movs	r2, #8
 8009a0e:	4629      	mov	r1, r5
 8009a10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009a14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009a18:	6025      	str	r5, [r4, #0]
 8009a1a:	61a5      	str	r5, [r4, #24]
 8009a1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009a20:	f7ff faa8 	bl	8008f74 <memset>
 8009a24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009a28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009a2c:	4620      	mov	r0, r4
 8009a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a30:	3468      	adds	r4, #104	; 0x68
 8009a32:	e7d9      	b.n	80099e8 <__sfp+0x1c>
 8009a34:	2104      	movs	r1, #4
 8009a36:	4638      	mov	r0, r7
 8009a38:	f7ff ff62 	bl	8009900 <__sfmoreglue>
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	6030      	str	r0, [r6, #0]
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d1d5      	bne.n	80099f0 <__sfp+0x24>
 8009a44:	f7ff ff78 	bl	8009938 <__sfp_lock_release>
 8009a48:	230c      	movs	r3, #12
 8009a4a:	603b      	str	r3, [r7, #0]
 8009a4c:	e7ee      	b.n	8009a2c <__sfp+0x60>
 8009a4e:	bf00      	nop
 8009a50:	0800a9d8 	.word	0x0800a9d8
 8009a54:	ffff0001 	.word	0xffff0001

08009a58 <_fwalk_reent>:
 8009a58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a5c:	4606      	mov	r6, r0
 8009a5e:	4688      	mov	r8, r1
 8009a60:	2700      	movs	r7, #0
 8009a62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009a66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a6a:	f1b9 0901 	subs.w	r9, r9, #1
 8009a6e:	d505      	bpl.n	8009a7c <_fwalk_reent+0x24>
 8009a70:	6824      	ldr	r4, [r4, #0]
 8009a72:	2c00      	cmp	r4, #0
 8009a74:	d1f7      	bne.n	8009a66 <_fwalk_reent+0xe>
 8009a76:	4638      	mov	r0, r7
 8009a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a7c:	89ab      	ldrh	r3, [r5, #12]
 8009a7e:	2b01      	cmp	r3, #1
 8009a80:	d907      	bls.n	8009a92 <_fwalk_reent+0x3a>
 8009a82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a86:	3301      	adds	r3, #1
 8009a88:	d003      	beq.n	8009a92 <_fwalk_reent+0x3a>
 8009a8a:	4629      	mov	r1, r5
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	47c0      	blx	r8
 8009a90:	4307      	orrs	r7, r0
 8009a92:	3568      	adds	r5, #104	; 0x68
 8009a94:	e7e9      	b.n	8009a6a <_fwalk_reent+0x12>

08009a96 <__retarget_lock_init_recursive>:
 8009a96:	4770      	bx	lr

08009a98 <__retarget_lock_acquire_recursive>:
 8009a98:	4770      	bx	lr

08009a9a <__retarget_lock_release_recursive>:
 8009a9a:	4770      	bx	lr

08009a9c <__swhatbuf_r>:
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	460e      	mov	r6, r1
 8009aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa4:	4614      	mov	r4, r2
 8009aa6:	2900      	cmp	r1, #0
 8009aa8:	461d      	mov	r5, r3
 8009aaa:	b096      	sub	sp, #88	; 0x58
 8009aac:	da08      	bge.n	8009ac0 <__swhatbuf_r+0x24>
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009ab4:	602a      	str	r2, [r5, #0]
 8009ab6:	061a      	lsls	r2, r3, #24
 8009ab8:	d410      	bmi.n	8009adc <__swhatbuf_r+0x40>
 8009aba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009abe:	e00e      	b.n	8009ade <__swhatbuf_r+0x42>
 8009ac0:	466a      	mov	r2, sp
 8009ac2:	f000 fb99 	bl	800a1f8 <_fstat_r>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	dbf1      	blt.n	8009aae <__swhatbuf_r+0x12>
 8009aca:	9a01      	ldr	r2, [sp, #4]
 8009acc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ad0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ad4:	425a      	negs	r2, r3
 8009ad6:	415a      	adcs	r2, r3
 8009ad8:	602a      	str	r2, [r5, #0]
 8009ada:	e7ee      	b.n	8009aba <__swhatbuf_r+0x1e>
 8009adc:	2340      	movs	r3, #64	; 0x40
 8009ade:	2000      	movs	r0, #0
 8009ae0:	6023      	str	r3, [r4, #0]
 8009ae2:	b016      	add	sp, #88	; 0x58
 8009ae4:	bd70      	pop	{r4, r5, r6, pc}
	...

08009ae8 <__smakebuf_r>:
 8009ae8:	898b      	ldrh	r3, [r1, #12]
 8009aea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009aec:	079d      	lsls	r5, r3, #30
 8009aee:	4606      	mov	r6, r0
 8009af0:	460c      	mov	r4, r1
 8009af2:	d507      	bpl.n	8009b04 <__smakebuf_r+0x1c>
 8009af4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009af8:	6023      	str	r3, [r4, #0]
 8009afa:	6123      	str	r3, [r4, #16]
 8009afc:	2301      	movs	r3, #1
 8009afe:	6163      	str	r3, [r4, #20]
 8009b00:	b002      	add	sp, #8
 8009b02:	bd70      	pop	{r4, r5, r6, pc}
 8009b04:	466a      	mov	r2, sp
 8009b06:	ab01      	add	r3, sp, #4
 8009b08:	f7ff ffc8 	bl	8009a9c <__swhatbuf_r>
 8009b0c:	9900      	ldr	r1, [sp, #0]
 8009b0e:	4605      	mov	r5, r0
 8009b10:	4630      	mov	r0, r6
 8009b12:	f000 f8b9 	bl	8009c88 <_malloc_r>
 8009b16:	b948      	cbnz	r0, 8009b2c <__smakebuf_r+0x44>
 8009b18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b1c:	059a      	lsls	r2, r3, #22
 8009b1e:	d4ef      	bmi.n	8009b00 <__smakebuf_r+0x18>
 8009b20:	f023 0303 	bic.w	r3, r3, #3
 8009b24:	f043 0302 	orr.w	r3, r3, #2
 8009b28:	81a3      	strh	r3, [r4, #12]
 8009b2a:	e7e3      	b.n	8009af4 <__smakebuf_r+0xc>
 8009b2c:	4b0d      	ldr	r3, [pc, #52]	; (8009b64 <__smakebuf_r+0x7c>)
 8009b2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	6020      	str	r0, [r4, #0]
 8009b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b38:	81a3      	strh	r3, [r4, #12]
 8009b3a:	9b00      	ldr	r3, [sp, #0]
 8009b3c:	6120      	str	r0, [r4, #16]
 8009b3e:	6163      	str	r3, [r4, #20]
 8009b40:	9b01      	ldr	r3, [sp, #4]
 8009b42:	b15b      	cbz	r3, 8009b5c <__smakebuf_r+0x74>
 8009b44:	4630      	mov	r0, r6
 8009b46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b4a:	f000 fb67 	bl	800a21c <_isatty_r>
 8009b4e:	b128      	cbz	r0, 8009b5c <__smakebuf_r+0x74>
 8009b50:	89a3      	ldrh	r3, [r4, #12]
 8009b52:	f023 0303 	bic.w	r3, r3, #3
 8009b56:	f043 0301 	orr.w	r3, r3, #1
 8009b5a:	81a3      	strh	r3, [r4, #12]
 8009b5c:	89a0      	ldrh	r0, [r4, #12]
 8009b5e:	4305      	orrs	r5, r0
 8009b60:	81a5      	strh	r5, [r4, #12]
 8009b62:	e7cd      	b.n	8009b00 <__smakebuf_r+0x18>
 8009b64:	080098f5 	.word	0x080098f5

08009b68 <memchr>:
 8009b68:	4603      	mov	r3, r0
 8009b6a:	b510      	push	{r4, lr}
 8009b6c:	b2c9      	uxtb	r1, r1
 8009b6e:	4402      	add	r2, r0
 8009b70:	4293      	cmp	r3, r2
 8009b72:	4618      	mov	r0, r3
 8009b74:	d101      	bne.n	8009b7a <memchr+0x12>
 8009b76:	2000      	movs	r0, #0
 8009b78:	e003      	b.n	8009b82 <memchr+0x1a>
 8009b7a:	7804      	ldrb	r4, [r0, #0]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	428c      	cmp	r4, r1
 8009b80:	d1f6      	bne.n	8009b70 <memchr+0x8>
 8009b82:	bd10      	pop	{r4, pc}

08009b84 <memmove>:
 8009b84:	4288      	cmp	r0, r1
 8009b86:	b510      	push	{r4, lr}
 8009b88:	eb01 0402 	add.w	r4, r1, r2
 8009b8c:	d902      	bls.n	8009b94 <memmove+0x10>
 8009b8e:	4284      	cmp	r4, r0
 8009b90:	4623      	mov	r3, r4
 8009b92:	d807      	bhi.n	8009ba4 <memmove+0x20>
 8009b94:	1e43      	subs	r3, r0, #1
 8009b96:	42a1      	cmp	r1, r4
 8009b98:	d008      	beq.n	8009bac <memmove+0x28>
 8009b9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ba2:	e7f8      	b.n	8009b96 <memmove+0x12>
 8009ba4:	4601      	mov	r1, r0
 8009ba6:	4402      	add	r2, r0
 8009ba8:	428a      	cmp	r2, r1
 8009baa:	d100      	bne.n	8009bae <memmove+0x2a>
 8009bac:	bd10      	pop	{r4, pc}
 8009bae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bb6:	e7f7      	b.n	8009ba8 <memmove+0x24>

08009bb8 <_free_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	4605      	mov	r5, r0
 8009bbc:	2900      	cmp	r1, #0
 8009bbe:	d040      	beq.n	8009c42 <_free_r+0x8a>
 8009bc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bc4:	1f0c      	subs	r4, r1, #4
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	bfb8      	it	lt
 8009bca:	18e4      	addlt	r4, r4, r3
 8009bcc:	f000 fb48 	bl	800a260 <__malloc_lock>
 8009bd0:	4a1c      	ldr	r2, [pc, #112]	; (8009c44 <_free_r+0x8c>)
 8009bd2:	6813      	ldr	r3, [r2, #0]
 8009bd4:	b933      	cbnz	r3, 8009be4 <_free_r+0x2c>
 8009bd6:	6063      	str	r3, [r4, #4]
 8009bd8:	6014      	str	r4, [r2, #0]
 8009bda:	4628      	mov	r0, r5
 8009bdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009be0:	f000 bb44 	b.w	800a26c <__malloc_unlock>
 8009be4:	42a3      	cmp	r3, r4
 8009be6:	d908      	bls.n	8009bfa <_free_r+0x42>
 8009be8:	6820      	ldr	r0, [r4, #0]
 8009bea:	1821      	adds	r1, r4, r0
 8009bec:	428b      	cmp	r3, r1
 8009bee:	bf01      	itttt	eq
 8009bf0:	6819      	ldreq	r1, [r3, #0]
 8009bf2:	685b      	ldreq	r3, [r3, #4]
 8009bf4:	1809      	addeq	r1, r1, r0
 8009bf6:	6021      	streq	r1, [r4, #0]
 8009bf8:	e7ed      	b.n	8009bd6 <_free_r+0x1e>
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	b10b      	cbz	r3, 8009c04 <_free_r+0x4c>
 8009c00:	42a3      	cmp	r3, r4
 8009c02:	d9fa      	bls.n	8009bfa <_free_r+0x42>
 8009c04:	6811      	ldr	r1, [r2, #0]
 8009c06:	1850      	adds	r0, r2, r1
 8009c08:	42a0      	cmp	r0, r4
 8009c0a:	d10b      	bne.n	8009c24 <_free_r+0x6c>
 8009c0c:	6820      	ldr	r0, [r4, #0]
 8009c0e:	4401      	add	r1, r0
 8009c10:	1850      	adds	r0, r2, r1
 8009c12:	4283      	cmp	r3, r0
 8009c14:	6011      	str	r1, [r2, #0]
 8009c16:	d1e0      	bne.n	8009bda <_free_r+0x22>
 8009c18:	6818      	ldr	r0, [r3, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	4401      	add	r1, r0
 8009c1e:	6011      	str	r1, [r2, #0]
 8009c20:	6053      	str	r3, [r2, #4]
 8009c22:	e7da      	b.n	8009bda <_free_r+0x22>
 8009c24:	d902      	bls.n	8009c2c <_free_r+0x74>
 8009c26:	230c      	movs	r3, #12
 8009c28:	602b      	str	r3, [r5, #0]
 8009c2a:	e7d6      	b.n	8009bda <_free_r+0x22>
 8009c2c:	6820      	ldr	r0, [r4, #0]
 8009c2e:	1821      	adds	r1, r4, r0
 8009c30:	428b      	cmp	r3, r1
 8009c32:	bf01      	itttt	eq
 8009c34:	6819      	ldreq	r1, [r3, #0]
 8009c36:	685b      	ldreq	r3, [r3, #4]
 8009c38:	1809      	addeq	r1, r1, r0
 8009c3a:	6021      	streq	r1, [r4, #0]
 8009c3c:	6063      	str	r3, [r4, #4]
 8009c3e:	6054      	str	r4, [r2, #4]
 8009c40:	e7cb      	b.n	8009bda <_free_r+0x22>
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	20007e90 	.word	0x20007e90

08009c48 <sbrk_aligned>:
 8009c48:	b570      	push	{r4, r5, r6, lr}
 8009c4a:	4e0e      	ldr	r6, [pc, #56]	; (8009c84 <sbrk_aligned+0x3c>)
 8009c4c:	460c      	mov	r4, r1
 8009c4e:	6831      	ldr	r1, [r6, #0]
 8009c50:	4605      	mov	r5, r0
 8009c52:	b911      	cbnz	r1, 8009c5a <sbrk_aligned+0x12>
 8009c54:	f000 fa16 	bl	800a084 <_sbrk_r>
 8009c58:	6030      	str	r0, [r6, #0]
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	4628      	mov	r0, r5
 8009c5e:	f000 fa11 	bl	800a084 <_sbrk_r>
 8009c62:	1c43      	adds	r3, r0, #1
 8009c64:	d00a      	beq.n	8009c7c <sbrk_aligned+0x34>
 8009c66:	1cc4      	adds	r4, r0, #3
 8009c68:	f024 0403 	bic.w	r4, r4, #3
 8009c6c:	42a0      	cmp	r0, r4
 8009c6e:	d007      	beq.n	8009c80 <sbrk_aligned+0x38>
 8009c70:	1a21      	subs	r1, r4, r0
 8009c72:	4628      	mov	r0, r5
 8009c74:	f000 fa06 	bl	800a084 <_sbrk_r>
 8009c78:	3001      	adds	r0, #1
 8009c7a:	d101      	bne.n	8009c80 <sbrk_aligned+0x38>
 8009c7c:	f04f 34ff 	mov.w	r4, #4294967295
 8009c80:	4620      	mov	r0, r4
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	20007e94 	.word	0x20007e94

08009c88 <_malloc_r>:
 8009c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c8c:	1ccd      	adds	r5, r1, #3
 8009c8e:	f025 0503 	bic.w	r5, r5, #3
 8009c92:	3508      	adds	r5, #8
 8009c94:	2d0c      	cmp	r5, #12
 8009c96:	bf38      	it	cc
 8009c98:	250c      	movcc	r5, #12
 8009c9a:	2d00      	cmp	r5, #0
 8009c9c:	4607      	mov	r7, r0
 8009c9e:	db01      	blt.n	8009ca4 <_malloc_r+0x1c>
 8009ca0:	42a9      	cmp	r1, r5
 8009ca2:	d905      	bls.n	8009cb0 <_malloc_r+0x28>
 8009ca4:	230c      	movs	r3, #12
 8009ca6:	2600      	movs	r6, #0
 8009ca8:	603b      	str	r3, [r7, #0]
 8009caa:	4630      	mov	r0, r6
 8009cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cb0:	4e2e      	ldr	r6, [pc, #184]	; (8009d6c <_malloc_r+0xe4>)
 8009cb2:	f000 fad5 	bl	800a260 <__malloc_lock>
 8009cb6:	6833      	ldr	r3, [r6, #0]
 8009cb8:	461c      	mov	r4, r3
 8009cba:	bb34      	cbnz	r4, 8009d0a <_malloc_r+0x82>
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	f7ff ffc2 	bl	8009c48 <sbrk_aligned>
 8009cc4:	1c43      	adds	r3, r0, #1
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	d14d      	bne.n	8009d66 <_malloc_r+0xde>
 8009cca:	6834      	ldr	r4, [r6, #0]
 8009ccc:	4626      	mov	r6, r4
 8009cce:	2e00      	cmp	r6, #0
 8009cd0:	d140      	bne.n	8009d54 <_malloc_r+0xcc>
 8009cd2:	6823      	ldr	r3, [r4, #0]
 8009cd4:	4631      	mov	r1, r6
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	eb04 0803 	add.w	r8, r4, r3
 8009cdc:	f000 f9d2 	bl	800a084 <_sbrk_r>
 8009ce0:	4580      	cmp	r8, r0
 8009ce2:	d13a      	bne.n	8009d5a <_malloc_r+0xd2>
 8009ce4:	6821      	ldr	r1, [r4, #0]
 8009ce6:	3503      	adds	r5, #3
 8009ce8:	1a6d      	subs	r5, r5, r1
 8009cea:	f025 0503 	bic.w	r5, r5, #3
 8009cee:	3508      	adds	r5, #8
 8009cf0:	2d0c      	cmp	r5, #12
 8009cf2:	bf38      	it	cc
 8009cf4:	250c      	movcc	r5, #12
 8009cf6:	4638      	mov	r0, r7
 8009cf8:	4629      	mov	r1, r5
 8009cfa:	f7ff ffa5 	bl	8009c48 <sbrk_aligned>
 8009cfe:	3001      	adds	r0, #1
 8009d00:	d02b      	beq.n	8009d5a <_malloc_r+0xd2>
 8009d02:	6823      	ldr	r3, [r4, #0]
 8009d04:	442b      	add	r3, r5
 8009d06:	6023      	str	r3, [r4, #0]
 8009d08:	e00e      	b.n	8009d28 <_malloc_r+0xa0>
 8009d0a:	6822      	ldr	r2, [r4, #0]
 8009d0c:	1b52      	subs	r2, r2, r5
 8009d0e:	d41e      	bmi.n	8009d4e <_malloc_r+0xc6>
 8009d10:	2a0b      	cmp	r2, #11
 8009d12:	d916      	bls.n	8009d42 <_malloc_r+0xba>
 8009d14:	1961      	adds	r1, r4, r5
 8009d16:	42a3      	cmp	r3, r4
 8009d18:	6025      	str	r5, [r4, #0]
 8009d1a:	bf18      	it	ne
 8009d1c:	6059      	strne	r1, [r3, #4]
 8009d1e:	6863      	ldr	r3, [r4, #4]
 8009d20:	bf08      	it	eq
 8009d22:	6031      	streq	r1, [r6, #0]
 8009d24:	5162      	str	r2, [r4, r5]
 8009d26:	604b      	str	r3, [r1, #4]
 8009d28:	4638      	mov	r0, r7
 8009d2a:	f104 060b 	add.w	r6, r4, #11
 8009d2e:	f000 fa9d 	bl	800a26c <__malloc_unlock>
 8009d32:	f026 0607 	bic.w	r6, r6, #7
 8009d36:	1d23      	adds	r3, r4, #4
 8009d38:	1af2      	subs	r2, r6, r3
 8009d3a:	d0b6      	beq.n	8009caa <_malloc_r+0x22>
 8009d3c:	1b9b      	subs	r3, r3, r6
 8009d3e:	50a3      	str	r3, [r4, r2]
 8009d40:	e7b3      	b.n	8009caa <_malloc_r+0x22>
 8009d42:	6862      	ldr	r2, [r4, #4]
 8009d44:	42a3      	cmp	r3, r4
 8009d46:	bf0c      	ite	eq
 8009d48:	6032      	streq	r2, [r6, #0]
 8009d4a:	605a      	strne	r2, [r3, #4]
 8009d4c:	e7ec      	b.n	8009d28 <_malloc_r+0xa0>
 8009d4e:	4623      	mov	r3, r4
 8009d50:	6864      	ldr	r4, [r4, #4]
 8009d52:	e7b2      	b.n	8009cba <_malloc_r+0x32>
 8009d54:	4634      	mov	r4, r6
 8009d56:	6876      	ldr	r6, [r6, #4]
 8009d58:	e7b9      	b.n	8009cce <_malloc_r+0x46>
 8009d5a:	230c      	movs	r3, #12
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	603b      	str	r3, [r7, #0]
 8009d60:	f000 fa84 	bl	800a26c <__malloc_unlock>
 8009d64:	e7a1      	b.n	8009caa <_malloc_r+0x22>
 8009d66:	6025      	str	r5, [r4, #0]
 8009d68:	e7de      	b.n	8009d28 <_malloc_r+0xa0>
 8009d6a:	bf00      	nop
 8009d6c:	20007e90 	.word	0x20007e90

08009d70 <_realloc_r>:
 8009d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d74:	4680      	mov	r8, r0
 8009d76:	4614      	mov	r4, r2
 8009d78:	460e      	mov	r6, r1
 8009d7a:	b921      	cbnz	r1, 8009d86 <_realloc_r+0x16>
 8009d7c:	4611      	mov	r1, r2
 8009d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d82:	f7ff bf81 	b.w	8009c88 <_malloc_r>
 8009d86:	b92a      	cbnz	r2, 8009d94 <_realloc_r+0x24>
 8009d88:	f7ff ff16 	bl	8009bb8 <_free_r>
 8009d8c:	4625      	mov	r5, r4
 8009d8e:	4628      	mov	r0, r5
 8009d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d94:	f000 fa70 	bl	800a278 <_malloc_usable_size_r>
 8009d98:	4284      	cmp	r4, r0
 8009d9a:	4607      	mov	r7, r0
 8009d9c:	d802      	bhi.n	8009da4 <_realloc_r+0x34>
 8009d9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009da2:	d812      	bhi.n	8009dca <_realloc_r+0x5a>
 8009da4:	4621      	mov	r1, r4
 8009da6:	4640      	mov	r0, r8
 8009da8:	f7ff ff6e 	bl	8009c88 <_malloc_r>
 8009dac:	4605      	mov	r5, r0
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d0ed      	beq.n	8009d8e <_realloc_r+0x1e>
 8009db2:	42bc      	cmp	r4, r7
 8009db4:	4622      	mov	r2, r4
 8009db6:	4631      	mov	r1, r6
 8009db8:	bf28      	it	cs
 8009dba:	463a      	movcs	r2, r7
 8009dbc:	f7ff f8cc 	bl	8008f58 <memcpy>
 8009dc0:	4631      	mov	r1, r6
 8009dc2:	4640      	mov	r0, r8
 8009dc4:	f7ff fef8 	bl	8009bb8 <_free_r>
 8009dc8:	e7e1      	b.n	8009d8e <_realloc_r+0x1e>
 8009dca:	4635      	mov	r5, r6
 8009dcc:	e7df      	b.n	8009d8e <_realloc_r+0x1e>

08009dce <__ssputs_r>:
 8009dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd2:	688e      	ldr	r6, [r1, #8]
 8009dd4:	4682      	mov	sl, r0
 8009dd6:	429e      	cmp	r6, r3
 8009dd8:	460c      	mov	r4, r1
 8009dda:	4690      	mov	r8, r2
 8009ddc:	461f      	mov	r7, r3
 8009dde:	d838      	bhi.n	8009e52 <__ssputs_r+0x84>
 8009de0:	898a      	ldrh	r2, [r1, #12]
 8009de2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009de6:	d032      	beq.n	8009e4e <__ssputs_r+0x80>
 8009de8:	6825      	ldr	r5, [r4, #0]
 8009dea:	6909      	ldr	r1, [r1, #16]
 8009dec:	3301      	adds	r3, #1
 8009dee:	eba5 0901 	sub.w	r9, r5, r1
 8009df2:	6965      	ldr	r5, [r4, #20]
 8009df4:	444b      	add	r3, r9
 8009df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009dfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009dfe:	106d      	asrs	r5, r5, #1
 8009e00:	429d      	cmp	r5, r3
 8009e02:	bf38      	it	cc
 8009e04:	461d      	movcc	r5, r3
 8009e06:	0553      	lsls	r3, r2, #21
 8009e08:	d531      	bpl.n	8009e6e <__ssputs_r+0xa0>
 8009e0a:	4629      	mov	r1, r5
 8009e0c:	f7ff ff3c 	bl	8009c88 <_malloc_r>
 8009e10:	4606      	mov	r6, r0
 8009e12:	b950      	cbnz	r0, 8009e2a <__ssputs_r+0x5c>
 8009e14:	230c      	movs	r3, #12
 8009e16:	f04f 30ff 	mov.w	r0, #4294967295
 8009e1a:	f8ca 3000 	str.w	r3, [sl]
 8009e1e:	89a3      	ldrh	r3, [r4, #12]
 8009e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e24:	81a3      	strh	r3, [r4, #12]
 8009e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e2a:	464a      	mov	r2, r9
 8009e2c:	6921      	ldr	r1, [r4, #16]
 8009e2e:	f7ff f893 	bl	8008f58 <memcpy>
 8009e32:	89a3      	ldrh	r3, [r4, #12]
 8009e34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e3c:	81a3      	strh	r3, [r4, #12]
 8009e3e:	6126      	str	r6, [r4, #16]
 8009e40:	444e      	add	r6, r9
 8009e42:	6026      	str	r6, [r4, #0]
 8009e44:	463e      	mov	r6, r7
 8009e46:	6165      	str	r5, [r4, #20]
 8009e48:	eba5 0509 	sub.w	r5, r5, r9
 8009e4c:	60a5      	str	r5, [r4, #8]
 8009e4e:	42be      	cmp	r6, r7
 8009e50:	d900      	bls.n	8009e54 <__ssputs_r+0x86>
 8009e52:	463e      	mov	r6, r7
 8009e54:	4632      	mov	r2, r6
 8009e56:	4641      	mov	r1, r8
 8009e58:	6820      	ldr	r0, [r4, #0]
 8009e5a:	f7ff fe93 	bl	8009b84 <memmove>
 8009e5e:	68a3      	ldr	r3, [r4, #8]
 8009e60:	2000      	movs	r0, #0
 8009e62:	1b9b      	subs	r3, r3, r6
 8009e64:	60a3      	str	r3, [r4, #8]
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	4433      	add	r3, r6
 8009e6a:	6023      	str	r3, [r4, #0]
 8009e6c:	e7db      	b.n	8009e26 <__ssputs_r+0x58>
 8009e6e:	462a      	mov	r2, r5
 8009e70:	f7ff ff7e 	bl	8009d70 <_realloc_r>
 8009e74:	4606      	mov	r6, r0
 8009e76:	2800      	cmp	r0, #0
 8009e78:	d1e1      	bne.n	8009e3e <__ssputs_r+0x70>
 8009e7a:	4650      	mov	r0, sl
 8009e7c:	6921      	ldr	r1, [r4, #16]
 8009e7e:	f7ff fe9b 	bl	8009bb8 <_free_r>
 8009e82:	e7c7      	b.n	8009e14 <__ssputs_r+0x46>

08009e84 <_svfiprintf_r>:
 8009e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e88:	4698      	mov	r8, r3
 8009e8a:	898b      	ldrh	r3, [r1, #12]
 8009e8c:	4607      	mov	r7, r0
 8009e8e:	061b      	lsls	r3, r3, #24
 8009e90:	460d      	mov	r5, r1
 8009e92:	4614      	mov	r4, r2
 8009e94:	b09d      	sub	sp, #116	; 0x74
 8009e96:	d50e      	bpl.n	8009eb6 <_svfiprintf_r+0x32>
 8009e98:	690b      	ldr	r3, [r1, #16]
 8009e9a:	b963      	cbnz	r3, 8009eb6 <_svfiprintf_r+0x32>
 8009e9c:	2140      	movs	r1, #64	; 0x40
 8009e9e:	f7ff fef3 	bl	8009c88 <_malloc_r>
 8009ea2:	6028      	str	r0, [r5, #0]
 8009ea4:	6128      	str	r0, [r5, #16]
 8009ea6:	b920      	cbnz	r0, 8009eb2 <_svfiprintf_r+0x2e>
 8009ea8:	230c      	movs	r3, #12
 8009eaa:	603b      	str	r3, [r7, #0]
 8009eac:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb0:	e0d1      	b.n	800a056 <_svfiprintf_r+0x1d2>
 8009eb2:	2340      	movs	r3, #64	; 0x40
 8009eb4:	616b      	str	r3, [r5, #20]
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	9309      	str	r3, [sp, #36]	; 0x24
 8009eba:	2320      	movs	r3, #32
 8009ebc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ec0:	2330      	movs	r3, #48	; 0x30
 8009ec2:	f04f 0901 	mov.w	r9, #1
 8009ec6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a070 <_svfiprintf_r+0x1ec>
 8009ece:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ed2:	4623      	mov	r3, r4
 8009ed4:	469a      	mov	sl, r3
 8009ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eda:	b10a      	cbz	r2, 8009ee0 <_svfiprintf_r+0x5c>
 8009edc:	2a25      	cmp	r2, #37	; 0x25
 8009ede:	d1f9      	bne.n	8009ed4 <_svfiprintf_r+0x50>
 8009ee0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ee4:	d00b      	beq.n	8009efe <_svfiprintf_r+0x7a>
 8009ee6:	465b      	mov	r3, fp
 8009ee8:	4622      	mov	r2, r4
 8009eea:	4629      	mov	r1, r5
 8009eec:	4638      	mov	r0, r7
 8009eee:	f7ff ff6e 	bl	8009dce <__ssputs_r>
 8009ef2:	3001      	adds	r0, #1
 8009ef4:	f000 80aa 	beq.w	800a04c <_svfiprintf_r+0x1c8>
 8009ef8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009efa:	445a      	add	r2, fp
 8009efc:	9209      	str	r2, [sp, #36]	; 0x24
 8009efe:	f89a 3000 	ldrb.w	r3, [sl]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f000 80a2 	beq.w	800a04c <_svfiprintf_r+0x1c8>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f04f 32ff 	mov.w	r2, #4294967295
 8009f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f12:	f10a 0a01 	add.w	sl, sl, #1
 8009f16:	9304      	str	r3, [sp, #16]
 8009f18:	9307      	str	r3, [sp, #28]
 8009f1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f1e:	931a      	str	r3, [sp, #104]	; 0x68
 8009f20:	4654      	mov	r4, sl
 8009f22:	2205      	movs	r2, #5
 8009f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f28:	4851      	ldr	r0, [pc, #324]	; (800a070 <_svfiprintf_r+0x1ec>)
 8009f2a:	f7ff fe1d 	bl	8009b68 <memchr>
 8009f2e:	9a04      	ldr	r2, [sp, #16]
 8009f30:	b9d8      	cbnz	r0, 8009f6a <_svfiprintf_r+0xe6>
 8009f32:	06d0      	lsls	r0, r2, #27
 8009f34:	bf44      	itt	mi
 8009f36:	2320      	movmi	r3, #32
 8009f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f3c:	0711      	lsls	r1, r2, #28
 8009f3e:	bf44      	itt	mi
 8009f40:	232b      	movmi	r3, #43	; 0x2b
 8009f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f46:	f89a 3000 	ldrb.w	r3, [sl]
 8009f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8009f4c:	d015      	beq.n	8009f7a <_svfiprintf_r+0xf6>
 8009f4e:	4654      	mov	r4, sl
 8009f50:	2000      	movs	r0, #0
 8009f52:	f04f 0c0a 	mov.w	ip, #10
 8009f56:	9a07      	ldr	r2, [sp, #28]
 8009f58:	4621      	mov	r1, r4
 8009f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f5e:	3b30      	subs	r3, #48	; 0x30
 8009f60:	2b09      	cmp	r3, #9
 8009f62:	d94e      	bls.n	800a002 <_svfiprintf_r+0x17e>
 8009f64:	b1b0      	cbz	r0, 8009f94 <_svfiprintf_r+0x110>
 8009f66:	9207      	str	r2, [sp, #28]
 8009f68:	e014      	b.n	8009f94 <_svfiprintf_r+0x110>
 8009f6a:	eba0 0308 	sub.w	r3, r0, r8
 8009f6e:	fa09 f303 	lsl.w	r3, r9, r3
 8009f72:	4313      	orrs	r3, r2
 8009f74:	46a2      	mov	sl, r4
 8009f76:	9304      	str	r3, [sp, #16]
 8009f78:	e7d2      	b.n	8009f20 <_svfiprintf_r+0x9c>
 8009f7a:	9b03      	ldr	r3, [sp, #12]
 8009f7c:	1d19      	adds	r1, r3, #4
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	9103      	str	r1, [sp, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	bfbb      	ittet	lt
 8009f86:	425b      	neglt	r3, r3
 8009f88:	f042 0202 	orrlt.w	r2, r2, #2
 8009f8c:	9307      	strge	r3, [sp, #28]
 8009f8e:	9307      	strlt	r3, [sp, #28]
 8009f90:	bfb8      	it	lt
 8009f92:	9204      	strlt	r2, [sp, #16]
 8009f94:	7823      	ldrb	r3, [r4, #0]
 8009f96:	2b2e      	cmp	r3, #46	; 0x2e
 8009f98:	d10c      	bne.n	8009fb4 <_svfiprintf_r+0x130>
 8009f9a:	7863      	ldrb	r3, [r4, #1]
 8009f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8009f9e:	d135      	bne.n	800a00c <_svfiprintf_r+0x188>
 8009fa0:	9b03      	ldr	r3, [sp, #12]
 8009fa2:	3402      	adds	r4, #2
 8009fa4:	1d1a      	adds	r2, r3, #4
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	9203      	str	r2, [sp, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	bfb8      	it	lt
 8009fae:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fb2:	9305      	str	r3, [sp, #20]
 8009fb4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a074 <_svfiprintf_r+0x1f0>
 8009fb8:	2203      	movs	r2, #3
 8009fba:	4650      	mov	r0, sl
 8009fbc:	7821      	ldrb	r1, [r4, #0]
 8009fbe:	f7ff fdd3 	bl	8009b68 <memchr>
 8009fc2:	b140      	cbz	r0, 8009fd6 <_svfiprintf_r+0x152>
 8009fc4:	2340      	movs	r3, #64	; 0x40
 8009fc6:	eba0 000a 	sub.w	r0, r0, sl
 8009fca:	fa03 f000 	lsl.w	r0, r3, r0
 8009fce:	9b04      	ldr	r3, [sp, #16]
 8009fd0:	3401      	adds	r4, #1
 8009fd2:	4303      	orrs	r3, r0
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fda:	2206      	movs	r2, #6
 8009fdc:	4826      	ldr	r0, [pc, #152]	; (800a078 <_svfiprintf_r+0x1f4>)
 8009fde:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fe2:	f7ff fdc1 	bl	8009b68 <memchr>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	d038      	beq.n	800a05c <_svfiprintf_r+0x1d8>
 8009fea:	4b24      	ldr	r3, [pc, #144]	; (800a07c <_svfiprintf_r+0x1f8>)
 8009fec:	bb1b      	cbnz	r3, 800a036 <_svfiprintf_r+0x1b2>
 8009fee:	9b03      	ldr	r3, [sp, #12]
 8009ff0:	3307      	adds	r3, #7
 8009ff2:	f023 0307 	bic.w	r3, r3, #7
 8009ff6:	3308      	adds	r3, #8
 8009ff8:	9303      	str	r3, [sp, #12]
 8009ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ffc:	4433      	add	r3, r6
 8009ffe:	9309      	str	r3, [sp, #36]	; 0x24
 800a000:	e767      	b.n	8009ed2 <_svfiprintf_r+0x4e>
 800a002:	460c      	mov	r4, r1
 800a004:	2001      	movs	r0, #1
 800a006:	fb0c 3202 	mla	r2, ip, r2, r3
 800a00a:	e7a5      	b.n	8009f58 <_svfiprintf_r+0xd4>
 800a00c:	2300      	movs	r3, #0
 800a00e:	f04f 0c0a 	mov.w	ip, #10
 800a012:	4619      	mov	r1, r3
 800a014:	3401      	adds	r4, #1
 800a016:	9305      	str	r3, [sp, #20]
 800a018:	4620      	mov	r0, r4
 800a01a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a01e:	3a30      	subs	r2, #48	; 0x30
 800a020:	2a09      	cmp	r2, #9
 800a022:	d903      	bls.n	800a02c <_svfiprintf_r+0x1a8>
 800a024:	2b00      	cmp	r3, #0
 800a026:	d0c5      	beq.n	8009fb4 <_svfiprintf_r+0x130>
 800a028:	9105      	str	r1, [sp, #20]
 800a02a:	e7c3      	b.n	8009fb4 <_svfiprintf_r+0x130>
 800a02c:	4604      	mov	r4, r0
 800a02e:	2301      	movs	r3, #1
 800a030:	fb0c 2101 	mla	r1, ip, r1, r2
 800a034:	e7f0      	b.n	800a018 <_svfiprintf_r+0x194>
 800a036:	ab03      	add	r3, sp, #12
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	462a      	mov	r2, r5
 800a03c:	4638      	mov	r0, r7
 800a03e:	4b10      	ldr	r3, [pc, #64]	; (800a080 <_svfiprintf_r+0x1fc>)
 800a040:	a904      	add	r1, sp, #16
 800a042:	f3af 8000 	nop.w
 800a046:	1c42      	adds	r2, r0, #1
 800a048:	4606      	mov	r6, r0
 800a04a:	d1d6      	bne.n	8009ffa <_svfiprintf_r+0x176>
 800a04c:	89ab      	ldrh	r3, [r5, #12]
 800a04e:	065b      	lsls	r3, r3, #25
 800a050:	f53f af2c 	bmi.w	8009eac <_svfiprintf_r+0x28>
 800a054:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a056:	b01d      	add	sp, #116	; 0x74
 800a058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a05c:	ab03      	add	r3, sp, #12
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	462a      	mov	r2, r5
 800a062:	4638      	mov	r0, r7
 800a064:	4b06      	ldr	r3, [pc, #24]	; (800a080 <_svfiprintf_r+0x1fc>)
 800a066:	a904      	add	r1, sp, #16
 800a068:	f7ff f954 	bl	8009314 <_printf_i>
 800a06c:	e7eb      	b.n	800a046 <_svfiprintf_r+0x1c2>
 800a06e:	bf00      	nop
 800a070:	0800a9dc 	.word	0x0800a9dc
 800a074:	0800a9e2 	.word	0x0800a9e2
 800a078:	0800a9e6 	.word	0x0800a9e6
 800a07c:	00000000 	.word	0x00000000
 800a080:	08009dcf 	.word	0x08009dcf

0800a084 <_sbrk_r>:
 800a084:	b538      	push	{r3, r4, r5, lr}
 800a086:	2300      	movs	r3, #0
 800a088:	4d05      	ldr	r5, [pc, #20]	; (800a0a0 <_sbrk_r+0x1c>)
 800a08a:	4604      	mov	r4, r0
 800a08c:	4608      	mov	r0, r1
 800a08e:	602b      	str	r3, [r5, #0]
 800a090:	f7fa fe84 	bl	8004d9c <_sbrk>
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	d102      	bne.n	800a09e <_sbrk_r+0x1a>
 800a098:	682b      	ldr	r3, [r5, #0]
 800a09a:	b103      	cbz	r3, 800a09e <_sbrk_r+0x1a>
 800a09c:	6023      	str	r3, [r4, #0]
 800a09e:	bd38      	pop	{r3, r4, r5, pc}
 800a0a0:	20007e98 	.word	0x20007e98

0800a0a4 <_raise_r>:
 800a0a4:	291f      	cmp	r1, #31
 800a0a6:	b538      	push	{r3, r4, r5, lr}
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	460d      	mov	r5, r1
 800a0ac:	d904      	bls.n	800a0b8 <_raise_r+0x14>
 800a0ae:	2316      	movs	r3, #22
 800a0b0:	6003      	str	r3, [r0, #0]
 800a0b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a0b6:	bd38      	pop	{r3, r4, r5, pc}
 800a0b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0ba:	b112      	cbz	r2, 800a0c2 <_raise_r+0x1e>
 800a0bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0c0:	b94b      	cbnz	r3, 800a0d6 <_raise_r+0x32>
 800a0c2:	4620      	mov	r0, r4
 800a0c4:	f000 f830 	bl	800a128 <_getpid_r>
 800a0c8:	462a      	mov	r2, r5
 800a0ca:	4601      	mov	r1, r0
 800a0cc:	4620      	mov	r0, r4
 800a0ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0d2:	f000 b817 	b.w	800a104 <_kill_r>
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d00a      	beq.n	800a0f0 <_raise_r+0x4c>
 800a0da:	1c59      	adds	r1, r3, #1
 800a0dc:	d103      	bne.n	800a0e6 <_raise_r+0x42>
 800a0de:	2316      	movs	r3, #22
 800a0e0:	6003      	str	r3, [r0, #0]
 800a0e2:	2001      	movs	r0, #1
 800a0e4:	e7e7      	b.n	800a0b6 <_raise_r+0x12>
 800a0e6:	2400      	movs	r4, #0
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0ee:	4798      	blx	r3
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	e7e0      	b.n	800a0b6 <_raise_r+0x12>

0800a0f4 <raise>:
 800a0f4:	4b02      	ldr	r3, [pc, #8]	; (800a100 <raise+0xc>)
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	6818      	ldr	r0, [r3, #0]
 800a0fa:	f7ff bfd3 	b.w	800a0a4 <_raise_r>
 800a0fe:	bf00      	nop
 800a100:	20000018 	.word	0x20000018

0800a104 <_kill_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	2300      	movs	r3, #0
 800a108:	4d06      	ldr	r5, [pc, #24]	; (800a124 <_kill_r+0x20>)
 800a10a:	4604      	mov	r4, r0
 800a10c:	4608      	mov	r0, r1
 800a10e:	4611      	mov	r1, r2
 800a110:	602b      	str	r3, [r5, #0]
 800a112:	f7fa fdc0 	bl	8004c96 <_kill>
 800a116:	1c43      	adds	r3, r0, #1
 800a118:	d102      	bne.n	800a120 <_kill_r+0x1c>
 800a11a:	682b      	ldr	r3, [r5, #0]
 800a11c:	b103      	cbz	r3, 800a120 <_kill_r+0x1c>
 800a11e:	6023      	str	r3, [r4, #0]
 800a120:	bd38      	pop	{r3, r4, r5, pc}
 800a122:	bf00      	nop
 800a124:	20007e98 	.word	0x20007e98

0800a128 <_getpid_r>:
 800a128:	f7fa bdae 	b.w	8004c88 <_getpid>

0800a12c <__sread>:
 800a12c:	b510      	push	{r4, lr}
 800a12e:	460c      	mov	r4, r1
 800a130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a134:	f000 f8a8 	bl	800a288 <_read_r>
 800a138:	2800      	cmp	r0, #0
 800a13a:	bfab      	itete	ge
 800a13c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a13e:	89a3      	ldrhlt	r3, [r4, #12]
 800a140:	181b      	addge	r3, r3, r0
 800a142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a146:	bfac      	ite	ge
 800a148:	6563      	strge	r3, [r4, #84]	; 0x54
 800a14a:	81a3      	strhlt	r3, [r4, #12]
 800a14c:	bd10      	pop	{r4, pc}

0800a14e <__swrite>:
 800a14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a152:	461f      	mov	r7, r3
 800a154:	898b      	ldrh	r3, [r1, #12]
 800a156:	4605      	mov	r5, r0
 800a158:	05db      	lsls	r3, r3, #23
 800a15a:	460c      	mov	r4, r1
 800a15c:	4616      	mov	r6, r2
 800a15e:	d505      	bpl.n	800a16c <__swrite+0x1e>
 800a160:	2302      	movs	r3, #2
 800a162:	2200      	movs	r2, #0
 800a164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a168:	f000 f868 	bl	800a23c <_lseek_r>
 800a16c:	89a3      	ldrh	r3, [r4, #12]
 800a16e:	4632      	mov	r2, r6
 800a170:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a174:	81a3      	strh	r3, [r4, #12]
 800a176:	4628      	mov	r0, r5
 800a178:	463b      	mov	r3, r7
 800a17a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a182:	f000 b817 	b.w	800a1b4 <_write_r>

0800a186 <__sseek>:
 800a186:	b510      	push	{r4, lr}
 800a188:	460c      	mov	r4, r1
 800a18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a18e:	f000 f855 	bl	800a23c <_lseek_r>
 800a192:	1c43      	adds	r3, r0, #1
 800a194:	89a3      	ldrh	r3, [r4, #12]
 800a196:	bf15      	itete	ne
 800a198:	6560      	strne	r0, [r4, #84]	; 0x54
 800a19a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a19e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a1a2:	81a3      	strheq	r3, [r4, #12]
 800a1a4:	bf18      	it	ne
 800a1a6:	81a3      	strhne	r3, [r4, #12]
 800a1a8:	bd10      	pop	{r4, pc}

0800a1aa <__sclose>:
 800a1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1ae:	f000 b813 	b.w	800a1d8 <_close_r>
	...

0800a1b4 <_write_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4604      	mov	r4, r0
 800a1b8:	4608      	mov	r0, r1
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	2200      	movs	r2, #0
 800a1be:	4d05      	ldr	r5, [pc, #20]	; (800a1d4 <_write_r+0x20>)
 800a1c0:	602a      	str	r2, [r5, #0]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f7fa fd9e 	bl	8004d04 <_write>
 800a1c8:	1c43      	adds	r3, r0, #1
 800a1ca:	d102      	bne.n	800a1d2 <_write_r+0x1e>
 800a1cc:	682b      	ldr	r3, [r5, #0]
 800a1ce:	b103      	cbz	r3, 800a1d2 <_write_r+0x1e>
 800a1d0:	6023      	str	r3, [r4, #0]
 800a1d2:	bd38      	pop	{r3, r4, r5, pc}
 800a1d4:	20007e98 	.word	0x20007e98

0800a1d8 <_close_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	2300      	movs	r3, #0
 800a1dc:	4d05      	ldr	r5, [pc, #20]	; (800a1f4 <_close_r+0x1c>)
 800a1de:	4604      	mov	r4, r0
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	602b      	str	r3, [r5, #0]
 800a1e4:	f7fa fdaa 	bl	8004d3c <_close>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d102      	bne.n	800a1f2 <_close_r+0x1a>
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	b103      	cbz	r3, 800a1f2 <_close_r+0x1a>
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	bd38      	pop	{r3, r4, r5, pc}
 800a1f4:	20007e98 	.word	0x20007e98

0800a1f8 <_fstat_r>:
 800a1f8:	b538      	push	{r3, r4, r5, lr}
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	4d06      	ldr	r5, [pc, #24]	; (800a218 <_fstat_r+0x20>)
 800a1fe:	4604      	mov	r4, r0
 800a200:	4608      	mov	r0, r1
 800a202:	4611      	mov	r1, r2
 800a204:	602b      	str	r3, [r5, #0]
 800a206:	f7fa fda4 	bl	8004d52 <_fstat>
 800a20a:	1c43      	adds	r3, r0, #1
 800a20c:	d102      	bne.n	800a214 <_fstat_r+0x1c>
 800a20e:	682b      	ldr	r3, [r5, #0]
 800a210:	b103      	cbz	r3, 800a214 <_fstat_r+0x1c>
 800a212:	6023      	str	r3, [r4, #0]
 800a214:	bd38      	pop	{r3, r4, r5, pc}
 800a216:	bf00      	nop
 800a218:	20007e98 	.word	0x20007e98

0800a21c <_isatty_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	2300      	movs	r3, #0
 800a220:	4d05      	ldr	r5, [pc, #20]	; (800a238 <_isatty_r+0x1c>)
 800a222:	4604      	mov	r4, r0
 800a224:	4608      	mov	r0, r1
 800a226:	602b      	str	r3, [r5, #0]
 800a228:	f7fa fda2 	bl	8004d70 <_isatty>
 800a22c:	1c43      	adds	r3, r0, #1
 800a22e:	d102      	bne.n	800a236 <_isatty_r+0x1a>
 800a230:	682b      	ldr	r3, [r5, #0]
 800a232:	b103      	cbz	r3, 800a236 <_isatty_r+0x1a>
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	bd38      	pop	{r3, r4, r5, pc}
 800a238:	20007e98 	.word	0x20007e98

0800a23c <_lseek_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4604      	mov	r4, r0
 800a240:	4608      	mov	r0, r1
 800a242:	4611      	mov	r1, r2
 800a244:	2200      	movs	r2, #0
 800a246:	4d05      	ldr	r5, [pc, #20]	; (800a25c <_lseek_r+0x20>)
 800a248:	602a      	str	r2, [r5, #0]
 800a24a:	461a      	mov	r2, r3
 800a24c:	f7fa fd9a 	bl	8004d84 <_lseek>
 800a250:	1c43      	adds	r3, r0, #1
 800a252:	d102      	bne.n	800a25a <_lseek_r+0x1e>
 800a254:	682b      	ldr	r3, [r5, #0]
 800a256:	b103      	cbz	r3, 800a25a <_lseek_r+0x1e>
 800a258:	6023      	str	r3, [r4, #0]
 800a25a:	bd38      	pop	{r3, r4, r5, pc}
 800a25c:	20007e98 	.word	0x20007e98

0800a260 <__malloc_lock>:
 800a260:	4801      	ldr	r0, [pc, #4]	; (800a268 <__malloc_lock+0x8>)
 800a262:	f7ff bc19 	b.w	8009a98 <__retarget_lock_acquire_recursive>
 800a266:	bf00      	nop
 800a268:	20007e8c 	.word	0x20007e8c

0800a26c <__malloc_unlock>:
 800a26c:	4801      	ldr	r0, [pc, #4]	; (800a274 <__malloc_unlock+0x8>)
 800a26e:	f7ff bc14 	b.w	8009a9a <__retarget_lock_release_recursive>
 800a272:	bf00      	nop
 800a274:	20007e8c 	.word	0x20007e8c

0800a278 <_malloc_usable_size_r>:
 800a278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a27c:	1f18      	subs	r0, r3, #4
 800a27e:	2b00      	cmp	r3, #0
 800a280:	bfbc      	itt	lt
 800a282:	580b      	ldrlt	r3, [r1, r0]
 800a284:	18c0      	addlt	r0, r0, r3
 800a286:	4770      	bx	lr

0800a288 <_read_r>:
 800a288:	b538      	push	{r3, r4, r5, lr}
 800a28a:	4604      	mov	r4, r0
 800a28c:	4608      	mov	r0, r1
 800a28e:	4611      	mov	r1, r2
 800a290:	2200      	movs	r2, #0
 800a292:	4d05      	ldr	r5, [pc, #20]	; (800a2a8 <_read_r+0x20>)
 800a294:	602a      	str	r2, [r5, #0]
 800a296:	461a      	mov	r2, r3
 800a298:	f7fa fd17 	bl	8004cca <_read>
 800a29c:	1c43      	adds	r3, r0, #1
 800a29e:	d102      	bne.n	800a2a6 <_read_r+0x1e>
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	b103      	cbz	r3, 800a2a6 <_read_r+0x1e>
 800a2a4:	6023      	str	r3, [r4, #0]
 800a2a6:	bd38      	pop	{r3, r4, r5, pc}
 800a2a8:	20007e98 	.word	0x20007e98

0800a2ac <roundf>:
 800a2ac:	b508      	push	{r3, lr}
 800a2ae:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a2b2:	3b7f      	subs	r3, #127	; 0x7f
 800a2b4:	2b16      	cmp	r3, #22
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	dc14      	bgt.n	800a2e6 <roundf+0x3a>
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	da07      	bge.n	800a2d0 <roundf+0x24>
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 800a2c6:	d101      	bne.n	800a2cc <roundf+0x20>
 800a2c8:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 800a2cc:	4608      	mov	r0, r1
 800a2ce:	bd08      	pop	{r3, pc}
 800a2d0:	4808      	ldr	r0, [pc, #32]	; (800a2f4 <roundf+0x48>)
 800a2d2:	4118      	asrs	r0, r3
 800a2d4:	4201      	tst	r1, r0
 800a2d6:	d0f9      	beq.n	800a2cc <roundf+0x20>
 800a2d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a2dc:	4119      	asrs	r1, r3
 800a2de:	4411      	add	r1, r2
 800a2e0:	ea21 0100 	bic.w	r1, r1, r0
 800a2e4:	e7f2      	b.n	800a2cc <roundf+0x20>
 800a2e6:	2b80      	cmp	r3, #128	; 0x80
 800a2e8:	d1f0      	bne.n	800a2cc <roundf+0x20>
 800a2ea:	f7f6 fbc1 	bl	8000a70 <__addsf3>
 800a2ee:	4601      	mov	r1, r0
 800a2f0:	e7ec      	b.n	800a2cc <roundf+0x20>
 800a2f2:	bf00      	nop
 800a2f4:	007fffff 	.word	0x007fffff

0800a2f8 <_init>:
 800a2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2fa:	bf00      	nop
 800a2fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2fe:	bc08      	pop	{r3}
 800a300:	469e      	mov	lr, r3
 800a302:	4770      	bx	lr

0800a304 <_fini>:
 800a304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a306:	bf00      	nop
 800a308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a30a:	bc08      	pop	{r3}
 800a30c:	469e      	mov	lr, r3
 800a30e:	4770      	bx	lr
