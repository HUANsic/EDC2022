
MiniatureDifferential.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08006cbc  08006cbc  00016cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e1c  08006e1c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006e1c  08006e1c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e1c  08006e1c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e1c  08006e1c  00016e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e20  08006e20  00016e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000368  20000074  08006e98  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003dc  08006e98  000203dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9ce  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022f0  00000000  00000000  0002fa6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001030  00000000  00000000  00031d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00032d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003965  00000000  00000000  00033d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012083  00000000  00000000  00037665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f2c1  00000000  00000000  000496e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d89a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005018  00000000  00000000  000d89fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ca4 	.word	0x08006ca4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006ca4 	.word	0x08006ca4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	; 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bfa:	2afd      	cmp	r2, #253	; 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	; 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	; 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	; 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__gesf2>:
 8000e48:	f04f 3cff 	mov.w	ip, #4294967295
 8000e4c:	e006      	b.n	8000e5c <__cmpsf2+0x4>
 8000e4e:	bf00      	nop

08000e50 <__lesf2>:
 8000e50:	f04f 0c01 	mov.w	ip, #1
 8000e54:	e002      	b.n	8000e5c <__cmpsf2+0x4>
 8000e56:	bf00      	nop

08000e58 <__cmpsf2>:
 8000e58:	f04f 0c01 	mov.w	ip, #1
 8000e5c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e6c:	bf18      	it	ne
 8000e6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e72:	d011      	beq.n	8000e98 <__cmpsf2+0x40>
 8000e74:	b001      	add	sp, #4
 8000e76:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e7a:	bf18      	it	ne
 8000e7c:	ea90 0f01 	teqne	r0, r1
 8000e80:	bf58      	it	pl
 8000e82:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e86:	bf88      	it	hi
 8000e88:	17c8      	asrhi	r0, r1, #31
 8000e8a:	bf38      	it	cc
 8000e8c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000e90:	bf18      	it	ne
 8000e92:	f040 0001 	orrne.w	r0, r0, #1
 8000e96:	4770      	bx	lr
 8000e98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e9c:	d102      	bne.n	8000ea4 <__cmpsf2+0x4c>
 8000e9e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ea2:	d105      	bne.n	8000eb0 <__cmpsf2+0x58>
 8000ea4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ea8:	d1e4      	bne.n	8000e74 <__cmpsf2+0x1c>
 8000eaa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eae:	d0e1      	beq.n	8000e74 <__cmpsf2+0x1c>
 8000eb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <__aeabi_cfrcmple>:
 8000eb8:	4684      	mov	ip, r0
 8000eba:	4608      	mov	r0, r1
 8000ebc:	4661      	mov	r1, ip
 8000ebe:	e7ff      	b.n	8000ec0 <__aeabi_cfcmpeq>

08000ec0 <__aeabi_cfcmpeq>:
 8000ec0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ec2:	f7ff ffc9 	bl	8000e58 <__cmpsf2>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	bf48      	it	mi
 8000eca:	f110 0f00 	cmnmi.w	r0, #0
 8000ece:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ed0 <__aeabi_fcmpeq>:
 8000ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ed4:	f7ff fff4 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000ed8:	bf0c      	ite	eq
 8000eda:	2001      	moveq	r0, #1
 8000edc:	2000      	movne	r0, #0
 8000ede:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ee2:	bf00      	nop

08000ee4 <__aeabi_fcmplt>:
 8000ee4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ee8:	f7ff ffea 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000eec:	bf34      	ite	cc
 8000eee:	2001      	movcc	r0, #1
 8000ef0:	2000      	movcs	r0, #0
 8000ef2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_fcmple>:
 8000ef8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000efc:	f7ff ffe0 	bl	8000ec0 <__aeabi_cfcmpeq>
 8000f00:	bf94      	ite	ls
 8000f02:	2001      	movls	r0, #1
 8000f04:	2000      	movhi	r0, #0
 8000f06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0a:	bf00      	nop

08000f0c <__aeabi_fcmpge>:
 8000f0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f10:	f7ff ffd2 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f14:	bf94      	ite	ls
 8000f16:	2001      	movls	r0, #1
 8000f18:	2000      	movhi	r0, #0
 8000f1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1e:	bf00      	nop

08000f20 <__aeabi_fcmpgt>:
 8000f20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f24:	f7ff ffc8 	bl	8000eb8 <__aeabi_cfrcmple>
 8000f28:	bf34      	ite	cc
 8000f2a:	2001      	movcc	r0, #1
 8000f2c:	2000      	movcs	r0, #0
 8000f2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f32:	bf00      	nop

08000f34 <__aeabi_f2uiz>:
 8000f34:	0042      	lsls	r2, r0, #1
 8000f36:	d20e      	bcs.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f38:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f3c:	d30b      	bcc.n	8000f56 <__aeabi_f2uiz+0x22>
 8000f3e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f42:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f46:	d409      	bmi.n	8000f5c <__aeabi_f2uiz+0x28>
 8000f48:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f50:	fa23 f002 	lsr.w	r0, r3, r2
 8000f54:	4770      	bx	lr
 8000f56:	f04f 0000 	mov.w	r0, #0
 8000f5a:	4770      	bx	lr
 8000f5c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f60:	d101      	bne.n	8000f66 <__aeabi_f2uiz+0x32>
 8000f62:	0242      	lsls	r2, r0, #9
 8000f64:	d102      	bne.n	8000f6c <__aeabi_f2uiz+0x38>
 8000f66:	f04f 30ff 	mov.w	r0, #4294967295
 8000f6a:	4770      	bx	lr
 8000f6c:	f04f 0000 	mov.w	r0, #0
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <huansic_jy62_init>:
uint8_t setBaud9600_pack[3] = { 0xFF, 0xAA, 0x64 };
uint8_t setHorizontal_pack[3] = { 0xFF, 0xAA, 0x65 };
uint8_t setVertical_pack[3] = { 0xFF, 0xAA, 0x66 };
uint8_t sleepAndAwake_pack[3] = { 0xFF, 0xAA, 0x60 };

void huansic_jy62_init(JY62_HandleTypeDef *hjy62) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	if(!hjy62) return;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d038      	beq.n	8000ff4 <huansic_jy62_init+0x80>
	if(!hjy62->uartPort) return;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d036      	beq.n	8000ff8 <huansic_jy62_init+0x84>

	huansic_jy62_resetAngle(hjy62);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f838 	bl	8001000 <huansic_jy62_resetAngle>

	hjy62->accel_x = 0;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
	hjy62->accel_y = 0;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f04f 0200 	mov.w	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
	hjy62->accel_z = 0;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
	hjy62->omega_x = 0;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
	hjy62->omega_y = 0;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
	hjy62->omega_z = 0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
	hjy62->theta_x = 0;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	61da      	str	r2, [r3, #28]
	hjy62->theta_y = 0;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	621a      	str	r2, [r3, #32]
	hjy62->theta_z = 0;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	625a      	str	r2, [r3, #36]	; 0x24

	hjy62->lastUpdated = HAL_GetTick();
 8000fd8:	f001 fc52 	bl	8002880 <HAL_GetTick>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	332c      	adds	r3, #44	; 0x2c
 8000fea:	220b      	movs	r2, #11
 8000fec:	4619      	mov	r1, r3
 8000fee:	f004 f8ac 	bl	800514a <HAL_UART_Receive_DMA>
 8000ff2:	e002      	b.n	8000ffa <huansic_jy62_init+0x86>
	if(!hjy62) return;
 8000ff4:	bf00      	nop
 8000ff6:	e000      	b.n	8000ffa <huansic_jy62_init+0x86>
	if(!hjy62->uartPort) return;
 8000ff8:	bf00      	nop
}
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <huansic_jy62_resetAngle>:

void huansic_jy62_resetAngle(JY62_HandleTypeDef *hjy62) {
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(hjy62->uartPort, initAngle_pack, 3, HAL_MAX_DELAY);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	2203      	movs	r2, #3
 8001012:	4903      	ldr	r1, [pc, #12]	; (8001020 <huansic_jy62_resetAngle+0x20>)
 8001014:	f004 f807 	bl	8005026 <HAL_UART_Transmit>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000000 	.word	0x20000000
 8001024:	00000000 	.word	0x00000000

08001028 <huansic_jy62_decodePackage>:

void huansic_jy62_decodePackage(JY62_HandleTypeDef *hjy62) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	// package header
	if (hjy62->buffer[0] != 0x55)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001036:	2b55      	cmp	r3, #85	; 0x55
 8001038:	f040 81f2 	bne.w	8001420 <huansic_jy62_decodePackage+0x3f8>
		return;

	// checksum
	uint8_t sum = hjy62->buffer[0] + hjy62->buffer[1] + hjy62->buffer[2] + hjy62->buffer[3]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001048:	4413      	add	r3, r2
 800104a:	b2da      	uxtb	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001052:	4413      	add	r3, r2
 8001054:	b2da      	uxtb	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800105c:	4413      	add	r3, r2
 800105e:	b2da      	uxtb	r2, r3
			+ hjy62->buffer[4] + hjy62->buffer[5] + hjy62->buffer[6] + hjy62->buffer[7]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001066:	4413      	add	r3, r2
 8001068:	b2da      	uxtb	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001070:	4413      	add	r3, r2
 8001072:	b2da      	uxtb	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800107a:	4413      	add	r3, r2
 800107c:	b2da      	uxtb	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001084:	4413      	add	r3, r2
 8001086:	b2da      	uxtb	r2, r3
			+ hjy62->buffer[8] + hjy62->buffer[9];
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800108e:	4413      	add	r3, r2
 8001090:	b2da      	uxtb	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	uint8_t sum = hjy62->buffer[0] + hjy62->buffer[1] + hjy62->buffer[2] + hjy62->buffer[3]
 8001098:	4413      	add	r3, r2
 800109a:	73fb      	strb	r3, [r7, #15]
	if (hjy62->buffer[10] != sum)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	f040 81bd 	bne.w	8001424 <huansic_jy62_decodePackage+0x3fc>
		return;

	// decoding
	int16_t temp;
	if (hjy62->buffer[1] == 0x51) {		// acceleration
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80010b0:	2b51      	cmp	r3, #81	; 0x51
 80010b2:	d175      	bne.n	80011a0 <huansic_jy62_decodePackage+0x178>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21a      	sxth	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	4313      	orrs	r3, r2
 80010c8:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_x = temp / 32768.0 * 16.0;
 80010ca:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f990 	bl	80003f4 <__aeabi_i2d>
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	4b8d      	ldr	r3, [pc, #564]	; (8001310 <huansic_jy62_decodePackage+0x2e8>)
 80010da:	f7ff fb1f 	bl	800071c <__aeabi_ddiv>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	4610      	mov	r0, r2
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	4b8a      	ldr	r3, [pc, #552]	; (8001314 <huansic_jy62_decodePackage+0x2ec>)
 80010ec:	f7ff f9ec 	bl	80004c8 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4610      	mov	r0, r2
 80010f6:	4619      	mov	r1, r3
 80010f8:	f7ff fbf8 	bl	80008ec <__aeabi_d2f>
 80010fc:	4602      	mov	r2, r0
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	605a      	str	r2, [r3, #4]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	b21a      	sxth	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_y = temp / 32768.0 * 16.0;
 8001118:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f969 	bl	80003f4 <__aeabi_i2d>
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	4b7a      	ldr	r3, [pc, #488]	; (8001310 <huansic_jy62_decodePackage+0x2e8>)
 8001128:	f7ff faf8 	bl	800071c <__aeabi_ddiv>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 0200 	mov.w	r2, #0
 8001138:	4b76      	ldr	r3, [pc, #472]	; (8001314 <huansic_jy62_decodePackage+0x2ec>)
 800113a:	f7ff f9c5 	bl	80004c8 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4610      	mov	r0, r2
 8001144:	4619      	mov	r1, r3
 8001146:	f7ff fbd1 	bl	80008ec <__aeabi_d2f>
 800114a:	4602      	mov	r2, r0
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	609a      	str	r2, [r3, #8]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b21a      	sxth	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_z = temp / 32768.0 * 16.0;
 8001166:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f942 	bl	80003f4 <__aeabi_i2d>
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	4b66      	ldr	r3, [pc, #408]	; (8001310 <huansic_jy62_decodePackage+0x2e8>)
 8001176:	f7ff fad1 	bl	800071c <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	4b63      	ldr	r3, [pc, #396]	; (8001314 <huansic_jy62_decodePackage+0x2ec>)
 8001188:	f7ff f99e 	bl	80004c8 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f7ff fbaa 	bl	80008ec <__aeabi_d2f>
 8001198:	4602      	mov	r2, r0
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	e139      	b.n	8001414 <huansic_jy62_decodePackage+0x3ec>
	} else if (hjy62->buffer[1] == 0x52) {		// angular speed
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80011a6:	2b52      	cmp	r3, #82	; 0x52
 80011a8:	f040 80ba 	bne.w	8001320 <huansic_jy62_decodePackage+0x2f8>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_x = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 80011c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f914 	bl	80003f4 <__aeabi_i2d>
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b4f      	ldr	r3, [pc, #316]	; (8001310 <huansic_jy62_decodePackage+0x2e8>)
 80011d2:	f7ff faa3 	bl	800071c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	4b4d      	ldr	r3, [pc, #308]	; (8001318 <huansic_jy62_decodePackage+0x2f0>)
 80011e4:	f7ff f970 	bl	80004c8 <__aeabi_dmul>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b49      	ldr	r3, [pc, #292]	; (800131c <huansic_jy62_decodePackage+0x2f4>)
 80011f6:	f7ff fa91 	bl	800071c <__aeabi_ddiv>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	a341      	add	r3, pc, #260	; (adr r3, 8001308 <huansic_jy62_decodePackage+0x2e0>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff f95e 	bl	80004c8 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4610      	mov	r0, r2
 8001212:	4619      	mov	r1, r3
 8001214:	f7ff fb6a 	bl	80008ec <__aeabi_d2f>
 8001218:	4602      	mov	r2, r0
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	611a      	str	r2, [r3, #16]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800122e:	b21b      	sxth	r3, r3
 8001230:	4313      	orrs	r3, r2
 8001232:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_y = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 8001234:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f8db 	bl	80003f4 <__aeabi_i2d>
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	4b33      	ldr	r3, [pc, #204]	; (8001310 <huansic_jy62_decodePackage+0x2e8>)
 8001244:	f7ff fa6a 	bl	800071c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f04f 0200 	mov.w	r2, #0
 8001254:	4b30      	ldr	r3, [pc, #192]	; (8001318 <huansic_jy62_decodePackage+0x2f0>)
 8001256:	f7ff f937 	bl	80004c8 <__aeabi_dmul>
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <huansic_jy62_decodePackage+0x2f4>)
 8001268:	f7ff fa58 	bl	800071c <__aeabi_ddiv>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	a324      	add	r3, pc, #144	; (adr r3, 8001308 <huansic_jy62_decodePackage+0x2e0>)
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	f7ff f925 	bl	80004c8 <__aeabi_dmul>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff fb31 	bl	80008ec <__aeabi_d2f>
 800128a:	4602      	mov	r2, r0
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	615a      	str	r2, [r3, #20]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	b21a      	sxth	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012a0:	b21b      	sxth	r3, r3
 80012a2:	4313      	orrs	r3, r2
 80012a4:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_z = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 80012a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f8a2 	bl	80003f4 <__aeabi_i2d>
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <huansic_jy62_decodePackage+0x2e8>)
 80012b6:	f7ff fa31 	bl	800071c <__aeabi_ddiv>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <huansic_jy62_decodePackage+0x2f0>)
 80012c8:	f7ff f8fe 	bl	80004c8 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <huansic_jy62_decodePackage+0x2f4>)
 80012da:	f7ff fa1f 	bl	800071c <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	a308      	add	r3, pc, #32	; (adr r3, 8001308 <huansic_jy62_decodePackage+0x2e0>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff f8ec 	bl	80004c8 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff faf8 	bl	80008ec <__aeabi_d2f>
 80012fc:	4602      	mov	r2, r0
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	619a      	str	r2, [r3, #24]
 8001302:	e087      	b.n	8001414 <huansic_jy62_decodePackage+0x3ec>
 8001304:	f3af 8000 	nop.w
 8001308:	54442d18 	.word	0x54442d18
 800130c:	400921fb 	.word	0x400921fb
 8001310:	40e00000 	.word	0x40e00000
 8001314:	40300000 	.word	0x40300000
 8001318:	409f4000 	.word	0x409f4000
 800131c:	40668000 	.word	0x40668000
	} else if (hjy62->buffer[1] == 0x53) {		// angle
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001326:	2b53      	cmp	r3, #83	; 0x53
 8001328:	d174      	bne.n	8001414 <huansic_jy62_decodePackage+0x3ec>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001330:	021b      	lsls	r3, r3, #8
 8001332:	b21a      	sxth	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800133a:	b21b      	sxth	r3, r3
 800133c:	4313      	orrs	r3, r2
 800133e:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_x = temp / 32768.0 * M_PI;
 8001340:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f855 	bl	80003f4 <__aeabi_i2d>
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b3a      	ldr	r3, [pc, #232]	; (8001438 <huansic_jy62_decodePackage+0x410>)
 8001350:	f7ff f9e4 	bl	800071c <__aeabi_ddiv>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	a334      	add	r3, pc, #208	; (adr r3, 8001430 <huansic_jy62_decodePackage+0x408>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff f8b1 	bl	80004c8 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fabd 	bl	80008ec <__aeabi_d2f>
 8001372:	4602      	mov	r2, r0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	61da      	str	r2, [r3, #28]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	b21a      	sxth	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_y = temp / 32768.0 * M_PI;
 800138e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f82e 	bl	80003f4 <__aeabi_i2d>
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	4b26      	ldr	r3, [pc, #152]	; (8001438 <huansic_jy62_decodePackage+0x410>)
 800139e:	f7ff f9bd 	bl	800071c <__aeabi_ddiv>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	a321      	add	r3, pc, #132	; (adr r3, 8001430 <huansic_jy62_decodePackage+0x408>)
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f7ff f88a 	bl	80004c8 <__aeabi_dmul>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fa96 	bl	80008ec <__aeabi_d2f>
 80013c0:	4602      	mov	r2, r0
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	621a      	str	r2, [r3, #32]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_z = temp / 32768.0 * M_PI;
 80013dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f807 	bl	80003f4 <__aeabi_i2d>
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	4b13      	ldr	r3, [pc, #76]	; (8001438 <huansic_jy62_decodePackage+0x410>)
 80013ec:	f7ff f996 	bl	800071c <__aeabi_ddiv>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4610      	mov	r0, r2
 80013f6:	4619      	mov	r1, r3
 80013f8:	a30d      	add	r3, pc, #52	; (adr r3, 8001430 <huansic_jy62_decodePackage+0x408>)
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	f7ff f863 	bl	80004c8 <__aeabi_dmul>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fa6f 	bl	80008ec <__aeabi_d2f>
 800140e:	4602      	mov	r2, r0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// record current time
	hjy62->lastUpdated = HAL_GetTick();
 8001414:	f001 fa34 	bl	8002880 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
 800141e:	e002      	b.n	8001426 <huansic_jy62_decodePackage+0x3fe>
		return;
 8001420:	bf00      	nop
 8001422:	e000      	b.n	8001426 <huansic_jy62_decodePackage+0x3fe>
		return;
 8001424:	bf00      	nop
}
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	f3af 8000 	nop.w
 8001430:	54442d18 	.word	0x54442d18
 8001434:	400921fb 	.word	0x400921fb
 8001438:	40e00000 	.word	0x40e00000

0800143c <huansic_jy62_setDMA>:

void huansic_jy62_setDMA(JY62_HandleTypeDef *hjy62) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6818      	ldr	r0, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	332c      	adds	r3, #44	; 0x2c
 800144c:	220b      	movs	r2, #11
 800144e:	4619      	mov	r1, r3
 8001450:	f003 fe7b 	bl	800514a <HAL_UART_Receive_DMA>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d105      	bne.n	8001478 <huansic_motor_init+0x1c>
 800146c:	4b55      	ldr	r3, [pc, #340]	; (80015c4 <huansic_motor_init+0x168>)
 800146e:	4a56      	ldr	r2, [pc, #344]	; (80015c8 <huansic_motor_init+0x16c>)
 8001470:	210c      	movs	r1, #12
 8001472:	4856      	ldr	r0, [pc, #344]	; (80015cc <huansic_motor_init+0x170>)
 8001474:	f004 fbc6 	bl	8005c04 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d105      	bne.n	800148c <huansic_motor_init+0x30>
 8001480:	4b53      	ldr	r3, [pc, #332]	; (80015d0 <huansic_motor_init+0x174>)
 8001482:	4a51      	ldr	r2, [pc, #324]	; (80015c8 <huansic_motor_init+0x16c>)
 8001484:	210d      	movs	r1, #13
 8001486:	4851      	ldr	r0, [pc, #324]	; (80015cc <huansic_motor_init+0x170>)
 8001488:	f004 fbbc 	bl	8005c04 <__assert_func>
	assert(hmotor->dt);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	f04f 0100 	mov.w	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fd1b 	bl	8000ed0 <__aeabi_fcmpeq>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <huansic_motor_init+0x50>
 80014a0:	4b4c      	ldr	r3, [pc, #304]	; (80015d4 <huansic_motor_init+0x178>)
 80014a2:	4a49      	ldr	r2, [pc, #292]	; (80015c8 <huansic_motor_init+0x16c>)
 80014a4:	210e      	movs	r1, #14
 80014a6:	4849      	ldr	r0, [pc, #292]	; (80015cc <huansic_motor_init+0x170>)
 80014a8:	f004 fbac 	bl	8005c04 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	625a      	str	r2, [r3, #36]	; 0x24
	hmotor->lastError = 0;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f04f 0200 	mov.w	r2, #0
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2200      	movs	r2, #0
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d105      	bne.n	80014f8 <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	2200      	movs	r2, #0
 80014f4:	635a      	str	r2, [r3, #52]	; 0x34
 80014f6:	e01c      	b.n	8001532 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d105      	bne.n	800150c <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2200      	movs	r2, #0
 8001508:	639a      	str	r2, [r3, #56]	; 0x38
 800150a:	e012      	b.n	8001532 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	2b08      	cmp	r3, #8
 8001512:	d105      	bne.n	8001520 <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2200      	movs	r2, #0
 800151c:	63da      	str	r2, [r3, #60]	; 0x3c
 800151e:	e008      	b.n	8001532 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	2b0c      	cmp	r3, #12
 8001526:	d104      	bne.n	8001532 <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2200      	movs	r2, #0
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d026      	beq.n	8001588 <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d105      	bne.n	800154e <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2200      	movs	r2, #0
 800154a:	635a      	str	r2, [r3, #52]	; 0x34
 800154c:	e01c      	b.n	8001588 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	2b04      	cmp	r3, #4
 8001554:	d105      	bne.n	8001562 <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2200      	movs	r2, #0
 800155e:	639a      	str	r2, [r3, #56]	; 0x38
 8001560:	e012      	b.n	8001588 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	2b08      	cmp	r3, #8
 8001568:	d105      	bne.n	8001576 <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2200      	movs	r2, #0
 8001572:	63da      	str	r2, [r3, #60]	; 0x3c
 8001574:	e008      	b.n	8001588 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	2b0c      	cmp	r3, #12
 800157c:	d104      	bne.n	8001588 <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	213c      	movs	r1, #60	; 0x3c
 800158e:	4618      	mov	r0, r3
 8001590:	f002 fea2 	bl	80042d8 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4619      	mov	r1, r3
 800159e:	4610      	mov	r0, r2
 80015a0:	f002 fd56 	bl	8004050 <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d007      	beq.n	80015bc <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689a      	ldr	r2, [r3, #8]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	4619      	mov	r1, r3
 80015b6:	4610      	mov	r0, r2
 80015b8:	f002 fd4a 	bl	8004050 <HAL_TIM_PWM_Start>
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	08006cbc 	.word	0x08006cbc
 80015c8:	08006d1c 	.word	0x08006d1c
 80015cc:	08006ccc 	.word	0x08006ccc
 80015d0:	08006cec 	.word	0x08006cec
 80015d4:	08006d00 	.word	0x08006d00

080015d8 <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 80015d8:	b590      	push	{r4, r7, lr}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	int32_t diffTick = hmotor->counter->Instance->CNT - hmotor->lastTick;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	617b      	str	r3, [r7, #20]

	hmotor->lastTick = hmotor->counter->Instance->CNT;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 80015fc:	6978      	ldr	r0, [r7, #20]
 80015fe:	f7ff fa7f 	bl	8000b00 <__aeabi_i2f>
 8001602:	4602      	mov	r2, r0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a1b      	ldr	r3, [r3, #32]
 8001608:	4619      	mov	r1, r3
 800160a:	4610      	mov	r0, r2
 800160c:	f7ff fb80 	bl	8000d10 <__aeabi_fdiv>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	62da      	str	r2, [r3, #44]	; 0x2c
	//hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f7ff f9b4 	bl	8000994 <__aeabi_fsub>
 800162c:	4603      	mov	r3, r0
 800162e:	4619      	mov	r1, r3
 8001630:	4620      	mov	r0, r4
 8001632:	f7ff f9af 	bl	8000994 <__aeabi_fsub>
 8001636:	4603      	mov	r3, r0
 8001638:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	4619      	mov	r1, r3
 8001644:	4610      	mov	r0, r2
 8001646:	f7ff f9a5 	bl	8000994 <__aeabi_fsub>
 800164a:	4603      	mov	r3, r0
 800164c:	461a      	mov	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	4619      	mov	r1, r3
 800165c:	4610      	mov	r0, r2
 800165e:	f7ff f99b 	bl	8000998 <__addsf3>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001672:	4619      	mov	r1, r3
 8001674:	4610      	mov	r0, r2
 8001676:	f7ff fa97 	bl	8000ba8 <__aeabi_fmul>
 800167a:	4603      	mov	r3, r0
 800167c:	461c      	mov	r4, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699a      	ldr	r2, [r3, #24]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001686:	4619      	mov	r1, r3
 8001688:	4610      	mov	r0, r2
 800168a:	f7ff fa8d 	bl	8000ba8 <__aeabi_fmul>
 800168e:	4603      	mov	r3, r0
 8001690:	4619      	mov	r1, r3
 8001692:	4620      	mov	r0, r4
 8001694:	f7ff f980 	bl	8000998 <__addsf3>
 8001698:	4603      	mov	r3, r0
 800169a:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	69db      	ldr	r3, [r3, #28]
 80016a0:	6939      	ldr	r1, [r7, #16]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7ff fa80 	bl	8000ba8 <__aeabi_fmul>
 80016a8:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 80016aa:	4619      	mov	r1, r3
 80016ac:	4620      	mov	r0, r4
 80016ae:	f7ff f973 	bl	8000998 <__addsf3>
 80016b2:	4603      	mov	r3, r0
 80016b4:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 80016b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80016ba:	68f8      	ldr	r0, [r7, #12]
 80016bc:	f7ff fc30 	bl	8000f20 <__aeabi_fcmpgt>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <huansic_motor_pid+0xf4>
 80016c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80016ca:	e009      	b.n	80016e0 <huansic_motor_pid+0x108>
 80016cc:	4954      	ldr	r1, [pc, #336]	; (8001820 <huansic_motor_pid+0x248>)
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f7ff fc08 	bl	8000ee4 <__aeabi_fcmplt>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <huansic_motor_pid+0x106>
 80016da:	4b51      	ldr	r3, [pc, #324]	; (8001820 <huansic_motor_pid+0x248>)
 80016dc:	e000      	b.n	80016e0 <huansic_motor_pid+0x108>
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 80016e2:	f04f 0100 	mov.w	r1, #0
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f7ff fc1a 	bl	8000f20 <__aeabi_fcmpgt>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d019      	beq.n	8001726 <huansic_motor_pid+0x14e>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff f9f9 	bl	8000af8 <__aeabi_ui2f>
 8001706:	4603      	mov	r3, r0
 8001708:	4619      	mov	r1, r3
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff fa4c 	bl	8000ba8 <__aeabi_fmul>
 8001710:	4603      	mov	r3, r0
 8001712:	4618      	mov	r0, r3
 8001714:	f005 faa0 	bl	8006c58 <roundf>
 8001718:	4603      	mov	r3, r0
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fc0a 	bl	8000f34 <__aeabi_f2uiz>
 8001720:	4603      	mov	r3, r0
 8001722:	b29b      	uxth	r3, r3
 8001724:	e000      	b.n	8001728 <huansic_motor_pid+0x150>
 8001726:	2300      	movs	r3, #0
 8001728:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 800172a:	f04f 0100 	mov.w	r1, #0
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f7ff fbd8 	bl	8000ee4 <__aeabi_fcmplt>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d019      	beq.n	800176e <huansic_motor_pid+0x196>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff f9d5 	bl	8000af8 <__aeabi_ui2f>
 800174e:	4603      	mov	r3, r0
 8001750:	4619      	mov	r1, r3
 8001752:	4620      	mov	r0, r4
 8001754:	f7ff fa28 	bl	8000ba8 <__aeabi_fmul>
 8001758:	4603      	mov	r3, r0
 800175a:	4618      	mov	r0, r3
 800175c:	f005 fa7c 	bl	8006c58 <roundf>
 8001760:	4603      	mov	r3, r0
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fbe6 	bl	8000f34 <__aeabi_f2uiz>
 8001768:	4603      	mov	r3, r0
 800176a:	b29b      	uxth	r3, r3
 800176c:	e000      	b.n	8001770 <huansic_motor_pid+0x198>
 800176e:	2300      	movs	r3, #0
 8001770:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d105      	bne.n	8001786 <huansic_motor_pid+0x1ae>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	897a      	ldrh	r2, [r7, #10]
 8001782:	635a      	str	r2, [r3, #52]	; 0x34
 8001784:	e01c      	b.n	80017c0 <huansic_motor_pid+0x1e8>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	2b04      	cmp	r3, #4
 800178c:	d105      	bne.n	800179a <huansic_motor_pid+0x1c2>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	897a      	ldrh	r2, [r7, #10]
 8001796:	639a      	str	r2, [r3, #56]	; 0x38
 8001798:	e012      	b.n	80017c0 <huansic_motor_pid+0x1e8>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d105      	bne.n	80017ae <huansic_motor_pid+0x1d6>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	897a      	ldrh	r2, [r7, #10]
 80017aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80017ac:	e008      	b.n	80017c0 <huansic_motor_pid+0x1e8>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	2b0c      	cmp	r3, #12
 80017b4:	d104      	bne.n	80017c0 <huansic_motor_pid+0x1e8>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	897a      	ldrh	r2, [r7, #10]
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d026      	beq.n	8001816 <huansic_motor_pid+0x23e>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d105      	bne.n	80017dc <huansic_motor_pid+0x204>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	893a      	ldrh	r2, [r7, #8]
 80017d8:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 80017da:	e01c      	b.n	8001816 <huansic_motor_pid+0x23e>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d105      	bne.n	80017f0 <huansic_motor_pid+0x218>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	893a      	ldrh	r2, [r7, #8]
 80017ec:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017ee:	e012      	b.n	8001816 <huansic_motor_pid+0x23e>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d105      	bne.n	8001804 <huansic_motor_pid+0x22c>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	893a      	ldrh	r2, [r7, #8]
 8001800:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001802:	e008      	b.n	8001816 <huansic_motor_pid+0x23e>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	2b0c      	cmp	r3, #12
 800180a:	d104      	bne.n	8001816 <huansic_motor_pid+0x23e>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	893a      	ldrh	r2, [r7, #8]
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001816:	bf00      	nop
 8001818:	371c      	adds	r7, #28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}
 800181e:	bf00      	nop
 8001820:	bf800000 	.word	0xbf800000

08001824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800182a:	f000 ffd1 	bl	80027d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800182e:	f000 f8bb 	bl	80019a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001832:	f000 fb37 	bl	8001ea4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001836:	f000 fb0f 	bl	8001e58 <MX_DMA_Init>
  MX_I2C1_Init();
 800183a:	f000 f8fb 	bl	8001a34 <MX_I2C1_Init>
  MX_TIM1_Init();
 800183e:	f000 f927 	bl	8001a90 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001842:	f000 f975 	bl	8001b30 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001846:	f000 f9c7 	bl	8001bd8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800184a:	f000 fa5d 	bl	8001d08 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800184e:	f000 fad9 	bl	8001e04 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001852:	f000 faad 	bl	8001db0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	RED_LED_ON;
 8001856:	2201      	movs	r2, #1
 8001858:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800185c:	484d      	ldr	r0, [pc, #308]	; (8001994 <main+0x170>)
 800185e:	f001 fd6d 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001862:	20c8      	movs	r0, #200	; 0xc8
 8001864:	f001 f816 	bl	8002894 <HAL_Delay>
	RED_LED_OFF;
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800186e:	4849      	ldr	r0, [pc, #292]	; (8001994 <main+0x170>)
 8001870:	f001 fd64 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001874:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001878:	f001 f80c 	bl	8002894 <HAL_Delay>
	HUAN_MOTOR_LEFT_Init();
 800187c:	f000 fb5e 	bl	8001f3c <HUAN_MOTOR_LEFT_Init>
	HUAN_MOTOR_RIGHT_Init();
 8001880:	f000 fb8c 	bl	8001f9c <HUAN_MOTOR_RIGHT_Init>

	RED_LED_ON;
 8001884:	2201      	movs	r2, #1
 8001886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800188a:	4842      	ldr	r0, [pc, #264]	; (8001994 <main+0x170>)
 800188c:	f001 fd56 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001890:	20c8      	movs	r0, #200	; 0xc8
 8001892:	f000 ffff 	bl	8002894 <HAL_Delay>
	RED_LED_OFF;
 8001896:	2200      	movs	r2, #0
 8001898:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800189c:	483d      	ldr	r0, [pc, #244]	; (8001994 <main+0x170>)
 800189e:	f001 fd4d 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80018a2:	20c8      	movs	r0, #200	; 0xc8
 80018a4:	f000 fff6 	bl	8002894 <HAL_Delay>
	RED_LED_ON;
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ae:	4839      	ldr	r0, [pc, #228]	; (8001994 <main+0x170>)
 80018b0:	f001 fd44 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80018b4:	20c8      	movs	r0, #200	; 0xc8
 80018b6:	f000 ffed 	bl	8002894 <HAL_Delay>
	RED_LED_OFF;
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c0:	4834      	ldr	r0, [pc, #208]	; (8001994 <main+0x170>)
 80018c2:	f001 fd3b 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80018c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80018ca:	f000 ffe3 	bl	8002894 <HAL_Delay>
	HUAN_IMU_Init();
 80018ce:	f000 fb95 	bl	8001ffc <HUAN_IMU_Init>

	RED_LED_ON;
 80018d2:	2201      	movs	r2, #1
 80018d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018d8:	482e      	ldr	r0, [pc, #184]	; (8001994 <main+0x170>)
 80018da:	f001 fd2f 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80018de:	20c8      	movs	r0, #200	; 0xc8
 80018e0:	f000 ffd8 	bl	8002894 <HAL_Delay>
	RED_LED_OFF;
 80018e4:	2200      	movs	r2, #0
 80018e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ea:	482a      	ldr	r0, [pc, #168]	; (8001994 <main+0x170>)
 80018ec:	f001 fd26 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 80018f0:	20c8      	movs	r0, #200	; 0xc8
 80018f2:	f000 ffcf 	bl	8002894 <HAL_Delay>
	RED_LED_ON;
 80018f6:	2201      	movs	r2, #1
 80018f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018fc:	4825      	ldr	r0, [pc, #148]	; (8001994 <main+0x170>)
 80018fe:	f001 fd1d 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001902:	20c8      	movs	r0, #200	; 0xc8
 8001904:	f000 ffc6 	bl	8002894 <HAL_Delay>
	RED_LED_OFF;
 8001908:	2200      	movs	r2, #0
 800190a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800190e:	4821      	ldr	r0, [pc, #132]	; (8001994 <main+0x170>)
 8001910:	f001 fd14 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001914:	20c8      	movs	r0, #200	; 0xc8
 8001916:	f000 ffbd 	bl	8002894 <HAL_Delay>
	RED_LED_ON;
 800191a:	2201      	movs	r2, #1
 800191c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001920:	481c      	ldr	r0, [pc, #112]	; (8001994 <main+0x170>)
 8001922:	f001 fd0b 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001926:	20c8      	movs	r0, #200	; 0xc8
 8001928:	f000 ffb4 	bl	8002894 <HAL_Delay>
	RED_LED_OFF;
 800192c:	2200      	movs	r2, #0
 800192e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001932:	4818      	ldr	r0, [pc, #96]	; (8001994 <main+0x170>)
 8001934:	f001 fd02 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800193c:	f000 ffaa 	bl	8002894 <HAL_Delay>
	// HUAN_ZIGBEE_Init();

	hmotor_left.goalSpeed = 1000;
 8001940:	4b15      	ldr	r3, [pc, #84]	; (8001998 <main+0x174>)
 8001942:	4a16      	ldr	r2, [pc, #88]	; (800199c <main+0x178>)
 8001944:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor_right.goalSpeed = 1000;
 8001946:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <main+0x17c>)
 8001948:	4a14      	ldr	r2, [pc, #80]	; (800199c <main+0x178>)
 800194a:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_TIM_Base_Start_IT(&htim1);		// for PID
 800194c:	4815      	ldr	r0, [pc, #84]	; (80019a4 <main+0x180>)
 800194e:	f002 fad5 	bl	8003efc <HAL_TIM_Base_Start_IT>

	RED_LED_ON;
 8001952:	2201      	movs	r2, #1
 8001954:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001958:	480e      	ldr	r0, [pc, #56]	; (8001994 <main+0x170>)
 800195a:	f001 fcef 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(3000);
 800195e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001962:	f000 ff97 	bl	8002894 <HAL_Delay>
	RED_LED_OFF;
 8001966:	2200      	movs	r2, #0
 8001968:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800196c:	4809      	ldr	r0, [pc, #36]	; (8001994 <main+0x170>)
 800196e:	f001 fce5 	bl	800333c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001972:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001976:	f000 ff8d 	bl	8002894 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	uint8_t dc = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	71fb      	strb	r3, [r7, #7]
	while (1)
	{
		GREEN_LED_TOGGLE;
 800197e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001982:	4804      	ldr	r0, [pc, #16]	; (8001994 <main+0x170>)
 8001984:	f001 fcf2 	bl	800336c <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8001988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800198c:	f000 ff82 	bl	8002894 <HAL_Delay>
		GREEN_LED_TOGGLE;
 8001990:	e7f5      	b.n	800197e <main+0x15a>
 8001992:	bf00      	nop
 8001994:	40010c00 	.word	0x40010c00
 8001998:	20000314 	.word	0x20000314
 800199c:	447a0000 	.word	0x447a0000
 80019a0:	20000350 	.word	0x20000350
 80019a4:	200000e4 	.word	0x200000e4

080019a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b090      	sub	sp, #64	; 0x40
 80019ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ae:	f107 0318 	add.w	r3, r7, #24
 80019b2:	2228      	movs	r2, #40	; 0x28
 80019b4:	2100      	movs	r1, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	f004 f97e 	bl	8005cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
 80019c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019ca:	2301      	movs	r3, #1
 80019cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019d4:	2300      	movs	r3, #0
 80019d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019d8:	2301      	movs	r3, #1
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019dc:	2302      	movs	r3, #2
 80019de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019e6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ec:	f107 0318 	add.w	r3, r7, #24
 80019f0:	4618      	mov	r0, r3
 80019f2:	f001 fe19 	bl	8003628 <HAL_RCC_OscConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80019fc:	f000 fb0c 	bl	8002018 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a00:	230f      	movs	r3, #15
 8001a02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a04:	2302      	movs	r3, #2
 8001a06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2102      	movs	r1, #2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 f886 	bl	8003b2c <HAL_RCC_ClockConfig>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a26:	f000 faf7 	bl	8002018 <Error_Handler>
  }
}
 8001a2a:	bf00      	nop
 8001a2c:	3740      	adds	r7, #64	; 0x40
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <MX_I2C1_Init+0x54>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a40:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <MX_I2C1_Init+0x58>)
 8001a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a72:	f001 fc95 	bl	80033a0 <HAL_I2C_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a7c:	f000 facc 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000090 	.word	0x20000090
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	000186a0 	.word	0x000186a0

08001a90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aac:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <MX_TIM1_Init+0x98>)
 8001aae:	4a1f      	ldr	r2, [pc, #124]	; (8001b2c <MX_TIM1_Init+0x9c>)
 8001ab0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <MX_TIM1_Init+0x98>)
 8001ab4:	2247      	movs	r2, #71	; 0x47
 8001ab6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <MX_TIM1_Init+0x98>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000 - 1;
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <MX_TIM1_Init+0x98>)
 8001ac0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001ac4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac6:	4b18      	ldr	r3, [pc, #96]	; (8001b28 <MX_TIM1_Init+0x98>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <MX_TIM1_Init+0x98>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <MX_TIM1_Init+0x98>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ad8:	4813      	ldr	r0, [pc, #76]	; (8001b28 <MX_TIM1_Init+0x98>)
 8001ada:	f002 f9bf 	bl	8003e5c <HAL_TIM_Base_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ae4:	f000 fa98 	bl	8002018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001aee:	f107 0308 	add.w	r3, r7, #8
 8001af2:	4619      	mov	r1, r3
 8001af4:	480c      	ldr	r0, [pc, #48]	; (8001b28 <MX_TIM1_Init+0x98>)
 8001af6:	f002 fe43 	bl	8004780 <HAL_TIM_ConfigClockSource>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b00:	f000 fa8a 	bl	8002018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_TIM1_Init+0x98>)
 8001b12:	f003 f9cb 	bl	8004eac <HAL_TIMEx_MasterConfigSynchronization>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b1c:	f000 fa7c 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b20:	bf00      	nop
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200000e4 	.word	0x200000e4
 8001b2c:	40012c00 	.word	0x40012c00

08001b30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08c      	sub	sp, #48	; 0x30
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b36:	f107 030c 	add.w	r3, r7, #12
 8001b3a:	2224      	movs	r2, #36	; 0x24
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f004 f8ba 	bl	8005cb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001b4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b54:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b60:	4b1c      	ldr	r3, [pc, #112]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b68:	4b1a      	ldr	r3, [pc, #104]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b74:	2301      	movs	r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b90:	2300      	movs	r3, #0
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001ba0:	f002 faf8 	bl	8004194 <HAL_TIM_Encoder_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001baa:	f000 fa35 	bl	8002018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <MX_TIM2_Init+0xa4>)
 8001bbc:	f003 f976 	bl	8004eac <HAL_TIMEx_MasterConfigSynchronization>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001bc6:	f000 fa27 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bca:	bf00      	nop
 8001bcc:	3730      	adds	r7, #48	; 0x30
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2000012c 	.word	0x2000012c

08001bd8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b08e      	sub	sp, #56	; 0x38
 8001bdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bec:	f107 0320 	add.w	r3, r7, #32
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
 8001c04:	615a      	str	r2, [r3, #20]
 8001c06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c08:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001c0a:	4a3e      	ldr	r2, [pc, #248]	; (8001d04 <MX_TIM3_Init+0x12c>)
 8001c0c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c0e:	4b3c      	ldr	r3, [pc, #240]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c14:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 72*40 - 1;
 8001c1a:	4b39      	ldr	r3, [pc, #228]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001c1c:	f640 323f 	movw	r2, #2879	; 0xb3f
 8001c20:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c22:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c28:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c2e:	4834      	ldr	r0, [pc, #208]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001c30:	f002 f914 	bl	8003e5c <HAL_TIM_Base_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c3a:	f000 f9ed 	bl	8002018 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c48:	4619      	mov	r1, r3
 8001c4a:	482d      	ldr	r0, [pc, #180]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001c4c:	f002 fd98 	bl	8004780 <HAL_TIM_ConfigClockSource>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c56:	f000 f9df 	bl	8002018 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c5a:	4829      	ldr	r0, [pc, #164]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001c5c:	f002 f9a0 	bl	8003fa0 <HAL_TIM_PWM_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c66:	f000 f9d7 	bl	8002018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c72:	f107 0320 	add.w	r3, r7, #32
 8001c76:	4619      	mov	r1, r3
 8001c78:	4821      	ldr	r0, [pc, #132]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001c7a:	f003 f917 	bl	8004eac <HAL_TIMEx_MasterConfigSynchronization>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c84:	f000 f9c8 	bl	8002018 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c88:	2360      	movs	r3, #96	; 0x60
 8001c8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c98:	1d3b      	adds	r3, r7, #4
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4818      	ldr	r0, [pc, #96]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001ca0:	f002 fcb0 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001caa:	f000 f9b5 	bl	8002018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4812      	ldr	r0, [pc, #72]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001cb6:	f002 fca5 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001cc0:	f000 f9aa 	bl	8002018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cc4:	1d3b      	adds	r3, r7, #4
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480d      	ldr	r0, [pc, #52]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001ccc:	f002 fc9a 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001cd6:	f000 f99f 	bl	8002018 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	220c      	movs	r2, #12
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4807      	ldr	r0, [pc, #28]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001ce2:	f002 fc8f 	bl	8004604 <HAL_TIM_PWM_ConfigChannel>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001cec:	f000 f994 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <MX_TIM3_Init+0x128>)
 8001cf2:	f000 facd 	bl	8002290 <HAL_TIM_MspPostInit>

}
 8001cf6:	bf00      	nop
 8001cf8:	3738      	adds	r7, #56	; 0x38
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000174 	.word	0x20000174
 8001d04:	40000400 	.word	0x40000400

08001d08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	; 0x30
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d0e:	f107 030c 	add.w	r3, r7, #12
 8001d12:	2224      	movs	r2, #36	; 0x24
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 ffce 	bl	8005cb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	1d3b      	adds	r3, r7, #4
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d24:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <MX_TIM4_Init+0xa0>)
 8001d26:	4a21      	ldr	r2, [pc, #132]	; (8001dac <MX_TIM4_Init+0xa4>)
 8001d28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d2a:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <MX_TIM4_Init+0xa0>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d30:	4b1d      	ldr	r3, [pc, #116]	; (8001da8 <MX_TIM4_Init+0xa0>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d36:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <MX_TIM4_Init+0xa0>)
 8001d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <MX_TIM4_Init+0xa0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <MX_TIM4_Init+0xa0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d52:	2301      	movs	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d62:	2301      	movs	r3, #1
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	4619      	mov	r1, r3
 8001d74:	480c      	ldr	r0, [pc, #48]	; (8001da8 <MX_TIM4_Init+0xa0>)
 8001d76:	f002 fa0d 	bl	8004194 <HAL_TIM_Encoder_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001d80:	f000 f94a 	bl	8002018 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_TIM4_Init+0xa0>)
 8001d92:	f003 f88b 	bl	8004eac <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001d9c:	f000 f93c 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	3730      	adds	r7, #48	; 0x30
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200001bc 	.word	0x200001bc
 8001dac:	40000800 	.word	0x40000800

08001db0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <MX_USART1_UART_Init+0x4c>)
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <MX_USART1_UART_Init+0x50>)
 8001db8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <MX_USART1_UART_Init+0x4c>)
 8001dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <MX_USART1_UART_Init+0x4c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <MX_USART1_UART_Init+0x4c>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dce:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <MX_USART1_UART_Init+0x4c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd4:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <MX_USART1_UART_Init+0x4c>)
 8001dd6:	220c      	movs	r2, #12
 8001dd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dda:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <MX_USART1_UART_Init+0x4c>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <MX_USART1_UART_Init+0x4c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001de6:	4805      	ldr	r0, [pc, #20]	; (8001dfc <MX_USART1_UART_Init+0x4c>)
 8001de8:	f003 f8d0 	bl	8004f8c <HAL_UART_Init>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001df2:	f000 f911 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000204 	.word	0x20000204
 8001e00:	40013800 	.word	0x40013800

08001e04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <MX_USART2_UART_Init+0x50>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e3a:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_USART2_UART_Init+0x4c>)
 8001e3c:	f003 f8a6 	bl	8004f8c <HAL_UART_Init>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e46:	f000 f8e7 	bl	8002018 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20000248 	.word	0x20000248
 8001e54:	40004400 	.word	0x40004400

08001e58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <MX_DMA_Init+0x48>)
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <MX_DMA_Init+0x48>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6153      	str	r3, [r2, #20]
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <MX_DMA_Init+0x48>)
 8001e6c:	695b      	ldr	r3, [r3, #20]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	200f      	movs	r0, #15
 8001e7c:	f000 fe05 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e80:	200f      	movs	r0, #15
 8001e82:	f000 fe1e 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2100      	movs	r1, #0
 8001e8a:	2010      	movs	r0, #16
 8001e8c:	f000 fdfd 	bl	8002a8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001e90:	2010      	movs	r0, #16
 8001e92:	f000 fe16 	bl	8002ac2 <HAL_NVIC_EnableIRQ>

}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eaa:	f107 0310 	add.w	r3, r7, #16
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb8:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <MX_GPIO_Init+0x90>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <MX_GPIO_Init+0x90>)
 8001ebe:	f043 0320 	orr.w	r3, r3, #32
 8001ec2:	6193      	str	r3, [r2, #24]
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <MX_GPIO_Init+0x90>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0320 	and.w	r3, r3, #32
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed0:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <MX_GPIO_Init+0x90>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4a17      	ldr	r2, [pc, #92]	; (8001f34 <MX_GPIO_Init+0x90>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <MX_GPIO_Init+0x90>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <MX_GPIO_Init+0x90>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a11      	ldr	r2, [pc, #68]	; (8001f34 <MX_GPIO_Init+0x90>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_GPIO_Init+0x90>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001f06:	480c      	ldr	r0, [pc, #48]	; (8001f38 <MX_GPIO_Init+0x94>)
 8001f08:	f001 fa18 	bl	800333c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Buzzer_Pin LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8001f0c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001f10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f12:	2301      	movs	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f1e:	f107 0310 	add.w	r3, r7, #16
 8001f22:	4619      	mov	r1, r3
 8001f24:	4804      	ldr	r0, [pc, #16]	; (8001f38 <MX_GPIO_Init+0x94>)
 8001f26:	f001 f885 	bl	8003034 <HAL_GPIO_Init>

}
 8001f2a:	bf00      	nop
 8001f2c:	3720      	adds	r7, #32
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40010c00 	.word	0x40010c00

08001f3c <HUAN_MOTOR_LEFT_Init>:

/* USER CODE BEGIN 4 */
static void HUAN_MOTOR_LEFT_Init(void) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	hmotor_left.counter = &htim4;
 8001f40:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HUAN_MOTOR_LEFT_Init+0x48>)
 8001f42:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HUAN_MOTOR_LEFT_Init+0x4c>)
 8001f44:	601a      	str	r2, [r3, #0]
	hmotor_left.dt = 0.05;
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HUAN_MOTOR_LEFT_Init+0x48>)
 8001f48:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HUAN_MOTOR_LEFT_Init+0x50>)
 8001f4a:	621a      	str	r2, [r3, #32]
	hmotor_left.posTimer = &htim3;
 8001f4c:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HUAN_MOTOR_LEFT_Init+0x48>)
 8001f4e:	4a10      	ldr	r2, [pc, #64]	; (8001f90 <HUAN_MOTOR_LEFT_Init+0x54>)
 8001f50:	605a      	str	r2, [r3, #4]
	hmotor_left.pos_channel = TIM_CHANNEL_4;
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HUAN_MOTOR_LEFT_Init+0x48>)
 8001f54:	220c      	movs	r2, #12
 8001f56:	60da      	str	r2, [r3, #12]
	hmotor_left.negTimer = &htim3;
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HUAN_MOTOR_LEFT_Init+0x48>)
 8001f5a:	4a0d      	ldr	r2, [pc, #52]	; (8001f90 <HUAN_MOTOR_LEFT_Init+0x54>)
 8001f5c:	609a      	str	r2, [r3, #8]
	hmotor_left.neg_channel = TIM_CHANNEL_3;
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HUAN_MOTOR_LEFT_Init+0x48>)
 8001f60:	2208      	movs	r2, #8
 8001f62:	611a      	str	r2, [r3, #16]
	hmotor_left.kp = 0.00005;
 8001f64:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <HUAN_MOTOR_LEFT_Init+0x48>)
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <HUAN_MOTOR_LEFT_Init+0x58>)
 8001f68:	615a      	str	r2, [r3, #20]
	hmotor_left.ki = 0.0001;
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HUAN_MOTOR_LEFT_Init+0x48>)
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <HUAN_MOTOR_LEFT_Init+0x5c>)
 8001f6e:	619a      	str	r2, [r3, #24]
	hmotor_left.kd = 0.0000;
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <HUAN_MOTOR_LEFT_Init+0x48>)
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&hmotor_left);
 8001f78:	4802      	ldr	r0, [pc, #8]	; (8001f84 <HUAN_MOTOR_LEFT_Init+0x48>)
 8001f7a:	f7ff fa6f 	bl	800145c <huansic_motor_init>
}
 8001f7e:	bf00      	nop
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000314 	.word	0x20000314
 8001f88:	200001bc 	.word	0x200001bc
 8001f8c:	3d4ccccd 	.word	0x3d4ccccd
 8001f90:	20000174 	.word	0x20000174
 8001f94:	3851b717 	.word	0x3851b717
 8001f98:	38d1b717 	.word	0x38d1b717

08001f9c <HUAN_MOTOR_RIGHT_Init>:

static void HUAN_MOTOR_RIGHT_Init(void) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
	hmotor_right.counter = &htim2;
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8001fa2:	4a11      	ldr	r2, [pc, #68]	; (8001fe8 <HUAN_MOTOR_RIGHT_Init+0x4c>)
 8001fa4:	601a      	str	r2, [r3, #0]
	hmotor_right.dt = 0.05;
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8001fa8:	4a10      	ldr	r2, [pc, #64]	; (8001fec <HUAN_MOTOR_RIGHT_Init+0x50>)
 8001faa:	621a      	str	r2, [r3, #32]
	hmotor_right.posTimer = &htim3;
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8001fae:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <HUAN_MOTOR_RIGHT_Init+0x54>)
 8001fb0:	605a      	str	r2, [r3, #4]
	hmotor_right.pos_channel = TIM_CHANNEL_1;
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]
	hmotor_right.negTimer = &htim3;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8001fba:	4a0d      	ldr	r2, [pc, #52]	; (8001ff0 <HUAN_MOTOR_RIGHT_Init+0x54>)
 8001fbc:	609a      	str	r2, [r3, #8]
	hmotor_right.neg_channel = TIM_CHANNEL_2;
 8001fbe:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	611a      	str	r2, [r3, #16]
	hmotor_right.kp = 0.00005;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <HUAN_MOTOR_RIGHT_Init+0x58>)
 8001fc8:	615a      	str	r2, [r3, #20]
	hmotor_right.ki = 0.0001;
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HUAN_MOTOR_RIGHT_Init+0x5c>)
 8001fce:	619a      	str	r2, [r3, #24]
	hmotor_right.kd = 0.0000;
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&hmotor_right);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8001fda:	f7ff fa3f 	bl	800145c <huansic_motor_init>
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000350 	.word	0x20000350
 8001fe8:	2000012c 	.word	0x2000012c
 8001fec:	3d4ccccd 	.word	0x3d4ccccd
 8001ff0:	20000174 	.word	0x20000174
 8001ff4:	3851b717 	.word	0x3851b717
 8001ff8:	38d1b717 	.word	0x38d1b717

08001ffc <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
	himu.uartPort = &huart1;
 8002000:	4b03      	ldr	r3, [pc, #12]	; (8002010 <HUAN_IMU_Init+0x14>)
 8002002:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HUAN_IMU_Init+0x18>)
 8002004:	601a      	str	r2, [r3, #0]
	huansic_jy62_init(&himu);
 8002006:	4802      	ldr	r0, [pc, #8]	; (8002010 <HUAN_IMU_Init+0x14>)
 8002008:	f7fe ffb4 	bl	8000f74 <huansic_jy62_init>
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	2000038c 	.word	0x2000038c
 8002014:	20000204 	.word	0x20000204

08002018 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800201c:	b672      	cpsid	i
}
 800201e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002020:	e7fe      	b.n	8002020 <Error_Handler+0x8>
	...

08002024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800202a:	4b15      	ldr	r3, [pc, #84]	; (8002080 <HAL_MspInit+0x5c>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	4a14      	ldr	r2, [pc, #80]	; (8002080 <HAL_MspInit+0x5c>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6193      	str	r3, [r2, #24]
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_MspInit+0x5c>)
 8002038:	699b      	ldr	r3, [r3, #24]
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002042:	4b0f      	ldr	r3, [pc, #60]	; (8002080 <HAL_MspInit+0x5c>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	4a0e      	ldr	r2, [pc, #56]	; (8002080 <HAL_MspInit+0x5c>)
 8002048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800204c:	61d3      	str	r3, [r2, #28]
 800204e:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <HAL_MspInit+0x5c>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_MspInit+0x60>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800206e:	60fb      	str	r3, [r7, #12]
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_MspInit+0x60>)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002076:	bf00      	nop
 8002078:	3714      	adds	r7, #20
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	40021000 	.word	0x40021000
 8002084:	40010000 	.word	0x40010000

08002088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08a      	sub	sp, #40	; 0x28
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1d      	ldr	r2, [pc, #116]	; (8002118 <HAL_I2C_MspInit+0x90>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d132      	bne.n	800210e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a8:	4b1c      	ldr	r3, [pc, #112]	; (800211c <HAL_I2C_MspInit+0x94>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <HAL_I2C_MspInit+0x94>)
 80020ae:	f043 0308 	orr.w	r3, r3, #8
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_I2C_MspInit+0x94>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c6:	2312      	movs	r3, #18
 80020c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	4619      	mov	r1, r3
 80020d4:	4812      	ldr	r0, [pc, #72]	; (8002120 <HAL_I2C_MspInit+0x98>)
 80020d6:	f000 ffad 	bl	8003034 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_I2C_MspInit+0x9c>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	f043 0302 	orr.w	r3, r3, #2
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
 80020f0:	4a0c      	ldr	r2, [pc, #48]	; (8002124 <HAL_I2C_MspInit+0x9c>)
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_I2C_MspInit+0x94>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <HAL_I2C_MspInit+0x94>)
 80020fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002100:	61d3      	str	r3, [r2, #28]
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_I2C_MspInit+0x94>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800210e:	bf00      	nop
 8002110:	3728      	adds	r7, #40	; 0x28
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40005400 	.word	0x40005400
 800211c:	40021000 	.word	0x40021000
 8002120:	40010c00 	.word	0x40010c00
 8002124:	40010000 	.word	0x40010000

08002128 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a16      	ldr	r2, [pc, #88]	; (8002190 <HAL_TIM_Base_MspInit+0x68>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d114      	bne.n	8002164 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <HAL_TIM_Base_MspInit+0x6c>)
 800213c:	699b      	ldr	r3, [r3, #24]
 800213e:	4a15      	ldr	r2, [pc, #84]	; (8002194 <HAL_TIM_Base_MspInit+0x6c>)
 8002140:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002144:	6193      	str	r3, [r2, #24]
 8002146:	4b13      	ldr	r3, [pc, #76]	; (8002194 <HAL_TIM_Base_MspInit+0x6c>)
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8002152:	2200      	movs	r2, #0
 8002154:	2100      	movs	r1, #0
 8002156:	2019      	movs	r0, #25
 8002158:	f000 fc97 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800215c:	2019      	movs	r0, #25
 800215e:	f000 fcb0 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002162:	e010      	b.n	8002186 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0b      	ldr	r2, [pc, #44]	; (8002198 <HAL_TIM_Base_MspInit+0x70>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d10b      	bne.n	8002186 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_TIM_Base_MspInit+0x6c>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	4a08      	ldr	r2, [pc, #32]	; (8002194 <HAL_TIM_Base_MspInit+0x6c>)
 8002174:	f043 0302 	orr.w	r3, r3, #2
 8002178:	61d3      	str	r3, [r2, #28]
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_TIM_Base_MspInit+0x6c>)
 800217c:	69db      	ldr	r3, [r3, #28]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	60bb      	str	r3, [r7, #8]
 8002184:	68bb      	ldr	r3, [r7, #8]
}
 8002186:	bf00      	nop
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40012c00 	.word	0x40012c00
 8002194:	40021000 	.word	0x40021000
 8002198:	40000400 	.word	0x40000400

0800219c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a4:	f107 0318 	add.w	r3, r7, #24
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
 80021b0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ba:	d12c      	bne.n	8002216 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021bc:	4b30      	ldr	r3, [pc, #192]	; (8002280 <HAL_TIM_Encoder_MspInit+0xe4>)
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	4a2f      	ldr	r2, [pc, #188]	; (8002280 <HAL_TIM_Encoder_MspInit+0xe4>)
 80021c2:	f043 0301 	orr.w	r3, r3, #1
 80021c6:	61d3      	str	r3, [r2, #28]
 80021c8:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_TIM_Encoder_MspInit+0xe4>)
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d4:	4b2a      	ldr	r3, [pc, #168]	; (8002280 <HAL_TIM_Encoder_MspInit+0xe4>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	4a29      	ldr	r2, [pc, #164]	; (8002280 <HAL_TIM_Encoder_MspInit+0xe4>)
 80021da:	f043 0304 	orr.w	r3, r3, #4
 80021de:	6193      	str	r3, [r2, #24]
 80021e0:	4b27      	ldr	r3, [pc, #156]	; (8002280 <HAL_TIM_Encoder_MspInit+0xe4>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021ec:	2303      	movs	r3, #3
 80021ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	f107 0318 	add.w	r3, r7, #24
 80021fc:	4619      	mov	r1, r3
 80021fe:	4821      	ldr	r0, [pc, #132]	; (8002284 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002200:	f000 ff18 	bl	8003034 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2101      	movs	r1, #1
 8002208:	201c      	movs	r0, #28
 800220a:	f000 fc3e 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800220e:	201c      	movs	r0, #28
 8002210:	f000 fc57 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002214:	e030      	b.n	8002278 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <HAL_TIM_Encoder_MspInit+0xec>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d12b      	bne.n	8002278 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002220:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002222:	69db      	ldr	r3, [r3, #28]
 8002224:	4a16      	ldr	r2, [pc, #88]	; (8002280 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002226:	f043 0304 	orr.w	r3, r3, #4
 800222a:	61d3      	str	r3, [r2, #28]
 800222c:	4b14      	ldr	r3, [pc, #80]	; (8002280 <HAL_TIM_Encoder_MspInit+0xe4>)
 800222e:	69db      	ldr	r3, [r3, #28]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002238:	4b11      	ldr	r3, [pc, #68]	; (8002280 <HAL_TIM_Encoder_MspInit+0xe4>)
 800223a:	699b      	ldr	r3, [r3, #24]
 800223c:	4a10      	ldr	r2, [pc, #64]	; (8002280 <HAL_TIM_Encoder_MspInit+0xe4>)
 800223e:	f043 0308 	orr.w	r3, r3, #8
 8002242:	6193      	str	r3, [r2, #24]
 8002244:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <HAL_TIM_Encoder_MspInit+0xe4>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	f003 0308 	and.w	r3, r3, #8
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002250:	23c0      	movs	r3, #192	; 0xc0
 8002252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225c:	f107 0318 	add.w	r3, r7, #24
 8002260:	4619      	mov	r1, r3
 8002262:	480a      	ldr	r0, [pc, #40]	; (800228c <HAL_TIM_Encoder_MspInit+0xf0>)
 8002264:	f000 fee6 	bl	8003034 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8002268:	2200      	movs	r2, #0
 800226a:	2101      	movs	r1, #1
 800226c:	201e      	movs	r0, #30
 800226e:	f000 fc0c 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002272:	201e      	movs	r0, #30
 8002274:	f000 fc25 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
}
 8002278:	bf00      	nop
 800227a:	3728      	adds	r7, #40	; 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40021000 	.word	0x40021000
 8002284:	40010800 	.word	0x40010800
 8002288:	40000800 	.word	0x40000800
 800228c:	40010c00 	.word	0x40010c00

08002290 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b088      	sub	sp, #32
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0310 	add.w	r3, r7, #16
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a1b      	ldr	r2, [pc, #108]	; (8002318 <HAL_TIM_MspPostInit+0x88>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d12f      	bne.n	8002310 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b0:	4b1a      	ldr	r3, [pc, #104]	; (800231c <HAL_TIM_MspPostInit+0x8c>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4a19      	ldr	r2, [pc, #100]	; (800231c <HAL_TIM_MspPostInit+0x8c>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6193      	str	r3, [r2, #24]
 80022bc:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_TIM_MspPostInit+0x8c>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <HAL_TIM_MspPostInit+0x8c>)
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	4a13      	ldr	r2, [pc, #76]	; (800231c <HAL_TIM_MspPostInit+0x8c>)
 80022ce:	f043 0308 	orr.w	r3, r3, #8
 80022d2:	6193      	str	r3, [r2, #24]
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_TIM_MspPostInit+0x8c>)
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	f003 0308 	and.w	r3, r3, #8
 80022dc:	60bb      	str	r3, [r7, #8]
 80022de:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022e0:	23c0      	movs	r3, #192	; 0xc0
 80022e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e4:	2302      	movs	r3, #2
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2302      	movs	r3, #2
 80022ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ec:	f107 0310 	add.w	r3, r7, #16
 80022f0:	4619      	mov	r1, r3
 80022f2:	480b      	ldr	r0, [pc, #44]	; (8002320 <HAL_TIM_MspPostInit+0x90>)
 80022f4:	f000 fe9e 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022f8:	2303      	movs	r3, #3
 80022fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fc:	2302      	movs	r3, #2
 80022fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2302      	movs	r3, #2
 8002302:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	4619      	mov	r1, r3
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <HAL_TIM_MspPostInit+0x94>)
 800230c:	f000 fe92 	bl	8003034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002310:	bf00      	nop
 8002312:	3720      	adds	r7, #32
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40000400 	.word	0x40000400
 800231c:	40021000 	.word	0x40021000
 8002320:	40010800 	.word	0x40010800
 8002324:	40010c00 	.word	0x40010c00

08002328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002330:	f107 0318 	add.w	r3, r7, #24
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a65      	ldr	r2, [pc, #404]	; (80024d8 <HAL_UART_MspInit+0x1b0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d160      	bne.n	800240a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002348:	4b64      	ldr	r3, [pc, #400]	; (80024dc <HAL_UART_MspInit+0x1b4>)
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	4a63      	ldr	r2, [pc, #396]	; (80024dc <HAL_UART_MspInit+0x1b4>)
 800234e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002352:	6193      	str	r3, [r2, #24]
 8002354:	4b61      	ldr	r3, [pc, #388]	; (80024dc <HAL_UART_MspInit+0x1b4>)
 8002356:	699b      	ldr	r3, [r3, #24]
 8002358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002360:	4b5e      	ldr	r3, [pc, #376]	; (80024dc <HAL_UART_MspInit+0x1b4>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a5d      	ldr	r2, [pc, #372]	; (80024dc <HAL_UART_MspInit+0x1b4>)
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b5b      	ldr	r3, [pc, #364]	; (80024dc <HAL_UART_MspInit+0x1b4>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8002378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800237c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8002386:	f107 0318 	add.w	r3, r7, #24
 800238a:	4619      	mov	r1, r3
 800238c:	4854      	ldr	r0, [pc, #336]	; (80024e0 <HAL_UART_MspInit+0x1b8>)
 800238e:	f000 fe51 	bl	8003034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JY_RX_Pin;
 8002392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 80023a0:	f107 0318 	add.w	r3, r7, #24
 80023a4:	4619      	mov	r1, r3
 80023a6:	484e      	ldr	r0, [pc, #312]	; (80024e0 <HAL_UART_MspInit+0x1b8>)
 80023a8:	f000 fe44 	bl	8003034 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80023ac:	4b4d      	ldr	r3, [pc, #308]	; (80024e4 <HAL_UART_MspInit+0x1bc>)
 80023ae:	4a4e      	ldr	r2, [pc, #312]	; (80024e8 <HAL_UART_MspInit+0x1c0>)
 80023b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023b2:	4b4c      	ldr	r3, [pc, #304]	; (80024e4 <HAL_UART_MspInit+0x1bc>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023b8:	4b4a      	ldr	r3, [pc, #296]	; (80024e4 <HAL_UART_MspInit+0x1bc>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023be:	4b49      	ldr	r3, [pc, #292]	; (80024e4 <HAL_UART_MspInit+0x1bc>)
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023c4:	4b47      	ldr	r3, [pc, #284]	; (80024e4 <HAL_UART_MspInit+0x1bc>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ca:	4b46      	ldr	r3, [pc, #280]	; (80024e4 <HAL_UART_MspInit+0x1bc>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80023d0:	4b44      	ldr	r3, [pc, #272]	; (80024e4 <HAL_UART_MspInit+0x1bc>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023d6:	4b43      	ldr	r3, [pc, #268]	; (80024e4 <HAL_UART_MspInit+0x1bc>)
 80023d8:	2200      	movs	r2, #0
 80023da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80023dc:	4841      	ldr	r0, [pc, #260]	; (80024e4 <HAL_UART_MspInit+0x1bc>)
 80023de:	f000 fb8b 	bl	8002af8 <HAL_DMA_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80023e8:	f7ff fe16 	bl	8002018 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a3d      	ldr	r2, [pc, #244]	; (80024e4 <HAL_UART_MspInit+0x1bc>)
 80023f0:	639a      	str	r2, [r3, #56]	; 0x38
 80023f2:	4a3c      	ldr	r2, [pc, #240]	; (80024e4 <HAL_UART_MspInit+0x1bc>)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023f8:	2200      	movs	r2, #0
 80023fa:	2100      	movs	r1, #0
 80023fc:	2025      	movs	r0, #37	; 0x25
 80023fe:	f000 fb44 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002402:	2025      	movs	r0, #37	; 0x25
 8002404:	f000 fb5d 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002408:	e062      	b.n	80024d0 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a37      	ldr	r2, [pc, #220]	; (80024ec <HAL_UART_MspInit+0x1c4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d15d      	bne.n	80024d0 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002414:	4b31      	ldr	r3, [pc, #196]	; (80024dc <HAL_UART_MspInit+0x1b4>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	4a30      	ldr	r2, [pc, #192]	; (80024dc <HAL_UART_MspInit+0x1b4>)
 800241a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800241e:	61d3      	str	r3, [r2, #28]
 8002420:	4b2e      	ldr	r3, [pc, #184]	; (80024dc <HAL_UART_MspInit+0x1b4>)
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002428:	60fb      	str	r3, [r7, #12]
 800242a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	4b2b      	ldr	r3, [pc, #172]	; (80024dc <HAL_UART_MspInit+0x1b4>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	4a2a      	ldr	r2, [pc, #168]	; (80024dc <HAL_UART_MspInit+0x1b4>)
 8002432:	f043 0304 	orr.w	r3, r3, #4
 8002436:	6193      	str	r3, [r2, #24]
 8002438:	4b28      	ldr	r3, [pc, #160]	; (80024dc <HAL_UART_MspInit+0x1b4>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	60bb      	str	r3, [r7, #8]
 8002442:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8002444:	2304      	movs	r3, #4
 8002446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002448:	2302      	movs	r3, #2
 800244a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 8002450:	f107 0318 	add.w	r3, r7, #24
 8002454:	4619      	mov	r1, r3
 8002456:	4822      	ldr	r0, [pc, #136]	; (80024e0 <HAL_UART_MspInit+0x1b8>)
 8002458:	f000 fdec 	bl	8003034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = XB_RX_Pin;
 800245c:	2308      	movs	r3, #8
 800245e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8002468:	f107 0318 	add.w	r3, r7, #24
 800246c:	4619      	mov	r1, r3
 800246e:	481c      	ldr	r0, [pc, #112]	; (80024e0 <HAL_UART_MspInit+0x1b8>)
 8002470:	f000 fde0 	bl	8003034 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8002474:	4b1e      	ldr	r3, [pc, #120]	; (80024f0 <HAL_UART_MspInit+0x1c8>)
 8002476:	4a1f      	ldr	r2, [pc, #124]	; (80024f4 <HAL_UART_MspInit+0x1cc>)
 8002478:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800247a:	4b1d      	ldr	r3, [pc, #116]	; (80024f0 <HAL_UART_MspInit+0x1c8>)
 800247c:	2200      	movs	r2, #0
 800247e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002480:	4b1b      	ldr	r3, [pc, #108]	; (80024f0 <HAL_UART_MspInit+0x1c8>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002486:	4b1a      	ldr	r3, [pc, #104]	; (80024f0 <HAL_UART_MspInit+0x1c8>)
 8002488:	2280      	movs	r2, #128	; 0x80
 800248a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800248c:	4b18      	ldr	r3, [pc, #96]	; (80024f0 <HAL_UART_MspInit+0x1c8>)
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002492:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <HAL_UART_MspInit+0x1c8>)
 8002494:	2200      	movs	r2, #0
 8002496:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002498:	4b15      	ldr	r3, [pc, #84]	; (80024f0 <HAL_UART_MspInit+0x1c8>)
 800249a:	2200      	movs	r2, #0
 800249c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800249e:	4b14      	ldr	r3, [pc, #80]	; (80024f0 <HAL_UART_MspInit+0x1c8>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80024a4:	4812      	ldr	r0, [pc, #72]	; (80024f0 <HAL_UART_MspInit+0x1c8>)
 80024a6:	f000 fb27 	bl	8002af8 <HAL_DMA_Init>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 80024b0:	f7ff fdb2 	bl	8002018 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a0e      	ldr	r2, [pc, #56]	; (80024f0 <HAL_UART_MspInit+0x1c8>)
 80024b8:	639a      	str	r2, [r3, #56]	; 0x38
 80024ba:	4a0d      	ldr	r2, [pc, #52]	; (80024f0 <HAL_UART_MspInit+0x1c8>)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2103      	movs	r1, #3
 80024c4:	2026      	movs	r0, #38	; 0x26
 80024c6:	f000 fae0 	bl	8002a8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024ca:	2026      	movs	r0, #38	; 0x26
 80024cc:	f000 faf9 	bl	8002ac2 <HAL_NVIC_EnableIRQ>
}
 80024d0:	bf00      	nop
 80024d2:	3728      	adds	r7, #40	; 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40013800 	.word	0x40013800
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010800 	.word	0x40010800
 80024e4:	2000028c 	.word	0x2000028c
 80024e8:	40020058 	.word	0x40020058
 80024ec:	40004400 	.word	0x40004400
 80024f0:	200002d0 	.word	0x200002d0
 80024f4:	4002006c 	.word	0x4002006c

080024f8 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80024fc:	e7fe      	b.n	80024fc <NMI_Handler+0x4>

080024fe <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 8002502:	e7fe      	b.n	8002502 <HardFault_Handler+0x4>

08002504 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8002508:	e7fe      	b.n	8002508 <MemManage_Handler+0x4>

0800250a <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 800250e:	e7fe      	b.n	800250e <BusFault_Handler+0x4>

08002510 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8002514:	e7fe      	b.n	8002514 <UsageFault_Handler+0x4>

08002516 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8002516:	b480      	push	{r7}
 8002518:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8002526:	bf00      	nop
 8002528:	46bd      	mov	sp, r7
 800252a:	bc80      	pop	{r7}
 800252c:	4770      	bx	lr

0800252e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800252e:	b480      	push	{r7}
 8002530:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	46bd      	mov	sp, r7
 8002536:	bc80      	pop	{r7}
 8002538:	4770      	bx	lr

0800253a <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800253e:	f000 f98d 	bl	800285c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	bd80      	pop	{r7, pc}
	...

08002548 <DMA1_Channel5_IRQHandler>:

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	huansic_jy62_decodePackage(&himu);
 800254c:	4805      	ldr	r0, [pc, #20]	; (8002564 <DMA1_Channel5_IRQHandler+0x1c>)
 800254e:	f7fe fd6b 	bl	8001028 <huansic_jy62_decodePackage>
	/* USER CODE END DMA1_Channel5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002552:	4805      	ldr	r0, [pc, #20]	; (8002568 <DMA1_Channel5_IRQHandler+0x20>)
 8002554:	f000 fc3a 	bl	8002dcc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
	huansic_jy62_setDMA(&himu);
 8002558:	4802      	ldr	r0, [pc, #8]	; (8002564 <DMA1_Channel5_IRQHandler+0x1c>)
 800255a:	f7fe ff6f 	bl	800143c <huansic_jy62_setDMA>
	/* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	2000038c 	.word	0x2000038c
 8002568:	2000028c 	.word	0x2000028c

0800256c <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

	/* USER CODE END DMA1_Channel6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <DMA1_Channel6_IRQHandler+0x10>)
 8002572:	f000 fc2b 	bl	8002dcc <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	200002d0 	.word	0x200002d0

08002580 <TIM1_UP_IRQHandler>:

/**
 * @brief This function handles TIM1 update interrupt.
 */
void TIM1_UP_IRQHandler(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_IRQn 0 */
	huansic_motor_pid(&hmotor_left);
 8002584:	4805      	ldr	r0, [pc, #20]	; (800259c <TIM1_UP_IRQHandler+0x1c>)
 8002586:	f7ff f827 	bl	80015d8 <huansic_motor_pid>
	huansic_motor_pid(&hmotor_right);
 800258a:	4805      	ldr	r0, [pc, #20]	; (80025a0 <TIM1_UP_IRQHandler+0x20>)
 800258c:	f7ff f824 	bl	80015d8 <huansic_motor_pid>
	/* USER CODE END TIM1_UP_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 8002590:	4804      	ldr	r0, [pc, #16]	; (80025a4 <TIM1_UP_IRQHandler+0x24>)
 8002592:	f001 ff2f 	bl	80043f4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_IRQn 1 */

	/* USER CODE END TIM1_UP_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000314 	.word	0x20000314
 80025a0:	20000350 	.word	0x20000350
 80025a4:	200000e4 	.word	0x200000e4

080025a8 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 80025ac:	4802      	ldr	r0, [pc, #8]	; (80025b8 <TIM2_IRQHandler+0x10>)
 80025ae:	f001 ff21 	bl	80043f4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	2000012c 	.word	0x2000012c

080025bc <TIM4_IRQHandler>:

/**
 * @brief This function handles TIM4 global interrupt.
 */
void TIM4_IRQHandler(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM4_IRQn 0 */

	/* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 80025c0:	4802      	ldr	r0, [pc, #8]	; (80025cc <TIM4_IRQHandler+0x10>)
 80025c2:	f001 ff17 	bl	80043f4 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM4_IRQn 1 */

	/* USER CODE END TIM4_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	200001bc 	.word	0x200001bc

080025d0 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 80025d4:	4802      	ldr	r0, [pc, #8]	; (80025e0 <USART1_IRQHandler+0x10>)
 80025d6:	f002 fde9 	bl	80051ac <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000204 	.word	0x20000204

080025e4 <USART2_IRQHandler>:

/**
 * @brief This function handles USART2 global interrupt.
 */
void USART2_IRQHandler(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART2_IRQn 0 */

	/* USER CODE END USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 80025e8:	4802      	ldr	r0, [pc, #8]	; (80025f4 <USART2_IRQHandler+0x10>)
 80025ea:	f002 fddf 	bl	80051ac <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART2_IRQn 1 */

	/* USER CODE END USART2_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000248 	.word	0x20000248

080025f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
	return 1;
 80025fc:	2301      	movs	r3, #1
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <_kill>:

int _kill(int pid, int sig)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
 800260e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002610:	f003 fb16 	bl	8005c40 <__errno>
 8002614:	4603      	mov	r3, r0
 8002616:	2216      	movs	r2, #22
 8002618:	601a      	str	r2, [r3, #0]
	return -1;
 800261a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800261e:	4618      	mov	r0, r3
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <_exit>:

void _exit (int status)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b082      	sub	sp, #8
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800262e:	f04f 31ff 	mov.w	r1, #4294967295
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ffe7 	bl	8002606 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002638:	e7fe      	b.n	8002638 <_exit+0x12>

0800263a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	60f8      	str	r0, [r7, #12]
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
 800264a:	e00a      	b.n	8002662 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800264c:	f3af 8000 	nop.w
 8002650:	4601      	mov	r1, r0
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	60ba      	str	r2, [r7, #8]
 8002658:	b2ca      	uxtb	r2, r1
 800265a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	3301      	adds	r3, #1
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	429a      	cmp	r2, r3
 8002668:	dbf0      	blt.n	800264c <_read+0x12>
	}

return len;
 800266a:	687b      	ldr	r3, [r7, #4]
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002680:	2300      	movs	r3, #0
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	e009      	b.n	800269a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	60ba      	str	r2, [r7, #8]
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	3301      	adds	r3, #1
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	429a      	cmp	r2, r3
 80026a0:	dbf1      	blt.n	8002686 <_write+0x12>
	}
	return len;
 80026a2:	687b      	ldr	r3, [r7, #4]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <_close>:

int _close(int file)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	return -1;
 80026b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026d2:	605a      	str	r2, [r3, #4]
	return 0;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr

080026e0 <_isatty>:

int _isatty(int file)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
	return 1;
 80026e8:	2301      	movs	r3, #1
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
	return 0;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002714:	4a14      	ldr	r2, [pc, #80]	; (8002768 <_sbrk+0x5c>)
 8002716:	4b15      	ldr	r3, [pc, #84]	; (800276c <_sbrk+0x60>)
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002720:	4b13      	ldr	r3, [pc, #76]	; (8002770 <_sbrk+0x64>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <_sbrk+0x64>)
 800272a:	4a12      	ldr	r2, [pc, #72]	; (8002774 <_sbrk+0x68>)
 800272c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <_sbrk+0x64>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	429a      	cmp	r2, r3
 800273a:	d207      	bcs.n	800274c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800273c:	f003 fa80 	bl	8005c40 <__errno>
 8002740:	4603      	mov	r3, r0
 8002742:	220c      	movs	r2, #12
 8002744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	e009      	b.n	8002760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800274c:	4b08      	ldr	r3, [pc, #32]	; (8002770 <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002752:	4b07      	ldr	r3, [pc, #28]	; (8002770 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	4a05      	ldr	r2, [pc, #20]	; (8002770 <_sbrk+0x64>)
 800275c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800275e:	68fb      	ldr	r3, [r7, #12]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20005000 	.word	0x20005000
 800276c:	00000400 	.word	0x00000400
 8002770:	200003c4 	.word	0x200003c4
 8002774:	200003e0 	.word	0x200003e0

08002778 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002784:	480c      	ldr	r0, [pc, #48]	; (80027b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002786:	490d      	ldr	r1, [pc, #52]	; (80027bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002788:	4a0d      	ldr	r2, [pc, #52]	; (80027c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800278a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800278c:	e002      	b.n	8002794 <LoopCopyDataInit>

0800278e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800278e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002792:	3304      	adds	r3, #4

08002794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002798:	d3f9      	bcc.n	800278e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800279a:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800279c:	4c0a      	ldr	r4, [pc, #40]	; (80027c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800279e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027a0:	e001      	b.n	80027a6 <LoopFillZerobss>

080027a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a4:	3204      	adds	r2, #4

080027a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a8:	d3fb      	bcc.n	80027a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80027aa:	f7ff ffe5 	bl	8002778 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ae:	f003 fa5f 	bl	8005c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027b2:	f7ff f837 	bl	8001824 <main>
  bx lr
 80027b6:	4770      	bx	lr
  ldr r0, =_sdata
 80027b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027bc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80027c0:	08006e24 	.word	0x08006e24
  ldr r2, =_sbss
 80027c4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80027c8:	200003dc 	.word	0x200003dc

080027cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027cc:	e7fe      	b.n	80027cc <ADC1_2_IRQHandler>
	...

080027d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <HAL_Init+0x28>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a07      	ldr	r2, [pc, #28]	; (80027f8 <HAL_Init+0x28>)
 80027da:	f043 0310 	orr.w	r3, r3, #16
 80027de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e0:	2003      	movs	r0, #3
 80027e2:	f000 f947 	bl	8002a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f000 f808 	bl	80027fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027ec:	f7ff fc1a 	bl	8002024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40022000 	.word	0x40022000

080027fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_InitTick+0x54>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	4b12      	ldr	r3, [pc, #72]	; (8002854 <HAL_InitTick+0x58>)
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	4619      	mov	r1, r3
 800280e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002812:	fbb3 f3f1 	udiv	r3, r3, r1
 8002816:	fbb2 f3f3 	udiv	r3, r2, r3
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f95f 	bl	8002ade <HAL_SYSTICK_Config>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e00e      	b.n	8002848 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2b0f      	cmp	r3, #15
 800282e:	d80a      	bhi.n	8002846 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002830:	2200      	movs	r2, #0
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	f04f 30ff 	mov.w	r0, #4294967295
 8002838:	f000 f927 	bl	8002a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800283c:	4a06      	ldr	r2, [pc, #24]	; (8002858 <HAL_InitTick+0x5c>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	e000      	b.n	8002848 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
}
 8002848:	4618      	mov	r0, r3
 800284a:	3708      	adds	r7, #8
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000004 	.word	0x20000004
 8002854:	2000000c 	.word	0x2000000c
 8002858:	20000008 	.word	0x20000008

0800285c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <HAL_IncTick+0x1c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_IncTick+0x20>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4413      	add	r3, r2
 800286c:	4a03      	ldr	r2, [pc, #12]	; (800287c <HAL_IncTick+0x20>)
 800286e:	6013      	str	r3, [r2, #0]
}
 8002870:	bf00      	nop
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr
 8002878:	2000000c 	.word	0x2000000c
 800287c:	200003c8 	.word	0x200003c8

08002880 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return uwTick;
 8002884:	4b02      	ldr	r3, [pc, #8]	; (8002890 <HAL_GetTick+0x10>)
 8002886:	681b      	ldr	r3, [r3, #0]
}
 8002888:	4618      	mov	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	200003c8 	.word	0x200003c8

08002894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800289c:	f7ff fff0 	bl	8002880 <HAL_GetTick>
 80028a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ac:	d005      	beq.n	80028ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ae:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <HAL_Delay+0x44>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	4413      	add	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028ba:	bf00      	nop
 80028bc:	f7ff ffe0 	bl	8002880 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d8f7      	bhi.n	80028bc <HAL_Delay+0x28>
  {
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2000000c 	.word	0x2000000c

080028dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f003 0307 	and.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f8:	4013      	ands	r3, r2
 80028fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290e:	4a04      	ldr	r2, [pc, #16]	; (8002920 <__NVIC_SetPriorityGrouping+0x44>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	60d3      	str	r3, [r2, #12]
}
 8002914:	bf00      	nop
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <__NVIC_GetPriorityGrouping+0x18>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0a1b      	lsrs	r3, r3, #8
 800292e:	f003 0307 	and.w	r3, r3, #7
}
 8002932:	4618      	mov	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800294a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294e:	2b00      	cmp	r3, #0
 8002950:	db0b      	blt.n	800296a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	f003 021f 	and.w	r2, r3, #31
 8002958:	4906      	ldr	r1, [pc, #24]	; (8002974 <__NVIC_EnableIRQ+0x34>)
 800295a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	2001      	movs	r0, #1
 8002962:	fa00 f202 	lsl.w	r2, r0, r2
 8002966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	e000e100 	.word	0xe000e100

08002978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	db0a      	blt.n	80029a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	490c      	ldr	r1, [pc, #48]	; (80029c4 <__NVIC_SetPriority+0x4c>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	440b      	add	r3, r1
 800299c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a0:	e00a      	b.n	80029b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4908      	ldr	r1, [pc, #32]	; (80029c8 <__NVIC_SetPriority+0x50>)
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	3b04      	subs	r3, #4
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	440b      	add	r3, r1
 80029b6:	761a      	strb	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	e000e100 	.word	0xe000e100
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	; 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f1c3 0307 	rsb	r3, r3, #7
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	bf28      	it	cs
 80029ea:	2304      	movcs	r3, #4
 80029ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d902      	bls.n	80029fc <NVIC_EncodePriority+0x30>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3b03      	subs	r3, #3
 80029fa:	e000      	b.n	80029fe <NVIC_EncodePriority+0x32>
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	401a      	ands	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a14:	f04f 31ff 	mov.w	r1, #4294967295
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	4313      	orrs	r3, r2
         );
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3724      	adds	r7, #36	; 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr

08002a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a40:	d301      	bcc.n	8002a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a42:	2301      	movs	r3, #1
 8002a44:	e00f      	b.n	8002a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a46:	4a0a      	ldr	r2, [pc, #40]	; (8002a70 <SysTick_Config+0x40>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4e:	210f      	movs	r1, #15
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295
 8002a54:	f7ff ff90 	bl	8002978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <SysTick_Config+0x40>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5e:	4b04      	ldr	r3, [pc, #16]	; (8002a70 <SysTick_Config+0x40>)
 8002a60:	2207      	movs	r2, #7
 8002a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	e000e010 	.word	0xe000e010

08002a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff ff2d 	bl	80028dc <__NVIC_SetPriorityGrouping>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b086      	sub	sp, #24
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	4603      	mov	r3, r0
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a9c:	f7ff ff42 	bl	8002924 <__NVIC_GetPriorityGrouping>
 8002aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	68b9      	ldr	r1, [r7, #8]
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f7ff ff90 	bl	80029cc <NVIC_EncodePriority>
 8002aac:	4602      	mov	r2, r0
 8002aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff ff5f 	bl	8002978 <__NVIC_SetPriority>
}
 8002aba:	bf00      	nop
 8002abc:	3718      	adds	r7, #24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	4603      	mov	r3, r0
 8002aca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff ff35 	bl	8002940 <__NVIC_EnableIRQ>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff ffa2 	bl	8002a30 <SysTick_Config>
 8002aec:	4603      	mov	r3, r0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e043      	b.n	8002b96 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b22      	ldr	r3, [pc, #136]	; (8002ba0 <HAL_DMA_Init+0xa8>)
 8002b16:	4413      	add	r3, r2
 8002b18:	4a22      	ldr	r2, [pc, #136]	; (8002ba4 <HAL_DMA_Init+0xac>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	009a      	lsls	r2, r3, #2
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a1f      	ldr	r2, [pc, #124]	; (8002ba8 <HAL_DMA_Init+0xb0>)
 8002b2a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002b42:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002b46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	bffdfff8 	.word	0xbffdfff8
 8002ba4:	cccccccd 	.word	0xcccccccd
 8002ba8:	40020000 	.word	0x40020000

08002bac <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_DMA_Start_IT+0x20>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e04a      	b.n	8002c62 <HAL_DMA_Start_IT+0xb6>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d13a      	bne.n	8002c54 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0201 	bic.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	68b9      	ldr	r1, [r7, #8]
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 f9e8 	bl	8002fd8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 020e 	orr.w	r2, r2, #14
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e00f      	b.n	8002c42 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0204 	bic.w	r2, r2, #4
 8002c30:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 020a 	orr.w	r2, r2, #10
 8002c40:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f042 0201 	orr.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	e005      	b.n	8002c60 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3718      	adds	r7, #24
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b085      	sub	sp, #20
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d008      	beq.n	8002c92 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2204      	movs	r2, #4
 8002c84:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e020      	b.n	8002cd4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 020e 	bic.w	r2, r2, #14
 8002ca0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0201 	bic.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cba:	2101      	movs	r1, #1
 8002cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8002cc0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc80      	pop	{r7}
 8002cdc:	4770      	bx	lr
	...

08002ce0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d005      	beq.n	8002d02 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
 8002d00:	e051      	b.n	8002da6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 020e 	bic.w	r2, r2, #14
 8002d10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a22      	ldr	r2, [pc, #136]	; (8002db0 <HAL_DMA_Abort_IT+0xd0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d029      	beq.n	8002d80 <HAL_DMA_Abort_IT+0xa0>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a20      	ldr	r2, [pc, #128]	; (8002db4 <HAL_DMA_Abort_IT+0xd4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d022      	beq.n	8002d7c <HAL_DMA_Abort_IT+0x9c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1f      	ldr	r2, [pc, #124]	; (8002db8 <HAL_DMA_Abort_IT+0xd8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d01a      	beq.n	8002d76 <HAL_DMA_Abort_IT+0x96>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a1d      	ldr	r2, [pc, #116]	; (8002dbc <HAL_DMA_Abort_IT+0xdc>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d012      	beq.n	8002d70 <HAL_DMA_Abort_IT+0x90>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <HAL_DMA_Abort_IT+0xe0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d00a      	beq.n	8002d6a <HAL_DMA_Abort_IT+0x8a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1a      	ldr	r2, [pc, #104]	; (8002dc4 <HAL_DMA_Abort_IT+0xe4>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d102      	bne.n	8002d64 <HAL_DMA_Abort_IT+0x84>
 8002d5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d62:	e00e      	b.n	8002d82 <HAL_DMA_Abort_IT+0xa2>
 8002d64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d68:	e00b      	b.n	8002d82 <HAL_DMA_Abort_IT+0xa2>
 8002d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d6e:	e008      	b.n	8002d82 <HAL_DMA_Abort_IT+0xa2>
 8002d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d74:	e005      	b.n	8002d82 <HAL_DMA_Abort_IT+0xa2>
 8002d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d7a:	e002      	b.n	8002d82 <HAL_DMA_Abort_IT+0xa2>
 8002d7c:	2310      	movs	r3, #16
 8002d7e:	e000      	b.n	8002d82 <HAL_DMA_Abort_IT+0xa2>
 8002d80:	2301      	movs	r3, #1
 8002d82:	4a11      	ldr	r2, [pc, #68]	; (8002dc8 <HAL_DMA_Abort_IT+0xe8>)
 8002d84:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	4798      	blx	r3
    } 
  }
  return status;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40020008 	.word	0x40020008
 8002db4:	4002001c 	.word	0x4002001c
 8002db8:	40020030 	.word	0x40020030
 8002dbc:	40020044 	.word	0x40020044
 8002dc0:	40020058 	.word	0x40020058
 8002dc4:	4002006c 	.word	0x4002006c
 8002dc8:	40020000 	.word	0x40020000

08002dcc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	2204      	movs	r2, #4
 8002dea:	409a      	lsls	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4013      	ands	r3, r2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d04f      	beq.n	8002e94 <HAL_DMA_IRQHandler+0xc8>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d04a      	beq.n	8002e94 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0320 	and.w	r3, r3, #32
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d107      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0204 	bic.w	r2, r2, #4
 8002e1a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a66      	ldr	r2, [pc, #408]	; (8002fbc <HAL_DMA_IRQHandler+0x1f0>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d029      	beq.n	8002e7a <HAL_DMA_IRQHandler+0xae>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a65      	ldr	r2, [pc, #404]	; (8002fc0 <HAL_DMA_IRQHandler+0x1f4>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d022      	beq.n	8002e76 <HAL_DMA_IRQHandler+0xaa>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a63      	ldr	r2, [pc, #396]	; (8002fc4 <HAL_DMA_IRQHandler+0x1f8>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01a      	beq.n	8002e70 <HAL_DMA_IRQHandler+0xa4>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a62      	ldr	r2, [pc, #392]	; (8002fc8 <HAL_DMA_IRQHandler+0x1fc>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d012      	beq.n	8002e6a <HAL_DMA_IRQHandler+0x9e>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a60      	ldr	r2, [pc, #384]	; (8002fcc <HAL_DMA_IRQHandler+0x200>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00a      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x98>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a5f      	ldr	r2, [pc, #380]	; (8002fd0 <HAL_DMA_IRQHandler+0x204>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d102      	bne.n	8002e5e <HAL_DMA_IRQHandler+0x92>
 8002e58:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e5c:	e00e      	b.n	8002e7c <HAL_DMA_IRQHandler+0xb0>
 8002e5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002e62:	e00b      	b.n	8002e7c <HAL_DMA_IRQHandler+0xb0>
 8002e64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e68:	e008      	b.n	8002e7c <HAL_DMA_IRQHandler+0xb0>
 8002e6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e6e:	e005      	b.n	8002e7c <HAL_DMA_IRQHandler+0xb0>
 8002e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e74:	e002      	b.n	8002e7c <HAL_DMA_IRQHandler+0xb0>
 8002e76:	2340      	movs	r3, #64	; 0x40
 8002e78:	e000      	b.n	8002e7c <HAL_DMA_IRQHandler+0xb0>
 8002e7a:	2304      	movs	r3, #4
 8002e7c:	4a55      	ldr	r2, [pc, #340]	; (8002fd4 <HAL_DMA_IRQHandler+0x208>)
 8002e7e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 8094 	beq.w	8002fb2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002e92:	e08e      	b.n	8002fb2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	2202      	movs	r2, #2
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d056      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x186>
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d051      	beq.n	8002f52 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0320 	and.w	r3, r3, #32
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10b      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 020a 	bic.w	r2, r2, #10
 8002eca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a38      	ldr	r2, [pc, #224]	; (8002fbc <HAL_DMA_IRQHandler+0x1f0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d029      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x166>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a37      	ldr	r2, [pc, #220]	; (8002fc0 <HAL_DMA_IRQHandler+0x1f4>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d022      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x162>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a35      	ldr	r2, [pc, #212]	; (8002fc4 <HAL_DMA_IRQHandler+0x1f8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d01a      	beq.n	8002f28 <HAL_DMA_IRQHandler+0x15c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a34      	ldr	r2, [pc, #208]	; (8002fc8 <HAL_DMA_IRQHandler+0x1fc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d012      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x156>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a32      	ldr	r2, [pc, #200]	; (8002fcc <HAL_DMA_IRQHandler+0x200>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00a      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x150>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a31      	ldr	r2, [pc, #196]	; (8002fd0 <HAL_DMA_IRQHandler+0x204>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d102      	bne.n	8002f16 <HAL_DMA_IRQHandler+0x14a>
 8002f10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002f14:	e00e      	b.n	8002f34 <HAL_DMA_IRQHandler+0x168>
 8002f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f1a:	e00b      	b.n	8002f34 <HAL_DMA_IRQHandler+0x168>
 8002f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f20:	e008      	b.n	8002f34 <HAL_DMA_IRQHandler+0x168>
 8002f22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f26:	e005      	b.n	8002f34 <HAL_DMA_IRQHandler+0x168>
 8002f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f2c:	e002      	b.n	8002f34 <HAL_DMA_IRQHandler+0x168>
 8002f2e:	2320      	movs	r3, #32
 8002f30:	e000      	b.n	8002f34 <HAL_DMA_IRQHandler+0x168>
 8002f32:	2302      	movs	r3, #2
 8002f34:	4a27      	ldr	r2, [pc, #156]	; (8002fd4 <HAL_DMA_IRQHandler+0x208>)
 8002f36:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d034      	beq.n	8002fb2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f50:	e02f      	b.n	8002fb2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	2208      	movs	r2, #8
 8002f58:	409a      	lsls	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d028      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x1e8>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d023      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 020e 	bic.w	r2, r2, #14
 8002f7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f84:	2101      	movs	r1, #1
 8002f86:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d004      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	4798      	blx	r3
    }
  }
  return;
 8002fb2:	bf00      	nop
 8002fb4:	bf00      	nop
}
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40020008 	.word	0x40020008
 8002fc0:	4002001c 	.word	0x4002001c
 8002fc4:	40020030 	.word	0x40020030
 8002fc8:	40020044 	.word	0x40020044
 8002fcc:	40020058 	.word	0x40020058
 8002fd0:	4002006c 	.word	0x4002006c
 8002fd4:	40020000 	.word	0x40020000

08002fd8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fee:	2101      	movs	r1, #1
 8002ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ff4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b10      	cmp	r3, #16
 8003004:	d108      	bne.n	8003018 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003016:	e007      	b.n	8003028 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	60da      	str	r2, [r3, #12]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
	...

08003034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003034:	b480      	push	{r7}
 8003036:	b08b      	sub	sp, #44	; 0x2c
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
 800303c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800303e:	2300      	movs	r3, #0
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003042:	2300      	movs	r3, #0
 8003044:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003046:	e169      	b.n	800331c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003048:	2201      	movs	r2, #1
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	429a      	cmp	r2, r3
 8003062:	f040 8158 	bne.w	8003316 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4a9a      	ldr	r2, [pc, #616]	; (80032d4 <HAL_GPIO_Init+0x2a0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d05e      	beq.n	800312e <HAL_GPIO_Init+0xfa>
 8003070:	4a98      	ldr	r2, [pc, #608]	; (80032d4 <HAL_GPIO_Init+0x2a0>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d875      	bhi.n	8003162 <HAL_GPIO_Init+0x12e>
 8003076:	4a98      	ldr	r2, [pc, #608]	; (80032d8 <HAL_GPIO_Init+0x2a4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d058      	beq.n	800312e <HAL_GPIO_Init+0xfa>
 800307c:	4a96      	ldr	r2, [pc, #600]	; (80032d8 <HAL_GPIO_Init+0x2a4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d86f      	bhi.n	8003162 <HAL_GPIO_Init+0x12e>
 8003082:	4a96      	ldr	r2, [pc, #600]	; (80032dc <HAL_GPIO_Init+0x2a8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d052      	beq.n	800312e <HAL_GPIO_Init+0xfa>
 8003088:	4a94      	ldr	r2, [pc, #592]	; (80032dc <HAL_GPIO_Init+0x2a8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d869      	bhi.n	8003162 <HAL_GPIO_Init+0x12e>
 800308e:	4a94      	ldr	r2, [pc, #592]	; (80032e0 <HAL_GPIO_Init+0x2ac>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d04c      	beq.n	800312e <HAL_GPIO_Init+0xfa>
 8003094:	4a92      	ldr	r2, [pc, #584]	; (80032e0 <HAL_GPIO_Init+0x2ac>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d863      	bhi.n	8003162 <HAL_GPIO_Init+0x12e>
 800309a:	4a92      	ldr	r2, [pc, #584]	; (80032e4 <HAL_GPIO_Init+0x2b0>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d046      	beq.n	800312e <HAL_GPIO_Init+0xfa>
 80030a0:	4a90      	ldr	r2, [pc, #576]	; (80032e4 <HAL_GPIO_Init+0x2b0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d85d      	bhi.n	8003162 <HAL_GPIO_Init+0x12e>
 80030a6:	2b12      	cmp	r3, #18
 80030a8:	d82a      	bhi.n	8003100 <HAL_GPIO_Init+0xcc>
 80030aa:	2b12      	cmp	r3, #18
 80030ac:	d859      	bhi.n	8003162 <HAL_GPIO_Init+0x12e>
 80030ae:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <HAL_GPIO_Init+0x80>)
 80030b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b4:	0800312f 	.word	0x0800312f
 80030b8:	08003109 	.word	0x08003109
 80030bc:	0800311b 	.word	0x0800311b
 80030c0:	0800315d 	.word	0x0800315d
 80030c4:	08003163 	.word	0x08003163
 80030c8:	08003163 	.word	0x08003163
 80030cc:	08003163 	.word	0x08003163
 80030d0:	08003163 	.word	0x08003163
 80030d4:	08003163 	.word	0x08003163
 80030d8:	08003163 	.word	0x08003163
 80030dc:	08003163 	.word	0x08003163
 80030e0:	08003163 	.word	0x08003163
 80030e4:	08003163 	.word	0x08003163
 80030e8:	08003163 	.word	0x08003163
 80030ec:	08003163 	.word	0x08003163
 80030f0:	08003163 	.word	0x08003163
 80030f4:	08003163 	.word	0x08003163
 80030f8:	08003111 	.word	0x08003111
 80030fc:	08003125 	.word	0x08003125
 8003100:	4a79      	ldr	r2, [pc, #484]	; (80032e8 <HAL_GPIO_Init+0x2b4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d013      	beq.n	800312e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003106:	e02c      	b.n	8003162 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	623b      	str	r3, [r7, #32]
          break;
 800310e:	e029      	b.n	8003164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	3304      	adds	r3, #4
 8003116:	623b      	str	r3, [r7, #32]
          break;
 8003118:	e024      	b.n	8003164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	3308      	adds	r3, #8
 8003120:	623b      	str	r3, [r7, #32]
          break;
 8003122:	e01f      	b.n	8003164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	330c      	adds	r3, #12
 800312a:	623b      	str	r3, [r7, #32]
          break;
 800312c:	e01a      	b.n	8003164 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d102      	bne.n	800313c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003136:	2304      	movs	r3, #4
 8003138:	623b      	str	r3, [r7, #32]
          break;
 800313a:	e013      	b.n	8003164 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d105      	bne.n	8003150 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003144:	2308      	movs	r3, #8
 8003146:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	611a      	str	r2, [r3, #16]
          break;
 800314e:	e009      	b.n	8003164 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003150:	2308      	movs	r3, #8
 8003152:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	615a      	str	r2, [r3, #20]
          break;
 800315a:	e003      	b.n	8003164 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800315c:	2300      	movs	r3, #0
 800315e:	623b      	str	r3, [r7, #32]
          break;
 8003160:	e000      	b.n	8003164 <HAL_GPIO_Init+0x130>
          break;
 8003162:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	2bff      	cmp	r3, #255	; 0xff
 8003168:	d801      	bhi.n	800316e <HAL_GPIO_Init+0x13a>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	e001      	b.n	8003172 <HAL_GPIO_Init+0x13e>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3304      	adds	r3, #4
 8003172:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	2bff      	cmp	r3, #255	; 0xff
 8003178:	d802      	bhi.n	8003180 <HAL_GPIO_Init+0x14c>
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	e002      	b.n	8003186 <HAL_GPIO_Init+0x152>
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	3b08      	subs	r3, #8
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	210f      	movs	r1, #15
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	fa01 f303 	lsl.w	r3, r1, r3
 8003194:	43db      	mvns	r3, r3
 8003196:	401a      	ands	r2, r3
 8003198:	6a39      	ldr	r1, [r7, #32]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	431a      	orrs	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80b1 	beq.w	8003316 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80031b4:	4b4d      	ldr	r3, [pc, #308]	; (80032ec <HAL_GPIO_Init+0x2b8>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	4a4c      	ldr	r2, [pc, #304]	; (80032ec <HAL_GPIO_Init+0x2b8>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6193      	str	r3, [r2, #24]
 80031c0:	4b4a      	ldr	r3, [pc, #296]	; (80032ec <HAL_GPIO_Init+0x2b8>)
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80031cc:	4a48      	ldr	r2, [pc, #288]	; (80032f0 <HAL_GPIO_Init+0x2bc>)
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	089b      	lsrs	r3, r3, #2
 80031d2:	3302      	adds	r3, #2
 80031d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	220f      	movs	r2, #15
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	4013      	ands	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a40      	ldr	r2, [pc, #256]	; (80032f4 <HAL_GPIO_Init+0x2c0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d013      	beq.n	8003220 <HAL_GPIO_Init+0x1ec>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a3f      	ldr	r2, [pc, #252]	; (80032f8 <HAL_GPIO_Init+0x2c4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00d      	beq.n	800321c <HAL_GPIO_Init+0x1e8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a3e      	ldr	r2, [pc, #248]	; (80032fc <HAL_GPIO_Init+0x2c8>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d007      	beq.n	8003218 <HAL_GPIO_Init+0x1e4>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a3d      	ldr	r2, [pc, #244]	; (8003300 <HAL_GPIO_Init+0x2cc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d101      	bne.n	8003214 <HAL_GPIO_Init+0x1e0>
 8003210:	2303      	movs	r3, #3
 8003212:	e006      	b.n	8003222 <HAL_GPIO_Init+0x1ee>
 8003214:	2304      	movs	r3, #4
 8003216:	e004      	b.n	8003222 <HAL_GPIO_Init+0x1ee>
 8003218:	2302      	movs	r3, #2
 800321a:	e002      	b.n	8003222 <HAL_GPIO_Init+0x1ee>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <HAL_GPIO_Init+0x1ee>
 8003220:	2300      	movs	r3, #0
 8003222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003224:	f002 0203 	and.w	r2, r2, #3
 8003228:	0092      	lsls	r2, r2, #2
 800322a:	4093      	lsls	r3, r2
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	4313      	orrs	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003232:	492f      	ldr	r1, [pc, #188]	; (80032f0 <HAL_GPIO_Init+0x2bc>)
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	089b      	lsrs	r3, r3, #2
 8003238:	3302      	adds	r3, #2
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d006      	beq.n	800325a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800324c:	4b2d      	ldr	r3, [pc, #180]	; (8003304 <HAL_GPIO_Init+0x2d0>)
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	492c      	ldr	r1, [pc, #176]	; (8003304 <HAL_GPIO_Init+0x2d0>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	4313      	orrs	r3, r2
 8003256:	600b      	str	r3, [r1, #0]
 8003258:	e006      	b.n	8003268 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800325a:	4b2a      	ldr	r3, [pc, #168]	; (8003304 <HAL_GPIO_Init+0x2d0>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	43db      	mvns	r3, r3
 8003262:	4928      	ldr	r1, [pc, #160]	; (8003304 <HAL_GPIO_Init+0x2d0>)
 8003264:	4013      	ands	r3, r2
 8003266:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d006      	beq.n	8003282 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003274:	4b23      	ldr	r3, [pc, #140]	; (8003304 <HAL_GPIO_Init+0x2d0>)
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	4922      	ldr	r1, [pc, #136]	; (8003304 <HAL_GPIO_Init+0x2d0>)
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	4313      	orrs	r3, r2
 800327e:	604b      	str	r3, [r1, #4]
 8003280:	e006      	b.n	8003290 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <HAL_GPIO_Init+0x2d0>)
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	43db      	mvns	r3, r3
 800328a:	491e      	ldr	r1, [pc, #120]	; (8003304 <HAL_GPIO_Init+0x2d0>)
 800328c:	4013      	ands	r3, r2
 800328e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d006      	beq.n	80032aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800329c:	4b19      	ldr	r3, [pc, #100]	; (8003304 <HAL_GPIO_Init+0x2d0>)
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	4918      	ldr	r1, [pc, #96]	; (8003304 <HAL_GPIO_Init+0x2d0>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	608b      	str	r3, [r1, #8]
 80032a8:	e006      	b.n	80032b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80032aa:	4b16      	ldr	r3, [pc, #88]	; (8003304 <HAL_GPIO_Init+0x2d0>)
 80032ac:	689a      	ldr	r2, [r3, #8]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	43db      	mvns	r3, r3
 80032b2:	4914      	ldr	r1, [pc, #80]	; (8003304 <HAL_GPIO_Init+0x2d0>)
 80032b4:	4013      	ands	r3, r2
 80032b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d021      	beq.n	8003308 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80032c4:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <HAL_GPIO_Init+0x2d0>)
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	490e      	ldr	r1, [pc, #56]	; (8003304 <HAL_GPIO_Init+0x2d0>)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60cb      	str	r3, [r1, #12]
 80032d0:	e021      	b.n	8003316 <HAL_GPIO_Init+0x2e2>
 80032d2:	bf00      	nop
 80032d4:	10320000 	.word	0x10320000
 80032d8:	10310000 	.word	0x10310000
 80032dc:	10220000 	.word	0x10220000
 80032e0:	10210000 	.word	0x10210000
 80032e4:	10120000 	.word	0x10120000
 80032e8:	10110000 	.word	0x10110000
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40010800 	.word	0x40010800
 80032f8:	40010c00 	.word	0x40010c00
 80032fc:	40011000 	.word	0x40011000
 8003300:	40011400 	.word	0x40011400
 8003304:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_GPIO_Init+0x304>)
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	43db      	mvns	r3, r3
 8003310:	4909      	ldr	r1, [pc, #36]	; (8003338 <HAL_GPIO_Init+0x304>)
 8003312:	4013      	ands	r3, r2
 8003314:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	3301      	adds	r3, #1
 800331a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	fa22 f303 	lsr.w	r3, r2, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	f47f ae8e 	bne.w	8003048 <HAL_GPIO_Init+0x14>
  }
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	372c      	adds	r7, #44	; 0x2c
 8003332:	46bd      	mov	sp, r7
 8003334:	bc80      	pop	{r7}
 8003336:	4770      	bx	lr
 8003338:	40010400 	.word	0x40010400

0800333c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	807b      	strh	r3, [r7, #2]
 8003348:	4613      	mov	r3, r2
 800334a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800334c:	787b      	ldrb	r3, [r7, #1]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003352:	887a      	ldrh	r2, [r7, #2]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003358:	e003      	b.n	8003362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800335a:	887b      	ldrh	r3, [r7, #2]
 800335c:	041a      	lsls	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	611a      	str	r2, [r3, #16]
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr

0800336c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800336c:	b480      	push	{r7}
 800336e:	b085      	sub	sp, #20
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4013      	ands	r3, r2
 8003384:	041a      	lsls	r2, r3, #16
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	43d9      	mvns	r1, r3
 800338a:	887b      	ldrh	r3, [r7, #2]
 800338c:	400b      	ands	r3, r1
 800338e:	431a      	orrs	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	611a      	str	r2, [r3, #16]
}
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e12b      	b.n	800360a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d106      	bne.n	80033cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7fe fe5e 	bl	8002088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2224      	movs	r2, #36	; 0x24
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003402:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003404:	f000 fce4 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 8003408:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4a81      	ldr	r2, [pc, #516]	; (8003614 <HAL_I2C_Init+0x274>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d807      	bhi.n	8003424 <HAL_I2C_Init+0x84>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4a80      	ldr	r2, [pc, #512]	; (8003618 <HAL_I2C_Init+0x278>)
 8003418:	4293      	cmp	r3, r2
 800341a:	bf94      	ite	ls
 800341c:	2301      	movls	r3, #1
 800341e:	2300      	movhi	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e006      	b.n	8003432 <HAL_I2C_Init+0x92>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4a7d      	ldr	r2, [pc, #500]	; (800361c <HAL_I2C_Init+0x27c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	bf94      	ite	ls
 800342c:	2301      	movls	r3, #1
 800342e:	2300      	movhi	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e0e7      	b.n	800360a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	4a78      	ldr	r2, [pc, #480]	; (8003620 <HAL_I2C_Init+0x280>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	0c9b      	lsrs	r3, r3, #18
 8003444:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a6a      	ldr	r2, [pc, #424]	; (8003614 <HAL_I2C_Init+0x274>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d802      	bhi.n	8003474 <HAL_I2C_Init+0xd4>
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	3301      	adds	r3, #1
 8003472:	e009      	b.n	8003488 <HAL_I2C_Init+0xe8>
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800347a:	fb02 f303 	mul.w	r3, r2, r3
 800347e:	4a69      	ldr	r2, [pc, #420]	; (8003624 <HAL_I2C_Init+0x284>)
 8003480:	fba2 2303 	umull	r2, r3, r2, r3
 8003484:	099b      	lsrs	r3, r3, #6
 8003486:	3301      	adds	r3, #1
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	6812      	ldr	r2, [r2, #0]
 800348c:	430b      	orrs	r3, r1
 800348e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800349a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	495c      	ldr	r1, [pc, #368]	; (8003614 <HAL_I2C_Init+0x274>)
 80034a4:	428b      	cmp	r3, r1
 80034a6:	d819      	bhi.n	80034dc <HAL_I2C_Init+0x13c>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	1e59      	subs	r1, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80034b6:	1c59      	adds	r1, r3, #1
 80034b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034bc:	400b      	ands	r3, r1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_I2C_Init+0x138>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1e59      	subs	r1, r3, #1
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80034d0:	3301      	adds	r3, #1
 80034d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d6:	e051      	b.n	800357c <HAL_I2C_Init+0x1dc>
 80034d8:	2304      	movs	r3, #4
 80034da:	e04f      	b.n	800357c <HAL_I2C_Init+0x1dc>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d111      	bne.n	8003508 <HAL_I2C_Init+0x168>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1e58      	subs	r0, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	440b      	add	r3, r1
 80034f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f6:	3301      	adds	r3, #1
 80034f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	bf0c      	ite	eq
 8003500:	2301      	moveq	r3, #1
 8003502:	2300      	movne	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e012      	b.n	800352e <HAL_I2C_Init+0x18e>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	1e58      	subs	r0, r3, #1
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	460b      	mov	r3, r1
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	0099      	lsls	r1, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	fbb0 f3f3 	udiv	r3, r0, r3
 800351e:	3301      	adds	r3, #1
 8003520:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_I2C_Init+0x196>
 8003532:	2301      	movs	r3, #1
 8003534:	e022      	b.n	800357c <HAL_I2C_Init+0x1dc>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10e      	bne.n	800355c <HAL_I2C_Init+0x1bc>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	1e58      	subs	r0, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6859      	ldr	r1, [r3, #4]
 8003546:	460b      	mov	r3, r1
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	440b      	add	r3, r1
 800354c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003550:	3301      	adds	r3, #1
 8003552:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800355a:	e00f      	b.n	800357c <HAL_I2C_Init+0x1dc>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	1e58      	subs	r0, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6859      	ldr	r1, [r3, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	0099      	lsls	r1, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003572:	3301      	adds	r3, #1
 8003574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003578:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	6809      	ldr	r1, [r1, #0]
 8003580:	4313      	orrs	r3, r2
 8003582:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69da      	ldr	r2, [r3, #28]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6911      	ldr	r1, [r2, #16]
 80035b2:	687a      	ldr	r2, [r7, #4]
 80035b4:	68d2      	ldr	r2, [r2, #12]
 80035b6:	4311      	orrs	r1, r2
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	6812      	ldr	r2, [r2, #0]
 80035bc:	430b      	orrs	r3, r1
 80035be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695a      	ldr	r2, [r3, #20]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f042 0201 	orr.w	r2, r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	000186a0 	.word	0x000186a0
 8003618:	001e847f 	.word	0x001e847f
 800361c:	003d08ff 	.word	0x003d08ff
 8003620:	431bde83 	.word	0x431bde83
 8003624:	10624dd3 	.word	0x10624dd3

08003628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e272      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	f000 8087 	beq.w	8003756 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003648:	4b92      	ldr	r3, [pc, #584]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 030c 	and.w	r3, r3, #12
 8003650:	2b04      	cmp	r3, #4
 8003652:	d00c      	beq.n	800366e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003654:	4b8f      	ldr	r3, [pc, #572]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 030c 	and.w	r3, r3, #12
 800365c:	2b08      	cmp	r3, #8
 800365e:	d112      	bne.n	8003686 <HAL_RCC_OscConfig+0x5e>
 8003660:	4b8c      	ldr	r3, [pc, #560]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800366c:	d10b      	bne.n	8003686 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800366e:	4b89      	ldr	r3, [pc, #548]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d06c      	beq.n	8003754 <HAL_RCC_OscConfig+0x12c>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d168      	bne.n	8003754 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e24c      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x76>
 8003690:	4b80      	ldr	r3, [pc, #512]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a7f      	ldr	r2, [pc, #508]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 8003696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	e02e      	b.n	80036fc <HAL_RCC_OscConfig+0xd4>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x98>
 80036a6:	4b7b      	ldr	r3, [pc, #492]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a7a      	ldr	r2, [pc, #488]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	4b78      	ldr	r3, [pc, #480]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a77      	ldr	r2, [pc, #476]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80036b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	e01d      	b.n	80036fc <HAL_RCC_OscConfig+0xd4>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036c8:	d10c      	bne.n	80036e4 <HAL_RCC_OscConfig+0xbc>
 80036ca:	4b72      	ldr	r3, [pc, #456]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a71      	ldr	r2, [pc, #452]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80036d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036d4:	6013      	str	r3, [r2, #0]
 80036d6:	4b6f      	ldr	r3, [pc, #444]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a6e      	ldr	r2, [pc, #440]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e00b      	b.n	80036fc <HAL_RCC_OscConfig+0xd4>
 80036e4:	4b6b      	ldr	r3, [pc, #428]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a6a      	ldr	r2, [pc, #424]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80036ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ee:	6013      	str	r3, [r2, #0]
 80036f0:	4b68      	ldr	r3, [pc, #416]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a67      	ldr	r2, [pc, #412]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80036f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d013      	beq.n	800372c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7ff f8bc 	bl	8002880 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800370c:	f7ff f8b8 	bl	8002880 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b64      	cmp	r3, #100	; 0x64
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e200      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800371e:	4b5d      	ldr	r3, [pc, #372]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d0f0      	beq.n	800370c <HAL_RCC_OscConfig+0xe4>
 800372a:	e014      	b.n	8003756 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800372c:	f7ff f8a8 	bl	8002880 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003734:	f7ff f8a4 	bl	8002880 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b64      	cmp	r3, #100	; 0x64
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e1ec      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003746:	4b53      	ldr	r3, [pc, #332]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1f0      	bne.n	8003734 <HAL_RCC_OscConfig+0x10c>
 8003752:	e000      	b.n	8003756 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0302 	and.w	r3, r3, #2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d063      	beq.n	800382a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003762:	4b4c      	ldr	r3, [pc, #304]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 030c 	and.w	r3, r3, #12
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800376e:	4b49      	ldr	r3, [pc, #292]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b08      	cmp	r3, #8
 8003778:	d11c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x18c>
 800377a:	4b46      	ldr	r3, [pc, #280]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d116      	bne.n	80037b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	4b43      	ldr	r3, [pc, #268]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_RCC_OscConfig+0x176>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d001      	beq.n	800379e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e1c0      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379e:	4b3d      	ldr	r3, [pc, #244]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4939      	ldr	r1, [pc, #228]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b2:	e03a      	b.n	800382a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d020      	beq.n	80037fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037bc:	4b36      	ldr	r3, [pc, #216]	; (8003898 <HAL_RCC_OscConfig+0x270>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c2:	f7ff f85d 	bl	8002880 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037ca:	f7ff f859 	bl	8002880 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e1a1      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037dc:	4b2d      	ldr	r3, [pc, #180]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e8:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4927      	ldr	r1, [pc, #156]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]
 80037fc:	e015      	b.n	800382a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fe:	4b26      	ldr	r3, [pc, #152]	; (8003898 <HAL_RCC_OscConfig+0x270>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003804:	f7ff f83c 	bl	8002880 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800380c:	f7ff f838 	bl	8002880 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e180      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381e:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d03a      	beq.n	80038ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d019      	beq.n	8003872 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383e:	4b17      	ldr	r3, [pc, #92]	; (800389c <HAL_RCC_OscConfig+0x274>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003844:	f7ff f81c 	bl	8002880 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800384c:	f7ff f818 	bl	8002880 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e160      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <HAL_RCC_OscConfig+0x26c>)
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800386a:	2001      	movs	r0, #1
 800386c:	f000 fad8 	bl	8003e20 <RCC_Delay>
 8003870:	e01c      	b.n	80038ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <HAL_RCC_OscConfig+0x274>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003878:	f7ff f802 	bl	8002880 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387e:	e00f      	b.n	80038a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003880:	f7fe fffe 	bl	8002880 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d908      	bls.n	80038a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e146      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000
 8003898:	42420000 	.word	0x42420000
 800389c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a0:	4b92      	ldr	r3, [pc, #584]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1e9      	bne.n	8003880 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0304 	and.w	r3, r3, #4
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80a6 	beq.w	8003a06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038be:	4b8b      	ldr	r3, [pc, #556]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10d      	bne.n	80038e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ca:	4b88      	ldr	r3, [pc, #544]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 80038cc:	69db      	ldr	r3, [r3, #28]
 80038ce:	4a87      	ldr	r2, [pc, #540]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d4:	61d3      	str	r3, [r2, #28]
 80038d6:	4b85      	ldr	r3, [pc, #532]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	69db      	ldr	r3, [r3, #28]
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038e2:	2301      	movs	r3, #1
 80038e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e6:	4b82      	ldr	r3, [pc, #520]	; (8003af0 <HAL_RCC_OscConfig+0x4c8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d118      	bne.n	8003924 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038f2:	4b7f      	ldr	r3, [pc, #508]	; (8003af0 <HAL_RCC_OscConfig+0x4c8>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7e      	ldr	r2, [pc, #504]	; (8003af0 <HAL_RCC_OscConfig+0x4c8>)
 80038f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fe:	f7fe ffbf 	bl	8002880 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003906:	f7fe ffbb 	bl	8002880 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b64      	cmp	r3, #100	; 0x64
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e103      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003918:	4b75      	ldr	r3, [pc, #468]	; (8003af0 <HAL_RCC_OscConfig+0x4c8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d106      	bne.n	800393a <HAL_RCC_OscConfig+0x312>
 800392c:	4b6f      	ldr	r3, [pc, #444]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	4a6e      	ldr	r2, [pc, #440]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003932:	f043 0301 	orr.w	r3, r3, #1
 8003936:	6213      	str	r3, [r2, #32]
 8003938:	e02d      	b.n	8003996 <HAL_RCC_OscConfig+0x36e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x334>
 8003942:	4b6a      	ldr	r3, [pc, #424]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	4a69      	ldr	r2, [pc, #420]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	6213      	str	r3, [r2, #32]
 800394e:	4b67      	ldr	r3, [pc, #412]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	4a66      	ldr	r2, [pc, #408]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003954:	f023 0304 	bic.w	r3, r3, #4
 8003958:	6213      	str	r3, [r2, #32]
 800395a:	e01c      	b.n	8003996 <HAL_RCC_OscConfig+0x36e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	2b05      	cmp	r3, #5
 8003962:	d10c      	bne.n	800397e <HAL_RCC_OscConfig+0x356>
 8003964:	4b61      	ldr	r3, [pc, #388]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	4a60      	ldr	r2, [pc, #384]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 800396a:	f043 0304 	orr.w	r3, r3, #4
 800396e:	6213      	str	r3, [r2, #32]
 8003970:	4b5e      	ldr	r3, [pc, #376]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	4a5d      	ldr	r2, [pc, #372]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003976:	f043 0301 	orr.w	r3, r3, #1
 800397a:	6213      	str	r3, [r2, #32]
 800397c:	e00b      	b.n	8003996 <HAL_RCC_OscConfig+0x36e>
 800397e:	4b5b      	ldr	r3, [pc, #364]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003980:	6a1b      	ldr	r3, [r3, #32]
 8003982:	4a5a      	ldr	r2, [pc, #360]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	6213      	str	r3, [r2, #32]
 800398a:	4b58      	ldr	r3, [pc, #352]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	4a57      	ldr	r2, [pc, #348]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003990:	f023 0304 	bic.w	r3, r3, #4
 8003994:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d015      	beq.n	80039ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399e:	f7fe ff6f 	bl	8002880 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a4:	e00a      	b.n	80039bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039a6:	f7fe ff6b 	bl	8002880 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e0b1      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039bc:	4b4b      	ldr	r3, [pc, #300]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0ee      	beq.n	80039a6 <HAL_RCC_OscConfig+0x37e>
 80039c8:	e014      	b.n	80039f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ca:	f7fe ff59 	bl	8002880 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039d0:	e00a      	b.n	80039e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d2:	f7fe ff55 	bl	8002880 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e09b      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e8:	4b40      	ldr	r3, [pc, #256]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ee      	bne.n	80039d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80039f4:	7dfb      	ldrb	r3, [r7, #23]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d105      	bne.n	8003a06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fa:	4b3c      	ldr	r3, [pc, #240]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	4a3b      	ldr	r2, [pc, #236]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8087 	beq.w	8003b1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a10:	4b36      	ldr	r3, [pc, #216]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 030c 	and.w	r3, r3, #12
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d061      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d146      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a24:	4b33      	ldr	r3, [pc, #204]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a2a:	f7fe ff29 	bl	8002880 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fe ff25 	bl	8002880 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e06d      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a44:	4b29      	ldr	r3, [pc, #164]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f0      	bne.n	8003a32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a58:	d108      	bne.n	8003a6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a5a:	4b24      	ldr	r3, [pc, #144]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	4921      	ldr	r1, [pc, #132]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a6c:	4b1f      	ldr	r3, [pc, #124]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a19      	ldr	r1, [r3, #32]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	491b      	ldr	r1, [pc, #108]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8a:	f7fe fef9 	bl	8002880 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a92:	f7fe fef5 	bl	8002880 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e03d      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aa4:	4b11      	ldr	r3, [pc, #68]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x46a>
 8003ab0:	e035      	b.n	8003b1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab2:	4b10      	ldr	r3, [pc, #64]	; (8003af4 <HAL_RCC_OscConfig+0x4cc>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fe fee2 	bl	8002880 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fe fede 	bl	8002880 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e026      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad2:	4b06      	ldr	r3, [pc, #24]	; (8003aec <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x498>
 8003ade:	e01e      	b.n	8003b1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e019      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40007000 	.word	0x40007000
 8003af4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_RCC_OscConfig+0x500>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d106      	bne.n	8003b1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d001      	beq.n	8003b1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40021000 	.word	0x40021000

08003b2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e0d0      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b40:	4b6a      	ldr	r3, [pc, #424]	; (8003cec <HAL_RCC_ClockConfig+0x1c0>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0307 	and.w	r3, r3, #7
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d910      	bls.n	8003b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4e:	4b67      	ldr	r3, [pc, #412]	; (8003cec <HAL_RCC_ClockConfig+0x1c0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f023 0207 	bic.w	r2, r3, #7
 8003b56:	4965      	ldr	r1, [pc, #404]	; (8003cec <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b63      	ldr	r3, [pc, #396]	; (8003cec <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e0b8      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d020      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d005      	beq.n	8003b94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b88:	4b59      	ldr	r3, [pc, #356]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4a58      	ldr	r2, [pc, #352]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ba0:	4b53      	ldr	r3, [pc, #332]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	4a52      	ldr	r2, [pc, #328]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003baa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bac:	4b50      	ldr	r3, [pc, #320]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	494d      	ldr	r1, [pc, #308]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d040      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d107      	bne.n	8003be2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	4b47      	ldr	r3, [pc, #284]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d115      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e07f      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d107      	bne.n	8003bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bea:	4b41      	ldr	r3, [pc, #260]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d109      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e073      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfa:	4b3d      	ldr	r3, [pc, #244]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e06b      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c0a:	4b39      	ldr	r3, [pc, #228]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f023 0203 	bic.w	r2, r3, #3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	4936      	ldr	r1, [pc, #216]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c1c:	f7fe fe30 	bl	8002880 <HAL_GetTick>
 8003c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c24:	f7fe fe2c 	bl	8002880 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e053      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c3a:	4b2d      	ldr	r3, [pc, #180]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f003 020c 	and.w	r2, r3, #12
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d1eb      	bne.n	8003c24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c4c:	4b27      	ldr	r3, [pc, #156]	; (8003cec <HAL_RCC_ClockConfig+0x1c0>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	429a      	cmp	r2, r3
 8003c58:	d210      	bcs.n	8003c7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c5a:	4b24      	ldr	r3, [pc, #144]	; (8003cec <HAL_RCC_ClockConfig+0x1c0>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f023 0207 	bic.w	r2, r3, #7
 8003c62:	4922      	ldr	r1, [pc, #136]	; (8003cec <HAL_RCC_ClockConfig+0x1c0>)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c6a:	4b20      	ldr	r3, [pc, #128]	; (8003cec <HAL_RCC_ClockConfig+0x1c0>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d001      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e032      	b.n	8003ce2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0304 	and.w	r3, r3, #4
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d008      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c88:	4b19      	ldr	r3, [pc, #100]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4916      	ldr	r1, [pc, #88]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ca6:	4b12      	ldr	r3, [pc, #72]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	490e      	ldr	r1, [pc, #56]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cba:	f000 f821 	bl	8003d00 <HAL_RCC_GetSysClockFreq>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	091b      	lsrs	r3, r3, #4
 8003cc6:	f003 030f 	and.w	r3, r3, #15
 8003cca:	490a      	ldr	r1, [pc, #40]	; (8003cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8003ccc:	5ccb      	ldrb	r3, [r1, r3]
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	4a09      	ldr	r2, [pc, #36]	; (8003cf8 <HAL_RCC_ClockConfig+0x1cc>)
 8003cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003cd6:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <HAL_RCC_ClockConfig+0x1d0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fe fd8e 	bl	80027fc <HAL_InitTick>

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40022000 	.word	0x40022000
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	08006d30 	.word	0x08006d30
 8003cf8:	20000004 	.word	0x20000004
 8003cfc:	20000008 	.word	0x20000008

08003d00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d00:	b490      	push	{r4, r7}
 8003d02:	b08a      	sub	sp, #40	; 0x28
 8003d04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d06:	4b29      	ldr	r3, [pc, #164]	; (8003dac <HAL_RCC_GetSysClockFreq+0xac>)
 8003d08:	1d3c      	adds	r4, r7, #4
 8003d0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d10:	f240 2301 	movw	r3, #513	; 0x201
 8003d14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d2a:	4b21      	ldr	r3, [pc, #132]	; (8003db0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f003 030c 	and.w	r3, r3, #12
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d002      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x40>
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d003      	beq.n	8003d46 <HAL_RCC_GetSysClockFreq+0x46>
 8003d3e:	e02b      	b.n	8003d98 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d40:	4b1c      	ldr	r3, [pc, #112]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d42:	623b      	str	r3, [r7, #32]
      break;
 8003d44:	e02b      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	0c9b      	lsrs	r3, r3, #18
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	3328      	adds	r3, #40	; 0x28
 8003d50:	443b      	add	r3, r7
 8003d52:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003d56:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d012      	beq.n	8003d88 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d62:	4b13      	ldr	r3, [pc, #76]	; (8003db0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	0c5b      	lsrs	r3, r3, #17
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	3328      	adds	r3, #40	; 0x28
 8003d6e:	443b      	add	r3, r7
 8003d70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003d74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	4a0e      	ldr	r2, [pc, #56]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d7a:	fb03 f202 	mul.w	r2, r3, r2
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
 8003d86:	e004      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	4a0b      	ldr	r2, [pc, #44]	; (8003db8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	623b      	str	r3, [r7, #32]
      break;
 8003d96:	e002      	b.n	8003d9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d98:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003d9a:	623b      	str	r3, [r7, #32]
      break;
 8003d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3728      	adds	r7, #40	; 0x28
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc90      	pop	{r4, r7}
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	08006d0c 	.word	0x08006d0c
 8003db0:	40021000 	.word	0x40021000
 8003db4:	007a1200 	.word	0x007a1200
 8003db8:	003d0900 	.word	0x003d0900

08003dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc0:	4b02      	ldr	r3, [pc, #8]	; (8003dcc <HAL_RCC_GetHCLKFreq+0x10>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bc80      	pop	{r7}
 8003dca:	4770      	bx	lr
 8003dcc:	20000004 	.word	0x20000004

08003dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dd4:	f7ff fff2 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	0a1b      	lsrs	r3, r3, #8
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4903      	ldr	r1, [pc, #12]	; (8003df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40021000 	.word	0x40021000
 8003df4:	08006d40 	.word	0x08006d40

08003df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dfc:	f7ff ffde 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003e00:	4602      	mov	r2, r0
 8003e02:	4b05      	ldr	r3, [pc, #20]	; (8003e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	0adb      	lsrs	r3, r3, #11
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	4903      	ldr	r1, [pc, #12]	; (8003e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e0e:	5ccb      	ldrb	r3, [r1, r3]
 8003e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	08006d40 	.word	0x08006d40

08003e20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b085      	sub	sp, #20
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e28:	4b0a      	ldr	r3, [pc, #40]	; (8003e54 <RCC_Delay+0x34>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a0a      	ldr	r2, [pc, #40]	; (8003e58 <RCC_Delay+0x38>)
 8003e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e32:	0a5b      	lsrs	r3, r3, #9
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	fb02 f303 	mul.w	r3, r2, r3
 8003e3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e3c:	bf00      	nop
  }
  while (Delay --);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	1e5a      	subs	r2, r3, #1
 8003e42:	60fa      	str	r2, [r7, #12]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f9      	bne.n	8003e3c <RCC_Delay+0x1c>
}
 8003e48:	bf00      	nop
 8003e4a:	bf00      	nop
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bc80      	pop	{r7}
 8003e52:	4770      	bx	lr
 8003e54:	20000004 	.word	0x20000004
 8003e58:	10624dd3 	.word	0x10624dd3

08003e5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e041      	b.n	8003ef2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7fe f950 	bl	8002128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2202      	movs	r2, #2
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	3304      	adds	r3, #4
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	f000 fd62 	bl	8004964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2201      	movs	r2, #1
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
	...

08003efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d001      	beq.n	8003f14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e03a      	b.n	8003f8a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <HAL_TIM_Base_Start_IT+0x98>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d00e      	beq.n	8003f54 <HAL_TIM_Base_Start_IT+0x58>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3e:	d009      	beq.n	8003f54 <HAL_TIM_Base_Start_IT+0x58>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a14      	ldr	r2, [pc, #80]	; (8003f98 <HAL_TIM_Base_Start_IT+0x9c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d004      	beq.n	8003f54 <HAL_TIM_Base_Start_IT+0x58>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a13      	ldr	r2, [pc, #76]	; (8003f9c <HAL_TIM_Base_Start_IT+0xa0>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d111      	bne.n	8003f78 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2b06      	cmp	r3, #6
 8003f64:	d010      	beq.n	8003f88 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f042 0201 	orr.w	r2, r2, #1
 8003f74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f76:	e007      	b.n	8003f88 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0201 	orr.w	r2, r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800

08003fa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e041      	b.n	8004036 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f839 	bl	800403e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	4619      	mov	r1, r3
 8003fde:	4610      	mov	r0, r2
 8003fe0:	f000 fcc0 	bl	8004964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800403e:	b480      	push	{r7}
 8004040:	b083      	sub	sp, #12
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004046:	bf00      	nop
 8004048:	370c      	adds	r7, #12
 800404a:	46bd      	mov	sp, r7
 800404c:	bc80      	pop	{r7}
 800404e:	4770      	bx	lr

08004050 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d109      	bne.n	8004074 <HAL_TIM_PWM_Start+0x24>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b01      	cmp	r3, #1
 800406a:	bf14      	ite	ne
 800406c:	2301      	movne	r3, #1
 800406e:	2300      	moveq	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	e022      	b.n	80040ba <HAL_TIM_PWM_Start+0x6a>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	2b04      	cmp	r3, #4
 8004078:	d109      	bne.n	800408e <HAL_TIM_PWM_Start+0x3e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	bf14      	ite	ne
 8004086:	2301      	movne	r3, #1
 8004088:	2300      	moveq	r3, #0
 800408a:	b2db      	uxtb	r3, r3
 800408c:	e015      	b.n	80040ba <HAL_TIM_PWM_Start+0x6a>
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b08      	cmp	r3, #8
 8004092:	d109      	bne.n	80040a8 <HAL_TIM_PWM_Start+0x58>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	bf14      	ite	ne
 80040a0:	2301      	movne	r3, #1
 80040a2:	2300      	moveq	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	e008      	b.n	80040ba <HAL_TIM_PWM_Start+0x6a>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	bf14      	ite	ne
 80040b4:	2301      	movne	r3, #1
 80040b6:	2300      	moveq	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e05e      	b.n	8004180 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d104      	bne.n	80040d2 <HAL_TIM_PWM_Start+0x82>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2202      	movs	r2, #2
 80040cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040d0:	e013      	b.n	80040fa <HAL_TIM_PWM_Start+0xaa>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d104      	bne.n	80040e2 <HAL_TIM_PWM_Start+0x92>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040e0:	e00b      	b.n	80040fa <HAL_TIM_PWM_Start+0xaa>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d104      	bne.n	80040f2 <HAL_TIM_PWM_Start+0xa2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040f0:	e003      	b.n	80040fa <HAL_TIM_PWM_Start+0xaa>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2202      	movs	r2, #2
 80040f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2201      	movs	r2, #1
 8004100:	6839      	ldr	r1, [r7, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 feae 	bl	8004e64 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1e      	ldr	r2, [pc, #120]	; (8004188 <HAL_TIM_PWM_Start+0x138>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d107      	bne.n	8004122 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004120:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a18      	ldr	r2, [pc, #96]	; (8004188 <HAL_TIM_PWM_Start+0x138>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d00e      	beq.n	800414a <HAL_TIM_PWM_Start+0xfa>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004134:	d009      	beq.n	800414a <HAL_TIM_PWM_Start+0xfa>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a14      	ldr	r2, [pc, #80]	; (800418c <HAL_TIM_PWM_Start+0x13c>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d004      	beq.n	800414a <HAL_TIM_PWM_Start+0xfa>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a12      	ldr	r2, [pc, #72]	; (8004190 <HAL_TIM_PWM_Start+0x140>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d111      	bne.n	800416e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 0307 	and.w	r3, r3, #7
 8004154:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2b06      	cmp	r3, #6
 800415a:	d010      	beq.n	800417e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800416c:	e007      	b.n	800417e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40012c00 	.word	0x40012c00
 800418c:	40000400 	.word	0x40000400
 8004190:	40000800 	.word	0x40000800

08004194 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e093      	b.n	80042d0 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d106      	bne.n	80041c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f7fd ffed 	bl	800219c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2202      	movs	r2, #2
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041d8:	f023 0307 	bic.w	r3, r3, #7
 80041dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f000 fbbb 	bl	8004964 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	699b      	ldr	r3, [r3, #24]
 80041fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004216:	f023 0303 	bic.w	r3, r3, #3
 800421a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	689a      	ldr	r2, [r3, #8]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	4313      	orrs	r3, r2
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	4313      	orrs	r3, r2
 800422c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004234:	f023 030c 	bic.w	r3, r3, #12
 8004238:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004240:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004244:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	021b      	lsls	r3, r3, #8
 8004250:	4313      	orrs	r3, r2
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	011a      	lsls	r2, r3, #4
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	031b      	lsls	r3, r3, #12
 8004264:	4313      	orrs	r3, r2
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	4313      	orrs	r3, r2
 800426a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004272:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685a      	ldr	r2, [r3, #4]
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	4313      	orrs	r3, r2
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042e8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042f0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042f8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004300:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d110      	bne.n	800432a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004308:	7bfb      	ldrb	r3, [r7, #15]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d102      	bne.n	8004314 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800430e:	7b7b      	ldrb	r3, [r7, #13]
 8004310:	2b01      	cmp	r3, #1
 8004312:	d001      	beq.n	8004318 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e069      	b.n	80043ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004328:	e031      	b.n	800438e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2b04      	cmp	r3, #4
 800432e:	d110      	bne.n	8004352 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004330:	7bbb      	ldrb	r3, [r7, #14]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d102      	bne.n	800433c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004336:	7b3b      	ldrb	r3, [r7, #12]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d001      	beq.n	8004340 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e055      	b.n	80043ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2202      	movs	r2, #2
 8004344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004350:	e01d      	b.n	800438e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d108      	bne.n	800436a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004358:	7bbb      	ldrb	r3, [r7, #14]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d105      	bne.n	800436a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800435e:	7b7b      	ldrb	r3, [r7, #13]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d102      	bne.n	800436a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004364:	7b3b      	ldrb	r3, [r7, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d001      	beq.n	800436e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e03e      	b.n	80043ec <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2202      	movs	r2, #2
 8004372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2202      	movs	r2, #2
 800437a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2202      	movs	r2, #2
 800438a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <HAL_TIM_Encoder_Start+0xc4>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2b04      	cmp	r3, #4
 8004398:	d008      	beq.n	80043ac <HAL_TIM_Encoder_Start+0xd4>
 800439a:	e00f      	b.n	80043bc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2201      	movs	r2, #1
 80043a2:	2100      	movs	r1, #0
 80043a4:	4618      	mov	r0, r3
 80043a6:	f000 fd5d 	bl	8004e64 <TIM_CCxChannelCmd>
      break;
 80043aa:	e016      	b.n	80043da <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2201      	movs	r2, #1
 80043b2:	2104      	movs	r1, #4
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fd55 	bl	8004e64 <TIM_CCxChannelCmd>
      break;
 80043ba:	e00e      	b.n	80043da <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2201      	movs	r2, #1
 80043c2:	2100      	movs	r1, #0
 80043c4:	4618      	mov	r0, r3
 80043c6:	f000 fd4d 	bl	8004e64 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2201      	movs	r2, #1
 80043d0:	2104      	movs	r1, #4
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fd46 	bl	8004e64 <TIM_CCxChannelCmd>
      break;
 80043d8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f042 0201 	orr.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b02      	cmp	r3, #2
 8004408:	d122      	bne.n	8004450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b02      	cmp	r3, #2
 8004416:	d11b      	bne.n	8004450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f06f 0202 	mvn.w	r2, #2
 8004420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fa78 	bl	800492c <HAL_TIM_IC_CaptureCallback>
 800443c:	e005      	b.n	800444a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fa6b 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f000 fa7a 	bl	800493e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	f003 0304 	and.w	r3, r3, #4
 800445a:	2b04      	cmp	r3, #4
 800445c:	d122      	bne.n	80044a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b04      	cmp	r3, #4
 800446a:	d11b      	bne.n	80044a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f06f 0204 	mvn.w	r2, #4
 8004474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2202      	movs	r2, #2
 800447a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fa4e 	bl	800492c <HAL_TIM_IC_CaptureCallback>
 8004490:	e005      	b.n	800449e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fa41 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 fa50 	bl	800493e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	f003 0308 	and.w	r3, r3, #8
 80044ae:	2b08      	cmp	r3, #8
 80044b0:	d122      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d11b      	bne.n	80044f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0208 	mvn.w	r2, #8
 80044c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2204      	movs	r2, #4
 80044ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fa24 	bl	800492c <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 fa17 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fa26 	bl	800493e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b10      	cmp	r3, #16
 8004504:	d122      	bne.n	800454c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b10      	cmp	r3, #16
 8004512:	d11b      	bne.n	800454c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0210 	mvn.w	r2, #16
 800451c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2208      	movs	r2, #8
 8004522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f9fa 	bl	800492c <HAL_TIM_IC_CaptureCallback>
 8004538:	e005      	b.n	8004546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f9ed 	bl	800491a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f9fc 	bl	800493e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b01      	cmp	r3, #1
 8004558:	d10e      	bne.n	8004578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0301 	and.w	r3, r3, #1
 8004564:	2b01      	cmp	r3, #1
 8004566:	d107      	bne.n	8004578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0201 	mvn.w	r2, #1
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 f9c8 	bl	8004908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004582:	2b80      	cmp	r3, #128	; 0x80
 8004584:	d10e      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004590:	2b80      	cmp	r3, #128	; 0x80
 8004592:	d107      	bne.n	80045a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800459c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fceb 	bl	8004f7a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ae:	2b40      	cmp	r3, #64	; 0x40
 80045b0:	d10e      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045bc:	2b40      	cmp	r3, #64	; 0x40
 80045be:	d107      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f9c0 	bl	8004950 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0320 	and.w	r3, r3, #32
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d10e      	bne.n	80045fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d107      	bne.n	80045fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0220 	mvn.w	r2, #32
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fcb6 	bl	8004f68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004616:	2b01      	cmp	r3, #1
 8004618:	d101      	bne.n	800461e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800461a:	2302      	movs	r3, #2
 800461c:	e0ac      	b.n	8004778 <HAL_TIM_PWM_ConfigChannel+0x174>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b0c      	cmp	r3, #12
 800462a:	f200 809f 	bhi.w	800476c <HAL_TIM_PWM_ConfigChannel+0x168>
 800462e:	a201      	add	r2, pc, #4	; (adr r2, 8004634 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004634:	08004669 	.word	0x08004669
 8004638:	0800476d 	.word	0x0800476d
 800463c:	0800476d 	.word	0x0800476d
 8004640:	0800476d 	.word	0x0800476d
 8004644:	080046a9 	.word	0x080046a9
 8004648:	0800476d 	.word	0x0800476d
 800464c:	0800476d 	.word	0x0800476d
 8004650:	0800476d 	.word	0x0800476d
 8004654:	080046eb 	.word	0x080046eb
 8004658:	0800476d 	.word	0x0800476d
 800465c:	0800476d 	.word	0x0800476d
 8004660:	0800476d 	.word	0x0800476d
 8004664:	0800472b 	.word	0x0800472b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	4618      	mov	r0, r3
 8004670:	f000 f9da 	bl	8004a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0208 	orr.w	r2, r2, #8
 8004682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699a      	ldr	r2, [r3, #24]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0204 	bic.w	r2, r2, #4
 8004692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6999      	ldr	r1, [r3, #24]
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	430a      	orrs	r2, r1
 80046a4:	619a      	str	r2, [r3, #24]
      break;
 80046a6:	e062      	b.n	800476e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fa20 	bl	8004af4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	699a      	ldr	r2, [r3, #24]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6999      	ldr	r1, [r3, #24]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	021a      	lsls	r2, r3, #8
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	619a      	str	r2, [r3, #24]
      break;
 80046e8:	e041      	b.n	800476e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f000 fa69 	bl	8004bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0208 	orr.w	r2, r2, #8
 8004704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69da      	ldr	r2, [r3, #28]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0204 	bic.w	r2, r2, #4
 8004714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69d9      	ldr	r1, [r3, #28]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	61da      	str	r2, [r3, #28]
      break;
 8004728:	e021      	b.n	800476e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fab3 	bl	8004c9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69d9      	ldr	r1, [r3, #28]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	021a      	lsls	r2, r3, #8
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	61da      	str	r2, [r3, #28]
      break;
 800476a:	e000      	b.n	800476e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800476c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_TIM_ConfigClockSource+0x18>
 8004794:	2302      	movs	r3, #2
 8004796:	e0b3      	b.n	8004900 <HAL_TIM_ConfigClockSource+0x180>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80047b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d0:	d03e      	beq.n	8004850 <HAL_TIM_ConfigClockSource+0xd0>
 80047d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d6:	f200 8087 	bhi.w	80048e8 <HAL_TIM_ConfigClockSource+0x168>
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	f000 8085 	beq.w	80048ec <HAL_TIM_ConfigClockSource+0x16c>
 80047e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e6:	d87f      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x168>
 80047e8:	2b70      	cmp	r3, #112	; 0x70
 80047ea:	d01a      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0xa2>
 80047ec:	2b70      	cmp	r3, #112	; 0x70
 80047ee:	d87b      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x168>
 80047f0:	2b60      	cmp	r3, #96	; 0x60
 80047f2:	d050      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0x116>
 80047f4:	2b60      	cmp	r3, #96	; 0x60
 80047f6:	d877      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x168>
 80047f8:	2b50      	cmp	r3, #80	; 0x50
 80047fa:	d03c      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0xf6>
 80047fc:	2b50      	cmp	r3, #80	; 0x50
 80047fe:	d873      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x168>
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d058      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x136>
 8004804:	2b40      	cmp	r3, #64	; 0x40
 8004806:	d86f      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x168>
 8004808:	2b30      	cmp	r3, #48	; 0x30
 800480a:	d064      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x156>
 800480c:	2b30      	cmp	r3, #48	; 0x30
 800480e:	d86b      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x168>
 8004810:	2b20      	cmp	r3, #32
 8004812:	d060      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x156>
 8004814:	2b20      	cmp	r3, #32
 8004816:	d867      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x168>
 8004818:	2b00      	cmp	r3, #0
 800481a:	d05c      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x156>
 800481c:	2b10      	cmp	r3, #16
 800481e:	d05a      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004820:	e062      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6899      	ldr	r1, [r3, #8]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f000 faf8 	bl	8004e26 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004844:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	609a      	str	r2, [r3, #8]
      break;
 800484e:	e04e      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	6899      	ldr	r1, [r3, #8]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f000 fae1 	bl	8004e26 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004872:	609a      	str	r2, [r3, #8]
      break;
 8004874:	e03b      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6859      	ldr	r1, [r3, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	461a      	mov	r2, r3
 8004884:	f000 fa58 	bl	8004d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2150      	movs	r1, #80	; 0x50
 800488e:	4618      	mov	r0, r3
 8004890:	f000 faaf 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 8004894:	e02b      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6859      	ldr	r1, [r3, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f000 fa76 	bl	8004d94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2160      	movs	r1, #96	; 0x60
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 fa9f 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 80048b4:	e01b      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6818      	ldr	r0, [r3, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	6859      	ldr	r1, [r3, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	461a      	mov	r2, r3
 80048c4:	f000 fa38 	bl	8004d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2140      	movs	r1, #64	; 0x40
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 fa8f 	bl	8004df2 <TIM_ITRx_SetConfig>
      break;
 80048d4:	e00b      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f000 fa86 	bl	8004df2 <TIM_ITRx_SetConfig>
        break;
 80048e6:	e002      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048e8:	bf00      	nop
 80048ea:	e000      	b.n	80048ee <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048ec:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800491a:	b480      	push	{r7}
 800491c:	b083      	sub	sp, #12
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004922:	bf00      	nop
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr

0800492c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	bc80      	pop	{r7}
 800493c:	4770      	bx	lr

0800493e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004946:	bf00      	nop
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	bc80      	pop	{r7}
 800494e:	4770      	bx	lr

08004950 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr
	...

08004964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a29      	ldr	r2, [pc, #164]	; (8004a1c <TIM_Base_SetConfig+0xb8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d00b      	beq.n	8004994 <TIM_Base_SetConfig+0x30>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004982:	d007      	beq.n	8004994 <TIM_Base_SetConfig+0x30>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4a26      	ldr	r2, [pc, #152]	; (8004a20 <TIM_Base_SetConfig+0xbc>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d003      	beq.n	8004994 <TIM_Base_SetConfig+0x30>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a25      	ldr	r2, [pc, #148]	; (8004a24 <TIM_Base_SetConfig+0xc0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d108      	bne.n	80049a6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a1c      	ldr	r2, [pc, #112]	; (8004a1c <TIM_Base_SetConfig+0xb8>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00b      	beq.n	80049c6 <TIM_Base_SetConfig+0x62>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b4:	d007      	beq.n	80049c6 <TIM_Base_SetConfig+0x62>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <TIM_Base_SetConfig+0xbc>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_Base_SetConfig+0x62>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <TIM_Base_SetConfig+0xc0>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d108      	bne.n	80049d8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a07      	ldr	r2, [pc, #28]	; (8004a1c <TIM_Base_SetConfig+0xb8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d103      	bne.n	8004a0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	615a      	str	r2, [r3, #20]
}
 8004a12:	bf00      	nop
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bc80      	pop	{r7}
 8004a1a:	4770      	bx	lr
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800

08004a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	f023 0201 	bic.w	r2, r3, #1
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f023 0303 	bic.w	r3, r3, #3
 8004a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	f023 0302 	bic.w	r3, r3, #2
 8004a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a1c      	ldr	r2, [pc, #112]	; (8004af0 <TIM_OC1_SetConfig+0xc8>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d10c      	bne.n	8004a9e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f023 0308 	bic.w	r3, r3, #8
 8004a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f023 0304 	bic.w	r3, r3, #4
 8004a9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a13      	ldr	r2, [pc, #76]	; (8004af0 <TIM_OC1_SetConfig+0xc8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d111      	bne.n	8004aca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	693a      	ldr	r2, [r7, #16]
 8004ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	621a      	str	r2, [r3, #32]
}
 8004ae4:	bf00      	nop
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40012c00 	.word	0x40012c00

08004af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f023 0210 	bic.w	r2, r3, #16
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0320 	bic.w	r3, r3, #32
 8004b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <TIM_OC2_SetConfig+0xd0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d10d      	bne.n	8004b70 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	697a      	ldr	r2, [r7, #20]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a14      	ldr	r2, [pc, #80]	; (8004bc4 <TIM_OC2_SetConfig+0xd0>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d113      	bne.n	8004ba0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	695b      	ldr	r3, [r3, #20]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	693a      	ldr	r2, [r7, #16]
 8004ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bc80      	pop	{r7}
 8004bc2:	4770      	bx	lr
 8004bc4:	40012c00 	.word	0x40012c00

08004bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b087      	sub	sp, #28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a1b      	ldr	r3, [r3, #32]
 8004bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0303 	bic.w	r3, r3, #3
 8004bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <TIM_OC3_SetConfig+0xd0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d10d      	bne.n	8004c42 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a14      	ldr	r2, [pc, #80]	; (8004c98 <TIM_OC3_SetConfig+0xd0>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d113      	bne.n	8004c72 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	621a      	str	r2, [r3, #32]
}
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40012c00 	.word	0x40012c00

08004c9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b087      	sub	sp, #28
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6a1b      	ldr	r3, [r3, #32]
 8004caa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ce6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	031b      	lsls	r3, r3, #12
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a0f      	ldr	r2, [pc, #60]	; (8004d34 <TIM_OC4_SetConfig+0x98>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d109      	bne.n	8004d10 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	695b      	ldr	r3, [r3, #20]
 8004d08:	019b      	lsls	r3, r3, #6
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	697a      	ldr	r2, [r7, #20]
 8004d14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	621a      	str	r2, [r3, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	371c      	adds	r7, #28
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr
 8004d34:	40012c00 	.word	0x40012c00

08004d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	f023 0201 	bic.w	r2, r3, #1
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	011b      	lsls	r3, r3, #4
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f023 030a 	bic.w	r3, r3, #10
 8004d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	621a      	str	r2, [r3, #32]
}
 8004d8a:	bf00      	nop
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr

08004d94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f023 0210 	bic.w	r2, r3, #16
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dbe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	031b      	lsls	r3, r3, #12
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004dd0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	621a      	str	r2, [r3, #32]
}
 8004de8:	bf00      	nop
 8004dea:	371c      	adds	r7, #28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr

08004df2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b085      	sub	sp, #20
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
 8004dfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f043 0307 	orr.w	r3, r3, #7
 8004e14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	609a      	str	r2, [r3, #8]
}
 8004e1c:	bf00      	nop
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	bc80      	pop	{r7}
 8004e24:	4770      	bx	lr

08004e26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b087      	sub	sp, #28
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	60f8      	str	r0, [r7, #12]
 8004e2e:	60b9      	str	r1, [r7, #8]
 8004e30:	607a      	str	r2, [r7, #4]
 8004e32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	021a      	lsls	r2, r3, #8
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	609a      	str	r2, [r3, #8]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr

08004e64 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 031f 	and.w	r3, r3, #31
 8004e76:	2201      	movs	r2, #1
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1a      	ldr	r2, [r3, #32]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	43db      	mvns	r3, r3
 8004e86:	401a      	ands	r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a1a      	ldr	r2, [r3, #32]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f003 031f 	and.w	r3, r3, #31
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	fa01 f303 	lsl.w	r3, r1, r3
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	621a      	str	r2, [r3, #32]
}
 8004ea2:	bf00      	nop
 8004ea4:	371c      	adds	r7, #28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bc80      	pop	{r7}
 8004eaa:	4770      	bx	lr

08004eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	e046      	b.n	8004f52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a16      	ldr	r2, [pc, #88]	; (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00e      	beq.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f10:	d009      	beq.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a12      	ldr	r2, [pc, #72]	; (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d004      	beq.n	8004f26 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a10      	ldr	r2, [pc, #64]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d10c      	bne.n	8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3714      	adds	r7, #20
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bc80      	pop	{r7}
 8004f5a:	4770      	bx	lr
 8004f5c:	40012c00 	.word	0x40012c00
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800

08004f68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr

08004f7a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bc80      	pop	{r7}
 8004f8a:	4770      	bx	lr

08004f8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e03f      	b.n	800501e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fd f9b8 	bl	8002328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2224      	movs	r2, #36	; 0x24
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 fd89 	bl	8005ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fe4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	695a      	ldr	r2, [r3, #20]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ff4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68da      	ldr	r2, [r3, #12]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005004:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2220      	movs	r2, #32
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b08a      	sub	sp, #40	; 0x28
 800502a:	af02      	add	r7, sp, #8
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	4613      	mov	r3, r2
 8005034:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b20      	cmp	r3, #32
 8005044:	d17c      	bne.n	8005140 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_UART_Transmit+0x2c>
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e075      	b.n	8005142 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_UART_Transmit+0x3e>
 8005060:	2302      	movs	r3, #2
 8005062:	e06e      	b.n	8005142 <HAL_UART_Transmit+0x11c>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2221      	movs	r2, #33	; 0x21
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800507a:	f7fd fc01 	bl	8002880 <HAL_GetTick>
 800507e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	88fa      	ldrh	r2, [r7, #6]
 8005084:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	88fa      	ldrh	r2, [r7, #6]
 800508a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005094:	d108      	bne.n	80050a8 <HAL_UART_Transmit+0x82>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d104      	bne.n	80050a8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800509e:	2300      	movs	r3, #0
 80050a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	61bb      	str	r3, [r7, #24]
 80050a6:	e003      	b.n	80050b0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050ac:	2300      	movs	r3, #0
 80050ae:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80050b8:	e02a      	b.n	8005110 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2200      	movs	r2, #0
 80050c2:	2180      	movs	r1, #128	; 0x80
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 fafa 	bl	80056be <UART_WaitOnFlagUntilTimeout>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d001      	beq.n	80050d4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e036      	b.n	8005142 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80050d4:	69fb      	ldr	r3, [r7, #28]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10b      	bne.n	80050f2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050e8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	3302      	adds	r3, #2
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	e007      	b.n	8005102 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	781a      	ldrb	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	3301      	adds	r3, #1
 8005100:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d1cf      	bne.n	80050ba <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2200      	movs	r2, #0
 8005122:	2140      	movs	r1, #64	; 0x40
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 faca 	bl	80056be <UART_WaitOnFlagUntilTimeout>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e006      	b.n	8005142 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	e000      	b.n	8005142 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005140:	2302      	movs	r3, #2
  }
}
 8005142:	4618      	mov	r0, r3
 8005144:	3720      	adds	r7, #32
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	4613      	mov	r3, r2
 8005156:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b20      	cmp	r3, #32
 8005162:	d11d      	bne.n	80051a0 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d002      	beq.n	8005170 <HAL_UART_Receive_DMA+0x26>
 800516a:	88fb      	ldrh	r3, [r7, #6]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d101      	bne.n	8005174 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e016      	b.n	80051a2 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800517a:	2b01      	cmp	r3, #1
 800517c:	d101      	bne.n	8005182 <HAL_UART_Receive_DMA+0x38>
 800517e:	2302      	movs	r3, #2
 8005180:	e00f      	b.n	80051a2 <HAL_UART_Receive_DMA+0x58>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	461a      	mov	r2, r3
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f000 fadc 	bl	8005754 <UART_Start_Receive_DMA>
 800519c:	4603      	mov	r3, r0
 800519e:	e000      	b.n	80051a2 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80051a0:	2302      	movs	r3, #2
  }
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b08a      	sub	sp, #40	; 0x28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	f003 030f 	and.w	r3, r3, #15
 80051da:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10d      	bne.n	80051fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	f003 0320 	and.w	r3, r3, #32
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <HAL_UART_IRQHandler+0x52>
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fbcc 	bl	8005994 <UART_Receive_IT>
      return;
 80051fc:	e17b      	b.n	80054f6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80b1 	beq.w	8005368 <HAL_UART_IRQHandler+0x1bc>
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d105      	bne.n	800521c <HAL_UART_IRQHandler+0x70>
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005216:	2b00      	cmp	r3, #0
 8005218:	f000 80a6 	beq.w	8005368 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d00a      	beq.n	800523c <HAL_UART_IRQHandler+0x90>
 8005226:	6a3b      	ldr	r3, [r7, #32]
 8005228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d005      	beq.n	800523c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	f043 0201 	orr.w	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	f003 0304 	and.w	r3, r3, #4
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_UART_IRQHandler+0xb0>
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005254:	f043 0202 	orr.w	r2, r3, #2
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00a      	beq.n	800527c <HAL_UART_IRQHandler+0xd0>
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d005      	beq.n	800527c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005274:	f043 0204 	orr.w	r2, r3, #4
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00f      	beq.n	80052a6 <HAL_UART_IRQHandler+0xfa>
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d104      	bne.n	800529a <HAL_UART_IRQHandler+0xee>
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f043 0208 	orr.w	r2, r3, #8
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 811e 	beq.w	80054ec <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <HAL_UART_IRQHandler+0x11e>
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fb65 	bl	8005994 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	695b      	ldr	r3, [r3, #20]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	f003 0308 	and.w	r3, r3, #8
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d102      	bne.n	80052f2 <HAL_UART_IRQHandler+0x146>
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d031      	beq.n	8005356 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 faa7 	bl	8005846 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005302:	2b00      	cmp	r3, #0
 8005304:	d023      	beq.n	800534e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695a      	ldr	r2, [r3, #20]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005314:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	2b00      	cmp	r3, #0
 800531c:	d013      	beq.n	8005346 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	4a76      	ldr	r2, [pc, #472]	; (80054fc <HAL_UART_IRQHandler+0x350>)
 8005324:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532a:	4618      	mov	r0, r3
 800532c:	f7fd fcd8 	bl	8002ce0 <HAL_DMA_Abort_IT>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d016      	beq.n	8005364 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005340:	4610      	mov	r0, r2
 8005342:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005344:	e00e      	b.n	8005364 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f8f5 	bl	8005536 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800534c:	e00a      	b.n	8005364 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f8f1 	bl	8005536 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005354:	e006      	b.n	8005364 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f8ed 	bl	8005536 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005362:	e0c3      	b.n	80054ec <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	bf00      	nop
    return;
 8005366:	e0c1      	b.n	80054ec <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	2b01      	cmp	r3, #1
 800536e:	f040 80a1 	bne.w	80054b4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	f003 0310 	and.w	r3, r3, #16
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 809b 	beq.w	80054b4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8095 	beq.w	80054b4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800538a:	2300      	movs	r3, #0
 800538c:	60fb      	str	r3, [r7, #12]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60fb      	str	r3, [r7, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d04e      	beq.n	800544c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80053b8:	8a3b      	ldrh	r3, [r7, #16]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 8098 	beq.w	80054f0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053c4:	8a3a      	ldrh	r2, [r7, #16]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	f080 8092 	bcs.w	80054f0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8a3a      	ldrh	r2, [r7, #16]
 80053d0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	2b20      	cmp	r3, #32
 80053da:	d02b      	beq.n	8005434 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053ea:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	695a      	ldr	r2, [r3, #20]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0201 	bic.w	r2, r2, #1
 80053fa:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695a      	ldr	r2, [r3, #20]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800540a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0210 	bic.w	r2, r2, #16
 8005428:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542e:	4618      	mov	r0, r3
 8005430:	f7fd fc1b 	bl	8002c6a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800543c:	b29b      	uxth	r3, r3
 800543e:	1ad3      	subs	r3, r2, r3
 8005440:	b29b      	uxth	r3, r3
 8005442:	4619      	mov	r1, r3
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f87f 	bl	8005548 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800544a:	e051      	b.n	80054f0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005454:	b29b      	uxth	r3, r3
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d047      	beq.n	80054f4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005464:	8a7b      	ldrh	r3, [r7, #18]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d044      	beq.n	80054f4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68da      	ldr	r2, [r3, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005478:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	695a      	ldr	r2, [r3, #20]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0201 	bic.w	r2, r2, #1
 8005488:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68da      	ldr	r2, [r3, #12]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0210 	bic.w	r2, r2, #16
 80054a6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80054a8:	8a7b      	ldrh	r3, [r7, #18]
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f000 f84b 	bl	8005548 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80054b2:	e01f      	b.n	80054f4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d008      	beq.n	80054d0 <HAL_UART_IRQHandler+0x324>
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f9fc 	bl	80058c6 <UART_Transmit_IT>
    return;
 80054ce:	e012      	b.n	80054f6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00d      	beq.n	80054f6 <HAL_UART_IRQHandler+0x34a>
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d008      	beq.n	80054f6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fa3d 	bl	8005964 <UART_EndTransmit_IT>
    return;
 80054ea:	e004      	b.n	80054f6 <HAL_UART_IRQHandler+0x34a>
    return;
 80054ec:	bf00      	nop
 80054ee:	e002      	b.n	80054f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80054f0:	bf00      	nop
 80054f2:	e000      	b.n	80054f6 <HAL_UART_IRQHandler+0x34a>
      return;
 80054f4:	bf00      	nop
  }
}
 80054f6:	3728      	adds	r7, #40	; 0x28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	0800589f 	.word	0x0800589f

08005500 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	bc80      	pop	{r7}
 8005510:	4770      	bx	lr

08005512 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800551a:	bf00      	nop
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr

08005524 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005524:	b480      	push	{r7}
 8005526:	b083      	sub	sp, #12
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bc80      	pop	{r7}
 8005534:	4770      	bx	lr

08005536 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr

08005548 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	bc80      	pop	{r7}
 800555c:	4770      	bx	lr

0800555e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b084      	sub	sp, #16
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0320 	and.w	r3, r3, #32
 8005576:	2b00      	cmp	r3, #0
 8005578:	d12a      	bne.n	80055d0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68da      	ldr	r2, [r3, #12]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800558e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695a      	ldr	r2, [r3, #20]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0201 	bic.w	r2, r2, #1
 800559e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695a      	ldr	r2, [r3, #20]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ae:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d107      	bne.n	80055d0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0210 	bic.w	r2, r2, #16
 80055ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d106      	bne.n	80055e6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055dc:	4619      	mov	r1, r3
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f7ff ffb2 	bl	8005548 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80055e4:	e002      	b.n	80055ec <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	f7ff ff93 	bl	8005512 <HAL_UART_RxCpltCallback>
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005600:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005606:	2b01      	cmp	r3, #1
 8005608:	d108      	bne.n	800561c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800560e:	085b      	lsrs	r3, r3, #1
 8005610:	b29b      	uxth	r3, r3
 8005612:	4619      	mov	r1, r3
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff ff97 	bl	8005548 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800561a:	e002      	b.n	8005622 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f7ff ff81 	bl	8005524 <HAL_UART_RxHalfCpltCallback>
}
 8005622:	bf00      	nop
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005632:	2300      	movs	r3, #0
 8005634:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b21      	cmp	r3, #33	; 0x21
 800565c:	d108      	bne.n	8005670 <UART_DMAError+0x46>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	2200      	movs	r2, #0
 8005668:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800566a:	68b8      	ldr	r0, [r7, #8]
 800566c:	f000 f8d6 	bl	800581c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	695b      	ldr	r3, [r3, #20]
 8005676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800567a:	2b00      	cmp	r3, #0
 800567c:	bf14      	ite	ne
 800567e:	2301      	movne	r3, #1
 8005680:	2300      	moveq	r3, #0
 8005682:	b2db      	uxtb	r3, r3
 8005684:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b22      	cmp	r3, #34	; 0x22
 8005690:	d108      	bne.n	80056a4 <UART_DMAError+0x7a>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2200      	movs	r2, #0
 800569c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800569e:	68b8      	ldr	r0, [r7, #8]
 80056a0:	f000 f8d1 	bl	8005846 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a8:	f043 0210 	orr.w	r2, r3, #16
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056b0:	68b8      	ldr	r0, [r7, #8]
 80056b2:	f7ff ff40 	bl	8005536 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056b6:	bf00      	nop
 80056b8:	3710      	adds	r7, #16
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80056be:	b580      	push	{r7, lr}
 80056c0:	b084      	sub	sp, #16
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	603b      	str	r3, [r7, #0]
 80056ca:	4613      	mov	r3, r2
 80056cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ce:	e02c      	b.n	800572a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d6:	d028      	beq.n	800572a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d007      	beq.n	80056ee <UART_WaitOnFlagUntilTimeout+0x30>
 80056de:	f7fd f8cf 	bl	8002880 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d21d      	bcs.n	800572a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056fc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695a      	ldr	r2, [r3, #20]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0201 	bic.w	r2, r2, #1
 800570c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2220      	movs	r2, #32
 8005712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005726:	2303      	movs	r3, #3
 8005728:	e00f      	b.n	800574a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4013      	ands	r3, r2
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	429a      	cmp	r2, r3
 8005738:	bf0c      	ite	eq
 800573a:	2301      	moveq	r3, #1
 800573c:	2300      	movne	r3, #0
 800573e:	b2db      	uxtb	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	79fb      	ldrb	r3, [r7, #7]
 8005744:	429a      	cmp	r2, r3
 8005746:	d0c3      	beq.n	80056d0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005748:	2300      	movs	r3, #0
}
 800574a:	4618      	mov	r0, r3
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
	...

08005754 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b086      	sub	sp, #24
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	4613      	mov	r3, r2
 8005760:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	88fa      	ldrh	r2, [r7, #6]
 800576c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2222      	movs	r2, #34	; 0x22
 8005778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	4a23      	ldr	r2, [pc, #140]	; (8005810 <UART_Start_Receive_DMA+0xbc>)
 8005782:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	4a22      	ldr	r2, [pc, #136]	; (8005814 <UART_Start_Receive_DMA+0xc0>)
 800578a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	4a21      	ldr	r2, [pc, #132]	; (8005818 <UART_Start_Receive_DMA+0xc4>)
 8005792:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	2200      	movs	r2, #0
 800579a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800579c:	f107 0308 	add.w	r3, r7, #8
 80057a0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	3304      	adds	r3, #4
 80057ac:	4619      	mov	r1, r3
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	88fb      	ldrh	r3, [r7, #6]
 80057b4:	f7fd f9fa 	bl	8002bac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80057b8:	2300      	movs	r3, #0
 80057ba:	613b      	str	r3, [r7, #16]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	613b      	str	r3, [r7, #16]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	613b      	str	r3, [r7, #16]
 80057cc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	695a      	ldr	r2, [r3, #20]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f042 0201 	orr.w	r2, r2, #1
 80057f4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	695a      	ldr	r2, [r3, #20]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005804:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3718      	adds	r7, #24
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}
 8005810:	0800555f 	.word	0x0800555f
 8005814:	080055f5 	.word	0x080055f5
 8005818:	0800562b 	.word	0x0800562b

0800581c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005832:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	bc80      	pop	{r7}
 8005844:	4770      	bx	lr

08005846 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005846:	b480      	push	{r7}
 8005848:	b083      	sub	sp, #12
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800585c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695a      	ldr	r2, [r3, #20]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005872:	2b01      	cmp	r3, #1
 8005874:	d107      	bne.n	8005886 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 0210 	bic.w	r2, r2, #16
 8005884:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2220      	movs	r2, #32
 800588a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	bc80      	pop	{r7}
 800589c:	4770      	bx	lr

0800589e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b084      	sub	sp, #16
 80058a2:	af00      	add	r7, sp, #0
 80058a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058b8:	68f8      	ldr	r0, [r7, #12]
 80058ba:	f7ff fe3c 	bl	8005536 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058be:	bf00      	nop
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b085      	sub	sp, #20
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b21      	cmp	r3, #33	; 0x21
 80058d8:	d13e      	bne.n	8005958 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e2:	d114      	bne.n	800590e <UART_Transmit_IT+0x48>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d110      	bne.n	800590e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	881b      	ldrh	r3, [r3, #0]
 80058f6:	461a      	mov	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005900:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	1c9a      	adds	r2, r3, #2
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	621a      	str	r2, [r3, #32]
 800590c:	e008      	b.n	8005920 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	1c59      	adds	r1, r3, #1
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6211      	str	r1, [r2, #32]
 8005918:	781a      	ldrb	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29b      	uxth	r3, r3
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	4619      	mov	r1, r3
 800592e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10f      	bne.n	8005954 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005942:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005952:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	e000      	b.n	800595a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005958:	2302      	movs	r3, #2
  }
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr

08005964 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7ff fdbb 	bl	8005500 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3708      	adds	r7, #8
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b22      	cmp	r3, #34	; 0x22
 80059a6:	f040 8099 	bne.w	8005adc <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059b2:	d117      	bne.n	80059e4 <UART_Receive_IT+0x50>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d113      	bne.n	80059e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059dc:	1c9a      	adds	r2, r3, #2
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	629a      	str	r2, [r3, #40]	; 0x28
 80059e2:	e026      	b.n	8005a32 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059f6:	d007      	beq.n	8005a08 <UART_Receive_IT+0x74>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <UART_Receive_IT+0x82>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d106      	bne.n	8005a16 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	b2da      	uxtb	r2, r3
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	701a      	strb	r2, [r3, #0]
 8005a14:	e008      	b.n	8005a28 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d148      	bne.n	8005ad8 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0220 	bic.w	r2, r2, #32
 8005a54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695a      	ldr	r2, [r3, #20]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 0201 	bic.w	r2, r2, #1
 8005a74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d123      	bne.n	8005ace <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 0210 	bic.w	r2, r2, #16
 8005a9a:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	2b10      	cmp	r3, #16
 8005aa8:	d10a      	bne.n	8005ac0 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005aaa:	2300      	movs	r3, #0
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	60fb      	str	r3, [r7, #12]
 8005abe:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7ff fd3e 	bl	8005548 <HAL_UARTEx_RxEventCallback>
 8005acc:	e002      	b.n	8005ad4 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7ff fd1f 	bl	8005512 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	e002      	b.n	8005ade <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	e000      	b.n	8005ade <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005adc:	2302      	movs	r3, #2
  }
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
	...

08005ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b22:	f023 030c 	bic.w	r3, r3, #12
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6812      	ldr	r2, [r2, #0]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	430b      	orrs	r3, r1
 8005b2e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699a      	ldr	r2, [r3, #24]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a2c      	ldr	r2, [pc, #176]	; (8005bfc <UART_SetConfig+0x114>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d103      	bne.n	8005b58 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b50:	f7fe f952 	bl	8003df8 <HAL_RCC_GetPCLK2Freq>
 8005b54:	60f8      	str	r0, [r7, #12]
 8005b56:	e002      	b.n	8005b5e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b58:	f7fe f93a 	bl	8003dd0 <HAL_RCC_GetPCLK1Freq>
 8005b5c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009a      	lsls	r2, r3, #2
 8005b68:	441a      	add	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b74:	4a22      	ldr	r2, [pc, #136]	; (8005c00 <UART_SetConfig+0x118>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	0119      	lsls	r1, r3, #4
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009a      	lsls	r2, r3, #2
 8005b88:	441a      	add	r2, r3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b94:	4b1a      	ldr	r3, [pc, #104]	; (8005c00 <UART_SetConfig+0x118>)
 8005b96:	fba3 0302 	umull	r0, r3, r3, r2
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	2064      	movs	r0, #100	; 0x64
 8005b9e:	fb00 f303 	mul.w	r3, r0, r3
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	011b      	lsls	r3, r3, #4
 8005ba6:	3332      	adds	r3, #50	; 0x32
 8005ba8:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <UART_SetConfig+0x118>)
 8005baa:	fba2 2303 	umull	r2, r3, r2, r3
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb4:	4419      	add	r1, r3
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	009a      	lsls	r2, r3, #2
 8005bc0:	441a      	add	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bcc:	4b0c      	ldr	r3, [pc, #48]	; (8005c00 <UART_SetConfig+0x118>)
 8005bce:	fba3 0302 	umull	r0, r3, r3, r2
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	2064      	movs	r0, #100	; 0x64
 8005bd6:	fb00 f303 	mul.w	r3, r0, r3
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	3332      	adds	r3, #50	; 0x32
 8005be0:	4a07      	ldr	r2, [pc, #28]	; (8005c00 <UART_SetConfig+0x118>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	095b      	lsrs	r3, r3, #5
 8005be8:	f003 020f 	and.w	r2, r3, #15
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	440a      	add	r2, r1
 8005bf2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005bf4:	bf00      	nop
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	40013800 	.word	0x40013800
 8005c00:	51eb851f 	.word	0x51eb851f

08005c04 <__assert_func>:
 8005c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005c06:	4614      	mov	r4, r2
 8005c08:	461a      	mov	r2, r3
 8005c0a:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <__assert_func+0x2c>)
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68d8      	ldr	r0, [r3, #12]
 8005c12:	b14c      	cbz	r4, 8005c28 <__assert_func+0x24>
 8005c14:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <__assert_func+0x30>)
 8005c16:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c1a:	9100      	str	r1, [sp, #0]
 8005c1c:	462b      	mov	r3, r5
 8005c1e:	4906      	ldr	r1, [pc, #24]	; (8005c38 <__assert_func+0x34>)
 8005c20:	f000 f814 	bl	8005c4c <fiprintf>
 8005c24:	f000 fbfe 	bl	8006424 <abort>
 8005c28:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <__assert_func+0x38>)
 8005c2a:	461c      	mov	r4, r3
 8005c2c:	e7f3      	b.n	8005c16 <__assert_func+0x12>
 8005c2e:	bf00      	nop
 8005c30:	20000010 	.word	0x20000010
 8005c34:	08006d48 	.word	0x08006d48
 8005c38:	08006d55 	.word	0x08006d55
 8005c3c:	08006d83 	.word	0x08006d83

08005c40 <__errno>:
 8005c40:	4b01      	ldr	r3, [pc, #4]	; (8005c48 <__errno+0x8>)
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	20000010 	.word	0x20000010

08005c4c <fiprintf>:
 8005c4c:	b40e      	push	{r1, r2, r3}
 8005c4e:	b503      	push	{r0, r1, lr}
 8005c50:	4601      	mov	r1, r0
 8005c52:	ab03      	add	r3, sp, #12
 8005c54:	4805      	ldr	r0, [pc, #20]	; (8005c6c <fiprintf+0x20>)
 8005c56:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c5a:	6800      	ldr	r0, [r0, #0]
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	f000 f85b 	bl	8005d18 <_vfiprintf_r>
 8005c62:	b002      	add	sp, #8
 8005c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c68:	b003      	add	sp, #12
 8005c6a:	4770      	bx	lr
 8005c6c:	20000010 	.word	0x20000010

08005c70 <__libc_init_array>:
 8005c70:	b570      	push	{r4, r5, r6, lr}
 8005c72:	2600      	movs	r6, #0
 8005c74:	4d0c      	ldr	r5, [pc, #48]	; (8005ca8 <__libc_init_array+0x38>)
 8005c76:	4c0d      	ldr	r4, [pc, #52]	; (8005cac <__libc_init_array+0x3c>)
 8005c78:	1b64      	subs	r4, r4, r5
 8005c7a:	10a4      	asrs	r4, r4, #2
 8005c7c:	42a6      	cmp	r6, r4
 8005c7e:	d109      	bne.n	8005c94 <__libc_init_array+0x24>
 8005c80:	f001 f810 	bl	8006ca4 <_init>
 8005c84:	2600      	movs	r6, #0
 8005c86:	4d0a      	ldr	r5, [pc, #40]	; (8005cb0 <__libc_init_array+0x40>)
 8005c88:	4c0a      	ldr	r4, [pc, #40]	; (8005cb4 <__libc_init_array+0x44>)
 8005c8a:	1b64      	subs	r4, r4, r5
 8005c8c:	10a4      	asrs	r4, r4, #2
 8005c8e:	42a6      	cmp	r6, r4
 8005c90:	d105      	bne.n	8005c9e <__libc_init_array+0x2e>
 8005c92:	bd70      	pop	{r4, r5, r6, pc}
 8005c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c98:	4798      	blx	r3
 8005c9a:	3601      	adds	r6, #1
 8005c9c:	e7ee      	b.n	8005c7c <__libc_init_array+0xc>
 8005c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca2:	4798      	blx	r3
 8005ca4:	3601      	adds	r6, #1
 8005ca6:	e7f2      	b.n	8005c8e <__libc_init_array+0x1e>
 8005ca8:	08006e1c 	.word	0x08006e1c
 8005cac:	08006e1c 	.word	0x08006e1c
 8005cb0:	08006e1c 	.word	0x08006e1c
 8005cb4:	08006e20 	.word	0x08006e20

08005cb8 <memset>:
 8005cb8:	4603      	mov	r3, r0
 8005cba:	4402      	add	r2, r0
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d100      	bne.n	8005cc2 <memset+0xa>
 8005cc0:	4770      	bx	lr
 8005cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005cc6:	e7f9      	b.n	8005cbc <memset+0x4>

08005cc8 <__sfputc_r>:
 8005cc8:	6893      	ldr	r3, [r2, #8]
 8005cca:	b410      	push	{r4}
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	6093      	str	r3, [r2, #8]
 8005cd2:	da07      	bge.n	8005ce4 <__sfputc_r+0x1c>
 8005cd4:	6994      	ldr	r4, [r2, #24]
 8005cd6:	42a3      	cmp	r3, r4
 8005cd8:	db01      	blt.n	8005cde <__sfputc_r+0x16>
 8005cda:	290a      	cmp	r1, #10
 8005cdc:	d102      	bne.n	8005ce4 <__sfputc_r+0x1c>
 8005cde:	bc10      	pop	{r4}
 8005ce0:	f000 bae0 	b.w	80062a4 <__swbuf_r>
 8005ce4:	6813      	ldr	r3, [r2, #0]
 8005ce6:	1c58      	adds	r0, r3, #1
 8005ce8:	6010      	str	r0, [r2, #0]
 8005cea:	7019      	strb	r1, [r3, #0]
 8005cec:	4608      	mov	r0, r1
 8005cee:	bc10      	pop	{r4}
 8005cf0:	4770      	bx	lr

08005cf2 <__sfputs_r>:
 8005cf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cf4:	4606      	mov	r6, r0
 8005cf6:	460f      	mov	r7, r1
 8005cf8:	4614      	mov	r4, r2
 8005cfa:	18d5      	adds	r5, r2, r3
 8005cfc:	42ac      	cmp	r4, r5
 8005cfe:	d101      	bne.n	8005d04 <__sfputs_r+0x12>
 8005d00:	2000      	movs	r0, #0
 8005d02:	e007      	b.n	8005d14 <__sfputs_r+0x22>
 8005d04:	463a      	mov	r2, r7
 8005d06:	4630      	mov	r0, r6
 8005d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d0c:	f7ff ffdc 	bl	8005cc8 <__sfputc_r>
 8005d10:	1c43      	adds	r3, r0, #1
 8005d12:	d1f3      	bne.n	8005cfc <__sfputs_r+0xa>
 8005d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d18 <_vfiprintf_r>:
 8005d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1c:	460d      	mov	r5, r1
 8005d1e:	4614      	mov	r4, r2
 8005d20:	4698      	mov	r8, r3
 8005d22:	4606      	mov	r6, r0
 8005d24:	b09d      	sub	sp, #116	; 0x74
 8005d26:	b118      	cbz	r0, 8005d30 <_vfiprintf_r+0x18>
 8005d28:	6983      	ldr	r3, [r0, #24]
 8005d2a:	b90b      	cbnz	r3, 8005d30 <_vfiprintf_r+0x18>
 8005d2c:	f000 fc98 	bl	8006660 <__sinit>
 8005d30:	4b89      	ldr	r3, [pc, #548]	; (8005f58 <_vfiprintf_r+0x240>)
 8005d32:	429d      	cmp	r5, r3
 8005d34:	d11b      	bne.n	8005d6e <_vfiprintf_r+0x56>
 8005d36:	6875      	ldr	r5, [r6, #4]
 8005d38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d3a:	07d9      	lsls	r1, r3, #31
 8005d3c:	d405      	bmi.n	8005d4a <_vfiprintf_r+0x32>
 8005d3e:	89ab      	ldrh	r3, [r5, #12]
 8005d40:	059a      	lsls	r2, r3, #22
 8005d42:	d402      	bmi.n	8005d4a <_vfiprintf_r+0x32>
 8005d44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d46:	f000 fd29 	bl	800679c <__retarget_lock_acquire_recursive>
 8005d4a:	89ab      	ldrh	r3, [r5, #12]
 8005d4c:	071b      	lsls	r3, r3, #28
 8005d4e:	d501      	bpl.n	8005d54 <_vfiprintf_r+0x3c>
 8005d50:	692b      	ldr	r3, [r5, #16]
 8005d52:	b9eb      	cbnz	r3, 8005d90 <_vfiprintf_r+0x78>
 8005d54:	4629      	mov	r1, r5
 8005d56:	4630      	mov	r0, r6
 8005d58:	f000 faf6 	bl	8006348 <__swsetup_r>
 8005d5c:	b1c0      	cbz	r0, 8005d90 <_vfiprintf_r+0x78>
 8005d5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d60:	07dc      	lsls	r4, r3, #31
 8005d62:	d50e      	bpl.n	8005d82 <_vfiprintf_r+0x6a>
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	b01d      	add	sp, #116	; 0x74
 8005d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d6e:	4b7b      	ldr	r3, [pc, #492]	; (8005f5c <_vfiprintf_r+0x244>)
 8005d70:	429d      	cmp	r5, r3
 8005d72:	d101      	bne.n	8005d78 <_vfiprintf_r+0x60>
 8005d74:	68b5      	ldr	r5, [r6, #8]
 8005d76:	e7df      	b.n	8005d38 <_vfiprintf_r+0x20>
 8005d78:	4b79      	ldr	r3, [pc, #484]	; (8005f60 <_vfiprintf_r+0x248>)
 8005d7a:	429d      	cmp	r5, r3
 8005d7c:	bf08      	it	eq
 8005d7e:	68f5      	ldreq	r5, [r6, #12]
 8005d80:	e7da      	b.n	8005d38 <_vfiprintf_r+0x20>
 8005d82:	89ab      	ldrh	r3, [r5, #12]
 8005d84:	0598      	lsls	r0, r3, #22
 8005d86:	d4ed      	bmi.n	8005d64 <_vfiprintf_r+0x4c>
 8005d88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d8a:	f000 fd08 	bl	800679e <__retarget_lock_release_recursive>
 8005d8e:	e7e9      	b.n	8005d64 <_vfiprintf_r+0x4c>
 8005d90:	2300      	movs	r3, #0
 8005d92:	9309      	str	r3, [sp, #36]	; 0x24
 8005d94:	2320      	movs	r3, #32
 8005d96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d9a:	2330      	movs	r3, #48	; 0x30
 8005d9c:	f04f 0901 	mov.w	r9, #1
 8005da0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005da4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005f64 <_vfiprintf_r+0x24c>
 8005da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dac:	4623      	mov	r3, r4
 8005dae:	469a      	mov	sl, r3
 8005db0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005db4:	b10a      	cbz	r2, 8005dba <_vfiprintf_r+0xa2>
 8005db6:	2a25      	cmp	r2, #37	; 0x25
 8005db8:	d1f9      	bne.n	8005dae <_vfiprintf_r+0x96>
 8005dba:	ebba 0b04 	subs.w	fp, sl, r4
 8005dbe:	d00b      	beq.n	8005dd8 <_vfiprintf_r+0xc0>
 8005dc0:	465b      	mov	r3, fp
 8005dc2:	4622      	mov	r2, r4
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	4630      	mov	r0, r6
 8005dc8:	f7ff ff93 	bl	8005cf2 <__sfputs_r>
 8005dcc:	3001      	adds	r0, #1
 8005dce:	f000 80aa 	beq.w	8005f26 <_vfiprintf_r+0x20e>
 8005dd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dd4:	445a      	add	r2, fp
 8005dd6:	9209      	str	r2, [sp, #36]	; 0x24
 8005dd8:	f89a 3000 	ldrb.w	r3, [sl]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	f000 80a2 	beq.w	8005f26 <_vfiprintf_r+0x20e>
 8005de2:	2300      	movs	r3, #0
 8005de4:	f04f 32ff 	mov.w	r2, #4294967295
 8005de8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dec:	f10a 0a01 	add.w	sl, sl, #1
 8005df0:	9304      	str	r3, [sp, #16]
 8005df2:	9307      	str	r3, [sp, #28]
 8005df4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005df8:	931a      	str	r3, [sp, #104]	; 0x68
 8005dfa:	4654      	mov	r4, sl
 8005dfc:	2205      	movs	r2, #5
 8005dfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e02:	4858      	ldr	r0, [pc, #352]	; (8005f64 <_vfiprintf_r+0x24c>)
 8005e04:	f000 fd32 	bl	800686c <memchr>
 8005e08:	9a04      	ldr	r2, [sp, #16]
 8005e0a:	b9d8      	cbnz	r0, 8005e44 <_vfiprintf_r+0x12c>
 8005e0c:	06d1      	lsls	r1, r2, #27
 8005e0e:	bf44      	itt	mi
 8005e10:	2320      	movmi	r3, #32
 8005e12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e16:	0713      	lsls	r3, r2, #28
 8005e18:	bf44      	itt	mi
 8005e1a:	232b      	movmi	r3, #43	; 0x2b
 8005e1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e20:	f89a 3000 	ldrb.w	r3, [sl]
 8005e24:	2b2a      	cmp	r3, #42	; 0x2a
 8005e26:	d015      	beq.n	8005e54 <_vfiprintf_r+0x13c>
 8005e28:	4654      	mov	r4, sl
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	f04f 0c0a 	mov.w	ip, #10
 8005e30:	9a07      	ldr	r2, [sp, #28]
 8005e32:	4621      	mov	r1, r4
 8005e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e38:	3b30      	subs	r3, #48	; 0x30
 8005e3a:	2b09      	cmp	r3, #9
 8005e3c:	d94e      	bls.n	8005edc <_vfiprintf_r+0x1c4>
 8005e3e:	b1b0      	cbz	r0, 8005e6e <_vfiprintf_r+0x156>
 8005e40:	9207      	str	r2, [sp, #28]
 8005e42:	e014      	b.n	8005e6e <_vfiprintf_r+0x156>
 8005e44:	eba0 0308 	sub.w	r3, r0, r8
 8005e48:	fa09 f303 	lsl.w	r3, r9, r3
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	46a2      	mov	sl, r4
 8005e50:	9304      	str	r3, [sp, #16]
 8005e52:	e7d2      	b.n	8005dfa <_vfiprintf_r+0xe2>
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	1d19      	adds	r1, r3, #4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	9103      	str	r1, [sp, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	bfbb      	ittet	lt
 8005e60:	425b      	neglt	r3, r3
 8005e62:	f042 0202 	orrlt.w	r2, r2, #2
 8005e66:	9307      	strge	r3, [sp, #28]
 8005e68:	9307      	strlt	r3, [sp, #28]
 8005e6a:	bfb8      	it	lt
 8005e6c:	9204      	strlt	r2, [sp, #16]
 8005e6e:	7823      	ldrb	r3, [r4, #0]
 8005e70:	2b2e      	cmp	r3, #46	; 0x2e
 8005e72:	d10c      	bne.n	8005e8e <_vfiprintf_r+0x176>
 8005e74:	7863      	ldrb	r3, [r4, #1]
 8005e76:	2b2a      	cmp	r3, #42	; 0x2a
 8005e78:	d135      	bne.n	8005ee6 <_vfiprintf_r+0x1ce>
 8005e7a:	9b03      	ldr	r3, [sp, #12]
 8005e7c:	3402      	adds	r4, #2
 8005e7e:	1d1a      	adds	r2, r3, #4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	9203      	str	r2, [sp, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	bfb8      	it	lt
 8005e88:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e8c:	9305      	str	r3, [sp, #20]
 8005e8e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005f68 <_vfiprintf_r+0x250>
 8005e92:	2203      	movs	r2, #3
 8005e94:	4650      	mov	r0, sl
 8005e96:	7821      	ldrb	r1, [r4, #0]
 8005e98:	f000 fce8 	bl	800686c <memchr>
 8005e9c:	b140      	cbz	r0, 8005eb0 <_vfiprintf_r+0x198>
 8005e9e:	2340      	movs	r3, #64	; 0x40
 8005ea0:	eba0 000a 	sub.w	r0, r0, sl
 8005ea4:	fa03 f000 	lsl.w	r0, r3, r0
 8005ea8:	9b04      	ldr	r3, [sp, #16]
 8005eaa:	3401      	adds	r4, #1
 8005eac:	4303      	orrs	r3, r0
 8005eae:	9304      	str	r3, [sp, #16]
 8005eb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eb4:	2206      	movs	r2, #6
 8005eb6:	482d      	ldr	r0, [pc, #180]	; (8005f6c <_vfiprintf_r+0x254>)
 8005eb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ebc:	f000 fcd6 	bl	800686c <memchr>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	d03f      	beq.n	8005f44 <_vfiprintf_r+0x22c>
 8005ec4:	4b2a      	ldr	r3, [pc, #168]	; (8005f70 <_vfiprintf_r+0x258>)
 8005ec6:	bb1b      	cbnz	r3, 8005f10 <_vfiprintf_r+0x1f8>
 8005ec8:	9b03      	ldr	r3, [sp, #12]
 8005eca:	3307      	adds	r3, #7
 8005ecc:	f023 0307 	bic.w	r3, r3, #7
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	9303      	str	r3, [sp, #12]
 8005ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ed6:	443b      	add	r3, r7
 8005ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eda:	e767      	b.n	8005dac <_vfiprintf_r+0x94>
 8005edc:	460c      	mov	r4, r1
 8005ede:	2001      	movs	r0, #1
 8005ee0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ee4:	e7a5      	b.n	8005e32 <_vfiprintf_r+0x11a>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	f04f 0c0a 	mov.w	ip, #10
 8005eec:	4619      	mov	r1, r3
 8005eee:	3401      	adds	r4, #1
 8005ef0:	9305      	str	r3, [sp, #20]
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ef8:	3a30      	subs	r2, #48	; 0x30
 8005efa:	2a09      	cmp	r2, #9
 8005efc:	d903      	bls.n	8005f06 <_vfiprintf_r+0x1ee>
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d0c5      	beq.n	8005e8e <_vfiprintf_r+0x176>
 8005f02:	9105      	str	r1, [sp, #20]
 8005f04:	e7c3      	b.n	8005e8e <_vfiprintf_r+0x176>
 8005f06:	4604      	mov	r4, r0
 8005f08:	2301      	movs	r3, #1
 8005f0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f0e:	e7f0      	b.n	8005ef2 <_vfiprintf_r+0x1da>
 8005f10:	ab03      	add	r3, sp, #12
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	462a      	mov	r2, r5
 8005f16:	4630      	mov	r0, r6
 8005f18:	4b16      	ldr	r3, [pc, #88]	; (8005f74 <_vfiprintf_r+0x25c>)
 8005f1a:	a904      	add	r1, sp, #16
 8005f1c:	f3af 8000 	nop.w
 8005f20:	4607      	mov	r7, r0
 8005f22:	1c78      	adds	r0, r7, #1
 8005f24:	d1d6      	bne.n	8005ed4 <_vfiprintf_r+0x1bc>
 8005f26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005f28:	07d9      	lsls	r1, r3, #31
 8005f2a:	d405      	bmi.n	8005f38 <_vfiprintf_r+0x220>
 8005f2c:	89ab      	ldrh	r3, [r5, #12]
 8005f2e:	059a      	lsls	r2, r3, #22
 8005f30:	d402      	bmi.n	8005f38 <_vfiprintf_r+0x220>
 8005f32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005f34:	f000 fc33 	bl	800679e <__retarget_lock_release_recursive>
 8005f38:	89ab      	ldrh	r3, [r5, #12]
 8005f3a:	065b      	lsls	r3, r3, #25
 8005f3c:	f53f af12 	bmi.w	8005d64 <_vfiprintf_r+0x4c>
 8005f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f42:	e711      	b.n	8005d68 <_vfiprintf_r+0x50>
 8005f44:	ab03      	add	r3, sp, #12
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	462a      	mov	r2, r5
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <_vfiprintf_r+0x25c>)
 8005f4e:	a904      	add	r1, sp, #16
 8005f50:	f000 f882 	bl	8006058 <_printf_i>
 8005f54:	e7e4      	b.n	8005f20 <_vfiprintf_r+0x208>
 8005f56:	bf00      	nop
 8005f58:	08006ddc 	.word	0x08006ddc
 8005f5c:	08006dfc 	.word	0x08006dfc
 8005f60:	08006dbc 	.word	0x08006dbc
 8005f64:	08006d88 	.word	0x08006d88
 8005f68:	08006d8e 	.word	0x08006d8e
 8005f6c:	08006d92 	.word	0x08006d92
 8005f70:	00000000 	.word	0x00000000
 8005f74:	08005cf3 	.word	0x08005cf3

08005f78 <_printf_common>:
 8005f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f7c:	4616      	mov	r6, r2
 8005f7e:	4699      	mov	r9, r3
 8005f80:	688a      	ldr	r2, [r1, #8]
 8005f82:	690b      	ldr	r3, [r1, #16]
 8005f84:	4607      	mov	r7, r0
 8005f86:	4293      	cmp	r3, r2
 8005f88:	bfb8      	it	lt
 8005f8a:	4613      	movlt	r3, r2
 8005f8c:	6033      	str	r3, [r6, #0]
 8005f8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f92:	460c      	mov	r4, r1
 8005f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f98:	b10a      	cbz	r2, 8005f9e <_printf_common+0x26>
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	6033      	str	r3, [r6, #0]
 8005f9e:	6823      	ldr	r3, [r4, #0]
 8005fa0:	0699      	lsls	r1, r3, #26
 8005fa2:	bf42      	ittt	mi
 8005fa4:	6833      	ldrmi	r3, [r6, #0]
 8005fa6:	3302      	addmi	r3, #2
 8005fa8:	6033      	strmi	r3, [r6, #0]
 8005faa:	6825      	ldr	r5, [r4, #0]
 8005fac:	f015 0506 	ands.w	r5, r5, #6
 8005fb0:	d106      	bne.n	8005fc0 <_printf_common+0x48>
 8005fb2:	f104 0a19 	add.w	sl, r4, #25
 8005fb6:	68e3      	ldr	r3, [r4, #12]
 8005fb8:	6832      	ldr	r2, [r6, #0]
 8005fba:	1a9b      	subs	r3, r3, r2
 8005fbc:	42ab      	cmp	r3, r5
 8005fbe:	dc28      	bgt.n	8006012 <_printf_common+0x9a>
 8005fc0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005fc4:	1e13      	subs	r3, r2, #0
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	bf18      	it	ne
 8005fca:	2301      	movne	r3, #1
 8005fcc:	0692      	lsls	r2, r2, #26
 8005fce:	d42d      	bmi.n	800602c <_printf_common+0xb4>
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fd8:	47c0      	blx	r8
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d020      	beq.n	8006020 <_printf_common+0xa8>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	68e5      	ldr	r5, [r4, #12]
 8005fe2:	f003 0306 	and.w	r3, r3, #6
 8005fe6:	2b04      	cmp	r3, #4
 8005fe8:	bf18      	it	ne
 8005fea:	2500      	movne	r5, #0
 8005fec:	6832      	ldr	r2, [r6, #0]
 8005fee:	f04f 0600 	mov.w	r6, #0
 8005ff2:	68a3      	ldr	r3, [r4, #8]
 8005ff4:	bf08      	it	eq
 8005ff6:	1aad      	subeq	r5, r5, r2
 8005ff8:	6922      	ldr	r2, [r4, #16]
 8005ffa:	bf08      	it	eq
 8005ffc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006000:	4293      	cmp	r3, r2
 8006002:	bfc4      	itt	gt
 8006004:	1a9b      	subgt	r3, r3, r2
 8006006:	18ed      	addgt	r5, r5, r3
 8006008:	341a      	adds	r4, #26
 800600a:	42b5      	cmp	r5, r6
 800600c:	d11a      	bne.n	8006044 <_printf_common+0xcc>
 800600e:	2000      	movs	r0, #0
 8006010:	e008      	b.n	8006024 <_printf_common+0xac>
 8006012:	2301      	movs	r3, #1
 8006014:	4652      	mov	r2, sl
 8006016:	4649      	mov	r1, r9
 8006018:	4638      	mov	r0, r7
 800601a:	47c0      	blx	r8
 800601c:	3001      	adds	r0, #1
 800601e:	d103      	bne.n	8006028 <_printf_common+0xb0>
 8006020:	f04f 30ff 	mov.w	r0, #4294967295
 8006024:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006028:	3501      	adds	r5, #1
 800602a:	e7c4      	b.n	8005fb6 <_printf_common+0x3e>
 800602c:	2030      	movs	r0, #48	; 0x30
 800602e:	18e1      	adds	r1, r4, r3
 8006030:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800603a:	4422      	add	r2, r4
 800603c:	3302      	adds	r3, #2
 800603e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006042:	e7c5      	b.n	8005fd0 <_printf_common+0x58>
 8006044:	2301      	movs	r3, #1
 8006046:	4622      	mov	r2, r4
 8006048:	4649      	mov	r1, r9
 800604a:	4638      	mov	r0, r7
 800604c:	47c0      	blx	r8
 800604e:	3001      	adds	r0, #1
 8006050:	d0e6      	beq.n	8006020 <_printf_common+0xa8>
 8006052:	3601      	adds	r6, #1
 8006054:	e7d9      	b.n	800600a <_printf_common+0x92>
	...

08006058 <_printf_i>:
 8006058:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800605c:	7e0f      	ldrb	r7, [r1, #24]
 800605e:	4691      	mov	r9, r2
 8006060:	2f78      	cmp	r7, #120	; 0x78
 8006062:	4680      	mov	r8, r0
 8006064:	460c      	mov	r4, r1
 8006066:	469a      	mov	sl, r3
 8006068:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800606a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800606e:	d807      	bhi.n	8006080 <_printf_i+0x28>
 8006070:	2f62      	cmp	r7, #98	; 0x62
 8006072:	d80a      	bhi.n	800608a <_printf_i+0x32>
 8006074:	2f00      	cmp	r7, #0
 8006076:	f000 80d9 	beq.w	800622c <_printf_i+0x1d4>
 800607a:	2f58      	cmp	r7, #88	; 0x58
 800607c:	f000 80a4 	beq.w	80061c8 <_printf_i+0x170>
 8006080:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006084:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006088:	e03a      	b.n	8006100 <_printf_i+0xa8>
 800608a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800608e:	2b15      	cmp	r3, #21
 8006090:	d8f6      	bhi.n	8006080 <_printf_i+0x28>
 8006092:	a101      	add	r1, pc, #4	; (adr r1, 8006098 <_printf_i+0x40>)
 8006094:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006098:	080060f1 	.word	0x080060f1
 800609c:	08006105 	.word	0x08006105
 80060a0:	08006081 	.word	0x08006081
 80060a4:	08006081 	.word	0x08006081
 80060a8:	08006081 	.word	0x08006081
 80060ac:	08006081 	.word	0x08006081
 80060b0:	08006105 	.word	0x08006105
 80060b4:	08006081 	.word	0x08006081
 80060b8:	08006081 	.word	0x08006081
 80060bc:	08006081 	.word	0x08006081
 80060c0:	08006081 	.word	0x08006081
 80060c4:	08006213 	.word	0x08006213
 80060c8:	08006135 	.word	0x08006135
 80060cc:	080061f5 	.word	0x080061f5
 80060d0:	08006081 	.word	0x08006081
 80060d4:	08006081 	.word	0x08006081
 80060d8:	08006235 	.word	0x08006235
 80060dc:	08006081 	.word	0x08006081
 80060e0:	08006135 	.word	0x08006135
 80060e4:	08006081 	.word	0x08006081
 80060e8:	08006081 	.word	0x08006081
 80060ec:	080061fd 	.word	0x080061fd
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	1d1a      	adds	r2, r3, #4
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	602a      	str	r2, [r5, #0]
 80060f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006100:	2301      	movs	r3, #1
 8006102:	e0a4      	b.n	800624e <_printf_i+0x1f6>
 8006104:	6820      	ldr	r0, [r4, #0]
 8006106:	6829      	ldr	r1, [r5, #0]
 8006108:	0606      	lsls	r6, r0, #24
 800610a:	f101 0304 	add.w	r3, r1, #4
 800610e:	d50a      	bpl.n	8006126 <_printf_i+0xce>
 8006110:	680e      	ldr	r6, [r1, #0]
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	2e00      	cmp	r6, #0
 8006116:	da03      	bge.n	8006120 <_printf_i+0xc8>
 8006118:	232d      	movs	r3, #45	; 0x2d
 800611a:	4276      	negs	r6, r6
 800611c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006120:	230a      	movs	r3, #10
 8006122:	485e      	ldr	r0, [pc, #376]	; (800629c <_printf_i+0x244>)
 8006124:	e019      	b.n	800615a <_printf_i+0x102>
 8006126:	680e      	ldr	r6, [r1, #0]
 8006128:	f010 0f40 	tst.w	r0, #64	; 0x40
 800612c:	602b      	str	r3, [r5, #0]
 800612e:	bf18      	it	ne
 8006130:	b236      	sxthne	r6, r6
 8006132:	e7ef      	b.n	8006114 <_printf_i+0xbc>
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	6820      	ldr	r0, [r4, #0]
 8006138:	1d19      	adds	r1, r3, #4
 800613a:	6029      	str	r1, [r5, #0]
 800613c:	0601      	lsls	r1, r0, #24
 800613e:	d501      	bpl.n	8006144 <_printf_i+0xec>
 8006140:	681e      	ldr	r6, [r3, #0]
 8006142:	e002      	b.n	800614a <_printf_i+0xf2>
 8006144:	0646      	lsls	r6, r0, #25
 8006146:	d5fb      	bpl.n	8006140 <_printf_i+0xe8>
 8006148:	881e      	ldrh	r6, [r3, #0]
 800614a:	2f6f      	cmp	r7, #111	; 0x6f
 800614c:	bf0c      	ite	eq
 800614e:	2308      	moveq	r3, #8
 8006150:	230a      	movne	r3, #10
 8006152:	4852      	ldr	r0, [pc, #328]	; (800629c <_printf_i+0x244>)
 8006154:	2100      	movs	r1, #0
 8006156:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800615a:	6865      	ldr	r5, [r4, #4]
 800615c:	2d00      	cmp	r5, #0
 800615e:	bfa8      	it	ge
 8006160:	6821      	ldrge	r1, [r4, #0]
 8006162:	60a5      	str	r5, [r4, #8]
 8006164:	bfa4      	itt	ge
 8006166:	f021 0104 	bicge.w	r1, r1, #4
 800616a:	6021      	strge	r1, [r4, #0]
 800616c:	b90e      	cbnz	r6, 8006172 <_printf_i+0x11a>
 800616e:	2d00      	cmp	r5, #0
 8006170:	d04d      	beq.n	800620e <_printf_i+0x1b6>
 8006172:	4615      	mov	r5, r2
 8006174:	fbb6 f1f3 	udiv	r1, r6, r3
 8006178:	fb03 6711 	mls	r7, r3, r1, r6
 800617c:	5dc7      	ldrb	r7, [r0, r7]
 800617e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006182:	4637      	mov	r7, r6
 8006184:	42bb      	cmp	r3, r7
 8006186:	460e      	mov	r6, r1
 8006188:	d9f4      	bls.n	8006174 <_printf_i+0x11c>
 800618a:	2b08      	cmp	r3, #8
 800618c:	d10b      	bne.n	80061a6 <_printf_i+0x14e>
 800618e:	6823      	ldr	r3, [r4, #0]
 8006190:	07de      	lsls	r6, r3, #31
 8006192:	d508      	bpl.n	80061a6 <_printf_i+0x14e>
 8006194:	6923      	ldr	r3, [r4, #16]
 8006196:	6861      	ldr	r1, [r4, #4]
 8006198:	4299      	cmp	r1, r3
 800619a:	bfde      	ittt	le
 800619c:	2330      	movle	r3, #48	; 0x30
 800619e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061a6:	1b52      	subs	r2, r2, r5
 80061a8:	6122      	str	r2, [r4, #16]
 80061aa:	464b      	mov	r3, r9
 80061ac:	4621      	mov	r1, r4
 80061ae:	4640      	mov	r0, r8
 80061b0:	f8cd a000 	str.w	sl, [sp]
 80061b4:	aa03      	add	r2, sp, #12
 80061b6:	f7ff fedf 	bl	8005f78 <_printf_common>
 80061ba:	3001      	adds	r0, #1
 80061bc:	d14c      	bne.n	8006258 <_printf_i+0x200>
 80061be:	f04f 30ff 	mov.w	r0, #4294967295
 80061c2:	b004      	add	sp, #16
 80061c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061c8:	4834      	ldr	r0, [pc, #208]	; (800629c <_printf_i+0x244>)
 80061ca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80061ce:	6829      	ldr	r1, [r5, #0]
 80061d0:	6823      	ldr	r3, [r4, #0]
 80061d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80061d6:	6029      	str	r1, [r5, #0]
 80061d8:	061d      	lsls	r5, r3, #24
 80061da:	d514      	bpl.n	8006206 <_printf_i+0x1ae>
 80061dc:	07df      	lsls	r7, r3, #31
 80061de:	bf44      	itt	mi
 80061e0:	f043 0320 	orrmi.w	r3, r3, #32
 80061e4:	6023      	strmi	r3, [r4, #0]
 80061e6:	b91e      	cbnz	r6, 80061f0 <_printf_i+0x198>
 80061e8:	6823      	ldr	r3, [r4, #0]
 80061ea:	f023 0320 	bic.w	r3, r3, #32
 80061ee:	6023      	str	r3, [r4, #0]
 80061f0:	2310      	movs	r3, #16
 80061f2:	e7af      	b.n	8006154 <_printf_i+0xfc>
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	f043 0320 	orr.w	r3, r3, #32
 80061fa:	6023      	str	r3, [r4, #0]
 80061fc:	2378      	movs	r3, #120	; 0x78
 80061fe:	4828      	ldr	r0, [pc, #160]	; (80062a0 <_printf_i+0x248>)
 8006200:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006204:	e7e3      	b.n	80061ce <_printf_i+0x176>
 8006206:	0659      	lsls	r1, r3, #25
 8006208:	bf48      	it	mi
 800620a:	b2b6      	uxthmi	r6, r6
 800620c:	e7e6      	b.n	80061dc <_printf_i+0x184>
 800620e:	4615      	mov	r5, r2
 8006210:	e7bb      	b.n	800618a <_printf_i+0x132>
 8006212:	682b      	ldr	r3, [r5, #0]
 8006214:	6826      	ldr	r6, [r4, #0]
 8006216:	1d18      	adds	r0, r3, #4
 8006218:	6961      	ldr	r1, [r4, #20]
 800621a:	6028      	str	r0, [r5, #0]
 800621c:	0635      	lsls	r5, r6, #24
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	d501      	bpl.n	8006226 <_printf_i+0x1ce>
 8006222:	6019      	str	r1, [r3, #0]
 8006224:	e002      	b.n	800622c <_printf_i+0x1d4>
 8006226:	0670      	lsls	r0, r6, #25
 8006228:	d5fb      	bpl.n	8006222 <_printf_i+0x1ca>
 800622a:	8019      	strh	r1, [r3, #0]
 800622c:	2300      	movs	r3, #0
 800622e:	4615      	mov	r5, r2
 8006230:	6123      	str	r3, [r4, #16]
 8006232:	e7ba      	b.n	80061aa <_printf_i+0x152>
 8006234:	682b      	ldr	r3, [r5, #0]
 8006236:	2100      	movs	r1, #0
 8006238:	1d1a      	adds	r2, r3, #4
 800623a:	602a      	str	r2, [r5, #0]
 800623c:	681d      	ldr	r5, [r3, #0]
 800623e:	6862      	ldr	r2, [r4, #4]
 8006240:	4628      	mov	r0, r5
 8006242:	f000 fb13 	bl	800686c <memchr>
 8006246:	b108      	cbz	r0, 800624c <_printf_i+0x1f4>
 8006248:	1b40      	subs	r0, r0, r5
 800624a:	6060      	str	r0, [r4, #4]
 800624c:	6863      	ldr	r3, [r4, #4]
 800624e:	6123      	str	r3, [r4, #16]
 8006250:	2300      	movs	r3, #0
 8006252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006256:	e7a8      	b.n	80061aa <_printf_i+0x152>
 8006258:	462a      	mov	r2, r5
 800625a:	4649      	mov	r1, r9
 800625c:	4640      	mov	r0, r8
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	47d0      	blx	sl
 8006262:	3001      	adds	r0, #1
 8006264:	d0ab      	beq.n	80061be <_printf_i+0x166>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	079b      	lsls	r3, r3, #30
 800626a:	d413      	bmi.n	8006294 <_printf_i+0x23c>
 800626c:	68e0      	ldr	r0, [r4, #12]
 800626e:	9b03      	ldr	r3, [sp, #12]
 8006270:	4298      	cmp	r0, r3
 8006272:	bfb8      	it	lt
 8006274:	4618      	movlt	r0, r3
 8006276:	e7a4      	b.n	80061c2 <_printf_i+0x16a>
 8006278:	2301      	movs	r3, #1
 800627a:	4632      	mov	r2, r6
 800627c:	4649      	mov	r1, r9
 800627e:	4640      	mov	r0, r8
 8006280:	47d0      	blx	sl
 8006282:	3001      	adds	r0, #1
 8006284:	d09b      	beq.n	80061be <_printf_i+0x166>
 8006286:	3501      	adds	r5, #1
 8006288:	68e3      	ldr	r3, [r4, #12]
 800628a:	9903      	ldr	r1, [sp, #12]
 800628c:	1a5b      	subs	r3, r3, r1
 800628e:	42ab      	cmp	r3, r5
 8006290:	dcf2      	bgt.n	8006278 <_printf_i+0x220>
 8006292:	e7eb      	b.n	800626c <_printf_i+0x214>
 8006294:	2500      	movs	r5, #0
 8006296:	f104 0619 	add.w	r6, r4, #25
 800629a:	e7f5      	b.n	8006288 <_printf_i+0x230>
 800629c:	08006d99 	.word	0x08006d99
 80062a0:	08006daa 	.word	0x08006daa

080062a4 <__swbuf_r>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	460e      	mov	r6, r1
 80062a8:	4614      	mov	r4, r2
 80062aa:	4605      	mov	r5, r0
 80062ac:	b118      	cbz	r0, 80062b6 <__swbuf_r+0x12>
 80062ae:	6983      	ldr	r3, [r0, #24]
 80062b0:	b90b      	cbnz	r3, 80062b6 <__swbuf_r+0x12>
 80062b2:	f000 f9d5 	bl	8006660 <__sinit>
 80062b6:	4b21      	ldr	r3, [pc, #132]	; (800633c <__swbuf_r+0x98>)
 80062b8:	429c      	cmp	r4, r3
 80062ba:	d12b      	bne.n	8006314 <__swbuf_r+0x70>
 80062bc:	686c      	ldr	r4, [r5, #4]
 80062be:	69a3      	ldr	r3, [r4, #24]
 80062c0:	60a3      	str	r3, [r4, #8]
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	071a      	lsls	r2, r3, #28
 80062c6:	d52f      	bpl.n	8006328 <__swbuf_r+0x84>
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	b36b      	cbz	r3, 8006328 <__swbuf_r+0x84>
 80062cc:	6923      	ldr	r3, [r4, #16]
 80062ce:	6820      	ldr	r0, [r4, #0]
 80062d0:	b2f6      	uxtb	r6, r6
 80062d2:	1ac0      	subs	r0, r0, r3
 80062d4:	6963      	ldr	r3, [r4, #20]
 80062d6:	4637      	mov	r7, r6
 80062d8:	4283      	cmp	r3, r0
 80062da:	dc04      	bgt.n	80062e6 <__swbuf_r+0x42>
 80062dc:	4621      	mov	r1, r4
 80062de:	4628      	mov	r0, r5
 80062e0:	f000 f92a 	bl	8006538 <_fflush_r>
 80062e4:	bb30      	cbnz	r0, 8006334 <__swbuf_r+0x90>
 80062e6:	68a3      	ldr	r3, [r4, #8]
 80062e8:	3001      	adds	r0, #1
 80062ea:	3b01      	subs	r3, #1
 80062ec:	60a3      	str	r3, [r4, #8]
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	1c5a      	adds	r2, r3, #1
 80062f2:	6022      	str	r2, [r4, #0]
 80062f4:	701e      	strb	r6, [r3, #0]
 80062f6:	6963      	ldr	r3, [r4, #20]
 80062f8:	4283      	cmp	r3, r0
 80062fa:	d004      	beq.n	8006306 <__swbuf_r+0x62>
 80062fc:	89a3      	ldrh	r3, [r4, #12]
 80062fe:	07db      	lsls	r3, r3, #31
 8006300:	d506      	bpl.n	8006310 <__swbuf_r+0x6c>
 8006302:	2e0a      	cmp	r6, #10
 8006304:	d104      	bne.n	8006310 <__swbuf_r+0x6c>
 8006306:	4621      	mov	r1, r4
 8006308:	4628      	mov	r0, r5
 800630a:	f000 f915 	bl	8006538 <_fflush_r>
 800630e:	b988      	cbnz	r0, 8006334 <__swbuf_r+0x90>
 8006310:	4638      	mov	r0, r7
 8006312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006314:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <__swbuf_r+0x9c>)
 8006316:	429c      	cmp	r4, r3
 8006318:	d101      	bne.n	800631e <__swbuf_r+0x7a>
 800631a:	68ac      	ldr	r4, [r5, #8]
 800631c:	e7cf      	b.n	80062be <__swbuf_r+0x1a>
 800631e:	4b09      	ldr	r3, [pc, #36]	; (8006344 <__swbuf_r+0xa0>)
 8006320:	429c      	cmp	r4, r3
 8006322:	bf08      	it	eq
 8006324:	68ec      	ldreq	r4, [r5, #12]
 8006326:	e7ca      	b.n	80062be <__swbuf_r+0x1a>
 8006328:	4621      	mov	r1, r4
 800632a:	4628      	mov	r0, r5
 800632c:	f000 f80c 	bl	8006348 <__swsetup_r>
 8006330:	2800      	cmp	r0, #0
 8006332:	d0cb      	beq.n	80062cc <__swbuf_r+0x28>
 8006334:	f04f 37ff 	mov.w	r7, #4294967295
 8006338:	e7ea      	b.n	8006310 <__swbuf_r+0x6c>
 800633a:	bf00      	nop
 800633c:	08006ddc 	.word	0x08006ddc
 8006340:	08006dfc 	.word	0x08006dfc
 8006344:	08006dbc 	.word	0x08006dbc

08006348 <__swsetup_r>:
 8006348:	4b32      	ldr	r3, [pc, #200]	; (8006414 <__swsetup_r+0xcc>)
 800634a:	b570      	push	{r4, r5, r6, lr}
 800634c:	681d      	ldr	r5, [r3, #0]
 800634e:	4606      	mov	r6, r0
 8006350:	460c      	mov	r4, r1
 8006352:	b125      	cbz	r5, 800635e <__swsetup_r+0x16>
 8006354:	69ab      	ldr	r3, [r5, #24]
 8006356:	b913      	cbnz	r3, 800635e <__swsetup_r+0x16>
 8006358:	4628      	mov	r0, r5
 800635a:	f000 f981 	bl	8006660 <__sinit>
 800635e:	4b2e      	ldr	r3, [pc, #184]	; (8006418 <__swsetup_r+0xd0>)
 8006360:	429c      	cmp	r4, r3
 8006362:	d10f      	bne.n	8006384 <__swsetup_r+0x3c>
 8006364:	686c      	ldr	r4, [r5, #4]
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800636c:	0719      	lsls	r1, r3, #28
 800636e:	d42c      	bmi.n	80063ca <__swsetup_r+0x82>
 8006370:	06dd      	lsls	r5, r3, #27
 8006372:	d411      	bmi.n	8006398 <__swsetup_r+0x50>
 8006374:	2309      	movs	r3, #9
 8006376:	6033      	str	r3, [r6, #0]
 8006378:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800637c:	f04f 30ff 	mov.w	r0, #4294967295
 8006380:	81a3      	strh	r3, [r4, #12]
 8006382:	e03e      	b.n	8006402 <__swsetup_r+0xba>
 8006384:	4b25      	ldr	r3, [pc, #148]	; (800641c <__swsetup_r+0xd4>)
 8006386:	429c      	cmp	r4, r3
 8006388:	d101      	bne.n	800638e <__swsetup_r+0x46>
 800638a:	68ac      	ldr	r4, [r5, #8]
 800638c:	e7eb      	b.n	8006366 <__swsetup_r+0x1e>
 800638e:	4b24      	ldr	r3, [pc, #144]	; (8006420 <__swsetup_r+0xd8>)
 8006390:	429c      	cmp	r4, r3
 8006392:	bf08      	it	eq
 8006394:	68ec      	ldreq	r4, [r5, #12]
 8006396:	e7e6      	b.n	8006366 <__swsetup_r+0x1e>
 8006398:	0758      	lsls	r0, r3, #29
 800639a:	d512      	bpl.n	80063c2 <__swsetup_r+0x7a>
 800639c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800639e:	b141      	cbz	r1, 80063b2 <__swsetup_r+0x6a>
 80063a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063a4:	4299      	cmp	r1, r3
 80063a6:	d002      	beq.n	80063ae <__swsetup_r+0x66>
 80063a8:	4630      	mov	r0, r6
 80063aa:	f000 fa6d 	bl	8006888 <_free_r>
 80063ae:	2300      	movs	r3, #0
 80063b0:	6363      	str	r3, [r4, #52]	; 0x34
 80063b2:	89a3      	ldrh	r3, [r4, #12]
 80063b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063b8:	81a3      	strh	r3, [r4, #12]
 80063ba:	2300      	movs	r3, #0
 80063bc:	6063      	str	r3, [r4, #4]
 80063be:	6923      	ldr	r3, [r4, #16]
 80063c0:	6023      	str	r3, [r4, #0]
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f043 0308 	orr.w	r3, r3, #8
 80063c8:	81a3      	strh	r3, [r4, #12]
 80063ca:	6923      	ldr	r3, [r4, #16]
 80063cc:	b94b      	cbnz	r3, 80063e2 <__swsetup_r+0x9a>
 80063ce:	89a3      	ldrh	r3, [r4, #12]
 80063d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063d8:	d003      	beq.n	80063e2 <__swsetup_r+0x9a>
 80063da:	4621      	mov	r1, r4
 80063dc:	4630      	mov	r0, r6
 80063de:	f000 fa05 	bl	80067ec <__smakebuf_r>
 80063e2:	89a0      	ldrh	r0, [r4, #12]
 80063e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063e8:	f010 0301 	ands.w	r3, r0, #1
 80063ec:	d00a      	beq.n	8006404 <__swsetup_r+0xbc>
 80063ee:	2300      	movs	r3, #0
 80063f0:	60a3      	str	r3, [r4, #8]
 80063f2:	6963      	ldr	r3, [r4, #20]
 80063f4:	425b      	negs	r3, r3
 80063f6:	61a3      	str	r3, [r4, #24]
 80063f8:	6923      	ldr	r3, [r4, #16]
 80063fa:	b943      	cbnz	r3, 800640e <__swsetup_r+0xc6>
 80063fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006400:	d1ba      	bne.n	8006378 <__swsetup_r+0x30>
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	0781      	lsls	r1, r0, #30
 8006406:	bf58      	it	pl
 8006408:	6963      	ldrpl	r3, [r4, #20]
 800640a:	60a3      	str	r3, [r4, #8]
 800640c:	e7f4      	b.n	80063f8 <__swsetup_r+0xb0>
 800640e:	2000      	movs	r0, #0
 8006410:	e7f7      	b.n	8006402 <__swsetup_r+0xba>
 8006412:	bf00      	nop
 8006414:	20000010 	.word	0x20000010
 8006418:	08006ddc 	.word	0x08006ddc
 800641c:	08006dfc 	.word	0x08006dfc
 8006420:	08006dbc 	.word	0x08006dbc

08006424 <abort>:
 8006424:	2006      	movs	r0, #6
 8006426:	b508      	push	{r3, lr}
 8006428:	f000 fb42 	bl	8006ab0 <raise>
 800642c:	2001      	movs	r0, #1
 800642e:	f7fc f8fa 	bl	8002626 <_exit>
	...

08006434 <__sflush_r>:
 8006434:	898a      	ldrh	r2, [r1, #12]
 8006436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006438:	4605      	mov	r5, r0
 800643a:	0710      	lsls	r0, r2, #28
 800643c:	460c      	mov	r4, r1
 800643e:	d457      	bmi.n	80064f0 <__sflush_r+0xbc>
 8006440:	684b      	ldr	r3, [r1, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	dc04      	bgt.n	8006450 <__sflush_r+0x1c>
 8006446:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	dc01      	bgt.n	8006450 <__sflush_r+0x1c>
 800644c:	2000      	movs	r0, #0
 800644e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006450:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006452:	2e00      	cmp	r6, #0
 8006454:	d0fa      	beq.n	800644c <__sflush_r+0x18>
 8006456:	2300      	movs	r3, #0
 8006458:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800645c:	682f      	ldr	r7, [r5, #0]
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	d032      	beq.n	80064c8 <__sflush_r+0x94>
 8006462:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006464:	89a3      	ldrh	r3, [r4, #12]
 8006466:	075a      	lsls	r2, r3, #29
 8006468:	d505      	bpl.n	8006476 <__sflush_r+0x42>
 800646a:	6863      	ldr	r3, [r4, #4]
 800646c:	1ac0      	subs	r0, r0, r3
 800646e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006470:	b10b      	cbz	r3, 8006476 <__sflush_r+0x42>
 8006472:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006474:	1ac0      	subs	r0, r0, r3
 8006476:	2300      	movs	r3, #0
 8006478:	4602      	mov	r2, r0
 800647a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800647c:	4628      	mov	r0, r5
 800647e:	6a21      	ldr	r1, [r4, #32]
 8006480:	47b0      	blx	r6
 8006482:	1c43      	adds	r3, r0, #1
 8006484:	89a3      	ldrh	r3, [r4, #12]
 8006486:	d106      	bne.n	8006496 <__sflush_r+0x62>
 8006488:	6829      	ldr	r1, [r5, #0]
 800648a:	291d      	cmp	r1, #29
 800648c:	d82c      	bhi.n	80064e8 <__sflush_r+0xb4>
 800648e:	4a29      	ldr	r2, [pc, #164]	; (8006534 <__sflush_r+0x100>)
 8006490:	40ca      	lsrs	r2, r1
 8006492:	07d6      	lsls	r6, r2, #31
 8006494:	d528      	bpl.n	80064e8 <__sflush_r+0xb4>
 8006496:	2200      	movs	r2, #0
 8006498:	6062      	str	r2, [r4, #4]
 800649a:	6922      	ldr	r2, [r4, #16]
 800649c:	04d9      	lsls	r1, r3, #19
 800649e:	6022      	str	r2, [r4, #0]
 80064a0:	d504      	bpl.n	80064ac <__sflush_r+0x78>
 80064a2:	1c42      	adds	r2, r0, #1
 80064a4:	d101      	bne.n	80064aa <__sflush_r+0x76>
 80064a6:	682b      	ldr	r3, [r5, #0]
 80064a8:	b903      	cbnz	r3, 80064ac <__sflush_r+0x78>
 80064aa:	6560      	str	r0, [r4, #84]	; 0x54
 80064ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064ae:	602f      	str	r7, [r5, #0]
 80064b0:	2900      	cmp	r1, #0
 80064b2:	d0cb      	beq.n	800644c <__sflush_r+0x18>
 80064b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064b8:	4299      	cmp	r1, r3
 80064ba:	d002      	beq.n	80064c2 <__sflush_r+0x8e>
 80064bc:	4628      	mov	r0, r5
 80064be:	f000 f9e3 	bl	8006888 <_free_r>
 80064c2:	2000      	movs	r0, #0
 80064c4:	6360      	str	r0, [r4, #52]	; 0x34
 80064c6:	e7c2      	b.n	800644e <__sflush_r+0x1a>
 80064c8:	6a21      	ldr	r1, [r4, #32]
 80064ca:	2301      	movs	r3, #1
 80064cc:	4628      	mov	r0, r5
 80064ce:	47b0      	blx	r6
 80064d0:	1c41      	adds	r1, r0, #1
 80064d2:	d1c7      	bne.n	8006464 <__sflush_r+0x30>
 80064d4:	682b      	ldr	r3, [r5, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d0c4      	beq.n	8006464 <__sflush_r+0x30>
 80064da:	2b1d      	cmp	r3, #29
 80064dc:	d001      	beq.n	80064e2 <__sflush_r+0xae>
 80064de:	2b16      	cmp	r3, #22
 80064e0:	d101      	bne.n	80064e6 <__sflush_r+0xb2>
 80064e2:	602f      	str	r7, [r5, #0]
 80064e4:	e7b2      	b.n	800644c <__sflush_r+0x18>
 80064e6:	89a3      	ldrh	r3, [r4, #12]
 80064e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ec:	81a3      	strh	r3, [r4, #12]
 80064ee:	e7ae      	b.n	800644e <__sflush_r+0x1a>
 80064f0:	690f      	ldr	r7, [r1, #16]
 80064f2:	2f00      	cmp	r7, #0
 80064f4:	d0aa      	beq.n	800644c <__sflush_r+0x18>
 80064f6:	0793      	lsls	r3, r2, #30
 80064f8:	bf18      	it	ne
 80064fa:	2300      	movne	r3, #0
 80064fc:	680e      	ldr	r6, [r1, #0]
 80064fe:	bf08      	it	eq
 8006500:	694b      	ldreq	r3, [r1, #20]
 8006502:	1bf6      	subs	r6, r6, r7
 8006504:	600f      	str	r7, [r1, #0]
 8006506:	608b      	str	r3, [r1, #8]
 8006508:	2e00      	cmp	r6, #0
 800650a:	dd9f      	ble.n	800644c <__sflush_r+0x18>
 800650c:	4633      	mov	r3, r6
 800650e:	463a      	mov	r2, r7
 8006510:	4628      	mov	r0, r5
 8006512:	6a21      	ldr	r1, [r4, #32]
 8006514:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006518:	47e0      	blx	ip
 800651a:	2800      	cmp	r0, #0
 800651c:	dc06      	bgt.n	800652c <__sflush_r+0xf8>
 800651e:	89a3      	ldrh	r3, [r4, #12]
 8006520:	f04f 30ff 	mov.w	r0, #4294967295
 8006524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	e790      	b.n	800644e <__sflush_r+0x1a>
 800652c:	4407      	add	r7, r0
 800652e:	1a36      	subs	r6, r6, r0
 8006530:	e7ea      	b.n	8006508 <__sflush_r+0xd4>
 8006532:	bf00      	nop
 8006534:	20400001 	.word	0x20400001

08006538 <_fflush_r>:
 8006538:	b538      	push	{r3, r4, r5, lr}
 800653a:	690b      	ldr	r3, [r1, #16]
 800653c:	4605      	mov	r5, r0
 800653e:	460c      	mov	r4, r1
 8006540:	b913      	cbnz	r3, 8006548 <_fflush_r+0x10>
 8006542:	2500      	movs	r5, #0
 8006544:	4628      	mov	r0, r5
 8006546:	bd38      	pop	{r3, r4, r5, pc}
 8006548:	b118      	cbz	r0, 8006552 <_fflush_r+0x1a>
 800654a:	6983      	ldr	r3, [r0, #24]
 800654c:	b90b      	cbnz	r3, 8006552 <_fflush_r+0x1a>
 800654e:	f000 f887 	bl	8006660 <__sinit>
 8006552:	4b14      	ldr	r3, [pc, #80]	; (80065a4 <_fflush_r+0x6c>)
 8006554:	429c      	cmp	r4, r3
 8006556:	d11b      	bne.n	8006590 <_fflush_r+0x58>
 8006558:	686c      	ldr	r4, [r5, #4]
 800655a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d0ef      	beq.n	8006542 <_fflush_r+0xa>
 8006562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006564:	07d0      	lsls	r0, r2, #31
 8006566:	d404      	bmi.n	8006572 <_fflush_r+0x3a>
 8006568:	0599      	lsls	r1, r3, #22
 800656a:	d402      	bmi.n	8006572 <_fflush_r+0x3a>
 800656c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800656e:	f000 f915 	bl	800679c <__retarget_lock_acquire_recursive>
 8006572:	4628      	mov	r0, r5
 8006574:	4621      	mov	r1, r4
 8006576:	f7ff ff5d 	bl	8006434 <__sflush_r>
 800657a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800657c:	4605      	mov	r5, r0
 800657e:	07da      	lsls	r2, r3, #31
 8006580:	d4e0      	bmi.n	8006544 <_fflush_r+0xc>
 8006582:	89a3      	ldrh	r3, [r4, #12]
 8006584:	059b      	lsls	r3, r3, #22
 8006586:	d4dd      	bmi.n	8006544 <_fflush_r+0xc>
 8006588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800658a:	f000 f908 	bl	800679e <__retarget_lock_release_recursive>
 800658e:	e7d9      	b.n	8006544 <_fflush_r+0xc>
 8006590:	4b05      	ldr	r3, [pc, #20]	; (80065a8 <_fflush_r+0x70>)
 8006592:	429c      	cmp	r4, r3
 8006594:	d101      	bne.n	800659a <_fflush_r+0x62>
 8006596:	68ac      	ldr	r4, [r5, #8]
 8006598:	e7df      	b.n	800655a <_fflush_r+0x22>
 800659a:	4b04      	ldr	r3, [pc, #16]	; (80065ac <_fflush_r+0x74>)
 800659c:	429c      	cmp	r4, r3
 800659e:	bf08      	it	eq
 80065a0:	68ec      	ldreq	r4, [r5, #12]
 80065a2:	e7da      	b.n	800655a <_fflush_r+0x22>
 80065a4:	08006ddc 	.word	0x08006ddc
 80065a8:	08006dfc 	.word	0x08006dfc
 80065ac:	08006dbc 	.word	0x08006dbc

080065b0 <std>:
 80065b0:	2300      	movs	r3, #0
 80065b2:	b510      	push	{r4, lr}
 80065b4:	4604      	mov	r4, r0
 80065b6:	e9c0 3300 	strd	r3, r3, [r0]
 80065ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065be:	6083      	str	r3, [r0, #8]
 80065c0:	8181      	strh	r1, [r0, #12]
 80065c2:	6643      	str	r3, [r0, #100]	; 0x64
 80065c4:	81c2      	strh	r2, [r0, #14]
 80065c6:	6183      	str	r3, [r0, #24]
 80065c8:	4619      	mov	r1, r3
 80065ca:	2208      	movs	r2, #8
 80065cc:	305c      	adds	r0, #92	; 0x5c
 80065ce:	f7ff fb73 	bl	8005cb8 <memset>
 80065d2:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <std+0x38>)
 80065d4:	6224      	str	r4, [r4, #32]
 80065d6:	6263      	str	r3, [r4, #36]	; 0x24
 80065d8:	4b04      	ldr	r3, [pc, #16]	; (80065ec <std+0x3c>)
 80065da:	62a3      	str	r3, [r4, #40]	; 0x28
 80065dc:	4b04      	ldr	r3, [pc, #16]	; (80065f0 <std+0x40>)
 80065de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065e0:	4b04      	ldr	r3, [pc, #16]	; (80065f4 <std+0x44>)
 80065e2:	6323      	str	r3, [r4, #48]	; 0x30
 80065e4:	bd10      	pop	{r4, pc}
 80065e6:	bf00      	nop
 80065e8:	08006ae9 	.word	0x08006ae9
 80065ec:	08006b0b 	.word	0x08006b0b
 80065f0:	08006b43 	.word	0x08006b43
 80065f4:	08006b67 	.word	0x08006b67

080065f8 <_cleanup_r>:
 80065f8:	4901      	ldr	r1, [pc, #4]	; (8006600 <_cleanup_r+0x8>)
 80065fa:	f000 b8af 	b.w	800675c <_fwalk_reent>
 80065fe:	bf00      	nop
 8006600:	08006539 	.word	0x08006539

08006604 <__sfmoreglue>:
 8006604:	2268      	movs	r2, #104	; 0x68
 8006606:	b570      	push	{r4, r5, r6, lr}
 8006608:	1e4d      	subs	r5, r1, #1
 800660a:	4355      	muls	r5, r2
 800660c:	460e      	mov	r6, r1
 800660e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006612:	f000 f9a1 	bl	8006958 <_malloc_r>
 8006616:	4604      	mov	r4, r0
 8006618:	b140      	cbz	r0, 800662c <__sfmoreglue+0x28>
 800661a:	2100      	movs	r1, #0
 800661c:	e9c0 1600 	strd	r1, r6, [r0]
 8006620:	300c      	adds	r0, #12
 8006622:	60a0      	str	r0, [r4, #8]
 8006624:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006628:	f7ff fb46 	bl	8005cb8 <memset>
 800662c:	4620      	mov	r0, r4
 800662e:	bd70      	pop	{r4, r5, r6, pc}

08006630 <__sfp_lock_acquire>:
 8006630:	4801      	ldr	r0, [pc, #4]	; (8006638 <__sfp_lock_acquire+0x8>)
 8006632:	f000 b8b3 	b.w	800679c <__retarget_lock_acquire_recursive>
 8006636:	bf00      	nop
 8006638:	200003cd 	.word	0x200003cd

0800663c <__sfp_lock_release>:
 800663c:	4801      	ldr	r0, [pc, #4]	; (8006644 <__sfp_lock_release+0x8>)
 800663e:	f000 b8ae 	b.w	800679e <__retarget_lock_release_recursive>
 8006642:	bf00      	nop
 8006644:	200003cd 	.word	0x200003cd

08006648 <__sinit_lock_acquire>:
 8006648:	4801      	ldr	r0, [pc, #4]	; (8006650 <__sinit_lock_acquire+0x8>)
 800664a:	f000 b8a7 	b.w	800679c <__retarget_lock_acquire_recursive>
 800664e:	bf00      	nop
 8006650:	200003ce 	.word	0x200003ce

08006654 <__sinit_lock_release>:
 8006654:	4801      	ldr	r0, [pc, #4]	; (800665c <__sinit_lock_release+0x8>)
 8006656:	f000 b8a2 	b.w	800679e <__retarget_lock_release_recursive>
 800665a:	bf00      	nop
 800665c:	200003ce 	.word	0x200003ce

08006660 <__sinit>:
 8006660:	b510      	push	{r4, lr}
 8006662:	4604      	mov	r4, r0
 8006664:	f7ff fff0 	bl	8006648 <__sinit_lock_acquire>
 8006668:	69a3      	ldr	r3, [r4, #24]
 800666a:	b11b      	cbz	r3, 8006674 <__sinit+0x14>
 800666c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006670:	f7ff bff0 	b.w	8006654 <__sinit_lock_release>
 8006674:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006678:	6523      	str	r3, [r4, #80]	; 0x50
 800667a:	4b13      	ldr	r3, [pc, #76]	; (80066c8 <__sinit+0x68>)
 800667c:	4a13      	ldr	r2, [pc, #76]	; (80066cc <__sinit+0x6c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	62a2      	str	r2, [r4, #40]	; 0x28
 8006682:	42a3      	cmp	r3, r4
 8006684:	bf08      	it	eq
 8006686:	2301      	moveq	r3, #1
 8006688:	4620      	mov	r0, r4
 800668a:	bf08      	it	eq
 800668c:	61a3      	streq	r3, [r4, #24]
 800668e:	f000 f81f 	bl	80066d0 <__sfp>
 8006692:	6060      	str	r0, [r4, #4]
 8006694:	4620      	mov	r0, r4
 8006696:	f000 f81b 	bl	80066d0 <__sfp>
 800669a:	60a0      	str	r0, [r4, #8]
 800669c:	4620      	mov	r0, r4
 800669e:	f000 f817 	bl	80066d0 <__sfp>
 80066a2:	2200      	movs	r2, #0
 80066a4:	2104      	movs	r1, #4
 80066a6:	60e0      	str	r0, [r4, #12]
 80066a8:	6860      	ldr	r0, [r4, #4]
 80066aa:	f7ff ff81 	bl	80065b0 <std>
 80066ae:	2201      	movs	r2, #1
 80066b0:	2109      	movs	r1, #9
 80066b2:	68a0      	ldr	r0, [r4, #8]
 80066b4:	f7ff ff7c 	bl	80065b0 <std>
 80066b8:	2202      	movs	r2, #2
 80066ba:	2112      	movs	r1, #18
 80066bc:	68e0      	ldr	r0, [r4, #12]
 80066be:	f7ff ff77 	bl	80065b0 <std>
 80066c2:	2301      	movs	r3, #1
 80066c4:	61a3      	str	r3, [r4, #24]
 80066c6:	e7d1      	b.n	800666c <__sinit+0xc>
 80066c8:	08006d84 	.word	0x08006d84
 80066cc:	080065f9 	.word	0x080065f9

080066d0 <__sfp>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	4607      	mov	r7, r0
 80066d4:	f7ff ffac 	bl	8006630 <__sfp_lock_acquire>
 80066d8:	4b1e      	ldr	r3, [pc, #120]	; (8006754 <__sfp+0x84>)
 80066da:	681e      	ldr	r6, [r3, #0]
 80066dc:	69b3      	ldr	r3, [r6, #24]
 80066de:	b913      	cbnz	r3, 80066e6 <__sfp+0x16>
 80066e0:	4630      	mov	r0, r6
 80066e2:	f7ff ffbd 	bl	8006660 <__sinit>
 80066e6:	3648      	adds	r6, #72	; 0x48
 80066e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	d503      	bpl.n	80066f8 <__sfp+0x28>
 80066f0:	6833      	ldr	r3, [r6, #0]
 80066f2:	b30b      	cbz	r3, 8006738 <__sfp+0x68>
 80066f4:	6836      	ldr	r6, [r6, #0]
 80066f6:	e7f7      	b.n	80066e8 <__sfp+0x18>
 80066f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066fc:	b9d5      	cbnz	r5, 8006734 <__sfp+0x64>
 80066fe:	4b16      	ldr	r3, [pc, #88]	; (8006758 <__sfp+0x88>)
 8006700:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006704:	60e3      	str	r3, [r4, #12]
 8006706:	6665      	str	r5, [r4, #100]	; 0x64
 8006708:	f000 f847 	bl	800679a <__retarget_lock_init_recursive>
 800670c:	f7ff ff96 	bl	800663c <__sfp_lock_release>
 8006710:	2208      	movs	r2, #8
 8006712:	4629      	mov	r1, r5
 8006714:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006718:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800671c:	6025      	str	r5, [r4, #0]
 800671e:	61a5      	str	r5, [r4, #24]
 8006720:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006724:	f7ff fac8 	bl	8005cb8 <memset>
 8006728:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800672c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006730:	4620      	mov	r0, r4
 8006732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006734:	3468      	adds	r4, #104	; 0x68
 8006736:	e7d9      	b.n	80066ec <__sfp+0x1c>
 8006738:	2104      	movs	r1, #4
 800673a:	4638      	mov	r0, r7
 800673c:	f7ff ff62 	bl	8006604 <__sfmoreglue>
 8006740:	4604      	mov	r4, r0
 8006742:	6030      	str	r0, [r6, #0]
 8006744:	2800      	cmp	r0, #0
 8006746:	d1d5      	bne.n	80066f4 <__sfp+0x24>
 8006748:	f7ff ff78 	bl	800663c <__sfp_lock_release>
 800674c:	230c      	movs	r3, #12
 800674e:	603b      	str	r3, [r7, #0]
 8006750:	e7ee      	b.n	8006730 <__sfp+0x60>
 8006752:	bf00      	nop
 8006754:	08006d84 	.word	0x08006d84
 8006758:	ffff0001 	.word	0xffff0001

0800675c <_fwalk_reent>:
 800675c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006760:	4606      	mov	r6, r0
 8006762:	4688      	mov	r8, r1
 8006764:	2700      	movs	r7, #0
 8006766:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800676a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800676e:	f1b9 0901 	subs.w	r9, r9, #1
 8006772:	d505      	bpl.n	8006780 <_fwalk_reent+0x24>
 8006774:	6824      	ldr	r4, [r4, #0]
 8006776:	2c00      	cmp	r4, #0
 8006778:	d1f7      	bne.n	800676a <_fwalk_reent+0xe>
 800677a:	4638      	mov	r0, r7
 800677c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006780:	89ab      	ldrh	r3, [r5, #12]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d907      	bls.n	8006796 <_fwalk_reent+0x3a>
 8006786:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800678a:	3301      	adds	r3, #1
 800678c:	d003      	beq.n	8006796 <_fwalk_reent+0x3a>
 800678e:	4629      	mov	r1, r5
 8006790:	4630      	mov	r0, r6
 8006792:	47c0      	blx	r8
 8006794:	4307      	orrs	r7, r0
 8006796:	3568      	adds	r5, #104	; 0x68
 8006798:	e7e9      	b.n	800676e <_fwalk_reent+0x12>

0800679a <__retarget_lock_init_recursive>:
 800679a:	4770      	bx	lr

0800679c <__retarget_lock_acquire_recursive>:
 800679c:	4770      	bx	lr

0800679e <__retarget_lock_release_recursive>:
 800679e:	4770      	bx	lr

080067a0 <__swhatbuf_r>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	460e      	mov	r6, r1
 80067a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067a8:	4614      	mov	r4, r2
 80067aa:	2900      	cmp	r1, #0
 80067ac:	461d      	mov	r5, r3
 80067ae:	b096      	sub	sp, #88	; 0x58
 80067b0:	da08      	bge.n	80067c4 <__swhatbuf_r+0x24>
 80067b2:	2200      	movs	r2, #0
 80067b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	061a      	lsls	r2, r3, #24
 80067bc:	d410      	bmi.n	80067e0 <__swhatbuf_r+0x40>
 80067be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c2:	e00e      	b.n	80067e2 <__swhatbuf_r+0x42>
 80067c4:	466a      	mov	r2, sp
 80067c6:	f000 f9f5 	bl	8006bb4 <_fstat_r>
 80067ca:	2800      	cmp	r0, #0
 80067cc:	dbf1      	blt.n	80067b2 <__swhatbuf_r+0x12>
 80067ce:	9a01      	ldr	r2, [sp, #4]
 80067d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067d8:	425a      	negs	r2, r3
 80067da:	415a      	adcs	r2, r3
 80067dc:	602a      	str	r2, [r5, #0]
 80067de:	e7ee      	b.n	80067be <__swhatbuf_r+0x1e>
 80067e0:	2340      	movs	r3, #64	; 0x40
 80067e2:	2000      	movs	r0, #0
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	b016      	add	sp, #88	; 0x58
 80067e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080067ec <__smakebuf_r>:
 80067ec:	898b      	ldrh	r3, [r1, #12]
 80067ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067f0:	079d      	lsls	r5, r3, #30
 80067f2:	4606      	mov	r6, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	d507      	bpl.n	8006808 <__smakebuf_r+0x1c>
 80067f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	6123      	str	r3, [r4, #16]
 8006800:	2301      	movs	r3, #1
 8006802:	6163      	str	r3, [r4, #20]
 8006804:	b002      	add	sp, #8
 8006806:	bd70      	pop	{r4, r5, r6, pc}
 8006808:	466a      	mov	r2, sp
 800680a:	ab01      	add	r3, sp, #4
 800680c:	f7ff ffc8 	bl	80067a0 <__swhatbuf_r>
 8006810:	9900      	ldr	r1, [sp, #0]
 8006812:	4605      	mov	r5, r0
 8006814:	4630      	mov	r0, r6
 8006816:	f000 f89f 	bl	8006958 <_malloc_r>
 800681a:	b948      	cbnz	r0, 8006830 <__smakebuf_r+0x44>
 800681c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006820:	059a      	lsls	r2, r3, #22
 8006822:	d4ef      	bmi.n	8006804 <__smakebuf_r+0x18>
 8006824:	f023 0303 	bic.w	r3, r3, #3
 8006828:	f043 0302 	orr.w	r3, r3, #2
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	e7e3      	b.n	80067f8 <__smakebuf_r+0xc>
 8006830:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <__smakebuf_r+0x7c>)
 8006832:	62b3      	str	r3, [r6, #40]	; 0x28
 8006834:	89a3      	ldrh	r3, [r4, #12]
 8006836:	6020      	str	r0, [r4, #0]
 8006838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800683c:	81a3      	strh	r3, [r4, #12]
 800683e:	9b00      	ldr	r3, [sp, #0]
 8006840:	6120      	str	r0, [r4, #16]
 8006842:	6163      	str	r3, [r4, #20]
 8006844:	9b01      	ldr	r3, [sp, #4]
 8006846:	b15b      	cbz	r3, 8006860 <__smakebuf_r+0x74>
 8006848:	4630      	mov	r0, r6
 800684a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800684e:	f000 f9c3 	bl	8006bd8 <_isatty_r>
 8006852:	b128      	cbz	r0, 8006860 <__smakebuf_r+0x74>
 8006854:	89a3      	ldrh	r3, [r4, #12]
 8006856:	f023 0303 	bic.w	r3, r3, #3
 800685a:	f043 0301 	orr.w	r3, r3, #1
 800685e:	81a3      	strh	r3, [r4, #12]
 8006860:	89a0      	ldrh	r0, [r4, #12]
 8006862:	4305      	orrs	r5, r0
 8006864:	81a5      	strh	r5, [r4, #12]
 8006866:	e7cd      	b.n	8006804 <__smakebuf_r+0x18>
 8006868:	080065f9 	.word	0x080065f9

0800686c <memchr>:
 800686c:	4603      	mov	r3, r0
 800686e:	b510      	push	{r4, lr}
 8006870:	b2c9      	uxtb	r1, r1
 8006872:	4402      	add	r2, r0
 8006874:	4293      	cmp	r3, r2
 8006876:	4618      	mov	r0, r3
 8006878:	d101      	bne.n	800687e <memchr+0x12>
 800687a:	2000      	movs	r0, #0
 800687c:	e003      	b.n	8006886 <memchr+0x1a>
 800687e:	7804      	ldrb	r4, [r0, #0]
 8006880:	3301      	adds	r3, #1
 8006882:	428c      	cmp	r4, r1
 8006884:	d1f6      	bne.n	8006874 <memchr+0x8>
 8006886:	bd10      	pop	{r4, pc}

08006888 <_free_r>:
 8006888:	b538      	push	{r3, r4, r5, lr}
 800688a:	4605      	mov	r5, r0
 800688c:	2900      	cmp	r1, #0
 800688e:	d040      	beq.n	8006912 <_free_r+0x8a>
 8006890:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006894:	1f0c      	subs	r4, r1, #4
 8006896:	2b00      	cmp	r3, #0
 8006898:	bfb8      	it	lt
 800689a:	18e4      	addlt	r4, r4, r3
 800689c:	f000 f9be 	bl	8006c1c <__malloc_lock>
 80068a0:	4a1c      	ldr	r2, [pc, #112]	; (8006914 <_free_r+0x8c>)
 80068a2:	6813      	ldr	r3, [r2, #0]
 80068a4:	b933      	cbnz	r3, 80068b4 <_free_r+0x2c>
 80068a6:	6063      	str	r3, [r4, #4]
 80068a8:	6014      	str	r4, [r2, #0]
 80068aa:	4628      	mov	r0, r5
 80068ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068b0:	f000 b9ba 	b.w	8006c28 <__malloc_unlock>
 80068b4:	42a3      	cmp	r3, r4
 80068b6:	d908      	bls.n	80068ca <_free_r+0x42>
 80068b8:	6820      	ldr	r0, [r4, #0]
 80068ba:	1821      	adds	r1, r4, r0
 80068bc:	428b      	cmp	r3, r1
 80068be:	bf01      	itttt	eq
 80068c0:	6819      	ldreq	r1, [r3, #0]
 80068c2:	685b      	ldreq	r3, [r3, #4]
 80068c4:	1809      	addeq	r1, r1, r0
 80068c6:	6021      	streq	r1, [r4, #0]
 80068c8:	e7ed      	b.n	80068a6 <_free_r+0x1e>
 80068ca:	461a      	mov	r2, r3
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	b10b      	cbz	r3, 80068d4 <_free_r+0x4c>
 80068d0:	42a3      	cmp	r3, r4
 80068d2:	d9fa      	bls.n	80068ca <_free_r+0x42>
 80068d4:	6811      	ldr	r1, [r2, #0]
 80068d6:	1850      	adds	r0, r2, r1
 80068d8:	42a0      	cmp	r0, r4
 80068da:	d10b      	bne.n	80068f4 <_free_r+0x6c>
 80068dc:	6820      	ldr	r0, [r4, #0]
 80068de:	4401      	add	r1, r0
 80068e0:	1850      	adds	r0, r2, r1
 80068e2:	4283      	cmp	r3, r0
 80068e4:	6011      	str	r1, [r2, #0]
 80068e6:	d1e0      	bne.n	80068aa <_free_r+0x22>
 80068e8:	6818      	ldr	r0, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	4401      	add	r1, r0
 80068ee:	6011      	str	r1, [r2, #0]
 80068f0:	6053      	str	r3, [r2, #4]
 80068f2:	e7da      	b.n	80068aa <_free_r+0x22>
 80068f4:	d902      	bls.n	80068fc <_free_r+0x74>
 80068f6:	230c      	movs	r3, #12
 80068f8:	602b      	str	r3, [r5, #0]
 80068fa:	e7d6      	b.n	80068aa <_free_r+0x22>
 80068fc:	6820      	ldr	r0, [r4, #0]
 80068fe:	1821      	adds	r1, r4, r0
 8006900:	428b      	cmp	r3, r1
 8006902:	bf01      	itttt	eq
 8006904:	6819      	ldreq	r1, [r3, #0]
 8006906:	685b      	ldreq	r3, [r3, #4]
 8006908:	1809      	addeq	r1, r1, r0
 800690a:	6021      	streq	r1, [r4, #0]
 800690c:	6063      	str	r3, [r4, #4]
 800690e:	6054      	str	r4, [r2, #4]
 8006910:	e7cb      	b.n	80068aa <_free_r+0x22>
 8006912:	bd38      	pop	{r3, r4, r5, pc}
 8006914:	200003d0 	.word	0x200003d0

08006918 <sbrk_aligned>:
 8006918:	b570      	push	{r4, r5, r6, lr}
 800691a:	4e0e      	ldr	r6, [pc, #56]	; (8006954 <sbrk_aligned+0x3c>)
 800691c:	460c      	mov	r4, r1
 800691e:	6831      	ldr	r1, [r6, #0]
 8006920:	4605      	mov	r5, r0
 8006922:	b911      	cbnz	r1, 800692a <sbrk_aligned+0x12>
 8006924:	f000 f88c 	bl	8006a40 <_sbrk_r>
 8006928:	6030      	str	r0, [r6, #0]
 800692a:	4621      	mov	r1, r4
 800692c:	4628      	mov	r0, r5
 800692e:	f000 f887 	bl	8006a40 <_sbrk_r>
 8006932:	1c43      	adds	r3, r0, #1
 8006934:	d00a      	beq.n	800694c <sbrk_aligned+0x34>
 8006936:	1cc4      	adds	r4, r0, #3
 8006938:	f024 0403 	bic.w	r4, r4, #3
 800693c:	42a0      	cmp	r0, r4
 800693e:	d007      	beq.n	8006950 <sbrk_aligned+0x38>
 8006940:	1a21      	subs	r1, r4, r0
 8006942:	4628      	mov	r0, r5
 8006944:	f000 f87c 	bl	8006a40 <_sbrk_r>
 8006948:	3001      	adds	r0, #1
 800694a:	d101      	bne.n	8006950 <sbrk_aligned+0x38>
 800694c:	f04f 34ff 	mov.w	r4, #4294967295
 8006950:	4620      	mov	r0, r4
 8006952:	bd70      	pop	{r4, r5, r6, pc}
 8006954:	200003d4 	.word	0x200003d4

08006958 <_malloc_r>:
 8006958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800695c:	1ccd      	adds	r5, r1, #3
 800695e:	f025 0503 	bic.w	r5, r5, #3
 8006962:	3508      	adds	r5, #8
 8006964:	2d0c      	cmp	r5, #12
 8006966:	bf38      	it	cc
 8006968:	250c      	movcc	r5, #12
 800696a:	2d00      	cmp	r5, #0
 800696c:	4607      	mov	r7, r0
 800696e:	db01      	blt.n	8006974 <_malloc_r+0x1c>
 8006970:	42a9      	cmp	r1, r5
 8006972:	d905      	bls.n	8006980 <_malloc_r+0x28>
 8006974:	230c      	movs	r3, #12
 8006976:	2600      	movs	r6, #0
 8006978:	603b      	str	r3, [r7, #0]
 800697a:	4630      	mov	r0, r6
 800697c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006980:	4e2e      	ldr	r6, [pc, #184]	; (8006a3c <_malloc_r+0xe4>)
 8006982:	f000 f94b 	bl	8006c1c <__malloc_lock>
 8006986:	6833      	ldr	r3, [r6, #0]
 8006988:	461c      	mov	r4, r3
 800698a:	bb34      	cbnz	r4, 80069da <_malloc_r+0x82>
 800698c:	4629      	mov	r1, r5
 800698e:	4638      	mov	r0, r7
 8006990:	f7ff ffc2 	bl	8006918 <sbrk_aligned>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	4604      	mov	r4, r0
 8006998:	d14d      	bne.n	8006a36 <_malloc_r+0xde>
 800699a:	6834      	ldr	r4, [r6, #0]
 800699c:	4626      	mov	r6, r4
 800699e:	2e00      	cmp	r6, #0
 80069a0:	d140      	bne.n	8006a24 <_malloc_r+0xcc>
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	4631      	mov	r1, r6
 80069a6:	4638      	mov	r0, r7
 80069a8:	eb04 0803 	add.w	r8, r4, r3
 80069ac:	f000 f848 	bl	8006a40 <_sbrk_r>
 80069b0:	4580      	cmp	r8, r0
 80069b2:	d13a      	bne.n	8006a2a <_malloc_r+0xd2>
 80069b4:	6821      	ldr	r1, [r4, #0]
 80069b6:	3503      	adds	r5, #3
 80069b8:	1a6d      	subs	r5, r5, r1
 80069ba:	f025 0503 	bic.w	r5, r5, #3
 80069be:	3508      	adds	r5, #8
 80069c0:	2d0c      	cmp	r5, #12
 80069c2:	bf38      	it	cc
 80069c4:	250c      	movcc	r5, #12
 80069c6:	4638      	mov	r0, r7
 80069c8:	4629      	mov	r1, r5
 80069ca:	f7ff ffa5 	bl	8006918 <sbrk_aligned>
 80069ce:	3001      	adds	r0, #1
 80069d0:	d02b      	beq.n	8006a2a <_malloc_r+0xd2>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	442b      	add	r3, r5
 80069d6:	6023      	str	r3, [r4, #0]
 80069d8:	e00e      	b.n	80069f8 <_malloc_r+0xa0>
 80069da:	6822      	ldr	r2, [r4, #0]
 80069dc:	1b52      	subs	r2, r2, r5
 80069de:	d41e      	bmi.n	8006a1e <_malloc_r+0xc6>
 80069e0:	2a0b      	cmp	r2, #11
 80069e2:	d916      	bls.n	8006a12 <_malloc_r+0xba>
 80069e4:	1961      	adds	r1, r4, r5
 80069e6:	42a3      	cmp	r3, r4
 80069e8:	6025      	str	r5, [r4, #0]
 80069ea:	bf18      	it	ne
 80069ec:	6059      	strne	r1, [r3, #4]
 80069ee:	6863      	ldr	r3, [r4, #4]
 80069f0:	bf08      	it	eq
 80069f2:	6031      	streq	r1, [r6, #0]
 80069f4:	5162      	str	r2, [r4, r5]
 80069f6:	604b      	str	r3, [r1, #4]
 80069f8:	4638      	mov	r0, r7
 80069fa:	f104 060b 	add.w	r6, r4, #11
 80069fe:	f000 f913 	bl	8006c28 <__malloc_unlock>
 8006a02:	f026 0607 	bic.w	r6, r6, #7
 8006a06:	1d23      	adds	r3, r4, #4
 8006a08:	1af2      	subs	r2, r6, r3
 8006a0a:	d0b6      	beq.n	800697a <_malloc_r+0x22>
 8006a0c:	1b9b      	subs	r3, r3, r6
 8006a0e:	50a3      	str	r3, [r4, r2]
 8006a10:	e7b3      	b.n	800697a <_malloc_r+0x22>
 8006a12:	6862      	ldr	r2, [r4, #4]
 8006a14:	42a3      	cmp	r3, r4
 8006a16:	bf0c      	ite	eq
 8006a18:	6032      	streq	r2, [r6, #0]
 8006a1a:	605a      	strne	r2, [r3, #4]
 8006a1c:	e7ec      	b.n	80069f8 <_malloc_r+0xa0>
 8006a1e:	4623      	mov	r3, r4
 8006a20:	6864      	ldr	r4, [r4, #4]
 8006a22:	e7b2      	b.n	800698a <_malloc_r+0x32>
 8006a24:	4634      	mov	r4, r6
 8006a26:	6876      	ldr	r6, [r6, #4]
 8006a28:	e7b9      	b.n	800699e <_malloc_r+0x46>
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	4638      	mov	r0, r7
 8006a2e:	603b      	str	r3, [r7, #0]
 8006a30:	f000 f8fa 	bl	8006c28 <__malloc_unlock>
 8006a34:	e7a1      	b.n	800697a <_malloc_r+0x22>
 8006a36:	6025      	str	r5, [r4, #0]
 8006a38:	e7de      	b.n	80069f8 <_malloc_r+0xa0>
 8006a3a:	bf00      	nop
 8006a3c:	200003d0 	.word	0x200003d0

08006a40 <_sbrk_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	2300      	movs	r3, #0
 8006a44:	4d05      	ldr	r5, [pc, #20]	; (8006a5c <_sbrk_r+0x1c>)
 8006a46:	4604      	mov	r4, r0
 8006a48:	4608      	mov	r0, r1
 8006a4a:	602b      	str	r3, [r5, #0]
 8006a4c:	f7fb fe5e 	bl	800270c <_sbrk>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	d102      	bne.n	8006a5a <_sbrk_r+0x1a>
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	b103      	cbz	r3, 8006a5a <_sbrk_r+0x1a>
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
 8006a5c:	200003d8 	.word	0x200003d8

08006a60 <_raise_r>:
 8006a60:	291f      	cmp	r1, #31
 8006a62:	b538      	push	{r3, r4, r5, lr}
 8006a64:	4604      	mov	r4, r0
 8006a66:	460d      	mov	r5, r1
 8006a68:	d904      	bls.n	8006a74 <_raise_r+0x14>
 8006a6a:	2316      	movs	r3, #22
 8006a6c:	6003      	str	r3, [r0, #0]
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a76:	b112      	cbz	r2, 8006a7e <_raise_r+0x1e>
 8006a78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a7c:	b94b      	cbnz	r3, 8006a92 <_raise_r+0x32>
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f000 f830 	bl	8006ae4 <_getpid_r>
 8006a84:	462a      	mov	r2, r5
 8006a86:	4601      	mov	r1, r0
 8006a88:	4620      	mov	r0, r4
 8006a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a8e:	f000 b817 	b.w	8006ac0 <_kill_r>
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d00a      	beq.n	8006aac <_raise_r+0x4c>
 8006a96:	1c59      	adds	r1, r3, #1
 8006a98:	d103      	bne.n	8006aa2 <_raise_r+0x42>
 8006a9a:	2316      	movs	r3, #22
 8006a9c:	6003      	str	r3, [r0, #0]
 8006a9e:	2001      	movs	r0, #1
 8006aa0:	e7e7      	b.n	8006a72 <_raise_r+0x12>
 8006aa2:	2400      	movs	r4, #0
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006aaa:	4798      	blx	r3
 8006aac:	2000      	movs	r0, #0
 8006aae:	e7e0      	b.n	8006a72 <_raise_r+0x12>

08006ab0 <raise>:
 8006ab0:	4b02      	ldr	r3, [pc, #8]	; (8006abc <raise+0xc>)
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	f7ff bfd3 	b.w	8006a60 <_raise_r>
 8006aba:	bf00      	nop
 8006abc:	20000010 	.word	0x20000010

08006ac0 <_kill_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	4d06      	ldr	r5, [pc, #24]	; (8006ae0 <_kill_r+0x20>)
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	4611      	mov	r1, r2
 8006acc:	602b      	str	r3, [r5, #0]
 8006ace:	f7fb fd9a 	bl	8002606 <_kill>
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	d102      	bne.n	8006adc <_kill_r+0x1c>
 8006ad6:	682b      	ldr	r3, [r5, #0]
 8006ad8:	b103      	cbz	r3, 8006adc <_kill_r+0x1c>
 8006ada:	6023      	str	r3, [r4, #0]
 8006adc:	bd38      	pop	{r3, r4, r5, pc}
 8006ade:	bf00      	nop
 8006ae0:	200003d8 	.word	0x200003d8

08006ae4 <_getpid_r>:
 8006ae4:	f7fb bd88 	b.w	80025f8 <_getpid>

08006ae8 <__sread>:
 8006ae8:	b510      	push	{r4, lr}
 8006aea:	460c      	mov	r4, r1
 8006aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af0:	f000 f8a0 	bl	8006c34 <_read_r>
 8006af4:	2800      	cmp	r0, #0
 8006af6:	bfab      	itete	ge
 8006af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006afa:	89a3      	ldrhlt	r3, [r4, #12]
 8006afc:	181b      	addge	r3, r3, r0
 8006afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006b02:	bfac      	ite	ge
 8006b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8006b06:	81a3      	strhlt	r3, [r4, #12]
 8006b08:	bd10      	pop	{r4, pc}

08006b0a <__swrite>:
 8006b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0e:	461f      	mov	r7, r3
 8006b10:	898b      	ldrh	r3, [r1, #12]
 8006b12:	4605      	mov	r5, r0
 8006b14:	05db      	lsls	r3, r3, #23
 8006b16:	460c      	mov	r4, r1
 8006b18:	4616      	mov	r6, r2
 8006b1a:	d505      	bpl.n	8006b28 <__swrite+0x1e>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b24:	f000 f868 	bl	8006bf8 <_lseek_r>
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	4632      	mov	r2, r6
 8006b2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b30:	81a3      	strh	r3, [r4, #12]
 8006b32:	4628      	mov	r0, r5
 8006b34:	463b      	mov	r3, r7
 8006b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b3e:	f000 b817 	b.w	8006b70 <_write_r>

08006b42 <__sseek>:
 8006b42:	b510      	push	{r4, lr}
 8006b44:	460c      	mov	r4, r1
 8006b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b4a:	f000 f855 	bl	8006bf8 <_lseek_r>
 8006b4e:	1c43      	adds	r3, r0, #1
 8006b50:	89a3      	ldrh	r3, [r4, #12]
 8006b52:	bf15      	itete	ne
 8006b54:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b5e:	81a3      	strheq	r3, [r4, #12]
 8006b60:	bf18      	it	ne
 8006b62:	81a3      	strhne	r3, [r4, #12]
 8006b64:	bd10      	pop	{r4, pc}

08006b66 <__sclose>:
 8006b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b6a:	f000 b813 	b.w	8006b94 <_close_r>
	...

08006b70 <_write_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	4604      	mov	r4, r0
 8006b74:	4608      	mov	r0, r1
 8006b76:	4611      	mov	r1, r2
 8006b78:	2200      	movs	r2, #0
 8006b7a:	4d05      	ldr	r5, [pc, #20]	; (8006b90 <_write_r+0x20>)
 8006b7c:	602a      	str	r2, [r5, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f7fb fd78 	bl	8002674 <_write>
 8006b84:	1c43      	adds	r3, r0, #1
 8006b86:	d102      	bne.n	8006b8e <_write_r+0x1e>
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	b103      	cbz	r3, 8006b8e <_write_r+0x1e>
 8006b8c:	6023      	str	r3, [r4, #0]
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	200003d8 	.word	0x200003d8

08006b94 <_close_r>:
 8006b94:	b538      	push	{r3, r4, r5, lr}
 8006b96:	2300      	movs	r3, #0
 8006b98:	4d05      	ldr	r5, [pc, #20]	; (8006bb0 <_close_r+0x1c>)
 8006b9a:	4604      	mov	r4, r0
 8006b9c:	4608      	mov	r0, r1
 8006b9e:	602b      	str	r3, [r5, #0]
 8006ba0:	f7fb fd84 	bl	80026ac <_close>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	d102      	bne.n	8006bae <_close_r+0x1a>
 8006ba8:	682b      	ldr	r3, [r5, #0]
 8006baa:	b103      	cbz	r3, 8006bae <_close_r+0x1a>
 8006bac:	6023      	str	r3, [r4, #0]
 8006bae:	bd38      	pop	{r3, r4, r5, pc}
 8006bb0:	200003d8 	.word	0x200003d8

08006bb4 <_fstat_r>:
 8006bb4:	b538      	push	{r3, r4, r5, lr}
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	4d06      	ldr	r5, [pc, #24]	; (8006bd4 <_fstat_r+0x20>)
 8006bba:	4604      	mov	r4, r0
 8006bbc:	4608      	mov	r0, r1
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	602b      	str	r3, [r5, #0]
 8006bc2:	f7fb fd7e 	bl	80026c2 <_fstat>
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	d102      	bne.n	8006bd0 <_fstat_r+0x1c>
 8006bca:	682b      	ldr	r3, [r5, #0]
 8006bcc:	b103      	cbz	r3, 8006bd0 <_fstat_r+0x1c>
 8006bce:	6023      	str	r3, [r4, #0]
 8006bd0:	bd38      	pop	{r3, r4, r5, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200003d8 	.word	0x200003d8

08006bd8 <_isatty_r>:
 8006bd8:	b538      	push	{r3, r4, r5, lr}
 8006bda:	2300      	movs	r3, #0
 8006bdc:	4d05      	ldr	r5, [pc, #20]	; (8006bf4 <_isatty_r+0x1c>)
 8006bde:	4604      	mov	r4, r0
 8006be0:	4608      	mov	r0, r1
 8006be2:	602b      	str	r3, [r5, #0]
 8006be4:	f7fb fd7c 	bl	80026e0 <_isatty>
 8006be8:	1c43      	adds	r3, r0, #1
 8006bea:	d102      	bne.n	8006bf2 <_isatty_r+0x1a>
 8006bec:	682b      	ldr	r3, [r5, #0]
 8006bee:	b103      	cbz	r3, 8006bf2 <_isatty_r+0x1a>
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	bd38      	pop	{r3, r4, r5, pc}
 8006bf4:	200003d8 	.word	0x200003d8

08006bf8 <_lseek_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	4611      	mov	r1, r2
 8006c00:	2200      	movs	r2, #0
 8006c02:	4d05      	ldr	r5, [pc, #20]	; (8006c18 <_lseek_r+0x20>)
 8006c04:	602a      	str	r2, [r5, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	f7fb fd74 	bl	80026f4 <_lseek>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_lseek_r+0x1e>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_lseek_r+0x1e>
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	200003d8 	.word	0x200003d8

08006c1c <__malloc_lock>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	; (8006c24 <__malloc_lock+0x8>)
 8006c1e:	f7ff bdbd 	b.w	800679c <__retarget_lock_acquire_recursive>
 8006c22:	bf00      	nop
 8006c24:	200003cc 	.word	0x200003cc

08006c28 <__malloc_unlock>:
 8006c28:	4801      	ldr	r0, [pc, #4]	; (8006c30 <__malloc_unlock+0x8>)
 8006c2a:	f7ff bdb8 	b.w	800679e <__retarget_lock_release_recursive>
 8006c2e:	bf00      	nop
 8006c30:	200003cc 	.word	0x200003cc

08006c34 <_read_r>:
 8006c34:	b538      	push	{r3, r4, r5, lr}
 8006c36:	4604      	mov	r4, r0
 8006c38:	4608      	mov	r0, r1
 8006c3a:	4611      	mov	r1, r2
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	4d05      	ldr	r5, [pc, #20]	; (8006c54 <_read_r+0x20>)
 8006c40:	602a      	str	r2, [r5, #0]
 8006c42:	461a      	mov	r2, r3
 8006c44:	f7fb fcf9 	bl	800263a <_read>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	d102      	bne.n	8006c52 <_read_r+0x1e>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	b103      	cbz	r3, 8006c52 <_read_r+0x1e>
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	200003d8 	.word	0x200003d8

08006c58 <roundf>:
 8006c58:	b508      	push	{r3, lr}
 8006c5a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8006c5e:	3b7f      	subs	r3, #127	; 0x7f
 8006c60:	2b16      	cmp	r3, #22
 8006c62:	4601      	mov	r1, r0
 8006c64:	4602      	mov	r2, r0
 8006c66:	dc14      	bgt.n	8006c92 <roundf+0x3a>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	da07      	bge.n	8006c7c <roundf+0x24>
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8006c72:	d101      	bne.n	8006c78 <roundf+0x20>
 8006c74:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8006c78:	4608      	mov	r0, r1
 8006c7a:	bd08      	pop	{r3, pc}
 8006c7c:	4808      	ldr	r0, [pc, #32]	; (8006ca0 <roundf+0x48>)
 8006c7e:	4118      	asrs	r0, r3
 8006c80:	4201      	tst	r1, r0
 8006c82:	d0f9      	beq.n	8006c78 <roundf+0x20>
 8006c84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c88:	4119      	asrs	r1, r3
 8006c8a:	4411      	add	r1, r2
 8006c8c:	ea21 0100 	bic.w	r1, r1, r0
 8006c90:	e7f2      	b.n	8006c78 <roundf+0x20>
 8006c92:	2b80      	cmp	r3, #128	; 0x80
 8006c94:	d1f0      	bne.n	8006c78 <roundf+0x20>
 8006c96:	f7f9 fe7f 	bl	8000998 <__addsf3>
 8006c9a:	4601      	mov	r1, r0
 8006c9c:	e7ec      	b.n	8006c78 <roundf+0x20>
 8006c9e:	bf00      	nop
 8006ca0:	007fffff 	.word	0x007fffff

08006ca4 <_init>:
 8006ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ca6:	bf00      	nop
 8006ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006caa:	bc08      	pop	{r3}
 8006cac:	469e      	mov	lr, r3
 8006cae:	4770      	bx	lr

08006cb0 <_fini>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	bf00      	nop
 8006cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cb6:	bc08      	pop	{r3}
 8006cb8:	469e      	mov	lr, r3
 8006cba:	4770      	bx	lr
