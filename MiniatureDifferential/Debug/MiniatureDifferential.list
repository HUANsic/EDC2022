
MiniatureDifferential.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005030  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800529c  0800529c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800529c  0800529c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800529c  0800529c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000070  08005314  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08005314  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb6e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002112  00000000  00000000  0002ec07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00030d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  00031cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d9b  00000000  00000000  00032c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011662  00000000  00000000  000359bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ef60  00000000  00000000  0004701d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d5f7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d14  00000000  00000000  000d5fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005124 	.word	0x08005124

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005124 	.word	0x08005124

0800014c <__gesf2>:
 800014c:	f04f 3cff 	mov.w	ip, #4294967295
 8000150:	e006      	b.n	8000160 <__cmpsf2+0x4>
 8000152:	bf00      	nop

08000154 <__lesf2>:
 8000154:	f04f 0c01 	mov.w	ip, #1
 8000158:	e002      	b.n	8000160 <__cmpsf2+0x4>
 800015a:	bf00      	nop

0800015c <__cmpsf2>:
 800015c:	f04f 0c01 	mov.w	ip, #1
 8000160:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000164:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000168:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800016c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000170:	bf18      	it	ne
 8000172:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000176:	d011      	beq.n	800019c <__cmpsf2+0x40>
 8000178:	b001      	add	sp, #4
 800017a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800017e:	bf18      	it	ne
 8000180:	ea90 0f01 	teqne	r0, r1
 8000184:	bf58      	it	pl
 8000186:	ebb2 0003 	subspl.w	r0, r2, r3
 800018a:	bf88      	it	hi
 800018c:	17c8      	asrhi	r0, r1, #31
 800018e:	bf38      	it	cc
 8000190:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000194:	bf18      	it	ne
 8000196:	f040 0001 	orrne.w	r0, r0, #1
 800019a:	4770      	bx	lr
 800019c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80001a0:	d102      	bne.n	80001a8 <__cmpsf2+0x4c>
 80001a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80001a6:	d105      	bne.n	80001b4 <__cmpsf2+0x58>
 80001a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80001ac:	d1e4      	bne.n	8000178 <__cmpsf2+0x1c>
 80001ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80001b2:	d0e1      	beq.n	8000178 <__cmpsf2+0x1c>
 80001b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <__aeabi_cfrcmple>:
 80001bc:	4684      	mov	ip, r0
 80001be:	4608      	mov	r0, r1
 80001c0:	4661      	mov	r1, ip
 80001c2:	e7ff      	b.n	80001c4 <__aeabi_cfcmpeq>

080001c4 <__aeabi_cfcmpeq>:
 80001c4:	b50f      	push	{r0, r1, r2, r3, lr}
 80001c6:	f7ff ffc9 	bl	800015c <__cmpsf2>
 80001ca:	2800      	cmp	r0, #0
 80001cc:	bf48      	it	mi
 80001ce:	f110 0f00 	cmnmi.w	r0, #0
 80001d2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080001d4 <__aeabi_fcmpeq>:
 80001d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001d8:	f7ff fff4 	bl	80001c4 <__aeabi_cfcmpeq>
 80001dc:	bf0c      	ite	eq
 80001de:	2001      	moveq	r0, #1
 80001e0:	2000      	movne	r0, #0
 80001e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80001e6:	bf00      	nop

080001e8 <__aeabi_fcmplt>:
 80001e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001ec:	f7ff ffea 	bl	80001c4 <__aeabi_cfcmpeq>
 80001f0:	bf34      	ite	cc
 80001f2:	2001      	movcc	r0, #1
 80001f4:	2000      	movcs	r0, #0
 80001f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80001fa:	bf00      	nop

080001fc <__aeabi_fcmple>:
 80001fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000200:	f7ff ffe0 	bl	80001c4 <__aeabi_cfcmpeq>
 8000204:	bf94      	ite	ls
 8000206:	2001      	movls	r0, #1
 8000208:	2000      	movhi	r0, #0
 800020a:	f85d fb08 	ldr.w	pc, [sp], #8
 800020e:	bf00      	nop

08000210 <__aeabi_fcmpge>:
 8000210:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000214:	f7ff ffd2 	bl	80001bc <__aeabi_cfrcmple>
 8000218:	bf94      	ite	ls
 800021a:	2001      	movls	r0, #1
 800021c:	2000      	movhi	r0, #0
 800021e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000222:	bf00      	nop

08000224 <__aeabi_fcmpgt>:
 8000224:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000228:	f7ff ffc8 	bl	80001bc <__aeabi_cfrcmple>
 800022c:	bf34      	ite	cc
 800022e:	2001      	movcc	r0, #1
 8000230:	2000      	movcs	r0, #0
 8000232:	f85d fb08 	ldr.w	pc, [sp], #8
 8000236:	bf00      	nop

08000238 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d105      	bne.n	8000254 <huansic_motor_init+0x1c>
 8000248:	4b55      	ldr	r3, [pc, #340]	; (80003a0 <huansic_motor_init+0x168>)
 800024a:	4a56      	ldr	r2, [pc, #344]	; (80003a4 <huansic_motor_init+0x16c>)
 800024c:	210c      	movs	r1, #12
 800024e:	4856      	ldr	r0, [pc, #344]	; (80003a8 <huansic_motor_init+0x170>)
 8000250:	f003 ff3e 	bl	80040d0 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d105      	bne.n	8000268 <huansic_motor_init+0x30>
 800025c:	4b53      	ldr	r3, [pc, #332]	; (80003ac <huansic_motor_init+0x174>)
 800025e:	4a51      	ldr	r2, [pc, #324]	; (80003a4 <huansic_motor_init+0x16c>)
 8000260:	210d      	movs	r1, #13
 8000262:	4851      	ldr	r0, [pc, #324]	; (80003a8 <huansic_motor_init+0x170>)
 8000264:	f003 ff34 	bl	80040d0 <__assert_func>
	assert(hmotor->dt);
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	f04f 0100 	mov.w	r1, #0
 8000270:	4618      	mov	r0, r3
 8000272:	f7ff ffaf 	bl	80001d4 <__aeabi_fcmpeq>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d005      	beq.n	8000288 <huansic_motor_init+0x50>
 800027c:	4b4c      	ldr	r3, [pc, #304]	; (80003b0 <huansic_motor_init+0x178>)
 800027e:	4a49      	ldr	r2, [pc, #292]	; (80003a4 <huansic_motor_init+0x16c>)
 8000280:	210e      	movs	r1, #14
 8000282:	4849      	ldr	r0, [pc, #292]	; (80003a8 <huansic_motor_init+0x170>)
 8000284:	f003 ff24 	bl	80040d0 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	2200      	movs	r2, #0
 800028c:	625a      	str	r2, [r3, #36]	; 0x24
	hmotor->lastError = 0;
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	f04f 0200 	mov.w	r2, #0
 8000294:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	f04f 0200 	mov.w	r2, #0
 800029c:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f04f 0200 	mov.w	r2, #0
 80002a4:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f04f 0200 	mov.w	r2, #0
 80002ac:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f04f 0200 	mov.w	r2, #0
 80002b4:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2200      	movs	r2, #0
 80002be:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	68db      	ldr	r3, [r3, #12]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d105      	bne.n	80002d4 <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	685b      	ldr	r3, [r3, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	2200      	movs	r2, #0
 80002d0:	635a      	str	r2, [r3, #52]	; 0x34
 80002d2:	e01c      	b.n	800030e <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	2b04      	cmp	r3, #4
 80002da:	d105      	bne.n	80002e8 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	2200      	movs	r2, #0
 80002e4:	639a      	str	r2, [r3, #56]	; 0x38
 80002e6:	e012      	b.n	800030e <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	2b08      	cmp	r3, #8
 80002ee:	d105      	bne.n	80002fc <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2200      	movs	r2, #0
 80002f8:	63da      	str	r2, [r3, #60]	; 0x3c
 80002fa:	e008      	b.n	800030e <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	68db      	ldr	r3, [r3, #12]
 8000300:	2b0c      	cmp	r3, #12
 8000302:	d104      	bne.n	800030e <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	685b      	ldr	r3, [r3, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2200      	movs	r2, #0
 800030c:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d026      	beq.n	8000364 <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	691b      	ldr	r3, [r3, #16]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d105      	bne.n	800032a <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2200      	movs	r2, #0
 8000326:	635a      	str	r2, [r3, #52]	; 0x34
 8000328:	e01c      	b.n	8000364 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	691b      	ldr	r3, [r3, #16]
 800032e:	2b04      	cmp	r3, #4
 8000330:	d105      	bne.n	800033e <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	689b      	ldr	r3, [r3, #8]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	2200      	movs	r2, #0
 800033a:	639a      	str	r2, [r3, #56]	; 0x38
 800033c:	e012      	b.n	8000364 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	691b      	ldr	r3, [r3, #16]
 8000342:	2b08      	cmp	r3, #8
 8000344:	d105      	bne.n	8000352 <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2200      	movs	r2, #0
 800034e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000350:	e008      	b.n	8000364 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	691b      	ldr	r3, [r3, #16]
 8000356:	2b0c      	cmp	r3, #12
 8000358:	d104      	bne.n	8000364 <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	689b      	ldr	r3, [r3, #8]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2200      	movs	r2, #0
 8000362:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	213c      	movs	r1, #60	; 0x3c
 800036a:	4618      	mov	r0, r3
 800036c:	f002 fc5a 	bl	8002c24 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	685a      	ldr	r2, [r3, #4]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4619      	mov	r1, r3
 800037a:	4610      	mov	r0, r2
 800037c:	f002 fb0e 	bl	800299c <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d007      	beq.n	8000398 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	689a      	ldr	r2, [r3, #8]
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	691b      	ldr	r3, [r3, #16]
 8000390:	4619      	mov	r1, r3
 8000392:	4610      	mov	r0, r2
 8000394:	f002 fb02 	bl	800299c <HAL_TIM_PWM_Start>
}
 8000398:	bf00      	nop
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	0800513c 	.word	0x0800513c
 80003a4:	0800519c 	.word	0x0800519c
 80003a8:	0800514c 	.word	0x0800514c
 80003ac:	0800516c 	.word	0x0800516c
 80003b0:	08005180 	.word	0x08005180

080003b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b8:	f000 ff3e 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003bc:	f000 f8a6 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c0:	f000 fb22 	bl	8000a08 <MX_GPIO_Init>
  MX_DMA_Init();
 80003c4:	f000 fafa 	bl	80009bc <MX_DMA_Init>
  MX_I2C1_Init();
 80003c8:	f000 f8e6 	bl	8000598 <MX_I2C1_Init>
  MX_TIM1_Init();
 80003cc:	f000 f912 	bl	80005f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003d0:	f000 f960 	bl	8000694 <MX_TIM2_Init>
  MX_TIM3_Init();
 80003d4:	f000 f9b2 	bl	800073c <MX_TIM3_Init>
  MX_TIM4_Init();
 80003d8:	f000 fa48 	bl	800086c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80003dc:	f000 fac4 	bl	8000968 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80003e0:	f000 fa98 	bl	8000914 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	RED_LED_ON;
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ea:	4840      	ldr	r0, [pc, #256]	; (80004ec <main+0x138>)
 80003ec:	f001 fc4c 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80003f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80003f4:	f000 ff82 	bl	80012fc <HAL_Delay>
	RED_LED_OFF;
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003fe:	483b      	ldr	r0, [pc, #236]	; (80004ec <main+0x138>)
 8000400:	f001 fc42 	bl	8001c88 <HAL_GPIO_WritePin>

	leftMotor.counter = &htim2;
 8000404:	4b3a      	ldr	r3, [pc, #232]	; (80004f0 <main+0x13c>)
 8000406:	4a3b      	ldr	r2, [pc, #236]	; (80004f4 <main+0x140>)
 8000408:	601a      	str	r2, [r3, #0]
	leftMotor.dt = 0.02;
 800040a:	4b39      	ldr	r3, [pc, #228]	; (80004f0 <main+0x13c>)
 800040c:	4a3a      	ldr	r2, [pc, #232]	; (80004f8 <main+0x144>)
 800040e:	621a      	str	r2, [r3, #32]
	leftMotor.posTimer = &htim3;
 8000410:	4b37      	ldr	r3, [pc, #220]	; (80004f0 <main+0x13c>)
 8000412:	4a3a      	ldr	r2, [pc, #232]	; (80004fc <main+0x148>)
 8000414:	605a      	str	r2, [r3, #4]
	leftMotor.pos_channel = TIM_CHANNEL_1;
 8000416:	4b36      	ldr	r3, [pc, #216]	; (80004f0 <main+0x13c>)
 8000418:	2200      	movs	r2, #0
 800041a:	60da      	str	r2, [r3, #12]
	leftMotor.negTimer = &htim3;
 800041c:	4b34      	ldr	r3, [pc, #208]	; (80004f0 <main+0x13c>)
 800041e:	4a37      	ldr	r2, [pc, #220]	; (80004fc <main+0x148>)
 8000420:	609a      	str	r2, [r3, #8]
	leftMotor.neg_channel = TIM_CHANNEL_2;
 8000422:	4b33      	ldr	r3, [pc, #204]	; (80004f0 <main+0x13c>)
 8000424:	2204      	movs	r2, #4
 8000426:	611a      	str	r2, [r3, #16]
	huansic_motor_init(&leftMotor);
 8000428:	4831      	ldr	r0, [pc, #196]	; (80004f0 <main+0x13c>)
 800042a:	f7ff ff05 	bl	8000238 <huansic_motor_init>

	rightMotor.counter = &htim4;
 800042e:	4b34      	ldr	r3, [pc, #208]	; (8000500 <main+0x14c>)
 8000430:	4a34      	ldr	r2, [pc, #208]	; (8000504 <main+0x150>)
 8000432:	601a      	str	r2, [r3, #0]
	rightMotor.dt = 0.02;
 8000434:	4b32      	ldr	r3, [pc, #200]	; (8000500 <main+0x14c>)
 8000436:	4a30      	ldr	r2, [pc, #192]	; (80004f8 <main+0x144>)
 8000438:	621a      	str	r2, [r3, #32]
	rightMotor.posTimer = &htim3;
 800043a:	4b31      	ldr	r3, [pc, #196]	; (8000500 <main+0x14c>)
 800043c:	4a2f      	ldr	r2, [pc, #188]	; (80004fc <main+0x148>)
 800043e:	605a      	str	r2, [r3, #4]
	rightMotor.pos_channel = TIM_CHANNEL_3;
 8000440:	4b2f      	ldr	r3, [pc, #188]	; (8000500 <main+0x14c>)
 8000442:	2208      	movs	r2, #8
 8000444:	60da      	str	r2, [r3, #12]
	rightMotor.negTimer = &htim3;
 8000446:	4b2e      	ldr	r3, [pc, #184]	; (8000500 <main+0x14c>)
 8000448:	4a2c      	ldr	r2, [pc, #176]	; (80004fc <main+0x148>)
 800044a:	609a      	str	r2, [r3, #8]
	rightMotor.neg_channel = TIM_CHANNEL_4;
 800044c:	4b2c      	ldr	r3, [pc, #176]	; (8000500 <main+0x14c>)
 800044e:	220c      	movs	r2, #12
 8000450:	611a      	str	r2, [r3, #16]
	huansic_motor_init(&rightMotor);
 8000452:	482b      	ldr	r0, [pc, #172]	; (8000500 <main+0x14c>)
 8000454:	f7ff fef0 	bl	8000238 <huansic_motor_init>

	RED_LED_ON;
 8000458:	2201      	movs	r2, #1
 800045a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800045e:	4823      	ldr	r0, [pc, #140]	; (80004ec <main+0x138>)
 8000460:	f001 fc12 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000464:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000468:	f000 ff48 	bl	80012fc <HAL_Delay>
	RED_LED_OFF;
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000472:	481e      	ldr	r0, [pc, #120]	; (80004ec <main+0x138>)
 8000474:	f001 fc08 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000478:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800047c:	f000 ff3e 	bl	80012fc <HAL_Delay>

	RED_LED_ON;
 8000480:	2201      	movs	r2, #1
 8000482:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000486:	4819      	ldr	r0, [pc, #100]	; (80004ec <main+0x138>)
 8000488:	f001 fbfe 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800048c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000490:	f000 ff34 	bl	80012fc <HAL_Delay>
	RED_LED_OFF;
 8000494:	2200      	movs	r2, #0
 8000496:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800049a:	4814      	ldr	r0, [pc, #80]	; (80004ec <main+0x138>)
 800049c:	f001 fbf4 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80004a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a4:	f000 ff2a 	bl	80012fc <HAL_Delay>

	HAL_TIM_Base_Start_IT(&htim1);
 80004a8:	4817      	ldr	r0, [pc, #92]	; (8000508 <main+0x154>)
 80004aa:	f002 f9cd 	bl	8002848 <HAL_TIM_Base_Start_IT>

	RED_LED_ON;
 80004ae:	2201      	movs	r2, #1
 80004b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004b4:	480d      	ldr	r0, [pc, #52]	; (80004ec <main+0x138>)
 80004b6:	f001 fbe7 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_Delay(4000);
 80004ba:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80004be:	f000 ff1d 	bl	80012fc <HAL_Delay>
	RED_LED_OFF;
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004c8:	4808      	ldr	r0, [pc, #32]	; (80004ec <main+0x138>)
 80004ca:	f001 fbdd 	bl	8001c88 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80004ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004d2:	f000 ff13 	bl	80012fc <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		GREEN_LED_TOGGLE;
 80004d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004da:	4804      	ldr	r0, [pc, #16]	; (80004ec <main+0x138>)
 80004dc:	f001 fbec 	bl	8001cb8 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80004e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80004e4:	f000 ff0a 	bl	80012fc <HAL_Delay>
		GREEN_LED_TOGGLE;
 80004e8:	e7f5      	b.n	80004d6 <main+0x122>
 80004ea:	bf00      	nop
 80004ec:	40010c00 	.word	0x40010c00
 80004f0:	20000310 	.word	0x20000310
 80004f4:	20000128 	.word	0x20000128
 80004f8:	3ca3d70a 	.word	0x3ca3d70a
 80004fc:	20000170 	.word	0x20000170
 8000500:	2000034c 	.word	0x2000034c
 8000504:	200001b8 	.word	0x200001b8
 8000508:	200000e0 	.word	0x200000e0

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b090      	sub	sp, #64	; 0x40
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0318 	add.w	r3, r7, #24
 8000516:	2228      	movs	r2, #40	; 0x28
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f003 fe32 	bl	8004184 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052e:	2301      	movs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000536:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053c:	2301      	movs	r3, #1
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000540:	2302      	movs	r3, #2
 8000542:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800054a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800054e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f107 0318 	add.w	r3, r7, #24
 8000554:	4618      	mov	r0, r3
 8000556:	f001 fd0d 	bl	8001f74 <HAL_RCC_OscConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000560:	f000 fa9e 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	230f      	movs	r3, #15
 8000566:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000568:	2302      	movs	r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2102      	movs	r1, #2
 800057e:	4618      	mov	r0, r3
 8000580:	f001 ff7a 	bl	8002478 <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800058a:	f000 fa89 	bl	8000aa0 <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3740      	adds	r7, #64	; 0x40
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <MX_I2C1_Init+0x50>)
 800059e:	4a13      	ldr	r2, [pc, #76]	; (80005ec <MX_I2C1_Init+0x54>)
 80005a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005a4:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <MX_I2C1_Init+0x58>)
 80005a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005be:	2200      	movs	r2, #0
 80005c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005d6:	f001 fb89 	bl	8001cec <HAL_I2C_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005e0:	f000 fa5e 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	40005400 	.word	0x40005400
 80005f0:	000186a0 	.word	0x000186a0

080005f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000608:	463b      	mov	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_TIM1_Init+0x98>)
 8000612:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <MX_TIM1_Init+0x9c>)
 8000614:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 8000616:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_TIM1_Init+0x98>)
 8000618:	2247      	movs	r2, #71	; 0x47
 800061a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <MX_TIM1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000 - 1;
 8000622:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_TIM1_Init+0x98>)
 8000624:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000628:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800062a:	4b18      	ldr	r3, [pc, #96]	; (800068c <MX_TIM1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000630:	4b16      	ldr	r3, [pc, #88]	; (800068c <MX_TIM1_Init+0x98>)
 8000632:	2200      	movs	r2, #0
 8000634:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_TIM1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800063c:	4813      	ldr	r0, [pc, #76]	; (800068c <MX_TIM1_Init+0x98>)
 800063e:	f002 f8b3 	bl	80027a8 <HAL_TIM_Base_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000648:	f000 fa2a 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000652:	f107 0308 	add.w	r3, r7, #8
 8000656:	4619      	mov	r1, r3
 8000658:	480c      	ldr	r0, [pc, #48]	; (800068c <MX_TIM1_Init+0x98>)
 800065a:	f002 fd37 	bl	80030cc <HAL_TIM_ConfigClockSource>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000664:	f000 fa1c 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000668:	2300      	movs	r3, #0
 800066a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066c:	2300      	movs	r3, #0
 800066e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_TIM1_Init+0x98>)
 8000676:	f003 f8bf 	bl	80037f8 <HAL_TIMEx_MasterConfigSynchronization>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000680:	f000 fa0e 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200000e0 	.word	0x200000e0
 8000690:	40012c00 	.word	0x40012c00

08000694 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	; 0x30
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	2224      	movs	r2, #36	; 0x24
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fd6e 	bl	8004184 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006b0:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_TIM2_Init+0xa4>)
 80006b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <MX_TIM2_Init+0xa4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <MX_TIM2_Init+0xa4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80006c4:	4b1c      	ldr	r3, [pc, #112]	; (8000738 <MX_TIM2_Init+0xa4>)
 80006c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006cc:	4b1a      	ldr	r3, [pc, #104]	; (8000738 <MX_TIM2_Init+0xa4>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d2:	4b19      	ldr	r3, [pc, #100]	; (8000738 <MX_TIM2_Init+0xa4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80006d8:	2301      	movs	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006e0:	2301      	movs	r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006f0:	2301      	movs	r3, #1
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	4619      	mov	r1, r3
 8000702:	480d      	ldr	r0, [pc, #52]	; (8000738 <MX_TIM2_Init+0xa4>)
 8000704:	f002 f9ec 	bl	8002ae0 <HAL_TIM_Encoder_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800070e:	f000 f9c7 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000712:	2300      	movs	r3, #0
 8000714:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4619      	mov	r1, r3
 800071e:	4806      	ldr	r0, [pc, #24]	; (8000738 <MX_TIM2_Init+0xa4>)
 8000720:	f003 f86a 	bl	80037f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800072a:	f000 f9b9 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	3730      	adds	r7, #48	; 0x30
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000128 	.word	0x20000128

0800073c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08e      	sub	sp, #56	; 0x38
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000742:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000750:	f107 0320 	add.w	r3, r7, #32
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
 8000768:	615a      	str	r2, [r3, #20]
 800076a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800076c:	4b3d      	ldr	r3, [pc, #244]	; (8000864 <MX_TIM3_Init+0x128>)
 800076e:	4a3e      	ldr	r2, [pc, #248]	; (8000868 <MX_TIM3_Init+0x12c>)
 8000770:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8000772:	4b3c      	ldr	r3, [pc, #240]	; (8000864 <MX_TIM3_Init+0x128>)
 8000774:	2264      	movs	r2, #100	; 0x64
 8000776:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000778:	4b3a      	ldr	r3, [pc, #232]	; (8000864 <MX_TIM3_Init+0x128>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 72*40 - 1;
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <MX_TIM3_Init+0x128>)
 8000780:	f640 323f 	movw	r2, #2879	; 0xb3f
 8000784:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000786:	4b37      	ldr	r3, [pc, #220]	; (8000864 <MX_TIM3_Init+0x128>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800078c:	4b35      	ldr	r3, [pc, #212]	; (8000864 <MX_TIM3_Init+0x128>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000792:	4834      	ldr	r0, [pc, #208]	; (8000864 <MX_TIM3_Init+0x128>)
 8000794:	f002 f808 	bl	80027a8 <HAL_TIM_Base_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800079e:	f000 f97f 	bl	8000aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ac:	4619      	mov	r1, r3
 80007ae:	482d      	ldr	r0, [pc, #180]	; (8000864 <MX_TIM3_Init+0x128>)
 80007b0:	f002 fc8c 	bl	80030cc <HAL_TIM_ConfigClockSource>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80007ba:	f000 f971 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007be:	4829      	ldr	r0, [pc, #164]	; (8000864 <MX_TIM3_Init+0x128>)
 80007c0:	f002 f894 	bl	80028ec <HAL_TIM_PWM_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80007ca:	f000 f969 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007d6:	f107 0320 	add.w	r3, r7, #32
 80007da:	4619      	mov	r1, r3
 80007dc:	4821      	ldr	r0, [pc, #132]	; (8000864 <MX_TIM3_Init+0x128>)
 80007de:	f003 f80b 	bl	80037f8 <HAL_TIMEx_MasterConfigSynchronization>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80007e8:	f000 f95a 	bl	8000aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ec:	2360      	movs	r3, #96	; 0x60
 80007ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	4619      	mov	r1, r3
 8000802:	4818      	ldr	r0, [pc, #96]	; (8000864 <MX_TIM3_Init+0x128>)
 8000804:	f002 fba4 	bl	8002f50 <HAL_TIM_PWM_ConfigChannel>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800080e:	f000 f947 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2204      	movs	r2, #4
 8000816:	4619      	mov	r1, r3
 8000818:	4812      	ldr	r0, [pc, #72]	; (8000864 <MX_TIM3_Init+0x128>)
 800081a:	f002 fb99 	bl	8002f50 <HAL_TIM_PWM_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000824:	f000 f93c 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2208      	movs	r2, #8
 800082c:	4619      	mov	r1, r3
 800082e:	480d      	ldr	r0, [pc, #52]	; (8000864 <MX_TIM3_Init+0x128>)
 8000830:	f002 fb8e 	bl	8002f50 <HAL_TIM_PWM_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800083a:	f000 f931 	bl	8000aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	220c      	movs	r2, #12
 8000842:	4619      	mov	r1, r3
 8000844:	4807      	ldr	r0, [pc, #28]	; (8000864 <MX_TIM3_Init+0x128>)
 8000846:	f002 fb83 	bl	8002f50 <HAL_TIM_PWM_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000850:	f000 f926 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000854:	4803      	ldr	r0, [pc, #12]	; (8000864 <MX_TIM3_Init+0x128>)
 8000856:	f000 fa5f 	bl	8000d18 <HAL_TIM_MspPostInit>

}
 800085a:	bf00      	nop
 800085c:	3738      	adds	r7, #56	; 0x38
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000170 	.word	0x20000170
 8000868:	40000400 	.word	0x40000400

0800086c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	; 0x30
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2224      	movs	r2, #36	; 0x24
 8000878:	2100      	movs	r1, #0
 800087a:	4618      	mov	r0, r3
 800087c:	f003 fc82 	bl	8004184 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000888:	4b20      	ldr	r3, [pc, #128]	; (800090c <MX_TIM4_Init+0xa0>)
 800088a:	4a21      	ldr	r2, [pc, #132]	; (8000910 <MX_TIM4_Init+0xa4>)
 800088c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_TIM4_Init+0xa0>)
 8000890:	2200      	movs	r2, #0
 8000892:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_TIM4_Init+0xa0>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_TIM4_Init+0xa0>)
 800089c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_TIM4_Init+0xa0>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <MX_TIM4_Init+0xa0>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008b6:	2301      	movs	r3, #1
 80008b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008c6:	2301      	movs	r3, #1
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	4619      	mov	r1, r3
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <MX_TIM4_Init+0xa0>)
 80008da:	f002 f901 	bl	8002ae0 <HAL_TIM_Encoder_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 80008e4:	f000 f8dc 	bl	8000aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_TIM4_Init+0xa0>)
 80008f6:	f002 ff7f 	bl	80037f8 <HAL_TIMEx_MasterConfigSynchronization>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000900:	f000 f8ce 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	3730      	adds	r7, #48	; 0x30
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200001b8 	.word	0x200001b8
 8000910:	40000800 	.word	0x40000800

08000914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MX_USART1_UART_Init+0x50>)
 800091c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USART1_UART_Init+0x4c>)
 800094c:	f002 ffc4 	bl	80038d8 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000956:	f000 f8a3 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000200 	.word	0x20000200
 8000964:	40013800 	.word	0x40013800

08000968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800096e:	4a12      	ldr	r2, [pc, #72]	; (80009b8 <MX_USART2_UART_Init+0x50>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_USART2_UART_Init+0x4c>)
 80009a0:	f002 ff9a 	bl	80038d8 <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009aa:	f000 f879 	bl	8000aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000244 	.word	0x20000244
 80009b8:	40004400 	.word	0x40004400

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_DMA_Init+0x48>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	4a0f      	ldr	r2, [pc, #60]	; (8000a04 <MX_DMA_Init+0x48>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6153      	str	r3, [r2, #20]
 80009ce:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <MX_DMA_Init+0x48>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80009da:	2200      	movs	r2, #0
 80009dc:	2100      	movs	r1, #0
 80009de:	2010      	movs	r0, #16
 80009e0:	f000 fd87 	bl	80014f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80009e4:	2010      	movs	r0, #16
 80009e6:	f000 fda0 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	2011      	movs	r0, #17
 80009f0:	f000 fd7f 	bl	80014f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80009f4:	2011      	movs	r0, #17
 80009f6:	f000 fd98 	bl	800152a <HAL_NVIC_EnableIRQ>

}
 80009fa:	bf00      	nop
 80009fc:	3708      	adds	r7, #8
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000

08000a08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <MX_GPIO_Init+0x90>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	4a1d      	ldr	r2, [pc, #116]	; (8000a98 <MX_GPIO_Init+0x90>)
 8000a22:	f043 0320 	orr.w	r3, r3, #32
 8000a26:	6193      	str	r3, [r2, #24]
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_GPIO_Init+0x90>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	f003 0320 	and.w	r3, r3, #32
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_GPIO_Init+0x90>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <MX_GPIO_Init+0x90>)
 8000a3a:	f043 0304 	orr.w	r3, r3, #4
 8000a3e:	6193      	str	r3, [r2, #24]
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_GPIO_Init+0x90>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	f003 0304 	and.w	r3, r3, #4
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_GPIO_Init+0x90>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <MX_GPIO_Init+0x90>)
 8000a52:	f043 0308 	orr.w	r3, r3, #8
 8000a56:	6193      	str	r3, [r2, #24]
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_GPIO_Init+0x90>)
 8000a5a:	699b      	ldr	r3, [r3, #24]
 8000a5c:	f003 0308 	and.w	r3, r3, #8
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Buzzer_Pin|LED_B_Pin|LED_G_Pin|LED_R_Pin, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a6a:	480c      	ldr	r0, [pc, #48]	; (8000a9c <MX_GPIO_Init+0x94>)
 8000a6c:	f001 f90c 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Buzzer_Pin LED_B_Pin LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin|LED_B_Pin|LED_G_Pin|LED_R_Pin;
 8000a70:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	4619      	mov	r1, r3
 8000a88:	4804      	ldr	r0, [pc, #16]	; (8000a9c <MX_GPIO_Init+0x94>)
 8000a8a:	f000 ff79 	bl	8001980 <HAL_GPIO_Init>

}
 8000a8e:	bf00      	nop
 8000a90:	3720      	adds	r7, #32
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010c00 	.word	0x40010c00

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6193      	str	r3, [r2, #24]
 8000abe:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_MspInit+0x5c>)
 8000acc:	69db      	ldr	r3, [r3, #28]
 8000ace:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad4:	61d3      	str	r3, [r2, #28]
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <HAL_MspInit+0x5c>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <HAL_MspInit+0x60>)
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <HAL_MspInit+0x60>)
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	40021000 	.word	0x40021000
 8000b0c:	40010000 	.word	0x40010000

08000b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b08a      	sub	sp, #40	; 0x28
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <HAL_I2C_MspInit+0x90>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d132      	bne.n	8000b96 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <HAL_I2C_MspInit+0x94>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a1b      	ldr	r2, [pc, #108]	; (8000ba4 <HAL_I2C_MspInit+0x94>)
 8000b36:	f043 0308 	orr.w	r3, r3, #8
 8000b3a:	6193      	str	r3, [r2, #24]
 8000b3c:	4b19      	ldr	r3, [pc, #100]	; (8000ba4 <HAL_I2C_MspInit+0x94>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	f003 0308 	and.w	r3, r3, #8
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b48:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b4e:	2312      	movs	r3, #18
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b52:	2303      	movs	r3, #3
 8000b54:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <HAL_I2C_MspInit+0x98>)
 8000b5e:	f000 ff0f 	bl	8001980 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_I2C_MspInit+0x9c>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
 8000b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
 8000b78:	4a0c      	ldr	r2, [pc, #48]	; (8000bac <HAL_I2C_MspInit+0x9c>)
 8000b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7c:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_I2C_MspInit+0x94>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a08      	ldr	r2, [pc, #32]	; (8000ba4 <HAL_I2C_MspInit+0x94>)
 8000b84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_I2C_MspInit+0x94>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b96:	bf00      	nop
 8000b98:	3728      	adds	r7, #40	; 0x28
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40005400 	.word	0x40005400
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010c00 	.word	0x40010c00
 8000bac:	40010000 	.word	0x40010000

08000bb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <HAL_TIM_Base_MspInit+0x68>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d114      	bne.n	8000bec <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_TIM_Base_MspInit+0x6c>)
 8000bc4:	699b      	ldr	r3, [r3, #24]
 8000bc6:	4a15      	ldr	r2, [pc, #84]	; (8000c1c <HAL_TIM_Base_MspInit+0x6c>)
 8000bc8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bcc:	6193      	str	r3, [r2, #24]
 8000bce:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <HAL_TIM_Base_MspInit+0x6c>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	2019      	movs	r0, #25
 8000be0:	f000 fc87 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000be4:	2019      	movs	r0, #25
 8000be6:	f000 fca0 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bea:	e010      	b.n	8000c0e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	4a0b      	ldr	r2, [pc, #44]	; (8000c20 <HAL_TIM_Base_MspInit+0x70>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d10b      	bne.n	8000c0e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <HAL_TIM_Base_MspInit+0x6c>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	4a08      	ldr	r2, [pc, #32]	; (8000c1c <HAL_TIM_Base_MspInit+0x6c>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	61d3      	str	r3, [r2, #28]
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <HAL_TIM_Base_MspInit+0x6c>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
}
 8000c0e:	bf00      	nop
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40012c00 	.word	0x40012c00
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	40000400 	.word	0x40000400

08000c24 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0318 	add.w	r3, r7, #24
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c42:	d12c      	bne.n	8000c9e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c44:	4b30      	ldr	r3, [pc, #192]	; (8000d08 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c46:	69db      	ldr	r3, [r3, #28]
 8000c48:	4a2f      	ldr	r2, [pc, #188]	; (8000d08 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	61d3      	str	r3, [r2, #28]
 8000c50:	4b2d      	ldr	r3, [pc, #180]	; (8000d08 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c52:	69db      	ldr	r3, [r3, #28]
 8000c54:	f003 0301 	and.w	r3, r3, #1
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	; (8000d08 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a29      	ldr	r2, [pc, #164]	; (8000d08 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b27      	ldr	r3, [pc, #156]	; (8000d08 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	613b      	str	r3, [r7, #16]
 8000c72:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c74:	2303      	movs	r3, #3
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c80:	f107 0318 	add.w	r3, r7, #24
 8000c84:	4619      	mov	r1, r3
 8000c86:	4821      	ldr	r0, [pc, #132]	; (8000d0c <HAL_TIM_Encoder_MspInit+0xe8>)
 8000c88:	f000 fe7a 	bl	8001980 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2101      	movs	r1, #1
 8000c90:	201c      	movs	r0, #28
 8000c92:	f000 fc2e 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c96:	201c      	movs	r0, #28
 8000c98:	f000 fc47 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c9c:	e030      	b.n	8000d00 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <HAL_TIM_Encoder_MspInit+0xec>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d12b      	bne.n	8000d00 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000caa:	69db      	ldr	r3, [r3, #28]
 8000cac:	4a16      	ldr	r2, [pc, #88]	; (8000d08 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	61d3      	str	r3, [r2, #28]
 8000cb4:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000cb6:	69db      	ldr	r3, [r3, #28]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc0:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	4a10      	ldr	r2, [pc, #64]	; (8000d08 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000cc6:	f043 0308 	orr.w	r3, r3, #8
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f003 0308 	and.w	r3, r3, #8
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cd8:	23c0      	movs	r3, #192	; 0xc0
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce4:	f107 0318 	add.w	r3, r7, #24
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480a      	ldr	r0, [pc, #40]	; (8000d14 <HAL_TIM_Encoder_MspInit+0xf0>)
 8000cec:	f000 fe48 	bl	8001980 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	201e      	movs	r0, #30
 8000cf6:	f000 fbfc 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cfa:	201e      	movs	r0, #30
 8000cfc:	f000 fc15 	bl	800152a <HAL_NVIC_EnableIRQ>
}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010800 	.word	0x40010800
 8000d10:	40000800 	.word	0x40000800
 8000d14:	40010c00 	.word	0x40010c00

08000d18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b088      	sub	sp, #32
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0310 	add.w	r3, r7, #16
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <HAL_TIM_MspPostInit+0x88>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d12f      	bne.n	8000d98 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	4b1a      	ldr	r3, [pc, #104]	; (8000da4 <HAL_TIM_MspPostInit+0x8c>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_TIM_MspPostInit+0x8c>)
 8000d3e:	f043 0304 	orr.w	r3, r3, #4
 8000d42:	6193      	str	r3, [r2, #24]
 8000d44:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_TIM_MspPostInit+0x8c>)
 8000d46:	699b      	ldr	r3, [r3, #24]
 8000d48:	f003 0304 	and.w	r3, r3, #4
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_TIM_MspPostInit+0x8c>)
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <HAL_TIM_MspPostInit+0x8c>)
 8000d56:	f043 0308 	orr.w	r3, r3, #8
 8000d5a:	6193      	str	r3, [r2, #24]
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_TIM_MspPostInit+0x8c>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f003 0308 	and.w	r3, r3, #8
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d68:	23c0      	movs	r3, #192	; 0xc0
 8000d6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	480b      	ldr	r0, [pc, #44]	; (8000da8 <HAL_TIM_MspPostInit+0x90>)
 8000d7c:	f000 fe00 	bl	8001980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d80:	2303      	movs	r3, #3
 8000d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	4619      	mov	r1, r3
 8000d92:	4806      	ldr	r0, [pc, #24]	; (8000dac <HAL_TIM_MspPostInit+0x94>)
 8000d94:	f000 fdf4 	bl	8001980 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	3720      	adds	r7, #32
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40000400 	.word	0x40000400
 8000da4:	40021000 	.word	0x40021000
 8000da8:	40010800 	.word	0x40010800
 8000dac:	40010c00 	.word	0x40010c00

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0318 	add.w	r3, r7, #24
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a66      	ldr	r2, [pc, #408]	; (8000f64 <HAL_UART_MspInit+0x1b4>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d13a      	bne.n	8000e46 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dd0:	4b65      	ldr	r3, [pc, #404]	; (8000f68 <HAL_UART_MspInit+0x1b8>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	4a64      	ldr	r2, [pc, #400]	; (8000f68 <HAL_UART_MspInit+0x1b8>)
 8000dd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dda:	6193      	str	r3, [r2, #24]
 8000ddc:	4b62      	ldr	r3, [pc, #392]	; (8000f68 <HAL_UART_MspInit+0x1b8>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de4:	617b      	str	r3, [r7, #20]
 8000de6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b5f      	ldr	r3, [pc, #380]	; (8000f68 <HAL_UART_MspInit+0x1b8>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a5e      	ldr	r2, [pc, #376]	; (8000f68 <HAL_UART_MspInit+0x1b8>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b5c      	ldr	r3, [pc, #368]	; (8000f68 <HAL_UART_MspInit+0x1b8>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8000e00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 0318 	add.w	r3, r7, #24
 8000e12:	4619      	mov	r1, r3
 8000e14:	4855      	ldr	r0, [pc, #340]	; (8000f6c <HAL_UART_MspInit+0x1bc>)
 8000e16:	f000 fdb3 	bl	8001980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JY_RX_Pin;
 8000e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	484f      	ldr	r0, [pc, #316]	; (8000f6c <HAL_UART_MspInit+0x1bc>)
 8000e30:	f000 fda6 	bl	8001980 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	2025      	movs	r0, #37	; 0x25
 8000e3a:	f000 fb5a 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e3e:	2025      	movs	r0, #37	; 0x25
 8000e40:	f000 fb73 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e44:	e089      	b.n	8000f5a <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a49      	ldr	r2, [pc, #292]	; (8000f70 <HAL_UART_MspInit+0x1c0>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	f040 8084 	bne.w	8000f5a <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e52:	4b45      	ldr	r3, [pc, #276]	; (8000f68 <HAL_UART_MspInit+0x1b8>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	4a44      	ldr	r2, [pc, #272]	; (8000f68 <HAL_UART_MspInit+0x1b8>)
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	61d3      	str	r3, [r2, #28]
 8000e5e:	4b42      	ldr	r3, [pc, #264]	; (8000f68 <HAL_UART_MspInit+0x1b8>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6a:	4b3f      	ldr	r3, [pc, #252]	; (8000f68 <HAL_UART_MspInit+0x1b8>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	4a3e      	ldr	r2, [pc, #248]	; (8000f68 <HAL_UART_MspInit+0x1b8>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	6193      	str	r3, [r2, #24]
 8000e76:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <HAL_UART_MspInit+0x1b8>)
 8000e78:	699b      	ldr	r3, [r3, #24]
 8000e7a:	f003 0304 	and.w	r3, r3, #4
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8000e82:	2304      	movs	r3, #4
 8000e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0318 	add.w	r3, r7, #24
 8000e92:	4619      	mov	r1, r3
 8000e94:	4835      	ldr	r0, [pc, #212]	; (8000f6c <HAL_UART_MspInit+0x1bc>)
 8000e96:	f000 fd73 	bl	8001980 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = XB_RX_Pin;
 8000e9a:	2308      	movs	r3, #8
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0318 	add.w	r3, r7, #24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	482f      	ldr	r0, [pc, #188]	; (8000f6c <HAL_UART_MspInit+0x1bc>)
 8000eae:	f000 fd67 	bl	8001980 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000eb2:	4b30      	ldr	r3, [pc, #192]	; (8000f74 <HAL_UART_MspInit+0x1c4>)
 8000eb4:	4a30      	ldr	r2, [pc, #192]	; (8000f78 <HAL_UART_MspInit+0x1c8>)
 8000eb6:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eb8:	4b2e      	ldr	r3, [pc, #184]	; (8000f74 <HAL_UART_MspInit+0x1c4>)
 8000eba:	2210      	movs	r2, #16
 8000ebc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <HAL_UART_MspInit+0x1c4>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <HAL_UART_MspInit+0x1c4>)
 8000ec6:	2280      	movs	r2, #128	; 0x80
 8000ec8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <HAL_UART_MspInit+0x1c4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <HAL_UART_MspInit+0x1c4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000ed6:	4b27      	ldr	r3, [pc, #156]	; (8000f74 <HAL_UART_MspInit+0x1c4>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <HAL_UART_MspInit+0x1c4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000ee2:	4824      	ldr	r0, [pc, #144]	; (8000f74 <HAL_UART_MspInit+0x1c4>)
 8000ee4:	f000 fb3c 	bl	8001560 <HAL_DMA_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <HAL_UART_MspInit+0x142>
      Error_Handler();
 8000eee:	f7ff fdd7 	bl	8000aa0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a1f      	ldr	r2, [pc, #124]	; (8000f74 <HAL_UART_MspInit+0x1c4>)
 8000ef6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ef8:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <HAL_UART_MspInit+0x1c4>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_UART_MspInit+0x1cc>)
 8000f00:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <HAL_UART_MspInit+0x1d0>)
 8000f02:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_UART_MspInit+0x1cc>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <HAL_UART_MspInit+0x1cc>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_UART_MspInit+0x1cc>)
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f16:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_UART_MspInit+0x1cc>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_UART_MspInit+0x1cc>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000f22:	4b16      	ldr	r3, [pc, #88]	; (8000f7c <HAL_UART_MspInit+0x1cc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_UART_MspInit+0x1cc>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f2e:	4813      	ldr	r0, [pc, #76]	; (8000f7c <HAL_UART_MspInit+0x1cc>)
 8000f30:	f000 fb16 	bl	8001560 <HAL_DMA_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8000f3a:	f7ff fdb1 	bl	8000aa0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <HAL_UART_MspInit+0x1cc>)
 8000f42:	639a      	str	r2, [r3, #56]	; 0x38
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <HAL_UART_MspInit+0x1cc>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2103      	movs	r1, #3
 8000f4e:	2026      	movs	r0, #38	; 0x26
 8000f50:	f000 facf 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f54:	2026      	movs	r0, #38	; 0x26
 8000f56:	f000 fae8 	bl	800152a <HAL_NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40013800 	.word	0x40013800
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	40010800 	.word	0x40010800
 8000f70:	40004400 	.word	0x40004400
 8000f74:	20000288 	.word	0x20000288
 8000f78:	40020080 	.word	0x40020080
 8000f7c:	200002cc 	.word	0x200002cc
 8000f80:	4002006c 	.word	0x4002006c

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr

08000fae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr

08000fba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fca:	f000 f97b 	bl	80012c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <DMA1_Channel6_IRQHandler+0x10>)
 8000fda:	f000 fbcb 	bl	8001774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200002cc 	.word	0x200002cc

08000fe8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <DMA1_Channel7_IRQHandler+0x10>)
 8000fee:	f000 fbc1 	bl	8001774 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000288 	.word	0x20000288

08000ffc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	//huansic_motor_pid(leftMotor);
	//huansic_motor_pid(rightMotor);
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <TIM1_UP_IRQHandler+0x10>)
 8001002:	f001 fe9d 	bl	8002d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200000e0 	.word	0x200000e0

08001010 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM2_IRQHandler+0x10>)
 8001016:	f001 fe93 	bl	8002d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000128 	.word	0x20000128

08001024 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <TIM4_IRQHandler+0x10>)
 800102a:	f001 fe89 	bl	8002d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200001b8 	.word	0x200001b8

08001038 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <USART1_IRQHandler+0x10>)
 800103e:	f002 fc99 	bl	8003974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000200 	.word	0x20000200

0800104c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <USART2_IRQHandler+0x10>)
 8001052:	f002 fc8f 	bl	8003974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000244 	.word	0x20000244

08001060 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
	return 1;
 8001064:	2301      	movs	r3, #1
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <_kill>:

int _kill(int pid, int sig)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001078:	f003 f848 	bl	800410c <__errno>
 800107c:	4603      	mov	r3, r0
 800107e:	2216      	movs	r2, #22
 8001080:	601a      	str	r2, [r3, #0]
	return -1;
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <_exit>:

void _exit (int status)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001096:	f04f 31ff 	mov.w	r1, #4294967295
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffe7 	bl	800106e <_kill>
	while (1) {}		/* Make sure we hang here */
 80010a0:	e7fe      	b.n	80010a0 <_exit+0x12>

080010a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	e00a      	b.n	80010ca <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010b4:	f3af 8000 	nop.w
 80010b8:	4601      	mov	r1, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	60ba      	str	r2, [r7, #8]
 80010c0:	b2ca      	uxtb	r2, r1
 80010c2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	3301      	adds	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	dbf0      	blt.n	80010b4 <_read+0x12>
	}

return len;
 80010d2:	687b      	ldr	r3, [r7, #4]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3718      	adds	r7, #24
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	e009      	b.n	8001102 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	1c5a      	adds	r2, r3, #1
 80010f2:	60ba      	str	r2, [r7, #8]
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	3301      	adds	r3, #1
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	697a      	ldr	r2, [r7, #20]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	429a      	cmp	r2, r3
 8001108:	dbf1      	blt.n	80010ee <_write+0x12>
	}
	return len;
 800110a:	687b      	ldr	r3, [r7, #4]
}
 800110c:	4618      	mov	r0, r3
 800110e:	3718      	adds	r7, #24
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <_close>:

int _close(int file)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	return -1;
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr

0800112a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113a:	605a      	str	r2, [r3, #4]
	return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <_isatty>:

int _isatty(int file)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	return 1;
 8001150:	2301      	movs	r3, #1
}
 8001152:	4618      	mov	r0, r3
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr

0800115c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr

08001174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b086      	sub	sp, #24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <_sbrk+0x5c>)
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <_sbrk+0x60>)
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <_sbrk+0x64>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <_sbrk+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d207      	bcs.n	80011b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a4:	f002 ffb2 	bl	800410c <__errno>
 80011a8:	4603      	mov	r3, r0
 80011aa:	220c      	movs	r2, #12
 80011ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
 80011b2:	e009      	b.n	80011c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b4:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <_sbrk+0x64>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <_sbrk+0x64>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	4a05      	ldr	r2, [pc, #20]	; (80011d8 <_sbrk+0x64>)
 80011c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c6:	68fb      	ldr	r3, [r7, #12]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20005000 	.word	0x20005000
 80011d4:	00000400 	.word	0x00000400
 80011d8:	20000388 	.word	0x20000388
 80011dc:	200003a0 	.word	0x200003a0

080011e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ee:	490d      	ldr	r1, [pc, #52]	; (8001224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001204:	4c0a      	ldr	r4, [pc, #40]	; (8001230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001212:	f7ff ffe5 	bl	80011e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f002 ff91 	bl	800413c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800121a:	f7ff f8cb 	bl	80003b4 <main>
  bx lr
 800121e:	4770      	bx	lr
  ldr r0, =_sdata
 8001220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001224:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001228:	080052a4 	.word	0x080052a4
  ldr r2, =_sbss
 800122c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001230:	200003a0 	.word	0x200003a0

08001234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_2_IRQHandler>
	...

08001238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_Init+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_Init+0x28>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f947 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	2000      	movs	r0, #0
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff fc2a 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f95f 	bl	8001546 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295
 80012a0:	f000 f927 	bl	80014f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000008 	.word	0x20000008
 80012c0:	20000004 	.word	0x20000004

080012c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_IncTick+0x1c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <HAL_IncTick+0x20>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4413      	add	r3, r2
 80012d4:	4a03      	ldr	r2, [pc, #12]	; (80012e4 <HAL_IncTick+0x20>)
 80012d6:	6013      	str	r3, [r2, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr
 80012e0:	20000008 	.word	0x20000008
 80012e4:	2000038c 	.word	0x2000038c

080012e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b02      	ldr	r3, [pc, #8]	; (80012f8 <HAL_GetTick+0x10>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	2000038c 	.word	0x2000038c

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff fff0 	bl	80012e8 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffe0 	bl	80012e8 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4906      	ldr	r1, [pc, #24]	; (80013dc <__NVIC_EnableIRQ+0x34>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a8:	d301      	bcc.n	80014ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <SysTick_Config+0x40>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b6:	210f      	movs	r1, #15
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f7ff ff90 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <SysTick_Config+0x40>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <SysTick_Config+0x40>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff2d 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff42 	bl	800138c <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff90 	bl	8001434 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5f 	bl	80013e0 <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff35 	bl	80013a8 <__NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffa2 	bl	8001498 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e043      	b.n	80015fe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_DMA_Init+0xa8>)
 800157e:	4413      	add	r3, r2
 8001580:	4a22      	ldr	r2, [pc, #136]	; (800160c <HAL_DMA_Init+0xac>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	009a      	lsls	r2, r3, #2
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <HAL_DMA_Init+0xb0>)
 8001592:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2202      	movs	r2, #2
 8001598:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80015aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80015ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	4313      	orrs	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	bffdfff8 	.word	0xbffdfff8
 800160c:	cccccccd 	.word	0xcccccccd
 8001610:	40020000 	.word	0x40020000

08001614 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001626:	2b02      	cmp	r3, #2
 8001628:	d008      	beq.n	800163c <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2204      	movs	r2, #4
 800162e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e020      	b.n	800167e <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 020e 	bic.w	r2, r2, #14
 800164a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0201 	bic.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001664:	2101      	movs	r1, #1
 8001666:	fa01 f202 	lsl.w	r2, r1, r2
 800166a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800167c:	7bfb      	ldrb	r3, [r7, #15]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3714      	adds	r7, #20
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001690:	2300      	movs	r3, #0
 8001692:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800169a:	2b02      	cmp	r3, #2
 800169c:	d005      	beq.n	80016aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2204      	movs	r2, #4
 80016a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e051      	b.n	800174e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 020e 	bic.w	r2, r2, #14
 80016b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0201 	bic.w	r2, r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a22      	ldr	r2, [pc, #136]	; (8001758 <HAL_DMA_Abort_IT+0xd0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d029      	beq.n	8001728 <HAL_DMA_Abort_IT+0xa0>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a20      	ldr	r2, [pc, #128]	; (800175c <HAL_DMA_Abort_IT+0xd4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d022      	beq.n	8001724 <HAL_DMA_Abort_IT+0x9c>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <HAL_DMA_Abort_IT+0xd8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d01a      	beq.n	800171e <HAL_DMA_Abort_IT+0x96>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <HAL_DMA_Abort_IT+0xdc>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d012      	beq.n	8001718 <HAL_DMA_Abort_IT+0x90>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a1c      	ldr	r2, [pc, #112]	; (8001768 <HAL_DMA_Abort_IT+0xe0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d00a      	beq.n	8001712 <HAL_DMA_Abort_IT+0x8a>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1a      	ldr	r2, [pc, #104]	; (800176c <HAL_DMA_Abort_IT+0xe4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d102      	bne.n	800170c <HAL_DMA_Abort_IT+0x84>
 8001706:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800170a:	e00e      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 800170c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001710:	e00b      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 8001712:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001716:	e008      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 8001718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800171c:	e005      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 800171e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001722:	e002      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 8001724:	2310      	movs	r3, #16
 8001726:	e000      	b.n	800172a <HAL_DMA_Abort_IT+0xa2>
 8001728:	2301      	movs	r3, #1
 800172a:	4a11      	ldr	r2, [pc, #68]	; (8001770 <HAL_DMA_Abort_IT+0xe8>)
 800172c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	4798      	blx	r3
    } 
  }
  return status;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40020008 	.word	0x40020008
 800175c:	4002001c 	.word	0x4002001c
 8001760:	40020030 	.word	0x40020030
 8001764:	40020044 	.word	0x40020044
 8001768:	40020058 	.word	0x40020058
 800176c:	4002006c 	.word	0x4002006c
 8001770:	40020000 	.word	0x40020000

08001774 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	2204      	movs	r2, #4
 8001792:	409a      	lsls	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	4013      	ands	r3, r2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d04f      	beq.n	800183c <HAL_DMA_IRQHandler+0xc8>
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f003 0304 	and.w	r3, r3, #4
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d04a      	beq.n	800183c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0320 	and.w	r3, r3, #32
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d107      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0204 	bic.w	r2, r2, #4
 80017c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a66      	ldr	r2, [pc, #408]	; (8001964 <HAL_DMA_IRQHandler+0x1f0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d029      	beq.n	8001822 <HAL_DMA_IRQHandler+0xae>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a65      	ldr	r2, [pc, #404]	; (8001968 <HAL_DMA_IRQHandler+0x1f4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d022      	beq.n	800181e <HAL_DMA_IRQHandler+0xaa>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a63      	ldr	r2, [pc, #396]	; (800196c <HAL_DMA_IRQHandler+0x1f8>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d01a      	beq.n	8001818 <HAL_DMA_IRQHandler+0xa4>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a62      	ldr	r2, [pc, #392]	; (8001970 <HAL_DMA_IRQHandler+0x1fc>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d012      	beq.n	8001812 <HAL_DMA_IRQHandler+0x9e>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a60      	ldr	r2, [pc, #384]	; (8001974 <HAL_DMA_IRQHandler+0x200>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00a      	beq.n	800180c <HAL_DMA_IRQHandler+0x98>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a5f      	ldr	r2, [pc, #380]	; (8001978 <HAL_DMA_IRQHandler+0x204>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d102      	bne.n	8001806 <HAL_DMA_IRQHandler+0x92>
 8001800:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001804:	e00e      	b.n	8001824 <HAL_DMA_IRQHandler+0xb0>
 8001806:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800180a:	e00b      	b.n	8001824 <HAL_DMA_IRQHandler+0xb0>
 800180c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001810:	e008      	b.n	8001824 <HAL_DMA_IRQHandler+0xb0>
 8001812:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001816:	e005      	b.n	8001824 <HAL_DMA_IRQHandler+0xb0>
 8001818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181c:	e002      	b.n	8001824 <HAL_DMA_IRQHandler+0xb0>
 800181e:	2340      	movs	r3, #64	; 0x40
 8001820:	e000      	b.n	8001824 <HAL_DMA_IRQHandler+0xb0>
 8001822:	2304      	movs	r3, #4
 8001824:	4a55      	ldr	r2, [pc, #340]	; (800197c <HAL_DMA_IRQHandler+0x208>)
 8001826:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 8094 	beq.w	800195a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800183a:	e08e      	b.n	800195a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	2202      	movs	r2, #2
 8001842:	409a      	lsls	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d056      	beq.n	80018fa <HAL_DMA_IRQHandler+0x186>
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d051      	beq.n	80018fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	2b00      	cmp	r3, #0
 8001862:	d10b      	bne.n	800187c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 020a 	bic.w	r2, r2, #10
 8001872:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a38      	ldr	r2, [pc, #224]	; (8001964 <HAL_DMA_IRQHandler+0x1f0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d029      	beq.n	80018da <HAL_DMA_IRQHandler+0x166>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a37      	ldr	r2, [pc, #220]	; (8001968 <HAL_DMA_IRQHandler+0x1f4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d022      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x162>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a35      	ldr	r2, [pc, #212]	; (800196c <HAL_DMA_IRQHandler+0x1f8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d01a      	beq.n	80018d0 <HAL_DMA_IRQHandler+0x15c>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a34      	ldr	r2, [pc, #208]	; (8001970 <HAL_DMA_IRQHandler+0x1fc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d012      	beq.n	80018ca <HAL_DMA_IRQHandler+0x156>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a32      	ldr	r2, [pc, #200]	; (8001974 <HAL_DMA_IRQHandler+0x200>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00a      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x150>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a31      	ldr	r2, [pc, #196]	; (8001978 <HAL_DMA_IRQHandler+0x204>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d102      	bne.n	80018be <HAL_DMA_IRQHandler+0x14a>
 80018b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018bc:	e00e      	b.n	80018dc <HAL_DMA_IRQHandler+0x168>
 80018be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018c2:	e00b      	b.n	80018dc <HAL_DMA_IRQHandler+0x168>
 80018c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018c8:	e008      	b.n	80018dc <HAL_DMA_IRQHandler+0x168>
 80018ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ce:	e005      	b.n	80018dc <HAL_DMA_IRQHandler+0x168>
 80018d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d4:	e002      	b.n	80018dc <HAL_DMA_IRQHandler+0x168>
 80018d6:	2320      	movs	r3, #32
 80018d8:	e000      	b.n	80018dc <HAL_DMA_IRQHandler+0x168>
 80018da:	2302      	movs	r3, #2
 80018dc:	4a27      	ldr	r2, [pc, #156]	; (800197c <HAL_DMA_IRQHandler+0x208>)
 80018de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d034      	beq.n	800195a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018f8:	e02f      	b.n	800195a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	2208      	movs	r2, #8
 8001900:	409a      	lsls	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	4013      	ands	r3, r2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d028      	beq.n	800195c <HAL_DMA_IRQHandler+0x1e8>
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d023      	beq.n	800195c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 020e 	bic.w	r2, r2, #14
 8001922:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	2b00      	cmp	r3, #0
 8001950:	d004      	beq.n	800195c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	4798      	blx	r3
    }
  }
  return;
 800195a:	bf00      	nop
 800195c:	bf00      	nop
}
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020008 	.word	0x40020008
 8001968:	4002001c 	.word	0x4002001c
 800196c:	40020030 	.word	0x40020030
 8001970:	40020044 	.word	0x40020044
 8001974:	40020058 	.word	0x40020058
 8001978:	4002006c 	.word	0x4002006c
 800197c:	40020000 	.word	0x40020000

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b08b      	sub	sp, #44	; 0x2c
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	e169      	b.n	8001c68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001994:	2201      	movs	r2, #1
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f040 8158 	bne.w	8001c62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4a9a      	ldr	r2, [pc, #616]	; (8001c20 <HAL_GPIO_Init+0x2a0>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d05e      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019bc:	4a98      	ldr	r2, [pc, #608]	; (8001c20 <HAL_GPIO_Init+0x2a0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d875      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019c2:	4a98      	ldr	r2, [pc, #608]	; (8001c24 <HAL_GPIO_Init+0x2a4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d058      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019c8:	4a96      	ldr	r2, [pc, #600]	; (8001c24 <HAL_GPIO_Init+0x2a4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d86f      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019ce:	4a96      	ldr	r2, [pc, #600]	; (8001c28 <HAL_GPIO_Init+0x2a8>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d052      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019d4:	4a94      	ldr	r2, [pc, #592]	; (8001c28 <HAL_GPIO_Init+0x2a8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d869      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019da:	4a94      	ldr	r2, [pc, #592]	; (8001c2c <HAL_GPIO_Init+0x2ac>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d04c      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019e0:	4a92      	ldr	r2, [pc, #584]	; (8001c2c <HAL_GPIO_Init+0x2ac>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d863      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019e6:	4a92      	ldr	r2, [pc, #584]	; (8001c30 <HAL_GPIO_Init+0x2b0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d046      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019ec:	4a90      	ldr	r2, [pc, #576]	; (8001c30 <HAL_GPIO_Init+0x2b0>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d85d      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d82a      	bhi.n	8001a4c <HAL_GPIO_Init+0xcc>
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d859      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019fa:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <HAL_GPIO_Init+0x80>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a7b 	.word	0x08001a7b
 8001a04:	08001a55 	.word	0x08001a55
 8001a08:	08001a67 	.word	0x08001a67
 8001a0c:	08001aa9 	.word	0x08001aa9
 8001a10:	08001aaf 	.word	0x08001aaf
 8001a14:	08001aaf 	.word	0x08001aaf
 8001a18:	08001aaf 	.word	0x08001aaf
 8001a1c:	08001aaf 	.word	0x08001aaf
 8001a20:	08001aaf 	.word	0x08001aaf
 8001a24:	08001aaf 	.word	0x08001aaf
 8001a28:	08001aaf 	.word	0x08001aaf
 8001a2c:	08001aaf 	.word	0x08001aaf
 8001a30:	08001aaf 	.word	0x08001aaf
 8001a34:	08001aaf 	.word	0x08001aaf
 8001a38:	08001aaf 	.word	0x08001aaf
 8001a3c:	08001aaf 	.word	0x08001aaf
 8001a40:	08001aaf 	.word	0x08001aaf
 8001a44:	08001a5d 	.word	0x08001a5d
 8001a48:	08001a71 	.word	0x08001a71
 8001a4c:	4a79      	ldr	r2, [pc, #484]	; (8001c34 <HAL_GPIO_Init+0x2b4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a52:	e02c      	b.n	8001aae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	623b      	str	r3, [r7, #32]
          break;
 8001a5a:	e029      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	3304      	adds	r3, #4
 8001a62:	623b      	str	r3, [r7, #32]
          break;
 8001a64:	e024      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e01f      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	330c      	adds	r3, #12
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e01a      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a82:	2304      	movs	r3, #4
 8001a84:	623b      	str	r3, [r7, #32]
          break;
 8001a86:	e013      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	611a      	str	r2, [r3, #16]
          break;
 8001a9a:	e009      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	615a      	str	r2, [r3, #20]
          break;
 8001aa6:	e003      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
          break;
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          break;
 8001aae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d801      	bhi.n	8001aba <HAL_GPIO_Init+0x13a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	e001      	b.n	8001abe <HAL_GPIO_Init+0x13e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
 8001abe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2bff      	cmp	r3, #255	; 0xff
 8001ac4:	d802      	bhi.n	8001acc <HAL_GPIO_Init+0x14c>
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_Init+0x152>
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	3b08      	subs	r3, #8
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	210f      	movs	r1, #15
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	6a39      	ldr	r1, [r7, #32]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aec:	431a      	orrs	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 80b1 	beq.w	8001c62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b00:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a4c      	ldr	r2, [pc, #304]	; (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b4a      	ldr	r3, [pc, #296]	; (8001c38 <HAL_GPIO_Init+0x2b8>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b18:	4a48      	ldr	r2, [pc, #288]	; (8001c3c <HAL_GPIO_Init+0x2bc>)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a40      	ldr	r2, [pc, #256]	; (8001c40 <HAL_GPIO_Init+0x2c0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d013      	beq.n	8001b6c <HAL_GPIO_Init+0x1ec>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a3f      	ldr	r2, [pc, #252]	; (8001c44 <HAL_GPIO_Init+0x2c4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d00d      	beq.n	8001b68 <HAL_GPIO_Init+0x1e8>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a3e      	ldr	r2, [pc, #248]	; (8001c48 <HAL_GPIO_Init+0x2c8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d007      	beq.n	8001b64 <HAL_GPIO_Init+0x1e4>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a3d      	ldr	r2, [pc, #244]	; (8001c4c <HAL_GPIO_Init+0x2cc>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_GPIO_Init+0x1e0>
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e006      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b60:	2304      	movs	r3, #4
 8001b62:	e004      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b64:	2302      	movs	r3, #2
 8001b66:	e002      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_GPIO_Init+0x1ee>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b70:	f002 0203 	and.w	r2, r2, #3
 8001b74:	0092      	lsls	r2, r2, #2
 8001b76:	4093      	lsls	r3, r2
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b7e:	492f      	ldr	r1, [pc, #188]	; (8001c3c <HAL_GPIO_Init+0x2bc>)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	3302      	adds	r3, #2
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b98:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	492c      	ldr	r1, [pc, #176]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	4928      	ldr	r1, [pc, #160]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bc2:	685a      	ldr	r2, [r3, #4]
 8001bc4:	4922      	ldr	r1, [pc, #136]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	604b      	str	r3, [r1, #4]
 8001bcc:	e006      	b.n	8001bdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bce:	4b20      	ldr	r3, [pc, #128]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	491e      	ldr	r1, [pc, #120]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001be8:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	4918      	ldr	r1, [pc, #96]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
 8001bf4:	e006      	b.n	8001c04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	43db      	mvns	r3, r3
 8001bfe:	4914      	ldr	r1, [pc, #80]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c00:	4013      	ands	r3, r2
 8001c02:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d021      	beq.n	8001c54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	490e      	ldr	r1, [pc, #56]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60cb      	str	r3, [r1, #12]
 8001c1c:	e021      	b.n	8001c62 <HAL_GPIO_Init+0x2e2>
 8001c1e:	bf00      	nop
 8001c20:	10320000 	.word	0x10320000
 8001c24:	10310000 	.word	0x10310000
 8001c28:	10220000 	.word	0x10220000
 8001c2c:	10210000 	.word	0x10210000
 8001c30:	10120000 	.word	0x10120000
 8001c34:	10110000 	.word	0x10110000
 8001c38:	40021000 	.word	0x40021000
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40010800 	.word	0x40010800
 8001c44:	40010c00 	.word	0x40010c00
 8001c48:	40011000 	.word	0x40011000
 8001c4c:	40011400 	.word	0x40011400
 8001c50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_GPIO_Init+0x304>)
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	4909      	ldr	r1, [pc, #36]	; (8001c84 <HAL_GPIO_Init+0x304>)
 8001c5e:	4013      	ands	r3, r2
 8001c60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	3301      	adds	r3, #1
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f47f ae8e 	bne.w	8001994 <HAL_GPIO_Init+0x14>
  }
}
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	372c      	adds	r7, #44	; 0x2c
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	40010400 	.word	0x40010400

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ca4:	e003      	b.n	8001cae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ca6:	887b      	ldrh	r3, [r7, #2]
 8001ca8:	041a      	lsls	r2, r3, #16
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	611a      	str	r2, [r3, #16]
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cca:	887a      	ldrh	r2, [r7, #2]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	041a      	lsls	r2, r3, #16
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	43d9      	mvns	r1, r3
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	400b      	ands	r3, r1
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	611a      	str	r2, [r3, #16]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e12b      	b.n	8001f56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d106      	bne.n	8001d18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7fe fefc 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2224      	movs	r2, #36	; 0x24
 8001d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d50:	f000 fce4 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8001d54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	4a81      	ldr	r2, [pc, #516]	; (8001f60 <HAL_I2C_Init+0x274>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d807      	bhi.n	8001d70 <HAL_I2C_Init+0x84>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4a80      	ldr	r2, [pc, #512]	; (8001f64 <HAL_I2C_Init+0x278>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	bf94      	ite	ls
 8001d68:	2301      	movls	r3, #1
 8001d6a:	2300      	movhi	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	e006      	b.n	8001d7e <HAL_I2C_Init+0x92>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4a7d      	ldr	r2, [pc, #500]	; (8001f68 <HAL_I2C_Init+0x27c>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	bf94      	ite	ls
 8001d78:	2301      	movls	r3, #1
 8001d7a:	2300      	movhi	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e0e7      	b.n	8001f56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4a78      	ldr	r2, [pc, #480]	; (8001f6c <HAL_I2C_Init+0x280>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0c9b      	lsrs	r3, r3, #18
 8001d90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	4a6a      	ldr	r2, [pc, #424]	; (8001f60 <HAL_I2C_Init+0x274>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d802      	bhi.n	8001dc0 <HAL_I2C_Init+0xd4>
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	e009      	b.n	8001dd4 <HAL_I2C_Init+0xe8>
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dc6:	fb02 f303 	mul.w	r3, r2, r3
 8001dca:	4a69      	ldr	r2, [pc, #420]	; (8001f70 <HAL_I2C_Init+0x284>)
 8001dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd0:	099b      	lsrs	r3, r3, #6
 8001dd2:	3301      	adds	r3, #1
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001de6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	495c      	ldr	r1, [pc, #368]	; (8001f60 <HAL_I2C_Init+0x274>)
 8001df0:	428b      	cmp	r3, r1
 8001df2:	d819      	bhi.n	8001e28 <HAL_I2C_Init+0x13c>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1e59      	subs	r1, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e02:	1c59      	adds	r1, r3, #1
 8001e04:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001e08:	400b      	ands	r3, r1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00a      	beq.n	8001e24 <HAL_I2C_Init+0x138>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	1e59      	subs	r1, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e22:	e051      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e24:	2304      	movs	r3, #4
 8001e26:	e04f      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d111      	bne.n	8001e54 <HAL_I2C_Init+0x168>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	1e58      	subs	r0, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6859      	ldr	r1, [r3, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	440b      	add	r3, r1
 8001e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e42:	3301      	adds	r3, #1
 8001e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2301      	moveq	r3, #1
 8001e4e:	2300      	movne	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	e012      	b.n	8001e7a <HAL_I2C_Init+0x18e>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1e58      	subs	r0, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6859      	ldr	r1, [r3, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	440b      	add	r3, r1
 8001e62:	0099      	lsls	r1, r3, #2
 8001e64:	440b      	add	r3, r1
 8001e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <HAL_I2C_Init+0x196>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e022      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10e      	bne.n	8001ea8 <HAL_I2C_Init+0x1bc>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	1e58      	subs	r0, r3, #1
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6859      	ldr	r1, [r3, #4]
 8001e92:	460b      	mov	r3, r1
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	440b      	add	r3, r1
 8001e98:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea6:	e00f      	b.n	8001ec8 <HAL_I2C_Init+0x1dc>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6859      	ldr	r1, [r3, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	0099      	lsls	r1, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	6809      	ldr	r1, [r1, #0]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001ef6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6911      	ldr	r1, [r2, #16]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	68d2      	ldr	r2, [r2, #12]
 8001f02:	4311      	orrs	r1, r2
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	431a      	orrs	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	430a      	orrs	r2, r1
 8001f26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0201 	orr.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	000186a0 	.word	0x000186a0
 8001f64:	001e847f 	.word	0x001e847f
 8001f68:	003d08ff 	.word	0x003d08ff
 8001f6c:	431bde83 	.word	0x431bde83
 8001f70:	10624dd3 	.word	0x10624dd3

08001f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e272      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	f000 8087 	beq.w	80020a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f94:	4b92      	ldr	r3, [pc, #584]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d00c      	beq.n	8001fba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fa0:	4b8f      	ldr	r3, [pc, #572]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 030c 	and.w	r3, r3, #12
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d112      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x5e>
 8001fac:	4b8c      	ldr	r3, [pc, #560]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb8:	d10b      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fba:	4b89      	ldr	r3, [pc, #548]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d06c      	beq.n	80020a0 <HAL_RCC_OscConfig+0x12c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d168      	bne.n	80020a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e24c      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fda:	d106      	bne.n	8001fea <HAL_RCC_OscConfig+0x76>
 8001fdc:	4b80      	ldr	r3, [pc, #512]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a7f      	ldr	r2, [pc, #508]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	e02e      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x98>
 8001ff2:	4b7b      	ldr	r3, [pc, #492]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a7a      	ldr	r2, [pc, #488]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b78      	ldr	r3, [pc, #480]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a77      	ldr	r2, [pc, #476]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002004:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e01d      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0xbc>
 8002016:	4b72      	ldr	r3, [pc, #456]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a71      	ldr	r2, [pc, #452]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	4b6f      	ldr	r3, [pc, #444]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a6e      	ldr	r2, [pc, #440]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0xd4>
 8002030:	4b6b      	ldr	r3, [pc, #428]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6a      	ldr	r2, [pc, #424]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b68      	ldr	r3, [pc, #416]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a67      	ldr	r2, [pc, #412]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002046:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d013      	beq.n	8002078 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff f94a 	bl	80012e8 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff f946 	bl	80012e8 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e200      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	4b5d      	ldr	r3, [pc, #372]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0xe4>
 8002076:	e014      	b.n	80020a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff f936 	bl	80012e8 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002080:	f7ff f932 	bl	80012e8 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b64      	cmp	r3, #100	; 0x64
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e1ec      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	4b53      	ldr	r3, [pc, #332]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x10c>
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d063      	beq.n	8002176 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ae:	4b4c      	ldr	r3, [pc, #304]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00b      	beq.n	80020d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ba:	4b49      	ldr	r3, [pc, #292]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d11c      	bne.n	8002100 <HAL_RCC_OscConfig+0x18c>
 80020c6:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d116      	bne.n	8002100 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d2:	4b43      	ldr	r3, [pc, #268]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d005      	beq.n	80020ea <HAL_RCC_OscConfig+0x176>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d001      	beq.n	80020ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e1c0      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ea:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	4939      	ldr	r1, [pc, #228]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020fe:	e03a      	b.n	8002176 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002108:	4b36      	ldr	r3, [pc, #216]	; (80021e4 <HAL_RCC_OscConfig+0x270>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210e:	f7ff f8eb 	bl	80012e8 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002116:	f7ff f8e7 	bl	80012e8 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e1a1      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002134:	4b2a      	ldr	r3, [pc, #168]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4927      	ldr	r1, [pc, #156]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 8002144:	4313      	orrs	r3, r2
 8002146:	600b      	str	r3, [r1, #0]
 8002148:	e015      	b.n	8002176 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <HAL_RCC_OscConfig+0x270>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff f8ca 	bl	80012e8 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002158:	f7ff f8c6 	bl	80012e8 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e180      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d03a      	beq.n	80021f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d019      	beq.n	80021be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800218a:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <HAL_RCC_OscConfig+0x274>)
 800218c:	2201      	movs	r2, #1
 800218e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002190:	f7ff f8aa 	bl	80012e8 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002198:	f7ff f8a6 	bl	80012e8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e160      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021aa:	4b0d      	ldr	r3, [pc, #52]	; (80021e0 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021b6:	2001      	movs	r0, #1
 80021b8:	f000 fad8 	bl	800276c <RCC_Delay>
 80021bc:	e01c      	b.n	80021f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_RCC_OscConfig+0x274>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c4:	f7ff f890 	bl	80012e8 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ca:	e00f      	b.n	80021ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021cc:	f7ff f88c 	bl	80012e8 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d908      	bls.n	80021ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e146      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	42420000 	.word	0x42420000
 80021e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021ec:	4b92      	ldr	r3, [pc, #584]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1e9      	bne.n	80021cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	f000 80a6 	beq.w	8002352 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800220a:	4b8b      	ldr	r3, [pc, #556]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d10d      	bne.n	8002232 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002216:	4b88      	ldr	r3, [pc, #544]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a87      	ldr	r2, [pc, #540]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002220:	61d3      	str	r3, [r2, #28]
 8002222:	4b85      	ldr	r3, [pc, #532]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222e:	2301      	movs	r3, #1
 8002230:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002232:	4b82      	ldr	r3, [pc, #520]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800223a:	2b00      	cmp	r3, #0
 800223c:	d118      	bne.n	8002270 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800223e:	4b7f      	ldr	r3, [pc, #508]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7e      	ldr	r2, [pc, #504]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800224a:	f7ff f84d 	bl	80012e8 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	e008      	b.n	8002264 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002252:	f7ff f849 	bl	80012e8 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	2b64      	cmp	r3, #100	; 0x64
 800225e:	d901      	bls.n	8002264 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002260:	2303      	movs	r3, #3
 8002262:	e103      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	4b75      	ldr	r3, [pc, #468]	; (800243c <HAL_RCC_OscConfig+0x4c8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0f0      	beq.n	8002252 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b01      	cmp	r3, #1
 8002276:	d106      	bne.n	8002286 <HAL_RCC_OscConfig+0x312>
 8002278:	4b6f      	ldr	r3, [pc, #444]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	4a6e      	ldr	r2, [pc, #440]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	6213      	str	r3, [r2, #32]
 8002284:	e02d      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0x334>
 800228e:	4b6a      	ldr	r3, [pc, #424]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a69      	ldr	r2, [pc, #420]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	f023 0301 	bic.w	r3, r3, #1
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	4b67      	ldr	r3, [pc, #412]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4a66      	ldr	r2, [pc, #408]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022a0:	f023 0304 	bic.w	r3, r3, #4
 80022a4:	6213      	str	r3, [r2, #32]
 80022a6:	e01c      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	2b05      	cmp	r3, #5
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x356>
 80022b0:	4b61      	ldr	r3, [pc, #388]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a60      	ldr	r2, [pc, #384]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	f043 0304 	orr.w	r3, r3, #4
 80022ba:	6213      	str	r3, [r2, #32]
 80022bc:	4b5e      	ldr	r3, [pc, #376]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	4a5d      	ldr	r2, [pc, #372]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	6213      	str	r3, [r2, #32]
 80022c8:	e00b      	b.n	80022e2 <HAL_RCC_OscConfig+0x36e>
 80022ca:	4b5b      	ldr	r3, [pc, #364]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a5a      	ldr	r2, [pc, #360]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	4b58      	ldr	r3, [pc, #352]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4a57      	ldr	r2, [pc, #348]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	f023 0304 	bic.w	r3, r3, #4
 80022e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d015      	beq.n	8002316 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ea:	f7fe fffd 	bl	80012e8 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7fe fff9 	bl	80012e8 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0b1      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	4b4b      	ldr	r3, [pc, #300]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ee      	beq.n	80022f2 <HAL_RCC_OscConfig+0x37e>
 8002314:	e014      	b.n	8002340 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002316:	f7fe ffe7 	bl	80012e8 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7fe ffe3 	bl	80012e8 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e09b      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002334:	4b40      	ldr	r3, [pc, #256]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ee      	bne.n	800231e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d105      	bne.n	8002352 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002346:	4b3c      	ldr	r3, [pc, #240]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	4a3b      	ldr	r2, [pc, #236]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800234c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002350:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 8087 	beq.w	800246a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800235c:	4b36      	ldr	r3, [pc, #216]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d061      	beq.n	800242c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b02      	cmp	r3, #2
 800236e:	d146      	bne.n	80023fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b33      	ldr	r3, [pc, #204]	; (8002440 <HAL_RCC_OscConfig+0x4cc>)
 8002372:	2200      	movs	r2, #0
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7fe ffb7 	bl	80012e8 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237e:	f7fe ffb3 	bl	80012e8 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e06d      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002390:	4b29      	ldr	r3, [pc, #164]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f0      	bne.n	800237e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a4:	d108      	bne.n	80023b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023a6:	4b24      	ldr	r3, [pc, #144]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	4921      	ldr	r1, [pc, #132]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b8:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a19      	ldr	r1, [r3, #32]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	430b      	orrs	r3, r1
 80023ca:	491b      	ldr	r1, [pc, #108]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d0:	4b1b      	ldr	r3, [pc, #108]	; (8002440 <HAL_RCC_OscConfig+0x4cc>)
 80023d2:	2201      	movs	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d6:	f7fe ff87 	bl	80012e8 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023de:	f7fe ff83 	bl	80012e8 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e03d      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f0:	4b11      	ldr	r3, [pc, #68]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0f0      	beq.n	80023de <HAL_RCC_OscConfig+0x46a>
 80023fc:	e035      	b.n	800246a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_RCC_OscConfig+0x4cc>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe ff70 	bl	80012e8 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240c:	f7fe ff6c 	bl	80012e8 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e026      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x498>
 800242a:	e01e      	b.n	800246a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d107      	bne.n	8002444 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e019      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
 8002438:	40021000 	.word	0x40021000
 800243c:	40007000 	.word	0x40007000
 8002440:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_OscConfig+0x500>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	429a      	cmp	r2, r3
 8002456:	d106      	bne.n	8002466 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d001      	beq.n	800246a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	3718      	adds	r7, #24
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40021000 	.word	0x40021000

08002478 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0d0      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b6a      	ldr	r3, [pc, #424]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d910      	bls.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b67      	ldr	r3, [pc, #412]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f023 0207 	bic.w	r2, r3, #7
 80024a2:	4965      	ldr	r1, [pc, #404]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024aa:	4b63      	ldr	r3, [pc, #396]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d001      	beq.n	80024bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0b8      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0302 	and.w	r3, r3, #2
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0304 	and.w	r3, r3, #4
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024d4:	4b59      	ldr	r3, [pc, #356]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	4a58      	ldr	r2, [pc, #352]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0308 	and.w	r3, r3, #8
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024ec:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	4a52      	ldr	r2, [pc, #328]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f8:	4b50      	ldr	r3, [pc, #320]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	494d      	ldr	r1, [pc, #308]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002506:	4313      	orrs	r3, r2
 8002508:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d040      	beq.n	8002598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d107      	bne.n	800252e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d115      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e07f      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b02      	cmp	r3, #2
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e073      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	4b3d      	ldr	r3, [pc, #244]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e06b      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002556:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4936      	ldr	r1, [pc, #216]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002564:	4313      	orrs	r3, r2
 8002566:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002568:	f7fe febe 	bl	80012e8 <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7fe feba 	bl	80012e8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e053      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b2d      	ldr	r3, [pc, #180]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 020c 	and.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d1eb      	bne.n	8002570 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002598:	4b27      	ldr	r3, [pc, #156]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d210      	bcs.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f023 0207 	bic.w	r2, r3, #7
 80025ae:	4922      	ldr	r1, [pc, #136]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e032      	b.n	800262e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0304 	and.w	r3, r3, #4
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d4:	4b19      	ldr	r3, [pc, #100]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4916      	ldr	r1, [pc, #88]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025f2:	4b12      	ldr	r3, [pc, #72]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	490e      	ldr	r1, [pc, #56]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002606:	f000 f821 	bl	800264c <HAL_RCC_GetSysClockFreq>
 800260a:	4602      	mov	r2, r0
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	091b      	lsrs	r3, r3, #4
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	490a      	ldr	r1, [pc, #40]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 8002618:	5ccb      	ldrb	r3, [r1, r3]
 800261a:	fa22 f303 	lsr.w	r3, r2, r3
 800261e:	4a09      	ldr	r2, [pc, #36]	; (8002644 <HAL_RCC_ClockConfig+0x1cc>)
 8002620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002622:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x1d0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fe fe1c 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40022000 	.word	0x40022000
 800263c:	40021000 	.word	0x40021000
 8002640:	080051b0 	.word	0x080051b0
 8002644:	20000000 	.word	0x20000000
 8002648:	20000004 	.word	0x20000004

0800264c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800264c:	b490      	push	{r4, r7}
 800264e:	b08a      	sub	sp, #40	; 0x28
 8002650:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002652:	4b29      	ldr	r3, [pc, #164]	; (80026f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8002654:	1d3c      	adds	r4, r7, #4
 8002656:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002658:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800265c:	f240 2301 	movw	r3, #513	; 0x201
 8002660:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	2300      	movs	r3, #0
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002676:	4b21      	ldr	r3, [pc, #132]	; (80026fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x40>
 8002686:	2b08      	cmp	r3, #8
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x46>
 800268a:	e02b      	b.n	80026e4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800268c:	4b1c      	ldr	r3, [pc, #112]	; (8002700 <HAL_RCC_GetSysClockFreq+0xb4>)
 800268e:	623b      	str	r3, [r7, #32]
      break;
 8002690:	e02b      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	0c9b      	lsrs	r3, r3, #18
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3328      	adds	r3, #40	; 0x28
 800269c:	443b      	add	r3, r7
 800269e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80026a2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d012      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <HAL_RCC_GetSysClockFreq+0xb0>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	0c5b      	lsrs	r3, r3, #17
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	3328      	adds	r3, #40	; 0x28
 80026ba:	443b      	add	r3, r7
 80026bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80026c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026c6:	fb03 f202 	mul.w	r2, r3, r2
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	627b      	str	r3, [r7, #36]	; 0x24
 80026d2:	e004      	b.n	80026de <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	4a0b      	ldr	r2, [pc, #44]	; (8002704 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d8:	fb02 f303 	mul.w	r3, r2, r3
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	623b      	str	r3, [r7, #32]
      break;
 80026e2:	e002      	b.n	80026ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026e6:	623b      	str	r3, [r7, #32]
      break;
 80026e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ea:	6a3b      	ldr	r3, [r7, #32]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3728      	adds	r7, #40	; 0x28
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc90      	pop	{r4, r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	0800518c 	.word	0x0800518c
 80026fc:	40021000 	.word	0x40021000
 8002700:	007a1200 	.word	0x007a1200
 8002704:	003d0900 	.word	0x003d0900

08002708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800270c:	4b02      	ldr	r3, [pc, #8]	; (8002718 <HAL_RCC_GetHCLKFreq+0x10>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	bc80      	pop	{r7}
 8002716:	4770      	bx	lr
 8002718:	20000000 	.word	0x20000000

0800271c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002720:	f7ff fff2 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	0a1b      	lsrs	r3, r3, #8
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4903      	ldr	r1, [pc, #12]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	080051c0 	.word	0x080051c0

08002744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002748:	f7ff ffde 	bl	8002708 <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	0adb      	lsrs	r3, r3, #11
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4903      	ldr	r1, [pc, #12]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002760:	4618      	mov	r0, r3
 8002762:	bd80      	pop	{r7, pc}
 8002764:	40021000 	.word	0x40021000
 8002768:	080051c0 	.word	0x080051c0

0800276c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <RCC_Delay+0x34>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <RCC_Delay+0x38>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0a5b      	lsrs	r3, r3, #9
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	fb02 f303 	mul.w	r3, r2, r3
 8002786:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002788:	bf00      	nop
  }
  while (Delay --);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1e5a      	subs	r2, r3, #1
 800278e:	60fa      	str	r2, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1f9      	bne.n	8002788 <RCC_Delay+0x1c>
}
 8002794:	bf00      	nop
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr
 80027a0:	20000000 	.word	0x20000000
 80027a4:	10624dd3 	.word	0x10624dd3

080027a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e041      	b.n	800283e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d106      	bne.n	80027d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fe f9ee 	bl	8000bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3304      	adds	r3, #4
 80027e4:	4619      	mov	r1, r3
 80027e6:	4610      	mov	r0, r2
 80027e8:	f000 fd62 	bl	80032b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2201      	movs	r2, #1
 8002828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002848:	b480      	push	{r7}
 800284a:	b085      	sub	sp, #20
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d001      	beq.n	8002860 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e03a      	b.n	80028d6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f042 0201 	orr.w	r2, r2, #1
 8002876:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a18      	ldr	r2, [pc, #96]	; (80028e0 <HAL_TIM_Base_Start_IT+0x98>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00e      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x58>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d009      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x58>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a14      	ldr	r2, [pc, #80]	; (80028e4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x58>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a13      	ldr	r2, [pc, #76]	; (80028e8 <HAL_TIM_Base_Start_IT+0xa0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d111      	bne.n	80028c4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 0307 	and.w	r3, r3, #7
 80028aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b06      	cmp	r3, #6
 80028b0:	d010      	beq.n	80028d4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028c2:	e007      	b.n	80028d4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0201 	orr.w	r2, r2, #1
 80028d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40000400 	.word	0x40000400
 80028e8:	40000800 	.word	0x40000800

080028ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e041      	b.n	8002982 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d106      	bne.n	8002918 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f839 	bl	800298a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2202      	movs	r2, #2
 800291c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3304      	adds	r3, #4
 8002928:	4619      	mov	r1, r3
 800292a:	4610      	mov	r0, r2
 800292c:	f000 fcc0 	bl	80032b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800298a:	b480      	push	{r7}
 800298c:	b083      	sub	sp, #12
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr

0800299c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_TIM_PWM_Start+0x24>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	bf14      	ite	ne
 80029b8:	2301      	movne	r3, #1
 80029ba:	2300      	moveq	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e022      	b.n	8002a06 <HAL_TIM_PWM_Start+0x6a>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d109      	bne.n	80029da <HAL_TIM_PWM_Start+0x3e>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	bf14      	ite	ne
 80029d2:	2301      	movne	r3, #1
 80029d4:	2300      	moveq	r3, #0
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	e015      	b.n	8002a06 <HAL_TIM_PWM_Start+0x6a>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d109      	bne.n	80029f4 <HAL_TIM_PWM_Start+0x58>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	bf14      	ite	ne
 80029ec:	2301      	movne	r3, #1
 80029ee:	2300      	moveq	r3, #0
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	e008      	b.n	8002a06 <HAL_TIM_PWM_Start+0x6a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	bf14      	ite	ne
 8002a00:	2301      	movne	r3, #1
 8002a02:	2300      	moveq	r3, #0
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e05e      	b.n	8002acc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d104      	bne.n	8002a1e <HAL_TIM_PWM_Start+0x82>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2202      	movs	r2, #2
 8002a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a1c:	e013      	b.n	8002a46 <HAL_TIM_PWM_Start+0xaa>
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d104      	bne.n	8002a2e <HAL_TIM_PWM_Start+0x92>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2202      	movs	r2, #2
 8002a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a2c:	e00b      	b.n	8002a46 <HAL_TIM_PWM_Start+0xaa>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d104      	bne.n	8002a3e <HAL_TIM_PWM_Start+0xa2>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a3c:	e003      	b.n	8002a46 <HAL_TIM_PWM_Start+0xaa>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2202      	movs	r2, #2
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	6839      	ldr	r1, [r7, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 feae 	bl	80037b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1e      	ldr	r2, [pc, #120]	; (8002ad4 <HAL_TIM_PWM_Start+0x138>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d107      	bne.n	8002a6e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a18      	ldr	r2, [pc, #96]	; (8002ad4 <HAL_TIM_PWM_Start+0x138>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d00e      	beq.n	8002a96 <HAL_TIM_PWM_Start+0xfa>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a80:	d009      	beq.n	8002a96 <HAL_TIM_PWM_Start+0xfa>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a14      	ldr	r2, [pc, #80]	; (8002ad8 <HAL_TIM_PWM_Start+0x13c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d004      	beq.n	8002a96 <HAL_TIM_PWM_Start+0xfa>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a12      	ldr	r2, [pc, #72]	; (8002adc <HAL_TIM_PWM_Start+0x140>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d111      	bne.n	8002aba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2b06      	cmp	r3, #6
 8002aa6:	d010      	beq.n	8002aca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ab8:	e007      	b.n	8002aca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f042 0201 	orr.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40012c00 	.word	0x40012c00
 8002ad8:	40000400 	.word	0x40000400
 8002adc:	40000800 	.word	0x40000800

08002ae0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b086      	sub	sp, #24
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e093      	b.n	8002c1c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d106      	bne.n	8002b0e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7fe f88b 	bl	8000c24 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b24:	f023 0307 	bic.w	r3, r3, #7
 8002b28:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	4619      	mov	r1, r3
 8002b34:	4610      	mov	r0, r2
 8002b36:	f000 fbbb 	bl	80032b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b62:	f023 0303 	bic.w	r3, r3, #3
 8002b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	4313      	orrs	r3, r2
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002b80:	f023 030c 	bic.w	r3, r3, #12
 8002b84:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691b      	ldr	r3, [r3, #16]
 8002ba8:	011a      	lsls	r2, r3, #4
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	031b      	lsls	r3, r3, #12
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002bbe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	68fa      	ldr	r2, [r7, #12]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c34:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c3c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c44:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c4c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d110      	bne.n	8002c76 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d102      	bne.n	8002c60 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c5a:	7b7b      	ldrb	r3, [r7, #13]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d001      	beq.n	8002c64 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e069      	b.n	8002d38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c74:	e031      	b.n	8002cda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d110      	bne.n	8002c9e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c7c:	7bbb      	ldrb	r3, [r7, #14]
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d102      	bne.n	8002c88 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002c82:	7b3b      	ldrb	r3, [r7, #12]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d001      	beq.n	8002c8c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e055      	b.n	8002d38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c9c:	e01d      	b.n	8002cda <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002c9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d108      	bne.n	8002cb6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ca4:	7bbb      	ldrb	r3, [r7, #14]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d105      	bne.n	8002cb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002caa:	7b7b      	ldrb	r3, [r7, #13]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d102      	bne.n	8002cb6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cb0:	7b3b      	ldrb	r3, [r7, #12]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d001      	beq.n	8002cba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e03e      	b.n	8002d38 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_TIM_Encoder_Start+0xc4>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d008      	beq.n	8002cf8 <HAL_TIM_Encoder_Start+0xd4>
 8002ce6:	e00f      	b.n	8002d08 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2201      	movs	r2, #1
 8002cee:	2100      	movs	r1, #0
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fd5d 	bl	80037b0 <TIM_CCxChannelCmd>
      break;
 8002cf6:	e016      	b.n	8002d26 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	2104      	movs	r1, #4
 8002d00:	4618      	mov	r0, r3
 8002d02:	f000 fd55 	bl	80037b0 <TIM_CCxChannelCmd>
      break;
 8002d06:	e00e      	b.n	8002d26 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 fd4d 	bl	80037b0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	2104      	movs	r1, #4
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fd46 	bl	80037b0 <TIM_CCxChannelCmd>
      break;
 8002d24:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0201 	orr.w	r2, r2, #1
 8002d34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d122      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d11b      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0202 	mvn.w	r2, #2
 8002d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 fa78 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa6b 	bl	8003266 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 fa7a 	bl	800328a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d122      	bne.n	8002df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d11b      	bne.n	8002df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0204 	mvn.w	r2, #4
 8002dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 fa4e 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
 8002ddc:	e005      	b.n	8002dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 fa41 	bl	8003266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fa50 	bl	800328a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b08      	cmp	r3, #8
 8002dfc:	d122      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d11b      	bne.n	8002e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f06f 0208 	mvn.w	r2, #8
 8002e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2204      	movs	r2, #4
 8002e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69db      	ldr	r3, [r3, #28]
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fa24 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
 8002e30:	e005      	b.n	8002e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fa17 	bl	8003266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 fa26 	bl	800328a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	691b      	ldr	r3, [r3, #16]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b10      	cmp	r3, #16
 8002e50:	d122      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b10      	cmp	r3, #16
 8002e5e:	d11b      	bne.n	8002e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f06f 0210 	mvn.w	r2, #16
 8002e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	69db      	ldr	r3, [r3, #28]
 8002e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d003      	beq.n	8002e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 f9fa 	bl	8003278 <HAL_TIM_IC_CaptureCallback>
 8002e84:	e005      	b.n	8002e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f9ed 	bl	8003266 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f9fc 	bl	800328a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d107      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f06f 0201 	mvn.w	r2, #1
 8002ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 f9c8 	bl	8003254 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ece:	2b80      	cmp	r3, #128	; 0x80
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002edc:	2b80      	cmp	r3, #128	; 0x80
 8002ede:	d107      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fceb 	bl	80038c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efa:	2b40      	cmp	r3, #64	; 0x40
 8002efc:	d10e      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f08:	2b40      	cmp	r3, #64	; 0x40
 8002f0a:	d107      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f9c0 	bl	800329c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0320 	and.w	r3, r3, #32
 8002f26:	2b20      	cmp	r3, #32
 8002f28:	d10e      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b20      	cmp	r3, #32
 8002f36:	d107      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0220 	mvn.w	r2, #32
 8002f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fcb6 	bl	80038b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e0ac      	b.n	80030c4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b0c      	cmp	r3, #12
 8002f76:	f200 809f 	bhi.w	80030b8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002f7a:	a201      	add	r2, pc, #4	; (adr r2, 8002f80 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f80:	08002fb5 	.word	0x08002fb5
 8002f84:	080030b9 	.word	0x080030b9
 8002f88:	080030b9 	.word	0x080030b9
 8002f8c:	080030b9 	.word	0x080030b9
 8002f90:	08002ff5 	.word	0x08002ff5
 8002f94:	080030b9 	.word	0x080030b9
 8002f98:	080030b9 	.word	0x080030b9
 8002f9c:	080030b9 	.word	0x080030b9
 8002fa0:	08003037 	.word	0x08003037
 8002fa4:	080030b9 	.word	0x080030b9
 8002fa8:	080030b9 	.word	0x080030b9
 8002fac:	080030b9 	.word	0x080030b9
 8002fb0:	08003077 	.word	0x08003077
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f000 f9da 	bl	8003374 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0208 	orr.w	r2, r2, #8
 8002fce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699a      	ldr	r2, [r3, #24]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0204 	bic.w	r2, r2, #4
 8002fde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6999      	ldr	r1, [r3, #24]
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	619a      	str	r2, [r3, #24]
      break;
 8002ff2:	e062      	b.n	80030ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68b9      	ldr	r1, [r7, #8]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fa20 	bl	8003440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800300e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	699a      	ldr	r2, [r3, #24]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800301e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6999      	ldr	r1, [r3, #24]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	021a      	lsls	r2, r3, #8
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	619a      	str	r2, [r3, #24]
      break;
 8003034:	e041      	b.n	80030ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68b9      	ldr	r1, [r7, #8]
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fa69 	bl	8003514 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	69da      	ldr	r2, [r3, #28]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0208 	orr.w	r2, r2, #8
 8003050:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0204 	bic.w	r2, r2, #4
 8003060:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	69d9      	ldr	r1, [r3, #28]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	61da      	str	r2, [r3, #28]
      break;
 8003074:	e021      	b.n	80030ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fab3 	bl	80035e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	69da      	ldr	r2, [r3, #28]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003090:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	69da      	ldr	r2, [r3, #28]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69d9      	ldr	r1, [r3, #28]
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	021a      	lsls	r2, r3, #8
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	61da      	str	r2, [r3, #28]
      break;
 80030b6:	e000      	b.n	80030ba <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80030b8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_TIM_ConfigClockSource+0x18>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e0b3      	b.n	800324c <HAL_TIM_ConfigClockSource+0x180>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003102:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800310a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311c:	d03e      	beq.n	800319c <HAL_TIM_ConfigClockSource+0xd0>
 800311e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003122:	f200 8087 	bhi.w	8003234 <HAL_TIM_ConfigClockSource+0x168>
 8003126:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800312a:	f000 8085 	beq.w	8003238 <HAL_TIM_ConfigClockSource+0x16c>
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003132:	d87f      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x168>
 8003134:	2b70      	cmp	r3, #112	; 0x70
 8003136:	d01a      	beq.n	800316e <HAL_TIM_ConfigClockSource+0xa2>
 8003138:	2b70      	cmp	r3, #112	; 0x70
 800313a:	d87b      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x168>
 800313c:	2b60      	cmp	r3, #96	; 0x60
 800313e:	d050      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0x116>
 8003140:	2b60      	cmp	r3, #96	; 0x60
 8003142:	d877      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x168>
 8003144:	2b50      	cmp	r3, #80	; 0x50
 8003146:	d03c      	beq.n	80031c2 <HAL_TIM_ConfigClockSource+0xf6>
 8003148:	2b50      	cmp	r3, #80	; 0x50
 800314a:	d873      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x168>
 800314c:	2b40      	cmp	r3, #64	; 0x40
 800314e:	d058      	beq.n	8003202 <HAL_TIM_ConfigClockSource+0x136>
 8003150:	2b40      	cmp	r3, #64	; 0x40
 8003152:	d86f      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x168>
 8003154:	2b30      	cmp	r3, #48	; 0x30
 8003156:	d064      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0x156>
 8003158:	2b30      	cmp	r3, #48	; 0x30
 800315a:	d86b      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x168>
 800315c:	2b20      	cmp	r3, #32
 800315e:	d060      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0x156>
 8003160:	2b20      	cmp	r3, #32
 8003162:	d867      	bhi.n	8003234 <HAL_TIM_ConfigClockSource+0x168>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d05c      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0x156>
 8003168:	2b10      	cmp	r3, #16
 800316a:	d05a      	beq.n	8003222 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800316c:	e062      	b.n	8003234 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	6899      	ldr	r1, [r3, #8]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685a      	ldr	r2, [r3, #4]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	f000 faf8 	bl	8003772 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003190:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	609a      	str	r2, [r3, #8]
      break;
 800319a:	e04e      	b.n	800323a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6818      	ldr	r0, [r3, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	6899      	ldr	r1, [r3, #8]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f000 fae1 	bl	8003772 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031be:	609a      	str	r2, [r3, #8]
      break;
 80031c0:	e03b      	b.n	800323a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6859      	ldr	r1, [r3, #4]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	461a      	mov	r2, r3
 80031d0:	f000 fa58 	bl	8003684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2150      	movs	r1, #80	; 0x50
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 faaf 	bl	800373e <TIM_ITRx_SetConfig>
      break;
 80031e0:	e02b      	b.n	800323a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6859      	ldr	r1, [r3, #4]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	461a      	mov	r2, r3
 80031f0:	f000 fa76 	bl	80036e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	2160      	movs	r1, #96	; 0x60
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fa9f 	bl	800373e <TIM_ITRx_SetConfig>
      break;
 8003200:	e01b      	b.n	800323a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6859      	ldr	r1, [r3, #4]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	461a      	mov	r2, r3
 8003210:	f000 fa38 	bl	8003684 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2140      	movs	r1, #64	; 0x40
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fa8f 	bl	800373e <TIM_ITRx_SetConfig>
      break;
 8003220:	e00b      	b.n	800323a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4619      	mov	r1, r3
 800322c:	4610      	mov	r0, r2
 800322e:	f000 fa86 	bl	800373e <TIM_ITRx_SetConfig>
        break;
 8003232:	e002      	b.n	800323a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003234:	bf00      	nop
 8003236:	e000      	b.n	800323a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003238:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr

08003266 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bc80      	pop	{r7}
 8003288:	4770      	bx	lr

0800328a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bc80      	pop	{r7}
 80032ac:	4770      	bx	lr
	...

080032b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a29      	ldr	r2, [pc, #164]	; (8003368 <TIM_Base_SetConfig+0xb8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00b      	beq.n	80032e0 <TIM_Base_SetConfig+0x30>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ce:	d007      	beq.n	80032e0 <TIM_Base_SetConfig+0x30>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a26      	ldr	r2, [pc, #152]	; (800336c <TIM_Base_SetConfig+0xbc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d003      	beq.n	80032e0 <TIM_Base_SetConfig+0x30>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a25      	ldr	r2, [pc, #148]	; (8003370 <TIM_Base_SetConfig+0xc0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d108      	bne.n	80032f2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a1c      	ldr	r2, [pc, #112]	; (8003368 <TIM_Base_SetConfig+0xb8>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00b      	beq.n	8003312 <TIM_Base_SetConfig+0x62>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003300:	d007      	beq.n	8003312 <TIM_Base_SetConfig+0x62>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a19      	ldr	r2, [pc, #100]	; (800336c <TIM_Base_SetConfig+0xbc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_Base_SetConfig+0x62>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a18      	ldr	r2, [pc, #96]	; (8003370 <TIM_Base_SetConfig+0xc0>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d108      	bne.n	8003324 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a07      	ldr	r2, [pc, #28]	; (8003368 <TIM_Base_SetConfig+0xb8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d103      	bne.n	8003358 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	691a      	ldr	r2, [r3, #16]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	615a      	str	r2, [r3, #20]
}
 800335e:	bf00      	nop
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr
 8003368:	40012c00 	.word	0x40012c00
 800336c:	40000400 	.word	0x40000400
 8003370:	40000800 	.word	0x40000800

08003374 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	f023 0201 	bic.w	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0303 	bic.w	r3, r3, #3
 80033aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f023 0302 	bic.w	r3, r3, #2
 80033bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a1c      	ldr	r2, [pc, #112]	; (800343c <TIM_OC1_SetConfig+0xc8>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d10c      	bne.n	80033ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	f023 0308 	bic.w	r3, r3, #8
 80033d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f023 0304 	bic.w	r3, r3, #4
 80033e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a13      	ldr	r2, [pc, #76]	; (800343c <TIM_OC1_SetConfig+0xc8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d111      	bne.n	8003416 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	621a      	str	r2, [r3, #32]
}
 8003430:	bf00      	nop
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	40012c00 	.word	0x40012c00

08003440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f023 0210 	bic.w	r2, r3, #16
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800346e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	021b      	lsls	r3, r3, #8
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	4313      	orrs	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0320 	bic.w	r3, r3, #32
 800348a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a1d      	ldr	r2, [pc, #116]	; (8003510 <TIM_OC2_SetConfig+0xd0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d10d      	bne.n	80034bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	011b      	lsls	r3, r3, #4
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a14      	ldr	r2, [pc, #80]	; (8003510 <TIM_OC2_SetConfig+0xd0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d113      	bne.n	80034ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	621a      	str	r2, [r3, #32]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	40012c00 	.word	0x40012c00

08003514 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f023 0303 	bic.w	r3, r3, #3
 800354a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800355c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1d      	ldr	r2, [pc, #116]	; (80035e4 <TIM_OC3_SetConfig+0xd0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10d      	bne.n	800358e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800358c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <TIM_OC3_SetConfig+0xd0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d113      	bne.n	80035be <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800359c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	621a      	str	r2, [r3, #32]
}
 80035d8:	bf00      	nop
 80035da:	371c      	adds	r7, #28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bc80      	pop	{r7}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40012c00 	.word	0x40012c00

080035e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800361e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	021b      	lsls	r3, r3, #8
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	031b      	lsls	r3, r3, #12
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a0f      	ldr	r2, [pc, #60]	; (8003680 <TIM_OC4_SetConfig+0x98>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d109      	bne.n	800365c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800364e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	019b      	lsls	r3, r3, #6
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	685a      	ldr	r2, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	bf00      	nop
 8003678:	371c      	adds	r7, #28
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr
 8003680:	40012c00 	.word	0x40012c00

08003684 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f023 0201 	bic.w	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f023 030a 	bic.w	r3, r3, #10
 80036c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	693a      	ldr	r2, [r7, #16]
 80036ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	621a      	str	r2, [r3, #32]
}
 80036d6:	bf00      	nop
 80036d8:	371c      	adds	r7, #28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f023 0210 	bic.w	r2, r3, #16
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800370a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	031b      	lsls	r3, r3, #12
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800371c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	621a      	str	r2, [r3, #32]
}
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003754:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	f043 0307 	orr.w	r3, r3, #7
 8003760:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	609a      	str	r2, [r3, #8]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003772:	b480      	push	{r7}
 8003774:	b087      	sub	sp, #28
 8003776:	af00      	add	r7, sp, #0
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800378c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	021a      	lsls	r2, r3, #8
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	431a      	orrs	r2, r3
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	4313      	orrs	r3, r2
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	609a      	str	r2, [r3, #8]
}
 80037a6:	bf00      	nop
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	2201      	movs	r2, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a1a      	ldr	r2, [r3, #32]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	43db      	mvns	r3, r3
 80037d2:	401a      	ands	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a1a      	ldr	r2, [r3, #32]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f003 031f 	and.w	r3, r3, #31
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	fa01 f303 	lsl.w	r3, r1, r3
 80037e8:	431a      	orrs	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	621a      	str	r2, [r3, #32]
}
 80037ee:	bf00      	nop
 80037f0:	371c      	adds	r7, #28
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003808:	2b01      	cmp	r3, #1
 800380a:	d101      	bne.n	8003810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800380c:	2302      	movs	r3, #2
 800380e:	e046      	b.n	800389e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2202      	movs	r2, #2
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	4313      	orrs	r3, r2
 8003840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a16      	ldr	r2, [pc, #88]	; (80038a8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00e      	beq.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800385c:	d009      	beq.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a12      	ldr	r2, [pc, #72]	; (80038ac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a10      	ldr	r2, [pc, #64]	; (80038b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d10c      	bne.n	800388c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	4313      	orrs	r3, r2
 8003882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr
 80038a8:	40012c00 	.word	0x40012c00
 80038ac:	40000400 	.word	0x40000400
 80038b0:	40000800 	.word	0x40000800

080038b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e03f      	b.n	800396a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fd fa56 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2224      	movs	r2, #36	; 0x24
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800391a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fb49 	bl	8003fb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003930:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003940:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003950:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2220      	movs	r2, #32
 8003964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003994:	2300      	movs	r3, #0
 8003996:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003998:	2300      	movs	r3, #0
 800399a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	f003 030f 	and.w	r3, r3, #15
 80039a2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10d      	bne.n	80039c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	f003 0320 	and.w	r3, r3, #32
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_UART_IRQHandler+0x52>
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 fa4f 	bl	8003e62 <UART_Receive_IT>
      return;
 80039c4:	e17b      	b.n	8003cbe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80b1 	beq.w	8003b30 <HAL_UART_IRQHandler+0x1bc>
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d105      	bne.n	80039e4 <HAL_UART_IRQHandler+0x70>
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 80a6 	beq.w	8003b30 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_UART_IRQHandler+0x90>
 80039ee:	6a3b      	ldr	r3, [r7, #32]
 80039f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d005      	beq.n	8003a04 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f043 0201 	orr.w	r2, r3, #1
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00a      	beq.n	8003a24 <HAL_UART_IRQHandler+0xb0>
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d005      	beq.n	8003a24 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	f043 0202 	orr.w	r2, r3, #2
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <HAL_UART_IRQHandler+0xd0>
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d005      	beq.n	8003a44 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	f043 0204 	orr.w	r2, r3, #4
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00f      	beq.n	8003a6e <HAL_UART_IRQHandler+0xfa>
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	f003 0320 	and.w	r3, r3, #32
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d104      	bne.n	8003a62 <HAL_UART_IRQHandler+0xee>
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	f043 0208 	orr.w	r2, r3, #8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 811e 	beq.w	8003cb4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d007      	beq.n	8003a92 <HAL_UART_IRQHandler+0x11e>
 8003a82:	6a3b      	ldr	r3, [r7, #32]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f9e8 	bl	8003e62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf14      	ite	ne
 8003aa0:	2301      	movne	r3, #1
 8003aa2:	2300      	moveq	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d102      	bne.n	8003aba <HAL_UART_IRQHandler+0x146>
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d031      	beq.n	8003b1e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f92a 	bl	8003d14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d023      	beq.n	8003b16 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695a      	ldr	r2, [r3, #20]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003adc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d013      	beq.n	8003b0e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	4a76      	ldr	r2, [pc, #472]	; (8003cc4 <HAL_UART_IRQHandler+0x350>)
 8003aec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fdc8 	bl	8001688 <HAL_DMA_Abort_IT>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d016      	beq.n	8003b2c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b0c:	e00e      	b.n	8003b2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f8ec 	bl	8003cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b14:	e00a      	b.n	8003b2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f8e8 	bl	8003cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b1c:	e006      	b.n	8003b2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f8e4 	bl	8003cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003b2a:	e0c3      	b.n	8003cb4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b2c:	bf00      	nop
    return;
 8003b2e:	e0c1      	b.n	8003cb4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	f040 80a1 	bne.w	8003c7c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	f000 809b 	beq.w	8003c7c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8095 	beq.w	8003c7c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d04e      	beq.n	8003c14 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003b80:	8a3b      	ldrh	r3, [r7, #16]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 8098 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b8c:	8a3a      	ldrh	r2, [r7, #16]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	f080 8092 	bcs.w	8003cb8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8a3a      	ldrh	r2, [r7, #16]
 8003b98:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b20      	cmp	r3, #32
 8003ba2:	d02b      	beq.n	8003bfc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bb2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f022 0201 	bic.w	r2, r2, #1
 8003bc2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0210 	bic.w	r2, r2, #16
 8003bf0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fd fd0c 	bl	8001614 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 f876 	bl	8003cfe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c12:	e051      	b.n	8003cb8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d047      	beq.n	8003cbc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003c2c:	8a7b      	ldrh	r3, [r7, #18]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d044      	beq.n	8003cbc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003c40:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	695a      	ldr	r2, [r3, #20]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0201 	bic.w	r2, r2, #1
 8003c50:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0210 	bic.w	r2, r2, #16
 8003c6e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c70:	8a7b      	ldrh	r3, [r7, #18]
 8003c72:	4619      	mov	r1, r3
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f000 f842 	bl	8003cfe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003c7a:	e01f      	b.n	8003cbc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d008      	beq.n	8003c98 <HAL_UART_IRQHandler+0x324>
 8003c86:	6a3b      	ldr	r3, [r7, #32]
 8003c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f87f 	bl	8003d94 <UART_Transmit_IT>
    return;
 8003c96:	e012      	b.n	8003cbe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00d      	beq.n	8003cbe <HAL_UART_IRQHandler+0x34a>
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d008      	beq.n	8003cbe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f8c0 	bl	8003e32 <UART_EndTransmit_IT>
    return;
 8003cb2:	e004      	b.n	8003cbe <HAL_UART_IRQHandler+0x34a>
    return;
 8003cb4:	bf00      	nop
 8003cb6:	e002      	b.n	8003cbe <HAL_UART_IRQHandler+0x34a>
      return;
 8003cb8:	bf00      	nop
 8003cba:	e000      	b.n	8003cbe <HAL_UART_IRQHandler+0x34a>
      return;
 8003cbc:	bf00      	nop
  }
}
 8003cbe:	3728      	adds	r7, #40	; 0x28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	08003d6d 	.word	0x08003d6d

08003cc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr

08003cda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cda:	b480      	push	{r7}
 8003cdc:	b083      	sub	sp, #12
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003ce2:	bf00      	nop
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr

08003cec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bc80      	pop	{r7}
 8003cfc:	4770      	bx	lr

08003cfe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	460b      	mov	r3, r1
 8003d08:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d0a:	bf00      	nop
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003d2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695a      	ldr	r2, [r3, #20]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f022 0201 	bic.w	r2, r2, #1
 8003d3a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d107      	bne.n	8003d54 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68da      	ldr	r2, [r3, #12]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0210 	bic.w	r2, r2, #16
 8003d52:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr

08003d6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f7ff ffb0 	bl	8003cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b21      	cmp	r3, #33	; 0x21
 8003da6:	d13e      	bne.n	8003e26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003db0:	d114      	bne.n	8003ddc <UART_Transmit_IT+0x48>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d110      	bne.n	8003ddc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	881b      	ldrh	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	1c9a      	adds	r2, r3, #2
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	621a      	str	r2, [r3, #32]
 8003dda:	e008      	b.n	8003dee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	1c59      	adds	r1, r3, #1
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6211      	str	r1, [r2, #32]
 8003de6:	781a      	ldrb	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10f      	bne.n	8003e22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68da      	ldr	r2, [r3, #12]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	e000      	b.n	8003e28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e26:	2302      	movs	r3, #2
  }
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3714      	adds	r7, #20
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bc80      	pop	{r7}
 8003e30:	4770      	bx	lr

08003e32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff ff38 	bl	8003cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b086      	sub	sp, #24
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b22      	cmp	r3, #34	; 0x22
 8003e74:	f040 8099 	bne.w	8003faa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e80:	d117      	bne.n	8003eb2 <UART_Receive_IT+0x50>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d113      	bne.n	8003eb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e92:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	1c9a      	adds	r2, r3, #2
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	629a      	str	r2, [r3, #40]	; 0x28
 8003eb0:	e026      	b.n	8003f00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec4:	d007      	beq.n	8003ed6 <UART_Receive_IT+0x74>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d10a      	bne.n	8003ee4 <UART_Receive_IT+0x82>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	b2da      	uxtb	r2, r3
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	e008      	b.n	8003ef6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d148      	bne.n	8003fa6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0220 	bic.w	r2, r2, #32
 8003f22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695a      	ldr	r2, [r3, #20]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f022 0201 	bic.w	r2, r2, #1
 8003f42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2220      	movs	r2, #32
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d123      	bne.n	8003f9c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0210 	bic.w	r2, r2, #16
 8003f68:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d10a      	bne.n	8003f8e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f92:	4619      	mov	r1, r3
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff feb2 	bl	8003cfe <HAL_UARTEx_RxEventCallback>
 8003f9a:	e002      	b.n	8003fa2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff fe9c 	bl	8003cda <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e002      	b.n	8003fac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	e000      	b.n	8003fac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003faa:	2302      	movs	r3, #2
  }
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68da      	ldr	r2, [r3, #12]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fee:	f023 030c 	bic.w	r3, r3, #12
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	699a      	ldr	r2, [r3, #24]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2c      	ldr	r2, [pc, #176]	; (80040c8 <UART_SetConfig+0x114>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d103      	bne.n	8004024 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800401c:	f7fe fb92 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	e002      	b.n	800402a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004024:	f7fe fb7a 	bl	800271c <HAL_RCC_GetPCLK1Freq>
 8004028:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009a      	lsls	r2, r3, #2
 8004034:	441a      	add	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004040:	4a22      	ldr	r2, [pc, #136]	; (80040cc <UART_SetConfig+0x118>)
 8004042:	fba2 2303 	umull	r2, r3, r2, r3
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	0119      	lsls	r1, r3, #4
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4613      	mov	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	4413      	add	r3, r2
 8004052:	009a      	lsls	r2, r3, #2
 8004054:	441a      	add	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <UART_SetConfig+0x118>)
 8004062:	fba3 0302 	umull	r0, r3, r3, r2
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	2064      	movs	r0, #100	; 0x64
 800406a:	fb00 f303 	mul.w	r3, r0, r3
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	3332      	adds	r3, #50	; 0x32
 8004074:	4a15      	ldr	r2, [pc, #84]	; (80040cc <UART_SetConfig+0x118>)
 8004076:	fba2 2303 	umull	r2, r3, r2, r3
 800407a:	095b      	lsrs	r3, r3, #5
 800407c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004080:	4419      	add	r1, r3
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4613      	mov	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4413      	add	r3, r2
 800408a:	009a      	lsls	r2, r3, #2
 800408c:	441a      	add	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	fbb2 f2f3 	udiv	r2, r2, r3
 8004098:	4b0c      	ldr	r3, [pc, #48]	; (80040cc <UART_SetConfig+0x118>)
 800409a:	fba3 0302 	umull	r0, r3, r3, r2
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	2064      	movs	r0, #100	; 0x64
 80040a2:	fb00 f303 	mul.w	r3, r0, r3
 80040a6:	1ad3      	subs	r3, r2, r3
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	3332      	adds	r3, #50	; 0x32
 80040ac:	4a07      	ldr	r2, [pc, #28]	; (80040cc <UART_SetConfig+0x118>)
 80040ae:	fba2 2303 	umull	r2, r3, r2, r3
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	f003 020f 	and.w	r2, r3, #15
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	440a      	add	r2, r1
 80040be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40013800 	.word	0x40013800
 80040cc:	51eb851f 	.word	0x51eb851f

080040d0 <__assert_func>:
 80040d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040d2:	4614      	mov	r4, r2
 80040d4:	461a      	mov	r2, r3
 80040d6:	4b09      	ldr	r3, [pc, #36]	; (80040fc <__assert_func+0x2c>)
 80040d8:	4605      	mov	r5, r0
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68d8      	ldr	r0, [r3, #12]
 80040de:	b14c      	cbz	r4, 80040f4 <__assert_func+0x24>
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <__assert_func+0x30>)
 80040e2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80040e6:	9100      	str	r1, [sp, #0]
 80040e8:	462b      	mov	r3, r5
 80040ea:	4906      	ldr	r1, [pc, #24]	; (8004104 <__assert_func+0x34>)
 80040ec:	f000 f814 	bl	8004118 <fiprintf>
 80040f0:	f000 fbfe 	bl	80048f0 <abort>
 80040f4:	4b04      	ldr	r3, [pc, #16]	; (8004108 <__assert_func+0x38>)
 80040f6:	461c      	mov	r4, r3
 80040f8:	e7f3      	b.n	80040e2 <__assert_func+0x12>
 80040fa:	bf00      	nop
 80040fc:	2000000c 	.word	0x2000000c
 8004100:	080051c8 	.word	0x080051c8
 8004104:	080051d5 	.word	0x080051d5
 8004108:	08005203 	.word	0x08005203

0800410c <__errno>:
 800410c:	4b01      	ldr	r3, [pc, #4]	; (8004114 <__errno+0x8>)
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	2000000c 	.word	0x2000000c

08004118 <fiprintf>:
 8004118:	b40e      	push	{r1, r2, r3}
 800411a:	b503      	push	{r0, r1, lr}
 800411c:	4601      	mov	r1, r0
 800411e:	ab03      	add	r3, sp, #12
 8004120:	4805      	ldr	r0, [pc, #20]	; (8004138 <fiprintf+0x20>)
 8004122:	f853 2b04 	ldr.w	r2, [r3], #4
 8004126:	6800      	ldr	r0, [r0, #0]
 8004128:	9301      	str	r3, [sp, #4]
 800412a:	f000 f85b 	bl	80041e4 <_vfiprintf_r>
 800412e:	b002      	add	sp, #8
 8004130:	f85d eb04 	ldr.w	lr, [sp], #4
 8004134:	b003      	add	sp, #12
 8004136:	4770      	bx	lr
 8004138:	2000000c 	.word	0x2000000c

0800413c <__libc_init_array>:
 800413c:	b570      	push	{r4, r5, r6, lr}
 800413e:	2600      	movs	r6, #0
 8004140:	4d0c      	ldr	r5, [pc, #48]	; (8004174 <__libc_init_array+0x38>)
 8004142:	4c0d      	ldr	r4, [pc, #52]	; (8004178 <__libc_init_array+0x3c>)
 8004144:	1b64      	subs	r4, r4, r5
 8004146:	10a4      	asrs	r4, r4, #2
 8004148:	42a6      	cmp	r6, r4
 800414a:	d109      	bne.n	8004160 <__libc_init_array+0x24>
 800414c:	f000 ffea 	bl	8005124 <_init>
 8004150:	2600      	movs	r6, #0
 8004152:	4d0a      	ldr	r5, [pc, #40]	; (800417c <__libc_init_array+0x40>)
 8004154:	4c0a      	ldr	r4, [pc, #40]	; (8004180 <__libc_init_array+0x44>)
 8004156:	1b64      	subs	r4, r4, r5
 8004158:	10a4      	asrs	r4, r4, #2
 800415a:	42a6      	cmp	r6, r4
 800415c:	d105      	bne.n	800416a <__libc_init_array+0x2e>
 800415e:	bd70      	pop	{r4, r5, r6, pc}
 8004160:	f855 3b04 	ldr.w	r3, [r5], #4
 8004164:	4798      	blx	r3
 8004166:	3601      	adds	r6, #1
 8004168:	e7ee      	b.n	8004148 <__libc_init_array+0xc>
 800416a:	f855 3b04 	ldr.w	r3, [r5], #4
 800416e:	4798      	blx	r3
 8004170:	3601      	adds	r6, #1
 8004172:	e7f2      	b.n	800415a <__libc_init_array+0x1e>
 8004174:	0800529c 	.word	0x0800529c
 8004178:	0800529c 	.word	0x0800529c
 800417c:	0800529c 	.word	0x0800529c
 8004180:	080052a0 	.word	0x080052a0

08004184 <memset>:
 8004184:	4603      	mov	r3, r0
 8004186:	4402      	add	r2, r0
 8004188:	4293      	cmp	r3, r2
 800418a:	d100      	bne.n	800418e <memset+0xa>
 800418c:	4770      	bx	lr
 800418e:	f803 1b01 	strb.w	r1, [r3], #1
 8004192:	e7f9      	b.n	8004188 <memset+0x4>

08004194 <__sfputc_r>:
 8004194:	6893      	ldr	r3, [r2, #8]
 8004196:	b410      	push	{r4}
 8004198:	3b01      	subs	r3, #1
 800419a:	2b00      	cmp	r3, #0
 800419c:	6093      	str	r3, [r2, #8]
 800419e:	da07      	bge.n	80041b0 <__sfputc_r+0x1c>
 80041a0:	6994      	ldr	r4, [r2, #24]
 80041a2:	42a3      	cmp	r3, r4
 80041a4:	db01      	blt.n	80041aa <__sfputc_r+0x16>
 80041a6:	290a      	cmp	r1, #10
 80041a8:	d102      	bne.n	80041b0 <__sfputc_r+0x1c>
 80041aa:	bc10      	pop	{r4}
 80041ac:	f000 bae0 	b.w	8004770 <__swbuf_r>
 80041b0:	6813      	ldr	r3, [r2, #0]
 80041b2:	1c58      	adds	r0, r3, #1
 80041b4:	6010      	str	r0, [r2, #0]
 80041b6:	7019      	strb	r1, [r3, #0]
 80041b8:	4608      	mov	r0, r1
 80041ba:	bc10      	pop	{r4}
 80041bc:	4770      	bx	lr

080041be <__sfputs_r>:
 80041be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c0:	4606      	mov	r6, r0
 80041c2:	460f      	mov	r7, r1
 80041c4:	4614      	mov	r4, r2
 80041c6:	18d5      	adds	r5, r2, r3
 80041c8:	42ac      	cmp	r4, r5
 80041ca:	d101      	bne.n	80041d0 <__sfputs_r+0x12>
 80041cc:	2000      	movs	r0, #0
 80041ce:	e007      	b.n	80041e0 <__sfputs_r+0x22>
 80041d0:	463a      	mov	r2, r7
 80041d2:	4630      	mov	r0, r6
 80041d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041d8:	f7ff ffdc 	bl	8004194 <__sfputc_r>
 80041dc:	1c43      	adds	r3, r0, #1
 80041de:	d1f3      	bne.n	80041c8 <__sfputs_r+0xa>
 80041e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041e4 <_vfiprintf_r>:
 80041e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041e8:	460d      	mov	r5, r1
 80041ea:	4614      	mov	r4, r2
 80041ec:	4698      	mov	r8, r3
 80041ee:	4606      	mov	r6, r0
 80041f0:	b09d      	sub	sp, #116	; 0x74
 80041f2:	b118      	cbz	r0, 80041fc <_vfiprintf_r+0x18>
 80041f4:	6983      	ldr	r3, [r0, #24]
 80041f6:	b90b      	cbnz	r3, 80041fc <_vfiprintf_r+0x18>
 80041f8:	f000 fc98 	bl	8004b2c <__sinit>
 80041fc:	4b89      	ldr	r3, [pc, #548]	; (8004424 <_vfiprintf_r+0x240>)
 80041fe:	429d      	cmp	r5, r3
 8004200:	d11b      	bne.n	800423a <_vfiprintf_r+0x56>
 8004202:	6875      	ldr	r5, [r6, #4]
 8004204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004206:	07d9      	lsls	r1, r3, #31
 8004208:	d405      	bmi.n	8004216 <_vfiprintf_r+0x32>
 800420a:	89ab      	ldrh	r3, [r5, #12]
 800420c:	059a      	lsls	r2, r3, #22
 800420e:	d402      	bmi.n	8004216 <_vfiprintf_r+0x32>
 8004210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004212:	f000 fd29 	bl	8004c68 <__retarget_lock_acquire_recursive>
 8004216:	89ab      	ldrh	r3, [r5, #12]
 8004218:	071b      	lsls	r3, r3, #28
 800421a:	d501      	bpl.n	8004220 <_vfiprintf_r+0x3c>
 800421c:	692b      	ldr	r3, [r5, #16]
 800421e:	b9eb      	cbnz	r3, 800425c <_vfiprintf_r+0x78>
 8004220:	4629      	mov	r1, r5
 8004222:	4630      	mov	r0, r6
 8004224:	f000 faf6 	bl	8004814 <__swsetup_r>
 8004228:	b1c0      	cbz	r0, 800425c <_vfiprintf_r+0x78>
 800422a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800422c:	07dc      	lsls	r4, r3, #31
 800422e:	d50e      	bpl.n	800424e <_vfiprintf_r+0x6a>
 8004230:	f04f 30ff 	mov.w	r0, #4294967295
 8004234:	b01d      	add	sp, #116	; 0x74
 8004236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800423a:	4b7b      	ldr	r3, [pc, #492]	; (8004428 <_vfiprintf_r+0x244>)
 800423c:	429d      	cmp	r5, r3
 800423e:	d101      	bne.n	8004244 <_vfiprintf_r+0x60>
 8004240:	68b5      	ldr	r5, [r6, #8]
 8004242:	e7df      	b.n	8004204 <_vfiprintf_r+0x20>
 8004244:	4b79      	ldr	r3, [pc, #484]	; (800442c <_vfiprintf_r+0x248>)
 8004246:	429d      	cmp	r5, r3
 8004248:	bf08      	it	eq
 800424a:	68f5      	ldreq	r5, [r6, #12]
 800424c:	e7da      	b.n	8004204 <_vfiprintf_r+0x20>
 800424e:	89ab      	ldrh	r3, [r5, #12]
 8004250:	0598      	lsls	r0, r3, #22
 8004252:	d4ed      	bmi.n	8004230 <_vfiprintf_r+0x4c>
 8004254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004256:	f000 fd08 	bl	8004c6a <__retarget_lock_release_recursive>
 800425a:	e7e9      	b.n	8004230 <_vfiprintf_r+0x4c>
 800425c:	2300      	movs	r3, #0
 800425e:	9309      	str	r3, [sp, #36]	; 0x24
 8004260:	2320      	movs	r3, #32
 8004262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004266:	2330      	movs	r3, #48	; 0x30
 8004268:	f04f 0901 	mov.w	r9, #1
 800426c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004270:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004430 <_vfiprintf_r+0x24c>
 8004274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004278:	4623      	mov	r3, r4
 800427a:	469a      	mov	sl, r3
 800427c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004280:	b10a      	cbz	r2, 8004286 <_vfiprintf_r+0xa2>
 8004282:	2a25      	cmp	r2, #37	; 0x25
 8004284:	d1f9      	bne.n	800427a <_vfiprintf_r+0x96>
 8004286:	ebba 0b04 	subs.w	fp, sl, r4
 800428a:	d00b      	beq.n	80042a4 <_vfiprintf_r+0xc0>
 800428c:	465b      	mov	r3, fp
 800428e:	4622      	mov	r2, r4
 8004290:	4629      	mov	r1, r5
 8004292:	4630      	mov	r0, r6
 8004294:	f7ff ff93 	bl	80041be <__sfputs_r>
 8004298:	3001      	adds	r0, #1
 800429a:	f000 80aa 	beq.w	80043f2 <_vfiprintf_r+0x20e>
 800429e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042a0:	445a      	add	r2, fp
 80042a2:	9209      	str	r2, [sp, #36]	; 0x24
 80042a4:	f89a 3000 	ldrb.w	r3, [sl]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f000 80a2 	beq.w	80043f2 <_vfiprintf_r+0x20e>
 80042ae:	2300      	movs	r3, #0
 80042b0:	f04f 32ff 	mov.w	r2, #4294967295
 80042b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042b8:	f10a 0a01 	add.w	sl, sl, #1
 80042bc:	9304      	str	r3, [sp, #16]
 80042be:	9307      	str	r3, [sp, #28]
 80042c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042c4:	931a      	str	r3, [sp, #104]	; 0x68
 80042c6:	4654      	mov	r4, sl
 80042c8:	2205      	movs	r2, #5
 80042ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042ce:	4858      	ldr	r0, [pc, #352]	; (8004430 <_vfiprintf_r+0x24c>)
 80042d0:	f000 fd32 	bl	8004d38 <memchr>
 80042d4:	9a04      	ldr	r2, [sp, #16]
 80042d6:	b9d8      	cbnz	r0, 8004310 <_vfiprintf_r+0x12c>
 80042d8:	06d1      	lsls	r1, r2, #27
 80042da:	bf44      	itt	mi
 80042dc:	2320      	movmi	r3, #32
 80042de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042e2:	0713      	lsls	r3, r2, #28
 80042e4:	bf44      	itt	mi
 80042e6:	232b      	movmi	r3, #43	; 0x2b
 80042e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80042ec:	f89a 3000 	ldrb.w	r3, [sl]
 80042f0:	2b2a      	cmp	r3, #42	; 0x2a
 80042f2:	d015      	beq.n	8004320 <_vfiprintf_r+0x13c>
 80042f4:	4654      	mov	r4, sl
 80042f6:	2000      	movs	r0, #0
 80042f8:	f04f 0c0a 	mov.w	ip, #10
 80042fc:	9a07      	ldr	r2, [sp, #28]
 80042fe:	4621      	mov	r1, r4
 8004300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004304:	3b30      	subs	r3, #48	; 0x30
 8004306:	2b09      	cmp	r3, #9
 8004308:	d94e      	bls.n	80043a8 <_vfiprintf_r+0x1c4>
 800430a:	b1b0      	cbz	r0, 800433a <_vfiprintf_r+0x156>
 800430c:	9207      	str	r2, [sp, #28]
 800430e:	e014      	b.n	800433a <_vfiprintf_r+0x156>
 8004310:	eba0 0308 	sub.w	r3, r0, r8
 8004314:	fa09 f303 	lsl.w	r3, r9, r3
 8004318:	4313      	orrs	r3, r2
 800431a:	46a2      	mov	sl, r4
 800431c:	9304      	str	r3, [sp, #16]
 800431e:	e7d2      	b.n	80042c6 <_vfiprintf_r+0xe2>
 8004320:	9b03      	ldr	r3, [sp, #12]
 8004322:	1d19      	adds	r1, r3, #4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	9103      	str	r1, [sp, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	bfbb      	ittet	lt
 800432c:	425b      	neglt	r3, r3
 800432e:	f042 0202 	orrlt.w	r2, r2, #2
 8004332:	9307      	strge	r3, [sp, #28]
 8004334:	9307      	strlt	r3, [sp, #28]
 8004336:	bfb8      	it	lt
 8004338:	9204      	strlt	r2, [sp, #16]
 800433a:	7823      	ldrb	r3, [r4, #0]
 800433c:	2b2e      	cmp	r3, #46	; 0x2e
 800433e:	d10c      	bne.n	800435a <_vfiprintf_r+0x176>
 8004340:	7863      	ldrb	r3, [r4, #1]
 8004342:	2b2a      	cmp	r3, #42	; 0x2a
 8004344:	d135      	bne.n	80043b2 <_vfiprintf_r+0x1ce>
 8004346:	9b03      	ldr	r3, [sp, #12]
 8004348:	3402      	adds	r4, #2
 800434a:	1d1a      	adds	r2, r3, #4
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	9203      	str	r2, [sp, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	bfb8      	it	lt
 8004354:	f04f 33ff 	movlt.w	r3, #4294967295
 8004358:	9305      	str	r3, [sp, #20]
 800435a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004434 <_vfiprintf_r+0x250>
 800435e:	2203      	movs	r2, #3
 8004360:	4650      	mov	r0, sl
 8004362:	7821      	ldrb	r1, [r4, #0]
 8004364:	f000 fce8 	bl	8004d38 <memchr>
 8004368:	b140      	cbz	r0, 800437c <_vfiprintf_r+0x198>
 800436a:	2340      	movs	r3, #64	; 0x40
 800436c:	eba0 000a 	sub.w	r0, r0, sl
 8004370:	fa03 f000 	lsl.w	r0, r3, r0
 8004374:	9b04      	ldr	r3, [sp, #16]
 8004376:	3401      	adds	r4, #1
 8004378:	4303      	orrs	r3, r0
 800437a:	9304      	str	r3, [sp, #16]
 800437c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004380:	2206      	movs	r2, #6
 8004382:	482d      	ldr	r0, [pc, #180]	; (8004438 <_vfiprintf_r+0x254>)
 8004384:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004388:	f000 fcd6 	bl	8004d38 <memchr>
 800438c:	2800      	cmp	r0, #0
 800438e:	d03f      	beq.n	8004410 <_vfiprintf_r+0x22c>
 8004390:	4b2a      	ldr	r3, [pc, #168]	; (800443c <_vfiprintf_r+0x258>)
 8004392:	bb1b      	cbnz	r3, 80043dc <_vfiprintf_r+0x1f8>
 8004394:	9b03      	ldr	r3, [sp, #12]
 8004396:	3307      	adds	r3, #7
 8004398:	f023 0307 	bic.w	r3, r3, #7
 800439c:	3308      	adds	r3, #8
 800439e:	9303      	str	r3, [sp, #12]
 80043a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043a2:	443b      	add	r3, r7
 80043a4:	9309      	str	r3, [sp, #36]	; 0x24
 80043a6:	e767      	b.n	8004278 <_vfiprintf_r+0x94>
 80043a8:	460c      	mov	r4, r1
 80043aa:	2001      	movs	r0, #1
 80043ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80043b0:	e7a5      	b.n	80042fe <_vfiprintf_r+0x11a>
 80043b2:	2300      	movs	r3, #0
 80043b4:	f04f 0c0a 	mov.w	ip, #10
 80043b8:	4619      	mov	r1, r3
 80043ba:	3401      	adds	r4, #1
 80043bc:	9305      	str	r3, [sp, #20]
 80043be:	4620      	mov	r0, r4
 80043c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043c4:	3a30      	subs	r2, #48	; 0x30
 80043c6:	2a09      	cmp	r2, #9
 80043c8:	d903      	bls.n	80043d2 <_vfiprintf_r+0x1ee>
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0c5      	beq.n	800435a <_vfiprintf_r+0x176>
 80043ce:	9105      	str	r1, [sp, #20]
 80043d0:	e7c3      	b.n	800435a <_vfiprintf_r+0x176>
 80043d2:	4604      	mov	r4, r0
 80043d4:	2301      	movs	r3, #1
 80043d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80043da:	e7f0      	b.n	80043be <_vfiprintf_r+0x1da>
 80043dc:	ab03      	add	r3, sp, #12
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	462a      	mov	r2, r5
 80043e2:	4630      	mov	r0, r6
 80043e4:	4b16      	ldr	r3, [pc, #88]	; (8004440 <_vfiprintf_r+0x25c>)
 80043e6:	a904      	add	r1, sp, #16
 80043e8:	f3af 8000 	nop.w
 80043ec:	4607      	mov	r7, r0
 80043ee:	1c78      	adds	r0, r7, #1
 80043f0:	d1d6      	bne.n	80043a0 <_vfiprintf_r+0x1bc>
 80043f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043f4:	07d9      	lsls	r1, r3, #31
 80043f6:	d405      	bmi.n	8004404 <_vfiprintf_r+0x220>
 80043f8:	89ab      	ldrh	r3, [r5, #12]
 80043fa:	059a      	lsls	r2, r3, #22
 80043fc:	d402      	bmi.n	8004404 <_vfiprintf_r+0x220>
 80043fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004400:	f000 fc33 	bl	8004c6a <__retarget_lock_release_recursive>
 8004404:	89ab      	ldrh	r3, [r5, #12]
 8004406:	065b      	lsls	r3, r3, #25
 8004408:	f53f af12 	bmi.w	8004230 <_vfiprintf_r+0x4c>
 800440c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800440e:	e711      	b.n	8004234 <_vfiprintf_r+0x50>
 8004410:	ab03      	add	r3, sp, #12
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	462a      	mov	r2, r5
 8004416:	4630      	mov	r0, r6
 8004418:	4b09      	ldr	r3, [pc, #36]	; (8004440 <_vfiprintf_r+0x25c>)
 800441a:	a904      	add	r1, sp, #16
 800441c:	f000 f882 	bl	8004524 <_printf_i>
 8004420:	e7e4      	b.n	80043ec <_vfiprintf_r+0x208>
 8004422:	bf00      	nop
 8004424:	0800525c 	.word	0x0800525c
 8004428:	0800527c 	.word	0x0800527c
 800442c:	0800523c 	.word	0x0800523c
 8004430:	08005208 	.word	0x08005208
 8004434:	0800520e 	.word	0x0800520e
 8004438:	08005212 	.word	0x08005212
 800443c:	00000000 	.word	0x00000000
 8004440:	080041bf 	.word	0x080041bf

08004444 <_printf_common>:
 8004444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004448:	4616      	mov	r6, r2
 800444a:	4699      	mov	r9, r3
 800444c:	688a      	ldr	r2, [r1, #8]
 800444e:	690b      	ldr	r3, [r1, #16]
 8004450:	4607      	mov	r7, r0
 8004452:	4293      	cmp	r3, r2
 8004454:	bfb8      	it	lt
 8004456:	4613      	movlt	r3, r2
 8004458:	6033      	str	r3, [r6, #0]
 800445a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800445e:	460c      	mov	r4, r1
 8004460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004464:	b10a      	cbz	r2, 800446a <_printf_common+0x26>
 8004466:	3301      	adds	r3, #1
 8004468:	6033      	str	r3, [r6, #0]
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	0699      	lsls	r1, r3, #26
 800446e:	bf42      	ittt	mi
 8004470:	6833      	ldrmi	r3, [r6, #0]
 8004472:	3302      	addmi	r3, #2
 8004474:	6033      	strmi	r3, [r6, #0]
 8004476:	6825      	ldr	r5, [r4, #0]
 8004478:	f015 0506 	ands.w	r5, r5, #6
 800447c:	d106      	bne.n	800448c <_printf_common+0x48>
 800447e:	f104 0a19 	add.w	sl, r4, #25
 8004482:	68e3      	ldr	r3, [r4, #12]
 8004484:	6832      	ldr	r2, [r6, #0]
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	42ab      	cmp	r3, r5
 800448a:	dc28      	bgt.n	80044de <_printf_common+0x9a>
 800448c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004490:	1e13      	subs	r3, r2, #0
 8004492:	6822      	ldr	r2, [r4, #0]
 8004494:	bf18      	it	ne
 8004496:	2301      	movne	r3, #1
 8004498:	0692      	lsls	r2, r2, #26
 800449a:	d42d      	bmi.n	80044f8 <_printf_common+0xb4>
 800449c:	4649      	mov	r1, r9
 800449e:	4638      	mov	r0, r7
 80044a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044a4:	47c0      	blx	r8
 80044a6:	3001      	adds	r0, #1
 80044a8:	d020      	beq.n	80044ec <_printf_common+0xa8>
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	68e5      	ldr	r5, [r4, #12]
 80044ae:	f003 0306 	and.w	r3, r3, #6
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	bf18      	it	ne
 80044b6:	2500      	movne	r5, #0
 80044b8:	6832      	ldr	r2, [r6, #0]
 80044ba:	f04f 0600 	mov.w	r6, #0
 80044be:	68a3      	ldr	r3, [r4, #8]
 80044c0:	bf08      	it	eq
 80044c2:	1aad      	subeq	r5, r5, r2
 80044c4:	6922      	ldr	r2, [r4, #16]
 80044c6:	bf08      	it	eq
 80044c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044cc:	4293      	cmp	r3, r2
 80044ce:	bfc4      	itt	gt
 80044d0:	1a9b      	subgt	r3, r3, r2
 80044d2:	18ed      	addgt	r5, r5, r3
 80044d4:	341a      	adds	r4, #26
 80044d6:	42b5      	cmp	r5, r6
 80044d8:	d11a      	bne.n	8004510 <_printf_common+0xcc>
 80044da:	2000      	movs	r0, #0
 80044dc:	e008      	b.n	80044f0 <_printf_common+0xac>
 80044de:	2301      	movs	r3, #1
 80044e0:	4652      	mov	r2, sl
 80044e2:	4649      	mov	r1, r9
 80044e4:	4638      	mov	r0, r7
 80044e6:	47c0      	blx	r8
 80044e8:	3001      	adds	r0, #1
 80044ea:	d103      	bne.n	80044f4 <_printf_common+0xb0>
 80044ec:	f04f 30ff 	mov.w	r0, #4294967295
 80044f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f4:	3501      	adds	r5, #1
 80044f6:	e7c4      	b.n	8004482 <_printf_common+0x3e>
 80044f8:	2030      	movs	r0, #48	; 0x30
 80044fa:	18e1      	adds	r1, r4, r3
 80044fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004506:	4422      	add	r2, r4
 8004508:	3302      	adds	r3, #2
 800450a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800450e:	e7c5      	b.n	800449c <_printf_common+0x58>
 8004510:	2301      	movs	r3, #1
 8004512:	4622      	mov	r2, r4
 8004514:	4649      	mov	r1, r9
 8004516:	4638      	mov	r0, r7
 8004518:	47c0      	blx	r8
 800451a:	3001      	adds	r0, #1
 800451c:	d0e6      	beq.n	80044ec <_printf_common+0xa8>
 800451e:	3601      	adds	r6, #1
 8004520:	e7d9      	b.n	80044d6 <_printf_common+0x92>
	...

08004524 <_printf_i>:
 8004524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004528:	7e0f      	ldrb	r7, [r1, #24]
 800452a:	4691      	mov	r9, r2
 800452c:	2f78      	cmp	r7, #120	; 0x78
 800452e:	4680      	mov	r8, r0
 8004530:	460c      	mov	r4, r1
 8004532:	469a      	mov	sl, r3
 8004534:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004536:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800453a:	d807      	bhi.n	800454c <_printf_i+0x28>
 800453c:	2f62      	cmp	r7, #98	; 0x62
 800453e:	d80a      	bhi.n	8004556 <_printf_i+0x32>
 8004540:	2f00      	cmp	r7, #0
 8004542:	f000 80d9 	beq.w	80046f8 <_printf_i+0x1d4>
 8004546:	2f58      	cmp	r7, #88	; 0x58
 8004548:	f000 80a4 	beq.w	8004694 <_printf_i+0x170>
 800454c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004554:	e03a      	b.n	80045cc <_printf_i+0xa8>
 8004556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800455a:	2b15      	cmp	r3, #21
 800455c:	d8f6      	bhi.n	800454c <_printf_i+0x28>
 800455e:	a101      	add	r1, pc, #4	; (adr r1, 8004564 <_printf_i+0x40>)
 8004560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004564:	080045bd 	.word	0x080045bd
 8004568:	080045d1 	.word	0x080045d1
 800456c:	0800454d 	.word	0x0800454d
 8004570:	0800454d 	.word	0x0800454d
 8004574:	0800454d 	.word	0x0800454d
 8004578:	0800454d 	.word	0x0800454d
 800457c:	080045d1 	.word	0x080045d1
 8004580:	0800454d 	.word	0x0800454d
 8004584:	0800454d 	.word	0x0800454d
 8004588:	0800454d 	.word	0x0800454d
 800458c:	0800454d 	.word	0x0800454d
 8004590:	080046df 	.word	0x080046df
 8004594:	08004601 	.word	0x08004601
 8004598:	080046c1 	.word	0x080046c1
 800459c:	0800454d 	.word	0x0800454d
 80045a0:	0800454d 	.word	0x0800454d
 80045a4:	08004701 	.word	0x08004701
 80045a8:	0800454d 	.word	0x0800454d
 80045ac:	08004601 	.word	0x08004601
 80045b0:	0800454d 	.word	0x0800454d
 80045b4:	0800454d 	.word	0x0800454d
 80045b8:	080046c9 	.word	0x080046c9
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	1d1a      	adds	r2, r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	602a      	str	r2, [r5, #0]
 80045c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0a4      	b.n	800471a <_printf_i+0x1f6>
 80045d0:	6820      	ldr	r0, [r4, #0]
 80045d2:	6829      	ldr	r1, [r5, #0]
 80045d4:	0606      	lsls	r6, r0, #24
 80045d6:	f101 0304 	add.w	r3, r1, #4
 80045da:	d50a      	bpl.n	80045f2 <_printf_i+0xce>
 80045dc:	680e      	ldr	r6, [r1, #0]
 80045de:	602b      	str	r3, [r5, #0]
 80045e0:	2e00      	cmp	r6, #0
 80045e2:	da03      	bge.n	80045ec <_printf_i+0xc8>
 80045e4:	232d      	movs	r3, #45	; 0x2d
 80045e6:	4276      	negs	r6, r6
 80045e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045ec:	230a      	movs	r3, #10
 80045ee:	485e      	ldr	r0, [pc, #376]	; (8004768 <_printf_i+0x244>)
 80045f0:	e019      	b.n	8004626 <_printf_i+0x102>
 80045f2:	680e      	ldr	r6, [r1, #0]
 80045f4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80045f8:	602b      	str	r3, [r5, #0]
 80045fa:	bf18      	it	ne
 80045fc:	b236      	sxthne	r6, r6
 80045fe:	e7ef      	b.n	80045e0 <_printf_i+0xbc>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	6820      	ldr	r0, [r4, #0]
 8004604:	1d19      	adds	r1, r3, #4
 8004606:	6029      	str	r1, [r5, #0]
 8004608:	0601      	lsls	r1, r0, #24
 800460a:	d501      	bpl.n	8004610 <_printf_i+0xec>
 800460c:	681e      	ldr	r6, [r3, #0]
 800460e:	e002      	b.n	8004616 <_printf_i+0xf2>
 8004610:	0646      	lsls	r6, r0, #25
 8004612:	d5fb      	bpl.n	800460c <_printf_i+0xe8>
 8004614:	881e      	ldrh	r6, [r3, #0]
 8004616:	2f6f      	cmp	r7, #111	; 0x6f
 8004618:	bf0c      	ite	eq
 800461a:	2308      	moveq	r3, #8
 800461c:	230a      	movne	r3, #10
 800461e:	4852      	ldr	r0, [pc, #328]	; (8004768 <_printf_i+0x244>)
 8004620:	2100      	movs	r1, #0
 8004622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004626:	6865      	ldr	r5, [r4, #4]
 8004628:	2d00      	cmp	r5, #0
 800462a:	bfa8      	it	ge
 800462c:	6821      	ldrge	r1, [r4, #0]
 800462e:	60a5      	str	r5, [r4, #8]
 8004630:	bfa4      	itt	ge
 8004632:	f021 0104 	bicge.w	r1, r1, #4
 8004636:	6021      	strge	r1, [r4, #0]
 8004638:	b90e      	cbnz	r6, 800463e <_printf_i+0x11a>
 800463a:	2d00      	cmp	r5, #0
 800463c:	d04d      	beq.n	80046da <_printf_i+0x1b6>
 800463e:	4615      	mov	r5, r2
 8004640:	fbb6 f1f3 	udiv	r1, r6, r3
 8004644:	fb03 6711 	mls	r7, r3, r1, r6
 8004648:	5dc7      	ldrb	r7, [r0, r7]
 800464a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800464e:	4637      	mov	r7, r6
 8004650:	42bb      	cmp	r3, r7
 8004652:	460e      	mov	r6, r1
 8004654:	d9f4      	bls.n	8004640 <_printf_i+0x11c>
 8004656:	2b08      	cmp	r3, #8
 8004658:	d10b      	bne.n	8004672 <_printf_i+0x14e>
 800465a:	6823      	ldr	r3, [r4, #0]
 800465c:	07de      	lsls	r6, r3, #31
 800465e:	d508      	bpl.n	8004672 <_printf_i+0x14e>
 8004660:	6923      	ldr	r3, [r4, #16]
 8004662:	6861      	ldr	r1, [r4, #4]
 8004664:	4299      	cmp	r1, r3
 8004666:	bfde      	ittt	le
 8004668:	2330      	movle	r3, #48	; 0x30
 800466a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800466e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004672:	1b52      	subs	r2, r2, r5
 8004674:	6122      	str	r2, [r4, #16]
 8004676:	464b      	mov	r3, r9
 8004678:	4621      	mov	r1, r4
 800467a:	4640      	mov	r0, r8
 800467c:	f8cd a000 	str.w	sl, [sp]
 8004680:	aa03      	add	r2, sp, #12
 8004682:	f7ff fedf 	bl	8004444 <_printf_common>
 8004686:	3001      	adds	r0, #1
 8004688:	d14c      	bne.n	8004724 <_printf_i+0x200>
 800468a:	f04f 30ff 	mov.w	r0, #4294967295
 800468e:	b004      	add	sp, #16
 8004690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004694:	4834      	ldr	r0, [pc, #208]	; (8004768 <_printf_i+0x244>)
 8004696:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800469a:	6829      	ldr	r1, [r5, #0]
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	f851 6b04 	ldr.w	r6, [r1], #4
 80046a2:	6029      	str	r1, [r5, #0]
 80046a4:	061d      	lsls	r5, r3, #24
 80046a6:	d514      	bpl.n	80046d2 <_printf_i+0x1ae>
 80046a8:	07df      	lsls	r7, r3, #31
 80046aa:	bf44      	itt	mi
 80046ac:	f043 0320 	orrmi.w	r3, r3, #32
 80046b0:	6023      	strmi	r3, [r4, #0]
 80046b2:	b91e      	cbnz	r6, 80046bc <_printf_i+0x198>
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	f023 0320 	bic.w	r3, r3, #32
 80046ba:	6023      	str	r3, [r4, #0]
 80046bc:	2310      	movs	r3, #16
 80046be:	e7af      	b.n	8004620 <_printf_i+0xfc>
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	f043 0320 	orr.w	r3, r3, #32
 80046c6:	6023      	str	r3, [r4, #0]
 80046c8:	2378      	movs	r3, #120	; 0x78
 80046ca:	4828      	ldr	r0, [pc, #160]	; (800476c <_printf_i+0x248>)
 80046cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80046d0:	e7e3      	b.n	800469a <_printf_i+0x176>
 80046d2:	0659      	lsls	r1, r3, #25
 80046d4:	bf48      	it	mi
 80046d6:	b2b6      	uxthmi	r6, r6
 80046d8:	e7e6      	b.n	80046a8 <_printf_i+0x184>
 80046da:	4615      	mov	r5, r2
 80046dc:	e7bb      	b.n	8004656 <_printf_i+0x132>
 80046de:	682b      	ldr	r3, [r5, #0]
 80046e0:	6826      	ldr	r6, [r4, #0]
 80046e2:	1d18      	adds	r0, r3, #4
 80046e4:	6961      	ldr	r1, [r4, #20]
 80046e6:	6028      	str	r0, [r5, #0]
 80046e8:	0635      	lsls	r5, r6, #24
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	d501      	bpl.n	80046f2 <_printf_i+0x1ce>
 80046ee:	6019      	str	r1, [r3, #0]
 80046f0:	e002      	b.n	80046f8 <_printf_i+0x1d4>
 80046f2:	0670      	lsls	r0, r6, #25
 80046f4:	d5fb      	bpl.n	80046ee <_printf_i+0x1ca>
 80046f6:	8019      	strh	r1, [r3, #0]
 80046f8:	2300      	movs	r3, #0
 80046fa:	4615      	mov	r5, r2
 80046fc:	6123      	str	r3, [r4, #16]
 80046fe:	e7ba      	b.n	8004676 <_printf_i+0x152>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	2100      	movs	r1, #0
 8004704:	1d1a      	adds	r2, r3, #4
 8004706:	602a      	str	r2, [r5, #0]
 8004708:	681d      	ldr	r5, [r3, #0]
 800470a:	6862      	ldr	r2, [r4, #4]
 800470c:	4628      	mov	r0, r5
 800470e:	f000 fb13 	bl	8004d38 <memchr>
 8004712:	b108      	cbz	r0, 8004718 <_printf_i+0x1f4>
 8004714:	1b40      	subs	r0, r0, r5
 8004716:	6060      	str	r0, [r4, #4]
 8004718:	6863      	ldr	r3, [r4, #4]
 800471a:	6123      	str	r3, [r4, #16]
 800471c:	2300      	movs	r3, #0
 800471e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004722:	e7a8      	b.n	8004676 <_printf_i+0x152>
 8004724:	462a      	mov	r2, r5
 8004726:	4649      	mov	r1, r9
 8004728:	4640      	mov	r0, r8
 800472a:	6923      	ldr	r3, [r4, #16]
 800472c:	47d0      	blx	sl
 800472e:	3001      	adds	r0, #1
 8004730:	d0ab      	beq.n	800468a <_printf_i+0x166>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	079b      	lsls	r3, r3, #30
 8004736:	d413      	bmi.n	8004760 <_printf_i+0x23c>
 8004738:	68e0      	ldr	r0, [r4, #12]
 800473a:	9b03      	ldr	r3, [sp, #12]
 800473c:	4298      	cmp	r0, r3
 800473e:	bfb8      	it	lt
 8004740:	4618      	movlt	r0, r3
 8004742:	e7a4      	b.n	800468e <_printf_i+0x16a>
 8004744:	2301      	movs	r3, #1
 8004746:	4632      	mov	r2, r6
 8004748:	4649      	mov	r1, r9
 800474a:	4640      	mov	r0, r8
 800474c:	47d0      	blx	sl
 800474e:	3001      	adds	r0, #1
 8004750:	d09b      	beq.n	800468a <_printf_i+0x166>
 8004752:	3501      	adds	r5, #1
 8004754:	68e3      	ldr	r3, [r4, #12]
 8004756:	9903      	ldr	r1, [sp, #12]
 8004758:	1a5b      	subs	r3, r3, r1
 800475a:	42ab      	cmp	r3, r5
 800475c:	dcf2      	bgt.n	8004744 <_printf_i+0x220>
 800475e:	e7eb      	b.n	8004738 <_printf_i+0x214>
 8004760:	2500      	movs	r5, #0
 8004762:	f104 0619 	add.w	r6, r4, #25
 8004766:	e7f5      	b.n	8004754 <_printf_i+0x230>
 8004768:	08005219 	.word	0x08005219
 800476c:	0800522a 	.word	0x0800522a

08004770 <__swbuf_r>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	460e      	mov	r6, r1
 8004774:	4614      	mov	r4, r2
 8004776:	4605      	mov	r5, r0
 8004778:	b118      	cbz	r0, 8004782 <__swbuf_r+0x12>
 800477a:	6983      	ldr	r3, [r0, #24]
 800477c:	b90b      	cbnz	r3, 8004782 <__swbuf_r+0x12>
 800477e:	f000 f9d5 	bl	8004b2c <__sinit>
 8004782:	4b21      	ldr	r3, [pc, #132]	; (8004808 <__swbuf_r+0x98>)
 8004784:	429c      	cmp	r4, r3
 8004786:	d12b      	bne.n	80047e0 <__swbuf_r+0x70>
 8004788:	686c      	ldr	r4, [r5, #4]
 800478a:	69a3      	ldr	r3, [r4, #24]
 800478c:	60a3      	str	r3, [r4, #8]
 800478e:	89a3      	ldrh	r3, [r4, #12]
 8004790:	071a      	lsls	r2, r3, #28
 8004792:	d52f      	bpl.n	80047f4 <__swbuf_r+0x84>
 8004794:	6923      	ldr	r3, [r4, #16]
 8004796:	b36b      	cbz	r3, 80047f4 <__swbuf_r+0x84>
 8004798:	6923      	ldr	r3, [r4, #16]
 800479a:	6820      	ldr	r0, [r4, #0]
 800479c:	b2f6      	uxtb	r6, r6
 800479e:	1ac0      	subs	r0, r0, r3
 80047a0:	6963      	ldr	r3, [r4, #20]
 80047a2:	4637      	mov	r7, r6
 80047a4:	4283      	cmp	r3, r0
 80047a6:	dc04      	bgt.n	80047b2 <__swbuf_r+0x42>
 80047a8:	4621      	mov	r1, r4
 80047aa:	4628      	mov	r0, r5
 80047ac:	f000 f92a 	bl	8004a04 <_fflush_r>
 80047b0:	bb30      	cbnz	r0, 8004800 <__swbuf_r+0x90>
 80047b2:	68a3      	ldr	r3, [r4, #8]
 80047b4:	3001      	adds	r0, #1
 80047b6:	3b01      	subs	r3, #1
 80047b8:	60a3      	str	r3, [r4, #8]
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	6022      	str	r2, [r4, #0]
 80047c0:	701e      	strb	r6, [r3, #0]
 80047c2:	6963      	ldr	r3, [r4, #20]
 80047c4:	4283      	cmp	r3, r0
 80047c6:	d004      	beq.n	80047d2 <__swbuf_r+0x62>
 80047c8:	89a3      	ldrh	r3, [r4, #12]
 80047ca:	07db      	lsls	r3, r3, #31
 80047cc:	d506      	bpl.n	80047dc <__swbuf_r+0x6c>
 80047ce:	2e0a      	cmp	r6, #10
 80047d0:	d104      	bne.n	80047dc <__swbuf_r+0x6c>
 80047d2:	4621      	mov	r1, r4
 80047d4:	4628      	mov	r0, r5
 80047d6:	f000 f915 	bl	8004a04 <_fflush_r>
 80047da:	b988      	cbnz	r0, 8004800 <__swbuf_r+0x90>
 80047dc:	4638      	mov	r0, r7
 80047de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047e0:	4b0a      	ldr	r3, [pc, #40]	; (800480c <__swbuf_r+0x9c>)
 80047e2:	429c      	cmp	r4, r3
 80047e4:	d101      	bne.n	80047ea <__swbuf_r+0x7a>
 80047e6:	68ac      	ldr	r4, [r5, #8]
 80047e8:	e7cf      	b.n	800478a <__swbuf_r+0x1a>
 80047ea:	4b09      	ldr	r3, [pc, #36]	; (8004810 <__swbuf_r+0xa0>)
 80047ec:	429c      	cmp	r4, r3
 80047ee:	bf08      	it	eq
 80047f0:	68ec      	ldreq	r4, [r5, #12]
 80047f2:	e7ca      	b.n	800478a <__swbuf_r+0x1a>
 80047f4:	4621      	mov	r1, r4
 80047f6:	4628      	mov	r0, r5
 80047f8:	f000 f80c 	bl	8004814 <__swsetup_r>
 80047fc:	2800      	cmp	r0, #0
 80047fe:	d0cb      	beq.n	8004798 <__swbuf_r+0x28>
 8004800:	f04f 37ff 	mov.w	r7, #4294967295
 8004804:	e7ea      	b.n	80047dc <__swbuf_r+0x6c>
 8004806:	bf00      	nop
 8004808:	0800525c 	.word	0x0800525c
 800480c:	0800527c 	.word	0x0800527c
 8004810:	0800523c 	.word	0x0800523c

08004814 <__swsetup_r>:
 8004814:	4b32      	ldr	r3, [pc, #200]	; (80048e0 <__swsetup_r+0xcc>)
 8004816:	b570      	push	{r4, r5, r6, lr}
 8004818:	681d      	ldr	r5, [r3, #0]
 800481a:	4606      	mov	r6, r0
 800481c:	460c      	mov	r4, r1
 800481e:	b125      	cbz	r5, 800482a <__swsetup_r+0x16>
 8004820:	69ab      	ldr	r3, [r5, #24]
 8004822:	b913      	cbnz	r3, 800482a <__swsetup_r+0x16>
 8004824:	4628      	mov	r0, r5
 8004826:	f000 f981 	bl	8004b2c <__sinit>
 800482a:	4b2e      	ldr	r3, [pc, #184]	; (80048e4 <__swsetup_r+0xd0>)
 800482c:	429c      	cmp	r4, r3
 800482e:	d10f      	bne.n	8004850 <__swsetup_r+0x3c>
 8004830:	686c      	ldr	r4, [r5, #4]
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004838:	0719      	lsls	r1, r3, #28
 800483a:	d42c      	bmi.n	8004896 <__swsetup_r+0x82>
 800483c:	06dd      	lsls	r5, r3, #27
 800483e:	d411      	bmi.n	8004864 <__swsetup_r+0x50>
 8004840:	2309      	movs	r3, #9
 8004842:	6033      	str	r3, [r6, #0]
 8004844:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	81a3      	strh	r3, [r4, #12]
 800484e:	e03e      	b.n	80048ce <__swsetup_r+0xba>
 8004850:	4b25      	ldr	r3, [pc, #148]	; (80048e8 <__swsetup_r+0xd4>)
 8004852:	429c      	cmp	r4, r3
 8004854:	d101      	bne.n	800485a <__swsetup_r+0x46>
 8004856:	68ac      	ldr	r4, [r5, #8]
 8004858:	e7eb      	b.n	8004832 <__swsetup_r+0x1e>
 800485a:	4b24      	ldr	r3, [pc, #144]	; (80048ec <__swsetup_r+0xd8>)
 800485c:	429c      	cmp	r4, r3
 800485e:	bf08      	it	eq
 8004860:	68ec      	ldreq	r4, [r5, #12]
 8004862:	e7e6      	b.n	8004832 <__swsetup_r+0x1e>
 8004864:	0758      	lsls	r0, r3, #29
 8004866:	d512      	bpl.n	800488e <__swsetup_r+0x7a>
 8004868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800486a:	b141      	cbz	r1, 800487e <__swsetup_r+0x6a>
 800486c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004870:	4299      	cmp	r1, r3
 8004872:	d002      	beq.n	800487a <__swsetup_r+0x66>
 8004874:	4630      	mov	r0, r6
 8004876:	f000 fa6d 	bl	8004d54 <_free_r>
 800487a:	2300      	movs	r3, #0
 800487c:	6363      	str	r3, [r4, #52]	; 0x34
 800487e:	89a3      	ldrh	r3, [r4, #12]
 8004880:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004884:	81a3      	strh	r3, [r4, #12]
 8004886:	2300      	movs	r3, #0
 8004888:	6063      	str	r3, [r4, #4]
 800488a:	6923      	ldr	r3, [r4, #16]
 800488c:	6023      	str	r3, [r4, #0]
 800488e:	89a3      	ldrh	r3, [r4, #12]
 8004890:	f043 0308 	orr.w	r3, r3, #8
 8004894:	81a3      	strh	r3, [r4, #12]
 8004896:	6923      	ldr	r3, [r4, #16]
 8004898:	b94b      	cbnz	r3, 80048ae <__swsetup_r+0x9a>
 800489a:	89a3      	ldrh	r3, [r4, #12]
 800489c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a4:	d003      	beq.n	80048ae <__swsetup_r+0x9a>
 80048a6:	4621      	mov	r1, r4
 80048a8:	4630      	mov	r0, r6
 80048aa:	f000 fa05 	bl	8004cb8 <__smakebuf_r>
 80048ae:	89a0      	ldrh	r0, [r4, #12]
 80048b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048b4:	f010 0301 	ands.w	r3, r0, #1
 80048b8:	d00a      	beq.n	80048d0 <__swsetup_r+0xbc>
 80048ba:	2300      	movs	r3, #0
 80048bc:	60a3      	str	r3, [r4, #8]
 80048be:	6963      	ldr	r3, [r4, #20]
 80048c0:	425b      	negs	r3, r3
 80048c2:	61a3      	str	r3, [r4, #24]
 80048c4:	6923      	ldr	r3, [r4, #16]
 80048c6:	b943      	cbnz	r3, 80048da <__swsetup_r+0xc6>
 80048c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80048cc:	d1ba      	bne.n	8004844 <__swsetup_r+0x30>
 80048ce:	bd70      	pop	{r4, r5, r6, pc}
 80048d0:	0781      	lsls	r1, r0, #30
 80048d2:	bf58      	it	pl
 80048d4:	6963      	ldrpl	r3, [r4, #20]
 80048d6:	60a3      	str	r3, [r4, #8]
 80048d8:	e7f4      	b.n	80048c4 <__swsetup_r+0xb0>
 80048da:	2000      	movs	r0, #0
 80048dc:	e7f7      	b.n	80048ce <__swsetup_r+0xba>
 80048de:	bf00      	nop
 80048e0:	2000000c 	.word	0x2000000c
 80048e4:	0800525c 	.word	0x0800525c
 80048e8:	0800527c 	.word	0x0800527c
 80048ec:	0800523c 	.word	0x0800523c

080048f0 <abort>:
 80048f0:	2006      	movs	r0, #6
 80048f2:	b508      	push	{r3, lr}
 80048f4:	f000 fb42 	bl	8004f7c <raise>
 80048f8:	2001      	movs	r0, #1
 80048fa:	f7fc fbc8 	bl	800108e <_exit>
	...

08004900 <__sflush_r>:
 8004900:	898a      	ldrh	r2, [r1, #12]
 8004902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004904:	4605      	mov	r5, r0
 8004906:	0710      	lsls	r0, r2, #28
 8004908:	460c      	mov	r4, r1
 800490a:	d457      	bmi.n	80049bc <__sflush_r+0xbc>
 800490c:	684b      	ldr	r3, [r1, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	dc04      	bgt.n	800491c <__sflush_r+0x1c>
 8004912:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004914:	2b00      	cmp	r3, #0
 8004916:	dc01      	bgt.n	800491c <__sflush_r+0x1c>
 8004918:	2000      	movs	r0, #0
 800491a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800491c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800491e:	2e00      	cmp	r6, #0
 8004920:	d0fa      	beq.n	8004918 <__sflush_r+0x18>
 8004922:	2300      	movs	r3, #0
 8004924:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004928:	682f      	ldr	r7, [r5, #0]
 800492a:	602b      	str	r3, [r5, #0]
 800492c:	d032      	beq.n	8004994 <__sflush_r+0x94>
 800492e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004930:	89a3      	ldrh	r3, [r4, #12]
 8004932:	075a      	lsls	r2, r3, #29
 8004934:	d505      	bpl.n	8004942 <__sflush_r+0x42>
 8004936:	6863      	ldr	r3, [r4, #4]
 8004938:	1ac0      	subs	r0, r0, r3
 800493a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800493c:	b10b      	cbz	r3, 8004942 <__sflush_r+0x42>
 800493e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004940:	1ac0      	subs	r0, r0, r3
 8004942:	2300      	movs	r3, #0
 8004944:	4602      	mov	r2, r0
 8004946:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004948:	4628      	mov	r0, r5
 800494a:	6a21      	ldr	r1, [r4, #32]
 800494c:	47b0      	blx	r6
 800494e:	1c43      	adds	r3, r0, #1
 8004950:	89a3      	ldrh	r3, [r4, #12]
 8004952:	d106      	bne.n	8004962 <__sflush_r+0x62>
 8004954:	6829      	ldr	r1, [r5, #0]
 8004956:	291d      	cmp	r1, #29
 8004958:	d82c      	bhi.n	80049b4 <__sflush_r+0xb4>
 800495a:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <__sflush_r+0x100>)
 800495c:	40ca      	lsrs	r2, r1
 800495e:	07d6      	lsls	r6, r2, #31
 8004960:	d528      	bpl.n	80049b4 <__sflush_r+0xb4>
 8004962:	2200      	movs	r2, #0
 8004964:	6062      	str	r2, [r4, #4]
 8004966:	6922      	ldr	r2, [r4, #16]
 8004968:	04d9      	lsls	r1, r3, #19
 800496a:	6022      	str	r2, [r4, #0]
 800496c:	d504      	bpl.n	8004978 <__sflush_r+0x78>
 800496e:	1c42      	adds	r2, r0, #1
 8004970:	d101      	bne.n	8004976 <__sflush_r+0x76>
 8004972:	682b      	ldr	r3, [r5, #0]
 8004974:	b903      	cbnz	r3, 8004978 <__sflush_r+0x78>
 8004976:	6560      	str	r0, [r4, #84]	; 0x54
 8004978:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800497a:	602f      	str	r7, [r5, #0]
 800497c:	2900      	cmp	r1, #0
 800497e:	d0cb      	beq.n	8004918 <__sflush_r+0x18>
 8004980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004984:	4299      	cmp	r1, r3
 8004986:	d002      	beq.n	800498e <__sflush_r+0x8e>
 8004988:	4628      	mov	r0, r5
 800498a:	f000 f9e3 	bl	8004d54 <_free_r>
 800498e:	2000      	movs	r0, #0
 8004990:	6360      	str	r0, [r4, #52]	; 0x34
 8004992:	e7c2      	b.n	800491a <__sflush_r+0x1a>
 8004994:	6a21      	ldr	r1, [r4, #32]
 8004996:	2301      	movs	r3, #1
 8004998:	4628      	mov	r0, r5
 800499a:	47b0      	blx	r6
 800499c:	1c41      	adds	r1, r0, #1
 800499e:	d1c7      	bne.n	8004930 <__sflush_r+0x30>
 80049a0:	682b      	ldr	r3, [r5, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0c4      	beq.n	8004930 <__sflush_r+0x30>
 80049a6:	2b1d      	cmp	r3, #29
 80049a8:	d001      	beq.n	80049ae <__sflush_r+0xae>
 80049aa:	2b16      	cmp	r3, #22
 80049ac:	d101      	bne.n	80049b2 <__sflush_r+0xb2>
 80049ae:	602f      	str	r7, [r5, #0]
 80049b0:	e7b2      	b.n	8004918 <__sflush_r+0x18>
 80049b2:	89a3      	ldrh	r3, [r4, #12]
 80049b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b8:	81a3      	strh	r3, [r4, #12]
 80049ba:	e7ae      	b.n	800491a <__sflush_r+0x1a>
 80049bc:	690f      	ldr	r7, [r1, #16]
 80049be:	2f00      	cmp	r7, #0
 80049c0:	d0aa      	beq.n	8004918 <__sflush_r+0x18>
 80049c2:	0793      	lsls	r3, r2, #30
 80049c4:	bf18      	it	ne
 80049c6:	2300      	movne	r3, #0
 80049c8:	680e      	ldr	r6, [r1, #0]
 80049ca:	bf08      	it	eq
 80049cc:	694b      	ldreq	r3, [r1, #20]
 80049ce:	1bf6      	subs	r6, r6, r7
 80049d0:	600f      	str	r7, [r1, #0]
 80049d2:	608b      	str	r3, [r1, #8]
 80049d4:	2e00      	cmp	r6, #0
 80049d6:	dd9f      	ble.n	8004918 <__sflush_r+0x18>
 80049d8:	4633      	mov	r3, r6
 80049da:	463a      	mov	r2, r7
 80049dc:	4628      	mov	r0, r5
 80049de:	6a21      	ldr	r1, [r4, #32]
 80049e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80049e4:	47e0      	blx	ip
 80049e6:	2800      	cmp	r0, #0
 80049e8:	dc06      	bgt.n	80049f8 <__sflush_r+0xf8>
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049f4:	81a3      	strh	r3, [r4, #12]
 80049f6:	e790      	b.n	800491a <__sflush_r+0x1a>
 80049f8:	4407      	add	r7, r0
 80049fa:	1a36      	subs	r6, r6, r0
 80049fc:	e7ea      	b.n	80049d4 <__sflush_r+0xd4>
 80049fe:	bf00      	nop
 8004a00:	20400001 	.word	0x20400001

08004a04 <_fflush_r>:
 8004a04:	b538      	push	{r3, r4, r5, lr}
 8004a06:	690b      	ldr	r3, [r1, #16]
 8004a08:	4605      	mov	r5, r0
 8004a0a:	460c      	mov	r4, r1
 8004a0c:	b913      	cbnz	r3, 8004a14 <_fflush_r+0x10>
 8004a0e:	2500      	movs	r5, #0
 8004a10:	4628      	mov	r0, r5
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	b118      	cbz	r0, 8004a1e <_fflush_r+0x1a>
 8004a16:	6983      	ldr	r3, [r0, #24]
 8004a18:	b90b      	cbnz	r3, 8004a1e <_fflush_r+0x1a>
 8004a1a:	f000 f887 	bl	8004b2c <__sinit>
 8004a1e:	4b14      	ldr	r3, [pc, #80]	; (8004a70 <_fflush_r+0x6c>)
 8004a20:	429c      	cmp	r4, r3
 8004a22:	d11b      	bne.n	8004a5c <_fflush_r+0x58>
 8004a24:	686c      	ldr	r4, [r5, #4]
 8004a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d0ef      	beq.n	8004a0e <_fflush_r+0xa>
 8004a2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004a30:	07d0      	lsls	r0, r2, #31
 8004a32:	d404      	bmi.n	8004a3e <_fflush_r+0x3a>
 8004a34:	0599      	lsls	r1, r3, #22
 8004a36:	d402      	bmi.n	8004a3e <_fflush_r+0x3a>
 8004a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a3a:	f000 f915 	bl	8004c68 <__retarget_lock_acquire_recursive>
 8004a3e:	4628      	mov	r0, r5
 8004a40:	4621      	mov	r1, r4
 8004a42:	f7ff ff5d 	bl	8004900 <__sflush_r>
 8004a46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a48:	4605      	mov	r5, r0
 8004a4a:	07da      	lsls	r2, r3, #31
 8004a4c:	d4e0      	bmi.n	8004a10 <_fflush_r+0xc>
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	059b      	lsls	r3, r3, #22
 8004a52:	d4dd      	bmi.n	8004a10 <_fflush_r+0xc>
 8004a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a56:	f000 f908 	bl	8004c6a <__retarget_lock_release_recursive>
 8004a5a:	e7d9      	b.n	8004a10 <_fflush_r+0xc>
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <_fflush_r+0x70>)
 8004a5e:	429c      	cmp	r4, r3
 8004a60:	d101      	bne.n	8004a66 <_fflush_r+0x62>
 8004a62:	68ac      	ldr	r4, [r5, #8]
 8004a64:	e7df      	b.n	8004a26 <_fflush_r+0x22>
 8004a66:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <_fflush_r+0x74>)
 8004a68:	429c      	cmp	r4, r3
 8004a6a:	bf08      	it	eq
 8004a6c:	68ec      	ldreq	r4, [r5, #12]
 8004a6e:	e7da      	b.n	8004a26 <_fflush_r+0x22>
 8004a70:	0800525c 	.word	0x0800525c
 8004a74:	0800527c 	.word	0x0800527c
 8004a78:	0800523c 	.word	0x0800523c

08004a7c <std>:
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	b510      	push	{r4, lr}
 8004a80:	4604      	mov	r4, r0
 8004a82:	e9c0 3300 	strd	r3, r3, [r0]
 8004a86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a8a:	6083      	str	r3, [r0, #8]
 8004a8c:	8181      	strh	r1, [r0, #12]
 8004a8e:	6643      	str	r3, [r0, #100]	; 0x64
 8004a90:	81c2      	strh	r2, [r0, #14]
 8004a92:	6183      	str	r3, [r0, #24]
 8004a94:	4619      	mov	r1, r3
 8004a96:	2208      	movs	r2, #8
 8004a98:	305c      	adds	r0, #92	; 0x5c
 8004a9a:	f7ff fb73 	bl	8004184 <memset>
 8004a9e:	4b05      	ldr	r3, [pc, #20]	; (8004ab4 <std+0x38>)
 8004aa0:	6224      	str	r4, [r4, #32]
 8004aa2:	6263      	str	r3, [r4, #36]	; 0x24
 8004aa4:	4b04      	ldr	r3, [pc, #16]	; (8004ab8 <std+0x3c>)
 8004aa6:	62a3      	str	r3, [r4, #40]	; 0x28
 8004aa8:	4b04      	ldr	r3, [pc, #16]	; (8004abc <std+0x40>)
 8004aaa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004aac:	4b04      	ldr	r3, [pc, #16]	; (8004ac0 <std+0x44>)
 8004aae:	6323      	str	r3, [r4, #48]	; 0x30
 8004ab0:	bd10      	pop	{r4, pc}
 8004ab2:	bf00      	nop
 8004ab4:	08004fb5 	.word	0x08004fb5
 8004ab8:	08004fd7 	.word	0x08004fd7
 8004abc:	0800500f 	.word	0x0800500f
 8004ac0:	08005033 	.word	0x08005033

08004ac4 <_cleanup_r>:
 8004ac4:	4901      	ldr	r1, [pc, #4]	; (8004acc <_cleanup_r+0x8>)
 8004ac6:	f000 b8af 	b.w	8004c28 <_fwalk_reent>
 8004aca:	bf00      	nop
 8004acc:	08004a05 	.word	0x08004a05

08004ad0 <__sfmoreglue>:
 8004ad0:	2268      	movs	r2, #104	; 0x68
 8004ad2:	b570      	push	{r4, r5, r6, lr}
 8004ad4:	1e4d      	subs	r5, r1, #1
 8004ad6:	4355      	muls	r5, r2
 8004ad8:	460e      	mov	r6, r1
 8004ada:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004ade:	f000 f9a1 	bl	8004e24 <_malloc_r>
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	b140      	cbz	r0, 8004af8 <__sfmoreglue+0x28>
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	e9c0 1600 	strd	r1, r6, [r0]
 8004aec:	300c      	adds	r0, #12
 8004aee:	60a0      	str	r0, [r4, #8]
 8004af0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004af4:	f7ff fb46 	bl	8004184 <memset>
 8004af8:	4620      	mov	r0, r4
 8004afa:	bd70      	pop	{r4, r5, r6, pc}

08004afc <__sfp_lock_acquire>:
 8004afc:	4801      	ldr	r0, [pc, #4]	; (8004b04 <__sfp_lock_acquire+0x8>)
 8004afe:	f000 b8b3 	b.w	8004c68 <__retarget_lock_acquire_recursive>
 8004b02:	bf00      	nop
 8004b04:	20000391 	.word	0x20000391

08004b08 <__sfp_lock_release>:
 8004b08:	4801      	ldr	r0, [pc, #4]	; (8004b10 <__sfp_lock_release+0x8>)
 8004b0a:	f000 b8ae 	b.w	8004c6a <__retarget_lock_release_recursive>
 8004b0e:	bf00      	nop
 8004b10:	20000391 	.word	0x20000391

08004b14 <__sinit_lock_acquire>:
 8004b14:	4801      	ldr	r0, [pc, #4]	; (8004b1c <__sinit_lock_acquire+0x8>)
 8004b16:	f000 b8a7 	b.w	8004c68 <__retarget_lock_acquire_recursive>
 8004b1a:	bf00      	nop
 8004b1c:	20000392 	.word	0x20000392

08004b20 <__sinit_lock_release>:
 8004b20:	4801      	ldr	r0, [pc, #4]	; (8004b28 <__sinit_lock_release+0x8>)
 8004b22:	f000 b8a2 	b.w	8004c6a <__retarget_lock_release_recursive>
 8004b26:	bf00      	nop
 8004b28:	20000392 	.word	0x20000392

08004b2c <__sinit>:
 8004b2c:	b510      	push	{r4, lr}
 8004b2e:	4604      	mov	r4, r0
 8004b30:	f7ff fff0 	bl	8004b14 <__sinit_lock_acquire>
 8004b34:	69a3      	ldr	r3, [r4, #24]
 8004b36:	b11b      	cbz	r3, 8004b40 <__sinit+0x14>
 8004b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b3c:	f7ff bff0 	b.w	8004b20 <__sinit_lock_release>
 8004b40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004b44:	6523      	str	r3, [r4, #80]	; 0x50
 8004b46:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <__sinit+0x68>)
 8004b48:	4a13      	ldr	r2, [pc, #76]	; (8004b98 <__sinit+0x6c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b4e:	42a3      	cmp	r3, r4
 8004b50:	bf08      	it	eq
 8004b52:	2301      	moveq	r3, #1
 8004b54:	4620      	mov	r0, r4
 8004b56:	bf08      	it	eq
 8004b58:	61a3      	streq	r3, [r4, #24]
 8004b5a:	f000 f81f 	bl	8004b9c <__sfp>
 8004b5e:	6060      	str	r0, [r4, #4]
 8004b60:	4620      	mov	r0, r4
 8004b62:	f000 f81b 	bl	8004b9c <__sfp>
 8004b66:	60a0      	str	r0, [r4, #8]
 8004b68:	4620      	mov	r0, r4
 8004b6a:	f000 f817 	bl	8004b9c <__sfp>
 8004b6e:	2200      	movs	r2, #0
 8004b70:	2104      	movs	r1, #4
 8004b72:	60e0      	str	r0, [r4, #12]
 8004b74:	6860      	ldr	r0, [r4, #4]
 8004b76:	f7ff ff81 	bl	8004a7c <std>
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	2109      	movs	r1, #9
 8004b7e:	68a0      	ldr	r0, [r4, #8]
 8004b80:	f7ff ff7c 	bl	8004a7c <std>
 8004b84:	2202      	movs	r2, #2
 8004b86:	2112      	movs	r1, #18
 8004b88:	68e0      	ldr	r0, [r4, #12]
 8004b8a:	f7ff ff77 	bl	8004a7c <std>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	61a3      	str	r3, [r4, #24]
 8004b92:	e7d1      	b.n	8004b38 <__sinit+0xc>
 8004b94:	08005204 	.word	0x08005204
 8004b98:	08004ac5 	.word	0x08004ac5

08004b9c <__sfp>:
 8004b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9e:	4607      	mov	r7, r0
 8004ba0:	f7ff ffac 	bl	8004afc <__sfp_lock_acquire>
 8004ba4:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <__sfp+0x84>)
 8004ba6:	681e      	ldr	r6, [r3, #0]
 8004ba8:	69b3      	ldr	r3, [r6, #24]
 8004baa:	b913      	cbnz	r3, 8004bb2 <__sfp+0x16>
 8004bac:	4630      	mov	r0, r6
 8004bae:	f7ff ffbd 	bl	8004b2c <__sinit>
 8004bb2:	3648      	adds	r6, #72	; 0x48
 8004bb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	d503      	bpl.n	8004bc4 <__sfp+0x28>
 8004bbc:	6833      	ldr	r3, [r6, #0]
 8004bbe:	b30b      	cbz	r3, 8004c04 <__sfp+0x68>
 8004bc0:	6836      	ldr	r6, [r6, #0]
 8004bc2:	e7f7      	b.n	8004bb4 <__sfp+0x18>
 8004bc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004bc8:	b9d5      	cbnz	r5, 8004c00 <__sfp+0x64>
 8004bca:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <__sfp+0x88>)
 8004bcc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bd0:	60e3      	str	r3, [r4, #12]
 8004bd2:	6665      	str	r5, [r4, #100]	; 0x64
 8004bd4:	f000 f847 	bl	8004c66 <__retarget_lock_init_recursive>
 8004bd8:	f7ff ff96 	bl	8004b08 <__sfp_lock_release>
 8004bdc:	2208      	movs	r2, #8
 8004bde:	4629      	mov	r1, r5
 8004be0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004be4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004be8:	6025      	str	r5, [r4, #0]
 8004bea:	61a5      	str	r5, [r4, #24]
 8004bec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004bf0:	f7ff fac8 	bl	8004184 <memset>
 8004bf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bfc:	4620      	mov	r0, r4
 8004bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c00:	3468      	adds	r4, #104	; 0x68
 8004c02:	e7d9      	b.n	8004bb8 <__sfp+0x1c>
 8004c04:	2104      	movs	r1, #4
 8004c06:	4638      	mov	r0, r7
 8004c08:	f7ff ff62 	bl	8004ad0 <__sfmoreglue>
 8004c0c:	4604      	mov	r4, r0
 8004c0e:	6030      	str	r0, [r6, #0]
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d1d5      	bne.n	8004bc0 <__sfp+0x24>
 8004c14:	f7ff ff78 	bl	8004b08 <__sfp_lock_release>
 8004c18:	230c      	movs	r3, #12
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	e7ee      	b.n	8004bfc <__sfp+0x60>
 8004c1e:	bf00      	nop
 8004c20:	08005204 	.word	0x08005204
 8004c24:	ffff0001 	.word	0xffff0001

08004c28 <_fwalk_reent>:
 8004c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	4688      	mov	r8, r1
 8004c30:	2700      	movs	r7, #0
 8004c32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004c36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c3a:	f1b9 0901 	subs.w	r9, r9, #1
 8004c3e:	d505      	bpl.n	8004c4c <_fwalk_reent+0x24>
 8004c40:	6824      	ldr	r4, [r4, #0]
 8004c42:	2c00      	cmp	r4, #0
 8004c44:	d1f7      	bne.n	8004c36 <_fwalk_reent+0xe>
 8004c46:	4638      	mov	r0, r7
 8004c48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c4c:	89ab      	ldrh	r3, [r5, #12]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d907      	bls.n	8004c62 <_fwalk_reent+0x3a>
 8004c52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c56:	3301      	adds	r3, #1
 8004c58:	d003      	beq.n	8004c62 <_fwalk_reent+0x3a>
 8004c5a:	4629      	mov	r1, r5
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	47c0      	blx	r8
 8004c60:	4307      	orrs	r7, r0
 8004c62:	3568      	adds	r5, #104	; 0x68
 8004c64:	e7e9      	b.n	8004c3a <_fwalk_reent+0x12>

08004c66 <__retarget_lock_init_recursive>:
 8004c66:	4770      	bx	lr

08004c68 <__retarget_lock_acquire_recursive>:
 8004c68:	4770      	bx	lr

08004c6a <__retarget_lock_release_recursive>:
 8004c6a:	4770      	bx	lr

08004c6c <__swhatbuf_r>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	460e      	mov	r6, r1
 8004c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c74:	4614      	mov	r4, r2
 8004c76:	2900      	cmp	r1, #0
 8004c78:	461d      	mov	r5, r3
 8004c7a:	b096      	sub	sp, #88	; 0x58
 8004c7c:	da08      	bge.n	8004c90 <__swhatbuf_r+0x24>
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004c84:	602a      	str	r2, [r5, #0]
 8004c86:	061a      	lsls	r2, r3, #24
 8004c88:	d410      	bmi.n	8004cac <__swhatbuf_r+0x40>
 8004c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c8e:	e00e      	b.n	8004cae <__swhatbuf_r+0x42>
 8004c90:	466a      	mov	r2, sp
 8004c92:	f000 f9f5 	bl	8005080 <_fstat_r>
 8004c96:	2800      	cmp	r0, #0
 8004c98:	dbf1      	blt.n	8004c7e <__swhatbuf_r+0x12>
 8004c9a:	9a01      	ldr	r2, [sp, #4]
 8004c9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ca0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ca4:	425a      	negs	r2, r3
 8004ca6:	415a      	adcs	r2, r3
 8004ca8:	602a      	str	r2, [r5, #0]
 8004caa:	e7ee      	b.n	8004c8a <__swhatbuf_r+0x1e>
 8004cac:	2340      	movs	r3, #64	; 0x40
 8004cae:	2000      	movs	r0, #0
 8004cb0:	6023      	str	r3, [r4, #0]
 8004cb2:	b016      	add	sp, #88	; 0x58
 8004cb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004cb8 <__smakebuf_r>:
 8004cb8:	898b      	ldrh	r3, [r1, #12]
 8004cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cbc:	079d      	lsls	r5, r3, #30
 8004cbe:	4606      	mov	r6, r0
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	d507      	bpl.n	8004cd4 <__smakebuf_r+0x1c>
 8004cc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004cc8:	6023      	str	r3, [r4, #0]
 8004cca:	6123      	str	r3, [r4, #16]
 8004ccc:	2301      	movs	r3, #1
 8004cce:	6163      	str	r3, [r4, #20]
 8004cd0:	b002      	add	sp, #8
 8004cd2:	bd70      	pop	{r4, r5, r6, pc}
 8004cd4:	466a      	mov	r2, sp
 8004cd6:	ab01      	add	r3, sp, #4
 8004cd8:	f7ff ffc8 	bl	8004c6c <__swhatbuf_r>
 8004cdc:	9900      	ldr	r1, [sp, #0]
 8004cde:	4605      	mov	r5, r0
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f000 f89f 	bl	8004e24 <_malloc_r>
 8004ce6:	b948      	cbnz	r0, 8004cfc <__smakebuf_r+0x44>
 8004ce8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cec:	059a      	lsls	r2, r3, #22
 8004cee:	d4ef      	bmi.n	8004cd0 <__smakebuf_r+0x18>
 8004cf0:	f023 0303 	bic.w	r3, r3, #3
 8004cf4:	f043 0302 	orr.w	r3, r3, #2
 8004cf8:	81a3      	strh	r3, [r4, #12]
 8004cfa:	e7e3      	b.n	8004cc4 <__smakebuf_r+0xc>
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	; (8004d34 <__smakebuf_r+0x7c>)
 8004cfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d00:	89a3      	ldrh	r3, [r4, #12]
 8004d02:	6020      	str	r0, [r4, #0]
 8004d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d08:	81a3      	strh	r3, [r4, #12]
 8004d0a:	9b00      	ldr	r3, [sp, #0]
 8004d0c:	6120      	str	r0, [r4, #16]
 8004d0e:	6163      	str	r3, [r4, #20]
 8004d10:	9b01      	ldr	r3, [sp, #4]
 8004d12:	b15b      	cbz	r3, 8004d2c <__smakebuf_r+0x74>
 8004d14:	4630      	mov	r0, r6
 8004d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d1a:	f000 f9c3 	bl	80050a4 <_isatty_r>
 8004d1e:	b128      	cbz	r0, 8004d2c <__smakebuf_r+0x74>
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	f023 0303 	bic.w	r3, r3, #3
 8004d26:	f043 0301 	orr.w	r3, r3, #1
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	89a0      	ldrh	r0, [r4, #12]
 8004d2e:	4305      	orrs	r5, r0
 8004d30:	81a5      	strh	r5, [r4, #12]
 8004d32:	e7cd      	b.n	8004cd0 <__smakebuf_r+0x18>
 8004d34:	08004ac5 	.word	0x08004ac5

08004d38 <memchr>:
 8004d38:	4603      	mov	r3, r0
 8004d3a:	b510      	push	{r4, lr}
 8004d3c:	b2c9      	uxtb	r1, r1
 8004d3e:	4402      	add	r2, r0
 8004d40:	4293      	cmp	r3, r2
 8004d42:	4618      	mov	r0, r3
 8004d44:	d101      	bne.n	8004d4a <memchr+0x12>
 8004d46:	2000      	movs	r0, #0
 8004d48:	e003      	b.n	8004d52 <memchr+0x1a>
 8004d4a:	7804      	ldrb	r4, [r0, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	428c      	cmp	r4, r1
 8004d50:	d1f6      	bne.n	8004d40 <memchr+0x8>
 8004d52:	bd10      	pop	{r4, pc}

08004d54 <_free_r>:
 8004d54:	b538      	push	{r3, r4, r5, lr}
 8004d56:	4605      	mov	r5, r0
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	d040      	beq.n	8004dde <_free_r+0x8a>
 8004d5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d60:	1f0c      	subs	r4, r1, #4
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	bfb8      	it	lt
 8004d66:	18e4      	addlt	r4, r4, r3
 8004d68:	f000 f9be 	bl	80050e8 <__malloc_lock>
 8004d6c:	4a1c      	ldr	r2, [pc, #112]	; (8004de0 <_free_r+0x8c>)
 8004d6e:	6813      	ldr	r3, [r2, #0]
 8004d70:	b933      	cbnz	r3, 8004d80 <_free_r+0x2c>
 8004d72:	6063      	str	r3, [r4, #4]
 8004d74:	6014      	str	r4, [r2, #0]
 8004d76:	4628      	mov	r0, r5
 8004d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d7c:	f000 b9ba 	b.w	80050f4 <__malloc_unlock>
 8004d80:	42a3      	cmp	r3, r4
 8004d82:	d908      	bls.n	8004d96 <_free_r+0x42>
 8004d84:	6820      	ldr	r0, [r4, #0]
 8004d86:	1821      	adds	r1, r4, r0
 8004d88:	428b      	cmp	r3, r1
 8004d8a:	bf01      	itttt	eq
 8004d8c:	6819      	ldreq	r1, [r3, #0]
 8004d8e:	685b      	ldreq	r3, [r3, #4]
 8004d90:	1809      	addeq	r1, r1, r0
 8004d92:	6021      	streq	r1, [r4, #0]
 8004d94:	e7ed      	b.n	8004d72 <_free_r+0x1e>
 8004d96:	461a      	mov	r2, r3
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	b10b      	cbz	r3, 8004da0 <_free_r+0x4c>
 8004d9c:	42a3      	cmp	r3, r4
 8004d9e:	d9fa      	bls.n	8004d96 <_free_r+0x42>
 8004da0:	6811      	ldr	r1, [r2, #0]
 8004da2:	1850      	adds	r0, r2, r1
 8004da4:	42a0      	cmp	r0, r4
 8004da6:	d10b      	bne.n	8004dc0 <_free_r+0x6c>
 8004da8:	6820      	ldr	r0, [r4, #0]
 8004daa:	4401      	add	r1, r0
 8004dac:	1850      	adds	r0, r2, r1
 8004dae:	4283      	cmp	r3, r0
 8004db0:	6011      	str	r1, [r2, #0]
 8004db2:	d1e0      	bne.n	8004d76 <_free_r+0x22>
 8004db4:	6818      	ldr	r0, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4401      	add	r1, r0
 8004dba:	6011      	str	r1, [r2, #0]
 8004dbc:	6053      	str	r3, [r2, #4]
 8004dbe:	e7da      	b.n	8004d76 <_free_r+0x22>
 8004dc0:	d902      	bls.n	8004dc8 <_free_r+0x74>
 8004dc2:	230c      	movs	r3, #12
 8004dc4:	602b      	str	r3, [r5, #0]
 8004dc6:	e7d6      	b.n	8004d76 <_free_r+0x22>
 8004dc8:	6820      	ldr	r0, [r4, #0]
 8004dca:	1821      	adds	r1, r4, r0
 8004dcc:	428b      	cmp	r3, r1
 8004dce:	bf01      	itttt	eq
 8004dd0:	6819      	ldreq	r1, [r3, #0]
 8004dd2:	685b      	ldreq	r3, [r3, #4]
 8004dd4:	1809      	addeq	r1, r1, r0
 8004dd6:	6021      	streq	r1, [r4, #0]
 8004dd8:	6063      	str	r3, [r4, #4]
 8004dda:	6054      	str	r4, [r2, #4]
 8004ddc:	e7cb      	b.n	8004d76 <_free_r+0x22>
 8004dde:	bd38      	pop	{r3, r4, r5, pc}
 8004de0:	20000394 	.word	0x20000394

08004de4 <sbrk_aligned>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	4e0e      	ldr	r6, [pc, #56]	; (8004e20 <sbrk_aligned+0x3c>)
 8004de8:	460c      	mov	r4, r1
 8004dea:	6831      	ldr	r1, [r6, #0]
 8004dec:	4605      	mov	r5, r0
 8004dee:	b911      	cbnz	r1, 8004df6 <sbrk_aligned+0x12>
 8004df0:	f000 f88c 	bl	8004f0c <_sbrk_r>
 8004df4:	6030      	str	r0, [r6, #0]
 8004df6:	4621      	mov	r1, r4
 8004df8:	4628      	mov	r0, r5
 8004dfa:	f000 f887 	bl	8004f0c <_sbrk_r>
 8004dfe:	1c43      	adds	r3, r0, #1
 8004e00:	d00a      	beq.n	8004e18 <sbrk_aligned+0x34>
 8004e02:	1cc4      	adds	r4, r0, #3
 8004e04:	f024 0403 	bic.w	r4, r4, #3
 8004e08:	42a0      	cmp	r0, r4
 8004e0a:	d007      	beq.n	8004e1c <sbrk_aligned+0x38>
 8004e0c:	1a21      	subs	r1, r4, r0
 8004e0e:	4628      	mov	r0, r5
 8004e10:	f000 f87c 	bl	8004f0c <_sbrk_r>
 8004e14:	3001      	adds	r0, #1
 8004e16:	d101      	bne.n	8004e1c <sbrk_aligned+0x38>
 8004e18:	f04f 34ff 	mov.w	r4, #4294967295
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	20000398 	.word	0x20000398

08004e24 <_malloc_r>:
 8004e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e28:	1ccd      	adds	r5, r1, #3
 8004e2a:	f025 0503 	bic.w	r5, r5, #3
 8004e2e:	3508      	adds	r5, #8
 8004e30:	2d0c      	cmp	r5, #12
 8004e32:	bf38      	it	cc
 8004e34:	250c      	movcc	r5, #12
 8004e36:	2d00      	cmp	r5, #0
 8004e38:	4607      	mov	r7, r0
 8004e3a:	db01      	blt.n	8004e40 <_malloc_r+0x1c>
 8004e3c:	42a9      	cmp	r1, r5
 8004e3e:	d905      	bls.n	8004e4c <_malloc_r+0x28>
 8004e40:	230c      	movs	r3, #12
 8004e42:	2600      	movs	r6, #0
 8004e44:	603b      	str	r3, [r7, #0]
 8004e46:	4630      	mov	r0, r6
 8004e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e4c:	4e2e      	ldr	r6, [pc, #184]	; (8004f08 <_malloc_r+0xe4>)
 8004e4e:	f000 f94b 	bl	80050e8 <__malloc_lock>
 8004e52:	6833      	ldr	r3, [r6, #0]
 8004e54:	461c      	mov	r4, r3
 8004e56:	bb34      	cbnz	r4, 8004ea6 <_malloc_r+0x82>
 8004e58:	4629      	mov	r1, r5
 8004e5a:	4638      	mov	r0, r7
 8004e5c:	f7ff ffc2 	bl	8004de4 <sbrk_aligned>
 8004e60:	1c43      	adds	r3, r0, #1
 8004e62:	4604      	mov	r4, r0
 8004e64:	d14d      	bne.n	8004f02 <_malloc_r+0xde>
 8004e66:	6834      	ldr	r4, [r6, #0]
 8004e68:	4626      	mov	r6, r4
 8004e6a:	2e00      	cmp	r6, #0
 8004e6c:	d140      	bne.n	8004ef0 <_malloc_r+0xcc>
 8004e6e:	6823      	ldr	r3, [r4, #0]
 8004e70:	4631      	mov	r1, r6
 8004e72:	4638      	mov	r0, r7
 8004e74:	eb04 0803 	add.w	r8, r4, r3
 8004e78:	f000 f848 	bl	8004f0c <_sbrk_r>
 8004e7c:	4580      	cmp	r8, r0
 8004e7e:	d13a      	bne.n	8004ef6 <_malloc_r+0xd2>
 8004e80:	6821      	ldr	r1, [r4, #0]
 8004e82:	3503      	adds	r5, #3
 8004e84:	1a6d      	subs	r5, r5, r1
 8004e86:	f025 0503 	bic.w	r5, r5, #3
 8004e8a:	3508      	adds	r5, #8
 8004e8c:	2d0c      	cmp	r5, #12
 8004e8e:	bf38      	it	cc
 8004e90:	250c      	movcc	r5, #12
 8004e92:	4638      	mov	r0, r7
 8004e94:	4629      	mov	r1, r5
 8004e96:	f7ff ffa5 	bl	8004de4 <sbrk_aligned>
 8004e9a:	3001      	adds	r0, #1
 8004e9c:	d02b      	beq.n	8004ef6 <_malloc_r+0xd2>
 8004e9e:	6823      	ldr	r3, [r4, #0]
 8004ea0:	442b      	add	r3, r5
 8004ea2:	6023      	str	r3, [r4, #0]
 8004ea4:	e00e      	b.n	8004ec4 <_malloc_r+0xa0>
 8004ea6:	6822      	ldr	r2, [r4, #0]
 8004ea8:	1b52      	subs	r2, r2, r5
 8004eaa:	d41e      	bmi.n	8004eea <_malloc_r+0xc6>
 8004eac:	2a0b      	cmp	r2, #11
 8004eae:	d916      	bls.n	8004ede <_malloc_r+0xba>
 8004eb0:	1961      	adds	r1, r4, r5
 8004eb2:	42a3      	cmp	r3, r4
 8004eb4:	6025      	str	r5, [r4, #0]
 8004eb6:	bf18      	it	ne
 8004eb8:	6059      	strne	r1, [r3, #4]
 8004eba:	6863      	ldr	r3, [r4, #4]
 8004ebc:	bf08      	it	eq
 8004ebe:	6031      	streq	r1, [r6, #0]
 8004ec0:	5162      	str	r2, [r4, r5]
 8004ec2:	604b      	str	r3, [r1, #4]
 8004ec4:	4638      	mov	r0, r7
 8004ec6:	f104 060b 	add.w	r6, r4, #11
 8004eca:	f000 f913 	bl	80050f4 <__malloc_unlock>
 8004ece:	f026 0607 	bic.w	r6, r6, #7
 8004ed2:	1d23      	adds	r3, r4, #4
 8004ed4:	1af2      	subs	r2, r6, r3
 8004ed6:	d0b6      	beq.n	8004e46 <_malloc_r+0x22>
 8004ed8:	1b9b      	subs	r3, r3, r6
 8004eda:	50a3      	str	r3, [r4, r2]
 8004edc:	e7b3      	b.n	8004e46 <_malloc_r+0x22>
 8004ede:	6862      	ldr	r2, [r4, #4]
 8004ee0:	42a3      	cmp	r3, r4
 8004ee2:	bf0c      	ite	eq
 8004ee4:	6032      	streq	r2, [r6, #0]
 8004ee6:	605a      	strne	r2, [r3, #4]
 8004ee8:	e7ec      	b.n	8004ec4 <_malloc_r+0xa0>
 8004eea:	4623      	mov	r3, r4
 8004eec:	6864      	ldr	r4, [r4, #4]
 8004eee:	e7b2      	b.n	8004e56 <_malloc_r+0x32>
 8004ef0:	4634      	mov	r4, r6
 8004ef2:	6876      	ldr	r6, [r6, #4]
 8004ef4:	e7b9      	b.n	8004e6a <_malloc_r+0x46>
 8004ef6:	230c      	movs	r3, #12
 8004ef8:	4638      	mov	r0, r7
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	f000 f8fa 	bl	80050f4 <__malloc_unlock>
 8004f00:	e7a1      	b.n	8004e46 <_malloc_r+0x22>
 8004f02:	6025      	str	r5, [r4, #0]
 8004f04:	e7de      	b.n	8004ec4 <_malloc_r+0xa0>
 8004f06:	bf00      	nop
 8004f08:	20000394 	.word	0x20000394

08004f0c <_sbrk_r>:
 8004f0c:	b538      	push	{r3, r4, r5, lr}
 8004f0e:	2300      	movs	r3, #0
 8004f10:	4d05      	ldr	r5, [pc, #20]	; (8004f28 <_sbrk_r+0x1c>)
 8004f12:	4604      	mov	r4, r0
 8004f14:	4608      	mov	r0, r1
 8004f16:	602b      	str	r3, [r5, #0]
 8004f18:	f7fc f92c 	bl	8001174 <_sbrk>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d102      	bne.n	8004f26 <_sbrk_r+0x1a>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	b103      	cbz	r3, 8004f26 <_sbrk_r+0x1a>
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	2000039c 	.word	0x2000039c

08004f2c <_raise_r>:
 8004f2c:	291f      	cmp	r1, #31
 8004f2e:	b538      	push	{r3, r4, r5, lr}
 8004f30:	4604      	mov	r4, r0
 8004f32:	460d      	mov	r5, r1
 8004f34:	d904      	bls.n	8004f40 <_raise_r+0x14>
 8004f36:	2316      	movs	r3, #22
 8004f38:	6003      	str	r3, [r0, #0]
 8004f3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f3e:	bd38      	pop	{r3, r4, r5, pc}
 8004f40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004f42:	b112      	cbz	r2, 8004f4a <_raise_r+0x1e>
 8004f44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004f48:	b94b      	cbnz	r3, 8004f5e <_raise_r+0x32>
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	f000 f830 	bl	8004fb0 <_getpid_r>
 8004f50:	462a      	mov	r2, r5
 8004f52:	4601      	mov	r1, r0
 8004f54:	4620      	mov	r0, r4
 8004f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f5a:	f000 b817 	b.w	8004f8c <_kill_r>
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d00a      	beq.n	8004f78 <_raise_r+0x4c>
 8004f62:	1c59      	adds	r1, r3, #1
 8004f64:	d103      	bne.n	8004f6e <_raise_r+0x42>
 8004f66:	2316      	movs	r3, #22
 8004f68:	6003      	str	r3, [r0, #0]
 8004f6a:	2001      	movs	r0, #1
 8004f6c:	e7e7      	b.n	8004f3e <_raise_r+0x12>
 8004f6e:	2400      	movs	r4, #0
 8004f70:	4628      	mov	r0, r5
 8004f72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004f76:	4798      	blx	r3
 8004f78:	2000      	movs	r0, #0
 8004f7a:	e7e0      	b.n	8004f3e <_raise_r+0x12>

08004f7c <raise>:
 8004f7c:	4b02      	ldr	r3, [pc, #8]	; (8004f88 <raise+0xc>)
 8004f7e:	4601      	mov	r1, r0
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	f7ff bfd3 	b.w	8004f2c <_raise_r>
 8004f86:	bf00      	nop
 8004f88:	2000000c 	.word	0x2000000c

08004f8c <_kill_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	2300      	movs	r3, #0
 8004f90:	4d06      	ldr	r5, [pc, #24]	; (8004fac <_kill_r+0x20>)
 8004f92:	4604      	mov	r4, r0
 8004f94:	4608      	mov	r0, r1
 8004f96:	4611      	mov	r1, r2
 8004f98:	602b      	str	r3, [r5, #0]
 8004f9a:	f7fc f868 	bl	800106e <_kill>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	d102      	bne.n	8004fa8 <_kill_r+0x1c>
 8004fa2:	682b      	ldr	r3, [r5, #0]
 8004fa4:	b103      	cbz	r3, 8004fa8 <_kill_r+0x1c>
 8004fa6:	6023      	str	r3, [r4, #0]
 8004fa8:	bd38      	pop	{r3, r4, r5, pc}
 8004faa:	bf00      	nop
 8004fac:	2000039c 	.word	0x2000039c

08004fb0 <_getpid_r>:
 8004fb0:	f7fc b856 	b.w	8001060 <_getpid>

08004fb4 <__sread>:
 8004fb4:	b510      	push	{r4, lr}
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fbc:	f000 f8a0 	bl	8005100 <_read_r>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	bfab      	itete	ge
 8004fc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fc6:	89a3      	ldrhlt	r3, [r4, #12]
 8004fc8:	181b      	addge	r3, r3, r0
 8004fca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fce:	bfac      	ite	ge
 8004fd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fd2:	81a3      	strhlt	r3, [r4, #12]
 8004fd4:	bd10      	pop	{r4, pc}

08004fd6 <__swrite>:
 8004fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fda:	461f      	mov	r7, r3
 8004fdc:	898b      	ldrh	r3, [r1, #12]
 8004fde:	4605      	mov	r5, r0
 8004fe0:	05db      	lsls	r3, r3, #23
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	4616      	mov	r6, r2
 8004fe6:	d505      	bpl.n	8004ff4 <__swrite+0x1e>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	2200      	movs	r2, #0
 8004fec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff0:	f000 f868 	bl	80050c4 <_lseek_r>
 8004ff4:	89a3      	ldrh	r3, [r4, #12]
 8004ff6:	4632      	mov	r2, r6
 8004ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ffc:	81a3      	strh	r3, [r4, #12]
 8004ffe:	4628      	mov	r0, r5
 8005000:	463b      	mov	r3, r7
 8005002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005006:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800500a:	f000 b817 	b.w	800503c <_write_r>

0800500e <__sseek>:
 800500e:	b510      	push	{r4, lr}
 8005010:	460c      	mov	r4, r1
 8005012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005016:	f000 f855 	bl	80050c4 <_lseek_r>
 800501a:	1c43      	adds	r3, r0, #1
 800501c:	89a3      	ldrh	r3, [r4, #12]
 800501e:	bf15      	itete	ne
 8005020:	6560      	strne	r0, [r4, #84]	; 0x54
 8005022:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005026:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800502a:	81a3      	strheq	r3, [r4, #12]
 800502c:	bf18      	it	ne
 800502e:	81a3      	strhne	r3, [r4, #12]
 8005030:	bd10      	pop	{r4, pc}

08005032 <__sclose>:
 8005032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005036:	f000 b813 	b.w	8005060 <_close_r>
	...

0800503c <_write_r>:
 800503c:	b538      	push	{r3, r4, r5, lr}
 800503e:	4604      	mov	r4, r0
 8005040:	4608      	mov	r0, r1
 8005042:	4611      	mov	r1, r2
 8005044:	2200      	movs	r2, #0
 8005046:	4d05      	ldr	r5, [pc, #20]	; (800505c <_write_r+0x20>)
 8005048:	602a      	str	r2, [r5, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	f7fc f846 	bl	80010dc <_write>
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	d102      	bne.n	800505a <_write_r+0x1e>
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	b103      	cbz	r3, 800505a <_write_r+0x1e>
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	2000039c 	.word	0x2000039c

08005060 <_close_r>:
 8005060:	b538      	push	{r3, r4, r5, lr}
 8005062:	2300      	movs	r3, #0
 8005064:	4d05      	ldr	r5, [pc, #20]	; (800507c <_close_r+0x1c>)
 8005066:	4604      	mov	r4, r0
 8005068:	4608      	mov	r0, r1
 800506a:	602b      	str	r3, [r5, #0]
 800506c:	f7fc f852 	bl	8001114 <_close>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	d102      	bne.n	800507a <_close_r+0x1a>
 8005074:	682b      	ldr	r3, [r5, #0]
 8005076:	b103      	cbz	r3, 800507a <_close_r+0x1a>
 8005078:	6023      	str	r3, [r4, #0]
 800507a:	bd38      	pop	{r3, r4, r5, pc}
 800507c:	2000039c 	.word	0x2000039c

08005080 <_fstat_r>:
 8005080:	b538      	push	{r3, r4, r5, lr}
 8005082:	2300      	movs	r3, #0
 8005084:	4d06      	ldr	r5, [pc, #24]	; (80050a0 <_fstat_r+0x20>)
 8005086:	4604      	mov	r4, r0
 8005088:	4608      	mov	r0, r1
 800508a:	4611      	mov	r1, r2
 800508c:	602b      	str	r3, [r5, #0]
 800508e:	f7fc f84c 	bl	800112a <_fstat>
 8005092:	1c43      	adds	r3, r0, #1
 8005094:	d102      	bne.n	800509c <_fstat_r+0x1c>
 8005096:	682b      	ldr	r3, [r5, #0]
 8005098:	b103      	cbz	r3, 800509c <_fstat_r+0x1c>
 800509a:	6023      	str	r3, [r4, #0]
 800509c:	bd38      	pop	{r3, r4, r5, pc}
 800509e:	bf00      	nop
 80050a0:	2000039c 	.word	0x2000039c

080050a4 <_isatty_r>:
 80050a4:	b538      	push	{r3, r4, r5, lr}
 80050a6:	2300      	movs	r3, #0
 80050a8:	4d05      	ldr	r5, [pc, #20]	; (80050c0 <_isatty_r+0x1c>)
 80050aa:	4604      	mov	r4, r0
 80050ac:	4608      	mov	r0, r1
 80050ae:	602b      	str	r3, [r5, #0]
 80050b0:	f7fc f84a 	bl	8001148 <_isatty>
 80050b4:	1c43      	adds	r3, r0, #1
 80050b6:	d102      	bne.n	80050be <_isatty_r+0x1a>
 80050b8:	682b      	ldr	r3, [r5, #0]
 80050ba:	b103      	cbz	r3, 80050be <_isatty_r+0x1a>
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	bd38      	pop	{r3, r4, r5, pc}
 80050c0:	2000039c 	.word	0x2000039c

080050c4 <_lseek_r>:
 80050c4:	b538      	push	{r3, r4, r5, lr}
 80050c6:	4604      	mov	r4, r0
 80050c8:	4608      	mov	r0, r1
 80050ca:	4611      	mov	r1, r2
 80050cc:	2200      	movs	r2, #0
 80050ce:	4d05      	ldr	r5, [pc, #20]	; (80050e4 <_lseek_r+0x20>)
 80050d0:	602a      	str	r2, [r5, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	f7fc f842 	bl	800115c <_lseek>
 80050d8:	1c43      	adds	r3, r0, #1
 80050da:	d102      	bne.n	80050e2 <_lseek_r+0x1e>
 80050dc:	682b      	ldr	r3, [r5, #0]
 80050de:	b103      	cbz	r3, 80050e2 <_lseek_r+0x1e>
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	bd38      	pop	{r3, r4, r5, pc}
 80050e4:	2000039c 	.word	0x2000039c

080050e8 <__malloc_lock>:
 80050e8:	4801      	ldr	r0, [pc, #4]	; (80050f0 <__malloc_lock+0x8>)
 80050ea:	f7ff bdbd 	b.w	8004c68 <__retarget_lock_acquire_recursive>
 80050ee:	bf00      	nop
 80050f0:	20000390 	.word	0x20000390

080050f4 <__malloc_unlock>:
 80050f4:	4801      	ldr	r0, [pc, #4]	; (80050fc <__malloc_unlock+0x8>)
 80050f6:	f7ff bdb8 	b.w	8004c6a <__retarget_lock_release_recursive>
 80050fa:	bf00      	nop
 80050fc:	20000390 	.word	0x20000390

08005100 <_read_r>:
 8005100:	b538      	push	{r3, r4, r5, lr}
 8005102:	4604      	mov	r4, r0
 8005104:	4608      	mov	r0, r1
 8005106:	4611      	mov	r1, r2
 8005108:	2200      	movs	r2, #0
 800510a:	4d05      	ldr	r5, [pc, #20]	; (8005120 <_read_r+0x20>)
 800510c:	602a      	str	r2, [r5, #0]
 800510e:	461a      	mov	r2, r3
 8005110:	f7fb ffc7 	bl	80010a2 <_read>
 8005114:	1c43      	adds	r3, r0, #1
 8005116:	d102      	bne.n	800511e <_read_r+0x1e>
 8005118:	682b      	ldr	r3, [r5, #0]
 800511a:	b103      	cbz	r3, 800511e <_read_r+0x1e>
 800511c:	6023      	str	r3, [r4, #0]
 800511e:	bd38      	pop	{r3, r4, r5, pc}
 8005120:	2000039c 	.word	0x2000039c

08005124 <_init>:
 8005124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005126:	bf00      	nop
 8005128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800512a:	bc08      	pop	{r3}
 800512c:	469e      	mov	lr, r3
 800512e:	4770      	bx	lr

08005130 <_fini>:
 8005130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005132:	bf00      	nop
 8005134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005136:	bc08      	pop	{r3}
 8005138:	469e      	mov	lr, r3
 800513a:	4770      	bx	lr
