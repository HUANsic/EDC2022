
MiniatureDifferential.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009aa8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  08009bb8  08009bb8  00019bb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a630  0800a630  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a630  0800a630  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a630  0800a630  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a630  0800a630  0001a630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a634  0800a634  0001a634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c7c  200001e8  0800a820  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e64  0800a820  00020e64  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011aa4  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b06  00000000  00000000  00031cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  000347c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  00035960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004228  00000000  00000000  000369f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001496b  00000000  00000000  0003ac20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f97e  00000000  00000000  0004f58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000def09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ce0  00000000  00000000  000def5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009ba0 	.word	0x08009ba0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009ba0 	.word	0x08009ba0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <huansic_jy62_init>:
uint8_t setBaud9600_pack[3] = { 0xFF, 0xAA, 0x64 };
uint8_t setHorizontal_pack[3] = { 0xFF, 0xAA, 0x65 };
uint8_t setVertical_pack[3] = { 0xFF, 0xAA, 0x66 };
uint8_t sleepAndAwake_pack[3] = { 0xFF, 0xAA, 0x60 };

void huansic_jy62_init(JY62_HandleTypeDef *hjy62) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if(!hjy62) return;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d038      	beq.n	8001190 <huansic_jy62_init+0x80>
	if(!hjy62->uartPort) return;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d036      	beq.n	8001194 <huansic_jy62_init+0x84>

	huansic_jy62_resetAngle(hjy62);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 f838 	bl	800119c <huansic_jy62_resetAngle>

	hjy62->accel_x = 0;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
	hjy62->accel_y = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
	hjy62->accel_z = 0;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
	hjy62->omega_x = 0;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
	hjy62->omega_y = 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
	hjy62->omega_z = 0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
	hjy62->theta_x = 0;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
	hjy62->theta_y = 0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
	hjy62->theta_z = 0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24

	hjy62->lastUpdated = HAL_GetTick();
 8001174:	f002 fc92 	bl	8003a9c <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	332c      	adds	r3, #44	; 0x2c
 8001186:	220b      	movs	r2, #11
 8001188:	4619      	mov	r1, r3
 800118a:	f005 fb52 	bl	8006832 <HAL_UART_Receive_DMA>
 800118e:	e002      	b.n	8001196 <huansic_jy62_init+0x86>
	if(!hjy62) return;
 8001190:	bf00      	nop
 8001192:	e000      	b.n	8001196 <huansic_jy62_init+0x86>
	if(!hjy62->uartPort) return;
 8001194:	bf00      	nop
}
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <huansic_jy62_resetAngle>:

void huansic_jy62_resetAngle(JY62_HandleTypeDef *hjy62) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(hjy62->uartPort, initAngle_pack, 3, HAL_MAX_DELAY);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	2203      	movs	r2, #3
 80011ae:	4903      	ldr	r1, [pc, #12]	; (80011bc <huansic_jy62_resetAngle+0x20>)
 80011b0:	f005 faad 	bl	800670e <HAL_UART_Transmit>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000

080011c0 <huansic_jy62_decodePackage>:

void huansic_jy62_decodePackage(JY62_HandleTypeDef *hjy62) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	// package header
	if (hjy62->buffer[0] != 0x55)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80011ce:	2b55      	cmp	r3, #85	; 0x55
 80011d0:	f040 81f2 	bne.w	80015b8 <huansic_jy62_decodePackage+0x3f8>
		return;

	// checksum
	uint8_t sum = hjy62->buffer[0] + hjy62->buffer[1] + hjy62->buffer[2] + hjy62->buffer[3]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80011e0:	4413      	add	r3, r2
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80011ea:	4413      	add	r3, r2
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80011f4:	4413      	add	r3, r2
 80011f6:	b2da      	uxtb	r2, r3
			+ hjy62->buffer[4] + hjy62->buffer[5] + hjy62->buffer[6] + hjy62->buffer[7]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011fe:	4413      	add	r3, r2
 8001200:	b2da      	uxtb	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001208:	4413      	add	r3, r2
 800120a:	b2da      	uxtb	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001212:	4413      	add	r3, r2
 8001214:	b2da      	uxtb	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800121c:	4413      	add	r3, r2
 800121e:	b2da      	uxtb	r2, r3
			+ hjy62->buffer[8] + hjy62->buffer[9];
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001226:	4413      	add	r3, r2
 8001228:	b2da      	uxtb	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	uint8_t sum = hjy62->buffer[0] + hjy62->buffer[1] + hjy62->buffer[2] + hjy62->buffer[3]
 8001230:	4413      	add	r3, r2
 8001232:	73fb      	strb	r3, [r7, #15]
	if (hjy62->buffer[10] != sum)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	429a      	cmp	r2, r3
 800123e:	f040 81bd 	bne.w	80015bc <huansic_jy62_decodePackage+0x3fc>
		return;

	// decoding
	int16_t temp;
	if (hjy62->buffer[1] == 0x51) {		// acceleration
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001248:	2b51      	cmp	r3, #81	; 0x51
 800124a:	d175      	bne.n	8001338 <huansic_jy62_decodePackage+0x178>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_x = temp / 32768.0 * 16.0;
 8001262:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f8cc 	bl	8000404 <__aeabi_i2d>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b8d      	ldr	r3, [pc, #564]	; (80014a8 <huansic_jy62_decodePackage+0x2e8>)
 8001272:	f7ff fa5b 	bl	800072c <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4b8a      	ldr	r3, [pc, #552]	; (80014ac <huansic_jy62_decodePackage+0x2ec>)
 8001284:	f7ff f928 	bl	80004d8 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fbfa 	bl	8000a88 <__aeabi_d2f>
 8001294:	4602      	mov	r2, r0
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	605a      	str	r2, [r3, #4]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_y = temp / 32768.0 * 16.0;
 80012b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f8a5 	bl	8000404 <__aeabi_i2d>
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <huansic_jy62_decodePackage+0x2e8>)
 80012c0:	f7ff fa34 	bl	800072c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b76      	ldr	r3, [pc, #472]	; (80014ac <huansic_jy62_decodePackage+0x2ec>)
 80012d2:	f7ff f901 	bl	80004d8 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fbd3 	bl	8000a88 <__aeabi_d2f>
 80012e2:	4602      	mov	r2, r0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_z = temp / 32768.0 * 16.0;
 80012fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f87e 	bl	8000404 <__aeabi_i2d>
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b66      	ldr	r3, [pc, #408]	; (80014a8 <huansic_jy62_decodePackage+0x2e8>)
 800130e:	f7ff fa0d 	bl	800072c <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b63      	ldr	r3, [pc, #396]	; (80014ac <huansic_jy62_decodePackage+0x2ec>)
 8001320:	f7ff f8da 	bl	80004d8 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fbac 	bl	8000a88 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	e139      	b.n	80015ac <huansic_jy62_decodePackage+0x3ec>
	} else if (hjy62->buffer[1] == 0x52) {		// angular speed
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800133e:	2b52      	cmp	r3, #82	; 0x52
 8001340:	f040 80ba 	bne.w	80014b8 <huansic_jy62_decodePackage+0x2f8>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	b21a      	sxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001354:	b21b      	sxth	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_x = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 800135a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f850 	bl	8000404 <__aeabi_i2d>
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b4f      	ldr	r3, [pc, #316]	; (80014a8 <huansic_jy62_decodePackage+0x2e8>)
 800136a:	f7ff f9df 	bl	800072c <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4b4d      	ldr	r3, [pc, #308]	; (80014b0 <huansic_jy62_decodePackage+0x2f0>)
 800137c:	f7ff f8ac 	bl	80004d8 <__aeabi_dmul>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b49      	ldr	r3, [pc, #292]	; (80014b4 <huansic_jy62_decodePackage+0x2f4>)
 800138e:	f7ff f9cd 	bl	800072c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	a341      	add	r3, pc, #260	; (adr r3, 80014a0 <huansic_jy62_decodePackage+0x2e0>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff f89a 	bl	80004d8 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fb6c 	bl	8000a88 <__aeabi_d2f>
 80013b0:	4602      	mov	r2, r0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	611a      	str	r2, [r3, #16]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_y = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 80013cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f817 	bl	8000404 <__aeabi_i2d>
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b33      	ldr	r3, [pc, #204]	; (80014a8 <huansic_jy62_decodePackage+0x2e8>)
 80013dc:	f7ff f9a6 	bl	800072c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <huansic_jy62_decodePackage+0x2f0>)
 80013ee:	f7ff f873 	bl	80004d8 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <huansic_jy62_decodePackage+0x2f4>)
 8001400:	f7ff f994 	bl	800072c <__aeabi_ddiv>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	a324      	add	r3, pc, #144	; (adr r3, 80014a0 <huansic_jy62_decodePackage+0x2e0>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	f7ff f861 	bl	80004d8 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	f7ff fb33 	bl	8000a88 <__aeabi_d2f>
 8001422:	4602      	mov	r2, r0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	615a      	str	r2, [r3, #20]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b21a      	sxth	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001438:	b21b      	sxth	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_z = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 800143e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe ffde 	bl	8000404 <__aeabi_i2d>
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <huansic_jy62_decodePackage+0x2e8>)
 800144e:	f7ff f96d 	bl	800072c <__aeabi_ddiv>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <huansic_jy62_decodePackage+0x2f0>)
 8001460:	f7ff f83a 	bl	80004d8 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <huansic_jy62_decodePackage+0x2f4>)
 8001472:	f7ff f95b 	bl	800072c <__aeabi_ddiv>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	a308      	add	r3, pc, #32	; (adr r3, 80014a0 <huansic_jy62_decodePackage+0x2e0>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7ff f828 	bl	80004d8 <__aeabi_dmul>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fafa 	bl	8000a88 <__aeabi_d2f>
 8001494:	4602      	mov	r2, r0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
 800149a:	e087      	b.n	80015ac <huansic_jy62_decodePackage+0x3ec>
 800149c:	f3af 8000 	nop.w
 80014a0:	54442d18 	.word	0x54442d18
 80014a4:	400921fb 	.word	0x400921fb
 80014a8:	40e00000 	.word	0x40e00000
 80014ac:	40300000 	.word	0x40300000
 80014b0:	409f4000 	.word	0x409f4000
 80014b4:	40668000 	.word	0x40668000
	} else if (hjy62->buffer[1] == 0x53) {		// angle
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80014be:	2b53      	cmp	r3, #83	; 0x53
 80014c0:	d174      	bne.n	80015ac <huansic_jy62_decodePackage+0x3ec>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_x = temp / 32768.0 * M_PI;
 80014d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7fe ff91 	bl	8000404 <__aeabi_i2d>
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <huansic_jy62_decodePackage+0x410>)
 80014e8:	f7ff f920 	bl	800072c <__aeabi_ddiv>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	a334      	add	r3, pc, #208	; (adr r3, 80015c8 <huansic_jy62_decodePackage+0x408>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe ffed 	bl	80004d8 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fabf 	bl	8000a88 <__aeabi_d2f>
 800150a:	4602      	mov	r2, r0
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	61da      	str	r2, [r3, #28]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	b21a      	sxth	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_y = temp / 32768.0 * M_PI;
 8001526:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ff6a 	bl	8000404 <__aeabi_i2d>
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <huansic_jy62_decodePackage+0x410>)
 8001536:	f7ff f8f9 	bl	800072c <__aeabi_ddiv>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	a321      	add	r3, pc, #132	; (adr r3, 80015c8 <huansic_jy62_decodePackage+0x408>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7fe ffc6 	bl	80004d8 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff fa98 	bl	8000a88 <__aeabi_d2f>
 8001558:	4602      	mov	r2, r0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	621a      	str	r2, [r3, #32]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800156e:	b21b      	sxth	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_z = temp / 32768.0 * M_PI;
 8001574:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ff43 	bl	8000404 <__aeabi_i2d>
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <huansic_jy62_decodePackage+0x410>)
 8001584:	f7ff f8d2 	bl	800072c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	a30d      	add	r3, pc, #52	; (adr r3, 80015c8 <huansic_jy62_decodePackage+0x408>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7fe ff9f 	bl	80004d8 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff fa71 	bl	8000a88 <__aeabi_d2f>
 80015a6:	4602      	mov	r2, r0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// record current time
	hjy62->lastUpdated = HAL_GetTick();
 80015ac:	f002 fa76 	bl	8003a9c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
 80015b6:	e002      	b.n	80015be <huansic_jy62_decodePackage+0x3fe>
		return;
 80015b8:	bf00      	nop
 80015ba:	e000      	b.n	80015be <huansic_jy62_decodePackage+0x3fe>
		return;
 80015bc:	bf00      	nop
}
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	f3af 8000 	nop.w
 80015c8:	54442d18 	.word	0x54442d18
 80015cc:	400921fb 	.word	0x400921fb
 80015d0:	40e00000 	.word	0x40e00000

080015d4 <huansic_jy62_setDMA>:

void huansic_jy62_setDMA(JY62_HandleTypeDef *hjy62) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	332c      	adds	r3, #44	; 0x2c
 80015e4:	220b      	movs	r2, #11
 80015e6:	4619      	mov	r1, r3
 80015e8:	f005 f923 	bl	8006832 <HAL_UART_Receive_DMA>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
	...

08001608 <huansic_order_new>:
	uint8_t i;
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++)
		orderBuffers[i].id = -1;
}

Order* huansic_order_new(int8_t id) {
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161a:	d101      	bne.n	8001620 <huansic_order_new+0x18>
		return 0;
 800161c:	2300      	movs	r3, #0
 800161e:	e046      	b.n	80016ae <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	e017      	b.n	8001656 <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	4923      	ldr	r1, [pc, #140]	; (80016b8 <huansic_order_new+0xb0>)
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	3310      	adds	r3, #16
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	429a      	cmp	r2, r3
 800163e:	d107      	bne.n	8001650 <huansic_order_new+0x48>
			return &orderBuffers[i];
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <huansic_order_new+0xb0>)
 800164c:	4413      	add	r3, r2
 800164e:	e02e      	b.n	80016ae <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	3301      	adds	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	2b3b      	cmp	r3, #59	; 0x3b
 800165a:	d9e4      	bls.n	8001626 <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	e021      	b.n	80016a6 <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	4914      	ldr	r1, [pc, #80]	; (80016b8 <huansic_order_new+0xb0>)
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	440b      	add	r3, r1
 8001670:	3310      	adds	r3, #16
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d112      	bne.n	80016a0 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <huansic_order_new+0xb0>)
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4403      	add	r3, r0
 800168c:	3310      	adds	r3, #16
 800168e:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <huansic_order_new+0xb0>)
 800169c:	4413      	add	r3, r2
 800169e:	e006      	b.n	80016ae <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	3301      	adds	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b3b      	cmp	r3, #59	; 0x3b
 80016aa:	d9da      	bls.n	8001662 <huansic_order_new+0x5a>
		}
	}

	return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	20000204 	.word	0x20000204

080016bc <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	if(ptr->id == -1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016cc:	d103      	bne.n	80016d6 <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff90 	bl	80015f4 <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 80016d4:	e003      	b.n	80016de <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
 80016dc:	611a      	str	r2, [r3, #16]
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <huansic_motor_init+0x1c>
 80016f8:	4b55      	ldr	r3, [pc, #340]	; (8001850 <huansic_motor_init+0x168>)
 80016fa:	4a56      	ldr	r2, [pc, #344]	; (8001854 <huansic_motor_init+0x16c>)
 80016fc:	210c      	movs	r1, #12
 80016fe:	4856      	ldr	r0, [pc, #344]	; (8001858 <huansic_motor_init+0x170>)
 8001700:	f005 fb1c 	bl	8006d3c <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <huansic_motor_init+0x30>
 800170c:	4b53      	ldr	r3, [pc, #332]	; (800185c <huansic_motor_init+0x174>)
 800170e:	4a51      	ldr	r2, [pc, #324]	; (8001854 <huansic_motor_init+0x16c>)
 8001710:	210d      	movs	r1, #13
 8001712:	4851      	ldr	r0, [pc, #324]	; (8001858 <huansic_motor_init+0x170>)
 8001714:	f005 fb12 	bl	8006d3c <__assert_func>
	assert(hmotor->dt);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	f04f 0100 	mov.w	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fca3 	bl	800106c <__aeabi_fcmpeq>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <huansic_motor_init+0x50>
 800172c:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <huansic_motor_init+0x178>)
 800172e:	4a49      	ldr	r2, [pc, #292]	; (8001854 <huansic_motor_init+0x16c>)
 8001730:	210e      	movs	r1, #14
 8001732:	4849      	ldr	r0, [pc, #292]	; (8001858 <huansic_motor_init+0x170>)
 8001734:	f005 fb02 	bl	8006d3c <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	849a      	strh	r2, [r3, #36]	; 0x24
	hmotor->lastError = 0;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2200      	movs	r2, #0
 8001780:	635a      	str	r2, [r3, #52]	; 0x34
 8001782:	e01c      	b.n	80017be <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d105      	bne.n	8001798 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	639a      	str	r2, [r3, #56]	; 0x38
 8001796:	e012      	b.n	80017be <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b08      	cmp	r3, #8
 800179e:	d105      	bne.n	80017ac <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2200      	movs	r2, #0
 80017a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80017aa:	e008      	b.n	80017be <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b0c      	cmp	r3, #12
 80017b2:	d104      	bne.n	80017be <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d026      	beq.n	8001814 <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d105      	bne.n	80017da <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2200      	movs	r2, #0
 80017d6:	635a      	str	r2, [r3, #52]	; 0x34
 80017d8:	e01c      	b.n	8001814 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d105      	bne.n	80017ee <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2200      	movs	r2, #0
 80017ea:	639a      	str	r2, [r3, #56]	; 0x38
 80017ec:	e012      	b.n	8001814 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d105      	bne.n	8001802 <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2200      	movs	r2, #0
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001800:	e008      	b.n	8001814 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d104      	bne.n	8001814 <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2200      	movs	r2, #0
 8001812:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	213c      	movs	r1, #60	; 0x3c
 800181a:	4618      	mov	r0, r3
 800181c:	f004 f8d0 	bl	80059c0 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4619      	mov	r1, r3
 800182a:	4610      	mov	r0, r2
 800182c:	f003 ff84 	bl	8005738 <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f003 ff78 	bl	8005738 <HAL_TIM_PWM_Start>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	08009bb8 	.word	0x08009bb8
 8001854:	08009c38 	.word	0x08009c38
 8001858:	08009bc8 	.word	0x08009bc8
 800185c:	08009be8 	.word	0x08009be8
 8001860:	08009bfc 	.word	0x08009bfc

08001864 <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	int16_t diffTick = (0x0FFFF & hmotor->counter->Instance->CNT) - hmotor->lastTick;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	b29a      	uxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	b29b      	uxth	r3, r3
 800187e:	82fb      	strh	r3, [r7, #22]

	hmotor->lastTick = hmotor->counter->Instance->CNT;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	849a      	strh	r2, [r3, #36]	; 0x24

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 800188e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fa02 	bl	8000c9c <__aeabi_i2f>
 8001898:	4602      	mov	r2, r0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4619      	mov	r1, r3
 80018a0:	4610      	mov	r0, r2
 80018a2:	f7ff fb03 	bl	8000eac <__aeabi_fdiv>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	62da      	str	r2, [r3, #44]	; 0x2c
	//hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	4619      	mov	r1, r3
 80018bc:	4610      	mov	r0, r2
 80018be:	f7ff f937 	bl	8000b30 <__aeabi_fsub>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4619      	mov	r1, r3
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff f932 	bl	8000b30 <__aeabi_fsub>
 80018cc:	4603      	mov	r3, r0
 80018ce:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	4619      	mov	r1, r3
 80018da:	4610      	mov	r0, r2
 80018dc:	f7ff f928 	bl	8000b30 <__aeabi_fsub>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f7ff f91e 	bl	8000b34 <__addsf3>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	695a      	ldr	r2, [r3, #20]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	4619      	mov	r1, r3
 800190a:	4610      	mov	r0, r2
 800190c:	f7ff fa1a 	bl	8000d44 <__aeabi_fmul>
 8001910:	4603      	mov	r3, r0
 8001912:	461c      	mov	r4, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699a      	ldr	r2, [r3, #24]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f7ff fa10 	bl	8000d44 <__aeabi_fmul>
 8001924:	4603      	mov	r3, r0
 8001926:	4619      	mov	r1, r3
 8001928:	4620      	mov	r0, r4
 800192a:	f7ff f903 	bl	8000b34 <__addsf3>
 800192e:	4603      	mov	r3, r0
 8001930:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	6939      	ldr	r1, [r7, #16]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fa03 	bl	8000d44 <__aeabi_fmul>
 800193e:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001940:	4619      	mov	r1, r3
 8001942:	4620      	mov	r0, r4
 8001944:	f7ff f8f6 	bl	8000b34 <__addsf3>
 8001948:	4603      	mov	r3, r0
 800194a:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 800194c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f7ff fbb3 	bl	80010bc <__aeabi_fcmpgt>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <huansic_motor_pid+0xfe>
 800195c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001960:	e009      	b.n	8001976 <huansic_motor_pid+0x112>
 8001962:	4954      	ldr	r1, [pc, #336]	; (8001ab4 <huansic_motor_pid+0x250>)
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff fb8b 	bl	8001080 <__aeabi_fcmplt>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <huansic_motor_pid+0x110>
 8001970:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <huansic_motor_pid+0x250>)
 8001972:	e000      	b.n	8001976 <huansic_motor_pid+0x112>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 8001978:	f04f 0100 	mov.w	r1, #0
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff fb9d 	bl	80010bc <__aeabi_fcmpgt>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d019      	beq.n	80019bc <huansic_motor_pid+0x158>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f97c 	bl	8000c94 <__aeabi_ui2f>
 800199c:	4603      	mov	r3, r0
 800199e:	4619      	mov	r1, r3
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff f9cf 	bl	8000d44 <__aeabi_fmul>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f008 f8d3 	bl	8009b54 <roundf>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fb8d 	bl	80010d0 <__aeabi_f2uiz>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	e000      	b.n	80019be <huansic_motor_pid+0x15a>
 80019bc:	2300      	movs	r3, #0
 80019be:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 80019c0:	f04f 0100 	mov.w	r1, #0
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff fb5b 	bl	8001080 <__aeabi_fcmplt>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d019      	beq.n	8001a04 <huansic_motor_pid+0x1a0>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f958 	bl	8000c94 <__aeabi_ui2f>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff f9ab 	bl	8000d44 <__aeabi_fmul>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f008 f8af 	bl	8009b54 <roundf>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fb69 	bl	80010d0 <__aeabi_f2uiz>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	e000      	b.n	8001a06 <huansic_motor_pid+0x1a2>
 8001a04:	2300      	movs	r3, #0
 8001a06:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <huansic_motor_pid+0x1b8>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	897a      	ldrh	r2, [r7, #10]
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1a:	e01c      	b.n	8001a56 <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d105      	bne.n	8001a30 <huansic_motor_pid+0x1cc>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	897a      	ldrh	r2, [r7, #10]
 8001a2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001a2e:	e012      	b.n	8001a56 <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d105      	bne.n	8001a44 <huansic_motor_pid+0x1e0>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	897a      	ldrh	r2, [r7, #10]
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a42:	e008      	b.n	8001a56 <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	d104      	bne.n	8001a56 <huansic_motor_pid+0x1f2>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	897a      	ldrh	r2, [r7, #10]
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d026      	beq.n	8001aac <huansic_motor_pid+0x248>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d105      	bne.n	8001a72 <huansic_motor_pid+0x20e>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	893a      	ldrh	r2, [r7, #8]
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8001a70:	e01c      	b.n	8001aac <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d105      	bne.n	8001a86 <huansic_motor_pid+0x222>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	893a      	ldrh	r2, [r7, #8]
 8001a82:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a84:	e012      	b.n	8001aac <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d105      	bne.n	8001a9a <huansic_motor_pid+0x236>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	893a      	ldrh	r2, [r7, #8]
 8001a96:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a98:	e008      	b.n	8001aac <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d104      	bne.n	8001aac <huansic_motor_pid+0x248>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	893a      	ldrh	r2, [r7, #8]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd90      	pop	{r4, r7, pc}
 8001ab4:	bf800000 	.word	0xbf800000

08001ab8 <custom_order_new_failed>:
extern float myCharge;				// current charge returned by Master

// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms

__weak void custom_order_new_failed(uint8_t id) {
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]

}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	hxb->nextPackageLength = 6;		// header length
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2206      	movs	r2, #6
 8001ad8:	725a      	strb	r2, [r3, #9]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f103 010a 	add.w	r1, r3, #10
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7a5b      	ldrb	r3, [r3, #9]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	f004 fea1 	bl	8006832 <HAL_UART_Receive_DMA>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <huansic_xb_decodeHeader>:

uint8_t huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	// checksum
	if (hxb->buffer[5]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7bda      	ldrb	r2, [r3, #15]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7a99      	ldrb	r1, [r3, #10]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7adb      	ldrb	r3, [r3, #11]
 8001b0c:	404b      	eors	r3, r1
 8001b0e:	b2d9      	uxtb	r1, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7b1b      	ldrb	r3, [r3, #12]
 8001b14:	404b      	eors	r3, r1
 8001b16:	b2d9      	uxtb	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7b5b      	ldrb	r3, [r3, #13]
 8001b1c:	404b      	eors	r3, r1
 8001b1e:	b2d9      	uxtb	r1, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	7b9b      	ldrb	r3, [r3, #14]
 8001b24:	404b      	eors	r3, r1
 8001b26:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <huansic_xb_decodeHeader+0x38>
		return 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e01d      	b.n	8001b6c <huansic_xb_decodeHeader+0x74>

	// get and check packet ID
	if (hxb->buffer[0] != 0x01 && hxb->buffer[0] != 0x05)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7a9b      	ldrb	r3, [r3, #10]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d005      	beq.n	8001b44 <huansic_xb_decodeHeader+0x4c>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7a9b      	ldrb	r3, [r3, #10]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d001      	beq.n	8001b44 <huansic_xb_decodeHeader+0x4c>
		return 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e013      	b.n	8001b6c <huansic_xb_decodeHeader+0x74>
	hxb->nextPackageID = hxb->buffer[0];
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7a9a      	ldrb	r2, [r3, #10]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	721a      	strb	r2, [r3, #8]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7b9a      	ldrb	r2, [r3, #14]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	725a      	strb	r2, [r3, #9]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6818      	ldr	r0, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f103 010a 	add.w	r1, r3, #10
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	7a5b      	ldrb	r3, [r3, #9]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	f004 fe64 	bl	8006832 <HAL_UART_Receive_DMA>
	return 1;
 8001b6a:	2301      	movs	r3, #1
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <huansic_xb_decodeBody>:

void huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b088      	sub	sp, #32
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	76fb      	strb	r3, [r7, #27]
 8001b80:	2300      	movs	r3, #0
 8001b82:	777b      	strb	r3, [r7, #29]
	uint32_t temp;
	if (hxb->nextPackageID == 0x01) {		// game information
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7a1b      	ldrb	r3, [r3, #8]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	f040 8175 	bne.w	8001e78 <huansic_xb_decodeBody+0x304>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8001b8e:	7f7b      	ldrb	r3, [r7, #29]
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	777a      	strb	r2, [r7, #29]
 8001b94:	461a      	mov	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	7a9a      	ldrb	r2, [r3, #10]
 8001b9c:	4b8f      	ldr	r3, [pc, #572]	; (8001ddc <huansic_xb_decodeBody+0x268>)
 8001b9e:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8001ba0:	7f7b      	ldrb	r3, [r7, #29]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	77fb      	strb	r3, [r7, #31]
 8001baa:	e079      	b.n	8001ca0 <huansic_xb_decodeBody+0x12c>
			index += 2;
 8001bac:	7f7b      	ldrb	r3, [r7, #29]
 8001bae:	3302      	adds	r3, #2
 8001bb0:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index++] << 8;
 8001bb2:	7f7b      	ldrb	r3, [r7, #29]
 8001bb4:	1c5a      	adds	r2, r3, #1
 8001bb6:	777a      	strb	r2, [r7, #29]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4413      	add	r3, r2
 8001bbe:	7a9b      	ldrb	r3, [r3, #10]
 8001bc0:	b29a      	uxth	r2, r3
 8001bc2:	7ffb      	ldrb	r3, [r7, #31]
 8001bc4:	0212      	lsls	r2, r2, #8
 8001bc6:	b291      	uxth	r1, r2
 8001bc8:	4a85      	ldr	r2, [pc, #532]	; (8001de0 <huansic_xb_decodeBody+0x26c>)
 8001bca:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index++];
 8001bce:	7f7b      	ldrb	r3, [r7, #29]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	777a      	strb	r2, [r7, #29]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	7a9a      	ldrb	r2, [r3, #10]
 8001bdc:	7ffb      	ldrb	r3, [r7, #31]
 8001bde:	b291      	uxth	r1, r2
 8001be0:	4a7f      	ldr	r2, [pc, #508]	; (8001de0 <huansic_xb_decodeBody+0x26c>)
 8001be2:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 8001be6:	7f7b      	ldrb	r3, [r7, #29]
 8001be8:	3302      	adds	r3, #2
 8001bea:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index++] << 8;
 8001bec:	7f7b      	ldrb	r3, [r7, #29]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	777a      	strb	r2, [r7, #29]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	7a9b      	ldrb	r3, [r3, #10]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	7ffb      	ldrb	r3, [r7, #31]
 8001bfe:	0212      	lsls	r2, r2, #8
 8001c00:	b291      	uxth	r1, r2
 8001c02:	4a77      	ldr	r2, [pc, #476]	; (8001de0 <huansic_xb_decodeBody+0x26c>)
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	460a      	mov	r2, r1
 8001c0a:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 8001c0c:	7f7b      	ldrb	r3, [r7, #29]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	4413      	add	r3, r2
 8001c12:	7a9a      	ldrb	r2, [r3, #10]
 8001c14:	7ffb      	ldrb	r3, [r7, #31]
 8001c16:	b291      	uxth	r1, r2
 8001c18:	4a71      	ldr	r2, [pc, #452]	; (8001de0 <huansic_xb_decodeBody+0x26c>)
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	460a      	mov	r2, r1
 8001c20:	805a      	strh	r2, [r3, #2]
			index += 2;
 8001c22:	7f7b      	ldrb	r3, [r7, #29]
 8001c24:	3302      	adds	r3, #2
 8001c26:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index++] << 8;
 8001c28:	7f7b      	ldrb	r3, [r7, #29]
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	777a      	strb	r2, [r7, #29]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4413      	add	r3, r2
 8001c34:	7a9b      	ldrb	r3, [r3, #10]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	7ffb      	ldrb	r3, [r7, #31]
 8001c3a:	0212      	lsls	r2, r2, #8
 8001c3c:	b291      	uxth	r1, r2
 8001c3e:	4a68      	ldr	r2, [pc, #416]	; (8001de0 <huansic_xb_decodeBody+0x26c>)
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4413      	add	r3, r2
 8001c44:	460a      	mov	r2, r1
 8001c46:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8001c48:	7f7b      	ldrb	r3, [r7, #29]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	7a9a      	ldrb	r2, [r3, #10]
 8001c50:	7ffb      	ldrb	r3, [r7, #31]
 8001c52:	b291      	uxth	r1, r2
 8001c54:	4a62      	ldr	r2, [pc, #392]	; (8001de0 <huansic_xb_decodeBody+0x26c>)
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4413      	add	r3, r2
 8001c5a:	460a      	mov	r2, r1
 8001c5c:	809a      	strh	r2, [r3, #4]
			index += 2;
 8001c5e:	7f7b      	ldrb	r3, [r7, #29]
 8001c60:	3302      	adds	r3, #2
 8001c62:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index++] << 8;
 8001c64:	7f7b      	ldrb	r3, [r7, #29]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	777a      	strb	r2, [r7, #29]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	7a9b      	ldrb	r3, [r3, #10]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	7ffb      	ldrb	r3, [r7, #31]
 8001c76:	0212      	lsls	r2, r2, #8
 8001c78:	b291      	uxth	r1, r2
 8001c7a:	4a59      	ldr	r2, [pc, #356]	; (8001de0 <huansic_xb_decodeBody+0x26c>)
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	460a      	mov	r2, r1
 8001c82:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 8001c84:	7f7b      	ldrb	r3, [r7, #29]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	7a9a      	ldrb	r2, [r3, #10]
 8001c8c:	7ffb      	ldrb	r3, [r7, #31]
 8001c8e:	b291      	uxth	r1, r2
 8001c90:	4a53      	ldr	r2, [pc, #332]	; (8001de0 <huansic_xb_decodeBody+0x26c>)
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	460a      	mov	r2, r1
 8001c98:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 8001c9a:	7ffb      	ldrb	r3, [r7, #31]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	77fb      	strb	r3, [r7, #31]
 8001ca0:	7ffb      	ldrb	r3, [r7, #31]
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d982      	bls.n	8001bac <huansic_xb_decodeBody+0x38>
		}

		/* total time of this round */
		index++;
 8001ca6:	7f7b      	ldrb	r3, [r7, #29]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	777b      	strb	r3, [r7, #29]
		gameStageTimeLimit = hxb->buffer[index++];
 8001cac:	7f7b      	ldrb	r3, [r7, #29]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	777a      	strb	r2, [r7, #29]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	7a9b      	ldrb	r3, [r3, #10]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <huansic_xb_decodeBody+0x270>)
 8001cbe:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8001cc0:	4b48      	ldr	r3, [pc, #288]	; (8001de4 <huansic_xb_decodeBody+0x270>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	021b      	lsls	r3, r3, #8
 8001cc6:	4a47      	ldr	r2, [pc, #284]	; (8001de4 <huansic_xb_decodeBody+0x270>)
 8001cc8:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001cca:	7f7b      	ldrb	r3, [r7, #29]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	777a      	strb	r2, [r7, #29]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	7a9b      	ldrb	r3, [r3, #10]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <huansic_xb_decodeBody+0x270>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	4a40      	ldr	r2, [pc, #256]	; (8001de4 <huansic_xb_decodeBody+0x270>)
 8001ce2:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001ce4:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <huansic_xb_decodeBody+0x270>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	021b      	lsls	r3, r3, #8
 8001cea:	4a3e      	ldr	r2, [pc, #248]	; (8001de4 <huansic_xb_decodeBody+0x270>)
 8001cec:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001cee:	7f7b      	ldrb	r3, [r7, #29]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	777a      	strb	r2, [r7, #29]
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	7a9b      	ldrb	r3, [r3, #10]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b39      	ldr	r3, [pc, #228]	; (8001de4 <huansic_xb_decodeBody+0x270>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	4a37      	ldr	r2, [pc, #220]	; (8001de4 <huansic_xb_decodeBody+0x270>)
 8001d06:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001d08:	4b36      	ldr	r3, [pc, #216]	; (8001de4 <huansic_xb_decodeBody+0x270>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	4a35      	ldr	r2, [pc, #212]	; (8001de4 <huansic_xb_decodeBody+0x270>)
 8001d10:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001d12:	7f7b      	ldrb	r3, [r7, #29]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	777a      	strb	r2, [r7, #29]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	7a9b      	ldrb	r3, [r3, #10]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <huansic_xb_decodeBody+0x270>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	4a2e      	ldr	r2, [pc, #184]	; (8001de4 <huansic_xb_decodeBody+0x270>)
 8001d2a:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 8001d2c:	7f7b      	ldrb	r3, [r7, #29]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	7a9b      	ldrb	r3, [r3, #10]
 8001d34:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8001d36:	2300      	movs	r3, #0
 8001d38:	77fb      	strb	r3, [r7, #31]
 8001d3a:	e040      	b.n	8001dbe <huansic_xb_decodeBody+0x24a>
			index += 2;
 8001d3c:	7f7b      	ldrb	r3, [r7, #29]
 8001d3e:	3302      	adds	r3, #2
 8001d40:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8001d42:	7f7b      	ldrb	r3, [r7, #29]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	777a      	strb	r2, [r7, #29]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	7a9b      	ldrb	r3, [r3, #10]
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	7ffb      	ldrb	r3, [r7, #31]
 8001d54:	0212      	lsls	r2, r2, #8
 8001d56:	b291      	uxth	r1, r2
 8001d58:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <huansic_xb_decodeBody+0x274>)
 8001d5a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x = hxb->buffer[index++];
 8001d5e:	7f7b      	ldrb	r3, [r7, #29]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	777a      	strb	r2, [r7, #29]
 8001d64:	461a      	mov	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	7a9a      	ldrb	r2, [r3, #10]
 8001d6c:	7ffb      	ldrb	r3, [r7, #31]
 8001d6e:	b291      	uxth	r1, r2
 8001d70:	4a1d      	ldr	r2, [pc, #116]	; (8001de8 <huansic_xb_decodeBody+0x274>)
 8001d72:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8001d76:	7f7b      	ldrb	r3, [r7, #29]
 8001d78:	3302      	adds	r3, #2
 8001d7a:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8001d7c:	7f7b      	ldrb	r3, [r7, #29]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	777a      	strb	r2, [r7, #29]
 8001d82:	461a      	mov	r2, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4413      	add	r3, r2
 8001d88:	7a9b      	ldrb	r3, [r3, #10]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	7ffb      	ldrb	r3, [r7, #31]
 8001d8e:	0212      	lsls	r2, r2, #8
 8001d90:	b291      	uxth	r1, r2
 8001d92:	4a15      	ldr	r2, [pc, #84]	; (8001de8 <huansic_xb_decodeBody+0x274>)
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	460a      	mov	r2, r1
 8001d9a:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y = hxb->buffer[index++];
 8001d9c:	7f7b      	ldrb	r3, [r7, #29]
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	777a      	strb	r2, [r7, #29]
 8001da2:	461a      	mov	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4413      	add	r3, r2
 8001da8:	7a9a      	ldrb	r2, [r3, #10]
 8001daa:	7ffb      	ldrb	r3, [r7, #31]
 8001dac:	b291      	uxth	r1, r2
 8001dae:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <huansic_xb_decodeBody+0x274>)
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	460a      	mov	r2, r1
 8001db6:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8001db8:	7ffb      	ldrb	r3, [r7, #31]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	77fb      	strb	r3, [r7, #31]
 8001dbe:	7ffa      	ldrb	r2, [r7, #31]
 8001dc0:	7efb      	ldrb	r3, [r7, #27]
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d3ba      	bcc.n	8001d3c <huansic_xb_decodeBody+0x1c8>
		}

		/* opponent beacons */
		index++;
 8001dc6:	7f7b      	ldrb	r3, [r7, #29]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	777b      	strb	r3, [r7, #29]
		listLength = hxb->buffer[index];
 8001dcc:	7f7b      	ldrb	r3, [r7, #29]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	7a9b      	ldrb	r3, [r3, #10]
 8001dd4:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	77fb      	strb	r3, [r7, #31]
 8001dda:	e048      	b.n	8001e6e <huansic_xb_decodeBody+0x2fa>
 8001ddc:	20000ba4 	.word	0x20000ba4
 8001de0:	20000bb0 	.word	0x20000bb0
 8001de4:	20000ba8 	.word	0x20000ba8
 8001de8:	20000bd8 	.word	0x20000bd8
			index += 2;
 8001dec:	7f7b      	ldrb	r3, [r7, #29]
 8001dee:	3302      	adds	r3, #2
 8001df0:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 8001df2:	7f7b      	ldrb	r3, [r7, #29]
 8001df4:	1c5a      	adds	r2, r3, #1
 8001df6:	777a      	strb	r2, [r7, #29]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	7a9b      	ldrb	r3, [r3, #10]
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	7ffb      	ldrb	r3, [r7, #31]
 8001e04:	0212      	lsls	r2, r2, #8
 8001e06:	b291      	uxth	r1, r2
 8001e08:	4aa0      	ldr	r2, [pc, #640]	; (800208c <huansic_xb_decodeBody+0x518>)
 8001e0a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x = hxb->buffer[index++];
 8001e0e:	7f7b      	ldrb	r3, [r7, #29]
 8001e10:	1c5a      	adds	r2, r3, #1
 8001e12:	777a      	strb	r2, [r7, #29]
 8001e14:	461a      	mov	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4413      	add	r3, r2
 8001e1a:	7a9a      	ldrb	r2, [r3, #10]
 8001e1c:	7ffb      	ldrb	r3, [r7, #31]
 8001e1e:	b291      	uxth	r1, r2
 8001e20:	4a9a      	ldr	r2, [pc, #616]	; (800208c <huansic_xb_decodeBody+0x518>)
 8001e22:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 8001e26:	7f7b      	ldrb	r3, [r7, #29]
 8001e28:	3302      	adds	r3, #2
 8001e2a:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8001e2c:	7f7b      	ldrb	r3, [r7, #29]
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	777a      	strb	r2, [r7, #29]
 8001e32:	461a      	mov	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	7a9b      	ldrb	r3, [r3, #10]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	7ffb      	ldrb	r3, [r7, #31]
 8001e3e:	0212      	lsls	r2, r2, #8
 8001e40:	b291      	uxth	r1, r2
 8001e42:	4a92      	ldr	r2, [pc, #584]	; (800208c <huansic_xb_decodeBody+0x518>)
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	460a      	mov	r2, r1
 8001e4a:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8001e4c:	7f7b      	ldrb	r3, [r7, #29]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	777a      	strb	r2, [r7, #29]
 8001e52:	461a      	mov	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	4413      	add	r3, r2
 8001e58:	7a9a      	ldrb	r2, [r3, #10]
 8001e5a:	7ffb      	ldrb	r3, [r7, #31]
 8001e5c:	b291      	uxth	r1, r2
 8001e5e:	4a8b      	ldr	r2, [pc, #556]	; (800208c <huansic_xb_decodeBody+0x518>)
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	460a      	mov	r2, r1
 8001e66:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8001e68:	7ffb      	ldrb	r3, [r7, #31]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	77fb      	strb	r3, [r7, #31]
 8001e6e:	7ffa      	ldrb	r2, [r7, #31]
 8001e70:	7efb      	ldrb	r3, [r7, #27]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d3ba      	bcc.n	8001dec <huansic_xb_decodeBody+0x278>
 8001e76:	e324      	b.n	80024c2 <huansic_xb_decodeBody+0x94e>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7a1b      	ldrb	r3, [r3, #8]
 8001e7c:	2b05      	cmp	r3, #5
 8001e7e:	f040 8320 	bne.w	80024c2 <huansic_xb_decodeBody+0x94e>
		/* game status */
		gameStatus = hxb->buffer[index++];
 8001e82:	7f7b      	ldrb	r3, [r7, #29]
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	777a      	strb	r2, [r7, #29]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	7a9a      	ldrb	r2, [r3, #10]
 8001e90:	4b7f      	ldr	r3, [pc, #508]	; (8002090 <huansic_xb_decodeBody+0x51c>)
 8001e92:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 8001e94:	7f7b      	ldrb	r3, [r7, #29]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	777a      	strb	r2, [r7, #29]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	7a9b      	ldrb	r3, [r3, #10]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	4b7b      	ldr	r3, [pc, #492]	; (8002094 <huansic_xb_decodeBody+0x520>)
 8001ea6:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 8001ea8:	4b7a      	ldr	r3, [pc, #488]	; (8002094 <huansic_xb_decodeBody+0x520>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	4a79      	ldr	r2, [pc, #484]	; (8002094 <huansic_xb_decodeBody+0x520>)
 8001eb0:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001eb2:	7f7b      	ldrb	r3, [r7, #29]
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	777a      	strb	r2, [r7, #29]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	7a9b      	ldrb	r3, [r3, #10]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b74      	ldr	r3, [pc, #464]	; (8002094 <huansic_xb_decodeBody+0x520>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	4a72      	ldr	r2, [pc, #456]	; (8002094 <huansic_xb_decodeBody+0x520>)
 8001eca:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8001ecc:	4b71      	ldr	r3, [pc, #452]	; (8002094 <huansic_xb_decodeBody+0x520>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	021b      	lsls	r3, r3, #8
 8001ed2:	4a70      	ldr	r2, [pc, #448]	; (8002094 <huansic_xb_decodeBody+0x520>)
 8001ed4:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001ed6:	7f7b      	ldrb	r3, [r7, #29]
 8001ed8:	1c5a      	adds	r2, r3, #1
 8001eda:	777a      	strb	r2, [r7, #29]
 8001edc:	461a      	mov	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	7a9b      	ldrb	r3, [r3, #10]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b6b      	ldr	r3, [pc, #428]	; (8002094 <huansic_xb_decodeBody+0x520>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	4a69      	ldr	r2, [pc, #420]	; (8002094 <huansic_xb_decodeBody+0x520>)
 8001eee:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8001ef0:	4b68      	ldr	r3, [pc, #416]	; (8002094 <huansic_xb_decodeBody+0x520>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	021b      	lsls	r3, r3, #8
 8001ef6:	4a67      	ldr	r2, [pc, #412]	; (8002094 <huansic_xb_decodeBody+0x520>)
 8001ef8:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001efa:	7f7b      	ldrb	r3, [r7, #29]
 8001efc:	1c5a      	adds	r2, r3, #1
 8001efe:	777a      	strb	r2, [r7, #29]
 8001f00:	461a      	mov	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	7a9b      	ldrb	r3, [r3, #10]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b62      	ldr	r3, [pc, #392]	; (8002094 <huansic_xb_decodeBody+0x520>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	4a60      	ldr	r2, [pc, #384]	; (8002094 <huansic_xb_decodeBody+0x520>)
 8001f12:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 8001f14:	4b60      	ldr	r3, [pc, #384]	; (8002098 <huansic_xb_decodeBody+0x524>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b5e      	ldr	r3, [pc, #376]	; (8002094 <huansic_xb_decodeBody+0x520>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	4a5f      	ldr	r2, [pc, #380]	; (800209c <huansic_xb_decodeBody+0x528>)
 8001f20:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 8001f22:	7f7b      	ldrb	r3, [r7, #29]
 8001f24:	1c5a      	adds	r2, r3, #1
 8001f26:	777a      	strb	r2, [r7, #29]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	7a9b      	ldrb	r3, [r3, #10]
 8001f30:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	021b      	lsls	r3, r3, #8
 8001f36:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001f38:	7f7b      	ldrb	r3, [r7, #29]
 8001f3a:	1c5a      	adds	r2, r3, #1
 8001f3c:	777a      	strb	r2, [r7, #29]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	7a9b      	ldrb	r3, [r3, #10]
 8001f46:	461a      	mov	r2, r3
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	021b      	lsls	r3, r3, #8
 8001f52:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001f54:	7f7b      	ldrb	r3, [r7, #29]
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	777a      	strb	r2, [r7, #29]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4413      	add	r3, r2
 8001f60:	7a9b      	ldrb	r3, [r3, #10]
 8001f62:	461a      	mov	r2, r3
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8001f70:	7f7b      	ldrb	r3, [r7, #29]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	777a      	strb	r2, [r7, #29]
 8001f76:	461a      	mov	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	7a9b      	ldrb	r3, [r3, #10]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 8001f86:	f107 0310 	add.w	r3, r7, #16
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a44      	ldr	r2, [pc, #272]	; (80020a0 <huansic_xb_decodeBody+0x52c>)
 8001f8e:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 2;
 8001f90:	7f7b      	ldrb	r3, [r7, #29]
 8001f92:	3302      	adds	r3, #2
 8001f94:	777b      	strb	r3, [r7, #29]
		myCoord.x = (uint16_t) hxb->buffer[index++] << 8;
 8001f96:	7f7b      	ldrb	r3, [r7, #29]
 8001f98:	1c5a      	adds	r2, r3, #1
 8001f9a:	777a      	strb	r2, [r7, #29]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	7a9b      	ldrb	r3, [r3, #10]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <huansic_xb_decodeBody+0x530>)
 8001fac:	801a      	strh	r2, [r3, #0]
		myCoord.x = hxb->buffer[index++];
 8001fae:	7f7b      	ldrb	r3, [r7, #29]
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	777a      	strb	r2, [r7, #29]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4413      	add	r3, r2
 8001fba:	7a9b      	ldrb	r3, [r3, #10]
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <huansic_xb_decodeBody+0x530>)
 8001fc0:	801a      	strh	r2, [r3, #0]
		index += 2;
 8001fc2:	7f7b      	ldrb	r3, [r7, #29]
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	777b      	strb	r3, [r7, #29]
		myCoord.y = (uint16_t) hxb->buffer[index++] << 8;
 8001fc8:	7f7b      	ldrb	r3, [r7, #29]
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	777a      	strb	r2, [r7, #29]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	7a9b      	ldrb	r3, [r3, #10]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	021b      	lsls	r3, r3, #8
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <huansic_xb_decodeBody+0x530>)
 8001fde:	805a      	strh	r2, [r3, #2]
		myCoord.y = hxb->buffer[index++];
 8001fe0:	7f7b      	ldrb	r3, [r7, #29]
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	777a      	strb	r2, [r7, #29]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	7a9b      	ldrb	r3, [r3, #10]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b2c      	ldr	r3, [pc, #176]	; (80020a4 <huansic_xb_decodeBody+0x530>)
 8001ff2:	805a      	strh	r2, [r3, #2]

		/* fetch battery */
		temp = hxb->buffer[index++];
 8001ff4:	7f7b      	ldrb	r3, [r7, #29]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	777a      	strb	r2, [r7, #29]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	7a9b      	ldrb	r3, [r3, #10]
 8002002:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800200a:	7f7b      	ldrb	r3, [r7, #29]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	777a      	strb	r2, [r7, #29]
 8002010:	461a      	mov	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	7a9b      	ldrb	r3, [r3, #10]
 8002018:	461a      	mov	r2, r3
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	4313      	orrs	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	021b      	lsls	r3, r3, #8
 8002024:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002026:	7f7b      	ldrb	r3, [r7, #29]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	777a      	strb	r2, [r7, #29]
 800202c:	461a      	mov	r2, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4413      	add	r3, r2
 8002032:	7a9b      	ldrb	r3, [r3, #10]
 8002034:	461a      	mov	r2, r3
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4313      	orrs	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002042:	7f7b      	ldrb	r3, [r7, #29]
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	777a      	strb	r2, [r7, #29]
 8002048:	461a      	mov	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	7a9b      	ldrb	r3, [r3, #10]
 8002050:	461a      	mov	r2, r3
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <huansic_xb_decodeBody+0x534>)
 8002060:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 8002062:	4a12      	ldr	r2, [pc, #72]	; (80020ac <huansic_xb_decodeBody+0x538>)
 8002064:	f107 0308 	add.w	r3, r7, #8
 8002068:	e892 0003 	ldmia.w	r2, {r0, r1}
 800206c:	6018      	str	r0, [r3, #0]
 800206e:	3304      	adds	r3, #4
 8002070:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 8002076:	7f7b      	ldrb	r3, [r7, #29]
 8002078:	1c5a      	adds	r2, r3, #1
 800207a:	777a      	strb	r2, [r7, #29]
 800207c:	461a      	mov	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	7a9b      	ldrb	r3, [r3, #10]
 8002084:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8002086:	2300      	movs	r3, #0
 8002088:	77fb      	strb	r3, [r7, #31]
 800208a:	e101      	b.n	8002290 <huansic_xb_decodeBody+0x71c>
 800208c:	20000be4 	.word	0x20000be4
 8002090:	20000ba5 	.word	0x20000ba5
 8002094:	20000bac 	.word	0x20000bac
 8002098:	20000ba8 	.word	0x20000ba8
 800209c:	20000c10 	.word	0x20000c10
 80020a0:	20000c08 	.word	0x20000c08
 80020a4:	20000c04 	.word	0x20000c04
 80020a8:	20000c0c 	.word	0x20000c0c
 80020ac:	08009c08 	.word	0x08009c08
			temp = hxb->buffer[index + 24];
 80020b0:	7f7b      	ldrb	r3, [r7, #29]
 80020b2:	3318      	adds	r3, #24
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	4413      	add	r3, r2
 80020b8:	7a9b      	ldrb	r3, [r3, #10]
 80020ba:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 25];
 80020c2:	7f7b      	ldrb	r3, [r7, #29]
 80020c4:	3319      	adds	r3, #25
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	7a9b      	ldrb	r3, [r3, #10]
 80020cc:	461a      	mov	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 26];
 80020da:	7f7b      	ldrb	r3, [r7, #29]
 80020dc:	331a      	adds	r3, #26
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	4413      	add	r3, r2
 80020e2:	7a9b      	ldrb	r3, [r3, #10]
 80020e4:	461a      	mov	r2, r3
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 27];
 80020f2:	7f7b      	ldrb	r3, [r7, #29]
 80020f4:	331b      	adds	r3, #27
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	7a9b      	ldrb	r3, [r3, #10]
 80020fc:	461a      	mov	r2, r3
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	b25b      	sxtb	r3, r3
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fa7d 	bl	8001608 <huansic_order_new>
 800210e:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d108      	bne.n	8002128 <huansic_xb_decodeBody+0x5b4>
				index += 28;
 8002116:	7f7b      	ldrb	r3, [r7, #29]
 8002118:	331c      	adds	r3, #28
 800211a:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	b2db      	uxtb	r3, r3
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fcc9 	bl	8001ab8 <custom_order_new_failed>
				continue;
 8002126:	e0b0      	b.n	800228a <huansic_xb_decodeBody+0x716>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002128:	7f7b      	ldrb	r3, [r7, #29]
 800212a:	3302      	adds	r3, #2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	7a9b      	ldrb	r3, [r3, #10]
 8002132:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 8002134:	b21a      	sxth	r2, r3
 8002136:	7f7b      	ldrb	r3, [r7, #29]
 8002138:	3303      	adds	r3, #3
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	440b      	add	r3, r1
 800213e:	7a9b      	ldrb	r3, [r3, #10]
 8002140:	b21b      	sxth	r3, r3
 8002142:	4313      	orrs	r3, r2
 8002144:	b21b      	sxth	r3, r3
 8002146:	b29a      	uxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 800214c:	7f7b      	ldrb	r3, [r7, #29]
 800214e:	3306      	adds	r3, #6
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4413      	add	r3, r2
 8002154:	7a9b      	ldrb	r3, [r3, #10]
 8002156:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 8002158:	b21a      	sxth	r2, r3
 800215a:	7f7b      	ldrb	r3, [r7, #29]
 800215c:	3307      	adds	r3, #7
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	440b      	add	r3, r1
 8002162:	7a9b      	ldrb	r3, [r3, #10]
 8002164:	b21b      	sxth	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b21b      	sxth	r3, r3
 800216a:	b29a      	uxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8002170:	7f7b      	ldrb	r3, [r7, #29]
 8002172:	330a      	adds	r3, #10
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4413      	add	r3, r2
 8002178:	7a9b      	ldrb	r3, [r3, #10]
 800217a:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 800217c:	b21a      	sxth	r2, r3
 800217e:	7f7b      	ldrb	r3, [r7, #29]
 8002180:	330b      	adds	r3, #11
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	440b      	add	r3, r1
 8002186:	7a9b      	ldrb	r3, [r3, #10]
 8002188:	b21b      	sxth	r3, r3
 800218a:	4313      	orrs	r3, r2
 800218c:	b21b      	sxth	r3, r3
 800218e:	b29a      	uxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002194:	7f7b      	ldrb	r3, [r7, #29]
 8002196:	330e      	adds	r3, #14
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	4413      	add	r3, r2
 800219c:	7a9b      	ldrb	r3, [r3, #10]
 800219e:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	7f7b      	ldrb	r3, [r7, #29]
 80021a4:	330f      	adds	r3, #15
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	440b      	add	r3, r1
 80021aa:	7a9b      	ldrb	r3, [r3, #10]
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	4313      	orrs	r3, r2
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	b29a      	uxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 80021b8:	7f7b      	ldrb	r3, [r7, #29]
 80021ba:	3310      	adds	r3, #16
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	7a9b      	ldrb	r3, [r3, #10]
 80021c2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	021b      	lsls	r3, r3, #8
 80021c8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 80021ca:	7f7b      	ldrb	r3, [r7, #29]
 80021cc:	3311      	adds	r3, #17
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	4413      	add	r3, r2
 80021d2:	7a9b      	ldrb	r3, [r3, #10]
 80021d4:	461a      	mov	r2, r3
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 80021e2:	7f7b      	ldrb	r3, [r7, #29]
 80021e4:	3312      	adds	r3, #18
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	7a9b      	ldrb	r3, [r3, #10]
 80021ec:	461a      	mov	r2, r3
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 80021fa:	7f7b      	ldrb	r3, [r7, #29]
 80021fc:	3313      	adds	r3, #19
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	7a9b      	ldrb	r3, [r3, #10]
 8002204:	461a      	mov	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8002212:	7f7b      	ldrb	r3, [r7, #29]
 8002214:	3314      	adds	r3, #20
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	4413      	add	r3, r2
 800221a:	7a9b      	ldrb	r3, [r3, #10]
 800221c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	021b      	lsls	r3, r3, #8
 8002222:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 8002224:	7f7b      	ldrb	r3, [r7, #29]
 8002226:	3315      	adds	r3, #21
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4413      	add	r3, r2
 800222c:	7a9b      	ldrb	r3, [r3, #10]
 800222e:	461a      	mov	r2, r3
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 800223c:	7f7b      	ldrb	r3, [r7, #29]
 800223e:	3316      	adds	r3, #22
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4413      	add	r3, r2
 8002244:	7a9b      	ldrb	r3, [r3, #10]
 8002246:	461a      	mov	r2, r3
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 8002254:	7f7b      	ldrb	r3, [r7, #29]
 8002256:	3317      	adds	r3, #23
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	4413      	add	r3, r2
 800225c:	7a9b      	ldrb	r3, [r3, #10]
 800225e:	461a      	mov	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4313      	orrs	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 8002266:	f107 0310 	add.w	r3, r7, #16
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 28;
 8002270:	7f7b      	ldrb	r3, [r7, #29]
 8002272:	331c      	adds	r3, #28
 8002274:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	691a      	ldr	r2, [r3, #16]
 800227a:	7f3b      	ldrb	r3, [r7, #28]
 800227c:	1c59      	adds	r1, r3, #1
 800227e:	7739      	strb	r1, [r7, #28]
 8002280:	b252      	sxtb	r2, r2
 8002282:	3320      	adds	r3, #32
 8002284:	443b      	add	r3, r7
 8002286:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 800228a:	7ffb      	ldrb	r3, [r7, #31]
 800228c:	3301      	adds	r3, #1
 800228e:	77fb      	strb	r3, [r7, #31]
 8002290:	7ffa      	ldrb	r2, [r7, #31]
 8002292:	7efb      	ldrb	r3, [r7, #27]
 8002294:	429a      	cmp	r2, r3
 8002296:	f4ff af0b 	bcc.w	80020b0 <huansic_xb_decodeBody+0x53c>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 800229a:	2300      	movs	r3, #0
 800229c:	77fb      	strb	r3, [r7, #31]
 800229e:	e02d      	b.n	80022fc <huansic_xb_decodeBody+0x788>
			if (delivering[i]->id != -1) {
 80022a0:	7ffb      	ldrb	r3, [r7, #31]
 80022a2:	4a92      	ldr	r2, [pc, #584]	; (80024ec <huansic_xb_decodeBody+0x978>)
 80022a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022a8:	691b      	ldr	r3, [r3, #16]
 80022aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ae:	d022      	beq.n	80022f6 <huansic_xb_decodeBody+0x782>
				for (j = 0; i < updatedOrderIndex; j++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	77bb      	strb	r3, [r7, #30]
 80022b4:	e011      	b.n	80022da <huansic_xb_decodeBody+0x766>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 80022b6:	7ffb      	ldrb	r3, [r7, #31]
 80022b8:	4a8c      	ldr	r2, [pc, #560]	; (80024ec <huansic_xb_decodeBody+0x978>)
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	7fba      	ldrb	r2, [r7, #30]
 80022c2:	3220      	adds	r2, #32
 80022c4:	443a      	add	r2, r7
 80022c6:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d102      	bne.n	80022d4 <huansic_xb_decodeBody+0x760>
						j = 255;
 80022ce:	23ff      	movs	r3, #255	; 0xff
 80022d0:	77bb      	strb	r3, [r7, #30]
						break;
 80022d2:	e006      	b.n	80022e2 <huansic_xb_decodeBody+0x76e>
				for (j = 0; i < updatedOrderIndex; j++)
 80022d4:	7fbb      	ldrb	r3, [r7, #30]
 80022d6:	3301      	adds	r3, #1
 80022d8:	77bb      	strb	r3, [r7, #30]
 80022da:	7ffa      	ldrb	r2, [r7, #31]
 80022dc:	7f3b      	ldrb	r3, [r7, #28]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d3e9      	bcc.n	80022b6 <huansic_xb_decodeBody+0x742>
					}
				if (j != 255)
 80022e2:	7fbb      	ldrb	r3, [r7, #30]
 80022e4:	2bff      	cmp	r3, #255	; 0xff
 80022e6:	d006      	beq.n	80022f6 <huansic_xb_decodeBody+0x782>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 80022e8:	7ffb      	ldrb	r3, [r7, #31]
 80022ea:	4a80      	ldr	r2, [pc, #512]	; (80024ec <huansic_xb_decodeBody+0x978>)
 80022ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff f9e3 	bl	80016bc <huansic_order_delete>
		for (i = 0; i < 5; i++)
 80022f6:	7ffb      	ldrb	r3, [r7, #31]
 80022f8:	3301      	adds	r3, #1
 80022fa:	77fb      	strb	r3, [r7, #31]
 80022fc:	7ffb      	ldrb	r3, [r7, #31]
 80022fe:	2b04      	cmp	r3, #4
 8002300:	d9ce      	bls.n	80022a0 <huansic_xb_decodeBody+0x72c>
			}

		/* record latest order */
		temp = hxb->buffer[index + 24];
 8002302:	7f7b      	ldrb	r3, [r7, #29]
 8002304:	3318      	adds	r3, #24
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	7a9b      	ldrb	r3, [r3, #10]
 800230c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 25];
 8002314:	7f7b      	ldrb	r3, [r7, #29]
 8002316:	3319      	adds	r3, #25
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	7a9b      	ldrb	r3, [r3, #10]
 800231e:	461a      	mov	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4313      	orrs	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 26];
 800232c:	7f7b      	ldrb	r3, [r7, #29]
 800232e:	331a      	adds	r3, #26
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	7a9b      	ldrb	r3, [r3, #10]
 8002336:	461a      	mov	r2, r3
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 27];
 8002344:	7f7b      	ldrb	r3, [r7, #29]
 8002346:	331b      	adds	r3, #27
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	4413      	add	r3, r2
 800234c:	7a9b      	ldrb	r3, [r3, #10]
 800234e:	461a      	mov	r2, r3
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	b25b      	sxtb	r3, r3
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff f954 	bl	8001608 <huansic_order_new>
 8002360:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d108      	bne.n	800237a <huansic_xb_decodeBody+0x806>
			index += 28;
 8002368:	7f7b      	ldrb	r3, [r7, #29]
 800236a:	331c      	adds	r3, #28
 800236c:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fba0 	bl	8001ab8 <custom_order_new_failed>
 8002378:	e0a3      	b.n	80024c2 <huansic_xb_decodeBody+0x94e>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 800237a:	7f7b      	ldrb	r3, [r7, #29]
 800237c:	3302      	adds	r3, #2
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	4413      	add	r3, r2
 8002382:	7a9b      	ldrb	r3, [r3, #10]
 8002384:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 8002386:	b21a      	sxth	r2, r3
 8002388:	7f7b      	ldrb	r3, [r7, #29]
 800238a:	3303      	adds	r3, #3
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	440b      	add	r3, r1
 8002390:	7a9b      	ldrb	r3, [r3, #10]
 8002392:	b21b      	sxth	r3, r3
 8002394:	4313      	orrs	r3, r2
 8002396:	b21b      	sxth	r3, r3
 8002398:	b29a      	uxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 800239e:	7f7b      	ldrb	r3, [r7, #29]
 80023a0:	3306      	adds	r3, #6
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	7a9b      	ldrb	r3, [r3, #10]
 80023a8:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 80023aa:	b21a      	sxth	r2, r3
 80023ac:	7f7b      	ldrb	r3, [r7, #29]
 80023ae:	3307      	adds	r3, #7
 80023b0:	6879      	ldr	r1, [r7, #4]
 80023b2:	440b      	add	r3, r1
 80023b4:	7a9b      	ldrb	r3, [r3, #10]
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	4313      	orrs	r3, r2
 80023ba:	b21b      	sxth	r3, r3
 80023bc:	b29a      	uxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	805a      	strh	r2, [r3, #2]
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80023c2:	7f7b      	ldrb	r3, [r7, #29]
 80023c4:	330a      	adds	r3, #10
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	7a9b      	ldrb	r3, [r3, #10]
 80023cc:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 80023ce:	b21a      	sxth	r2, r3
 80023d0:	7f7b      	ldrb	r3, [r7, #29]
 80023d2:	330b      	adds	r3, #11
 80023d4:	6879      	ldr	r1, [r7, #4]
 80023d6:	440b      	add	r3, r1
 80023d8:	7a9b      	ldrb	r3, [r3, #10]
 80023da:	b21b      	sxth	r3, r3
 80023dc:	4313      	orrs	r3, r2
 80023de:	b21b      	sxth	r3, r3
 80023e0:	b29a      	uxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80023e6:	7f7b      	ldrb	r3, [r7, #29]
 80023e8:	330e      	adds	r3, #14
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	4413      	add	r3, r2
 80023ee:	7a9b      	ldrb	r3, [r3, #10]
 80023f0:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 80023f2:	b21a      	sxth	r2, r3
 80023f4:	7f7b      	ldrb	r3, [r7, #29]
 80023f6:	330f      	adds	r3, #15
 80023f8:	6879      	ldr	r1, [r7, #4]
 80023fa:	440b      	add	r3, r1
 80023fc:	7a9b      	ldrb	r3, [r3, #10]
 80023fe:	b21b      	sxth	r3, r3
 8002400:	4313      	orrs	r3, r2
 8002402:	b21b      	sxth	r3, r3
 8002404:	b29a      	uxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 800240a:	7f7b      	ldrb	r3, [r7, #29]
 800240c:	3310      	adds	r3, #16
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	7a9b      	ldrb	r3, [r3, #10]
 8002414:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 800241c:	7f7b      	ldrb	r3, [r7, #29]
 800241e:	3311      	adds	r3, #17
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	7a9b      	ldrb	r3, [r3, #10]
 8002426:	461a      	mov	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	021b      	lsls	r3, r3, #8
 8002432:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 8002434:	7f7b      	ldrb	r3, [r7, #29]
 8002436:	3312      	adds	r3, #18
 8002438:	687a      	ldr	r2, [r7, #4]
 800243a:	4413      	add	r3, r2
 800243c:	7a9b      	ldrb	r3, [r3, #10]
 800243e:	461a      	mov	r2, r3
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 800244c:	7f7b      	ldrb	r3, [r7, #29]
 800244e:	3313      	adds	r3, #19
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	4413      	add	r3, r2
 8002454:	7a9b      	ldrb	r3, [r3, #10]
 8002456:	461a      	mov	r2, r3
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 8002464:	7f7b      	ldrb	r3, [r7, #29]
 8002466:	3314      	adds	r3, #20
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4413      	add	r3, r2
 800246c:	7a9b      	ldrb	r3, [r3, #10]
 800246e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	021b      	lsls	r3, r3, #8
 8002474:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 8002476:	7f7b      	ldrb	r3, [r7, #29]
 8002478:	3315      	adds	r3, #21
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	7a9b      	ldrb	r3, [r3, #10]
 8002480:	461a      	mov	r2, r3
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 800248e:	7f7b      	ldrb	r3, [r7, #29]
 8002490:	3316      	adds	r3, #22
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	7a9b      	ldrb	r3, [r3, #10]
 8002498:	461a      	mov	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	021b      	lsls	r3, r3, #8
 80024a4:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 80024a6:	7f7b      	ldrb	r3, [r7, #29]
 80024a8:	3317      	adds	r3, #23
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	7a9b      	ldrb	r3, [r3, #10]
 80024b0:	461a      	mov	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	615a      	str	r2, [r3, #20]
		}
	}

	// set up next DMA
	hxb->nextPackageLength = 6;		// header length
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2206      	movs	r2, #6
 80024c6:	725a      	strb	r2, [r3, #9]
	hxb->nextPackageID = 0x00;		// the next one is header
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f103 010a 	add.w	r1, r3, #10
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	7a5b      	ldrb	r3, [r3, #9]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	f004 f9a7 	bl	8006832 <HAL_UART_Receive_DMA>
}
 80024e4:	bf00      	nop
 80024e6:	3720      	adds	r7, #32
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000bf0 	.word	0x20000bf0

080024f0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80024f6:	f001 fa79 	bl	80039ec <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80024fa:	f000 f94f 	bl	800279c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80024fe:	f000 fbcb 	bl	8002c98 <MX_GPIO_Init>
	MX_DMA_Init();
 8002502:	f000 fba3 	bl	8002c4c <MX_DMA_Init>
	MX_I2C1_Init();
 8002506:	f000 f98f 	bl	8002828 <MX_I2C1_Init>
	MX_TIM1_Init();
 800250a:	f000 f9bb 	bl	8002884 <MX_TIM1_Init>
	MX_TIM2_Init();
 800250e:	f000 fa09 	bl	8002924 <MX_TIM2_Init>
	MX_TIM3_Init();
 8002512:	f000 fa5b 	bl	80029cc <MX_TIM3_Init>
	MX_TIM4_Init();
 8002516:	f000 faf1 	bl	8002afc <MX_TIM4_Init>
	MX_USART2_UART_Init();
 800251a:	f000 fb6d 	bl	8002bf8 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 800251e:	f000 fb41 	bl	8002ba4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	RED_LED_BLINK(1);
 8002522:	2300      	movs	r3, #0
 8002524:	71fb      	strb	r3, [r7, #7]
 8002526:	e014      	b.n	8002552 <main+0x62>
 8002528:	2201      	movs	r2, #1
 800252a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800252e:	488c      	ldr	r0, [pc, #560]	; (8002760 <main+0x270>)
 8002530:	f001 ff62 	bl	80043f8 <HAL_GPIO_WritePin>
 8002534:	2096      	movs	r0, #150	; 0x96
 8002536:	f001 fabb 	bl	8003ab0 <HAL_Delay>
 800253a:	2200      	movs	r2, #0
 800253c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002540:	4887      	ldr	r0, [pc, #540]	; (8002760 <main+0x270>)
 8002542:	f001 ff59 	bl	80043f8 <HAL_GPIO_WritePin>
 8002546:	2096      	movs	r0, #150	; 0x96
 8002548:	f001 fab2 	bl	8003ab0 <HAL_Delay>
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	3301      	adds	r3, #1
 8002550:	71fb      	strb	r3, [r7, #7]
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0e7      	beq.n	8002528 <main+0x38>
	HAL_Delay(500);
 8002558:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800255c:	f001 faa8 	bl	8003ab0 <HAL_Delay>
	HUAN_MOTOR_LEFT_Init();
 8002560:	f000 fbe6 	bl	8002d30 <HUAN_MOTOR_LEFT_Init>
	HUAN_MOTOR_RIGHT_Init();
 8002564:	f000 fc14 	bl	8002d90 <HUAN_MOTOR_RIGHT_Init>

	RED_LED_BLINK(2);
 8002568:	2300      	movs	r3, #0
 800256a:	71bb      	strb	r3, [r7, #6]
 800256c:	e014      	b.n	8002598 <main+0xa8>
 800256e:	2201      	movs	r2, #1
 8002570:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002574:	487a      	ldr	r0, [pc, #488]	; (8002760 <main+0x270>)
 8002576:	f001 ff3f 	bl	80043f8 <HAL_GPIO_WritePin>
 800257a:	2096      	movs	r0, #150	; 0x96
 800257c:	f001 fa98 	bl	8003ab0 <HAL_Delay>
 8002580:	2200      	movs	r2, #0
 8002582:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002586:	4876      	ldr	r0, [pc, #472]	; (8002760 <main+0x270>)
 8002588:	f001 ff36 	bl	80043f8 <HAL_GPIO_WritePin>
 800258c:	2096      	movs	r0, #150	; 0x96
 800258e:	f001 fa8f 	bl	8003ab0 <HAL_Delay>
 8002592:	79bb      	ldrb	r3, [r7, #6]
 8002594:	3301      	adds	r3, #1
 8002596:	71bb      	strb	r3, [r7, #6]
 8002598:	79bb      	ldrb	r3, [r7, #6]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d9e7      	bls.n	800256e <main+0x7e>
	HAL_Delay(500);
 800259e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025a2:	f001 fa85 	bl	8003ab0 <HAL_Delay>
	HUAN_IMU_Init();
 80025a6:	f000 fc23 	bl	8002df0 <HUAN_IMU_Init>

	RED_LED_BLINK(3);
 80025aa:	2300      	movs	r3, #0
 80025ac:	717b      	strb	r3, [r7, #5]
 80025ae:	e014      	b.n	80025da <main+0xea>
 80025b0:	2201      	movs	r2, #1
 80025b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025b6:	486a      	ldr	r0, [pc, #424]	; (8002760 <main+0x270>)
 80025b8:	f001 ff1e 	bl	80043f8 <HAL_GPIO_WritePin>
 80025bc:	2096      	movs	r0, #150	; 0x96
 80025be:	f001 fa77 	bl	8003ab0 <HAL_Delay>
 80025c2:	2200      	movs	r2, #0
 80025c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025c8:	4865      	ldr	r0, [pc, #404]	; (8002760 <main+0x270>)
 80025ca:	f001 ff15 	bl	80043f8 <HAL_GPIO_WritePin>
 80025ce:	2096      	movs	r0, #150	; 0x96
 80025d0:	f001 fa6e 	bl	8003ab0 <HAL_Delay>
 80025d4:	797b      	ldrb	r3, [r7, #5]
 80025d6:	3301      	adds	r3, #1
 80025d8:	717b      	strb	r3, [r7, #5]
 80025da:	797b      	ldrb	r3, [r7, #5]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d9e7      	bls.n	80025b0 <main+0xc0>
	HAL_Delay(500);
 80025e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025e4:	f001 fa64 	bl	8003ab0 <HAL_Delay>
	HUAN_ZIGBEE_Init();
 80025e8:	f000 fc10 	bl	8002e0c <HUAN_ZIGBEE_Init>

	RED_LED_BLINK(4);
 80025ec:	2300      	movs	r3, #0
 80025ee:	713b      	strb	r3, [r7, #4]
 80025f0:	e014      	b.n	800261c <main+0x12c>
 80025f2:	2201      	movs	r2, #1
 80025f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025f8:	4859      	ldr	r0, [pc, #356]	; (8002760 <main+0x270>)
 80025fa:	f001 fefd 	bl	80043f8 <HAL_GPIO_WritePin>
 80025fe:	2096      	movs	r0, #150	; 0x96
 8002600:	f001 fa56 	bl	8003ab0 <HAL_Delay>
 8002604:	2200      	movs	r2, #0
 8002606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800260a:	4855      	ldr	r0, [pc, #340]	; (8002760 <main+0x270>)
 800260c:	f001 fef4 	bl	80043f8 <HAL_GPIO_WritePin>
 8002610:	2096      	movs	r0, #150	; 0x96
 8002612:	f001 fa4d 	bl	8003ab0 <HAL_Delay>
 8002616:	793b      	ldrb	r3, [r7, #4]
 8002618:	3301      	adds	r3, #1
 800261a:	713b      	strb	r3, [r7, #4]
 800261c:	793b      	ldrb	r3, [r7, #4]
 800261e:	2b03      	cmp	r3, #3
 8002620:	d9e7      	bls.n	80025f2 <main+0x102>
	HAL_Delay(500);
 8002622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002626:	f001 fa43 	bl	8003ab0 <HAL_Delay>
	ssd1306_Init();
 800262a:	f000 fc3b 	bl	8002ea4 <ssd1306_Init>

	RED_LED_ON;
 800262e:	2201      	movs	r2, #1
 8002630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002634:	484a      	ldr	r0, [pc, #296]	; (8002760 <main+0x270>)
 8002636:	f001 fedf 	bl	80043f8 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800263a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800263e:	f001 fa37 	bl	8003ab0 <HAL_Delay>
	huansic_jy62_resetAngle(&himu);		// reset Z angle
 8002642:	4848      	ldr	r0, [pc, #288]	; (8002764 <main+0x274>)
 8002644:	f7fe fdaa 	bl	800119c <huansic_jy62_resetAngle>
	HAL_Delay(1000);
 8002648:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800264c:	f001 fa30 	bl	8003ab0 <HAL_Delay>
	RED_LED_OFF;
 8002650:	2200      	movs	r2, #0
 8002652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002656:	4842      	ldr	r0, [pc, #264]	; (8002760 <main+0x270>)
 8002658:	f001 fece 	bl	80043f8 <HAL_GPIO_WritePin>

	RED_LED_BLINK(5);
 800265c:	2300      	movs	r3, #0
 800265e:	70fb      	strb	r3, [r7, #3]
 8002660:	e014      	b.n	800268c <main+0x19c>
 8002662:	2201      	movs	r2, #1
 8002664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002668:	483d      	ldr	r0, [pc, #244]	; (8002760 <main+0x270>)
 800266a:	f001 fec5 	bl	80043f8 <HAL_GPIO_WritePin>
 800266e:	2096      	movs	r0, #150	; 0x96
 8002670:	f001 fa1e 	bl	8003ab0 <HAL_Delay>
 8002674:	2200      	movs	r2, #0
 8002676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800267a:	4839      	ldr	r0, [pc, #228]	; (8002760 <main+0x270>)
 800267c:	f001 febc 	bl	80043f8 <HAL_GPIO_WritePin>
 8002680:	2096      	movs	r0, #150	; 0x96
 8002682:	f001 fa15 	bl	8003ab0 <HAL_Delay>
 8002686:	78fb      	ldrb	r3, [r7, #3]
 8002688:	3301      	adds	r3, #1
 800268a:	70fb      	strb	r3, [r7, #3]
 800268c:	78fb      	ldrb	r3, [r7, #3]
 800268e:	2b04      	cmp	r3, #4
 8002690:	d9e7      	bls.n	8002662 <main+0x172>
	HAL_Delay(500);
 8002692:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002696:	f001 fa0b 	bl	8003ab0 <HAL_Delay>
	hmotor_left.goalSpeed = 300;		// max ~8400 = 10rps unloaded
 800269a:	4b33      	ldr	r3, [pc, #204]	; (8002768 <main+0x278>)
 800269c:	4a33      	ldr	r2, [pc, #204]	; (800276c <main+0x27c>)
 800269e:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor_right.goalSpeed = -300;
 80026a0:	4b33      	ldr	r3, [pc, #204]	; (8002770 <main+0x280>)
 80026a2:	4a34      	ldr	r2, [pc, #208]	; (8002774 <main+0x284>)
 80026a4:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_Base_Start_IT(&htim1);		// for PID
 80026a6:	4834      	ldr	r0, [pc, #208]	; (8002778 <main+0x288>)
 80026a8:	f002 ff9c 	bl	80055e4 <HAL_TIM_Base_Start_IT>
	/* USER CODE BEGIN WHILE */
	// uint8_t dc = 0;
	while (1)
	{
		// display angle
		HAL_UART_Transmit(&huart2, (uint8_t *)firstLine, sprintf(firstLine, "x: %f ", himu.theta_x), 10);
 80026ac:	4b2d      	ldr	r3, [pc, #180]	; (8002764 <main+0x274>)
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd feb9 	bl	8000428 <__aeabi_f2d>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4930      	ldr	r1, [pc, #192]	; (800277c <main+0x28c>)
 80026bc:	4830      	ldr	r0, [pc, #192]	; (8002780 <main+0x290>)
 80026be:	f005 f965 	bl	800798c <siprintf>
 80026c2:	4603      	mov	r3, r0
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	230a      	movs	r3, #10
 80026c8:	492d      	ldr	r1, [pc, #180]	; (8002780 <main+0x290>)
 80026ca:	482e      	ldr	r0, [pc, #184]	; (8002784 <main+0x294>)
 80026cc:	f004 f81f 	bl	800670e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)secondLine, sprintf(secondLine, "y: %f ", himu.theta_y), 10);
 80026d0:	4b24      	ldr	r3, [pc, #144]	; (8002764 <main+0x274>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd fea7 	bl	8000428 <__aeabi_f2d>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	492a      	ldr	r1, [pc, #168]	; (8002788 <main+0x298>)
 80026e0:	482a      	ldr	r0, [pc, #168]	; (800278c <main+0x29c>)
 80026e2:	f005 f953 	bl	800798c <siprintf>
 80026e6:	4603      	mov	r3, r0
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	230a      	movs	r3, #10
 80026ec:	4927      	ldr	r1, [pc, #156]	; (800278c <main+0x29c>)
 80026ee:	4825      	ldr	r0, [pc, #148]	; (8002784 <main+0x294>)
 80026f0:	f004 f80d 	bl	800670e <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2, (uint8_t *)thirdLine, sprintf(thirdLine, "z: %f ", himu.theta_z), 10);
 80026f4:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <main+0x274>)
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fe95 	bl	8000428 <__aeabi_f2d>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4923      	ldr	r1, [pc, #140]	; (8002790 <main+0x2a0>)
 8002704:	4823      	ldr	r0, [pc, #140]	; (8002794 <main+0x2a4>)
 8002706:	f005 f941 	bl	800798c <siprintf>
 800270a:	4603      	mov	r3, r0
 800270c:	b29a      	uxth	r2, r3
 800270e:	230a      	movs	r3, #10
 8002710:	4920      	ldr	r1, [pc, #128]	; (8002794 <main+0x2a4>)
 8002712:	481c      	ldr	r0, [pc, #112]	; (8002784 <main+0x294>)
 8002714:	f003 fffb 	bl	800670e <HAL_UART_Transmit>

		ssd1306_SetCursor(0, 0);
 8002718:	2100      	movs	r1, #0
 800271a:	2000      	movs	r0, #0
 800271c:	f000 fd76 	bl	800320c <ssd1306_SetCursor>
		ssd1306_WriteString(firstLine, Font_6x8, White);
 8002720:	4a1d      	ldr	r2, [pc, #116]	; (8002798 <main+0x2a8>)
 8002722:	2301      	movs	r3, #1
 8002724:	ca06      	ldmia	r2, {r1, r2}
 8002726:	4816      	ldr	r0, [pc, #88]	; (8002780 <main+0x290>)
 8002728:	f000 fd4a 	bl	80031c0 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 8);
 800272c:	2108      	movs	r1, #8
 800272e:	2000      	movs	r0, #0
 8002730:	f000 fd6c 	bl	800320c <ssd1306_SetCursor>
		ssd1306_WriteString(secondLine, Font_6x8, White);
 8002734:	4a18      	ldr	r2, [pc, #96]	; (8002798 <main+0x2a8>)
 8002736:	2301      	movs	r3, #1
 8002738:	ca06      	ldmia	r2, {r1, r2}
 800273a:	4814      	ldr	r0, [pc, #80]	; (800278c <main+0x29c>)
 800273c:	f000 fd40 	bl	80031c0 <ssd1306_WriteString>
		ssd1306_SetCursor(0, 16);
 8002740:	2110      	movs	r1, #16
 8002742:	2000      	movs	r0, #0
 8002744:	f000 fd62 	bl	800320c <ssd1306_SetCursor>
		ssd1306_WriteString(thirdLine, Font_6x8, White);
 8002748:	4a13      	ldr	r2, [pc, #76]	; (8002798 <main+0x2a8>)
 800274a:	2301      	movs	r3, #1
 800274c:	ca06      	ldmia	r2, {r1, r2}
 800274e:	4811      	ldr	r0, [pc, #68]	; (8002794 <main+0x2a4>)
 8002750:	f000 fd36 	bl	80031c0 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8002754:	f000 fc32 	bl	8002fbc <ssd1306_UpdateScreen>

		// GREEN_LED_TOGGLE;
		HAL_Delay(100);
 8002758:	2064      	movs	r0, #100	; 0x64
 800275a:	f001 f9a9 	bl	8003ab0 <HAL_Delay>
		HAL_UART_Transmit(&huart2, (uint8_t *)firstLine, sprintf(firstLine, "x: %f ", himu.theta_x), 10);
 800275e:	e7a5      	b.n	80026ac <main+0x1bc>
 8002760:	40010c00 	.word	0x40010c00
 8002764:	20000aa0 	.word	0x20000aa0
 8002768:	20000a28 	.word	0x20000a28
 800276c:	43960000 	.word	0x43960000
 8002770:	20000a64 	.word	0x20000a64
 8002774:	c3960000 	.word	0xc3960000
 8002778:	200007f8 	.word	0x200007f8
 800277c:	08009c10 	.word	0x08009c10
 8002780:	20000c14 	.word	0x20000c14
 8002784:	2000095c 	.word	0x2000095c
 8002788:	08009c18 	.word	0x08009c18
 800278c:	20000c24 	.word	0x20000c24
 8002790:	08009c20 	.word	0x08009c20
 8002794:	20000c34 	.word	0x20000c34
 8002798:	20000004 	.word	0x20000004

0800279c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b090      	sub	sp, #64	; 0x40
 80027a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80027a2:	f107 0318 	add.w	r3, r7, #24
 80027a6:	2228      	movs	r2, #40	; 0x28
 80027a8:	2100      	movs	r1, #0
 80027aa:	4618      	mov	r0, r3
 80027ac:	f004 fb2e 	bl	8006e0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	2200      	movs	r2, #0
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	605a      	str	r2, [r3, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	60da      	str	r2, [r3, #12]
 80027bc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027be:	2301      	movs	r3, #1
 80027c0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027c6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80027c8:	2300      	movs	r3, #0
 80027ca:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027cc:	2301      	movs	r3, #1
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027d0:	2302      	movs	r3, #2
 80027d2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027d8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80027da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80027de:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027e0:	f107 0318 	add.w	r3, r7, #24
 80027e4:	4618      	mov	r0, r3
 80027e6:	f002 fa93 	bl	8004d10 <HAL_RCC_OscConfig>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <SystemClock_Config+0x58>
			{
		Error_Handler();
 80027f0:	f000 fb1a 	bl	8002e28 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80027f4:	230f      	movs	r3, #15
 80027f6:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027f8:	2302      	movs	r3, #2
 80027fa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002804:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002806:	2300      	movs	r3, #0
 8002808:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	2102      	movs	r1, #2
 800280e:	4618      	mov	r0, r3
 8002810:	f002 fd00 	bl	8005214 <HAL_RCC_ClockConfig>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <SystemClock_Config+0x82>
			{
		Error_Handler();
 800281a:	f000 fb05 	bl	8002e28 <Error_Handler>
	}
}
 800281e:	bf00      	nop
 8002820:	3740      	adds	r7, #64	; 0x40
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <MX_I2C1_Init+0x50>)
 800282e:	4a13      	ldr	r2, [pc, #76]	; (800287c <MX_I2C1_Init+0x54>)
 8002830:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <MX_I2C1_Init+0x50>)
 8002834:	4a12      	ldr	r2, [pc, #72]	; (8002880 <MX_I2C1_Init+0x58>)
 8002836:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <MX_I2C1_Init+0x50>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800283e:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <MX_I2C1_Init+0x50>)
 8002840:	2200      	movs	r2, #0
 8002842:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <MX_I2C1_Init+0x50>)
 8002846:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800284a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <MX_I2C1_Init+0x50>)
 800284e:	2200      	movs	r2, #0
 8002850:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <MX_I2C1_Init+0x50>)
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002858:	4b07      	ldr	r3, [pc, #28]	; (8002878 <MX_I2C1_Init+0x50>)
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <MX_I2C1_Init+0x50>)
 8002860:	2200      	movs	r2, #0
 8002862:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002864:	4804      	ldr	r0, [pc, #16]	; (8002878 <MX_I2C1_Init+0x50>)
 8002866:	f001 fdf9 	bl	800445c <HAL_I2C_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_I2C1_Init+0x4c>
			{
		Error_Handler();
 8002870:	f000 fada 	bl	8002e28 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	200007a4 	.word	0x200007a4
 800287c:	40005400 	.word	0x40005400
 8002880:	000186a0 	.word	0x000186a0

08002884 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800288a:	f107 0308 	add.w	r3, r7, #8
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002898:	463b      	mov	r3, r7
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80028a0:	4b1e      	ldr	r3, [pc, #120]	; (800291c <MX_TIM1_Init+0x98>)
 80028a2:	4a1f      	ldr	r2, [pc, #124]	; (8002920 <MX_TIM1_Init+0x9c>)
 80028a4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 80028a6:	4b1d      	ldr	r3, [pc, #116]	; (800291c <MX_TIM1_Init+0x98>)
 80028a8:	2247      	movs	r2, #71	; 0x47
 80028aa:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <MX_TIM1_Init+0x98>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 50000 - 1;
 80028b2:	4b1a      	ldr	r3, [pc, #104]	; (800291c <MX_TIM1_Init+0x98>)
 80028b4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80028b8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ba:	4b18      	ldr	r3, [pc, #96]	; (800291c <MX_TIM1_Init+0x98>)
 80028bc:	2200      	movs	r2, #0
 80028be:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80028c0:	4b16      	ldr	r3, [pc, #88]	; (800291c <MX_TIM1_Init+0x98>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <MX_TIM1_Init+0x98>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028cc:	4813      	ldr	r0, [pc, #76]	; (800291c <MX_TIM1_Init+0x98>)
 80028ce:	f002 fe39 	bl	8005544 <HAL_TIM_Base_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM1_Init+0x58>
			{
		Error_Handler();
 80028d8:	f000 faa6 	bl	8002e28 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028e2:	f107 0308 	add.w	r3, r7, #8
 80028e6:	4619      	mov	r1, r3
 80028e8:	480c      	ldr	r0, [pc, #48]	; (800291c <MX_TIM1_Init+0x98>)
 80028ea:	f003 fabd 	bl	8005e68 <HAL_TIM_ConfigClockSource>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM1_Init+0x74>
			{
		Error_Handler();
 80028f4:	f000 fa98 	bl	8002e28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f8:	2300      	movs	r3, #0
 80028fa:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002900:	463b      	mov	r3, r7
 8002902:	4619      	mov	r1, r3
 8002904:	4805      	ldr	r0, [pc, #20]	; (800291c <MX_TIM1_Init+0x98>)
 8002906:	f003 fe45 	bl	8006594 <HAL_TIMEx_MasterConfigSynchronization>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_TIM1_Init+0x90>
			{
		Error_Handler();
 8002910:	f000 fa8a 	bl	8002e28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002914:	bf00      	nop
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	200007f8 	.word	0x200007f8
 8002920:	40012c00 	.word	0x40012c00

08002924 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b08c      	sub	sp, #48	; 0x30
 8002928:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800292a:	f107 030c 	add.w	r3, r7, #12
 800292e:	2224      	movs	r2, #36	; 0x24
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f004 fa6a 	bl	8006e0c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002938:	1d3b      	adds	r3, r7, #4
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002940:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <MX_TIM2_Init+0xa4>)
 8002942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002946:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002948:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <MX_TIM2_Init+0xa4>)
 800294a:	2200      	movs	r2, #0
 800294c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294e:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <MX_TIM2_Init+0xa4>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8002954:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <MX_TIM2_Init+0xa4>)
 8002956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800295a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800295c:	4b1a      	ldr	r3, [pc, #104]	; (80029c8 <MX_TIM2_Init+0xa4>)
 800295e:	2200      	movs	r2, #0
 8002960:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002962:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <MX_TIM2_Init+0xa4>)
 8002964:	2200      	movs	r2, #0
 8002966:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002968:	2303      	movs	r3, #3
 800296a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002970:	2301      	movs	r3, #1
 8002972:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002974:	2300      	movs	r3, #0
 8002976:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800297c:	2300      	movs	r3, #0
 800297e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002980:	2301      	movs	r3, #1
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800298c:	f107 030c 	add.w	r3, r7, #12
 8002990:	4619      	mov	r1, r3
 8002992:	480d      	ldr	r0, [pc, #52]	; (80029c8 <MX_TIM2_Init+0xa4>)
 8002994:	f002 ff72 	bl	800587c <HAL_TIM_Encoder_Init>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <MX_TIM2_Init+0x7e>
			{
		Error_Handler();
 800299e:	f000 fa43 	bl	8002e28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029a2:	2300      	movs	r3, #0
 80029a4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	4619      	mov	r1, r3
 80029ae:	4806      	ldr	r0, [pc, #24]	; (80029c8 <MX_TIM2_Init+0xa4>)
 80029b0:	f003 fdf0 	bl	8006594 <HAL_TIMEx_MasterConfigSynchronization>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_TIM2_Init+0x9a>
			{
		Error_Handler();
 80029ba:	f000 fa35 	bl	8002e28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	3730      	adds	r7, #48	; 0x30
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	20000840 	.word	0x20000840

080029cc <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08e      	sub	sp, #56	; 0x38
 80029d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80029d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029d6:	2200      	movs	r2, #0
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	605a      	str	r2, [r3, #4]
 80029dc:	609a      	str	r2, [r3, #8]
 80029de:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80029e0:	f107 0320 	add.w	r3, r7, #32
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
 80029f0:	605a      	str	r2, [r3, #4]
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	60da      	str	r2, [r3, #12]
 80029f6:	611a      	str	r2, [r3, #16]
 80029f8:	615a      	str	r2, [r3, #20]
 80029fa:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80029fc:	4b3d      	ldr	r3, [pc, #244]	; (8002af4 <MX_TIM3_Init+0x128>)
 80029fe:	4a3e      	ldr	r2, [pc, #248]	; (8002af8 <MX_TIM3_Init+0x12c>)
 8002a00:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002a02:	4b3c      	ldr	r3, [pc, #240]	; (8002af4 <MX_TIM3_Init+0x128>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a08:	4b3a      	ldr	r3, [pc, #232]	; (8002af4 <MX_TIM3_Init+0x128>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 72 * 40 - 1;
 8002a0e:	4b39      	ldr	r3, [pc, #228]	; (8002af4 <MX_TIM3_Init+0x128>)
 8002a10:	f640 323f 	movw	r2, #2879	; 0xb3f
 8002a14:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a16:	4b37      	ldr	r3, [pc, #220]	; (8002af4 <MX_TIM3_Init+0x128>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a1c:	4b35      	ldr	r3, [pc, #212]	; (8002af4 <MX_TIM3_Init+0x128>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a22:	4834      	ldr	r0, [pc, #208]	; (8002af4 <MX_TIM3_Init+0x128>)
 8002a24:	f002 fd8e 	bl	8005544 <HAL_TIM_Base_Init>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <MX_TIM3_Init+0x66>
			{
		Error_Handler();
 8002a2e:	f000 f9fb 	bl	8002e28 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a36:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	482d      	ldr	r0, [pc, #180]	; (8002af4 <MX_TIM3_Init+0x128>)
 8002a40:	f003 fa12 	bl	8005e68 <HAL_TIM_ConfigClockSource>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <MX_TIM3_Init+0x82>
			{
		Error_Handler();
 8002a4a:	f000 f9ed 	bl	8002e28 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a4e:	4829      	ldr	r0, [pc, #164]	; (8002af4 <MX_TIM3_Init+0x128>)
 8002a50:	f002 fe1a 	bl	8005688 <HAL_TIM_PWM_Init>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_TIM3_Init+0x92>
			{
		Error_Handler();
 8002a5a:	f000 f9e5 	bl	8002e28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a66:	f107 0320 	add.w	r3, r7, #32
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	4821      	ldr	r0, [pc, #132]	; (8002af4 <MX_TIM3_Init+0x128>)
 8002a6e:	f003 fd91 	bl	8006594 <HAL_TIMEx_MasterConfigSynchronization>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM3_Init+0xb0>
			{
		Error_Handler();
 8002a78:	f000 f9d6 	bl	8002e28 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a7c:	2360      	movs	r3, #96	; 0x60
 8002a7e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a8c:	1d3b      	adds	r3, r7, #4
 8002a8e:	2200      	movs	r2, #0
 8002a90:	4619      	mov	r1, r3
 8002a92:	4818      	ldr	r0, [pc, #96]	; (8002af4 <MX_TIM3_Init+0x128>)
 8002a94:	f003 f92a 	bl	8005cec <HAL_TIM_PWM_ConfigChannel>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <MX_TIM3_Init+0xd6>
			{
		Error_Handler();
 8002a9e:	f000 f9c3 	bl	8002e28 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002aa2:	1d3b      	adds	r3, r7, #4
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4812      	ldr	r0, [pc, #72]	; (8002af4 <MX_TIM3_Init+0x128>)
 8002aaa:	f003 f91f 	bl	8005cec <HAL_TIM_PWM_ConfigChannel>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <MX_TIM3_Init+0xec>
			{
		Error_Handler();
 8002ab4:	f000 f9b8 	bl	8002e28 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2208      	movs	r2, #8
 8002abc:	4619      	mov	r1, r3
 8002abe:	480d      	ldr	r0, [pc, #52]	; (8002af4 <MX_TIM3_Init+0x128>)
 8002ac0:	f003 f914 	bl	8005cec <HAL_TIM_PWM_ConfigChannel>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d001      	beq.n	8002ace <MX_TIM3_Init+0x102>
			{
		Error_Handler();
 8002aca:	f000 f9ad 	bl	8002e28 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	220c      	movs	r2, #12
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	4807      	ldr	r0, [pc, #28]	; (8002af4 <MX_TIM3_Init+0x128>)
 8002ad6:	f003 f909 	bl	8005cec <HAL_TIM_PWM_ConfigChannel>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MX_TIM3_Init+0x118>
			{
		Error_Handler();
 8002ae0:	f000 f9a2 	bl	8002e28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002ae4:	4803      	ldr	r0, [pc, #12]	; (8002af4 <MX_TIM3_Init+0x128>)
 8002ae6:	f000 fd01 	bl	80034ec <HAL_TIM_MspPostInit>

}
 8002aea:	bf00      	nop
 8002aec:	3738      	adds	r7, #56	; 0x38
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000888 	.word	0x20000888
 8002af8:	40000400 	.word	0x40000400

08002afc <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	; 0x30
 8002b00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	2224      	movs	r2, #36	; 0x24
 8002b08:	2100      	movs	r1, #0
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f004 f97e 	bl	8006e0c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002b10:	1d3b      	adds	r3, r7, #4
 8002b12:	2200      	movs	r2, #0
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002b18:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b1a:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <MX_TIM4_Init+0xa4>)
 8002b1c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b32:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002b42:	2302      	movs	r3, #2
 8002b44:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b46:	2301      	movs	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b56:	2301      	movs	r3, #1
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002b62:	f107 030c 	add.w	r3, r7, #12
 8002b66:	4619      	mov	r1, r3
 8002b68:	480c      	ldr	r0, [pc, #48]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b6a:	f002 fe87 	bl	800587c <HAL_TIM_Encoder_Init>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <MX_TIM4_Init+0x7c>
			{
		Error_Handler();
 8002b74:	f000 f958 	bl	8002e28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	4619      	mov	r1, r3
 8002b84:	4805      	ldr	r0, [pc, #20]	; (8002b9c <MX_TIM4_Init+0xa0>)
 8002b86:	f003 fd05 	bl	8006594 <HAL_TIMEx_MasterConfigSynchronization>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_TIM4_Init+0x98>
			{
		Error_Handler();
 8002b90:	f000 f94a 	bl	8002e28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8002b94:	bf00      	nop
 8002b96:	3730      	adds	r7, #48	; 0x30
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	200008d0 	.word	0x200008d0
 8002ba0:	40000800 	.word	0x40000800

08002ba4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002baa:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <MX_USART1_UART_Init+0x50>)
 8002bac:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002bae:	4b10      	ldr	r3, [pc, #64]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bb4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002bc2:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002bc8:	4b09      	ldr	r3, [pc, #36]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bca:	220c      	movs	r2, #12
 8002bcc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bce:	4b08      	ldr	r3, [pc, #32]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bd4:	4b06      	ldr	r3, [pc, #24]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bda:	4805      	ldr	r0, [pc, #20]	; (8002bf0 <MX_USART1_UART_Init+0x4c>)
 8002bdc:	f003 fd4a 	bl	8006674 <HAL_UART_Init>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_USART1_UART_Init+0x46>
			{
		Error_Handler();
 8002be6:	f000 f91f 	bl	8002e28 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000918 	.word	0x20000918
 8002bf4:	40013800 	.word	0x40013800

08002bf8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002bfc:	4b11      	ldr	r3, [pc, #68]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <MX_USART2_UART_Init+0x50>)
 8002c00:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002c02:	4b10      	ldr	r3, [pc, #64]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c08:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002c1c:	4b09      	ldr	r3, [pc, #36]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c1e:	220c      	movs	r2, #12
 8002c20:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c2e:	4805      	ldr	r0, [pc, #20]	; (8002c44 <MX_USART2_UART_Init+0x4c>)
 8002c30:	f003 fd20 	bl	8006674 <HAL_UART_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_USART2_UART_Init+0x46>
			{
		Error_Handler();
 8002c3a:	f000 f8f5 	bl	8002e28 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	2000095c 	.word	0x2000095c
 8002c48:	40004400 	.word	0x40004400

08002c4c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002c52:	4b10      	ldr	r3, [pc, #64]	; (8002c94 <MX_DMA_Init+0x48>)
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	4a0f      	ldr	r2, [pc, #60]	; (8002c94 <MX_DMA_Init+0x48>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6153      	str	r3, [r2, #20]
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <MX_DMA_Init+0x48>)
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	200f      	movs	r0, #15
 8002c70:	f001 f819 	bl	8003ca6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002c74:	200f      	movs	r0, #15
 8002c76:	f001 f832 	bl	8003cde <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 3, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2103      	movs	r1, #3
 8002c7e:	2010      	movs	r0, #16
 8002c80:	f001 f811 	bl	8003ca6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002c84:	2010      	movs	r0, #16
 8002c86:	f001 f82a 	bl	8003cde <HAL_NVIC_EnableIRQ>

}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	40021000 	.word	0x40021000

08002c98 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002c9e:	f107 0310 	add.w	r3, r7, #16
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	609a      	str	r2, [r3, #8]
 8002caa:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002cac:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <MX_GPIO_Init+0x90>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	4a1d      	ldr	r2, [pc, #116]	; (8002d28 <MX_GPIO_Init+0x90>)
 8002cb2:	f043 0320 	orr.w	r3, r3, #32
 8002cb6:	6193      	str	r3, [r2, #24]
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <MX_GPIO_Init+0x90>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc4:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <MX_GPIO_Init+0x90>)
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	4a17      	ldr	r2, [pc, #92]	; (8002d28 <MX_GPIO_Init+0x90>)
 8002cca:	f043 0304 	orr.w	r3, r3, #4
 8002cce:	6193      	str	r3, [r2, #24]
 8002cd0:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <MX_GPIO_Init+0x90>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	60bb      	str	r3, [r7, #8]
 8002cda:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <MX_GPIO_Init+0x90>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	4a11      	ldr	r2, [pc, #68]	; (8002d28 <MX_GPIO_Init+0x90>)
 8002ce2:	f043 0308 	orr.w	r3, r3, #8
 8002ce6:	6193      	str	r3, [r2, #24]
 8002ce8:	4b0f      	ldr	r3, [pc, #60]	; (8002d28 <MX_GPIO_Init+0x90>)
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	607b      	str	r3, [r7, #4]
 8002cf2:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Buzzer_Pin | LED_R_Pin | LED_G_Pin | LED_B_Pin, GPIO_PIN_RESET);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002cfa:	480c      	ldr	r0, [pc, #48]	; (8002d2c <MX_GPIO_Init+0x94>)
 8002cfc:	f001 fb7c 	bl	80043f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Buzzer_Pin LED_R_Pin LED_G_Pin LED_B_Pin */
	GPIO_InitStruct.Pin = Buzzer_Pin | LED_R_Pin | LED_G_Pin | LED_B_Pin;
 8002d00:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002d04:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d06:	2301      	movs	r3, #1
 8002d08:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d12:	f107 0310 	add.w	r3, r7, #16
 8002d16:	4619      	mov	r1, r3
 8002d18:	4804      	ldr	r0, [pc, #16]	; (8002d2c <MX_GPIO_Init+0x94>)
 8002d1a:	f001 f9e9 	bl	80040f0 <HAL_GPIO_Init>

}
 8002d1e:	bf00      	nop
 8002d20:	3720      	adds	r7, #32
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	40010c00 	.word	0x40010c00

08002d30 <HUAN_MOTOR_LEFT_Init>:

/* USER CODE BEGIN 4 */
static void HUAN_MOTOR_LEFT_Init(void) {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	hmotor_left.counter = &htim4;
 8002d34:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d36:	4a11      	ldr	r2, [pc, #68]	; (8002d7c <HUAN_MOTOR_LEFT_Init+0x4c>)
 8002d38:	601a      	str	r2, [r3, #0]
	hmotor_left.dt = 0.05;
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d3c:	4a10      	ldr	r2, [pc, #64]	; (8002d80 <HUAN_MOTOR_LEFT_Init+0x50>)
 8002d3e:	621a      	str	r2, [r3, #32]
	hmotor_left.posTimer = &htim3;
 8002d40:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d42:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <HUAN_MOTOR_LEFT_Init+0x54>)
 8002d44:	605a      	str	r2, [r3, #4]
	hmotor_left.pos_channel = TIM_CHANNEL_4;
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d48:	220c      	movs	r2, #12
 8002d4a:	60da      	str	r2, [r3, #12]
	hmotor_left.negTimer = &htim3;
 8002d4c:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d4e:	4a0d      	ldr	r2, [pc, #52]	; (8002d84 <HUAN_MOTOR_LEFT_Init+0x54>)
 8002d50:	609a      	str	r2, [r3, #8]
	hmotor_left.neg_channel = TIM_CHANNEL_3;
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d54:	2208      	movs	r2, #8
 8002d56:	611a      	str	r2, [r3, #16]
	hmotor_left.kp = 0.00005;
 8002d58:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d5a:	4a0b      	ldr	r2, [pc, #44]	; (8002d88 <HUAN_MOTOR_LEFT_Init+0x58>)
 8002d5c:	615a      	str	r2, [r3, #20]
	hmotor_left.ki = 0.0001;
 8002d5e:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <HUAN_MOTOR_LEFT_Init+0x5c>)
 8002d62:	619a      	str	r2, [r3, #24]
	hmotor_left.kd = 0.0000;
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&hmotor_left);
 8002d6c:	4802      	ldr	r0, [pc, #8]	; (8002d78 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d6e:	f7fe fcbb 	bl	80016e8 <huansic_motor_init>
}
 8002d72:	bf00      	nop
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	20000a28 	.word	0x20000a28
 8002d7c:	200008d0 	.word	0x200008d0
 8002d80:	3d4ccccd 	.word	0x3d4ccccd
 8002d84:	20000888 	.word	0x20000888
 8002d88:	3851b717 	.word	0x3851b717
 8002d8c:	38d1b717 	.word	0x38d1b717

08002d90 <HUAN_MOTOR_RIGHT_Init>:

static void HUAN_MOTOR_RIGHT_Init(void) {
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
	hmotor_right.counter = &htim2;
 8002d94:	4b10      	ldr	r3, [pc, #64]	; (8002dd8 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002d96:	4a11      	ldr	r2, [pc, #68]	; (8002ddc <HUAN_MOTOR_RIGHT_Init+0x4c>)
 8002d98:	601a      	str	r2, [r3, #0]
	hmotor_right.dt = 0.05;
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002d9c:	4a10      	ldr	r2, [pc, #64]	; (8002de0 <HUAN_MOTOR_RIGHT_Init+0x50>)
 8002d9e:	621a      	str	r2, [r3, #32]
	hmotor_right.posTimer = &htim3;
 8002da0:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002da2:	4a10      	ldr	r2, [pc, #64]	; (8002de4 <HUAN_MOTOR_RIGHT_Init+0x54>)
 8002da4:	605a      	str	r2, [r3, #4]
	hmotor_right.pos_channel = TIM_CHANNEL_1;
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	60da      	str	r2, [r3, #12]
	hmotor_right.negTimer = &htim3;
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002dae:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <HUAN_MOTOR_RIGHT_Init+0x54>)
 8002db0:	609a      	str	r2, [r3, #8]
	hmotor_right.neg_channel = TIM_CHANNEL_2;
 8002db2:	4b09      	ldr	r3, [pc, #36]	; (8002dd8 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002db4:	2204      	movs	r2, #4
 8002db6:	611a      	str	r2, [r3, #16]
	hmotor_right.kp = 0.00005;
 8002db8:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002dba:	4a0b      	ldr	r2, [pc, #44]	; (8002de8 <HUAN_MOTOR_RIGHT_Init+0x58>)
 8002dbc:	615a      	str	r2, [r3, #20]
	hmotor_right.ki = 0.0001;
 8002dbe:	4b06      	ldr	r3, [pc, #24]	; (8002dd8 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002dc0:	4a0a      	ldr	r2, [pc, #40]	; (8002dec <HUAN_MOTOR_RIGHT_Init+0x5c>)
 8002dc2:	619a      	str	r2, [r3, #24]
	hmotor_right.kd = 0.0000;
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&hmotor_right);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002dce:	f7fe fc8b 	bl	80016e8 <huansic_motor_init>
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20000a64 	.word	0x20000a64
 8002ddc:	20000840 	.word	0x20000840
 8002de0:	3d4ccccd 	.word	0x3d4ccccd
 8002de4:	20000888 	.word	0x20000888
 8002de8:	3851b717 	.word	0x3851b717
 8002dec:	38d1b717 	.word	0x38d1b717

08002df0 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 8002df0:	b580      	push	{r7, lr}
 8002df2:	af00      	add	r7, sp, #0
	himu.uartPort = &huart1;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HUAN_IMU_Init+0x14>)
 8002df6:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HUAN_IMU_Init+0x18>)
 8002df8:	601a      	str	r2, [r3, #0]
	huansic_jy62_init(&himu);
 8002dfa:	4802      	ldr	r0, [pc, #8]	; (8002e04 <HUAN_IMU_Init+0x14>)
 8002dfc:	f7fe f988 	bl	8001110 <huansic_jy62_init>
}
 8002e00:	bf00      	nop
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000aa0 	.word	0x20000aa0
 8002e08:	20000918 	.word	0x20000918

08002e0c <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
	hxb.uartPort = &huart2;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HUAN_ZIGBEE_Init+0x14>)
 8002e12:	4a04      	ldr	r2, [pc, #16]	; (8002e24 <HUAN_ZIGBEE_Init+0x18>)
 8002e14:	601a      	str	r2, [r3, #0]
	huansic_xb_init(&hxb);
 8002e16:	4802      	ldr	r0, [pc, #8]	; (8002e20 <HUAN_ZIGBEE_Init+0x14>)
 8002e18:	f7fe fe58 	bl	8001acc <huansic_xb_init>
}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20000ad8 	.word	0x20000ad8
 8002e24:	2000095c 	.word	0x2000095c

08002e28 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e2c:	b672      	cpsid	i
}
 8002e2e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002e30:	e7fe      	b.n	8002e30 <Error_Handler+0x8>

08002e32 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002e32:	b480      	push	{r7}
 8002e34:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002e36:	bf00      	nop
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr
	...

08002e40 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af04      	add	r7, sp, #16
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002e4a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4e:	9302      	str	r3, [sp, #8]
 8002e50:	2301      	movs	r3, #1
 8002e52:	9301      	str	r3, [sp, #4]
 8002e54:	1dfb      	adds	r3, r7, #7
 8002e56:	9300      	str	r3, [sp, #0]
 8002e58:	2301      	movs	r3, #1
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2178      	movs	r1, #120	; 0x78
 8002e5e:	4803      	ldr	r0, [pc, #12]	; (8002e6c <ssd1306_WriteCommand+0x2c>)
 8002e60:	f001 fc40 	bl	80046e4 <HAL_I2C_Mem_Write>
}
 8002e64:	bf00      	nop
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	200007a4 	.word	0x200007a4

08002e70 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af04      	add	r7, sp, #16
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e82:	9202      	str	r2, [sp, #8]
 8002e84:	9301      	str	r3, [sp, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	2240      	movs	r2, #64	; 0x40
 8002e8e:	2178      	movs	r1, #120	; 0x78
 8002e90:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <ssd1306_WriteData+0x30>)
 8002e92:	f001 fc27 	bl	80046e4 <HAL_I2C_Mem_Write>
}
 8002e96:	bf00      	nop
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	200007a4 	.word	0x200007a4

08002ea4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002ea8:	f7ff ffc3 	bl	8002e32 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002eac:	2064      	movs	r0, #100	; 0x64
 8002eae:	f000 fdff 	bl	8003ab0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f000 f9d6 	bl	8003264 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002eb8:	2020      	movs	r0, #32
 8002eba:	f7ff ffc1 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	f7ff ffbe 	bl	8002e40 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002ec4:	20b0      	movs	r0, #176	; 0xb0
 8002ec6:	f7ff ffbb 	bl	8002e40 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002eca:	20c8      	movs	r0, #200	; 0xc8
 8002ecc:	f7ff ffb8 	bl	8002e40 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7ff ffb5 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002ed6:	2010      	movs	r0, #16
 8002ed8:	f7ff ffb2 	bl	8002e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002edc:	2040      	movs	r0, #64	; 0x40
 8002ede:	f7ff ffaf 	bl	8002e40 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002ee2:	20ff      	movs	r0, #255	; 0xff
 8002ee4:	f000 f9aa 	bl	800323c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002ee8:	20a1      	movs	r0, #161	; 0xa1
 8002eea:	f7ff ffa9 	bl	8002e40 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002eee:	20a6      	movs	r0, #166	; 0xa6
 8002ef0:	f7ff ffa6 	bl	8002e40 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002ef4:	20a8      	movs	r0, #168	; 0xa8
 8002ef6:	f7ff ffa3 	bl	8002e40 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8002efa:	201f      	movs	r0, #31
 8002efc:	f7ff ffa0 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002f00:	20a4      	movs	r0, #164	; 0xa4
 8002f02:	f7ff ff9d 	bl	8002e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002f06:	20d3      	movs	r0, #211	; 0xd3
 8002f08:	f7ff ff9a 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002f0c:	2000      	movs	r0, #0
 8002f0e:	f7ff ff97 	bl	8002e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002f12:	20d5      	movs	r0, #213	; 0xd5
 8002f14:	f7ff ff94 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002f18:	20f0      	movs	r0, #240	; 0xf0
 8002f1a:	f7ff ff91 	bl	8002e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002f1e:	20d9      	movs	r0, #217	; 0xd9
 8002f20:	f7ff ff8e 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002f24:	2022      	movs	r0, #34	; 0x22
 8002f26:	f7ff ff8b 	bl	8002e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002f2a:	20da      	movs	r0, #218	; 0xda
 8002f2c:	f7ff ff88 	bl	8002e40 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8002f30:	2002      	movs	r0, #2
 8002f32:	f7ff ff85 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002f36:	20db      	movs	r0, #219	; 0xdb
 8002f38:	f7ff ff82 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002f3c:	2020      	movs	r0, #32
 8002f3e:	f7ff ff7f 	bl	8002e40 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002f42:	208d      	movs	r0, #141	; 0x8d
 8002f44:	f7ff ff7c 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002f48:	2014      	movs	r0, #20
 8002f4a:	f7ff ff79 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002f4e:	2001      	movs	r0, #1
 8002f50:	f000 f988 	bl	8003264 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f000 f80f 	bl	8002f78 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002f5a:	f000 f82f 	bl	8002fbc <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002f5e:	4b05      	ldr	r3, [pc, #20]	; (8002f74 <ssd1306_Init+0xd0>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002f64:	4b03      	ldr	r3, [pc, #12]	; (8002f74 <ssd1306_Init+0xd0>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002f6a:	4b02      	ldr	r3, [pc, #8]	; (8002f74 <ssd1306_Init+0xd0>)
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	711a      	strb	r2, [r3, #4]
}
 8002f70:	bf00      	nop
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	20000e44 	.word	0x20000e44

08002f78 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	e00d      	b.n	8002fa4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002f88:	79fb      	ldrb	r3, [r7, #7]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <ssd1306_Fill+0x1a>
 8002f8e:	2100      	movs	r1, #0
 8002f90:	e000      	b.n	8002f94 <ssd1306_Fill+0x1c>
 8002f92:	21ff      	movs	r1, #255	; 0xff
 8002f94:	4a08      	ldr	r2, [pc, #32]	; (8002fb8 <ssd1306_Fill+0x40>)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4413      	add	r3, r2
 8002f9a:	460a      	mov	r2, r1
 8002f9c:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002faa:	d3ed      	bcc.n	8002f88 <ssd1306_Fill+0x10>
    }
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bc80      	pop	{r7}
 8002fb6:	4770      	bx	lr
 8002fb8:	20000c44 	.word	0x20000c44

08002fbc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	71fb      	strb	r3, [r7, #7]
 8002fc6:	e016      	b.n	8002ff6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	3b50      	subs	r3, #80	; 0x50
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ff36 	bl	8002e40 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7ff ff33 	bl	8002e40 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002fda:	2010      	movs	r0, #16
 8002fdc:	f7ff ff30 	bl	8002e40 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	01db      	lsls	r3, r3, #7
 8002fe4:	4a08      	ldr	r2, [pc, #32]	; (8003008 <ssd1306_UpdateScreen+0x4c>)
 8002fe6:	4413      	add	r3, r2
 8002fe8:	2180      	movs	r1, #128	; 0x80
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff ff40 	bl	8002e70 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002ff0:	79fb      	ldrb	r3, [r7, #7]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	71fb      	strb	r3, [r7, #7]
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d9e5      	bls.n	8002fc8 <ssd1306_UpdateScreen+0xc>
    }
}
 8002ffc:	bf00      	nop
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000c44 	.word	0x20000c44

0800300c <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
 8003016:	460b      	mov	r3, r1
 8003018:	71bb      	strb	r3, [r7, #6]
 800301a:	4613      	mov	r3, r2
 800301c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	2b00      	cmp	r3, #0
 8003024:	db3d      	blt.n	80030a2 <ssd1306_DrawPixel+0x96>
 8003026:	79bb      	ldrb	r3, [r7, #6]
 8003028:	2b1f      	cmp	r3, #31
 800302a:	d83a      	bhi.n	80030a2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 800302c:	797b      	ldrb	r3, [r7, #5]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d11a      	bne.n	8003068 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003032:	79fa      	ldrb	r2, [r7, #7]
 8003034:	79bb      	ldrb	r3, [r7, #6]
 8003036:	08db      	lsrs	r3, r3, #3
 8003038:	b2d8      	uxtb	r0, r3
 800303a:	4603      	mov	r3, r0
 800303c:	01db      	lsls	r3, r3, #7
 800303e:	4413      	add	r3, r2
 8003040:	4a1a      	ldr	r2, [pc, #104]	; (80030ac <ssd1306_DrawPixel+0xa0>)
 8003042:	5cd3      	ldrb	r3, [r2, r3]
 8003044:	b25a      	sxtb	r2, r3
 8003046:	79bb      	ldrb	r3, [r7, #6]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	2101      	movs	r1, #1
 800304e:	fa01 f303 	lsl.w	r3, r1, r3
 8003052:	b25b      	sxtb	r3, r3
 8003054:	4313      	orrs	r3, r2
 8003056:	b259      	sxtb	r1, r3
 8003058:	79fa      	ldrb	r2, [r7, #7]
 800305a:	4603      	mov	r3, r0
 800305c:	01db      	lsls	r3, r3, #7
 800305e:	4413      	add	r3, r2
 8003060:	b2c9      	uxtb	r1, r1
 8003062:	4a12      	ldr	r2, [pc, #72]	; (80030ac <ssd1306_DrawPixel+0xa0>)
 8003064:	54d1      	strb	r1, [r2, r3]
 8003066:	e01d      	b.n	80030a4 <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003068:	79fa      	ldrb	r2, [r7, #7]
 800306a:	79bb      	ldrb	r3, [r7, #6]
 800306c:	08db      	lsrs	r3, r3, #3
 800306e:	b2d8      	uxtb	r0, r3
 8003070:	4603      	mov	r3, r0
 8003072:	01db      	lsls	r3, r3, #7
 8003074:	4413      	add	r3, r2
 8003076:	4a0d      	ldr	r2, [pc, #52]	; (80030ac <ssd1306_DrawPixel+0xa0>)
 8003078:	5cd3      	ldrb	r3, [r2, r3]
 800307a:	b25a      	sxtb	r2, r3
 800307c:	79bb      	ldrb	r3, [r7, #6]
 800307e:	f003 0307 	and.w	r3, r3, #7
 8003082:	2101      	movs	r1, #1
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	b25b      	sxtb	r3, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	b25b      	sxtb	r3, r3
 800308e:	4013      	ands	r3, r2
 8003090:	b259      	sxtb	r1, r3
 8003092:	79fa      	ldrb	r2, [r7, #7]
 8003094:	4603      	mov	r3, r0
 8003096:	01db      	lsls	r3, r3, #7
 8003098:	4413      	add	r3, r2
 800309a:	b2c9      	uxtb	r1, r1
 800309c:	4a03      	ldr	r2, [pc, #12]	; (80030ac <ssd1306_DrawPixel+0xa0>)
 800309e:	54d1      	strb	r1, [r2, r3]
 80030a0:	e000      	b.n	80030a4 <ssd1306_DrawPixel+0x98>
        return;
 80030a2:	bf00      	nop
    }
}
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr
 80030ac:	20000c44 	.word	0x20000c44

080030b0 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80030b0:	b590      	push	{r4, r7, lr}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	4604      	mov	r4, r0
 80030b8:	1d38      	adds	r0, r7, #4
 80030ba:	e880 0006 	stmia.w	r0, {r1, r2}
 80030be:	461a      	mov	r2, r3
 80030c0:	4623      	mov	r3, r4
 80030c2:	73fb      	strb	r3, [r7, #15]
 80030c4:	4613      	mov	r3, r2
 80030c6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b1f      	cmp	r3, #31
 80030cc:	d902      	bls.n	80030d4 <ssd1306_WriteChar+0x24>
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
 80030d0:	2b7e      	cmp	r3, #126	; 0x7e
 80030d2:	d901      	bls.n	80030d8 <ssd1306_WriteChar+0x28>
        return 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e06d      	b.n	80031b4 <ssd1306_WriteChar+0x104>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80030d8:	4b38      	ldr	r3, [pc, #224]	; (80031bc <ssd1306_WriteChar+0x10c>)
 80030da:	881b      	ldrh	r3, [r3, #0]
 80030dc:	461a      	mov	r2, r3
 80030de:	793b      	ldrb	r3, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	2b80      	cmp	r3, #128	; 0x80
 80030e4:	dc06      	bgt.n	80030f4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80030e6:	4b35      	ldr	r3, [pc, #212]	; (80031bc <ssd1306_WriteChar+0x10c>)
 80030e8:	885b      	ldrh	r3, [r3, #2]
 80030ea:	461a      	mov	r2, r3
 80030ec:	797b      	ldrb	r3, [r7, #5]
 80030ee:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	dd01      	ble.n	80030f8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80030f4:	2300      	movs	r3, #0
 80030f6:	e05d      	b.n	80031b4 <ssd1306_WriteChar+0x104>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80030f8:	2300      	movs	r3, #0
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	e04c      	b.n	8003198 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	7bfb      	ldrb	r3, [r7, #15]
 8003102:	3b20      	subs	r3, #32
 8003104:	7979      	ldrb	r1, [r7, #5]
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4619      	mov	r1, r3
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	440b      	add	r3, r1
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]
 800311c:	e034      	b.n	8003188 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 800311e:	697a      	ldr	r2, [r7, #20]
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d012      	beq.n	8003154 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800312e:	4b23      	ldr	r3, [pc, #140]	; (80031bc <ssd1306_WriteChar+0x10c>)
 8003130:	881b      	ldrh	r3, [r3, #0]
 8003132:	b2da      	uxtb	r2, r3
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	b2db      	uxtb	r3, r3
 8003138:	4413      	add	r3, r2
 800313a:	b2d8      	uxtb	r0, r3
 800313c:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <ssd1306_WriteChar+0x10c>)
 800313e:	885b      	ldrh	r3, [r3, #2]
 8003140:	b2da      	uxtb	r2, r3
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	4413      	add	r3, r2
 8003148:	b2db      	uxtb	r3, r3
 800314a:	7bba      	ldrb	r2, [r7, #14]
 800314c:	4619      	mov	r1, r3
 800314e:	f7ff ff5d 	bl	800300c <ssd1306_DrawPixel>
 8003152:	e016      	b.n	8003182 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <ssd1306_WriteChar+0x10c>)
 8003156:	881b      	ldrh	r3, [r3, #0]
 8003158:	b2da      	uxtb	r2, r3
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	4413      	add	r3, r2
 8003160:	b2d8      	uxtb	r0, r3
 8003162:	4b16      	ldr	r3, [pc, #88]	; (80031bc <ssd1306_WriteChar+0x10c>)
 8003164:	885b      	ldrh	r3, [r3, #2]
 8003166:	b2da      	uxtb	r2, r3
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	4413      	add	r3, r2
 800316e:	b2d9      	uxtb	r1, r3
 8003170:	7bbb      	ldrb	r3, [r7, #14]
 8003172:	2b00      	cmp	r3, #0
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	f7ff ff45 	bl	800300c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	3301      	adds	r3, #1
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	793b      	ldrb	r3, [r7, #4]
 800318a:	461a      	mov	r2, r3
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	4293      	cmp	r3, r2
 8003190:	d3c5      	bcc.n	800311e <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	3301      	adds	r3, #1
 8003196:	61fb      	str	r3, [r7, #28]
 8003198:	797b      	ldrb	r3, [r7, #5]
 800319a:	461a      	mov	r2, r3
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	4293      	cmp	r3, r2
 80031a0:	d3ad      	bcc.n	80030fe <ssd1306_WriteChar+0x4e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <ssd1306_WriteChar+0x10c>)
 80031a4:	881a      	ldrh	r2, [r3, #0]
 80031a6:	793b      	ldrb	r3, [r7, #4]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	4b03      	ldr	r3, [pc, #12]	; (80031bc <ssd1306_WriteChar+0x10c>)
 80031b0:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80031b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3724      	adds	r7, #36	; 0x24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd90      	pop	{r4, r7, pc}
 80031bc:	20000e44 	.word	0x20000e44

080031c0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	1d38      	adds	r0, r7, #4
 80031ca:	e880 0006 	stmia.w	r0, {r1, r2}
 80031ce:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80031d0:	e012      	b.n	80031f8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	7818      	ldrb	r0, [r3, #0]
 80031d6:	78fb      	ldrb	r3, [r7, #3]
 80031d8:	1d3a      	adds	r2, r7, #4
 80031da:	ca06      	ldmia	r2, {r1, r2}
 80031dc:	f7ff ff68 	bl	80030b0 <ssd1306_WriteChar>
 80031e0:	4603      	mov	r3, r0
 80031e2:	461a      	mov	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d002      	beq.n	80031f2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	e008      	b.n	8003204 <ssd1306_WriteString+0x44>
        }

        // Next char
        str++;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3301      	adds	r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d1e8      	bne.n	80031d2 <ssd1306_WriteString+0x12>
    }

    // Everything ok
    return *str;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	781b      	ldrb	r3, [r3, #0]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	460a      	mov	r2, r1
 8003216:	71fb      	strb	r3, [r7, #7]
 8003218:	4613      	mov	r3, r2
 800321a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	b29a      	uxth	r2, r3
 8003220:	4b05      	ldr	r3, [pc, #20]	; (8003238 <ssd1306_SetCursor+0x2c>)
 8003222:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003224:	79bb      	ldrb	r3, [r7, #6]
 8003226:	b29a      	uxth	r2, r3
 8003228:	4b03      	ldr	r3, [pc, #12]	; (8003238 <ssd1306_SetCursor+0x2c>)
 800322a:	805a      	strh	r2, [r3, #2]
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	bc80      	pop	{r7}
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	20000e44 	.word	0x20000e44

0800323c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003246:	2381      	movs	r3, #129	; 0x81
 8003248:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff fdf7 	bl	8002e40 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff fdf3 	bl	8002e40 <ssd1306_WriteCommand>
}
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003274:	23af      	movs	r3, #175	; 0xaf
 8003276:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003278:	4b08      	ldr	r3, [pc, #32]	; (800329c <ssd1306_SetDisplayOn+0x38>)
 800327a:	2201      	movs	r2, #1
 800327c:	715a      	strb	r2, [r3, #5]
 800327e:	e004      	b.n	800328a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003280:	23ae      	movs	r3, #174	; 0xae
 8003282:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003284:	4b05      	ldr	r3, [pc, #20]	; (800329c <ssd1306_SetDisplayOn+0x38>)
 8003286:	2200      	movs	r2, #0
 8003288:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800328a:	7bfb      	ldrb	r3, [r7, #15]
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fdd7 	bl	8002e40 <ssd1306_WriteCommand>
}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000e44 	.word	0x20000e44

080032a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <HAL_MspInit+0x5c>)
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	4a14      	ldr	r2, [pc, #80]	; (80032fc <HAL_MspInit+0x5c>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	6193      	str	r3, [r2, #24]
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <HAL_MspInit+0x5c>)
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	60bb      	str	r3, [r7, #8]
 80032bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032be:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <HAL_MspInit+0x5c>)
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	4a0e      	ldr	r2, [pc, #56]	; (80032fc <HAL_MspInit+0x5c>)
 80032c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c8:	61d3      	str	r3, [r2, #28]
 80032ca:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <HAL_MspInit+0x5c>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	607b      	str	r3, [r7, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032d6:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <HAL_MspInit+0x60>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	4a04      	ldr	r2, [pc, #16]	; (8003300 <HAL_MspInit+0x60>)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032f2:	bf00      	nop
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	40021000 	.word	0x40021000
 8003300:	40010000 	.word	0x40010000

08003304 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b08a      	sub	sp, #40	; 0x28
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330c:	f107 0314 	add.w	r3, r7, #20
 8003310:	2200      	movs	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
 8003314:	605a      	str	r2, [r3, #4]
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a1d      	ldr	r2, [pc, #116]	; (8003394 <HAL_I2C_MspInit+0x90>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d132      	bne.n	800338a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003324:	4b1c      	ldr	r3, [pc, #112]	; (8003398 <HAL_I2C_MspInit+0x94>)
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	4a1b      	ldr	r2, [pc, #108]	; (8003398 <HAL_I2C_MspInit+0x94>)
 800332a:	f043 0308 	orr.w	r3, r3, #8
 800332e:	6193      	str	r3, [r2, #24]
 8003330:	4b19      	ldr	r3, [pc, #100]	; (8003398 <HAL_I2C_MspInit+0x94>)
 8003332:	699b      	ldr	r3, [r3, #24]
 8003334:	f003 0308 	and.w	r3, r3, #8
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800333c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003342:	2312      	movs	r3, #18
 8003344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003346:	2303      	movs	r3, #3
 8003348:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	4619      	mov	r1, r3
 8003350:	4812      	ldr	r0, [pc, #72]	; (800339c <HAL_I2C_MspInit+0x98>)
 8003352:	f000 fecd 	bl	80040f0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <HAL_I2C_MspInit+0x9c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	627b      	str	r3, [r7, #36]	; 0x24
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003362:	627b      	str	r3, [r7, #36]	; 0x24
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	f043 0302 	orr.w	r3, r3, #2
 800336a:	627b      	str	r3, [r7, #36]	; 0x24
 800336c:	4a0c      	ldr	r2, [pc, #48]	; (80033a0 <HAL_I2C_MspInit+0x9c>)
 800336e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003370:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_I2C_MspInit+0x94>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	4a08      	ldr	r2, [pc, #32]	; (8003398 <HAL_I2C_MspInit+0x94>)
 8003378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800337c:	61d3      	str	r3, [r2, #28]
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_I2C_MspInit+0x94>)
 8003380:	69db      	ldr	r3, [r3, #28]
 8003382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800338a:	bf00      	nop
 800338c:	3728      	adds	r7, #40	; 0x28
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40005400 	.word	0x40005400
 8003398:	40021000 	.word	0x40021000
 800339c:	40010c00 	.word	0x40010c00
 80033a0:	40010000 	.word	0x40010000

080033a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a16      	ldr	r2, [pc, #88]	; (800340c <HAL_TIM_Base_MspInit+0x68>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d114      	bne.n	80033e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033b6:	4b16      	ldr	r3, [pc, #88]	; (8003410 <HAL_TIM_Base_MspInit+0x6c>)
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	4a15      	ldr	r2, [pc, #84]	; (8003410 <HAL_TIM_Base_MspInit+0x6c>)
 80033bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033c0:	6193      	str	r3, [r2, #24]
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <HAL_TIM_Base_MspInit+0x6c>)
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 80033ce:	2200      	movs	r2, #0
 80033d0:	2101      	movs	r1, #1
 80033d2:	2019      	movs	r0, #25
 80033d4:	f000 fc67 	bl	8003ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80033d8:	2019      	movs	r0, #25
 80033da:	f000 fc80 	bl	8003cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80033de:	e010      	b.n	8003402 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0b      	ldr	r2, [pc, #44]	; (8003414 <HAL_TIM_Base_MspInit+0x70>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d10b      	bne.n	8003402 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033ea:	4b09      	ldr	r3, [pc, #36]	; (8003410 <HAL_TIM_Base_MspInit+0x6c>)
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	4a08      	ldr	r2, [pc, #32]	; (8003410 <HAL_TIM_Base_MspInit+0x6c>)
 80033f0:	f043 0302 	orr.w	r3, r3, #2
 80033f4:	61d3      	str	r3, [r2, #28]
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_TIM_Base_MspInit+0x6c>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	60bb      	str	r3, [r7, #8]
 8003400:	68bb      	ldr	r3, [r7, #8]
}
 8003402:	bf00      	nop
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40012c00 	.word	0x40012c00
 8003410:	40021000 	.word	0x40021000
 8003414:	40000400 	.word	0x40000400

08003418 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	; 0x28
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003420:	f107 0318 	add.w	r3, r7, #24
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	605a      	str	r2, [r3, #4]
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003436:	d124      	bne.n	8003482 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003438:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_TIM_Encoder_MspInit+0xc4>)
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	4a27      	ldr	r2, [pc, #156]	; (80034dc <HAL_TIM_Encoder_MspInit+0xc4>)
 800343e:	f043 0301 	orr.w	r3, r3, #1
 8003442:	61d3      	str	r3, [r2, #28]
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003450:	4b22      	ldr	r3, [pc, #136]	; (80034dc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	4a21      	ldr	r2, [pc, #132]	; (80034dc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003456:	f043 0304 	orr.w	r3, r3, #4
 800345a:	6193      	str	r3, [r2, #24]
 800345c:	4b1f      	ldr	r3, [pc, #124]	; (80034dc <HAL_TIM_Encoder_MspInit+0xc4>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003468:	2303      	movs	r3, #3
 800346a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003474:	f107 0318 	add.w	r3, r7, #24
 8003478:	4619      	mov	r1, r3
 800347a:	4819      	ldr	r0, [pc, #100]	; (80034e0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800347c:	f000 fe38 	bl	80040f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003480:	e028      	b.n	80034d4 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a17      	ldr	r2, [pc, #92]	; (80034e4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d123      	bne.n	80034d4 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800348c:	4b13      	ldr	r3, [pc, #76]	; (80034dc <HAL_TIM_Encoder_MspInit+0xc4>)
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	4a12      	ldr	r2, [pc, #72]	; (80034dc <HAL_TIM_Encoder_MspInit+0xc4>)
 8003492:	f043 0304 	orr.w	r3, r3, #4
 8003496:	61d3      	str	r3, [r2, #28]
 8003498:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_TIM_Encoder_MspInit+0xc4>)
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a4:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_TIM_Encoder_MspInit+0xc4>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	4a0c      	ldr	r2, [pc, #48]	; (80034dc <HAL_TIM_Encoder_MspInit+0xc4>)
 80034aa:	f043 0308 	orr.w	r3, r3, #8
 80034ae:	6193      	str	r3, [r2, #24]
 80034b0:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <HAL_TIM_Encoder_MspInit+0xc4>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034bc:	23c0      	movs	r3, #192	; 0xc0
 80034be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034c8:	f107 0318 	add.w	r3, r7, #24
 80034cc:	4619      	mov	r1, r3
 80034ce:	4806      	ldr	r0, [pc, #24]	; (80034e8 <HAL_TIM_Encoder_MspInit+0xd0>)
 80034d0:	f000 fe0e 	bl	80040f0 <HAL_GPIO_Init>
}
 80034d4:	bf00      	nop
 80034d6:	3728      	adds	r7, #40	; 0x28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40010800 	.word	0x40010800
 80034e4:	40000800 	.word	0x40000800
 80034e8:	40010c00 	.word	0x40010c00

080034ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b088      	sub	sp, #32
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034f4:	f107 0310 	add.w	r3, r7, #16
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1b      	ldr	r2, [pc, #108]	; (8003574 <HAL_TIM_MspPostInit+0x88>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d12f      	bne.n	800356c <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350c:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_TIM_MspPostInit+0x8c>)
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	4a19      	ldr	r2, [pc, #100]	; (8003578 <HAL_TIM_MspPostInit+0x8c>)
 8003512:	f043 0304 	orr.w	r3, r3, #4
 8003516:	6193      	str	r3, [r2, #24]
 8003518:	4b17      	ldr	r3, [pc, #92]	; (8003578 <HAL_TIM_MspPostInit+0x8c>)
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003524:	4b14      	ldr	r3, [pc, #80]	; (8003578 <HAL_TIM_MspPostInit+0x8c>)
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	4a13      	ldr	r2, [pc, #76]	; (8003578 <HAL_TIM_MspPostInit+0x8c>)
 800352a:	f043 0308 	orr.w	r3, r3, #8
 800352e:	6193      	str	r3, [r2, #24]
 8003530:	4b11      	ldr	r3, [pc, #68]	; (8003578 <HAL_TIM_MspPostInit+0x8c>)
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	f003 0308 	and.w	r3, r3, #8
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800353c:	23c0      	movs	r3, #192	; 0xc0
 800353e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003540:	2302      	movs	r3, #2
 8003542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003544:	2302      	movs	r3, #2
 8003546:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003548:	f107 0310 	add.w	r3, r7, #16
 800354c:	4619      	mov	r1, r3
 800354e:	480b      	ldr	r0, [pc, #44]	; (800357c <HAL_TIM_MspPostInit+0x90>)
 8003550:	f000 fdce 	bl	80040f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003554:	2303      	movs	r3, #3
 8003556:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003558:	2302      	movs	r3, #2
 800355a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800355c:	2302      	movs	r3, #2
 800355e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003560:	f107 0310 	add.w	r3, r7, #16
 8003564:	4619      	mov	r1, r3
 8003566:	4806      	ldr	r0, [pc, #24]	; (8003580 <HAL_TIM_MspPostInit+0x94>)
 8003568:	f000 fdc2 	bl	80040f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800356c:	bf00      	nop
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40000400 	.word	0x40000400
 8003578:	40021000 	.word	0x40021000
 800357c:	40010800 	.word	0x40010800
 8003580:	40010c00 	.word	0x40010c00

08003584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b08a      	sub	sp, #40	; 0x28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800358c:	f107 0318 	add.w	r3, r7, #24
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	605a      	str	r2, [r3, #4]
 8003596:	609a      	str	r2, [r3, #8]
 8003598:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a5d      	ldr	r2, [pc, #372]	; (8003714 <HAL_UART_MspInit+0x190>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d158      	bne.n	8003656 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035a4:	4b5c      	ldr	r3, [pc, #368]	; (8003718 <HAL_UART_MspInit+0x194>)
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	4a5b      	ldr	r2, [pc, #364]	; (8003718 <HAL_UART_MspInit+0x194>)
 80035aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ae:	6193      	str	r3, [r2, #24]
 80035b0:	4b59      	ldr	r3, [pc, #356]	; (8003718 <HAL_UART_MspInit+0x194>)
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035b8:	617b      	str	r3, [r7, #20]
 80035ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035bc:	4b56      	ldr	r3, [pc, #344]	; (8003718 <HAL_UART_MspInit+0x194>)
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	4a55      	ldr	r2, [pc, #340]	; (8003718 <HAL_UART_MspInit+0x194>)
 80035c2:	f043 0304 	orr.w	r3, r3, #4
 80035c6:	6193      	str	r3, [r2, #24]
 80035c8:	4b53      	ldr	r3, [pc, #332]	; (8003718 <HAL_UART_MspInit+0x194>)
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	613b      	str	r3, [r7, #16]
 80035d2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = JY_TX_Pin;
 80035d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035da:	2302      	movs	r3, #2
 80035dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035de:	2303      	movs	r3, #3
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 80035e2:	f107 0318 	add.w	r3, r7, #24
 80035e6:	4619      	mov	r1, r3
 80035e8:	484c      	ldr	r0, [pc, #304]	; (800371c <HAL_UART_MspInit+0x198>)
 80035ea:	f000 fd81 	bl	80040f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JY_RX_Pin;
 80035ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035f4:	2300      	movs	r3, #0
 80035f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 80035fc:	f107 0318 	add.w	r3, r7, #24
 8003600:	4619      	mov	r1, r3
 8003602:	4846      	ldr	r0, [pc, #280]	; (800371c <HAL_UART_MspInit+0x198>)
 8003604:	f000 fd74 	bl	80040f0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003608:	4b45      	ldr	r3, [pc, #276]	; (8003720 <HAL_UART_MspInit+0x19c>)
 800360a:	4a46      	ldr	r2, [pc, #280]	; (8003724 <HAL_UART_MspInit+0x1a0>)
 800360c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800360e:	4b44      	ldr	r3, [pc, #272]	; (8003720 <HAL_UART_MspInit+0x19c>)
 8003610:	2200      	movs	r2, #0
 8003612:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003614:	4b42      	ldr	r3, [pc, #264]	; (8003720 <HAL_UART_MspInit+0x19c>)
 8003616:	2200      	movs	r2, #0
 8003618:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800361a:	4b41      	ldr	r3, [pc, #260]	; (8003720 <HAL_UART_MspInit+0x19c>)
 800361c:	2280      	movs	r2, #128	; 0x80
 800361e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003620:	4b3f      	ldr	r3, [pc, #252]	; (8003720 <HAL_UART_MspInit+0x19c>)
 8003622:	2200      	movs	r2, #0
 8003624:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003626:	4b3e      	ldr	r3, [pc, #248]	; (8003720 <HAL_UART_MspInit+0x19c>)
 8003628:	2200      	movs	r2, #0
 800362a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800362c:	4b3c      	ldr	r3, [pc, #240]	; (8003720 <HAL_UART_MspInit+0x19c>)
 800362e:	2200      	movs	r2, #0
 8003630:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003632:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <HAL_UART_MspInit+0x19c>)
 8003634:	2200      	movs	r2, #0
 8003636:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003638:	4839      	ldr	r0, [pc, #228]	; (8003720 <HAL_UART_MspInit+0x19c>)
 800363a:	f000 fb6b 	bl	8003d14 <HAL_DMA_Init>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003644:	f7ff fbf0 	bl	8002e28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a35      	ldr	r2, [pc, #212]	; (8003720 <HAL_UART_MspInit+0x19c>)
 800364c:	639a      	str	r2, [r3, #56]	; 0x38
 800364e:	4a34      	ldr	r2, [pc, #208]	; (8003720 <HAL_UART_MspInit+0x19c>)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003654:	e05a      	b.n	800370c <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART2)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a33      	ldr	r2, [pc, #204]	; (8003728 <HAL_UART_MspInit+0x1a4>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d155      	bne.n	800370c <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003660:	4b2d      	ldr	r3, [pc, #180]	; (8003718 <HAL_UART_MspInit+0x194>)
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	4a2c      	ldr	r2, [pc, #176]	; (8003718 <HAL_UART_MspInit+0x194>)
 8003666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800366a:	61d3      	str	r3, [r2, #28]
 800366c:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <HAL_UART_MspInit+0x194>)
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003678:	4b27      	ldr	r3, [pc, #156]	; (8003718 <HAL_UART_MspInit+0x194>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	4a26      	ldr	r2, [pc, #152]	; (8003718 <HAL_UART_MspInit+0x194>)
 800367e:	f043 0304 	orr.w	r3, r3, #4
 8003682:	6193      	str	r3, [r2, #24]
 8003684:	4b24      	ldr	r3, [pc, #144]	; (8003718 <HAL_UART_MspInit+0x194>)
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8003690:	2304      	movs	r3, #4
 8003692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003694:	2302      	movs	r3, #2
 8003696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003698:	2303      	movs	r3, #3
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 800369c:	f107 0318 	add.w	r3, r7, #24
 80036a0:	4619      	mov	r1, r3
 80036a2:	481e      	ldr	r0, [pc, #120]	; (800371c <HAL_UART_MspInit+0x198>)
 80036a4:	f000 fd24 	bl	80040f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = XB_RX_Pin;
 80036a8:	2308      	movs	r3, #8
 80036aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80036ac:	2300      	movs	r3, #0
 80036ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 80036b4:	f107 0318 	add.w	r3, r7, #24
 80036b8:	4619      	mov	r1, r3
 80036ba:	4818      	ldr	r0, [pc, #96]	; (800371c <HAL_UART_MspInit+0x198>)
 80036bc:	f000 fd18 	bl	80040f0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80036c0:	4b1a      	ldr	r3, [pc, #104]	; (800372c <HAL_UART_MspInit+0x1a8>)
 80036c2:	4a1b      	ldr	r2, [pc, #108]	; (8003730 <HAL_UART_MspInit+0x1ac>)
 80036c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036c6:	4b19      	ldr	r3, [pc, #100]	; (800372c <HAL_UART_MspInit+0x1a8>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036cc:	4b17      	ldr	r3, [pc, #92]	; (800372c <HAL_UART_MspInit+0x1a8>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036d2:	4b16      	ldr	r3, [pc, #88]	; (800372c <HAL_UART_MspInit+0x1a8>)
 80036d4:	2280      	movs	r2, #128	; 0x80
 80036d6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036d8:	4b14      	ldr	r3, [pc, #80]	; (800372c <HAL_UART_MspInit+0x1a8>)
 80036da:	2200      	movs	r2, #0
 80036dc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036de:	4b13      	ldr	r3, [pc, #76]	; (800372c <HAL_UART_MspInit+0x1a8>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_UART_MspInit+0x1a8>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036ea:	4b10      	ldr	r3, [pc, #64]	; (800372c <HAL_UART_MspInit+0x1a8>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80036f0:	480e      	ldr	r0, [pc, #56]	; (800372c <HAL_UART_MspInit+0x1a8>)
 80036f2:	f000 fb0f 	bl	8003d14 <HAL_DMA_Init>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d001      	beq.n	8003700 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 80036fc:	f7ff fb94 	bl	8002e28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <HAL_UART_MspInit+0x1a8>)
 8003704:	639a      	str	r2, [r3, #56]	; 0x38
 8003706:	4a09      	ldr	r2, [pc, #36]	; (800372c <HAL_UART_MspInit+0x1a8>)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800370c:	bf00      	nop
 800370e:	3728      	adds	r7, #40	; 0x28
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40013800 	.word	0x40013800
 8003718:	40021000 	.word	0x40021000
 800371c:	40010800 	.word	0x40010800
 8003720:	200009a0 	.word	0x200009a0
 8003724:	40020058 	.word	0x40020058
 8003728:	40004400 	.word	0x40004400
 800372c:	200009e4 	.word	0x200009e4
 8003730:	4002006c 	.word	0x4002006c

08003734 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003738:	e7fe      	b.n	8003738 <NMI_Handler+0x4>

0800373a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800373a:	b480      	push	{r7}
 800373c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 800373e:	e7fe      	b.n	800373e <HardFault_Handler+0x4>

08003740 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8003744:	e7fe      	b.n	8003744 <MemManage_Handler+0x4>

08003746 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 800374a:	e7fe      	b.n	800374a <BusFault_Handler+0x4>

0800374c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8003750:	e7fe      	b.n	8003750 <UsageFault_Handler+0x4>

08003752 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8003752:	b480      	push	{r7}
 8003754:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	46bd      	mov	sp, r7
 800375a:	bc80      	pop	{r7}
 800375c:	4770      	bx	lr

0800375e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800375e:	b480      	push	{r7}
 8003760:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr

08003776 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800377a:	f000 f97d 	bl	8003a78 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
	...

08003784 <DMA1_Channel5_IRQHandler>:

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	huansic_jy62_decodePackage(&himu);
 8003788:	4805      	ldr	r0, [pc, #20]	; (80037a0 <DMA1_Channel5_IRQHandler+0x1c>)
 800378a:	f7fd fd19 	bl	80011c0 <huansic_jy62_decodePackage>
	/* USER CODE END DMA1_Channel5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800378e:	4805      	ldr	r0, [pc, #20]	; (80037a4 <DMA1_Channel5_IRQHandler+0x20>)
 8003790:	f000 fb7a 	bl	8003e88 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
	huansic_jy62_setDMA(&himu);
 8003794:	4802      	ldr	r0, [pc, #8]	; (80037a0 <DMA1_Channel5_IRQHandler+0x1c>)
 8003796:	f7fd ff1d 	bl	80015d4 <huansic_jy62_setDMA>
	/* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	20000aa0 	.word	0x20000aa0
 80037a4:	200009a0 	.word	0x200009a0

080037a8 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if (hxb.nextPackageID == 0x00) {
 80037ac:	4b0c      	ldr	r3, [pc, #48]	; (80037e0 <DMA1_Channel6_IRQHandler+0x38>)
 80037ae:	7a1b      	ldrb	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d108      	bne.n	80037c6 <DMA1_Channel6_IRQHandler+0x1e>
		huansic_xb_decodeHeader(&hxb);
 80037b4:	480a      	ldr	r0, [pc, #40]	; (80037e0 <DMA1_Channel6_IRQHandler+0x38>)
 80037b6:	f7fe f99f 	bl	8001af8 <huansic_xb_decodeHeader>
		HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80037ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037be:	4809      	ldr	r0, [pc, #36]	; (80037e4 <DMA1_Channel6_IRQHandler+0x3c>)
 80037c0:	f000 fe32 	bl	8004428 <HAL_GPIO_TogglePin>
 80037c4:	e007      	b.n	80037d6 <DMA1_Channel6_IRQHandler+0x2e>
	} else {
		huansic_xb_decodeBody(&hxb);
 80037c6:	4806      	ldr	r0, [pc, #24]	; (80037e0 <DMA1_Channel6_IRQHandler+0x38>)
 80037c8:	f7fe f9d4 	bl	8001b74 <huansic_xb_decodeBody>
		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 80037cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037d0:	4804      	ldr	r0, [pc, #16]	; (80037e4 <DMA1_Channel6_IRQHandler+0x3c>)
 80037d2:	f000 fe29 	bl	8004428 <HAL_GPIO_TogglePin>
	}
	/* USER CODE END DMA1_Channel6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80037d6:	4804      	ldr	r0, [pc, #16]	; (80037e8 <DMA1_Channel6_IRQHandler+0x40>)
 80037d8:	f000 fb56 	bl	8003e88 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80037dc:	bf00      	nop
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	20000ad8 	.word	0x20000ad8
 80037e4:	40010c00 	.word	0x40010c00
 80037e8:	200009e4 	.word	0x200009e4

080037ec <TIM1_UP_IRQHandler>:

/**
 * @brief This function handles TIM1 update interrupt.
 */
void TIM1_UP_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_IRQn 0 */
	huansic_motor_pid(&hmotor_left);
 80037f0:	4805      	ldr	r0, [pc, #20]	; (8003808 <TIM1_UP_IRQHandler+0x1c>)
 80037f2:	f7fe f837 	bl	8001864 <huansic_motor_pid>
	huansic_motor_pid(&hmotor_right);
 80037f6:	4805      	ldr	r0, [pc, #20]	; (800380c <TIM1_UP_IRQHandler+0x20>)
 80037f8:	f7fe f834 	bl	8001864 <huansic_motor_pid>
	/* USER CODE END TIM1_UP_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80037fc:	4804      	ldr	r0, [pc, #16]	; (8003810 <TIM1_UP_IRQHandler+0x24>)
 80037fe:	f002 f96d 	bl	8005adc <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_IRQn 1 */

	/* USER CODE END TIM1_UP_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000a28 	.word	0x20000a28
 800380c:	20000a64 	.word	0x20000a64
 8003810:	200007f8 	.word	0x200007f8

08003814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
	return 1;
 8003818:	2301      	movs	r3, #1
}
 800381a:	4618      	mov	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr

08003822 <_kill>:

int _kill(int pid, int sig)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800382c:	f003 faa4 	bl	8006d78 <__errno>
 8003830:	4603      	mov	r3, r0
 8003832:	2216      	movs	r2, #22
 8003834:	601a      	str	r2, [r3, #0]
	return -1;
 8003836:	f04f 33ff 	mov.w	r3, #4294967295
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <_exit>:

void _exit (int status)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b082      	sub	sp, #8
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800384a:	f04f 31ff 	mov.w	r1, #4294967295
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ffe7 	bl	8003822 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003854:	e7fe      	b.n	8003854 <_exit+0x12>

08003856 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b086      	sub	sp, #24
 800385a:	af00      	add	r7, sp, #0
 800385c:	60f8      	str	r0, [r7, #12]
 800385e:	60b9      	str	r1, [r7, #8]
 8003860:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e00a      	b.n	800387e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003868:	f3af 8000 	nop.w
 800386c:	4601      	mov	r1, r0
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	60ba      	str	r2, [r7, #8]
 8003874:	b2ca      	uxtb	r2, r1
 8003876:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	3301      	adds	r3, #1
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	429a      	cmp	r2, r3
 8003884:	dbf0      	blt.n	8003868 <_read+0x12>
	}

return len;
 8003886:	687b      	ldr	r3, [r7, #4]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e009      	b.n	80038b6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	60ba      	str	r2, [r7, #8]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	3301      	adds	r3, #1
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	dbf1      	blt.n	80038a2 <_write+0x12>
	}
	return len;
 80038be:	687b      	ldr	r3, [r7, #4]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <_close>:

int _close(int file)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	return -1;
 80038d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr

080038de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038ee:	605a      	str	r2, [r3, #4]
	return 0;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr

080038fc <_isatty>:

int _isatty(int file)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
	return 1;
 8003904:	2301      	movs	r3, #1
}
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003910:	b480      	push	{r7}
 8003912:	b085      	sub	sp, #20
 8003914:	af00      	add	r7, sp, #0
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
	return 0;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	3714      	adds	r7, #20
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003930:	4a14      	ldr	r2, [pc, #80]	; (8003984 <_sbrk+0x5c>)
 8003932:	4b15      	ldr	r3, [pc, #84]	; (8003988 <_sbrk+0x60>)
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800393c:	4b13      	ldr	r3, [pc, #76]	; (800398c <_sbrk+0x64>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <_sbrk+0x64>)
 8003946:	4a12      	ldr	r2, [pc, #72]	; (8003990 <_sbrk+0x68>)
 8003948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800394a:	4b10      	ldr	r3, [pc, #64]	; (800398c <_sbrk+0x64>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4413      	add	r3, r2
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	429a      	cmp	r2, r3
 8003956:	d207      	bcs.n	8003968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003958:	f003 fa0e 	bl	8006d78 <__errno>
 800395c:	4603      	mov	r3, r0
 800395e:	220c      	movs	r2, #12
 8003960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003962:	f04f 33ff 	mov.w	r3, #4294967295
 8003966:	e009      	b.n	800397c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003968:	4b08      	ldr	r3, [pc, #32]	; (800398c <_sbrk+0x64>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800396e:	4b07      	ldr	r3, [pc, #28]	; (800398c <_sbrk+0x64>)
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4413      	add	r3, r2
 8003976:	4a05      	ldr	r2, [pc, #20]	; (800398c <_sbrk+0x64>)
 8003978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800397a:	68fb      	ldr	r3, [r7, #12]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20005000 	.word	0x20005000
 8003988:	00000400 	.word	0x00000400
 800398c:	20000e4c 	.word	0x20000e4c
 8003990:	20000e68 	.word	0x20000e68

08003994 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003998:	bf00      	nop
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039a0:	480c      	ldr	r0, [pc, #48]	; (80039d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039a2:	490d      	ldr	r1, [pc, #52]	; (80039d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039a4:	4a0d      	ldr	r2, [pc, #52]	; (80039dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039a8:	e002      	b.n	80039b0 <LoopCopyDataInit>

080039aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ae:	3304      	adds	r3, #4

080039b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039b4:	d3f9      	bcc.n	80039aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039b6:	4a0a      	ldr	r2, [pc, #40]	; (80039e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039b8:	4c0a      	ldr	r4, [pc, #40]	; (80039e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80039ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039bc:	e001      	b.n	80039c2 <LoopFillZerobss>

080039be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039c0:	3204      	adds	r2, #4

080039c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039c4:	d3fb      	bcc.n	80039be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039c6:	f7ff ffe5 	bl	8003994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ca:	f003 f9ed 	bl	8006da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039ce:	f7fe fd8f 	bl	80024f0 <main>
  bx lr
 80039d2:	4770      	bx	lr
  ldr r0, =_sdata
 80039d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039d8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80039dc:	0800a638 	.word	0x0800a638
  ldr r2, =_sbss
 80039e0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80039e4:	20000e64 	.word	0x20000e64

080039e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039e8:	e7fe      	b.n	80039e8 <ADC1_2_IRQHandler>
	...

080039ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039f0:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <HAL_Init+0x28>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <HAL_Init+0x28>)
 80039f6:	f043 0310 	orr.w	r3, r3, #16
 80039fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039fc:	2003      	movs	r0, #3
 80039fe:	f000 f947 	bl	8003c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a02:	2000      	movs	r0, #0
 8003a04:	f000 f808 	bl	8003a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a08:	f7ff fc4a 	bl	80032a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40022000 	.word	0x40022000

08003a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a20:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <HAL_InitTick+0x54>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	4b12      	ldr	r3, [pc, #72]	; (8003a70 <HAL_InitTick+0x58>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 f95f 	bl	8003cfa <HAL_SYSTICK_Config>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e00e      	b.n	8003a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2b0f      	cmp	r3, #15
 8003a4a:	d80a      	bhi.n	8003a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295
 8003a54:	f000 f927 	bl	8003ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a58:	4a06      	ldr	r2, [pc, #24]	; (8003a74 <HAL_InitTick+0x5c>)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	e000      	b.n	8003a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	2000000c 	.word	0x2000000c
 8003a70:	20000014 	.word	0x20000014
 8003a74:	20000010 	.word	0x20000010

08003a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_IncTick+0x1c>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	461a      	mov	r2, r3
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_IncTick+0x20>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4413      	add	r3, r2
 8003a88:	4a03      	ldr	r2, [pc, #12]	; (8003a98 <HAL_IncTick+0x20>)
 8003a8a:	6013      	str	r3, [r2, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr
 8003a94:	20000014 	.word	0x20000014
 8003a98:	20000e50 	.word	0x20000e50

08003a9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003aa0:	4b02      	ldr	r3, [pc, #8]	; (8003aac <HAL_GetTick+0x10>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	20000e50 	.word	0x20000e50

08003ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ab8:	f7ff fff0 	bl	8003a9c <HAL_GetTick>
 8003abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d005      	beq.n	8003ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aca:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <HAL_Delay+0x44>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ad6:	bf00      	nop
 8003ad8:	f7ff ffe0 	bl	8003a9c <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d8f7      	bhi.n	8003ad8 <HAL_Delay+0x28>
  {
  }
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000014 	.word	0x20000014

08003af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b08:	4b0c      	ldr	r3, [pc, #48]	; (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b14:	4013      	ands	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b2a:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	60d3      	str	r3, [r2, #12]
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <__NVIC_GetPriorityGrouping+0x18>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	f003 0307 	and.w	r3, r3, #7
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	db0b      	blt.n	8003b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	f003 021f 	and.w	r2, r3, #31
 8003b74:	4906      	ldr	r1, [pc, #24]	; (8003b90 <__NVIC_EnableIRQ+0x34>)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bc80      	pop	{r7}
 8003b8e:	4770      	bx	lr
 8003b90:	e000e100 	.word	0xe000e100

08003b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	6039      	str	r1, [r7, #0]
 8003b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	db0a      	blt.n	8003bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	490c      	ldr	r1, [pc, #48]	; (8003be0 <__NVIC_SetPriority+0x4c>)
 8003bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb2:	0112      	lsls	r2, r2, #4
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bbc:	e00a      	b.n	8003bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4908      	ldr	r1, [pc, #32]	; (8003be4 <__NVIC_SetPriority+0x50>)
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	3b04      	subs	r3, #4
 8003bcc:	0112      	lsls	r2, r2, #4
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	761a      	strb	r2, [r3, #24]
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	e000e100 	.word	0xe000e100
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b089      	sub	sp, #36	; 0x24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f1c3 0307 	rsb	r3, r3, #7
 8003c02:	2b04      	cmp	r3, #4
 8003c04:	bf28      	it	cs
 8003c06:	2304      	movcs	r3, #4
 8003c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	2b06      	cmp	r3, #6
 8003c10:	d902      	bls.n	8003c18 <NVIC_EncodePriority+0x30>
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3b03      	subs	r3, #3
 8003c16:	e000      	b.n	8003c1a <NVIC_EncodePriority+0x32>
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	fa02 f303 	lsl.w	r3, r2, r3
 8003c26:	43da      	mvns	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	401a      	ands	r2, r3
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c30:	f04f 31ff 	mov.w	r1, #4294967295
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3a:	43d9      	mvns	r1, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c40:	4313      	orrs	r3, r2
         );
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3724      	adds	r7, #36	; 0x24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bc80      	pop	{r7}
 8003c4a:	4770      	bx	lr

08003c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c5c:	d301      	bcc.n	8003c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e00f      	b.n	8003c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c62:	4a0a      	ldr	r2, [pc, #40]	; (8003c8c <SysTick_Config+0x40>)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c6a:	210f      	movs	r1, #15
 8003c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c70:	f7ff ff90 	bl	8003b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <SysTick_Config+0x40>)
 8003c76:	2200      	movs	r2, #0
 8003c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c7a:	4b04      	ldr	r3, [pc, #16]	; (8003c8c <SysTick_Config+0x40>)
 8003c7c:	2207      	movs	r2, #7
 8003c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	e000e010 	.word	0xe000e010

08003c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7ff ff2d 	bl	8003af8 <__NVIC_SetPriorityGrouping>
}
 8003c9e:	bf00      	nop
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b086      	sub	sp, #24
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	4603      	mov	r3, r0
 8003cae:	60b9      	str	r1, [r7, #8]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cb8:	f7ff ff42 	bl	8003b40 <__NVIC_GetPriorityGrouping>
 8003cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	68b9      	ldr	r1, [r7, #8]
 8003cc2:	6978      	ldr	r0, [r7, #20]
 8003cc4:	f7ff ff90 	bl	8003be8 <NVIC_EncodePriority>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7ff ff5f 	bl	8003b94 <__NVIC_SetPriority>
}
 8003cd6:	bf00      	nop
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff ff35 	bl	8003b5c <__NVIC_EnableIRQ>
}
 8003cf2:	bf00      	nop
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff ffa2 	bl	8003c4c <SysTick_Config>
 8003d08:	4603      	mov	r3, r0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b085      	sub	sp, #20
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e043      	b.n	8003db2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <HAL_DMA_Init+0xa8>)
 8003d32:	4413      	add	r3, r2
 8003d34:	4a22      	ldr	r2, [pc, #136]	; (8003dc0 <HAL_DMA_Init+0xac>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	091b      	lsrs	r3, r3, #4
 8003d3c:	009a      	lsls	r2, r3, #2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a1f      	ldr	r2, [pc, #124]	; (8003dc4 <HAL_DMA_Init+0xb0>)
 8003d46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bc80      	pop	{r7}
 8003dba:	4770      	bx	lr
 8003dbc:	bffdfff8 	.word	0xbffdfff8
 8003dc0:	cccccccd 	.word	0xcccccccd
 8003dc4:	40020000 	.word	0x40020000

08003dc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_DMA_Start_IT+0x20>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e04a      	b.n	8003e7e <HAL_DMA_Start_IT+0xb6>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d13a      	bne.n	8003e70 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 0201 	bic.w	r2, r2, #1
 8003e16:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f938 	bl	8004094 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 020e 	orr.w	r2, r2, #14
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	e00f      	b.n	8003e5e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0204 	bic.w	r2, r2, #4
 8003e4c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f042 020a 	orr.w	r2, r2, #10
 8003e5c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f042 0201 	orr.w	r2, r2, #1
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	e005      	b.n	8003e7c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003e7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea4:	2204      	movs	r2, #4
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d04f      	beq.n	8003f50 <HAL_DMA_IRQHandler+0xc8>
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d04a      	beq.n	8003f50 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0320 	and.w	r3, r3, #32
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d107      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0204 	bic.w	r2, r2, #4
 8003ed6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a66      	ldr	r2, [pc, #408]	; (8004078 <HAL_DMA_IRQHandler+0x1f0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d029      	beq.n	8003f36 <HAL_DMA_IRQHandler+0xae>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a65      	ldr	r2, [pc, #404]	; (800407c <HAL_DMA_IRQHandler+0x1f4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d022      	beq.n	8003f32 <HAL_DMA_IRQHandler+0xaa>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a63      	ldr	r2, [pc, #396]	; (8004080 <HAL_DMA_IRQHandler+0x1f8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d01a      	beq.n	8003f2c <HAL_DMA_IRQHandler+0xa4>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a62      	ldr	r2, [pc, #392]	; (8004084 <HAL_DMA_IRQHandler+0x1fc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d012      	beq.n	8003f26 <HAL_DMA_IRQHandler+0x9e>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a60      	ldr	r2, [pc, #384]	; (8004088 <HAL_DMA_IRQHandler+0x200>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00a      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x98>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a5f      	ldr	r2, [pc, #380]	; (800408c <HAL_DMA_IRQHandler+0x204>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d102      	bne.n	8003f1a <HAL_DMA_IRQHandler+0x92>
 8003f14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f18:	e00e      	b.n	8003f38 <HAL_DMA_IRQHandler+0xb0>
 8003f1a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003f1e:	e00b      	b.n	8003f38 <HAL_DMA_IRQHandler+0xb0>
 8003f20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003f24:	e008      	b.n	8003f38 <HAL_DMA_IRQHandler+0xb0>
 8003f26:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003f2a:	e005      	b.n	8003f38 <HAL_DMA_IRQHandler+0xb0>
 8003f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f30:	e002      	b.n	8003f38 <HAL_DMA_IRQHandler+0xb0>
 8003f32:	2340      	movs	r3, #64	; 0x40
 8003f34:	e000      	b.n	8003f38 <HAL_DMA_IRQHandler+0xb0>
 8003f36:	2304      	movs	r3, #4
 8003f38:	4a55      	ldr	r2, [pc, #340]	; (8004090 <HAL_DMA_IRQHandler+0x208>)
 8003f3a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 8094 	beq.w	800406e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003f4e:	e08e      	b.n	800406e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	2202      	movs	r2, #2
 8003f56:	409a      	lsls	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d056      	beq.n	800400e <HAL_DMA_IRQHandler+0x186>
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d051      	beq.n	800400e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10b      	bne.n	8003f90 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 020a 	bic.w	r2, r2, #10
 8003f86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a38      	ldr	r2, [pc, #224]	; (8004078 <HAL_DMA_IRQHandler+0x1f0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d029      	beq.n	8003fee <HAL_DMA_IRQHandler+0x166>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a37      	ldr	r2, [pc, #220]	; (800407c <HAL_DMA_IRQHandler+0x1f4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d022      	beq.n	8003fea <HAL_DMA_IRQHandler+0x162>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a35      	ldr	r2, [pc, #212]	; (8004080 <HAL_DMA_IRQHandler+0x1f8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d01a      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x15c>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a34      	ldr	r2, [pc, #208]	; (8004084 <HAL_DMA_IRQHandler+0x1fc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d012      	beq.n	8003fde <HAL_DMA_IRQHandler+0x156>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a32      	ldr	r2, [pc, #200]	; (8004088 <HAL_DMA_IRQHandler+0x200>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d00a      	beq.n	8003fd8 <HAL_DMA_IRQHandler+0x150>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a31      	ldr	r2, [pc, #196]	; (800408c <HAL_DMA_IRQHandler+0x204>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d102      	bne.n	8003fd2 <HAL_DMA_IRQHandler+0x14a>
 8003fcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003fd0:	e00e      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x168>
 8003fd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fd6:	e00b      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x168>
 8003fd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003fdc:	e008      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x168>
 8003fde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fe2:	e005      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x168>
 8003fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fe8:	e002      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x168>
 8003fea:	2320      	movs	r3, #32
 8003fec:	e000      	b.n	8003ff0 <HAL_DMA_IRQHandler+0x168>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	4a27      	ldr	r2, [pc, #156]	; (8004090 <HAL_DMA_IRQHandler+0x208>)
 8003ff2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	d034      	beq.n	800406e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800400c:	e02f      	b.n	800406e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2208      	movs	r2, #8
 8004014:	409a      	lsls	r2, r3
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4013      	ands	r3, r2
 800401a:	2b00      	cmp	r3, #0
 800401c:	d028      	beq.n	8004070 <HAL_DMA_IRQHandler+0x1e8>
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d023      	beq.n	8004070 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 020e 	bic.w	r2, r2, #14
 8004036:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004040:	2101      	movs	r1, #1
 8004042:	fa01 f202 	lsl.w	r2, r1, r2
 8004046:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	2b00      	cmp	r3, #0
 8004064:	d004      	beq.n	8004070 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	4798      	blx	r3
    }
  }
  return;
 800406e:	bf00      	nop
 8004070:	bf00      	nop
}
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40020008 	.word	0x40020008
 800407c:	4002001c 	.word	0x4002001c
 8004080:	40020030 	.word	0x40020030
 8004084:	40020044 	.word	0x40020044
 8004088:	40020058 	.word	0x40020058
 800408c:	4002006c 	.word	0x4002006c
 8004090:	40020000 	.word	0x40020000

08004094 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040aa:	2101      	movs	r1, #1
 80040ac:	fa01 f202 	lsl.w	r2, r1, r2
 80040b0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b10      	cmp	r3, #16
 80040c0:	d108      	bne.n	80040d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80040d2:	e007      	b.n	80040e4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	60da      	str	r2, [r3, #12]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bc80      	pop	{r7}
 80040ec:	4770      	bx	lr
	...

080040f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b08b      	sub	sp, #44	; 0x2c
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040fa:	2300      	movs	r3, #0
 80040fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80040fe:	2300      	movs	r3, #0
 8004100:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004102:	e169      	b.n	80043d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004104:	2201      	movs	r2, #1
 8004106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	69fa      	ldr	r2, [r7, #28]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004118:	69ba      	ldr	r2, [r7, #24]
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	429a      	cmp	r2, r3
 800411e:	f040 8158 	bne.w	80043d2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4a9a      	ldr	r2, [pc, #616]	; (8004390 <HAL_GPIO_Init+0x2a0>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d05e      	beq.n	80041ea <HAL_GPIO_Init+0xfa>
 800412c:	4a98      	ldr	r2, [pc, #608]	; (8004390 <HAL_GPIO_Init+0x2a0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d875      	bhi.n	800421e <HAL_GPIO_Init+0x12e>
 8004132:	4a98      	ldr	r2, [pc, #608]	; (8004394 <HAL_GPIO_Init+0x2a4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d058      	beq.n	80041ea <HAL_GPIO_Init+0xfa>
 8004138:	4a96      	ldr	r2, [pc, #600]	; (8004394 <HAL_GPIO_Init+0x2a4>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d86f      	bhi.n	800421e <HAL_GPIO_Init+0x12e>
 800413e:	4a96      	ldr	r2, [pc, #600]	; (8004398 <HAL_GPIO_Init+0x2a8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d052      	beq.n	80041ea <HAL_GPIO_Init+0xfa>
 8004144:	4a94      	ldr	r2, [pc, #592]	; (8004398 <HAL_GPIO_Init+0x2a8>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d869      	bhi.n	800421e <HAL_GPIO_Init+0x12e>
 800414a:	4a94      	ldr	r2, [pc, #592]	; (800439c <HAL_GPIO_Init+0x2ac>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d04c      	beq.n	80041ea <HAL_GPIO_Init+0xfa>
 8004150:	4a92      	ldr	r2, [pc, #584]	; (800439c <HAL_GPIO_Init+0x2ac>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d863      	bhi.n	800421e <HAL_GPIO_Init+0x12e>
 8004156:	4a92      	ldr	r2, [pc, #584]	; (80043a0 <HAL_GPIO_Init+0x2b0>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d046      	beq.n	80041ea <HAL_GPIO_Init+0xfa>
 800415c:	4a90      	ldr	r2, [pc, #576]	; (80043a0 <HAL_GPIO_Init+0x2b0>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d85d      	bhi.n	800421e <HAL_GPIO_Init+0x12e>
 8004162:	2b12      	cmp	r3, #18
 8004164:	d82a      	bhi.n	80041bc <HAL_GPIO_Init+0xcc>
 8004166:	2b12      	cmp	r3, #18
 8004168:	d859      	bhi.n	800421e <HAL_GPIO_Init+0x12e>
 800416a:	a201      	add	r2, pc, #4	; (adr r2, 8004170 <HAL_GPIO_Init+0x80>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	080041eb 	.word	0x080041eb
 8004174:	080041c5 	.word	0x080041c5
 8004178:	080041d7 	.word	0x080041d7
 800417c:	08004219 	.word	0x08004219
 8004180:	0800421f 	.word	0x0800421f
 8004184:	0800421f 	.word	0x0800421f
 8004188:	0800421f 	.word	0x0800421f
 800418c:	0800421f 	.word	0x0800421f
 8004190:	0800421f 	.word	0x0800421f
 8004194:	0800421f 	.word	0x0800421f
 8004198:	0800421f 	.word	0x0800421f
 800419c:	0800421f 	.word	0x0800421f
 80041a0:	0800421f 	.word	0x0800421f
 80041a4:	0800421f 	.word	0x0800421f
 80041a8:	0800421f 	.word	0x0800421f
 80041ac:	0800421f 	.word	0x0800421f
 80041b0:	0800421f 	.word	0x0800421f
 80041b4:	080041cd 	.word	0x080041cd
 80041b8:	080041e1 	.word	0x080041e1
 80041bc:	4a79      	ldr	r2, [pc, #484]	; (80043a4 <HAL_GPIO_Init+0x2b4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d013      	beq.n	80041ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80041c2:	e02c      	b.n	800421e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	623b      	str	r3, [r7, #32]
          break;
 80041ca:	e029      	b.n	8004220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	3304      	adds	r3, #4
 80041d2:	623b      	str	r3, [r7, #32]
          break;
 80041d4:	e024      	b.n	8004220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	3308      	adds	r3, #8
 80041dc:	623b      	str	r3, [r7, #32]
          break;
 80041de:	e01f      	b.n	8004220 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	330c      	adds	r3, #12
 80041e6:	623b      	str	r3, [r7, #32]
          break;
 80041e8:	e01a      	b.n	8004220 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041f2:	2304      	movs	r3, #4
 80041f4:	623b      	str	r3, [r7, #32]
          break;
 80041f6:	e013      	b.n	8004220 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d105      	bne.n	800420c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004200:	2308      	movs	r3, #8
 8004202:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	611a      	str	r2, [r3, #16]
          break;
 800420a:	e009      	b.n	8004220 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800420c:	2308      	movs	r3, #8
 800420e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	615a      	str	r2, [r3, #20]
          break;
 8004216:	e003      	b.n	8004220 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004218:	2300      	movs	r3, #0
 800421a:	623b      	str	r3, [r7, #32]
          break;
 800421c:	e000      	b.n	8004220 <HAL_GPIO_Init+0x130>
          break;
 800421e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004220:	69bb      	ldr	r3, [r7, #24]
 8004222:	2bff      	cmp	r3, #255	; 0xff
 8004224:	d801      	bhi.n	800422a <HAL_GPIO_Init+0x13a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	e001      	b.n	800422e <HAL_GPIO_Init+0x13e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	3304      	adds	r3, #4
 800422e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	2bff      	cmp	r3, #255	; 0xff
 8004234:	d802      	bhi.n	800423c <HAL_GPIO_Init+0x14c>
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	e002      	b.n	8004242 <HAL_GPIO_Init+0x152>
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	3b08      	subs	r3, #8
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	210f      	movs	r1, #15
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	fa01 f303 	lsl.w	r3, r1, r3
 8004250:	43db      	mvns	r3, r3
 8004252:	401a      	ands	r2, r3
 8004254:	6a39      	ldr	r1, [r7, #32]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	431a      	orrs	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80b1 	beq.w	80043d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004270:	4b4d      	ldr	r3, [pc, #308]	; (80043a8 <HAL_GPIO_Init+0x2b8>)
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	4a4c      	ldr	r2, [pc, #304]	; (80043a8 <HAL_GPIO_Init+0x2b8>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	6193      	str	r3, [r2, #24]
 800427c:	4b4a      	ldr	r3, [pc, #296]	; (80043a8 <HAL_GPIO_Init+0x2b8>)
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	60bb      	str	r3, [r7, #8]
 8004286:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004288:	4a48      	ldr	r2, [pc, #288]	; (80043ac <HAL_GPIO_Init+0x2bc>)
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	089b      	lsrs	r3, r3, #2
 800428e:	3302      	adds	r3, #2
 8004290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004294:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	220f      	movs	r2, #15
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4013      	ands	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a40      	ldr	r2, [pc, #256]	; (80043b0 <HAL_GPIO_Init+0x2c0>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d013      	beq.n	80042dc <HAL_GPIO_Init+0x1ec>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a3f      	ldr	r2, [pc, #252]	; (80043b4 <HAL_GPIO_Init+0x2c4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00d      	beq.n	80042d8 <HAL_GPIO_Init+0x1e8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a3e      	ldr	r2, [pc, #248]	; (80043b8 <HAL_GPIO_Init+0x2c8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d007      	beq.n	80042d4 <HAL_GPIO_Init+0x1e4>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a3d      	ldr	r2, [pc, #244]	; (80043bc <HAL_GPIO_Init+0x2cc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d101      	bne.n	80042d0 <HAL_GPIO_Init+0x1e0>
 80042cc:	2303      	movs	r3, #3
 80042ce:	e006      	b.n	80042de <HAL_GPIO_Init+0x1ee>
 80042d0:	2304      	movs	r3, #4
 80042d2:	e004      	b.n	80042de <HAL_GPIO_Init+0x1ee>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e002      	b.n	80042de <HAL_GPIO_Init+0x1ee>
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <HAL_GPIO_Init+0x1ee>
 80042dc:	2300      	movs	r3, #0
 80042de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e0:	f002 0203 	and.w	r2, r2, #3
 80042e4:	0092      	lsls	r2, r2, #2
 80042e6:	4093      	lsls	r3, r2
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80042ee:	492f      	ldr	r1, [pc, #188]	; (80043ac <HAL_GPIO_Init+0x2bc>)
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	089b      	lsrs	r3, r3, #2
 80042f4:	3302      	adds	r3, #2
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d006      	beq.n	8004316 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004308:	4b2d      	ldr	r3, [pc, #180]	; (80043c0 <HAL_GPIO_Init+0x2d0>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	492c      	ldr	r1, [pc, #176]	; (80043c0 <HAL_GPIO_Init+0x2d0>)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]
 8004314:	e006      	b.n	8004324 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004316:	4b2a      	ldr	r3, [pc, #168]	; (80043c0 <HAL_GPIO_Init+0x2d0>)
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	43db      	mvns	r3, r3
 800431e:	4928      	ldr	r1, [pc, #160]	; (80043c0 <HAL_GPIO_Init+0x2d0>)
 8004320:	4013      	ands	r3, r2
 8004322:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d006      	beq.n	800433e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004330:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <HAL_GPIO_Init+0x2d0>)
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	4922      	ldr	r1, [pc, #136]	; (80043c0 <HAL_GPIO_Init+0x2d0>)
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	4313      	orrs	r3, r2
 800433a:	604b      	str	r3, [r1, #4]
 800433c:	e006      	b.n	800434c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800433e:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <HAL_GPIO_Init+0x2d0>)
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	43db      	mvns	r3, r3
 8004346:	491e      	ldr	r1, [pc, #120]	; (80043c0 <HAL_GPIO_Init+0x2d0>)
 8004348:	4013      	ands	r3, r2
 800434a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d006      	beq.n	8004366 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004358:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <HAL_GPIO_Init+0x2d0>)
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	4918      	ldr	r1, [pc, #96]	; (80043c0 <HAL_GPIO_Init+0x2d0>)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	4313      	orrs	r3, r2
 8004362:	608b      	str	r3, [r1, #8]
 8004364:	e006      	b.n	8004374 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004366:	4b16      	ldr	r3, [pc, #88]	; (80043c0 <HAL_GPIO_Init+0x2d0>)
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	43db      	mvns	r3, r3
 800436e:	4914      	ldr	r1, [pc, #80]	; (80043c0 <HAL_GPIO_Init+0x2d0>)
 8004370:	4013      	ands	r3, r2
 8004372:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d021      	beq.n	80043c4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004380:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <HAL_GPIO_Init+0x2d0>)
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	490e      	ldr	r1, [pc, #56]	; (80043c0 <HAL_GPIO_Init+0x2d0>)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	4313      	orrs	r3, r2
 800438a:	60cb      	str	r3, [r1, #12]
 800438c:	e021      	b.n	80043d2 <HAL_GPIO_Init+0x2e2>
 800438e:	bf00      	nop
 8004390:	10320000 	.word	0x10320000
 8004394:	10310000 	.word	0x10310000
 8004398:	10220000 	.word	0x10220000
 800439c:	10210000 	.word	0x10210000
 80043a0:	10120000 	.word	0x10120000
 80043a4:	10110000 	.word	0x10110000
 80043a8:	40021000 	.word	0x40021000
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40010800 	.word	0x40010800
 80043b4:	40010c00 	.word	0x40010c00
 80043b8:	40011000 	.word	0x40011000
 80043bc:	40011400 	.word	0x40011400
 80043c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_GPIO_Init+0x304>)
 80043c6:	68da      	ldr	r2, [r3, #12]
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	43db      	mvns	r3, r3
 80043cc:	4909      	ldr	r1, [pc, #36]	; (80043f4 <HAL_GPIO_Init+0x304>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	3301      	adds	r3, #1
 80043d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	fa22 f303 	lsr.w	r3, r2, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f47f ae8e 	bne.w	8004104 <HAL_GPIO_Init+0x14>
  }
}
 80043e8:	bf00      	nop
 80043ea:	bf00      	nop
 80043ec:	372c      	adds	r7, #44	; 0x2c
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr
 80043f4:	40010400 	.word	0x40010400

080043f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
 8004404:	4613      	mov	r3, r2
 8004406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004408:	787b      	ldrb	r3, [r7, #1]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800440e:	887a      	ldrh	r2, [r7, #2]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004414:	e003      	b.n	800441e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004416:	887b      	ldrh	r3, [r7, #2]
 8004418:	041a      	lsls	r2, r3, #16
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	611a      	str	r2, [r3, #16]
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800443a:	887a      	ldrh	r2, [r7, #2]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4013      	ands	r3, r2
 8004440:	041a      	lsls	r2, r3, #16
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	43d9      	mvns	r1, r3
 8004446:	887b      	ldrh	r3, [r7, #2]
 8004448:	400b      	ands	r3, r1
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	611a      	str	r2, [r3, #16]
}
 8004450:	bf00      	nop
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr
	...

0800445c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e12b      	b.n	80046c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fe ff3e 	bl	8003304 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2224      	movs	r2, #36	; 0x24
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044c0:	f000 fffa 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 80044c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4a81      	ldr	r2, [pc, #516]	; (80046d0 <HAL_I2C_Init+0x274>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d807      	bhi.n	80044e0 <HAL_I2C_Init+0x84>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a80      	ldr	r2, [pc, #512]	; (80046d4 <HAL_I2C_Init+0x278>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	bf94      	ite	ls
 80044d8:	2301      	movls	r3, #1
 80044da:	2300      	movhi	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	e006      	b.n	80044ee <HAL_I2C_Init+0x92>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4a7d      	ldr	r2, [pc, #500]	; (80046d8 <HAL_I2C_Init+0x27c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	bf94      	ite	ls
 80044e8:	2301      	movls	r3, #1
 80044ea:	2300      	movhi	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e0e7      	b.n	80046c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a78      	ldr	r2, [pc, #480]	; (80046dc <HAL_I2C_Init+0x280>)
 80044fa:	fba2 2303 	umull	r2, r3, r2, r3
 80044fe:	0c9b      	lsrs	r3, r3, #18
 8004500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	430a      	orrs	r2, r1
 8004514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4a6a      	ldr	r2, [pc, #424]	; (80046d0 <HAL_I2C_Init+0x274>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d802      	bhi.n	8004530 <HAL_I2C_Init+0xd4>
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	3301      	adds	r3, #1
 800452e:	e009      	b.n	8004544 <HAL_I2C_Init+0xe8>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004536:	fb02 f303 	mul.w	r3, r2, r3
 800453a:	4a69      	ldr	r2, [pc, #420]	; (80046e0 <HAL_I2C_Init+0x284>)
 800453c:	fba2 2303 	umull	r2, r3, r2, r3
 8004540:	099b      	lsrs	r3, r3, #6
 8004542:	3301      	adds	r3, #1
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6812      	ldr	r2, [r2, #0]
 8004548:	430b      	orrs	r3, r1
 800454a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004556:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	495c      	ldr	r1, [pc, #368]	; (80046d0 <HAL_I2C_Init+0x274>)
 8004560:	428b      	cmp	r3, r1
 8004562:	d819      	bhi.n	8004598 <HAL_I2C_Init+0x13c>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	1e59      	subs	r1, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004572:	1c59      	adds	r1, r3, #1
 8004574:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004578:	400b      	ands	r3, r1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_I2C_Init+0x138>
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1e59      	subs	r1, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	fbb1 f3f3 	udiv	r3, r1, r3
 800458c:	3301      	adds	r3, #1
 800458e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004592:	e051      	b.n	8004638 <HAL_I2C_Init+0x1dc>
 8004594:	2304      	movs	r3, #4
 8004596:	e04f      	b.n	8004638 <HAL_I2C_Init+0x1dc>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d111      	bne.n	80045c4 <HAL_I2C_Init+0x168>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	1e58      	subs	r0, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6859      	ldr	r1, [r3, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	005b      	lsls	r3, r3, #1
 80045ac:	440b      	add	r3, r1
 80045ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80045b2:	3301      	adds	r3, #1
 80045b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	e012      	b.n	80045ea <HAL_I2C_Init+0x18e>
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	1e58      	subs	r0, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6859      	ldr	r1, [r3, #4]
 80045cc:	460b      	mov	r3, r1
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	0099      	lsls	r1, r3, #2
 80045d4:	440b      	add	r3, r1
 80045d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045da:	3301      	adds	r3, #1
 80045dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf0c      	ite	eq
 80045e4:	2301      	moveq	r3, #1
 80045e6:	2300      	movne	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_I2C_Init+0x196>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e022      	b.n	8004638 <HAL_I2C_Init+0x1dc>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10e      	bne.n	8004618 <HAL_I2C_Init+0x1bc>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1e58      	subs	r0, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6859      	ldr	r1, [r3, #4]
 8004602:	460b      	mov	r3, r1
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	440b      	add	r3, r1
 8004608:	fbb0 f3f3 	udiv	r3, r0, r3
 800460c:	3301      	adds	r3, #1
 800460e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004616:	e00f      	b.n	8004638 <HAL_I2C_Init+0x1dc>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	1e58      	subs	r0, r3, #1
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6859      	ldr	r1, [r3, #4]
 8004620:	460b      	mov	r3, r1
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	0099      	lsls	r1, r3, #2
 8004628:	440b      	add	r3, r1
 800462a:	fbb0 f3f3 	udiv	r3, r0, r3
 800462e:	3301      	adds	r3, #1
 8004630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	6809      	ldr	r1, [r1, #0]
 800463c:	4313      	orrs	r3, r2
 800463e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	69da      	ldr	r2, [r3, #28]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	431a      	orrs	r2, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	430a      	orrs	r2, r1
 800465a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004666:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6911      	ldr	r1, [r2, #16]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68d2      	ldr	r2, [r2, #12]
 8004672:	4311      	orrs	r1, r2
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	430b      	orrs	r3, r1
 800467a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	430a      	orrs	r2, r1
 8004696:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3710      	adds	r7, #16
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	000186a0 	.word	0x000186a0
 80046d4:	001e847f 	.word	0x001e847f
 80046d8:	003d08ff 	.word	0x003d08ff
 80046dc:	431bde83 	.word	0x431bde83
 80046e0:	10624dd3 	.word	0x10624dd3

080046e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b088      	sub	sp, #32
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	4608      	mov	r0, r1
 80046ee:	4611      	mov	r1, r2
 80046f0:	461a      	mov	r2, r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	817b      	strh	r3, [r7, #10]
 80046f6:	460b      	mov	r3, r1
 80046f8:	813b      	strh	r3, [r7, #8]
 80046fa:	4613      	mov	r3, r2
 80046fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046fe:	f7ff f9cd 	bl	8003a9c <HAL_GetTick>
 8004702:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b20      	cmp	r3, #32
 800470e:	f040 80d9 	bne.w	80048c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	2319      	movs	r3, #25
 8004718:	2201      	movs	r2, #1
 800471a:	496d      	ldr	r1, [pc, #436]	; (80048d0 <HAL_I2C_Mem_Write+0x1ec>)
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f971 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004728:	2302      	movs	r3, #2
 800472a:	e0cc      	b.n	80048c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_I2C_Mem_Write+0x56>
 8004736:	2302      	movs	r3, #2
 8004738:	e0c5      	b.n	80048c6 <HAL_I2C_Mem_Write+0x1e2>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b01      	cmp	r3, #1
 800474e:	d007      	beq.n	8004760 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800476e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2221      	movs	r2, #33	; 0x21
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2240      	movs	r2, #64	; 0x40
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6a3a      	ldr	r2, [r7, #32]
 800478a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004790:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4a4d      	ldr	r2, [pc, #308]	; (80048d4 <HAL_I2C_Mem_Write+0x1f0>)
 80047a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047a2:	88f8      	ldrh	r0, [r7, #6]
 80047a4:	893a      	ldrh	r2, [r7, #8]
 80047a6:	8979      	ldrh	r1, [r7, #10]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	4603      	mov	r3, r0
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f890 	bl	80048d8 <I2C_RequestMemoryWrite>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d052      	beq.n	8004864 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e081      	b.n	80048c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f9f2 	bl	8004bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00d      	beq.n	80047ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d107      	bne.n	80047ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e06b      	b.n	80048c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	781a      	ldrb	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004808:	3b01      	subs	r3, #1
 800480a:	b29a      	uxth	r2, r3
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004814:	b29b      	uxth	r3, r3
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b04      	cmp	r3, #4
 800482a:	d11b      	bne.n	8004864 <HAL_I2C_Mem_Write+0x180>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d017      	beq.n	8004864 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	781a      	ldrb	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484e:	3b01      	subs	r3, #1
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485a:	b29b      	uxth	r3, r3
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1aa      	bne.n	80047c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f9de 	bl	8004c32 <I2C_WaitOnBTFFlagUntilTimeout>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00d      	beq.n	8004898 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004880:	2b04      	cmp	r3, #4
 8004882:	d107      	bne.n	8004894 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004892:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e016      	b.n	80048c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	e000      	b.n	80048c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
  }
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	00100002 	.word	0x00100002
 80048d4:	ffff0000 	.word	0xffff0000

080048d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	4608      	mov	r0, r1
 80048e2:	4611      	mov	r1, r2
 80048e4:	461a      	mov	r2, r3
 80048e6:	4603      	mov	r3, r0
 80048e8:	817b      	strh	r3, [r7, #10]
 80048ea:	460b      	mov	r3, r1
 80048ec:	813b      	strh	r3, [r7, #8]
 80048ee:	4613      	mov	r3, r2
 80048f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004900:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	6a3b      	ldr	r3, [r7, #32]
 8004908:	2200      	movs	r2, #0
 800490a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 f878 	bl	8004a04 <I2C_WaitOnFlagUntilTimeout>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00d      	beq.n	8004936 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004924:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004928:	d103      	bne.n	8004932 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004930:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e05f      	b.n	80049f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004936:	897b      	ldrh	r3, [r7, #10]
 8004938:	b2db      	uxtb	r3, r3
 800493a:	461a      	mov	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004944:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	6a3a      	ldr	r2, [r7, #32]
 800494a:	492d      	ldr	r1, [pc, #180]	; (8004a00 <I2C_RequestMemoryWrite+0x128>)
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 f8b0 	bl	8004ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e04c      	b.n	80049f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	695b      	ldr	r3, [r3, #20]
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	617b      	str	r3, [r7, #20]
 8004970:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004974:	6a39      	ldr	r1, [r7, #32]
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f91a 	bl	8004bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00d      	beq.n	800499e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	2b04      	cmp	r3, #4
 8004988:	d107      	bne.n	800499a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004998:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e02b      	b.n	80049f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800499e:	88fb      	ldrh	r3, [r7, #6]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d105      	bne.n	80049b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049a4:	893b      	ldrh	r3, [r7, #8]
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	611a      	str	r2, [r3, #16]
 80049ae:	e021      	b.n	80049f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049b0:	893b      	ldrh	r3, [r7, #8]
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c0:	6a39      	ldr	r1, [r7, #32]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f8f4 	bl	8004bb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00d      	beq.n	80049ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d107      	bne.n	80049e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e005      	b.n	80049f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049ea:	893b      	ldrh	r3, [r7, #8]
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	00010002 	.word	0x00010002

08004a04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a14:	e025      	b.n	8004a62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1c:	d021      	beq.n	8004a62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a1e:	f7ff f83d 	bl	8003a9c <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d302      	bcc.n	8004a34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d116      	bne.n	8004a62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f043 0220 	orr.w	r2, r3, #32
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e023      	b.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	0c1b      	lsrs	r3, r3, #16
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d10d      	bne.n	8004a88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	43da      	mvns	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4013      	ands	r3, r2
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	bf0c      	ite	eq
 8004a7e:	2301      	moveq	r3, #1
 8004a80:	2300      	movne	r3, #0
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	461a      	mov	r2, r3
 8004a86:	e00c      	b.n	8004aa2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	43da      	mvns	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	4013      	ands	r3, r2
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bf0c      	ite	eq
 8004a9a:	2301      	moveq	r3, #1
 8004a9c:	2300      	movne	r3, #0
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d0b6      	beq.n	8004a16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ac0:	e051      	b.n	8004b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	695b      	ldr	r3, [r3, #20]
 8004ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ad0:	d123      	bne.n	8004b1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ae0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004aea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f043 0204 	orr.w	r2, r3, #4
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e046      	b.n	8004ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b20:	d021      	beq.n	8004b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b22:	f7fe ffbb 	bl	8003a9c <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d302      	bcc.n	8004b38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d116      	bne.n	8004b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2220      	movs	r2, #32
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f043 0220 	orr.w	r2, r3, #32
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e020      	b.n	8004ba8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	0c1b      	lsrs	r3, r3, #16
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d10c      	bne.n	8004b8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	43da      	mvns	r2, r3
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	bf14      	ite	ne
 8004b82:	2301      	movne	r3, #1
 8004b84:	2300      	moveq	r3, #0
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	e00b      	b.n	8004ba2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	43da      	mvns	r2, r3
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	4013      	ands	r3, r2
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	bf14      	ite	ne
 8004b9c:	2301      	movne	r3, #1
 8004b9e:	2300      	moveq	r3, #0
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d18d      	bne.n	8004ac2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bbc:	e02d      	b.n	8004c1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 f878 	bl	8004cb4 <I2C_IsAcknowledgeFailed>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e02d      	b.n	8004c2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd4:	d021      	beq.n	8004c1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd6:	f7fe ff61 	bl	8003a9c <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d302      	bcc.n	8004bec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d116      	bne.n	8004c1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	f043 0220 	orr.w	r2, r3, #32
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e007      	b.n	8004c2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c24:	2b80      	cmp	r3, #128	; 0x80
 8004c26:	d1ca      	bne.n	8004bbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b084      	sub	sp, #16
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c3e:	e02d      	b.n	8004c9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f000 f837 	bl	8004cb4 <I2C_IsAcknowledgeFailed>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	e02d      	b.n	8004cac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c56:	d021      	beq.n	8004c9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c58:	f7fe ff20 	bl	8003a9c <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d302      	bcc.n	8004c6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d116      	bne.n	8004c9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2220      	movs	r2, #32
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c88:	f043 0220 	orr.w	r2, r3, #32
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e007      	b.n	8004cac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d1ca      	bne.n	8004c40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004caa:	2300      	movs	r3, #0
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cca:	d11b      	bne.n	8004d04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f043 0204 	orr.w	r2, r3, #4
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e000      	b.n	8004d06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr

08004d10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e272      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 8087 	beq.w	8004e3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d30:	4b92      	ldr	r3, [pc, #584]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 030c 	and.w	r3, r3, #12
 8004d38:	2b04      	cmp	r3, #4
 8004d3a:	d00c      	beq.n	8004d56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004d3c:	4b8f      	ldr	r3, [pc, #572]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 030c 	and.w	r3, r3, #12
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d112      	bne.n	8004d6e <HAL_RCC_OscConfig+0x5e>
 8004d48:	4b8c      	ldr	r3, [pc, #560]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d54:	d10b      	bne.n	8004d6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d56:	4b89      	ldr	r3, [pc, #548]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d06c      	beq.n	8004e3c <HAL_RCC_OscConfig+0x12c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d168      	bne.n	8004e3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e24c      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d76:	d106      	bne.n	8004d86 <HAL_RCC_OscConfig+0x76>
 8004d78:	4b80      	ldr	r3, [pc, #512]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a7f      	ldr	r2, [pc, #508]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004d7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d82:	6013      	str	r3, [r2, #0]
 8004d84:	e02e      	b.n	8004de4 <HAL_RCC_OscConfig+0xd4>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x98>
 8004d8e:	4b7b      	ldr	r3, [pc, #492]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a7a      	ldr	r2, [pc, #488]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004d94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	4b78      	ldr	r3, [pc, #480]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a77      	ldr	r2, [pc, #476]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004da0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	e01d      	b.n	8004de4 <HAL_RCC_OscConfig+0xd4>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004db0:	d10c      	bne.n	8004dcc <HAL_RCC_OscConfig+0xbc>
 8004db2:	4b72      	ldr	r3, [pc, #456]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a71      	ldr	r2, [pc, #452]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	4b6f      	ldr	r3, [pc, #444]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a6e      	ldr	r2, [pc, #440]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004dc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc8:	6013      	str	r3, [r2, #0]
 8004dca:	e00b      	b.n	8004de4 <HAL_RCC_OscConfig+0xd4>
 8004dcc:	4b6b      	ldr	r3, [pc, #428]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a6a      	ldr	r2, [pc, #424]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004dd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd6:	6013      	str	r3, [r2, #0]
 8004dd8:	4b68      	ldr	r3, [pc, #416]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a67      	ldr	r2, [pc, #412]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004de2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d013      	beq.n	8004e14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dec:	f7fe fe56 	bl	8003a9c <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004df4:	f7fe fe52 	bl	8003a9c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b64      	cmp	r3, #100	; 0x64
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e200      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e06:	4b5d      	ldr	r3, [pc, #372]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0xe4>
 8004e12:	e014      	b.n	8004e3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e14:	f7fe fe42 	bl	8003a9c <HAL_GetTick>
 8004e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e1a:	e008      	b.n	8004e2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e1c:	f7fe fe3e 	bl	8003a9c <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	; 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e1ec      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e2e:	4b53      	ldr	r3, [pc, #332]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1f0      	bne.n	8004e1c <HAL_RCC_OscConfig+0x10c>
 8004e3a:	e000      	b.n	8004e3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d063      	beq.n	8004f12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004e4a:	4b4c      	ldr	r3, [pc, #304]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00b      	beq.n	8004e6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004e56:	4b49      	ldr	r3, [pc, #292]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	f003 030c 	and.w	r3, r3, #12
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d11c      	bne.n	8004e9c <HAL_RCC_OscConfig+0x18c>
 8004e62:	4b46      	ldr	r3, [pc, #280]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d116      	bne.n	8004e9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e6e:	4b43      	ldr	r3, [pc, #268]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d005      	beq.n	8004e86 <HAL_RCC_OscConfig+0x176>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d001      	beq.n	8004e86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e1c0      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e86:	4b3d      	ldr	r3, [pc, #244]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	4939      	ldr	r1, [pc, #228]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e9a:	e03a      	b.n	8004f12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d020      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ea4:	4b36      	ldr	r3, [pc, #216]	; (8004f80 <HAL_RCC_OscConfig+0x270>)
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eaa:	f7fe fdf7 	bl	8003a9c <HAL_GetTick>
 8004eae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eb2:	f7fe fdf3 	bl	8003a9c <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e1a1      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ec4:	4b2d      	ldr	r3, [pc, #180]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d0f0      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ed0:	4b2a      	ldr	r3, [pc, #168]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	4927      	ldr	r1, [pc, #156]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	600b      	str	r3, [r1, #0]
 8004ee4:	e015      	b.n	8004f12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ee6:	4b26      	ldr	r3, [pc, #152]	; (8004f80 <HAL_RCC_OscConfig+0x270>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eec:	f7fe fdd6 	bl	8003a9c <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef4:	f7fe fdd2 	bl	8003a9c <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e180      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f06:	4b1d      	ldr	r3, [pc, #116]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d1f0      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d03a      	beq.n	8004f94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d019      	beq.n	8004f5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f26:	4b17      	ldr	r3, [pc, #92]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f2c:	f7fe fdb6 	bl	8003a9c <HAL_GetTick>
 8004f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f32:	e008      	b.n	8004f46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f34:	f7fe fdb2 	bl	8003a9c <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d901      	bls.n	8004f46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e160      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f46:	4b0d      	ldr	r3, [pc, #52]	; (8004f7c <HAL_RCC_OscConfig+0x26c>)
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d0f0      	beq.n	8004f34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004f52:	2001      	movs	r0, #1
 8004f54:	f000 fad8 	bl	8005508 <RCC_Delay>
 8004f58:	e01c      	b.n	8004f94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <HAL_RCC_OscConfig+0x274>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f60:	f7fe fd9c 	bl	8003a9c <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f66:	e00f      	b.n	8004f88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f68:	f7fe fd98 	bl	8003a9c <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d908      	bls.n	8004f88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e146      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
 8004f7a:	bf00      	nop
 8004f7c:	40021000 	.word	0x40021000
 8004f80:	42420000 	.word	0x42420000
 8004f84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f88:	4b92      	ldr	r3, [pc, #584]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e9      	bne.n	8004f68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80a6 	beq.w	80050ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa6:	4b8b      	ldr	r3, [pc, #556]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10d      	bne.n	8004fce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb2:	4b88      	ldr	r3, [pc, #544]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	4a87      	ldr	r2, [pc, #540]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8004fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	61d3      	str	r3, [r2, #28]
 8004fbe:	4b85      	ldr	r3, [pc, #532]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fc6:	60bb      	str	r3, [r7, #8]
 8004fc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fce:	4b82      	ldr	r3, [pc, #520]	; (80051d8 <HAL_RCC_OscConfig+0x4c8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d118      	bne.n	800500c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fda:	4b7f      	ldr	r3, [pc, #508]	; (80051d8 <HAL_RCC_OscConfig+0x4c8>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a7e      	ldr	r2, [pc, #504]	; (80051d8 <HAL_RCC_OscConfig+0x4c8>)
 8004fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fe6:	f7fe fd59 	bl	8003a9c <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fec:	e008      	b.n	8005000 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fee:	f7fe fd55 	bl	8003a9c <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b64      	cmp	r3, #100	; 0x64
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e103      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005000:	4b75      	ldr	r3, [pc, #468]	; (80051d8 <HAL_RCC_OscConfig+0x4c8>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005008:	2b00      	cmp	r3, #0
 800500a:	d0f0      	beq.n	8004fee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	2b01      	cmp	r3, #1
 8005012:	d106      	bne.n	8005022 <HAL_RCC_OscConfig+0x312>
 8005014:	4b6f      	ldr	r3, [pc, #444]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	4a6e      	ldr	r2, [pc, #440]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800501a:	f043 0301 	orr.w	r3, r3, #1
 800501e:	6213      	str	r3, [r2, #32]
 8005020:	e02d      	b.n	800507e <HAL_RCC_OscConfig+0x36e>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10c      	bne.n	8005044 <HAL_RCC_OscConfig+0x334>
 800502a:	4b6a      	ldr	r3, [pc, #424]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	4a69      	ldr	r2, [pc, #420]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	6213      	str	r3, [r2, #32]
 8005036:	4b67      	ldr	r3, [pc, #412]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	4a66      	ldr	r2, [pc, #408]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800503c:	f023 0304 	bic.w	r3, r3, #4
 8005040:	6213      	str	r3, [r2, #32]
 8005042:	e01c      	b.n	800507e <HAL_RCC_OscConfig+0x36e>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	2b05      	cmp	r3, #5
 800504a:	d10c      	bne.n	8005066 <HAL_RCC_OscConfig+0x356>
 800504c:	4b61      	ldr	r3, [pc, #388]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800504e:	6a1b      	ldr	r3, [r3, #32]
 8005050:	4a60      	ldr	r2, [pc, #384]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005052:	f043 0304 	orr.w	r3, r3, #4
 8005056:	6213      	str	r3, [r2, #32]
 8005058:	4b5e      	ldr	r3, [pc, #376]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	4a5d      	ldr	r2, [pc, #372]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	6213      	str	r3, [r2, #32]
 8005064:	e00b      	b.n	800507e <HAL_RCC_OscConfig+0x36e>
 8005066:	4b5b      	ldr	r3, [pc, #364]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	4a5a      	ldr	r2, [pc, #360]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800506c:	f023 0301 	bic.w	r3, r3, #1
 8005070:	6213      	str	r3, [r2, #32]
 8005072:	4b58      	ldr	r3, [pc, #352]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	4a57      	ldr	r2, [pc, #348]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005078:	f023 0304 	bic.w	r3, r3, #4
 800507c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d015      	beq.n	80050b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005086:	f7fe fd09 	bl	8003a9c <HAL_GetTick>
 800508a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800508c:	e00a      	b.n	80050a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800508e:	f7fe fd05 	bl	8003a9c <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	f241 3288 	movw	r2, #5000	; 0x1388
 800509c:	4293      	cmp	r3, r2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e0b1      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050a4:	4b4b      	ldr	r3, [pc, #300]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0ee      	beq.n	800508e <HAL_RCC_OscConfig+0x37e>
 80050b0:	e014      	b.n	80050dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050b2:	f7fe fcf3 	bl	8003a9c <HAL_GetTick>
 80050b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050b8:	e00a      	b.n	80050d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050ba:	f7fe fcef 	bl	8003a9c <HAL_GetTick>
 80050be:	4602      	mov	r2, r0
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d901      	bls.n	80050d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e09b      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050d0:	4b40      	ldr	r3, [pc, #256]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 80050d2:	6a1b      	ldr	r3, [r3, #32]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1ee      	bne.n	80050ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d105      	bne.n	80050ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e2:	4b3c      	ldr	r3, [pc, #240]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	4a3b      	ldr	r2, [pc, #236]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 80050e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 8087 	beq.w	8005206 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050f8:	4b36      	ldr	r3, [pc, #216]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f003 030c 	and.w	r3, r3, #12
 8005100:	2b08      	cmp	r3, #8
 8005102:	d061      	beq.n	80051c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	2b02      	cmp	r3, #2
 800510a:	d146      	bne.n	800519a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800510c:	4b33      	ldr	r3, [pc, #204]	; (80051dc <HAL_RCC_OscConfig+0x4cc>)
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005112:	f7fe fcc3 	bl	8003a9c <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800511a:	f7fe fcbf 	bl	8003a9c <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e06d      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800512c:	4b29      	ldr	r3, [pc, #164]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f0      	bne.n	800511a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005140:	d108      	bne.n	8005154 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005142:	4b24      	ldr	r3, [pc, #144]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	4921      	ldr	r1, [pc, #132]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005150:	4313      	orrs	r3, r2
 8005152:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005154:	4b1f      	ldr	r3, [pc, #124]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a19      	ldr	r1, [r3, #32]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	430b      	orrs	r3, r1
 8005166:	491b      	ldr	r1, [pc, #108]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 8005168:	4313      	orrs	r3, r2
 800516a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800516c:	4b1b      	ldr	r3, [pc, #108]	; (80051dc <HAL_RCC_OscConfig+0x4cc>)
 800516e:	2201      	movs	r2, #1
 8005170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005172:	f7fe fc93 	bl	8003a9c <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800517a:	f7fe fc8f 	bl	8003a9c <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e03d      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800518c:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d0f0      	beq.n	800517a <HAL_RCC_OscConfig+0x46a>
 8005198:	e035      	b.n	8005206 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519a:	4b10      	ldr	r3, [pc, #64]	; (80051dc <HAL_RCC_OscConfig+0x4cc>)
 800519c:	2200      	movs	r2, #0
 800519e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a0:	f7fe fc7c 	bl	8003a9c <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051a8:	f7fe fc78 	bl	8003a9c <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b02      	cmp	r3, #2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e026      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051ba:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <HAL_RCC_OscConfig+0x4c4>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x498>
 80051c6:	e01e      	b.n	8005206 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d107      	bne.n	80051e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e019      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
 80051d4:	40021000 	.word	0x40021000
 80051d8:	40007000 	.word	0x40007000
 80051dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <HAL_RCC_OscConfig+0x500>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d106      	bne.n	8005202 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051fe:	429a      	cmp	r2, r3
 8005200:	d001      	beq.n	8005206 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	40021000 	.word	0x40021000

08005214 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	e0d0      	b.n	80053ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005228:	4b6a      	ldr	r3, [pc, #424]	; (80053d4 <HAL_RCC_ClockConfig+0x1c0>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	683a      	ldr	r2, [r7, #0]
 8005232:	429a      	cmp	r2, r3
 8005234:	d910      	bls.n	8005258 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005236:	4b67      	ldr	r3, [pc, #412]	; (80053d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f023 0207 	bic.w	r2, r3, #7
 800523e:	4965      	ldr	r1, [pc, #404]	; (80053d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	4313      	orrs	r3, r2
 8005244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005246:	4b63      	ldr	r3, [pc, #396]	; (80053d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0307 	and.w	r3, r3, #7
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	429a      	cmp	r2, r3
 8005252:	d001      	beq.n	8005258 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e0b8      	b.n	80053ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0302 	and.w	r3, r3, #2
 8005260:	2b00      	cmp	r3, #0
 8005262:	d020      	beq.n	80052a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d005      	beq.n	800527c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005270:	4b59      	ldr	r3, [pc, #356]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4a58      	ldr	r2, [pc, #352]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005276:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800527a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d005      	beq.n	8005294 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005288:	4b53      	ldr	r3, [pc, #332]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4a52      	ldr	r2, [pc, #328]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 800528e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005292:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005294:	4b50      	ldr	r3, [pc, #320]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	494d      	ldr	r1, [pc, #308]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d040      	beq.n	8005334 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d107      	bne.n	80052ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ba:	4b47      	ldr	r3, [pc, #284]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d115      	bne.n	80052f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e07f      	b.n	80053ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d107      	bne.n	80052e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d2:	4b41      	ldr	r3, [pc, #260]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e073      	b.n	80053ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e2:	4b3d      	ldr	r3, [pc, #244]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0302 	and.w	r3, r3, #2
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d101      	bne.n	80052f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e06b      	b.n	80053ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052f2:	4b39      	ldr	r3, [pc, #228]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	f023 0203 	bic.w	r2, r3, #3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	4936      	ldr	r1, [pc, #216]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005300:	4313      	orrs	r3, r2
 8005302:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005304:	f7fe fbca 	bl	8003a9c <HAL_GetTick>
 8005308:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800530a:	e00a      	b.n	8005322 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800530c:	f7fe fbc6 	bl	8003a9c <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f241 3288 	movw	r2, #5000	; 0x1388
 800531a:	4293      	cmp	r3, r2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e053      	b.n	80053ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005322:	4b2d      	ldr	r3, [pc, #180]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	f003 020c 	and.w	r2, r3, #12
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	429a      	cmp	r2, r3
 8005332:	d1eb      	bne.n	800530c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005334:	4b27      	ldr	r3, [pc, #156]	; (80053d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	683a      	ldr	r2, [r7, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d210      	bcs.n	8005364 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005342:	4b24      	ldr	r3, [pc, #144]	; (80053d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f023 0207 	bic.w	r2, r3, #7
 800534a:	4922      	ldr	r1, [pc, #136]	; (80053d4 <HAL_RCC_ClockConfig+0x1c0>)
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	4313      	orrs	r3, r2
 8005350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005352:	4b20      	ldr	r3, [pc, #128]	; (80053d4 <HAL_RCC_ClockConfig+0x1c0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0307 	and.w	r3, r3, #7
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	429a      	cmp	r2, r3
 800535e:	d001      	beq.n	8005364 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e032      	b.n	80053ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b00      	cmp	r3, #0
 800536e:	d008      	beq.n	8005382 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005370:	4b19      	ldr	r3, [pc, #100]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4916      	ldr	r1, [pc, #88]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 800537e:	4313      	orrs	r3, r2
 8005380:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b00      	cmp	r3, #0
 800538c:	d009      	beq.n	80053a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800538e:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	490e      	ldr	r1, [pc, #56]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053a2:	f000 f821 	bl	80053e8 <HAL_RCC_GetSysClockFreq>
 80053a6:	4602      	mov	r2, r0
 80053a8:	4b0b      	ldr	r3, [pc, #44]	; (80053d8 <HAL_RCC_ClockConfig+0x1c4>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	091b      	lsrs	r3, r3, #4
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	490a      	ldr	r1, [pc, #40]	; (80053dc <HAL_RCC_ClockConfig+0x1c8>)
 80053b4:	5ccb      	ldrb	r3, [r1, r3]
 80053b6:	fa22 f303 	lsr.w	r3, r2, r3
 80053ba:	4a09      	ldr	r2, [pc, #36]	; (80053e0 <HAL_RCC_ClockConfig+0x1cc>)
 80053bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80053be:	4b09      	ldr	r3, [pc, #36]	; (80053e4 <HAL_RCC_ClockConfig+0x1d0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fe fb28 	bl	8003a18 <HAL_InitTick>

  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	40022000 	.word	0x40022000
 80053d8:	40021000 	.word	0x40021000
 80053dc:	0800a23c 	.word	0x0800a23c
 80053e0:	2000000c 	.word	0x2000000c
 80053e4:	20000010 	.word	0x20000010

080053e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053e8:	b490      	push	{r4, r7}
 80053ea:	b08a      	sub	sp, #40	; 0x28
 80053ec:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80053ee:	4b29      	ldr	r3, [pc, #164]	; (8005494 <HAL_RCC_GetSysClockFreq+0xac>)
 80053f0:	1d3c      	adds	r4, r7, #4
 80053f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80053f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80053f8:	f240 2301 	movw	r3, #513	; 0x201
 80053fc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80053fe:	2300      	movs	r3, #0
 8005400:	61fb      	str	r3, [r7, #28]
 8005402:	2300      	movs	r3, #0
 8005404:	61bb      	str	r3, [r7, #24]
 8005406:	2300      	movs	r3, #0
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005412:	4b21      	ldr	r3, [pc, #132]	; (8005498 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f003 030c 	and.w	r3, r3, #12
 800541e:	2b04      	cmp	r3, #4
 8005420:	d002      	beq.n	8005428 <HAL_RCC_GetSysClockFreq+0x40>
 8005422:	2b08      	cmp	r3, #8
 8005424:	d003      	beq.n	800542e <HAL_RCC_GetSysClockFreq+0x46>
 8005426:	e02b      	b.n	8005480 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005428:	4b1c      	ldr	r3, [pc, #112]	; (800549c <HAL_RCC_GetSysClockFreq+0xb4>)
 800542a:	623b      	str	r3, [r7, #32]
      break;
 800542c:	e02b      	b.n	8005486 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	0c9b      	lsrs	r3, r3, #18
 8005432:	f003 030f 	and.w	r3, r3, #15
 8005436:	3328      	adds	r3, #40	; 0x28
 8005438:	443b      	add	r3, r7
 800543a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800543e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d012      	beq.n	8005470 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800544a:	4b13      	ldr	r3, [pc, #76]	; (8005498 <HAL_RCC_GetSysClockFreq+0xb0>)
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	0c5b      	lsrs	r3, r3, #17
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	3328      	adds	r3, #40	; 0x28
 8005456:	443b      	add	r3, r7
 8005458:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800545c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	4a0e      	ldr	r2, [pc, #56]	; (800549c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005462:	fb03 f202 	mul.w	r2, r3, r2
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	fbb2 f3f3 	udiv	r3, r2, r3
 800546c:	627b      	str	r3, [r7, #36]	; 0x24
 800546e:	e004      	b.n	800547a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	4a0b      	ldr	r2, [pc, #44]	; (80054a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005474:	fb02 f303 	mul.w	r3, r2, r3
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800547a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547c:	623b      	str	r3, [r7, #32]
      break;
 800547e:	e002      	b.n	8005486 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005480:	4b06      	ldr	r3, [pc, #24]	; (800549c <HAL_RCC_GetSysClockFreq+0xb4>)
 8005482:	623b      	str	r3, [r7, #32]
      break;
 8005484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005486:	6a3b      	ldr	r3, [r7, #32]
}
 8005488:	4618      	mov	r0, r3
 800548a:	3728      	adds	r7, #40	; 0x28
 800548c:	46bd      	mov	sp, r7
 800548e:	bc90      	pop	{r4, r7}
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	08009c28 	.word	0x08009c28
 8005498:	40021000 	.word	0x40021000
 800549c:	007a1200 	.word	0x007a1200
 80054a0:	003d0900 	.word	0x003d0900

080054a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80054a8:	4b02      	ldr	r3, [pc, #8]	; (80054b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80054aa:	681b      	ldr	r3, [r3, #0]
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bc80      	pop	{r7}
 80054b2:	4770      	bx	lr
 80054b4:	2000000c 	.word	0x2000000c

080054b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054bc:	f7ff fff2 	bl	80054a4 <HAL_RCC_GetHCLKFreq>
 80054c0:	4602      	mov	r2, r0
 80054c2:	4b05      	ldr	r3, [pc, #20]	; (80054d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	0a1b      	lsrs	r3, r3, #8
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	4903      	ldr	r1, [pc, #12]	; (80054dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ce:	5ccb      	ldrb	r3, [r1, r3]
 80054d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	40021000 	.word	0x40021000
 80054dc:	0800a24c 	.word	0x0800a24c

080054e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054e4:	f7ff ffde 	bl	80054a4 <HAL_RCC_GetHCLKFreq>
 80054e8:	4602      	mov	r2, r0
 80054ea:	4b05      	ldr	r3, [pc, #20]	; (8005500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	0adb      	lsrs	r3, r3, #11
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	4903      	ldr	r1, [pc, #12]	; (8005504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054f6:	5ccb      	ldrb	r3, [r1, r3]
 80054f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	40021000 	.word	0x40021000
 8005504:	0800a24c 	.word	0x0800a24c

08005508 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005510:	4b0a      	ldr	r3, [pc, #40]	; (800553c <RCC_Delay+0x34>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a0a      	ldr	r2, [pc, #40]	; (8005540 <RCC_Delay+0x38>)
 8005516:	fba2 2303 	umull	r2, r3, r2, r3
 800551a:	0a5b      	lsrs	r3, r3, #9
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	fb02 f303 	mul.w	r3, r2, r3
 8005522:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005524:	bf00      	nop
  }
  while (Delay --);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	1e5a      	subs	r2, r3, #1
 800552a:	60fa      	str	r2, [r7, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f9      	bne.n	8005524 <RCC_Delay+0x1c>
}
 8005530:	bf00      	nop
 8005532:	bf00      	nop
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr
 800553c:	2000000c 	.word	0x2000000c
 8005540:	10624dd3 	.word	0x10624dd3

08005544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e041      	b.n	80055da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b00      	cmp	r3, #0
 8005560:	d106      	bne.n	8005570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fd ff1a 	bl	80033a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3304      	adds	r3, #4
 8005580:	4619      	mov	r1, r3
 8005582:	4610      	mov	r0, r2
 8005584:	f000 fd62 	bl	800604c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3708      	adds	r7, #8
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d001      	beq.n	80055fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e03a      	b.n	8005672 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 0201 	orr.w	r2, r2, #1
 8005612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a18      	ldr	r2, [pc, #96]	; (800567c <HAL_TIM_Base_Start_IT+0x98>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d00e      	beq.n	800563c <HAL_TIM_Base_Start_IT+0x58>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005626:	d009      	beq.n	800563c <HAL_TIM_Base_Start_IT+0x58>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a14      	ldr	r2, [pc, #80]	; (8005680 <HAL_TIM_Base_Start_IT+0x9c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_TIM_Base_Start_IT+0x58>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a13      	ldr	r2, [pc, #76]	; (8005684 <HAL_TIM_Base_Start_IT+0xa0>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d111      	bne.n	8005660 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 0307 	and.w	r3, r3, #7
 8005646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b06      	cmp	r3, #6
 800564c:	d010      	beq.n	8005670 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f042 0201 	orr.w	r2, r2, #1
 800565c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800565e:	e007      	b.n	8005670 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0201 	orr.w	r2, r2, #1
 800566e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr
 800567c:	40012c00 	.word	0x40012c00
 8005680:	40000400 	.word	0x40000400
 8005684:	40000800 	.word	0x40000800

08005688 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e041      	b.n	800571e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d106      	bne.n	80056b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f839 	bl	8005726 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2202      	movs	r2, #2
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3304      	adds	r3, #4
 80056c4:	4619      	mov	r1, r3
 80056c6:	4610      	mov	r0, r2
 80056c8:	f000 fcc0 	bl	800604c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	bc80      	pop	{r7}
 8005736:	4770      	bx	lr

08005738 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d109      	bne.n	800575c <HAL_TIM_PWM_Start+0x24>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b01      	cmp	r3, #1
 8005752:	bf14      	ite	ne
 8005754:	2301      	movne	r3, #1
 8005756:	2300      	moveq	r3, #0
 8005758:	b2db      	uxtb	r3, r3
 800575a:	e022      	b.n	80057a2 <HAL_TIM_PWM_Start+0x6a>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	2b04      	cmp	r3, #4
 8005760:	d109      	bne.n	8005776 <HAL_TIM_PWM_Start+0x3e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b01      	cmp	r3, #1
 800576c:	bf14      	ite	ne
 800576e:	2301      	movne	r3, #1
 8005770:	2300      	moveq	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	e015      	b.n	80057a2 <HAL_TIM_PWM_Start+0x6a>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b08      	cmp	r3, #8
 800577a:	d109      	bne.n	8005790 <HAL_TIM_PWM_Start+0x58>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b01      	cmp	r3, #1
 8005786:	bf14      	ite	ne
 8005788:	2301      	movne	r3, #1
 800578a:	2300      	moveq	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	e008      	b.n	80057a2 <HAL_TIM_PWM_Start+0x6a>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b01      	cmp	r3, #1
 800579a:	bf14      	ite	ne
 800579c:	2301      	movne	r3, #1
 800579e:	2300      	moveq	r3, #0
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d001      	beq.n	80057aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e05e      	b.n	8005868 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <HAL_TIM_PWM_Start+0x82>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b8:	e013      	b.n	80057e2 <HAL_TIM_PWM_Start+0xaa>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b04      	cmp	r3, #4
 80057be:	d104      	bne.n	80057ca <HAL_TIM_PWM_Start+0x92>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c8:	e00b      	b.n	80057e2 <HAL_TIM_PWM_Start+0xaa>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	2b08      	cmp	r3, #8
 80057ce:	d104      	bne.n	80057da <HAL_TIM_PWM_Start+0xa2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057d8:	e003      	b.n	80057e2 <HAL_TIM_PWM_Start+0xaa>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2202      	movs	r2, #2
 80057de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2201      	movs	r2, #1
 80057e8:	6839      	ldr	r1, [r7, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 feae 	bl	800654c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1e      	ldr	r2, [pc, #120]	; (8005870 <HAL_TIM_PWM_Start+0x138>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d107      	bne.n	800580a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005808:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a18      	ldr	r2, [pc, #96]	; (8005870 <HAL_TIM_PWM_Start+0x138>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00e      	beq.n	8005832 <HAL_TIM_PWM_Start+0xfa>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800581c:	d009      	beq.n	8005832 <HAL_TIM_PWM_Start+0xfa>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a14      	ldr	r2, [pc, #80]	; (8005874 <HAL_TIM_PWM_Start+0x13c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d004      	beq.n	8005832 <HAL_TIM_PWM_Start+0xfa>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a12      	ldr	r2, [pc, #72]	; (8005878 <HAL_TIM_PWM_Start+0x140>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d111      	bne.n	8005856 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b06      	cmp	r3, #6
 8005842:	d010      	beq.n	8005866 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f042 0201 	orr.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005854:	e007      	b.n	8005866 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 0201 	orr.w	r2, r2, #1
 8005864:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40012c00 	.word	0x40012c00
 8005874:	40000400 	.word	0x40000400
 8005878:	40000800 	.word	0x40000800

0800587c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b086      	sub	sp, #24
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e093      	b.n	80059b8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d106      	bne.n	80058aa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f7fd fdb7 	bl	8003418 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058c0:	f023 0307 	bic.w	r3, r3, #7
 80058c4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	3304      	adds	r3, #4
 80058ce:	4619      	mov	r1, r3
 80058d0:	4610      	mov	r0, r2
 80058d2:	f000 fbbb 	bl	800604c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fe:	f023 0303 	bic.w	r3, r3, #3
 8005902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	4313      	orrs	r3, r2
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	4313      	orrs	r3, r2
 8005914:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800591c:	f023 030c 	bic.w	r3, r3, #12
 8005920:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800592c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	021b      	lsls	r3, r3, #8
 8005938:	4313      	orrs	r3, r2
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	011a      	lsls	r2, r3, #4
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	031b      	lsls	r3, r3, #12
 800594c:	4313      	orrs	r3, r2
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800595a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	011b      	lsls	r3, r3, #4
 8005966:	4313      	orrs	r3, r2
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2201      	movs	r2, #1
 80059a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d110      	bne.n	8005a12 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d102      	bne.n	80059fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80059f6:	7b7b      	ldrb	r3, [r7, #13]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d001      	beq.n	8005a00 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e069      	b.n	8005ad4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a10:	e031      	b.n	8005a76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	d110      	bne.n	8005a3a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a18:	7bbb      	ldrb	r3, [r7, #14]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d102      	bne.n	8005a24 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a1e:	7b3b      	ldrb	r3, [r7, #12]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	d001      	beq.n	8005a28 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e055      	b.n	8005ad4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a38:	e01d      	b.n	8005a76 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a3a:	7bfb      	ldrb	r3, [r7, #15]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d108      	bne.n	8005a52 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a40:	7bbb      	ldrb	r3, [r7, #14]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d105      	bne.n	8005a52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a46:	7b7b      	ldrb	r3, [r7, #13]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d102      	bne.n	8005a52 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a4c:	7b3b      	ldrb	r3, [r7, #12]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d001      	beq.n	8005a56 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e03e      	b.n	8005ad4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2202      	movs	r2, #2
 8005a62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2202      	movs	r2, #2
 8005a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2202      	movs	r2, #2
 8005a72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d003      	beq.n	8005a84 <HAL_TIM_Encoder_Start+0xc4>
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d008      	beq.n	8005a94 <HAL_TIM_Encoder_Start+0xd4>
 8005a82:	e00f      	b.n	8005aa4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f000 fd5d 	bl	800654c <TIM_CCxChannelCmd>
      break;
 8005a92:	e016      	b.n	8005ac2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	2104      	movs	r1, #4
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fd55 	bl	800654c <TIM_CCxChannelCmd>
      break;
 8005aa2:	e00e      	b.n	8005ac2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	2100      	movs	r1, #0
 8005aac:	4618      	mov	r0, r3
 8005aae:	f000 fd4d 	bl	800654c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	2104      	movs	r1, #4
 8005aba:	4618      	mov	r0, r3
 8005abc:	f000 fd46 	bl	800654c <TIM_CCxChannelCmd>
      break;
 8005ac0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0201 	orr.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d122      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d11b      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0202 	mvn.w	r2, #2
 8005b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699b      	ldr	r3, [r3, #24]
 8005b16:	f003 0303 	and.w	r3, r3, #3
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa78 	bl	8006014 <HAL_TIM_IC_CaptureCallback>
 8005b24:	e005      	b.n	8005b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fa6b 	bl	8006002 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fa7a 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	d122      	bne.n	8005b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0304 	and.w	r3, r3, #4
 8005b50:	2b04      	cmp	r3, #4
 8005b52:	d11b      	bne.n	8005b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0204 	mvn.w	r2, #4
 8005b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2202      	movs	r2, #2
 8005b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d003      	beq.n	8005b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 fa4e 	bl	8006014 <HAL_TIM_IC_CaptureCallback>
 8005b78:	e005      	b.n	8005b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fa41 	bl	8006002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fa50 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b08      	cmp	r3, #8
 8005b98:	d122      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d11b      	bne.n	8005be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f06f 0208 	mvn.w	r2, #8
 8005bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2204      	movs	r2, #4
 8005bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	69db      	ldr	r3, [r3, #28]
 8005bbe:	f003 0303 	and.w	r3, r3, #3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fa24 	bl	8006014 <HAL_TIM_IC_CaptureCallback>
 8005bcc:	e005      	b.n	8005bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa17 	bl	8006002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 fa26 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b10      	cmp	r3, #16
 8005bec:	d122      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f003 0310 	and.w	r3, r3, #16
 8005bf8:	2b10      	cmp	r3, #16
 8005bfa:	d11b      	bne.n	8005c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f06f 0210 	mvn.w	r2, #16
 8005c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2208      	movs	r2, #8
 8005c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	69db      	ldr	r3, [r3, #28]
 8005c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 f9fa 	bl	8006014 <HAL_TIM_IC_CaptureCallback>
 8005c20:	e005      	b.n	8005c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f9ed 	bl	8006002 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f9fc 	bl	8006026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d10e      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d107      	bne.n	8005c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f06f 0201 	mvn.w	r2, #1
 8005c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f9c8 	bl	8005ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c6a:	2b80      	cmp	r3, #128	; 0x80
 8005c6c:	d10e      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c78:	2b80      	cmp	r3, #128	; 0x80
 8005c7a:	d107      	bne.n	8005c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 fceb 	bl	8006662 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c96:	2b40      	cmp	r3, #64	; 0x40
 8005c98:	d10e      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca4:	2b40      	cmp	r3, #64	; 0x40
 8005ca6:	d107      	bne.n	8005cb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f9c0 	bl	8006038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	691b      	ldr	r3, [r3, #16]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d10e      	bne.n	8005ce4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f003 0320 	and.w	r3, r3, #32
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d107      	bne.n	8005ce4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f06f 0220 	mvn.w	r2, #32
 8005cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fcb6 	bl	8006650 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ce4:	bf00      	nop
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e0ac      	b.n	8005e60 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b0c      	cmp	r3, #12
 8005d12:	f200 809f 	bhi.w	8005e54 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005d16:	a201      	add	r2, pc, #4	; (adr r2, 8005d1c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1c:	08005d51 	.word	0x08005d51
 8005d20:	08005e55 	.word	0x08005e55
 8005d24:	08005e55 	.word	0x08005e55
 8005d28:	08005e55 	.word	0x08005e55
 8005d2c:	08005d91 	.word	0x08005d91
 8005d30:	08005e55 	.word	0x08005e55
 8005d34:	08005e55 	.word	0x08005e55
 8005d38:	08005e55 	.word	0x08005e55
 8005d3c:	08005dd3 	.word	0x08005dd3
 8005d40:	08005e55 	.word	0x08005e55
 8005d44:	08005e55 	.word	0x08005e55
 8005d48:	08005e55 	.word	0x08005e55
 8005d4c:	08005e13 	.word	0x08005e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 f9da 	bl	8006110 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0208 	orr.w	r2, r2, #8
 8005d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0204 	bic.w	r2, r2, #4
 8005d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6999      	ldr	r1, [r3, #24]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	619a      	str	r2, [r3, #24]
      break;
 8005d8e:	e062      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fa20 	bl	80061dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6999      	ldr	r1, [r3, #24]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	021a      	lsls	r2, r3, #8
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	619a      	str	r2, [r3, #24]
      break;
 8005dd0:	e041      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fa69 	bl	80062b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0208 	orr.w	r2, r2, #8
 8005dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0204 	bic.w	r2, r2, #4
 8005dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69d9      	ldr	r1, [r3, #28]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	61da      	str	r2, [r3, #28]
      break;
 8005e10:	e021      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fab3 	bl	8006384 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69da      	ldr	r2, [r3, #28]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69d9      	ldr	r1, [r3, #28]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	021a      	lsls	r2, r3, #8
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	61da      	str	r2, [r3, #28]
      break;
 8005e52:	e000      	b.n	8005e56 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005e54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}

08005e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_TIM_ConfigClockSource+0x18>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e0b3      	b.n	8005fe8 <HAL_TIM_ConfigClockSource+0x180>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2202      	movs	r2, #2
 8005e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ea6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb8:	d03e      	beq.n	8005f38 <HAL_TIM_ConfigClockSource+0xd0>
 8005eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ebe:	f200 8087 	bhi.w	8005fd0 <HAL_TIM_ConfigClockSource+0x168>
 8005ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec6:	f000 8085 	beq.w	8005fd4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ece:	d87f      	bhi.n	8005fd0 <HAL_TIM_ConfigClockSource+0x168>
 8005ed0:	2b70      	cmp	r3, #112	; 0x70
 8005ed2:	d01a      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0xa2>
 8005ed4:	2b70      	cmp	r3, #112	; 0x70
 8005ed6:	d87b      	bhi.n	8005fd0 <HAL_TIM_ConfigClockSource+0x168>
 8005ed8:	2b60      	cmp	r3, #96	; 0x60
 8005eda:	d050      	beq.n	8005f7e <HAL_TIM_ConfigClockSource+0x116>
 8005edc:	2b60      	cmp	r3, #96	; 0x60
 8005ede:	d877      	bhi.n	8005fd0 <HAL_TIM_ConfigClockSource+0x168>
 8005ee0:	2b50      	cmp	r3, #80	; 0x50
 8005ee2:	d03c      	beq.n	8005f5e <HAL_TIM_ConfigClockSource+0xf6>
 8005ee4:	2b50      	cmp	r3, #80	; 0x50
 8005ee6:	d873      	bhi.n	8005fd0 <HAL_TIM_ConfigClockSource+0x168>
 8005ee8:	2b40      	cmp	r3, #64	; 0x40
 8005eea:	d058      	beq.n	8005f9e <HAL_TIM_ConfigClockSource+0x136>
 8005eec:	2b40      	cmp	r3, #64	; 0x40
 8005eee:	d86f      	bhi.n	8005fd0 <HAL_TIM_ConfigClockSource+0x168>
 8005ef0:	2b30      	cmp	r3, #48	; 0x30
 8005ef2:	d064      	beq.n	8005fbe <HAL_TIM_ConfigClockSource+0x156>
 8005ef4:	2b30      	cmp	r3, #48	; 0x30
 8005ef6:	d86b      	bhi.n	8005fd0 <HAL_TIM_ConfigClockSource+0x168>
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d060      	beq.n	8005fbe <HAL_TIM_ConfigClockSource+0x156>
 8005efc:	2b20      	cmp	r3, #32
 8005efe:	d867      	bhi.n	8005fd0 <HAL_TIM_ConfigClockSource+0x168>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d05c      	beq.n	8005fbe <HAL_TIM_ConfigClockSource+0x156>
 8005f04:	2b10      	cmp	r3, #16
 8005f06:	d05a      	beq.n	8005fbe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005f08:	e062      	b.n	8005fd0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	6899      	ldr	r1, [r3, #8]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f000 faf8 	bl	800650e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	609a      	str	r2, [r3, #8]
      break;
 8005f36:	e04e      	b.n	8005fd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6818      	ldr	r0, [r3, #0]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	6899      	ldr	r1, [r3, #8]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685a      	ldr	r2, [r3, #4]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f000 fae1 	bl	800650e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f5a:	609a      	str	r2, [r3, #8]
      break;
 8005f5c:	e03b      	b.n	8005fd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6818      	ldr	r0, [r3, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	6859      	ldr	r1, [r3, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f000 fa58 	bl	8006420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2150      	movs	r1, #80	; 0x50
 8005f76:	4618      	mov	r0, r3
 8005f78:	f000 faaf 	bl	80064da <TIM_ITRx_SetConfig>
      break;
 8005f7c:	e02b      	b.n	8005fd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	6859      	ldr	r1, [r3, #4]
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f000 fa76 	bl	800647c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2160      	movs	r1, #96	; 0x60
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fa9f 	bl	80064da <TIM_ITRx_SetConfig>
      break;
 8005f9c:	e01b      	b.n	8005fd6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	6859      	ldr	r1, [r3, #4]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	461a      	mov	r2, r3
 8005fac:	f000 fa38 	bl	8006420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2140      	movs	r1, #64	; 0x40
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 fa8f 	bl	80064da <TIM_ITRx_SetConfig>
      break;
 8005fbc:	e00b      	b.n	8005fd6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4610      	mov	r0, r2
 8005fca:	f000 fa86 	bl	80064da <TIM_ITRx_SetConfig>
        break;
 8005fce:	e002      	b.n	8005fd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005fd0:	bf00      	nop
 8005fd2:	e000      	b.n	8005fd6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005fd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bc80      	pop	{r7}
 8006000:	4770      	bx	lr

08006002 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr

08006014 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	bc80      	pop	{r7}
 8006024:	4770      	bx	lr

08006026 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006026:	b480      	push	{r7}
 8006028:	b083      	sub	sp, #12
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	bc80      	pop	{r7}
 8006036:	4770      	bx	lr

08006038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	bc80      	pop	{r7}
 8006048:	4770      	bx	lr
	...

0800604c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a29      	ldr	r2, [pc, #164]	; (8006104 <TIM_Base_SetConfig+0xb8>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00b      	beq.n	800607c <TIM_Base_SetConfig+0x30>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606a:	d007      	beq.n	800607c <TIM_Base_SetConfig+0x30>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a26      	ldr	r2, [pc, #152]	; (8006108 <TIM_Base_SetConfig+0xbc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d003      	beq.n	800607c <TIM_Base_SetConfig+0x30>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a25      	ldr	r2, [pc, #148]	; (800610c <TIM_Base_SetConfig+0xc0>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d108      	bne.n	800608e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	4313      	orrs	r3, r2
 800608c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	4a1c      	ldr	r2, [pc, #112]	; (8006104 <TIM_Base_SetConfig+0xb8>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00b      	beq.n	80060ae <TIM_Base_SetConfig+0x62>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609c:	d007      	beq.n	80060ae <TIM_Base_SetConfig+0x62>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a19      	ldr	r2, [pc, #100]	; (8006108 <TIM_Base_SetConfig+0xbc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d003      	beq.n	80060ae <TIM_Base_SetConfig+0x62>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a18      	ldr	r2, [pc, #96]	; (800610c <TIM_Base_SetConfig+0xc0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d108      	bne.n	80060c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a07      	ldr	r2, [pc, #28]	; (8006104 <TIM_Base_SetConfig+0xb8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d103      	bne.n	80060f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	691a      	ldr	r2, [r3, #16]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2201      	movs	r2, #1
 80060f8:	615a      	str	r2, [r3, #20]
}
 80060fa:	bf00      	nop
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr
 8006104:	40012c00 	.word	0x40012c00
 8006108:	40000400 	.word	0x40000400
 800610c:	40000800 	.word	0x40000800

08006110 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	f023 0201 	bic.w	r2, r3, #1
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800613e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0303 	bic.w	r3, r3, #3
 8006146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f023 0302 	bic.w	r3, r3, #2
 8006158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4313      	orrs	r3, r2
 8006162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a1c      	ldr	r2, [pc, #112]	; (80061d8 <TIM_OC1_SetConfig+0xc8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d10c      	bne.n	8006186 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0308 	bic.w	r3, r3, #8
 8006172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f023 0304 	bic.w	r3, r3, #4
 8006184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a13      	ldr	r2, [pc, #76]	; (80061d8 <TIM_OC1_SetConfig+0xc8>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d111      	bne.n	80061b2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800619c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	621a      	str	r2, [r3, #32]
}
 80061cc:	bf00      	nop
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bc80      	pop	{r7}
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	40012c00 	.word	0x40012c00

080061dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061dc:	b480      	push	{r7}
 80061de:	b087      	sub	sp, #28
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	f023 0210 	bic.w	r2, r3, #16
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	699b      	ldr	r3, [r3, #24]
 8006202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4313      	orrs	r3, r2
 800621e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	f023 0320 	bic.w	r3, r3, #32
 8006226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a1d      	ldr	r2, [pc, #116]	; (80062ac <TIM_OC2_SetConfig+0xd0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d10d      	bne.n	8006258 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	011b      	lsls	r3, r3, #4
 800624a:	697a      	ldr	r2, [r7, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006256:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a14      	ldr	r2, [pc, #80]	; (80062ac <TIM_OC2_SetConfig+0xd0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d113      	bne.n	8006288 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006266:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800626e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	695b      	ldr	r3, [r3, #20]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	693a      	ldr	r2, [r7, #16]
 8006278:	4313      	orrs	r3, r2
 800627a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	621a      	str	r2, [r3, #32]
}
 80062a2:	bf00      	nop
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bc80      	pop	{r7}
 80062aa:	4770      	bx	lr
 80062ac:	40012c00 	.word	0x40012c00

080062b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	4313      	orrs	r3, r2
 8006304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a1d      	ldr	r2, [pc, #116]	; (8006380 <TIM_OC3_SetConfig+0xd0>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d10d      	bne.n	800632a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006314:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a14      	ldr	r2, [pc, #80]	; (8006380 <TIM_OC3_SetConfig+0xd0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d113      	bne.n	800635a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006338:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006340:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	011b      	lsls	r3, r3, #4
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68fa      	ldr	r2, [r7, #12]
 8006364:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	621a      	str	r2, [r3, #32]
}
 8006374:	bf00      	nop
 8006376:	371c      	adds	r7, #28
 8006378:	46bd      	mov	sp, r7
 800637a:	bc80      	pop	{r7}
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40012c00 	.word	0x40012c00

08006384 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	69db      	ldr	r3, [r3, #28]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	021b      	lsls	r3, r3, #8
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	4313      	orrs	r3, r2
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	031b      	lsls	r3, r3, #12
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	4313      	orrs	r3, r2
 80063da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a0f      	ldr	r2, [pc, #60]	; (800641c <TIM_OC4_SetConfig+0x98>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d109      	bne.n	80063f8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	019b      	lsls	r3, r3, #6
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	68fa      	ldr	r2, [r7, #12]
 8006402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	bc80      	pop	{r7}
 800641a:	4770      	bx	lr
 800641c:	40012c00 	.word	0x40012c00

08006420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a1b      	ldr	r3, [r3, #32]
 8006430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	f023 0201 	bic.w	r2, r3, #1
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	699b      	ldr	r3, [r3, #24]
 8006442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800644a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	011b      	lsls	r3, r3, #4
 8006450:	693a      	ldr	r2, [r7, #16]
 8006452:	4313      	orrs	r3, r2
 8006454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	f023 030a 	bic.w	r3, r3, #10
 800645c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	4313      	orrs	r3, r2
 8006464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	621a      	str	r2, [r3, #32]
}
 8006472:	bf00      	nop
 8006474:	371c      	adds	r7, #28
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr

0800647c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800647c:	b480      	push	{r7}
 800647e:	b087      	sub	sp, #28
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	f023 0210 	bic.w	r2, r3, #16
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	699b      	ldr	r3, [r3, #24]
 8006498:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	031b      	lsls	r3, r3, #12
 80064ac:	697a      	ldr	r2, [r7, #20]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	011b      	lsls	r3, r3, #4
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	621a      	str	r2, [r3, #32]
}
 80064d0:	bf00      	nop
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bc80      	pop	{r7}
 80064d8:	4770      	bx	lr

080064da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064da:	b480      	push	{r7}
 80064dc:	b085      	sub	sp, #20
 80064de:	af00      	add	r7, sp, #0
 80064e0:	6078      	str	r0, [r7, #4]
 80064e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	f043 0307 	orr.w	r3, r3, #7
 80064fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	609a      	str	r2, [r3, #8]
}
 8006504:	bf00      	nop
 8006506:	3714      	adds	r7, #20
 8006508:	46bd      	mov	sp, r7
 800650a:	bc80      	pop	{r7}
 800650c:	4770      	bx	lr

0800650e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800650e:	b480      	push	{r7}
 8006510:	b087      	sub	sp, #28
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	607a      	str	r2, [r7, #4]
 800651a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006528:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	021a      	lsls	r2, r3, #8
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	431a      	orrs	r2, r3
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	4313      	orrs	r3, r2
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	697a      	ldr	r2, [r7, #20]
 8006540:	609a      	str	r2, [r3, #8]
}
 8006542:	bf00      	nop
 8006544:	371c      	adds	r7, #28
 8006546:	46bd      	mov	sp, r7
 8006548:	bc80      	pop	{r7}
 800654a:	4770      	bx	lr

0800654c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f003 031f 	and.w	r3, r3, #31
 800655e:	2201      	movs	r2, #1
 8006560:	fa02 f303 	lsl.w	r3, r2, r3
 8006564:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a1a      	ldr	r2, [r3, #32]
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	43db      	mvns	r3, r3
 800656e:	401a      	ands	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a1a      	ldr	r2, [r3, #32]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 031f 	and.w	r3, r3, #31
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	fa01 f303 	lsl.w	r3, r1, r3
 8006584:	431a      	orrs	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	621a      	str	r2, [r3, #32]
}
 800658a:	bf00      	nop
 800658c:	371c      	adds	r7, #28
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr

08006594 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d101      	bne.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065a8:	2302      	movs	r3, #2
 80065aa:	e046      	b.n	800663a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4313      	orrs	r3, r2
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a16      	ldr	r2, [pc, #88]	; (8006644 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d00e      	beq.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065f8:	d009      	beq.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a12      	ldr	r2, [pc, #72]	; (8006648 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d004      	beq.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a10      	ldr	r2, [pc, #64]	; (800664c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d10c      	bne.n	8006628 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006614:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	4313      	orrs	r3, r2
 800661e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	bc80      	pop	{r7}
 8006642:	4770      	bx	lr
 8006644:	40012c00 	.word	0x40012c00
 8006648:	40000400 	.word	0x40000400
 800664c:	40000800 	.word	0x40000800

08006650 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr

08006662 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	bc80      	pop	{r7}
 8006672:	4770      	bx	lr

08006674 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e03f      	b.n	8006706 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d106      	bne.n	80066a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7fc ff72 	bl	8003584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2224      	movs	r2, #36	; 0x24
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68da      	ldr	r2, [r3, #12]
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f000 fab1 	bl	8006c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	691a      	ldr	r2, [r3, #16]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695a      	ldr	r2, [r3, #20]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2220      	movs	r2, #32
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3708      	adds	r7, #8
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b08a      	sub	sp, #40	; 0x28
 8006712:	af02      	add	r7, sp, #8
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	603b      	str	r3, [r7, #0]
 800671a:	4613      	mov	r3, r2
 800671c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006728:	b2db      	uxtb	r3, r3
 800672a:	2b20      	cmp	r3, #32
 800672c:	d17c      	bne.n	8006828 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d002      	beq.n	800673a <HAL_UART_Transmit+0x2c>
 8006734:	88fb      	ldrh	r3, [r7, #6]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e075      	b.n	800682a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006744:	2b01      	cmp	r3, #1
 8006746:	d101      	bne.n	800674c <HAL_UART_Transmit+0x3e>
 8006748:	2302      	movs	r3, #2
 800674a:	e06e      	b.n	800682a <HAL_UART_Transmit+0x11c>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2221      	movs	r2, #33	; 0x21
 800675e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006762:	f7fd f99b 	bl	8003a9c <HAL_GetTick>
 8006766:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	88fa      	ldrh	r2, [r7, #6]
 800676c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	88fa      	ldrh	r2, [r7, #6]
 8006772:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677c:	d108      	bne.n	8006790 <HAL_UART_Transmit+0x82>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d104      	bne.n	8006790 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006786:	2300      	movs	r3, #0
 8006788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	61bb      	str	r3, [r7, #24]
 800678e:	e003      	b.n	8006798 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006794:	2300      	movs	r3, #0
 8006796:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80067a0:	e02a      	b.n	80067f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	2200      	movs	r2, #0
 80067aa:	2180      	movs	r1, #128	; 0x80
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f000 f946 	bl	8006a3e <UART_WaitOnFlagUntilTimeout>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80067b8:	2303      	movs	r3, #3
 80067ba:	e036      	b.n	800682a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10b      	bne.n	80067da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	3302      	adds	r3, #2
 80067d6:	61bb      	str	r3, [r7, #24]
 80067d8:	e007      	b.n	80067ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	781a      	ldrb	r2, [r3, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	3301      	adds	r3, #1
 80067e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	3b01      	subs	r3, #1
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1cf      	bne.n	80067a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	2200      	movs	r2, #0
 800680a:	2140      	movs	r1, #64	; 0x40
 800680c:	68f8      	ldr	r0, [r7, #12]
 800680e:	f000 f916 	bl	8006a3e <UART_WaitOnFlagUntilTimeout>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d001      	beq.n	800681c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006818:	2303      	movs	r3, #3
 800681a:	e006      	b.n	800682a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2220      	movs	r2, #32
 8006820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	e000      	b.n	800682a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006828:	2302      	movs	r3, #2
  }
}
 800682a:	4618      	mov	r0, r3
 800682c:	3720      	adds	r7, #32
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	60f8      	str	r0, [r7, #12]
 800683a:	60b9      	str	r1, [r7, #8]
 800683c:	4613      	mov	r3, r2
 800683e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b20      	cmp	r3, #32
 800684a:	d11d      	bne.n	8006888 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <HAL_UART_Receive_DMA+0x26>
 8006852:	88fb      	ldrh	r3, [r7, #6]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d101      	bne.n	800685c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e016      	b.n	800688a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006862:	2b01      	cmp	r3, #1
 8006864:	d101      	bne.n	800686a <HAL_UART_Receive_DMA+0x38>
 8006866:	2302      	movs	r3, #2
 8006868:	e00f      	b.n	800688a <HAL_UART_Receive_DMA+0x58>
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006878:	88fb      	ldrh	r3, [r7, #6]
 800687a:	461a      	mov	r2, r3
 800687c:	68b9      	ldr	r1, [r7, #8]
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 f928 	bl	8006ad4 <UART_Start_Receive_DMA>
 8006884:	4603      	mov	r3, r0
 8006886:	e000      	b.n	800688a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006888:	2302      	movs	r3, #2
  }
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	bc80      	pop	{r7}
 80068a2:	4770      	bx	lr

080068a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr

080068b6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bc80      	pop	{r7}
 80068c6:	4770      	bx	lr

080068c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	bc80      	pop	{r7}
 80068dc:	4770      	bx	lr

080068de <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0320 	and.w	r3, r3, #32
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d12a      	bne.n	8006950 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68da      	ldr	r2, [r3, #12]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800690e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695a      	ldr	r2, [r3, #20]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 0201 	bic.w	r2, r2, #1
 800691e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695a      	ldr	r2, [r3, #20]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800692e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693c:	2b01      	cmp	r3, #1
 800693e:	d107      	bne.n	8006950 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0210 	bic.w	r2, r2, #16
 800694e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006954:	2b01      	cmp	r3, #1
 8006956:	d106      	bne.n	8006966 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800695c:	4619      	mov	r1, r3
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f7ff ffb2 	bl	80068c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006964:	e002      	b.n	800696c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f7ff ff93 	bl	8006892 <HAL_UART_RxCpltCallback>
}
 800696c:	bf00      	nop
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006986:	2b01      	cmp	r3, #1
 8006988:	d108      	bne.n	800699c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800698e:	085b      	lsrs	r3, r3, #1
 8006990:	b29b      	uxth	r3, r3
 8006992:	4619      	mov	r1, r3
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f7ff ff97 	bl	80068c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800699a:	e002      	b.n	80069a2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800699c:	68f8      	ldr	r0, [r7, #12]
 800699e:	f7ff ff81 	bl	80068a4 <HAL_UART_RxHalfCpltCallback>
}
 80069a2:	bf00      	nop
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80069b2:	2300      	movs	r3, #0
 80069b4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	bf14      	ite	ne
 80069ca:	2301      	movne	r3, #1
 80069cc:	2300      	moveq	r3, #0
 80069ce:	b2db      	uxtb	r3, r3
 80069d0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b21      	cmp	r3, #33	; 0x21
 80069dc:	d108      	bne.n	80069f0 <UART_DMAError+0x46>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2200      	movs	r2, #0
 80069e8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80069ea:	68b8      	ldr	r0, [r7, #8]
 80069ec:	f000 f8d6 	bl	8006b9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	bf14      	ite	ne
 80069fe:	2301      	movne	r3, #1
 8006a00:	2300      	moveq	r3, #0
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b22      	cmp	r3, #34	; 0x22
 8006a10:	d108      	bne.n	8006a24 <UART_DMAError+0x7a>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d005      	beq.n	8006a24 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006a1e:	68b8      	ldr	r0, [r7, #8]
 8006a20:	f000 f8d1 	bl	8006bc6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a28:	f043 0210 	orr.w	r2, r3, #16
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a30:	68b8      	ldr	r0, [r7, #8]
 8006a32:	f7ff ff40 	bl	80068b6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a36:	bf00      	nop
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b084      	sub	sp, #16
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	603b      	str	r3, [r7, #0]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a4e:	e02c      	b.n	8006aaa <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a56:	d028      	beq.n	8006aaa <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d007      	beq.n	8006a6e <UART_WaitOnFlagUntilTimeout+0x30>
 8006a5e:	f7fd f81d 	bl	8003a9c <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	69ba      	ldr	r2, [r7, #24]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d21d      	bcs.n	8006aaa <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a7c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	695a      	ldr	r2, [r3, #20]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f022 0201 	bic.w	r2, r2, #1
 8006a8c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e00f      	b.n	8006aca <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	bf0c      	ite	eq
 8006aba:	2301      	moveq	r3, #1
 8006abc:	2300      	movne	r3, #0
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d0c3      	beq.n	8006a50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	60f8      	str	r0, [r7, #12]
 8006adc:	60b9      	str	r1, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006ae2:	68ba      	ldr	r2, [r7, #8]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	88fa      	ldrh	r2, [r7, #6]
 8006aec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2222      	movs	r2, #34	; 0x22
 8006af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	4a23      	ldr	r2, [pc, #140]	; (8006b90 <UART_Start_Receive_DMA+0xbc>)
 8006b02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b08:	4a22      	ldr	r2, [pc, #136]	; (8006b94 <UART_Start_Receive_DMA+0xc0>)
 8006b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b10:	4a21      	ldr	r2, [pc, #132]	; (8006b98 <UART_Start_Receive_DMA+0xc4>)
 8006b12:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b18:	2200      	movs	r2, #0
 8006b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006b1c:	f107 0308 	add.w	r3, r7, #8
 8006b20:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	88fb      	ldrh	r3, [r7, #6]
 8006b34:	f7fd f948 	bl	8003dc8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006b38:	2300      	movs	r3, #0
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	613b      	str	r3, [r7, #16]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68da      	ldr	r2, [r3, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b64:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695a      	ldr	r2, [r3, #20]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0201 	orr.w	r2, r2, #1
 8006b74:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	695a      	ldr	r2, [r3, #20]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b84:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	080068df 	.word	0x080068df
 8006b94:	08006975 	.word	0x08006975
 8006b98:	080069ab 	.word	0x080069ab

08006b9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68da      	ldr	r2, [r3, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006bb2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bc80      	pop	{r7}
 8006bc4:	4770      	bx	lr

08006bc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006bdc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	695a      	ldr	r2, [r3, #20]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d107      	bne.n	8006c06 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68da      	ldr	r2, [r3, #12]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0210 	bic.w	r2, r2, #16
 8006c04:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2220      	movs	r2, #32
 8006c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bc80      	pop	{r7}
 8006c1c:	4770      	bx	lr
	...

08006c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68da      	ldr	r2, [r3, #12]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	691b      	ldr	r3, [r3, #16]
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006c5a:	f023 030c 	bic.w	r3, r3, #12
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	6812      	ldr	r2, [r2, #0]
 8006c62:	68b9      	ldr	r1, [r7, #8]
 8006c64:	430b      	orrs	r3, r1
 8006c66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	699a      	ldr	r2, [r3, #24]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a2c      	ldr	r2, [pc, #176]	; (8006d34 <UART_SetConfig+0x114>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d103      	bne.n	8006c90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c88:	f7fe fc2a 	bl	80054e0 <HAL_RCC_GetPCLK2Freq>
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	e002      	b.n	8006c96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006c90:	f7fe fc12 	bl	80054b8 <HAL_RCC_GetPCLK1Freq>
 8006c94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009a      	lsls	r2, r3, #2
 8006ca0:	441a      	add	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cac:	4a22      	ldr	r2, [pc, #136]	; (8006d38 <UART_SetConfig+0x118>)
 8006cae:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb2:	095b      	lsrs	r3, r3, #5
 8006cb4:	0119      	lsls	r1, r3, #4
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009a      	lsls	r2, r3, #2
 8006cc0:	441a      	add	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ccc:	4b1a      	ldr	r3, [pc, #104]	; (8006d38 <UART_SetConfig+0x118>)
 8006cce:	fba3 0302 	umull	r0, r3, r3, r2
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	2064      	movs	r0, #100	; 0x64
 8006cd6:	fb00 f303 	mul.w	r3, r0, r3
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	011b      	lsls	r3, r3, #4
 8006cde:	3332      	adds	r3, #50	; 0x32
 8006ce0:	4a15      	ldr	r2, [pc, #84]	; (8006d38 <UART_SetConfig+0x118>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	095b      	lsrs	r3, r3, #5
 8006ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cec:	4419      	add	r1, r3
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009a      	lsls	r2, r3, #2
 8006cf8:	441a      	add	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	009b      	lsls	r3, r3, #2
 8006d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d04:	4b0c      	ldr	r3, [pc, #48]	; (8006d38 <UART_SetConfig+0x118>)
 8006d06:	fba3 0302 	umull	r0, r3, r3, r2
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	2064      	movs	r0, #100	; 0x64
 8006d0e:	fb00 f303 	mul.w	r3, r0, r3
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	3332      	adds	r3, #50	; 0x32
 8006d18:	4a07      	ldr	r2, [pc, #28]	; (8006d38 <UART_SetConfig+0x118>)
 8006d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	f003 020f 	and.w	r2, r3, #15
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	440a      	add	r2, r1
 8006d2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006d2c:	bf00      	nop
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	40013800 	.word	0x40013800
 8006d38:	51eb851f 	.word	0x51eb851f

08006d3c <__assert_func>:
 8006d3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d3e:	4614      	mov	r4, r2
 8006d40:	461a      	mov	r2, r3
 8006d42:	4b09      	ldr	r3, [pc, #36]	; (8006d68 <__assert_func+0x2c>)
 8006d44:	4605      	mov	r5, r0
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68d8      	ldr	r0, [r3, #12]
 8006d4a:	b14c      	cbz	r4, 8006d60 <__assert_func+0x24>
 8006d4c:	4b07      	ldr	r3, [pc, #28]	; (8006d6c <__assert_func+0x30>)
 8006d4e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d52:	9100      	str	r1, [sp, #0]
 8006d54:	462b      	mov	r3, r5
 8006d56:	4906      	ldr	r1, [pc, #24]	; (8006d70 <__assert_func+0x34>)
 8006d58:	f000 f814 	bl	8006d84 <fiprintf>
 8006d5c:	f000 fef6 	bl	8007b4c <abort>
 8006d60:	4b04      	ldr	r3, [pc, #16]	; (8006d74 <__assert_func+0x38>)
 8006d62:	461c      	mov	r4, r3
 8006d64:	e7f3      	b.n	8006d4e <__assert_func+0x12>
 8006d66:	bf00      	nop
 8006d68:	20000018 	.word	0x20000018
 8006d6c:	0800a254 	.word	0x0800a254
 8006d70:	0800a261 	.word	0x0800a261
 8006d74:	0800a28f 	.word	0x0800a28f

08006d78 <__errno>:
 8006d78:	4b01      	ldr	r3, [pc, #4]	; (8006d80 <__errno+0x8>)
 8006d7a:	6818      	ldr	r0, [r3, #0]
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	20000018 	.word	0x20000018

08006d84 <fiprintf>:
 8006d84:	b40e      	push	{r1, r2, r3}
 8006d86:	b503      	push	{r0, r1, lr}
 8006d88:	4601      	mov	r1, r0
 8006d8a:	ab03      	add	r3, sp, #12
 8006d8c:	4805      	ldr	r0, [pc, #20]	; (8006da4 <fiprintf+0x20>)
 8006d8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d92:	6800      	ldr	r0, [r0, #0]
 8006d94:	9301      	str	r3, [sp, #4]
 8006d96:	f000 f869 	bl	8006e6c <_vfiprintf_r>
 8006d9a:	b002      	add	sp, #8
 8006d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006da0:	b003      	add	sp, #12
 8006da2:	4770      	bx	lr
 8006da4:	20000018 	.word	0x20000018

08006da8 <__libc_init_array>:
 8006da8:	b570      	push	{r4, r5, r6, lr}
 8006daa:	2600      	movs	r6, #0
 8006dac:	4d0c      	ldr	r5, [pc, #48]	; (8006de0 <__libc_init_array+0x38>)
 8006dae:	4c0d      	ldr	r4, [pc, #52]	; (8006de4 <__libc_init_array+0x3c>)
 8006db0:	1b64      	subs	r4, r4, r5
 8006db2:	10a4      	asrs	r4, r4, #2
 8006db4:	42a6      	cmp	r6, r4
 8006db6:	d109      	bne.n	8006dcc <__libc_init_array+0x24>
 8006db8:	f002 fef2 	bl	8009ba0 <_init>
 8006dbc:	2600      	movs	r6, #0
 8006dbe:	4d0a      	ldr	r5, [pc, #40]	; (8006de8 <__libc_init_array+0x40>)
 8006dc0:	4c0a      	ldr	r4, [pc, #40]	; (8006dec <__libc_init_array+0x44>)
 8006dc2:	1b64      	subs	r4, r4, r5
 8006dc4:	10a4      	asrs	r4, r4, #2
 8006dc6:	42a6      	cmp	r6, r4
 8006dc8:	d105      	bne.n	8006dd6 <__libc_init_array+0x2e>
 8006dca:	bd70      	pop	{r4, r5, r6, pc}
 8006dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd0:	4798      	blx	r3
 8006dd2:	3601      	adds	r6, #1
 8006dd4:	e7ee      	b.n	8006db4 <__libc_init_array+0xc>
 8006dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dda:	4798      	blx	r3
 8006ddc:	3601      	adds	r6, #1
 8006dde:	e7f2      	b.n	8006dc6 <__libc_init_array+0x1e>
 8006de0:	0800a630 	.word	0x0800a630
 8006de4:	0800a630 	.word	0x0800a630
 8006de8:	0800a630 	.word	0x0800a630
 8006dec:	0800a634 	.word	0x0800a634

08006df0 <memcpy>:
 8006df0:	440a      	add	r2, r1
 8006df2:	4291      	cmp	r1, r2
 8006df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006df8:	d100      	bne.n	8006dfc <memcpy+0xc>
 8006dfa:	4770      	bx	lr
 8006dfc:	b510      	push	{r4, lr}
 8006dfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e02:	4291      	cmp	r1, r2
 8006e04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e08:	d1f9      	bne.n	8006dfe <memcpy+0xe>
 8006e0a:	bd10      	pop	{r4, pc}

08006e0c <memset>:
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	4402      	add	r2, r0
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d100      	bne.n	8006e16 <memset+0xa>
 8006e14:	4770      	bx	lr
 8006e16:	f803 1b01 	strb.w	r1, [r3], #1
 8006e1a:	e7f9      	b.n	8006e10 <memset+0x4>

08006e1c <__sfputc_r>:
 8006e1c:	6893      	ldr	r3, [r2, #8]
 8006e1e:	b410      	push	{r4}
 8006e20:	3b01      	subs	r3, #1
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	6093      	str	r3, [r2, #8]
 8006e26:	da07      	bge.n	8006e38 <__sfputc_r+0x1c>
 8006e28:	6994      	ldr	r4, [r2, #24]
 8006e2a:	42a3      	cmp	r3, r4
 8006e2c:	db01      	blt.n	8006e32 <__sfputc_r+0x16>
 8006e2e:	290a      	cmp	r1, #10
 8006e30:	d102      	bne.n	8006e38 <__sfputc_r+0x1c>
 8006e32:	bc10      	pop	{r4}
 8006e34:	f000 bdca 	b.w	80079cc <__swbuf_r>
 8006e38:	6813      	ldr	r3, [r2, #0]
 8006e3a:	1c58      	adds	r0, r3, #1
 8006e3c:	6010      	str	r0, [r2, #0]
 8006e3e:	7019      	strb	r1, [r3, #0]
 8006e40:	4608      	mov	r0, r1
 8006e42:	bc10      	pop	{r4}
 8006e44:	4770      	bx	lr

08006e46 <__sfputs_r>:
 8006e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e48:	4606      	mov	r6, r0
 8006e4a:	460f      	mov	r7, r1
 8006e4c:	4614      	mov	r4, r2
 8006e4e:	18d5      	adds	r5, r2, r3
 8006e50:	42ac      	cmp	r4, r5
 8006e52:	d101      	bne.n	8006e58 <__sfputs_r+0x12>
 8006e54:	2000      	movs	r0, #0
 8006e56:	e007      	b.n	8006e68 <__sfputs_r+0x22>
 8006e58:	463a      	mov	r2, r7
 8006e5a:	4630      	mov	r0, r6
 8006e5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e60:	f7ff ffdc 	bl	8006e1c <__sfputc_r>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d1f3      	bne.n	8006e50 <__sfputs_r+0xa>
 8006e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e6c <_vfiprintf_r>:
 8006e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e70:	460d      	mov	r5, r1
 8006e72:	4614      	mov	r4, r2
 8006e74:	4698      	mov	r8, r3
 8006e76:	4606      	mov	r6, r0
 8006e78:	b09d      	sub	sp, #116	; 0x74
 8006e7a:	b118      	cbz	r0, 8006e84 <_vfiprintf_r+0x18>
 8006e7c:	6983      	ldr	r3, [r0, #24]
 8006e7e:	b90b      	cbnz	r3, 8006e84 <_vfiprintf_r+0x18>
 8006e80:	f001 fdfe 	bl	8008a80 <__sinit>
 8006e84:	4b89      	ldr	r3, [pc, #548]	; (80070ac <_vfiprintf_r+0x240>)
 8006e86:	429d      	cmp	r5, r3
 8006e88:	d11b      	bne.n	8006ec2 <_vfiprintf_r+0x56>
 8006e8a:	6875      	ldr	r5, [r6, #4]
 8006e8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e8e:	07d9      	lsls	r1, r3, #31
 8006e90:	d405      	bmi.n	8006e9e <_vfiprintf_r+0x32>
 8006e92:	89ab      	ldrh	r3, [r5, #12]
 8006e94:	059a      	lsls	r2, r3, #22
 8006e96:	d402      	bmi.n	8006e9e <_vfiprintf_r+0x32>
 8006e98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e9a:	f001 fe94 	bl	8008bc6 <__retarget_lock_acquire_recursive>
 8006e9e:	89ab      	ldrh	r3, [r5, #12]
 8006ea0:	071b      	lsls	r3, r3, #28
 8006ea2:	d501      	bpl.n	8006ea8 <_vfiprintf_r+0x3c>
 8006ea4:	692b      	ldr	r3, [r5, #16]
 8006ea6:	b9eb      	cbnz	r3, 8006ee4 <_vfiprintf_r+0x78>
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	4630      	mov	r0, r6
 8006eac:	f000 fde0 	bl	8007a70 <__swsetup_r>
 8006eb0:	b1c0      	cbz	r0, 8006ee4 <_vfiprintf_r+0x78>
 8006eb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006eb4:	07dc      	lsls	r4, r3, #31
 8006eb6:	d50e      	bpl.n	8006ed6 <_vfiprintf_r+0x6a>
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	b01d      	add	sp, #116	; 0x74
 8006ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec2:	4b7b      	ldr	r3, [pc, #492]	; (80070b0 <_vfiprintf_r+0x244>)
 8006ec4:	429d      	cmp	r5, r3
 8006ec6:	d101      	bne.n	8006ecc <_vfiprintf_r+0x60>
 8006ec8:	68b5      	ldr	r5, [r6, #8]
 8006eca:	e7df      	b.n	8006e8c <_vfiprintf_r+0x20>
 8006ecc:	4b79      	ldr	r3, [pc, #484]	; (80070b4 <_vfiprintf_r+0x248>)
 8006ece:	429d      	cmp	r5, r3
 8006ed0:	bf08      	it	eq
 8006ed2:	68f5      	ldreq	r5, [r6, #12]
 8006ed4:	e7da      	b.n	8006e8c <_vfiprintf_r+0x20>
 8006ed6:	89ab      	ldrh	r3, [r5, #12]
 8006ed8:	0598      	lsls	r0, r3, #22
 8006eda:	d4ed      	bmi.n	8006eb8 <_vfiprintf_r+0x4c>
 8006edc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ede:	f001 fe73 	bl	8008bc8 <__retarget_lock_release_recursive>
 8006ee2:	e7e9      	b.n	8006eb8 <_vfiprintf_r+0x4c>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee8:	2320      	movs	r3, #32
 8006eea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006eee:	2330      	movs	r3, #48	; 0x30
 8006ef0:	f04f 0901 	mov.w	r9, #1
 8006ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ef8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80070b8 <_vfiprintf_r+0x24c>
 8006efc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f00:	4623      	mov	r3, r4
 8006f02:	469a      	mov	sl, r3
 8006f04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f08:	b10a      	cbz	r2, 8006f0e <_vfiprintf_r+0xa2>
 8006f0a:	2a25      	cmp	r2, #37	; 0x25
 8006f0c:	d1f9      	bne.n	8006f02 <_vfiprintf_r+0x96>
 8006f0e:	ebba 0b04 	subs.w	fp, sl, r4
 8006f12:	d00b      	beq.n	8006f2c <_vfiprintf_r+0xc0>
 8006f14:	465b      	mov	r3, fp
 8006f16:	4622      	mov	r2, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f7ff ff93 	bl	8006e46 <__sfputs_r>
 8006f20:	3001      	adds	r0, #1
 8006f22:	f000 80aa 	beq.w	800707a <_vfiprintf_r+0x20e>
 8006f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f28:	445a      	add	r2, fp
 8006f2a:	9209      	str	r2, [sp, #36]	; 0x24
 8006f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	f000 80a2 	beq.w	800707a <_vfiprintf_r+0x20e>
 8006f36:	2300      	movs	r3, #0
 8006f38:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f40:	f10a 0a01 	add.w	sl, sl, #1
 8006f44:	9304      	str	r3, [sp, #16]
 8006f46:	9307      	str	r3, [sp, #28]
 8006f48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f4c:	931a      	str	r3, [sp, #104]	; 0x68
 8006f4e:	4654      	mov	r4, sl
 8006f50:	2205      	movs	r2, #5
 8006f52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f56:	4858      	ldr	r0, [pc, #352]	; (80070b8 <_vfiprintf_r+0x24c>)
 8006f58:	f001 fea4 	bl	8008ca4 <memchr>
 8006f5c:	9a04      	ldr	r2, [sp, #16]
 8006f5e:	b9d8      	cbnz	r0, 8006f98 <_vfiprintf_r+0x12c>
 8006f60:	06d1      	lsls	r1, r2, #27
 8006f62:	bf44      	itt	mi
 8006f64:	2320      	movmi	r3, #32
 8006f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f6a:	0713      	lsls	r3, r2, #28
 8006f6c:	bf44      	itt	mi
 8006f6e:	232b      	movmi	r3, #43	; 0x2b
 8006f70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f74:	f89a 3000 	ldrb.w	r3, [sl]
 8006f78:	2b2a      	cmp	r3, #42	; 0x2a
 8006f7a:	d015      	beq.n	8006fa8 <_vfiprintf_r+0x13c>
 8006f7c:	4654      	mov	r4, sl
 8006f7e:	2000      	movs	r0, #0
 8006f80:	f04f 0c0a 	mov.w	ip, #10
 8006f84:	9a07      	ldr	r2, [sp, #28]
 8006f86:	4621      	mov	r1, r4
 8006f88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f8c:	3b30      	subs	r3, #48	; 0x30
 8006f8e:	2b09      	cmp	r3, #9
 8006f90:	d94e      	bls.n	8007030 <_vfiprintf_r+0x1c4>
 8006f92:	b1b0      	cbz	r0, 8006fc2 <_vfiprintf_r+0x156>
 8006f94:	9207      	str	r2, [sp, #28]
 8006f96:	e014      	b.n	8006fc2 <_vfiprintf_r+0x156>
 8006f98:	eba0 0308 	sub.w	r3, r0, r8
 8006f9c:	fa09 f303 	lsl.w	r3, r9, r3
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	46a2      	mov	sl, r4
 8006fa4:	9304      	str	r3, [sp, #16]
 8006fa6:	e7d2      	b.n	8006f4e <_vfiprintf_r+0xe2>
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	1d19      	adds	r1, r3, #4
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	9103      	str	r1, [sp, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	bfbb      	ittet	lt
 8006fb4:	425b      	neglt	r3, r3
 8006fb6:	f042 0202 	orrlt.w	r2, r2, #2
 8006fba:	9307      	strge	r3, [sp, #28]
 8006fbc:	9307      	strlt	r3, [sp, #28]
 8006fbe:	bfb8      	it	lt
 8006fc0:	9204      	strlt	r2, [sp, #16]
 8006fc2:	7823      	ldrb	r3, [r4, #0]
 8006fc4:	2b2e      	cmp	r3, #46	; 0x2e
 8006fc6:	d10c      	bne.n	8006fe2 <_vfiprintf_r+0x176>
 8006fc8:	7863      	ldrb	r3, [r4, #1]
 8006fca:	2b2a      	cmp	r3, #42	; 0x2a
 8006fcc:	d135      	bne.n	800703a <_vfiprintf_r+0x1ce>
 8006fce:	9b03      	ldr	r3, [sp, #12]
 8006fd0:	3402      	adds	r4, #2
 8006fd2:	1d1a      	adds	r2, r3, #4
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	9203      	str	r2, [sp, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	bfb8      	it	lt
 8006fdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fe0:	9305      	str	r3, [sp, #20]
 8006fe2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80070bc <_vfiprintf_r+0x250>
 8006fe6:	2203      	movs	r2, #3
 8006fe8:	4650      	mov	r0, sl
 8006fea:	7821      	ldrb	r1, [r4, #0]
 8006fec:	f001 fe5a 	bl	8008ca4 <memchr>
 8006ff0:	b140      	cbz	r0, 8007004 <_vfiprintf_r+0x198>
 8006ff2:	2340      	movs	r3, #64	; 0x40
 8006ff4:	eba0 000a 	sub.w	r0, r0, sl
 8006ff8:	fa03 f000 	lsl.w	r0, r3, r0
 8006ffc:	9b04      	ldr	r3, [sp, #16]
 8006ffe:	3401      	adds	r4, #1
 8007000:	4303      	orrs	r3, r0
 8007002:	9304      	str	r3, [sp, #16]
 8007004:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007008:	2206      	movs	r2, #6
 800700a:	482d      	ldr	r0, [pc, #180]	; (80070c0 <_vfiprintf_r+0x254>)
 800700c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007010:	f001 fe48 	bl	8008ca4 <memchr>
 8007014:	2800      	cmp	r0, #0
 8007016:	d03f      	beq.n	8007098 <_vfiprintf_r+0x22c>
 8007018:	4b2a      	ldr	r3, [pc, #168]	; (80070c4 <_vfiprintf_r+0x258>)
 800701a:	bb1b      	cbnz	r3, 8007064 <_vfiprintf_r+0x1f8>
 800701c:	9b03      	ldr	r3, [sp, #12]
 800701e:	3307      	adds	r3, #7
 8007020:	f023 0307 	bic.w	r3, r3, #7
 8007024:	3308      	adds	r3, #8
 8007026:	9303      	str	r3, [sp, #12]
 8007028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800702a:	443b      	add	r3, r7
 800702c:	9309      	str	r3, [sp, #36]	; 0x24
 800702e:	e767      	b.n	8006f00 <_vfiprintf_r+0x94>
 8007030:	460c      	mov	r4, r1
 8007032:	2001      	movs	r0, #1
 8007034:	fb0c 3202 	mla	r2, ip, r2, r3
 8007038:	e7a5      	b.n	8006f86 <_vfiprintf_r+0x11a>
 800703a:	2300      	movs	r3, #0
 800703c:	f04f 0c0a 	mov.w	ip, #10
 8007040:	4619      	mov	r1, r3
 8007042:	3401      	adds	r4, #1
 8007044:	9305      	str	r3, [sp, #20]
 8007046:	4620      	mov	r0, r4
 8007048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800704c:	3a30      	subs	r2, #48	; 0x30
 800704e:	2a09      	cmp	r2, #9
 8007050:	d903      	bls.n	800705a <_vfiprintf_r+0x1ee>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0c5      	beq.n	8006fe2 <_vfiprintf_r+0x176>
 8007056:	9105      	str	r1, [sp, #20]
 8007058:	e7c3      	b.n	8006fe2 <_vfiprintf_r+0x176>
 800705a:	4604      	mov	r4, r0
 800705c:	2301      	movs	r3, #1
 800705e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007062:	e7f0      	b.n	8007046 <_vfiprintf_r+0x1da>
 8007064:	ab03      	add	r3, sp, #12
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	462a      	mov	r2, r5
 800706a:	4630      	mov	r0, r6
 800706c:	4b16      	ldr	r3, [pc, #88]	; (80070c8 <_vfiprintf_r+0x25c>)
 800706e:	a904      	add	r1, sp, #16
 8007070:	f000 f8ca 	bl	8007208 <_printf_float>
 8007074:	4607      	mov	r7, r0
 8007076:	1c78      	adds	r0, r7, #1
 8007078:	d1d6      	bne.n	8007028 <_vfiprintf_r+0x1bc>
 800707a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800707c:	07d9      	lsls	r1, r3, #31
 800707e:	d405      	bmi.n	800708c <_vfiprintf_r+0x220>
 8007080:	89ab      	ldrh	r3, [r5, #12]
 8007082:	059a      	lsls	r2, r3, #22
 8007084:	d402      	bmi.n	800708c <_vfiprintf_r+0x220>
 8007086:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007088:	f001 fd9e 	bl	8008bc8 <__retarget_lock_release_recursive>
 800708c:	89ab      	ldrh	r3, [r5, #12]
 800708e:	065b      	lsls	r3, r3, #25
 8007090:	f53f af12 	bmi.w	8006eb8 <_vfiprintf_r+0x4c>
 8007094:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007096:	e711      	b.n	8006ebc <_vfiprintf_r+0x50>
 8007098:	ab03      	add	r3, sp, #12
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	462a      	mov	r2, r5
 800709e:	4630      	mov	r0, r6
 80070a0:	4b09      	ldr	r3, [pc, #36]	; (80070c8 <_vfiprintf_r+0x25c>)
 80070a2:	a904      	add	r1, sp, #16
 80070a4:	f000 fb4c 	bl	8007740 <_printf_i>
 80070a8:	e7e4      	b.n	8007074 <_vfiprintf_r+0x208>
 80070aa:	bf00      	nop
 80070ac:	0800a38c 	.word	0x0800a38c
 80070b0:	0800a3ac 	.word	0x0800a3ac
 80070b4:	0800a36c 	.word	0x0800a36c
 80070b8:	0800a294 	.word	0x0800a294
 80070bc:	0800a29a 	.word	0x0800a29a
 80070c0:	0800a29e 	.word	0x0800a29e
 80070c4:	08007209 	.word	0x08007209
 80070c8:	08006e47 	.word	0x08006e47

080070cc <__cvt>:
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d2:	461f      	mov	r7, r3
 80070d4:	bfbb      	ittet	lt
 80070d6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80070da:	461f      	movlt	r7, r3
 80070dc:	2300      	movge	r3, #0
 80070de:	232d      	movlt	r3, #45	; 0x2d
 80070e0:	b088      	sub	sp, #32
 80070e2:	4614      	mov	r4, r2
 80070e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070e6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80070e8:	7013      	strb	r3, [r2, #0]
 80070ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80070f0:	f023 0820 	bic.w	r8, r3, #32
 80070f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80070f8:	d005      	beq.n	8007106 <__cvt+0x3a>
 80070fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80070fe:	d100      	bne.n	8007102 <__cvt+0x36>
 8007100:	3501      	adds	r5, #1
 8007102:	2302      	movs	r3, #2
 8007104:	e000      	b.n	8007108 <__cvt+0x3c>
 8007106:	2303      	movs	r3, #3
 8007108:	aa07      	add	r2, sp, #28
 800710a:	9204      	str	r2, [sp, #16]
 800710c:	aa06      	add	r2, sp, #24
 800710e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007112:	e9cd 3500 	strd	r3, r5, [sp]
 8007116:	4622      	mov	r2, r4
 8007118:	463b      	mov	r3, r7
 800711a:	f000 fdad 	bl	8007c78 <_dtoa_r>
 800711e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007122:	4606      	mov	r6, r0
 8007124:	d102      	bne.n	800712c <__cvt+0x60>
 8007126:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007128:	07db      	lsls	r3, r3, #31
 800712a:	d522      	bpl.n	8007172 <__cvt+0xa6>
 800712c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007130:	eb06 0905 	add.w	r9, r6, r5
 8007134:	d110      	bne.n	8007158 <__cvt+0x8c>
 8007136:	7833      	ldrb	r3, [r6, #0]
 8007138:	2b30      	cmp	r3, #48	; 0x30
 800713a:	d10a      	bne.n	8007152 <__cvt+0x86>
 800713c:	2200      	movs	r2, #0
 800713e:	2300      	movs	r3, #0
 8007140:	4620      	mov	r0, r4
 8007142:	4639      	mov	r1, r7
 8007144:	f7f9 fc30 	bl	80009a8 <__aeabi_dcmpeq>
 8007148:	b918      	cbnz	r0, 8007152 <__cvt+0x86>
 800714a:	f1c5 0501 	rsb	r5, r5, #1
 800714e:	f8ca 5000 	str.w	r5, [sl]
 8007152:	f8da 3000 	ldr.w	r3, [sl]
 8007156:	4499      	add	r9, r3
 8007158:	2200      	movs	r2, #0
 800715a:	2300      	movs	r3, #0
 800715c:	4620      	mov	r0, r4
 800715e:	4639      	mov	r1, r7
 8007160:	f7f9 fc22 	bl	80009a8 <__aeabi_dcmpeq>
 8007164:	b108      	cbz	r0, 800716a <__cvt+0x9e>
 8007166:	f8cd 901c 	str.w	r9, [sp, #28]
 800716a:	2230      	movs	r2, #48	; 0x30
 800716c:	9b07      	ldr	r3, [sp, #28]
 800716e:	454b      	cmp	r3, r9
 8007170:	d307      	bcc.n	8007182 <__cvt+0xb6>
 8007172:	4630      	mov	r0, r6
 8007174:	9b07      	ldr	r3, [sp, #28]
 8007176:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007178:	1b9b      	subs	r3, r3, r6
 800717a:	6013      	str	r3, [r2, #0]
 800717c:	b008      	add	sp, #32
 800717e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007182:	1c59      	adds	r1, r3, #1
 8007184:	9107      	str	r1, [sp, #28]
 8007186:	701a      	strb	r2, [r3, #0]
 8007188:	e7f0      	b.n	800716c <__cvt+0xa0>

0800718a <__exponent>:
 800718a:	4603      	mov	r3, r0
 800718c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800718e:	2900      	cmp	r1, #0
 8007190:	f803 2b02 	strb.w	r2, [r3], #2
 8007194:	bfb6      	itet	lt
 8007196:	222d      	movlt	r2, #45	; 0x2d
 8007198:	222b      	movge	r2, #43	; 0x2b
 800719a:	4249      	neglt	r1, r1
 800719c:	2909      	cmp	r1, #9
 800719e:	7042      	strb	r2, [r0, #1]
 80071a0:	dd2b      	ble.n	80071fa <__exponent+0x70>
 80071a2:	f10d 0407 	add.w	r4, sp, #7
 80071a6:	46a4      	mov	ip, r4
 80071a8:	270a      	movs	r7, #10
 80071aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80071ae:	460a      	mov	r2, r1
 80071b0:	46a6      	mov	lr, r4
 80071b2:	fb07 1516 	mls	r5, r7, r6, r1
 80071b6:	2a63      	cmp	r2, #99	; 0x63
 80071b8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80071bc:	4631      	mov	r1, r6
 80071be:	f104 34ff 	add.w	r4, r4, #4294967295
 80071c2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071c6:	dcf0      	bgt.n	80071aa <__exponent+0x20>
 80071c8:	3130      	adds	r1, #48	; 0x30
 80071ca:	f1ae 0502 	sub.w	r5, lr, #2
 80071ce:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071d2:	4629      	mov	r1, r5
 80071d4:	1c44      	adds	r4, r0, #1
 80071d6:	4561      	cmp	r1, ip
 80071d8:	d30a      	bcc.n	80071f0 <__exponent+0x66>
 80071da:	f10d 0209 	add.w	r2, sp, #9
 80071de:	eba2 020e 	sub.w	r2, r2, lr
 80071e2:	4565      	cmp	r5, ip
 80071e4:	bf88      	it	hi
 80071e6:	2200      	movhi	r2, #0
 80071e8:	4413      	add	r3, r2
 80071ea:	1a18      	subs	r0, r3, r0
 80071ec:	b003      	add	sp, #12
 80071ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071f4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80071f8:	e7ed      	b.n	80071d6 <__exponent+0x4c>
 80071fa:	2330      	movs	r3, #48	; 0x30
 80071fc:	3130      	adds	r1, #48	; 0x30
 80071fe:	7083      	strb	r3, [r0, #2]
 8007200:	70c1      	strb	r1, [r0, #3]
 8007202:	1d03      	adds	r3, r0, #4
 8007204:	e7f1      	b.n	80071ea <__exponent+0x60>
	...

08007208 <_printf_float>:
 8007208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	b091      	sub	sp, #68	; 0x44
 800720e:	460c      	mov	r4, r1
 8007210:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007214:	4616      	mov	r6, r2
 8007216:	461f      	mov	r7, r3
 8007218:	4605      	mov	r5, r0
 800721a:	f001 fccf 	bl	8008bbc <_localeconv_r>
 800721e:	6803      	ldr	r3, [r0, #0]
 8007220:	4618      	mov	r0, r3
 8007222:	9309      	str	r3, [sp, #36]	; 0x24
 8007224:	f7f8 ff94 	bl	8000150 <strlen>
 8007228:	2300      	movs	r3, #0
 800722a:	930e      	str	r3, [sp, #56]	; 0x38
 800722c:	f8d8 3000 	ldr.w	r3, [r8]
 8007230:	900a      	str	r0, [sp, #40]	; 0x28
 8007232:	3307      	adds	r3, #7
 8007234:	f023 0307 	bic.w	r3, r3, #7
 8007238:	f103 0208 	add.w	r2, r3, #8
 800723c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007240:	f8d4 b000 	ldr.w	fp, [r4]
 8007244:	f8c8 2000 	str.w	r2, [r8]
 8007248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007250:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007254:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007258:	930b      	str	r3, [sp, #44]	; 0x2c
 800725a:	f04f 32ff 	mov.w	r2, #4294967295
 800725e:	4640      	mov	r0, r8
 8007260:	4b9c      	ldr	r3, [pc, #624]	; (80074d4 <_printf_float+0x2cc>)
 8007262:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007264:	f7f9 fbd2 	bl	8000a0c <__aeabi_dcmpun>
 8007268:	bb70      	cbnz	r0, 80072c8 <_printf_float+0xc0>
 800726a:	f04f 32ff 	mov.w	r2, #4294967295
 800726e:	4640      	mov	r0, r8
 8007270:	4b98      	ldr	r3, [pc, #608]	; (80074d4 <_printf_float+0x2cc>)
 8007272:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007274:	f7f9 fbac 	bl	80009d0 <__aeabi_dcmple>
 8007278:	bb30      	cbnz	r0, 80072c8 <_printf_float+0xc0>
 800727a:	2200      	movs	r2, #0
 800727c:	2300      	movs	r3, #0
 800727e:	4640      	mov	r0, r8
 8007280:	4651      	mov	r1, sl
 8007282:	f7f9 fb9b 	bl	80009bc <__aeabi_dcmplt>
 8007286:	b110      	cbz	r0, 800728e <_printf_float+0x86>
 8007288:	232d      	movs	r3, #45	; 0x2d
 800728a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800728e:	4b92      	ldr	r3, [pc, #584]	; (80074d8 <_printf_float+0x2d0>)
 8007290:	4892      	ldr	r0, [pc, #584]	; (80074dc <_printf_float+0x2d4>)
 8007292:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007296:	bf94      	ite	ls
 8007298:	4698      	movls	r8, r3
 800729a:	4680      	movhi	r8, r0
 800729c:	2303      	movs	r3, #3
 800729e:	f04f 0a00 	mov.w	sl, #0
 80072a2:	6123      	str	r3, [r4, #16]
 80072a4:	f02b 0304 	bic.w	r3, fp, #4
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	4633      	mov	r3, r6
 80072ac:	4621      	mov	r1, r4
 80072ae:	4628      	mov	r0, r5
 80072b0:	9700      	str	r7, [sp, #0]
 80072b2:	aa0f      	add	r2, sp, #60	; 0x3c
 80072b4:	f000 f9d4 	bl	8007660 <_printf_common>
 80072b8:	3001      	adds	r0, #1
 80072ba:	f040 8090 	bne.w	80073de <_printf_float+0x1d6>
 80072be:	f04f 30ff 	mov.w	r0, #4294967295
 80072c2:	b011      	add	sp, #68	; 0x44
 80072c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c8:	4642      	mov	r2, r8
 80072ca:	4653      	mov	r3, sl
 80072cc:	4640      	mov	r0, r8
 80072ce:	4651      	mov	r1, sl
 80072d0:	f7f9 fb9c 	bl	8000a0c <__aeabi_dcmpun>
 80072d4:	b148      	cbz	r0, 80072ea <_printf_float+0xe2>
 80072d6:	f1ba 0f00 	cmp.w	sl, #0
 80072da:	bfb8      	it	lt
 80072dc:	232d      	movlt	r3, #45	; 0x2d
 80072de:	4880      	ldr	r0, [pc, #512]	; (80074e0 <_printf_float+0x2d8>)
 80072e0:	bfb8      	it	lt
 80072e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80072e6:	4b7f      	ldr	r3, [pc, #508]	; (80074e4 <_printf_float+0x2dc>)
 80072e8:	e7d3      	b.n	8007292 <_printf_float+0x8a>
 80072ea:	6863      	ldr	r3, [r4, #4]
 80072ec:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	d142      	bne.n	800737a <_printf_float+0x172>
 80072f4:	2306      	movs	r3, #6
 80072f6:	6063      	str	r3, [r4, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	9206      	str	r2, [sp, #24]
 80072fc:	aa0e      	add	r2, sp, #56	; 0x38
 80072fe:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007302:	aa0d      	add	r2, sp, #52	; 0x34
 8007304:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007308:	9203      	str	r2, [sp, #12]
 800730a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800730e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007312:	6023      	str	r3, [r4, #0]
 8007314:	6863      	ldr	r3, [r4, #4]
 8007316:	4642      	mov	r2, r8
 8007318:	9300      	str	r3, [sp, #0]
 800731a:	4628      	mov	r0, r5
 800731c:	4653      	mov	r3, sl
 800731e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007320:	f7ff fed4 	bl	80070cc <__cvt>
 8007324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007326:	4680      	mov	r8, r0
 8007328:	2947      	cmp	r1, #71	; 0x47
 800732a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800732c:	d108      	bne.n	8007340 <_printf_float+0x138>
 800732e:	1cc8      	adds	r0, r1, #3
 8007330:	db02      	blt.n	8007338 <_printf_float+0x130>
 8007332:	6863      	ldr	r3, [r4, #4]
 8007334:	4299      	cmp	r1, r3
 8007336:	dd40      	ble.n	80073ba <_printf_float+0x1b2>
 8007338:	f1a9 0902 	sub.w	r9, r9, #2
 800733c:	fa5f f989 	uxtb.w	r9, r9
 8007340:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007344:	d81f      	bhi.n	8007386 <_printf_float+0x17e>
 8007346:	464a      	mov	r2, r9
 8007348:	3901      	subs	r1, #1
 800734a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800734e:	910d      	str	r1, [sp, #52]	; 0x34
 8007350:	f7ff ff1b 	bl	800718a <__exponent>
 8007354:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007356:	4682      	mov	sl, r0
 8007358:	1813      	adds	r3, r2, r0
 800735a:	2a01      	cmp	r2, #1
 800735c:	6123      	str	r3, [r4, #16]
 800735e:	dc02      	bgt.n	8007366 <_printf_float+0x15e>
 8007360:	6822      	ldr	r2, [r4, #0]
 8007362:	07d2      	lsls	r2, r2, #31
 8007364:	d501      	bpl.n	800736a <_printf_float+0x162>
 8007366:	3301      	adds	r3, #1
 8007368:	6123      	str	r3, [r4, #16]
 800736a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800736e:	2b00      	cmp	r3, #0
 8007370:	d09b      	beq.n	80072aa <_printf_float+0xa2>
 8007372:	232d      	movs	r3, #45	; 0x2d
 8007374:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007378:	e797      	b.n	80072aa <_printf_float+0xa2>
 800737a:	2947      	cmp	r1, #71	; 0x47
 800737c:	d1bc      	bne.n	80072f8 <_printf_float+0xf0>
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1ba      	bne.n	80072f8 <_printf_float+0xf0>
 8007382:	2301      	movs	r3, #1
 8007384:	e7b7      	b.n	80072f6 <_printf_float+0xee>
 8007386:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800738a:	d118      	bne.n	80073be <_printf_float+0x1b6>
 800738c:	2900      	cmp	r1, #0
 800738e:	6863      	ldr	r3, [r4, #4]
 8007390:	dd0b      	ble.n	80073aa <_printf_float+0x1a2>
 8007392:	6121      	str	r1, [r4, #16]
 8007394:	b913      	cbnz	r3, 800739c <_printf_float+0x194>
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	07d0      	lsls	r0, r2, #31
 800739a:	d502      	bpl.n	80073a2 <_printf_float+0x19a>
 800739c:	3301      	adds	r3, #1
 800739e:	440b      	add	r3, r1
 80073a0:	6123      	str	r3, [r4, #16]
 80073a2:	f04f 0a00 	mov.w	sl, #0
 80073a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80073a8:	e7df      	b.n	800736a <_printf_float+0x162>
 80073aa:	b913      	cbnz	r3, 80073b2 <_printf_float+0x1aa>
 80073ac:	6822      	ldr	r2, [r4, #0]
 80073ae:	07d2      	lsls	r2, r2, #31
 80073b0:	d501      	bpl.n	80073b6 <_printf_float+0x1ae>
 80073b2:	3302      	adds	r3, #2
 80073b4:	e7f4      	b.n	80073a0 <_printf_float+0x198>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e7f2      	b.n	80073a0 <_printf_float+0x198>
 80073ba:	f04f 0967 	mov.w	r9, #103	; 0x67
 80073be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073c0:	4299      	cmp	r1, r3
 80073c2:	db05      	blt.n	80073d0 <_printf_float+0x1c8>
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	6121      	str	r1, [r4, #16]
 80073c8:	07d8      	lsls	r0, r3, #31
 80073ca:	d5ea      	bpl.n	80073a2 <_printf_float+0x19a>
 80073cc:	1c4b      	adds	r3, r1, #1
 80073ce:	e7e7      	b.n	80073a0 <_printf_float+0x198>
 80073d0:	2900      	cmp	r1, #0
 80073d2:	bfcc      	ite	gt
 80073d4:	2201      	movgt	r2, #1
 80073d6:	f1c1 0202 	rsble	r2, r1, #2
 80073da:	4413      	add	r3, r2
 80073dc:	e7e0      	b.n	80073a0 <_printf_float+0x198>
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	055a      	lsls	r2, r3, #21
 80073e2:	d407      	bmi.n	80073f4 <_printf_float+0x1ec>
 80073e4:	6923      	ldr	r3, [r4, #16]
 80073e6:	4642      	mov	r2, r8
 80073e8:	4631      	mov	r1, r6
 80073ea:	4628      	mov	r0, r5
 80073ec:	47b8      	blx	r7
 80073ee:	3001      	adds	r0, #1
 80073f0:	d12b      	bne.n	800744a <_printf_float+0x242>
 80073f2:	e764      	b.n	80072be <_printf_float+0xb6>
 80073f4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80073f8:	f240 80dd 	bls.w	80075b6 <_printf_float+0x3ae>
 80073fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007400:	2200      	movs	r2, #0
 8007402:	2300      	movs	r3, #0
 8007404:	f7f9 fad0 	bl	80009a8 <__aeabi_dcmpeq>
 8007408:	2800      	cmp	r0, #0
 800740a:	d033      	beq.n	8007474 <_printf_float+0x26c>
 800740c:	2301      	movs	r3, #1
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	4a35      	ldr	r2, [pc, #212]	; (80074e8 <_printf_float+0x2e0>)
 8007414:	47b8      	blx	r7
 8007416:	3001      	adds	r0, #1
 8007418:	f43f af51 	beq.w	80072be <_printf_float+0xb6>
 800741c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007420:	429a      	cmp	r2, r3
 8007422:	db02      	blt.n	800742a <_printf_float+0x222>
 8007424:	6823      	ldr	r3, [r4, #0]
 8007426:	07d8      	lsls	r0, r3, #31
 8007428:	d50f      	bpl.n	800744a <_printf_float+0x242>
 800742a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	f43f af42 	beq.w	80072be <_printf_float+0xb6>
 800743a:	f04f 0800 	mov.w	r8, #0
 800743e:	f104 091a 	add.w	r9, r4, #26
 8007442:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007444:	3b01      	subs	r3, #1
 8007446:	4543      	cmp	r3, r8
 8007448:	dc09      	bgt.n	800745e <_printf_float+0x256>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	079b      	lsls	r3, r3, #30
 800744e:	f100 8102 	bmi.w	8007656 <_printf_float+0x44e>
 8007452:	68e0      	ldr	r0, [r4, #12]
 8007454:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007456:	4298      	cmp	r0, r3
 8007458:	bfb8      	it	lt
 800745a:	4618      	movlt	r0, r3
 800745c:	e731      	b.n	80072c2 <_printf_float+0xba>
 800745e:	2301      	movs	r3, #1
 8007460:	464a      	mov	r2, r9
 8007462:	4631      	mov	r1, r6
 8007464:	4628      	mov	r0, r5
 8007466:	47b8      	blx	r7
 8007468:	3001      	adds	r0, #1
 800746a:	f43f af28 	beq.w	80072be <_printf_float+0xb6>
 800746e:	f108 0801 	add.w	r8, r8, #1
 8007472:	e7e6      	b.n	8007442 <_printf_float+0x23a>
 8007474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007476:	2b00      	cmp	r3, #0
 8007478:	dc38      	bgt.n	80074ec <_printf_float+0x2e4>
 800747a:	2301      	movs	r3, #1
 800747c:	4631      	mov	r1, r6
 800747e:	4628      	mov	r0, r5
 8007480:	4a19      	ldr	r2, [pc, #100]	; (80074e8 <_printf_float+0x2e0>)
 8007482:	47b8      	blx	r7
 8007484:	3001      	adds	r0, #1
 8007486:	f43f af1a 	beq.w	80072be <_printf_float+0xb6>
 800748a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800748e:	4313      	orrs	r3, r2
 8007490:	d102      	bne.n	8007498 <_printf_float+0x290>
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	07d9      	lsls	r1, r3, #31
 8007496:	d5d8      	bpl.n	800744a <_printf_float+0x242>
 8007498:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800749c:	4631      	mov	r1, r6
 800749e:	4628      	mov	r0, r5
 80074a0:	47b8      	blx	r7
 80074a2:	3001      	adds	r0, #1
 80074a4:	f43f af0b 	beq.w	80072be <_printf_float+0xb6>
 80074a8:	f04f 0900 	mov.w	r9, #0
 80074ac:	f104 0a1a 	add.w	sl, r4, #26
 80074b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074b2:	425b      	negs	r3, r3
 80074b4:	454b      	cmp	r3, r9
 80074b6:	dc01      	bgt.n	80074bc <_printf_float+0x2b4>
 80074b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80074ba:	e794      	b.n	80073e6 <_printf_float+0x1de>
 80074bc:	2301      	movs	r3, #1
 80074be:	4652      	mov	r2, sl
 80074c0:	4631      	mov	r1, r6
 80074c2:	4628      	mov	r0, r5
 80074c4:	47b8      	blx	r7
 80074c6:	3001      	adds	r0, #1
 80074c8:	f43f aef9 	beq.w	80072be <_printf_float+0xb6>
 80074cc:	f109 0901 	add.w	r9, r9, #1
 80074d0:	e7ee      	b.n	80074b0 <_printf_float+0x2a8>
 80074d2:	bf00      	nop
 80074d4:	7fefffff 	.word	0x7fefffff
 80074d8:	0800a2a5 	.word	0x0800a2a5
 80074dc:	0800a2a9 	.word	0x0800a2a9
 80074e0:	0800a2b1 	.word	0x0800a2b1
 80074e4:	0800a2ad 	.word	0x0800a2ad
 80074e8:	0800a2b5 	.word	0x0800a2b5
 80074ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80074f0:	429a      	cmp	r2, r3
 80074f2:	bfa8      	it	ge
 80074f4:	461a      	movge	r2, r3
 80074f6:	2a00      	cmp	r2, #0
 80074f8:	4691      	mov	r9, r2
 80074fa:	dc37      	bgt.n	800756c <_printf_float+0x364>
 80074fc:	f04f 0b00 	mov.w	fp, #0
 8007500:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007504:	f104 021a 	add.w	r2, r4, #26
 8007508:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800750c:	ebaa 0309 	sub.w	r3, sl, r9
 8007510:	455b      	cmp	r3, fp
 8007512:	dc33      	bgt.n	800757c <_printf_float+0x374>
 8007514:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007518:	429a      	cmp	r2, r3
 800751a:	db3b      	blt.n	8007594 <_printf_float+0x38c>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	07da      	lsls	r2, r3, #31
 8007520:	d438      	bmi.n	8007594 <_printf_float+0x38c>
 8007522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007524:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007526:	eba3 020a 	sub.w	r2, r3, sl
 800752a:	eba3 0901 	sub.w	r9, r3, r1
 800752e:	4591      	cmp	r9, r2
 8007530:	bfa8      	it	ge
 8007532:	4691      	movge	r9, r2
 8007534:	f1b9 0f00 	cmp.w	r9, #0
 8007538:	dc34      	bgt.n	80075a4 <_printf_float+0x39c>
 800753a:	f04f 0800 	mov.w	r8, #0
 800753e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007542:	f104 0a1a 	add.w	sl, r4, #26
 8007546:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800754a:	1a9b      	subs	r3, r3, r2
 800754c:	eba3 0309 	sub.w	r3, r3, r9
 8007550:	4543      	cmp	r3, r8
 8007552:	f77f af7a 	ble.w	800744a <_printf_float+0x242>
 8007556:	2301      	movs	r3, #1
 8007558:	4652      	mov	r2, sl
 800755a:	4631      	mov	r1, r6
 800755c:	4628      	mov	r0, r5
 800755e:	47b8      	blx	r7
 8007560:	3001      	adds	r0, #1
 8007562:	f43f aeac 	beq.w	80072be <_printf_float+0xb6>
 8007566:	f108 0801 	add.w	r8, r8, #1
 800756a:	e7ec      	b.n	8007546 <_printf_float+0x33e>
 800756c:	4613      	mov	r3, r2
 800756e:	4631      	mov	r1, r6
 8007570:	4642      	mov	r2, r8
 8007572:	4628      	mov	r0, r5
 8007574:	47b8      	blx	r7
 8007576:	3001      	adds	r0, #1
 8007578:	d1c0      	bne.n	80074fc <_printf_float+0x2f4>
 800757a:	e6a0      	b.n	80072be <_printf_float+0xb6>
 800757c:	2301      	movs	r3, #1
 800757e:	4631      	mov	r1, r6
 8007580:	4628      	mov	r0, r5
 8007582:	920b      	str	r2, [sp, #44]	; 0x2c
 8007584:	47b8      	blx	r7
 8007586:	3001      	adds	r0, #1
 8007588:	f43f ae99 	beq.w	80072be <_printf_float+0xb6>
 800758c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800758e:	f10b 0b01 	add.w	fp, fp, #1
 8007592:	e7b9      	b.n	8007508 <_printf_float+0x300>
 8007594:	4631      	mov	r1, r6
 8007596:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800759a:	4628      	mov	r0, r5
 800759c:	47b8      	blx	r7
 800759e:	3001      	adds	r0, #1
 80075a0:	d1bf      	bne.n	8007522 <_printf_float+0x31a>
 80075a2:	e68c      	b.n	80072be <_printf_float+0xb6>
 80075a4:	464b      	mov	r3, r9
 80075a6:	4631      	mov	r1, r6
 80075a8:	4628      	mov	r0, r5
 80075aa:	eb08 020a 	add.w	r2, r8, sl
 80075ae:	47b8      	blx	r7
 80075b0:	3001      	adds	r0, #1
 80075b2:	d1c2      	bne.n	800753a <_printf_float+0x332>
 80075b4:	e683      	b.n	80072be <_printf_float+0xb6>
 80075b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075b8:	2a01      	cmp	r2, #1
 80075ba:	dc01      	bgt.n	80075c0 <_printf_float+0x3b8>
 80075bc:	07db      	lsls	r3, r3, #31
 80075be:	d537      	bpl.n	8007630 <_printf_float+0x428>
 80075c0:	2301      	movs	r3, #1
 80075c2:	4642      	mov	r2, r8
 80075c4:	4631      	mov	r1, r6
 80075c6:	4628      	mov	r0, r5
 80075c8:	47b8      	blx	r7
 80075ca:	3001      	adds	r0, #1
 80075cc:	f43f ae77 	beq.w	80072be <_printf_float+0xb6>
 80075d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075d4:	4631      	mov	r1, r6
 80075d6:	4628      	mov	r0, r5
 80075d8:	47b8      	blx	r7
 80075da:	3001      	adds	r0, #1
 80075dc:	f43f ae6f 	beq.w	80072be <_printf_float+0xb6>
 80075e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80075e4:	2200      	movs	r2, #0
 80075e6:	2300      	movs	r3, #0
 80075e8:	f7f9 f9de 	bl	80009a8 <__aeabi_dcmpeq>
 80075ec:	b9d8      	cbnz	r0, 8007626 <_printf_float+0x41e>
 80075ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075f0:	f108 0201 	add.w	r2, r8, #1
 80075f4:	3b01      	subs	r3, #1
 80075f6:	4631      	mov	r1, r6
 80075f8:	4628      	mov	r0, r5
 80075fa:	47b8      	blx	r7
 80075fc:	3001      	adds	r0, #1
 80075fe:	d10e      	bne.n	800761e <_printf_float+0x416>
 8007600:	e65d      	b.n	80072be <_printf_float+0xb6>
 8007602:	2301      	movs	r3, #1
 8007604:	464a      	mov	r2, r9
 8007606:	4631      	mov	r1, r6
 8007608:	4628      	mov	r0, r5
 800760a:	47b8      	blx	r7
 800760c:	3001      	adds	r0, #1
 800760e:	f43f ae56 	beq.w	80072be <_printf_float+0xb6>
 8007612:	f108 0801 	add.w	r8, r8, #1
 8007616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007618:	3b01      	subs	r3, #1
 800761a:	4543      	cmp	r3, r8
 800761c:	dcf1      	bgt.n	8007602 <_printf_float+0x3fa>
 800761e:	4653      	mov	r3, sl
 8007620:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007624:	e6e0      	b.n	80073e8 <_printf_float+0x1e0>
 8007626:	f04f 0800 	mov.w	r8, #0
 800762a:	f104 091a 	add.w	r9, r4, #26
 800762e:	e7f2      	b.n	8007616 <_printf_float+0x40e>
 8007630:	2301      	movs	r3, #1
 8007632:	4642      	mov	r2, r8
 8007634:	e7df      	b.n	80075f6 <_printf_float+0x3ee>
 8007636:	2301      	movs	r3, #1
 8007638:	464a      	mov	r2, r9
 800763a:	4631      	mov	r1, r6
 800763c:	4628      	mov	r0, r5
 800763e:	47b8      	blx	r7
 8007640:	3001      	adds	r0, #1
 8007642:	f43f ae3c 	beq.w	80072be <_printf_float+0xb6>
 8007646:	f108 0801 	add.w	r8, r8, #1
 800764a:	68e3      	ldr	r3, [r4, #12]
 800764c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800764e:	1a5b      	subs	r3, r3, r1
 8007650:	4543      	cmp	r3, r8
 8007652:	dcf0      	bgt.n	8007636 <_printf_float+0x42e>
 8007654:	e6fd      	b.n	8007452 <_printf_float+0x24a>
 8007656:	f04f 0800 	mov.w	r8, #0
 800765a:	f104 0919 	add.w	r9, r4, #25
 800765e:	e7f4      	b.n	800764a <_printf_float+0x442>

08007660 <_printf_common>:
 8007660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007664:	4616      	mov	r6, r2
 8007666:	4699      	mov	r9, r3
 8007668:	688a      	ldr	r2, [r1, #8]
 800766a:	690b      	ldr	r3, [r1, #16]
 800766c:	4607      	mov	r7, r0
 800766e:	4293      	cmp	r3, r2
 8007670:	bfb8      	it	lt
 8007672:	4613      	movlt	r3, r2
 8007674:	6033      	str	r3, [r6, #0]
 8007676:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800767a:	460c      	mov	r4, r1
 800767c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007680:	b10a      	cbz	r2, 8007686 <_printf_common+0x26>
 8007682:	3301      	adds	r3, #1
 8007684:	6033      	str	r3, [r6, #0]
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	0699      	lsls	r1, r3, #26
 800768a:	bf42      	ittt	mi
 800768c:	6833      	ldrmi	r3, [r6, #0]
 800768e:	3302      	addmi	r3, #2
 8007690:	6033      	strmi	r3, [r6, #0]
 8007692:	6825      	ldr	r5, [r4, #0]
 8007694:	f015 0506 	ands.w	r5, r5, #6
 8007698:	d106      	bne.n	80076a8 <_printf_common+0x48>
 800769a:	f104 0a19 	add.w	sl, r4, #25
 800769e:	68e3      	ldr	r3, [r4, #12]
 80076a0:	6832      	ldr	r2, [r6, #0]
 80076a2:	1a9b      	subs	r3, r3, r2
 80076a4:	42ab      	cmp	r3, r5
 80076a6:	dc28      	bgt.n	80076fa <_printf_common+0x9a>
 80076a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076ac:	1e13      	subs	r3, r2, #0
 80076ae:	6822      	ldr	r2, [r4, #0]
 80076b0:	bf18      	it	ne
 80076b2:	2301      	movne	r3, #1
 80076b4:	0692      	lsls	r2, r2, #26
 80076b6:	d42d      	bmi.n	8007714 <_printf_common+0xb4>
 80076b8:	4649      	mov	r1, r9
 80076ba:	4638      	mov	r0, r7
 80076bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076c0:	47c0      	blx	r8
 80076c2:	3001      	adds	r0, #1
 80076c4:	d020      	beq.n	8007708 <_printf_common+0xa8>
 80076c6:	6823      	ldr	r3, [r4, #0]
 80076c8:	68e5      	ldr	r5, [r4, #12]
 80076ca:	f003 0306 	and.w	r3, r3, #6
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	bf18      	it	ne
 80076d2:	2500      	movne	r5, #0
 80076d4:	6832      	ldr	r2, [r6, #0]
 80076d6:	f04f 0600 	mov.w	r6, #0
 80076da:	68a3      	ldr	r3, [r4, #8]
 80076dc:	bf08      	it	eq
 80076de:	1aad      	subeq	r5, r5, r2
 80076e0:	6922      	ldr	r2, [r4, #16]
 80076e2:	bf08      	it	eq
 80076e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076e8:	4293      	cmp	r3, r2
 80076ea:	bfc4      	itt	gt
 80076ec:	1a9b      	subgt	r3, r3, r2
 80076ee:	18ed      	addgt	r5, r5, r3
 80076f0:	341a      	adds	r4, #26
 80076f2:	42b5      	cmp	r5, r6
 80076f4:	d11a      	bne.n	800772c <_printf_common+0xcc>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e008      	b.n	800770c <_printf_common+0xac>
 80076fa:	2301      	movs	r3, #1
 80076fc:	4652      	mov	r2, sl
 80076fe:	4649      	mov	r1, r9
 8007700:	4638      	mov	r0, r7
 8007702:	47c0      	blx	r8
 8007704:	3001      	adds	r0, #1
 8007706:	d103      	bne.n	8007710 <_printf_common+0xb0>
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007710:	3501      	adds	r5, #1
 8007712:	e7c4      	b.n	800769e <_printf_common+0x3e>
 8007714:	2030      	movs	r0, #48	; 0x30
 8007716:	18e1      	adds	r1, r4, r3
 8007718:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007722:	4422      	add	r2, r4
 8007724:	3302      	adds	r3, #2
 8007726:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800772a:	e7c5      	b.n	80076b8 <_printf_common+0x58>
 800772c:	2301      	movs	r3, #1
 800772e:	4622      	mov	r2, r4
 8007730:	4649      	mov	r1, r9
 8007732:	4638      	mov	r0, r7
 8007734:	47c0      	blx	r8
 8007736:	3001      	adds	r0, #1
 8007738:	d0e6      	beq.n	8007708 <_printf_common+0xa8>
 800773a:	3601      	adds	r6, #1
 800773c:	e7d9      	b.n	80076f2 <_printf_common+0x92>
	...

08007740 <_printf_i>:
 8007740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007744:	7e0f      	ldrb	r7, [r1, #24]
 8007746:	4691      	mov	r9, r2
 8007748:	2f78      	cmp	r7, #120	; 0x78
 800774a:	4680      	mov	r8, r0
 800774c:	460c      	mov	r4, r1
 800774e:	469a      	mov	sl, r3
 8007750:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007752:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007756:	d807      	bhi.n	8007768 <_printf_i+0x28>
 8007758:	2f62      	cmp	r7, #98	; 0x62
 800775a:	d80a      	bhi.n	8007772 <_printf_i+0x32>
 800775c:	2f00      	cmp	r7, #0
 800775e:	f000 80d9 	beq.w	8007914 <_printf_i+0x1d4>
 8007762:	2f58      	cmp	r7, #88	; 0x58
 8007764:	f000 80a4 	beq.w	80078b0 <_printf_i+0x170>
 8007768:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800776c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007770:	e03a      	b.n	80077e8 <_printf_i+0xa8>
 8007772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007776:	2b15      	cmp	r3, #21
 8007778:	d8f6      	bhi.n	8007768 <_printf_i+0x28>
 800777a:	a101      	add	r1, pc, #4	; (adr r1, 8007780 <_printf_i+0x40>)
 800777c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007780:	080077d9 	.word	0x080077d9
 8007784:	080077ed 	.word	0x080077ed
 8007788:	08007769 	.word	0x08007769
 800778c:	08007769 	.word	0x08007769
 8007790:	08007769 	.word	0x08007769
 8007794:	08007769 	.word	0x08007769
 8007798:	080077ed 	.word	0x080077ed
 800779c:	08007769 	.word	0x08007769
 80077a0:	08007769 	.word	0x08007769
 80077a4:	08007769 	.word	0x08007769
 80077a8:	08007769 	.word	0x08007769
 80077ac:	080078fb 	.word	0x080078fb
 80077b0:	0800781d 	.word	0x0800781d
 80077b4:	080078dd 	.word	0x080078dd
 80077b8:	08007769 	.word	0x08007769
 80077bc:	08007769 	.word	0x08007769
 80077c0:	0800791d 	.word	0x0800791d
 80077c4:	08007769 	.word	0x08007769
 80077c8:	0800781d 	.word	0x0800781d
 80077cc:	08007769 	.word	0x08007769
 80077d0:	08007769 	.word	0x08007769
 80077d4:	080078e5 	.word	0x080078e5
 80077d8:	682b      	ldr	r3, [r5, #0]
 80077da:	1d1a      	adds	r2, r3, #4
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	602a      	str	r2, [r5, #0]
 80077e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077e8:	2301      	movs	r3, #1
 80077ea:	e0a4      	b.n	8007936 <_printf_i+0x1f6>
 80077ec:	6820      	ldr	r0, [r4, #0]
 80077ee:	6829      	ldr	r1, [r5, #0]
 80077f0:	0606      	lsls	r6, r0, #24
 80077f2:	f101 0304 	add.w	r3, r1, #4
 80077f6:	d50a      	bpl.n	800780e <_printf_i+0xce>
 80077f8:	680e      	ldr	r6, [r1, #0]
 80077fa:	602b      	str	r3, [r5, #0]
 80077fc:	2e00      	cmp	r6, #0
 80077fe:	da03      	bge.n	8007808 <_printf_i+0xc8>
 8007800:	232d      	movs	r3, #45	; 0x2d
 8007802:	4276      	negs	r6, r6
 8007804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007808:	230a      	movs	r3, #10
 800780a:	485e      	ldr	r0, [pc, #376]	; (8007984 <_printf_i+0x244>)
 800780c:	e019      	b.n	8007842 <_printf_i+0x102>
 800780e:	680e      	ldr	r6, [r1, #0]
 8007810:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007814:	602b      	str	r3, [r5, #0]
 8007816:	bf18      	it	ne
 8007818:	b236      	sxthne	r6, r6
 800781a:	e7ef      	b.n	80077fc <_printf_i+0xbc>
 800781c:	682b      	ldr	r3, [r5, #0]
 800781e:	6820      	ldr	r0, [r4, #0]
 8007820:	1d19      	adds	r1, r3, #4
 8007822:	6029      	str	r1, [r5, #0]
 8007824:	0601      	lsls	r1, r0, #24
 8007826:	d501      	bpl.n	800782c <_printf_i+0xec>
 8007828:	681e      	ldr	r6, [r3, #0]
 800782a:	e002      	b.n	8007832 <_printf_i+0xf2>
 800782c:	0646      	lsls	r6, r0, #25
 800782e:	d5fb      	bpl.n	8007828 <_printf_i+0xe8>
 8007830:	881e      	ldrh	r6, [r3, #0]
 8007832:	2f6f      	cmp	r7, #111	; 0x6f
 8007834:	bf0c      	ite	eq
 8007836:	2308      	moveq	r3, #8
 8007838:	230a      	movne	r3, #10
 800783a:	4852      	ldr	r0, [pc, #328]	; (8007984 <_printf_i+0x244>)
 800783c:	2100      	movs	r1, #0
 800783e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007842:	6865      	ldr	r5, [r4, #4]
 8007844:	2d00      	cmp	r5, #0
 8007846:	bfa8      	it	ge
 8007848:	6821      	ldrge	r1, [r4, #0]
 800784a:	60a5      	str	r5, [r4, #8]
 800784c:	bfa4      	itt	ge
 800784e:	f021 0104 	bicge.w	r1, r1, #4
 8007852:	6021      	strge	r1, [r4, #0]
 8007854:	b90e      	cbnz	r6, 800785a <_printf_i+0x11a>
 8007856:	2d00      	cmp	r5, #0
 8007858:	d04d      	beq.n	80078f6 <_printf_i+0x1b6>
 800785a:	4615      	mov	r5, r2
 800785c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007860:	fb03 6711 	mls	r7, r3, r1, r6
 8007864:	5dc7      	ldrb	r7, [r0, r7]
 8007866:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800786a:	4637      	mov	r7, r6
 800786c:	42bb      	cmp	r3, r7
 800786e:	460e      	mov	r6, r1
 8007870:	d9f4      	bls.n	800785c <_printf_i+0x11c>
 8007872:	2b08      	cmp	r3, #8
 8007874:	d10b      	bne.n	800788e <_printf_i+0x14e>
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	07de      	lsls	r6, r3, #31
 800787a:	d508      	bpl.n	800788e <_printf_i+0x14e>
 800787c:	6923      	ldr	r3, [r4, #16]
 800787e:	6861      	ldr	r1, [r4, #4]
 8007880:	4299      	cmp	r1, r3
 8007882:	bfde      	ittt	le
 8007884:	2330      	movle	r3, #48	; 0x30
 8007886:	f805 3c01 	strble.w	r3, [r5, #-1]
 800788a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800788e:	1b52      	subs	r2, r2, r5
 8007890:	6122      	str	r2, [r4, #16]
 8007892:	464b      	mov	r3, r9
 8007894:	4621      	mov	r1, r4
 8007896:	4640      	mov	r0, r8
 8007898:	f8cd a000 	str.w	sl, [sp]
 800789c:	aa03      	add	r2, sp, #12
 800789e:	f7ff fedf 	bl	8007660 <_printf_common>
 80078a2:	3001      	adds	r0, #1
 80078a4:	d14c      	bne.n	8007940 <_printf_i+0x200>
 80078a6:	f04f 30ff 	mov.w	r0, #4294967295
 80078aa:	b004      	add	sp, #16
 80078ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b0:	4834      	ldr	r0, [pc, #208]	; (8007984 <_printf_i+0x244>)
 80078b2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078b6:	6829      	ldr	r1, [r5, #0]
 80078b8:	6823      	ldr	r3, [r4, #0]
 80078ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80078be:	6029      	str	r1, [r5, #0]
 80078c0:	061d      	lsls	r5, r3, #24
 80078c2:	d514      	bpl.n	80078ee <_printf_i+0x1ae>
 80078c4:	07df      	lsls	r7, r3, #31
 80078c6:	bf44      	itt	mi
 80078c8:	f043 0320 	orrmi.w	r3, r3, #32
 80078cc:	6023      	strmi	r3, [r4, #0]
 80078ce:	b91e      	cbnz	r6, 80078d8 <_printf_i+0x198>
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	f023 0320 	bic.w	r3, r3, #32
 80078d6:	6023      	str	r3, [r4, #0]
 80078d8:	2310      	movs	r3, #16
 80078da:	e7af      	b.n	800783c <_printf_i+0xfc>
 80078dc:	6823      	ldr	r3, [r4, #0]
 80078de:	f043 0320 	orr.w	r3, r3, #32
 80078e2:	6023      	str	r3, [r4, #0]
 80078e4:	2378      	movs	r3, #120	; 0x78
 80078e6:	4828      	ldr	r0, [pc, #160]	; (8007988 <_printf_i+0x248>)
 80078e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078ec:	e7e3      	b.n	80078b6 <_printf_i+0x176>
 80078ee:	0659      	lsls	r1, r3, #25
 80078f0:	bf48      	it	mi
 80078f2:	b2b6      	uxthmi	r6, r6
 80078f4:	e7e6      	b.n	80078c4 <_printf_i+0x184>
 80078f6:	4615      	mov	r5, r2
 80078f8:	e7bb      	b.n	8007872 <_printf_i+0x132>
 80078fa:	682b      	ldr	r3, [r5, #0]
 80078fc:	6826      	ldr	r6, [r4, #0]
 80078fe:	1d18      	adds	r0, r3, #4
 8007900:	6961      	ldr	r1, [r4, #20]
 8007902:	6028      	str	r0, [r5, #0]
 8007904:	0635      	lsls	r5, r6, #24
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	d501      	bpl.n	800790e <_printf_i+0x1ce>
 800790a:	6019      	str	r1, [r3, #0]
 800790c:	e002      	b.n	8007914 <_printf_i+0x1d4>
 800790e:	0670      	lsls	r0, r6, #25
 8007910:	d5fb      	bpl.n	800790a <_printf_i+0x1ca>
 8007912:	8019      	strh	r1, [r3, #0]
 8007914:	2300      	movs	r3, #0
 8007916:	4615      	mov	r5, r2
 8007918:	6123      	str	r3, [r4, #16]
 800791a:	e7ba      	b.n	8007892 <_printf_i+0x152>
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	2100      	movs	r1, #0
 8007920:	1d1a      	adds	r2, r3, #4
 8007922:	602a      	str	r2, [r5, #0]
 8007924:	681d      	ldr	r5, [r3, #0]
 8007926:	6862      	ldr	r2, [r4, #4]
 8007928:	4628      	mov	r0, r5
 800792a:	f001 f9bb 	bl	8008ca4 <memchr>
 800792e:	b108      	cbz	r0, 8007934 <_printf_i+0x1f4>
 8007930:	1b40      	subs	r0, r0, r5
 8007932:	6060      	str	r0, [r4, #4]
 8007934:	6863      	ldr	r3, [r4, #4]
 8007936:	6123      	str	r3, [r4, #16]
 8007938:	2300      	movs	r3, #0
 800793a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800793e:	e7a8      	b.n	8007892 <_printf_i+0x152>
 8007940:	462a      	mov	r2, r5
 8007942:	4649      	mov	r1, r9
 8007944:	4640      	mov	r0, r8
 8007946:	6923      	ldr	r3, [r4, #16]
 8007948:	47d0      	blx	sl
 800794a:	3001      	adds	r0, #1
 800794c:	d0ab      	beq.n	80078a6 <_printf_i+0x166>
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	079b      	lsls	r3, r3, #30
 8007952:	d413      	bmi.n	800797c <_printf_i+0x23c>
 8007954:	68e0      	ldr	r0, [r4, #12]
 8007956:	9b03      	ldr	r3, [sp, #12]
 8007958:	4298      	cmp	r0, r3
 800795a:	bfb8      	it	lt
 800795c:	4618      	movlt	r0, r3
 800795e:	e7a4      	b.n	80078aa <_printf_i+0x16a>
 8007960:	2301      	movs	r3, #1
 8007962:	4632      	mov	r2, r6
 8007964:	4649      	mov	r1, r9
 8007966:	4640      	mov	r0, r8
 8007968:	47d0      	blx	sl
 800796a:	3001      	adds	r0, #1
 800796c:	d09b      	beq.n	80078a6 <_printf_i+0x166>
 800796e:	3501      	adds	r5, #1
 8007970:	68e3      	ldr	r3, [r4, #12]
 8007972:	9903      	ldr	r1, [sp, #12]
 8007974:	1a5b      	subs	r3, r3, r1
 8007976:	42ab      	cmp	r3, r5
 8007978:	dcf2      	bgt.n	8007960 <_printf_i+0x220>
 800797a:	e7eb      	b.n	8007954 <_printf_i+0x214>
 800797c:	2500      	movs	r5, #0
 800797e:	f104 0619 	add.w	r6, r4, #25
 8007982:	e7f5      	b.n	8007970 <_printf_i+0x230>
 8007984:	0800a2b7 	.word	0x0800a2b7
 8007988:	0800a2c8 	.word	0x0800a2c8

0800798c <siprintf>:
 800798c:	b40e      	push	{r1, r2, r3}
 800798e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007992:	b500      	push	{lr}
 8007994:	b09c      	sub	sp, #112	; 0x70
 8007996:	ab1d      	add	r3, sp, #116	; 0x74
 8007998:	9002      	str	r0, [sp, #8]
 800799a:	9006      	str	r0, [sp, #24]
 800799c:	9107      	str	r1, [sp, #28]
 800799e:	9104      	str	r1, [sp, #16]
 80079a0:	4808      	ldr	r0, [pc, #32]	; (80079c4 <siprintf+0x38>)
 80079a2:	4909      	ldr	r1, [pc, #36]	; (80079c8 <siprintf+0x3c>)
 80079a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80079a8:	9105      	str	r1, [sp, #20]
 80079aa:	6800      	ldr	r0, [r0, #0]
 80079ac:	a902      	add	r1, sp, #8
 80079ae:	9301      	str	r3, [sp, #4]
 80079b0:	f001 fe9c 	bl	80096ec <_svfiprintf_r>
 80079b4:	2200      	movs	r2, #0
 80079b6:	9b02      	ldr	r3, [sp, #8]
 80079b8:	701a      	strb	r2, [r3, #0]
 80079ba:	b01c      	add	sp, #112	; 0x70
 80079bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80079c0:	b003      	add	sp, #12
 80079c2:	4770      	bx	lr
 80079c4:	20000018 	.word	0x20000018
 80079c8:	ffff0208 	.word	0xffff0208

080079cc <__swbuf_r>:
 80079cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ce:	460e      	mov	r6, r1
 80079d0:	4614      	mov	r4, r2
 80079d2:	4605      	mov	r5, r0
 80079d4:	b118      	cbz	r0, 80079de <__swbuf_r+0x12>
 80079d6:	6983      	ldr	r3, [r0, #24]
 80079d8:	b90b      	cbnz	r3, 80079de <__swbuf_r+0x12>
 80079da:	f001 f851 	bl	8008a80 <__sinit>
 80079de:	4b21      	ldr	r3, [pc, #132]	; (8007a64 <__swbuf_r+0x98>)
 80079e0:	429c      	cmp	r4, r3
 80079e2:	d12b      	bne.n	8007a3c <__swbuf_r+0x70>
 80079e4:	686c      	ldr	r4, [r5, #4]
 80079e6:	69a3      	ldr	r3, [r4, #24]
 80079e8:	60a3      	str	r3, [r4, #8]
 80079ea:	89a3      	ldrh	r3, [r4, #12]
 80079ec:	071a      	lsls	r2, r3, #28
 80079ee:	d52f      	bpl.n	8007a50 <__swbuf_r+0x84>
 80079f0:	6923      	ldr	r3, [r4, #16]
 80079f2:	b36b      	cbz	r3, 8007a50 <__swbuf_r+0x84>
 80079f4:	6923      	ldr	r3, [r4, #16]
 80079f6:	6820      	ldr	r0, [r4, #0]
 80079f8:	b2f6      	uxtb	r6, r6
 80079fa:	1ac0      	subs	r0, r0, r3
 80079fc:	6963      	ldr	r3, [r4, #20]
 80079fe:	4637      	mov	r7, r6
 8007a00:	4283      	cmp	r3, r0
 8007a02:	dc04      	bgt.n	8007a0e <__swbuf_r+0x42>
 8007a04:	4621      	mov	r1, r4
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 ffa6 	bl	8008958 <_fflush_r>
 8007a0c:	bb30      	cbnz	r0, 8007a5c <__swbuf_r+0x90>
 8007a0e:	68a3      	ldr	r3, [r4, #8]
 8007a10:	3001      	adds	r0, #1
 8007a12:	3b01      	subs	r3, #1
 8007a14:	60a3      	str	r3, [r4, #8]
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	6022      	str	r2, [r4, #0]
 8007a1c:	701e      	strb	r6, [r3, #0]
 8007a1e:	6963      	ldr	r3, [r4, #20]
 8007a20:	4283      	cmp	r3, r0
 8007a22:	d004      	beq.n	8007a2e <__swbuf_r+0x62>
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	07db      	lsls	r3, r3, #31
 8007a28:	d506      	bpl.n	8007a38 <__swbuf_r+0x6c>
 8007a2a:	2e0a      	cmp	r6, #10
 8007a2c:	d104      	bne.n	8007a38 <__swbuf_r+0x6c>
 8007a2e:	4621      	mov	r1, r4
 8007a30:	4628      	mov	r0, r5
 8007a32:	f000 ff91 	bl	8008958 <_fflush_r>
 8007a36:	b988      	cbnz	r0, 8007a5c <__swbuf_r+0x90>
 8007a38:	4638      	mov	r0, r7
 8007a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a3c:	4b0a      	ldr	r3, [pc, #40]	; (8007a68 <__swbuf_r+0x9c>)
 8007a3e:	429c      	cmp	r4, r3
 8007a40:	d101      	bne.n	8007a46 <__swbuf_r+0x7a>
 8007a42:	68ac      	ldr	r4, [r5, #8]
 8007a44:	e7cf      	b.n	80079e6 <__swbuf_r+0x1a>
 8007a46:	4b09      	ldr	r3, [pc, #36]	; (8007a6c <__swbuf_r+0xa0>)
 8007a48:	429c      	cmp	r4, r3
 8007a4a:	bf08      	it	eq
 8007a4c:	68ec      	ldreq	r4, [r5, #12]
 8007a4e:	e7ca      	b.n	80079e6 <__swbuf_r+0x1a>
 8007a50:	4621      	mov	r1, r4
 8007a52:	4628      	mov	r0, r5
 8007a54:	f000 f80c 	bl	8007a70 <__swsetup_r>
 8007a58:	2800      	cmp	r0, #0
 8007a5a:	d0cb      	beq.n	80079f4 <__swbuf_r+0x28>
 8007a5c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a60:	e7ea      	b.n	8007a38 <__swbuf_r+0x6c>
 8007a62:	bf00      	nop
 8007a64:	0800a38c 	.word	0x0800a38c
 8007a68:	0800a3ac 	.word	0x0800a3ac
 8007a6c:	0800a36c 	.word	0x0800a36c

08007a70 <__swsetup_r>:
 8007a70:	4b32      	ldr	r3, [pc, #200]	; (8007b3c <__swsetup_r+0xcc>)
 8007a72:	b570      	push	{r4, r5, r6, lr}
 8007a74:	681d      	ldr	r5, [r3, #0]
 8007a76:	4606      	mov	r6, r0
 8007a78:	460c      	mov	r4, r1
 8007a7a:	b125      	cbz	r5, 8007a86 <__swsetup_r+0x16>
 8007a7c:	69ab      	ldr	r3, [r5, #24]
 8007a7e:	b913      	cbnz	r3, 8007a86 <__swsetup_r+0x16>
 8007a80:	4628      	mov	r0, r5
 8007a82:	f000 fffd 	bl	8008a80 <__sinit>
 8007a86:	4b2e      	ldr	r3, [pc, #184]	; (8007b40 <__swsetup_r+0xd0>)
 8007a88:	429c      	cmp	r4, r3
 8007a8a:	d10f      	bne.n	8007aac <__swsetup_r+0x3c>
 8007a8c:	686c      	ldr	r4, [r5, #4]
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a94:	0719      	lsls	r1, r3, #28
 8007a96:	d42c      	bmi.n	8007af2 <__swsetup_r+0x82>
 8007a98:	06dd      	lsls	r5, r3, #27
 8007a9a:	d411      	bmi.n	8007ac0 <__swsetup_r+0x50>
 8007a9c:	2309      	movs	r3, #9
 8007a9e:	6033      	str	r3, [r6, #0]
 8007aa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa8:	81a3      	strh	r3, [r4, #12]
 8007aaa:	e03e      	b.n	8007b2a <__swsetup_r+0xba>
 8007aac:	4b25      	ldr	r3, [pc, #148]	; (8007b44 <__swsetup_r+0xd4>)
 8007aae:	429c      	cmp	r4, r3
 8007ab0:	d101      	bne.n	8007ab6 <__swsetup_r+0x46>
 8007ab2:	68ac      	ldr	r4, [r5, #8]
 8007ab4:	e7eb      	b.n	8007a8e <__swsetup_r+0x1e>
 8007ab6:	4b24      	ldr	r3, [pc, #144]	; (8007b48 <__swsetup_r+0xd8>)
 8007ab8:	429c      	cmp	r4, r3
 8007aba:	bf08      	it	eq
 8007abc:	68ec      	ldreq	r4, [r5, #12]
 8007abe:	e7e6      	b.n	8007a8e <__swsetup_r+0x1e>
 8007ac0:	0758      	lsls	r0, r3, #29
 8007ac2:	d512      	bpl.n	8007aea <__swsetup_r+0x7a>
 8007ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ac6:	b141      	cbz	r1, 8007ada <__swsetup_r+0x6a>
 8007ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007acc:	4299      	cmp	r1, r3
 8007ace:	d002      	beq.n	8007ad6 <__swsetup_r+0x66>
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	f001 fca5 	bl	8009420 <_free_r>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	6363      	str	r3, [r4, #52]	; 0x34
 8007ada:	89a3      	ldrh	r3, [r4, #12]
 8007adc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ae0:	81a3      	strh	r3, [r4, #12]
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	6063      	str	r3, [r4, #4]
 8007ae6:	6923      	ldr	r3, [r4, #16]
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	89a3      	ldrh	r3, [r4, #12]
 8007aec:	f043 0308 	orr.w	r3, r3, #8
 8007af0:	81a3      	strh	r3, [r4, #12]
 8007af2:	6923      	ldr	r3, [r4, #16]
 8007af4:	b94b      	cbnz	r3, 8007b0a <__swsetup_r+0x9a>
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b00:	d003      	beq.n	8007b0a <__swsetup_r+0x9a>
 8007b02:	4621      	mov	r1, r4
 8007b04:	4630      	mov	r0, r6
 8007b06:	f001 f885 	bl	8008c14 <__smakebuf_r>
 8007b0a:	89a0      	ldrh	r0, [r4, #12]
 8007b0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007b10:	f010 0301 	ands.w	r3, r0, #1
 8007b14:	d00a      	beq.n	8007b2c <__swsetup_r+0xbc>
 8007b16:	2300      	movs	r3, #0
 8007b18:	60a3      	str	r3, [r4, #8]
 8007b1a:	6963      	ldr	r3, [r4, #20]
 8007b1c:	425b      	negs	r3, r3
 8007b1e:	61a3      	str	r3, [r4, #24]
 8007b20:	6923      	ldr	r3, [r4, #16]
 8007b22:	b943      	cbnz	r3, 8007b36 <__swsetup_r+0xc6>
 8007b24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b28:	d1ba      	bne.n	8007aa0 <__swsetup_r+0x30>
 8007b2a:	bd70      	pop	{r4, r5, r6, pc}
 8007b2c:	0781      	lsls	r1, r0, #30
 8007b2e:	bf58      	it	pl
 8007b30:	6963      	ldrpl	r3, [r4, #20]
 8007b32:	60a3      	str	r3, [r4, #8]
 8007b34:	e7f4      	b.n	8007b20 <__swsetup_r+0xb0>
 8007b36:	2000      	movs	r0, #0
 8007b38:	e7f7      	b.n	8007b2a <__swsetup_r+0xba>
 8007b3a:	bf00      	nop
 8007b3c:	20000018 	.word	0x20000018
 8007b40:	0800a38c 	.word	0x0800a38c
 8007b44:	0800a3ac 	.word	0x0800a3ac
 8007b48:	0800a36c 	.word	0x0800a36c

08007b4c <abort>:
 8007b4c:	2006      	movs	r0, #6
 8007b4e:	b508      	push	{r3, lr}
 8007b50:	f001 ff04 	bl	800995c <raise>
 8007b54:	2001      	movs	r0, #1
 8007b56:	f7fb fe74 	bl	8003842 <_exit>

08007b5a <quorem>:
 8007b5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5e:	6903      	ldr	r3, [r0, #16]
 8007b60:	690c      	ldr	r4, [r1, #16]
 8007b62:	4607      	mov	r7, r0
 8007b64:	42a3      	cmp	r3, r4
 8007b66:	f2c0 8082 	blt.w	8007c6e <quorem+0x114>
 8007b6a:	3c01      	subs	r4, #1
 8007b6c:	f100 0514 	add.w	r5, r0, #20
 8007b70:	f101 0814 	add.w	r8, r1, #20
 8007b74:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b82:	3301      	adds	r3, #1
 8007b84:	429a      	cmp	r2, r3
 8007b86:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b8a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b8e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b92:	d331      	bcc.n	8007bf8 <quorem+0x9e>
 8007b94:	f04f 0e00 	mov.w	lr, #0
 8007b98:	4640      	mov	r0, r8
 8007b9a:	46ac      	mov	ip, r5
 8007b9c:	46f2      	mov	sl, lr
 8007b9e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ba2:	b293      	uxth	r3, r2
 8007ba4:	fb06 e303 	mla	r3, r6, r3, lr
 8007ba8:	0c12      	lsrs	r2, r2, #16
 8007baa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	fb06 e202 	mla	r2, r6, r2, lr
 8007bb4:	ebaa 0303 	sub.w	r3, sl, r3
 8007bb8:	f8dc a000 	ldr.w	sl, [ip]
 8007bbc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007bc0:	fa1f fa8a 	uxth.w	sl, sl
 8007bc4:	4453      	add	r3, sl
 8007bc6:	f8dc a000 	ldr.w	sl, [ip]
 8007bca:	b292      	uxth	r2, r2
 8007bcc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007bd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bda:	4581      	cmp	r9, r0
 8007bdc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007be0:	f84c 3b04 	str.w	r3, [ip], #4
 8007be4:	d2db      	bcs.n	8007b9e <quorem+0x44>
 8007be6:	f855 300b 	ldr.w	r3, [r5, fp]
 8007bea:	b92b      	cbnz	r3, 8007bf8 <quorem+0x9e>
 8007bec:	9b01      	ldr	r3, [sp, #4]
 8007bee:	3b04      	subs	r3, #4
 8007bf0:	429d      	cmp	r5, r3
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	d32f      	bcc.n	8007c56 <quorem+0xfc>
 8007bf6:	613c      	str	r4, [r7, #16]
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f001 faf9 	bl	80091f0 <__mcmp>
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	db25      	blt.n	8007c4e <quorem+0xf4>
 8007c02:	4628      	mov	r0, r5
 8007c04:	f04f 0c00 	mov.w	ip, #0
 8007c08:	3601      	adds	r6, #1
 8007c0a:	f858 1b04 	ldr.w	r1, [r8], #4
 8007c0e:	f8d0 e000 	ldr.w	lr, [r0]
 8007c12:	b28b      	uxth	r3, r1
 8007c14:	ebac 0303 	sub.w	r3, ip, r3
 8007c18:	fa1f f28e 	uxth.w	r2, lr
 8007c1c:	4413      	add	r3, r2
 8007c1e:	0c0a      	lsrs	r2, r1, #16
 8007c20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c2e:	45c1      	cmp	r9, r8
 8007c30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c34:	f840 3b04 	str.w	r3, [r0], #4
 8007c38:	d2e7      	bcs.n	8007c0a <quorem+0xb0>
 8007c3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c42:	b922      	cbnz	r2, 8007c4e <quorem+0xf4>
 8007c44:	3b04      	subs	r3, #4
 8007c46:	429d      	cmp	r5, r3
 8007c48:	461a      	mov	r2, r3
 8007c4a:	d30a      	bcc.n	8007c62 <quorem+0x108>
 8007c4c:	613c      	str	r4, [r7, #16]
 8007c4e:	4630      	mov	r0, r6
 8007c50:	b003      	add	sp, #12
 8007c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c56:	6812      	ldr	r2, [r2, #0]
 8007c58:	3b04      	subs	r3, #4
 8007c5a:	2a00      	cmp	r2, #0
 8007c5c:	d1cb      	bne.n	8007bf6 <quorem+0x9c>
 8007c5e:	3c01      	subs	r4, #1
 8007c60:	e7c6      	b.n	8007bf0 <quorem+0x96>
 8007c62:	6812      	ldr	r2, [r2, #0]
 8007c64:	3b04      	subs	r3, #4
 8007c66:	2a00      	cmp	r2, #0
 8007c68:	d1f0      	bne.n	8007c4c <quorem+0xf2>
 8007c6a:	3c01      	subs	r4, #1
 8007c6c:	e7eb      	b.n	8007c46 <quorem+0xec>
 8007c6e:	2000      	movs	r0, #0
 8007c70:	e7ee      	b.n	8007c50 <quorem+0xf6>
 8007c72:	0000      	movs	r0, r0
 8007c74:	0000      	movs	r0, r0
	...

08007c78 <_dtoa_r>:
 8007c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c7c:	4616      	mov	r6, r2
 8007c7e:	461f      	mov	r7, r3
 8007c80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007c82:	b099      	sub	sp, #100	; 0x64
 8007c84:	4605      	mov	r5, r0
 8007c86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007c8a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007c8e:	b974      	cbnz	r4, 8007cae <_dtoa_r+0x36>
 8007c90:	2010      	movs	r0, #16
 8007c92:	f000 ffff 	bl	8008c94 <malloc>
 8007c96:	4602      	mov	r2, r0
 8007c98:	6268      	str	r0, [r5, #36]	; 0x24
 8007c9a:	b920      	cbnz	r0, 8007ca6 <_dtoa_r+0x2e>
 8007c9c:	21ea      	movs	r1, #234	; 0xea
 8007c9e:	4ba8      	ldr	r3, [pc, #672]	; (8007f40 <_dtoa_r+0x2c8>)
 8007ca0:	48a8      	ldr	r0, [pc, #672]	; (8007f44 <_dtoa_r+0x2cc>)
 8007ca2:	f7ff f84b 	bl	8006d3c <__assert_func>
 8007ca6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007caa:	6004      	str	r4, [r0, #0]
 8007cac:	60c4      	str	r4, [r0, #12]
 8007cae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cb0:	6819      	ldr	r1, [r3, #0]
 8007cb2:	b151      	cbz	r1, 8007cca <_dtoa_r+0x52>
 8007cb4:	685a      	ldr	r2, [r3, #4]
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	4093      	lsls	r3, r2
 8007cba:	604a      	str	r2, [r1, #4]
 8007cbc:	608b      	str	r3, [r1, #8]
 8007cbe:	4628      	mov	r0, r5
 8007cc0:	f001 f858 	bl	8008d74 <_Bfree>
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	1e3b      	subs	r3, r7, #0
 8007ccc:	bfaf      	iteee	ge
 8007cce:	2300      	movge	r3, #0
 8007cd0:	2201      	movlt	r2, #1
 8007cd2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007cd6:	9305      	strlt	r3, [sp, #20]
 8007cd8:	bfa8      	it	ge
 8007cda:	f8c8 3000 	strge.w	r3, [r8]
 8007cde:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007ce2:	4b99      	ldr	r3, [pc, #612]	; (8007f48 <_dtoa_r+0x2d0>)
 8007ce4:	bfb8      	it	lt
 8007ce6:	f8c8 2000 	strlt.w	r2, [r8]
 8007cea:	ea33 0309 	bics.w	r3, r3, r9
 8007cee:	d119      	bne.n	8007d24 <_dtoa_r+0xac>
 8007cf0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007cf4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007cfc:	4333      	orrs	r3, r6
 8007cfe:	f000 857f 	beq.w	8008800 <_dtoa_r+0xb88>
 8007d02:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d04:	b953      	cbnz	r3, 8007d1c <_dtoa_r+0xa4>
 8007d06:	4b91      	ldr	r3, [pc, #580]	; (8007f4c <_dtoa_r+0x2d4>)
 8007d08:	e022      	b.n	8007d50 <_dtoa_r+0xd8>
 8007d0a:	4b91      	ldr	r3, [pc, #580]	; (8007f50 <_dtoa_r+0x2d8>)
 8007d0c:	9303      	str	r3, [sp, #12]
 8007d0e:	3308      	adds	r3, #8
 8007d10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	9803      	ldr	r0, [sp, #12]
 8007d16:	b019      	add	sp, #100	; 0x64
 8007d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1c:	4b8b      	ldr	r3, [pc, #556]	; (8007f4c <_dtoa_r+0x2d4>)
 8007d1e:	9303      	str	r3, [sp, #12]
 8007d20:	3303      	adds	r3, #3
 8007d22:	e7f5      	b.n	8007d10 <_dtoa_r+0x98>
 8007d24:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007d28:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007d2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d30:	2200      	movs	r2, #0
 8007d32:	2300      	movs	r3, #0
 8007d34:	f7f8 fe38 	bl	80009a8 <__aeabi_dcmpeq>
 8007d38:	4680      	mov	r8, r0
 8007d3a:	b158      	cbz	r0, 8007d54 <_dtoa_r+0xdc>
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 8558 	beq.w	80087fa <_dtoa_r+0xb82>
 8007d4a:	4882      	ldr	r0, [pc, #520]	; (8007f54 <_dtoa_r+0x2dc>)
 8007d4c:	6018      	str	r0, [r3, #0]
 8007d4e:	1e43      	subs	r3, r0, #1
 8007d50:	9303      	str	r3, [sp, #12]
 8007d52:	e7df      	b.n	8007d14 <_dtoa_r+0x9c>
 8007d54:	ab16      	add	r3, sp, #88	; 0x58
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	ab17      	add	r3, sp, #92	; 0x5c
 8007d5a:	9300      	str	r3, [sp, #0]
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d62:	f001 faed 	bl	8009340 <__d2b>
 8007d66:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007d6a:	4683      	mov	fp, r0
 8007d6c:	2c00      	cmp	r4, #0
 8007d6e:	d07f      	beq.n	8007e70 <_dtoa_r+0x1f8>
 8007d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007d76:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d7e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007d82:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007d86:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	4b72      	ldr	r3, [pc, #456]	; (8007f58 <_dtoa_r+0x2e0>)
 8007d8e:	f7f8 f9eb 	bl	8000168 <__aeabi_dsub>
 8007d92:	a365      	add	r3, pc, #404	; (adr r3, 8007f28 <_dtoa_r+0x2b0>)
 8007d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d98:	f7f8 fb9e 	bl	80004d8 <__aeabi_dmul>
 8007d9c:	a364      	add	r3, pc, #400	; (adr r3, 8007f30 <_dtoa_r+0x2b8>)
 8007d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da2:	f7f8 f9e3 	bl	800016c <__adddf3>
 8007da6:	4606      	mov	r6, r0
 8007da8:	4620      	mov	r0, r4
 8007daa:	460f      	mov	r7, r1
 8007dac:	f7f8 fb2a 	bl	8000404 <__aeabi_i2d>
 8007db0:	a361      	add	r3, pc, #388	; (adr r3, 8007f38 <_dtoa_r+0x2c0>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 fb8f 	bl	80004d8 <__aeabi_dmul>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	4639      	mov	r1, r7
 8007dc2:	f7f8 f9d3 	bl	800016c <__adddf3>
 8007dc6:	4606      	mov	r6, r0
 8007dc8:	460f      	mov	r7, r1
 8007dca:	f7f8 fe35 	bl	8000a38 <__aeabi_d2iz>
 8007dce:	2200      	movs	r2, #0
 8007dd0:	4682      	mov	sl, r0
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	4639      	mov	r1, r7
 8007dd8:	f7f8 fdf0 	bl	80009bc <__aeabi_dcmplt>
 8007ddc:	b148      	cbz	r0, 8007df2 <_dtoa_r+0x17a>
 8007dde:	4650      	mov	r0, sl
 8007de0:	f7f8 fb10 	bl	8000404 <__aeabi_i2d>
 8007de4:	4632      	mov	r2, r6
 8007de6:	463b      	mov	r3, r7
 8007de8:	f7f8 fdde 	bl	80009a8 <__aeabi_dcmpeq>
 8007dec:	b908      	cbnz	r0, 8007df2 <_dtoa_r+0x17a>
 8007dee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007df2:	f1ba 0f16 	cmp.w	sl, #22
 8007df6:	d858      	bhi.n	8007eaa <_dtoa_r+0x232>
 8007df8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007dfc:	4b57      	ldr	r3, [pc, #348]	; (8007f5c <_dtoa_r+0x2e4>)
 8007dfe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e06:	f7f8 fdd9 	bl	80009bc <__aeabi_dcmplt>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d04f      	beq.n	8007eae <_dtoa_r+0x236>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e14:	930f      	str	r3, [sp, #60]	; 0x3c
 8007e16:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007e18:	1b1c      	subs	r4, r3, r4
 8007e1a:	1e63      	subs	r3, r4, #1
 8007e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8007e1e:	bf49      	itett	mi
 8007e20:	f1c4 0301 	rsbmi	r3, r4, #1
 8007e24:	2300      	movpl	r3, #0
 8007e26:	9306      	strmi	r3, [sp, #24]
 8007e28:	2300      	movmi	r3, #0
 8007e2a:	bf54      	ite	pl
 8007e2c:	9306      	strpl	r3, [sp, #24]
 8007e2e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007e30:	f1ba 0f00 	cmp.w	sl, #0
 8007e34:	db3d      	blt.n	8007eb2 <_dtoa_r+0x23a>
 8007e36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e38:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007e3c:	4453      	add	r3, sl
 8007e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e40:	2300      	movs	r3, #0
 8007e42:	930a      	str	r3, [sp, #40]	; 0x28
 8007e44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e46:	2b09      	cmp	r3, #9
 8007e48:	f200 808c 	bhi.w	8007f64 <_dtoa_r+0x2ec>
 8007e4c:	2b05      	cmp	r3, #5
 8007e4e:	bfc4      	itt	gt
 8007e50:	3b04      	subgt	r3, #4
 8007e52:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007e54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007e56:	bfc8      	it	gt
 8007e58:	2400      	movgt	r4, #0
 8007e5a:	f1a3 0302 	sub.w	r3, r3, #2
 8007e5e:	bfd8      	it	le
 8007e60:	2401      	movle	r4, #1
 8007e62:	2b03      	cmp	r3, #3
 8007e64:	f200 808a 	bhi.w	8007f7c <_dtoa_r+0x304>
 8007e68:	e8df f003 	tbb	[pc, r3]
 8007e6c:	5b4d4f2d 	.word	0x5b4d4f2d
 8007e70:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007e74:	441c      	add	r4, r3
 8007e76:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007e7a:	2b20      	cmp	r3, #32
 8007e7c:	bfc3      	ittte	gt
 8007e7e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e82:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007e86:	fa09 f303 	lslgt.w	r3, r9, r3
 8007e8a:	f1c3 0320 	rsble	r3, r3, #32
 8007e8e:	bfc6      	itte	gt
 8007e90:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e94:	4318      	orrgt	r0, r3
 8007e96:	fa06 f003 	lslle.w	r0, r6, r3
 8007e9a:	f7f8 faa3 	bl	80003e4 <__aeabi_ui2d>
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007ea4:	3c01      	subs	r4, #1
 8007ea6:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ea8:	e76f      	b.n	8007d8a <_dtoa_r+0x112>
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e7b2      	b.n	8007e14 <_dtoa_r+0x19c>
 8007eae:	900f      	str	r0, [sp, #60]	; 0x3c
 8007eb0:	e7b1      	b.n	8007e16 <_dtoa_r+0x19e>
 8007eb2:	9b06      	ldr	r3, [sp, #24]
 8007eb4:	eba3 030a 	sub.w	r3, r3, sl
 8007eb8:	9306      	str	r3, [sp, #24]
 8007eba:	f1ca 0300 	rsb	r3, sl, #0
 8007ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	930e      	str	r3, [sp, #56]	; 0x38
 8007ec4:	e7be      	b.n	8007e44 <_dtoa_r+0x1cc>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007eca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	dc58      	bgt.n	8007f82 <_dtoa_r+0x30a>
 8007ed0:	f04f 0901 	mov.w	r9, #1
 8007ed4:	464b      	mov	r3, r9
 8007ed6:	f8cd 9020 	str.w	r9, [sp, #32]
 8007eda:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007ede:	2200      	movs	r2, #0
 8007ee0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007ee2:	6042      	str	r2, [r0, #4]
 8007ee4:	2204      	movs	r2, #4
 8007ee6:	f102 0614 	add.w	r6, r2, #20
 8007eea:	429e      	cmp	r6, r3
 8007eec:	6841      	ldr	r1, [r0, #4]
 8007eee:	d94e      	bls.n	8007f8e <_dtoa_r+0x316>
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f000 feff 	bl	8008cf4 <_Balloc>
 8007ef6:	9003      	str	r0, [sp, #12]
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d14c      	bne.n	8007f96 <_dtoa_r+0x31e>
 8007efc:	4602      	mov	r2, r0
 8007efe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f02:	4b17      	ldr	r3, [pc, #92]	; (8007f60 <_dtoa_r+0x2e8>)
 8007f04:	e6cc      	b.n	8007ca0 <_dtoa_r+0x28>
 8007f06:	2301      	movs	r3, #1
 8007f08:	e7de      	b.n	8007ec8 <_dtoa_r+0x250>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007f10:	eb0a 0903 	add.w	r9, sl, r3
 8007f14:	f109 0301 	add.w	r3, r9, #1
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	9308      	str	r3, [sp, #32]
 8007f1c:	bfb8      	it	lt
 8007f1e:	2301      	movlt	r3, #1
 8007f20:	e7dd      	b.n	8007ede <_dtoa_r+0x266>
 8007f22:	2301      	movs	r3, #1
 8007f24:	e7f2      	b.n	8007f0c <_dtoa_r+0x294>
 8007f26:	bf00      	nop
 8007f28:	636f4361 	.word	0x636f4361
 8007f2c:	3fd287a7 	.word	0x3fd287a7
 8007f30:	8b60c8b3 	.word	0x8b60c8b3
 8007f34:	3fc68a28 	.word	0x3fc68a28
 8007f38:	509f79fb 	.word	0x509f79fb
 8007f3c:	3fd34413 	.word	0x3fd34413
 8007f40:	0800a2e6 	.word	0x0800a2e6
 8007f44:	0800a2fd 	.word	0x0800a2fd
 8007f48:	7ff00000 	.word	0x7ff00000
 8007f4c:	0800a2e2 	.word	0x0800a2e2
 8007f50:	0800a2d9 	.word	0x0800a2d9
 8007f54:	0800a2b6 	.word	0x0800a2b6
 8007f58:	3ff80000 	.word	0x3ff80000
 8007f5c:	0800a450 	.word	0x0800a450
 8007f60:	0800a358 	.word	0x0800a358
 8007f64:	2401      	movs	r4, #1
 8007f66:	2300      	movs	r3, #0
 8007f68:	940b      	str	r4, [sp, #44]	; 0x2c
 8007f6a:	9322      	str	r3, [sp, #136]	; 0x88
 8007f6c:	f04f 39ff 	mov.w	r9, #4294967295
 8007f70:	2200      	movs	r2, #0
 8007f72:	2312      	movs	r3, #18
 8007f74:	f8cd 9020 	str.w	r9, [sp, #32]
 8007f78:	9223      	str	r2, [sp, #140]	; 0x8c
 8007f7a:	e7b0      	b.n	8007ede <_dtoa_r+0x266>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007f80:	e7f4      	b.n	8007f6c <_dtoa_r+0x2f4>
 8007f82:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007f86:	464b      	mov	r3, r9
 8007f88:	f8cd 9020 	str.w	r9, [sp, #32]
 8007f8c:	e7a7      	b.n	8007ede <_dtoa_r+0x266>
 8007f8e:	3101      	adds	r1, #1
 8007f90:	6041      	str	r1, [r0, #4]
 8007f92:	0052      	lsls	r2, r2, #1
 8007f94:	e7a7      	b.n	8007ee6 <_dtoa_r+0x26e>
 8007f96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f98:	9a03      	ldr	r2, [sp, #12]
 8007f9a:	601a      	str	r2, [r3, #0]
 8007f9c:	9b08      	ldr	r3, [sp, #32]
 8007f9e:	2b0e      	cmp	r3, #14
 8007fa0:	f200 80a8 	bhi.w	80080f4 <_dtoa_r+0x47c>
 8007fa4:	2c00      	cmp	r4, #0
 8007fa6:	f000 80a5 	beq.w	80080f4 <_dtoa_r+0x47c>
 8007faa:	f1ba 0f00 	cmp.w	sl, #0
 8007fae:	dd34      	ble.n	800801a <_dtoa_r+0x3a2>
 8007fb0:	4a9a      	ldr	r2, [pc, #616]	; (800821c <_dtoa_r+0x5a4>)
 8007fb2:	f00a 030f 	and.w	r3, sl, #15
 8007fb6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007fba:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007fbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007fc2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007fc6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007fca:	d016      	beq.n	8007ffa <_dtoa_r+0x382>
 8007fcc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fd0:	4b93      	ldr	r3, [pc, #588]	; (8008220 <_dtoa_r+0x5a8>)
 8007fd2:	2703      	movs	r7, #3
 8007fd4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007fd8:	f7f8 fba8 	bl	800072c <__aeabi_ddiv>
 8007fdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fe0:	f004 040f 	and.w	r4, r4, #15
 8007fe4:	4e8e      	ldr	r6, [pc, #568]	; (8008220 <_dtoa_r+0x5a8>)
 8007fe6:	b954      	cbnz	r4, 8007ffe <_dtoa_r+0x386>
 8007fe8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ff0:	f7f8 fb9c 	bl	800072c <__aeabi_ddiv>
 8007ff4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ff8:	e029      	b.n	800804e <_dtoa_r+0x3d6>
 8007ffa:	2702      	movs	r7, #2
 8007ffc:	e7f2      	b.n	8007fe4 <_dtoa_r+0x36c>
 8007ffe:	07e1      	lsls	r1, r4, #31
 8008000:	d508      	bpl.n	8008014 <_dtoa_r+0x39c>
 8008002:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008006:	e9d6 2300 	ldrd	r2, r3, [r6]
 800800a:	f7f8 fa65 	bl	80004d8 <__aeabi_dmul>
 800800e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008012:	3701      	adds	r7, #1
 8008014:	1064      	asrs	r4, r4, #1
 8008016:	3608      	adds	r6, #8
 8008018:	e7e5      	b.n	8007fe6 <_dtoa_r+0x36e>
 800801a:	f000 80a5 	beq.w	8008168 <_dtoa_r+0x4f0>
 800801e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008022:	f1ca 0400 	rsb	r4, sl, #0
 8008026:	4b7d      	ldr	r3, [pc, #500]	; (800821c <_dtoa_r+0x5a4>)
 8008028:	f004 020f 	and.w	r2, r4, #15
 800802c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008034:	f7f8 fa50 	bl	80004d8 <__aeabi_dmul>
 8008038:	2702      	movs	r7, #2
 800803a:	2300      	movs	r3, #0
 800803c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008040:	4e77      	ldr	r6, [pc, #476]	; (8008220 <_dtoa_r+0x5a8>)
 8008042:	1124      	asrs	r4, r4, #4
 8008044:	2c00      	cmp	r4, #0
 8008046:	f040 8084 	bne.w	8008152 <_dtoa_r+0x4da>
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1d2      	bne.n	8007ff4 <_dtoa_r+0x37c>
 800804e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008050:	2b00      	cmp	r3, #0
 8008052:	f000 808b 	beq.w	800816c <_dtoa_r+0x4f4>
 8008056:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800805a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800805e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008062:	2200      	movs	r2, #0
 8008064:	4b6f      	ldr	r3, [pc, #444]	; (8008224 <_dtoa_r+0x5ac>)
 8008066:	f7f8 fca9 	bl	80009bc <__aeabi_dcmplt>
 800806a:	2800      	cmp	r0, #0
 800806c:	d07e      	beq.n	800816c <_dtoa_r+0x4f4>
 800806e:	9b08      	ldr	r3, [sp, #32]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d07b      	beq.n	800816c <_dtoa_r+0x4f4>
 8008074:	f1b9 0f00 	cmp.w	r9, #0
 8008078:	dd38      	ble.n	80080ec <_dtoa_r+0x474>
 800807a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800807e:	2200      	movs	r2, #0
 8008080:	4b69      	ldr	r3, [pc, #420]	; (8008228 <_dtoa_r+0x5b0>)
 8008082:	f7f8 fa29 	bl	80004d8 <__aeabi_dmul>
 8008086:	464c      	mov	r4, r9
 8008088:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800808c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008090:	3701      	adds	r7, #1
 8008092:	4638      	mov	r0, r7
 8008094:	f7f8 f9b6 	bl	8000404 <__aeabi_i2d>
 8008098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800809c:	f7f8 fa1c 	bl	80004d8 <__aeabi_dmul>
 80080a0:	2200      	movs	r2, #0
 80080a2:	4b62      	ldr	r3, [pc, #392]	; (800822c <_dtoa_r+0x5b4>)
 80080a4:	f7f8 f862 	bl	800016c <__adddf3>
 80080a8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80080ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80080b0:	9611      	str	r6, [sp, #68]	; 0x44
 80080b2:	2c00      	cmp	r4, #0
 80080b4:	d15d      	bne.n	8008172 <_dtoa_r+0x4fa>
 80080b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080ba:	2200      	movs	r2, #0
 80080bc:	4b5c      	ldr	r3, [pc, #368]	; (8008230 <_dtoa_r+0x5b8>)
 80080be:	f7f8 f853 	bl	8000168 <__aeabi_dsub>
 80080c2:	4602      	mov	r2, r0
 80080c4:	460b      	mov	r3, r1
 80080c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80080ca:	4633      	mov	r3, r6
 80080cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080ce:	f7f8 fc93 	bl	80009f8 <__aeabi_dcmpgt>
 80080d2:	2800      	cmp	r0, #0
 80080d4:	f040 829c 	bne.w	8008610 <_dtoa_r+0x998>
 80080d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80080dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80080de:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80080e2:	f7f8 fc6b 	bl	80009bc <__aeabi_dcmplt>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	f040 8290 	bne.w	800860c <_dtoa_r+0x994>
 80080ec:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80080f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80080f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f2c0 8152 	blt.w	80083a0 <_dtoa_r+0x728>
 80080fc:	f1ba 0f0e 	cmp.w	sl, #14
 8008100:	f300 814e 	bgt.w	80083a0 <_dtoa_r+0x728>
 8008104:	4b45      	ldr	r3, [pc, #276]	; (800821c <_dtoa_r+0x5a4>)
 8008106:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800810a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800810e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8008112:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008114:	2b00      	cmp	r3, #0
 8008116:	f280 80db 	bge.w	80082d0 <_dtoa_r+0x658>
 800811a:	9b08      	ldr	r3, [sp, #32]
 800811c:	2b00      	cmp	r3, #0
 800811e:	f300 80d7 	bgt.w	80082d0 <_dtoa_r+0x658>
 8008122:	f040 8272 	bne.w	800860a <_dtoa_r+0x992>
 8008126:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800812a:	2200      	movs	r2, #0
 800812c:	4b40      	ldr	r3, [pc, #256]	; (8008230 <_dtoa_r+0x5b8>)
 800812e:	f7f8 f9d3 	bl	80004d8 <__aeabi_dmul>
 8008132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008136:	f7f8 fc55 	bl	80009e4 <__aeabi_dcmpge>
 800813a:	9c08      	ldr	r4, [sp, #32]
 800813c:	4626      	mov	r6, r4
 800813e:	2800      	cmp	r0, #0
 8008140:	f040 8248 	bne.w	80085d4 <_dtoa_r+0x95c>
 8008144:	2331      	movs	r3, #49	; 0x31
 8008146:	9f03      	ldr	r7, [sp, #12]
 8008148:	f10a 0a01 	add.w	sl, sl, #1
 800814c:	f807 3b01 	strb.w	r3, [r7], #1
 8008150:	e244      	b.n	80085dc <_dtoa_r+0x964>
 8008152:	07e2      	lsls	r2, r4, #31
 8008154:	d505      	bpl.n	8008162 <_dtoa_r+0x4ea>
 8008156:	e9d6 2300 	ldrd	r2, r3, [r6]
 800815a:	f7f8 f9bd 	bl	80004d8 <__aeabi_dmul>
 800815e:	2301      	movs	r3, #1
 8008160:	3701      	adds	r7, #1
 8008162:	1064      	asrs	r4, r4, #1
 8008164:	3608      	adds	r6, #8
 8008166:	e76d      	b.n	8008044 <_dtoa_r+0x3cc>
 8008168:	2702      	movs	r7, #2
 800816a:	e770      	b.n	800804e <_dtoa_r+0x3d6>
 800816c:	46d0      	mov	r8, sl
 800816e:	9c08      	ldr	r4, [sp, #32]
 8008170:	e78f      	b.n	8008092 <_dtoa_r+0x41a>
 8008172:	9903      	ldr	r1, [sp, #12]
 8008174:	4b29      	ldr	r3, [pc, #164]	; (800821c <_dtoa_r+0x5a4>)
 8008176:	4421      	add	r1, r4
 8008178:	9112      	str	r1, [sp, #72]	; 0x48
 800817a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800817c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008180:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8008184:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008188:	2900      	cmp	r1, #0
 800818a:	d055      	beq.n	8008238 <_dtoa_r+0x5c0>
 800818c:	2000      	movs	r0, #0
 800818e:	4929      	ldr	r1, [pc, #164]	; (8008234 <_dtoa_r+0x5bc>)
 8008190:	f7f8 facc 	bl	800072c <__aeabi_ddiv>
 8008194:	463b      	mov	r3, r7
 8008196:	4632      	mov	r2, r6
 8008198:	f7f7 ffe6 	bl	8000168 <__aeabi_dsub>
 800819c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80081a0:	9f03      	ldr	r7, [sp, #12]
 80081a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081a6:	f7f8 fc47 	bl	8000a38 <__aeabi_d2iz>
 80081aa:	4604      	mov	r4, r0
 80081ac:	f7f8 f92a 	bl	8000404 <__aeabi_i2d>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081b8:	f7f7 ffd6 	bl	8000168 <__aeabi_dsub>
 80081bc:	4602      	mov	r2, r0
 80081be:	460b      	mov	r3, r1
 80081c0:	3430      	adds	r4, #48	; 0x30
 80081c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80081c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081ca:	f807 4b01 	strb.w	r4, [r7], #1
 80081ce:	f7f8 fbf5 	bl	80009bc <__aeabi_dcmplt>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d174      	bne.n	80082c0 <_dtoa_r+0x648>
 80081d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081da:	2000      	movs	r0, #0
 80081dc:	4911      	ldr	r1, [pc, #68]	; (8008224 <_dtoa_r+0x5ac>)
 80081de:	f7f7 ffc3 	bl	8000168 <__aeabi_dsub>
 80081e2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081e6:	f7f8 fbe9 	bl	80009bc <__aeabi_dcmplt>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	f040 80b7 	bne.w	800835e <_dtoa_r+0x6e6>
 80081f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80081f2:	429f      	cmp	r7, r3
 80081f4:	f43f af7a 	beq.w	80080ec <_dtoa_r+0x474>
 80081f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081fc:	2200      	movs	r2, #0
 80081fe:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <_dtoa_r+0x5b0>)
 8008200:	f7f8 f96a 	bl	80004d8 <__aeabi_dmul>
 8008204:	2200      	movs	r2, #0
 8008206:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800820a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800820e:	4b06      	ldr	r3, [pc, #24]	; (8008228 <_dtoa_r+0x5b0>)
 8008210:	f7f8 f962 	bl	80004d8 <__aeabi_dmul>
 8008214:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008218:	e7c3      	b.n	80081a2 <_dtoa_r+0x52a>
 800821a:	bf00      	nop
 800821c:	0800a450 	.word	0x0800a450
 8008220:	0800a428 	.word	0x0800a428
 8008224:	3ff00000 	.word	0x3ff00000
 8008228:	40240000 	.word	0x40240000
 800822c:	401c0000 	.word	0x401c0000
 8008230:	40140000 	.word	0x40140000
 8008234:	3fe00000 	.word	0x3fe00000
 8008238:	4630      	mov	r0, r6
 800823a:	4639      	mov	r1, r7
 800823c:	f7f8 f94c 	bl	80004d8 <__aeabi_dmul>
 8008240:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008242:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008246:	9c03      	ldr	r4, [sp, #12]
 8008248:	9314      	str	r3, [sp, #80]	; 0x50
 800824a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800824e:	f7f8 fbf3 	bl	8000a38 <__aeabi_d2iz>
 8008252:	9015      	str	r0, [sp, #84]	; 0x54
 8008254:	f7f8 f8d6 	bl	8000404 <__aeabi_i2d>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008260:	f7f7 ff82 	bl	8000168 <__aeabi_dsub>
 8008264:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008266:	4606      	mov	r6, r0
 8008268:	3330      	adds	r3, #48	; 0x30
 800826a:	f804 3b01 	strb.w	r3, [r4], #1
 800826e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008270:	460f      	mov	r7, r1
 8008272:	429c      	cmp	r4, r3
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	d124      	bne.n	80082c4 <_dtoa_r+0x64c>
 800827a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800827e:	4bb0      	ldr	r3, [pc, #704]	; (8008540 <_dtoa_r+0x8c8>)
 8008280:	f7f7 ff74 	bl	800016c <__adddf3>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	4630      	mov	r0, r6
 800828a:	4639      	mov	r1, r7
 800828c:	f7f8 fbb4 	bl	80009f8 <__aeabi_dcmpgt>
 8008290:	2800      	cmp	r0, #0
 8008292:	d163      	bne.n	800835c <_dtoa_r+0x6e4>
 8008294:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008298:	2000      	movs	r0, #0
 800829a:	49a9      	ldr	r1, [pc, #676]	; (8008540 <_dtoa_r+0x8c8>)
 800829c:	f7f7 ff64 	bl	8000168 <__aeabi_dsub>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	4630      	mov	r0, r6
 80082a6:	4639      	mov	r1, r7
 80082a8:	f7f8 fb88 	bl	80009bc <__aeabi_dcmplt>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	f43f af1d 	beq.w	80080ec <_dtoa_r+0x474>
 80082b2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80082b4:	1e7b      	subs	r3, r7, #1
 80082b6:	9314      	str	r3, [sp, #80]	; 0x50
 80082b8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80082bc:	2b30      	cmp	r3, #48	; 0x30
 80082be:	d0f8      	beq.n	80082b2 <_dtoa_r+0x63a>
 80082c0:	46c2      	mov	sl, r8
 80082c2:	e03b      	b.n	800833c <_dtoa_r+0x6c4>
 80082c4:	4b9f      	ldr	r3, [pc, #636]	; (8008544 <_dtoa_r+0x8cc>)
 80082c6:	f7f8 f907 	bl	80004d8 <__aeabi_dmul>
 80082ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082ce:	e7bc      	b.n	800824a <_dtoa_r+0x5d2>
 80082d0:	9f03      	ldr	r7, [sp, #12]
 80082d2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80082d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082da:	4640      	mov	r0, r8
 80082dc:	4649      	mov	r1, r9
 80082de:	f7f8 fa25 	bl	800072c <__aeabi_ddiv>
 80082e2:	f7f8 fba9 	bl	8000a38 <__aeabi_d2iz>
 80082e6:	4604      	mov	r4, r0
 80082e8:	f7f8 f88c 	bl	8000404 <__aeabi_i2d>
 80082ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082f0:	f7f8 f8f2 	bl	80004d8 <__aeabi_dmul>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4640      	mov	r0, r8
 80082fa:	4649      	mov	r1, r9
 80082fc:	f7f7 ff34 	bl	8000168 <__aeabi_dsub>
 8008300:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8008304:	f807 6b01 	strb.w	r6, [r7], #1
 8008308:	9e03      	ldr	r6, [sp, #12]
 800830a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800830e:	1bbe      	subs	r6, r7, r6
 8008310:	45b4      	cmp	ip, r6
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	d136      	bne.n	8008386 <_dtoa_r+0x70e>
 8008318:	f7f7 ff28 	bl	800016c <__adddf3>
 800831c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008320:	4680      	mov	r8, r0
 8008322:	4689      	mov	r9, r1
 8008324:	f7f8 fb68 	bl	80009f8 <__aeabi_dcmpgt>
 8008328:	bb58      	cbnz	r0, 8008382 <_dtoa_r+0x70a>
 800832a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800832e:	4640      	mov	r0, r8
 8008330:	4649      	mov	r1, r9
 8008332:	f7f8 fb39 	bl	80009a8 <__aeabi_dcmpeq>
 8008336:	b108      	cbz	r0, 800833c <_dtoa_r+0x6c4>
 8008338:	07e1      	lsls	r1, r4, #31
 800833a:	d422      	bmi.n	8008382 <_dtoa_r+0x70a>
 800833c:	4628      	mov	r0, r5
 800833e:	4659      	mov	r1, fp
 8008340:	f000 fd18 	bl	8008d74 <_Bfree>
 8008344:	2300      	movs	r3, #0
 8008346:	703b      	strb	r3, [r7, #0]
 8008348:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800834a:	f10a 0001 	add.w	r0, sl, #1
 800834e:	6018      	str	r0, [r3, #0]
 8008350:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008352:	2b00      	cmp	r3, #0
 8008354:	f43f acde 	beq.w	8007d14 <_dtoa_r+0x9c>
 8008358:	601f      	str	r7, [r3, #0]
 800835a:	e4db      	b.n	8007d14 <_dtoa_r+0x9c>
 800835c:	4627      	mov	r7, r4
 800835e:	463b      	mov	r3, r7
 8008360:	461f      	mov	r7, r3
 8008362:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008366:	2a39      	cmp	r2, #57	; 0x39
 8008368:	d107      	bne.n	800837a <_dtoa_r+0x702>
 800836a:	9a03      	ldr	r2, [sp, #12]
 800836c:	429a      	cmp	r2, r3
 800836e:	d1f7      	bne.n	8008360 <_dtoa_r+0x6e8>
 8008370:	2230      	movs	r2, #48	; 0x30
 8008372:	9903      	ldr	r1, [sp, #12]
 8008374:	f108 0801 	add.w	r8, r8, #1
 8008378:	700a      	strb	r2, [r1, #0]
 800837a:	781a      	ldrb	r2, [r3, #0]
 800837c:	3201      	adds	r2, #1
 800837e:	701a      	strb	r2, [r3, #0]
 8008380:	e79e      	b.n	80082c0 <_dtoa_r+0x648>
 8008382:	46d0      	mov	r8, sl
 8008384:	e7eb      	b.n	800835e <_dtoa_r+0x6e6>
 8008386:	2200      	movs	r2, #0
 8008388:	4b6e      	ldr	r3, [pc, #440]	; (8008544 <_dtoa_r+0x8cc>)
 800838a:	f7f8 f8a5 	bl	80004d8 <__aeabi_dmul>
 800838e:	2200      	movs	r2, #0
 8008390:	2300      	movs	r3, #0
 8008392:	4680      	mov	r8, r0
 8008394:	4689      	mov	r9, r1
 8008396:	f7f8 fb07 	bl	80009a8 <__aeabi_dcmpeq>
 800839a:	2800      	cmp	r0, #0
 800839c:	d09b      	beq.n	80082d6 <_dtoa_r+0x65e>
 800839e:	e7cd      	b.n	800833c <_dtoa_r+0x6c4>
 80083a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80083a2:	2a00      	cmp	r2, #0
 80083a4:	f000 80d0 	beq.w	8008548 <_dtoa_r+0x8d0>
 80083a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80083aa:	2a01      	cmp	r2, #1
 80083ac:	f300 80ae 	bgt.w	800850c <_dtoa_r+0x894>
 80083b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083b2:	2a00      	cmp	r2, #0
 80083b4:	f000 80a6 	beq.w	8008504 <_dtoa_r+0x88c>
 80083b8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083bc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80083be:	9f06      	ldr	r7, [sp, #24]
 80083c0:	9a06      	ldr	r2, [sp, #24]
 80083c2:	2101      	movs	r1, #1
 80083c4:	441a      	add	r2, r3
 80083c6:	9206      	str	r2, [sp, #24]
 80083c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083ca:	4628      	mov	r0, r5
 80083cc:	441a      	add	r2, r3
 80083ce:	9209      	str	r2, [sp, #36]	; 0x24
 80083d0:	f000 fd86 	bl	8008ee0 <__i2b>
 80083d4:	4606      	mov	r6, r0
 80083d6:	2f00      	cmp	r7, #0
 80083d8:	dd0c      	ble.n	80083f4 <_dtoa_r+0x77c>
 80083da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083dc:	2b00      	cmp	r3, #0
 80083de:	dd09      	ble.n	80083f4 <_dtoa_r+0x77c>
 80083e0:	42bb      	cmp	r3, r7
 80083e2:	bfa8      	it	ge
 80083e4:	463b      	movge	r3, r7
 80083e6:	9a06      	ldr	r2, [sp, #24]
 80083e8:	1aff      	subs	r7, r7, r3
 80083ea:	1ad2      	subs	r2, r2, r3
 80083ec:	9206      	str	r2, [sp, #24]
 80083ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	9309      	str	r3, [sp, #36]	; 0x24
 80083f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083f6:	b1f3      	cbz	r3, 8008436 <_dtoa_r+0x7be>
 80083f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f000 80a8 	beq.w	8008550 <_dtoa_r+0x8d8>
 8008400:	2c00      	cmp	r4, #0
 8008402:	dd10      	ble.n	8008426 <_dtoa_r+0x7ae>
 8008404:	4631      	mov	r1, r6
 8008406:	4622      	mov	r2, r4
 8008408:	4628      	mov	r0, r5
 800840a:	f000 fe27 	bl	800905c <__pow5mult>
 800840e:	465a      	mov	r2, fp
 8008410:	4601      	mov	r1, r0
 8008412:	4606      	mov	r6, r0
 8008414:	4628      	mov	r0, r5
 8008416:	f000 fd79 	bl	8008f0c <__multiply>
 800841a:	4680      	mov	r8, r0
 800841c:	4659      	mov	r1, fp
 800841e:	4628      	mov	r0, r5
 8008420:	f000 fca8 	bl	8008d74 <_Bfree>
 8008424:	46c3      	mov	fp, r8
 8008426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008428:	1b1a      	subs	r2, r3, r4
 800842a:	d004      	beq.n	8008436 <_dtoa_r+0x7be>
 800842c:	4659      	mov	r1, fp
 800842e:	4628      	mov	r0, r5
 8008430:	f000 fe14 	bl	800905c <__pow5mult>
 8008434:	4683      	mov	fp, r0
 8008436:	2101      	movs	r1, #1
 8008438:	4628      	mov	r0, r5
 800843a:	f000 fd51 	bl	8008ee0 <__i2b>
 800843e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008440:	4604      	mov	r4, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	f340 8086 	ble.w	8008554 <_dtoa_r+0x8dc>
 8008448:	461a      	mov	r2, r3
 800844a:	4601      	mov	r1, r0
 800844c:	4628      	mov	r0, r5
 800844e:	f000 fe05 	bl	800905c <__pow5mult>
 8008452:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008454:	4604      	mov	r4, r0
 8008456:	2b01      	cmp	r3, #1
 8008458:	dd7f      	ble.n	800855a <_dtoa_r+0x8e2>
 800845a:	f04f 0800 	mov.w	r8, #0
 800845e:	6923      	ldr	r3, [r4, #16]
 8008460:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008464:	6918      	ldr	r0, [r3, #16]
 8008466:	f000 fced 	bl	8008e44 <__hi0bits>
 800846a:	f1c0 0020 	rsb	r0, r0, #32
 800846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008470:	4418      	add	r0, r3
 8008472:	f010 001f 	ands.w	r0, r0, #31
 8008476:	f000 8092 	beq.w	800859e <_dtoa_r+0x926>
 800847a:	f1c0 0320 	rsb	r3, r0, #32
 800847e:	2b04      	cmp	r3, #4
 8008480:	f340 808a 	ble.w	8008598 <_dtoa_r+0x920>
 8008484:	f1c0 001c 	rsb	r0, r0, #28
 8008488:	9b06      	ldr	r3, [sp, #24]
 800848a:	4407      	add	r7, r0
 800848c:	4403      	add	r3, r0
 800848e:	9306      	str	r3, [sp, #24]
 8008490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008492:	4403      	add	r3, r0
 8008494:	9309      	str	r3, [sp, #36]	; 0x24
 8008496:	9b06      	ldr	r3, [sp, #24]
 8008498:	2b00      	cmp	r3, #0
 800849a:	dd05      	ble.n	80084a8 <_dtoa_r+0x830>
 800849c:	4659      	mov	r1, fp
 800849e:	461a      	mov	r2, r3
 80084a0:	4628      	mov	r0, r5
 80084a2:	f000 fe35 	bl	8009110 <__lshift>
 80084a6:	4683      	mov	fp, r0
 80084a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	dd05      	ble.n	80084ba <_dtoa_r+0x842>
 80084ae:	4621      	mov	r1, r4
 80084b0:	461a      	mov	r2, r3
 80084b2:	4628      	mov	r0, r5
 80084b4:	f000 fe2c 	bl	8009110 <__lshift>
 80084b8:	4604      	mov	r4, r0
 80084ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d070      	beq.n	80085a2 <_dtoa_r+0x92a>
 80084c0:	4621      	mov	r1, r4
 80084c2:	4658      	mov	r0, fp
 80084c4:	f000 fe94 	bl	80091f0 <__mcmp>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	da6a      	bge.n	80085a2 <_dtoa_r+0x92a>
 80084cc:	2300      	movs	r3, #0
 80084ce:	4659      	mov	r1, fp
 80084d0:	220a      	movs	r2, #10
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 fc70 	bl	8008db8 <__multadd>
 80084d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084da:	4683      	mov	fp, r0
 80084dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f000 8194 	beq.w	800880e <_dtoa_r+0xb96>
 80084e6:	4631      	mov	r1, r6
 80084e8:	2300      	movs	r3, #0
 80084ea:	220a      	movs	r2, #10
 80084ec:	4628      	mov	r0, r5
 80084ee:	f000 fc63 	bl	8008db8 <__multadd>
 80084f2:	f1b9 0f00 	cmp.w	r9, #0
 80084f6:	4606      	mov	r6, r0
 80084f8:	f300 8093 	bgt.w	8008622 <_dtoa_r+0x9aa>
 80084fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80084fe:	2b02      	cmp	r3, #2
 8008500:	dc57      	bgt.n	80085b2 <_dtoa_r+0x93a>
 8008502:	e08e      	b.n	8008622 <_dtoa_r+0x9aa>
 8008504:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008506:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800850a:	e757      	b.n	80083bc <_dtoa_r+0x744>
 800850c:	9b08      	ldr	r3, [sp, #32]
 800850e:	1e5c      	subs	r4, r3, #1
 8008510:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008512:	42a3      	cmp	r3, r4
 8008514:	bfb7      	itett	lt
 8008516:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008518:	1b1c      	subge	r4, r3, r4
 800851a:	1ae2      	sublt	r2, r4, r3
 800851c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800851e:	bfbe      	ittt	lt
 8008520:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008522:	189b      	addlt	r3, r3, r2
 8008524:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008526:	9b08      	ldr	r3, [sp, #32]
 8008528:	bfb8      	it	lt
 800852a:	2400      	movlt	r4, #0
 800852c:	2b00      	cmp	r3, #0
 800852e:	bfbb      	ittet	lt
 8008530:	9b06      	ldrlt	r3, [sp, #24]
 8008532:	9a08      	ldrlt	r2, [sp, #32]
 8008534:	9f06      	ldrge	r7, [sp, #24]
 8008536:	1a9f      	sublt	r7, r3, r2
 8008538:	bfac      	ite	ge
 800853a:	9b08      	ldrge	r3, [sp, #32]
 800853c:	2300      	movlt	r3, #0
 800853e:	e73f      	b.n	80083c0 <_dtoa_r+0x748>
 8008540:	3fe00000 	.word	0x3fe00000
 8008544:	40240000 	.word	0x40240000
 8008548:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800854a:	9f06      	ldr	r7, [sp, #24]
 800854c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800854e:	e742      	b.n	80083d6 <_dtoa_r+0x75e>
 8008550:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008552:	e76b      	b.n	800842c <_dtoa_r+0x7b4>
 8008554:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008556:	2b01      	cmp	r3, #1
 8008558:	dc19      	bgt.n	800858e <_dtoa_r+0x916>
 800855a:	9b04      	ldr	r3, [sp, #16]
 800855c:	b9bb      	cbnz	r3, 800858e <_dtoa_r+0x916>
 800855e:	9b05      	ldr	r3, [sp, #20]
 8008560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008564:	b99b      	cbnz	r3, 800858e <_dtoa_r+0x916>
 8008566:	9b05      	ldr	r3, [sp, #20]
 8008568:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800856c:	0d1b      	lsrs	r3, r3, #20
 800856e:	051b      	lsls	r3, r3, #20
 8008570:	b183      	cbz	r3, 8008594 <_dtoa_r+0x91c>
 8008572:	f04f 0801 	mov.w	r8, #1
 8008576:	9b06      	ldr	r3, [sp, #24]
 8008578:	3301      	adds	r3, #1
 800857a:	9306      	str	r3, [sp, #24]
 800857c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857e:	3301      	adds	r3, #1
 8008580:	9309      	str	r3, [sp, #36]	; 0x24
 8008582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008584:	2b00      	cmp	r3, #0
 8008586:	f47f af6a 	bne.w	800845e <_dtoa_r+0x7e6>
 800858a:	2001      	movs	r0, #1
 800858c:	e76f      	b.n	800846e <_dtoa_r+0x7f6>
 800858e:	f04f 0800 	mov.w	r8, #0
 8008592:	e7f6      	b.n	8008582 <_dtoa_r+0x90a>
 8008594:	4698      	mov	r8, r3
 8008596:	e7f4      	b.n	8008582 <_dtoa_r+0x90a>
 8008598:	f43f af7d 	beq.w	8008496 <_dtoa_r+0x81e>
 800859c:	4618      	mov	r0, r3
 800859e:	301c      	adds	r0, #28
 80085a0:	e772      	b.n	8008488 <_dtoa_r+0x810>
 80085a2:	9b08      	ldr	r3, [sp, #32]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	dc36      	bgt.n	8008616 <_dtoa_r+0x99e>
 80085a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	dd33      	ble.n	8008616 <_dtoa_r+0x99e>
 80085ae:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80085b2:	f1b9 0f00 	cmp.w	r9, #0
 80085b6:	d10d      	bne.n	80085d4 <_dtoa_r+0x95c>
 80085b8:	4621      	mov	r1, r4
 80085ba:	464b      	mov	r3, r9
 80085bc:	2205      	movs	r2, #5
 80085be:	4628      	mov	r0, r5
 80085c0:	f000 fbfa 	bl	8008db8 <__multadd>
 80085c4:	4601      	mov	r1, r0
 80085c6:	4604      	mov	r4, r0
 80085c8:	4658      	mov	r0, fp
 80085ca:	f000 fe11 	bl	80091f0 <__mcmp>
 80085ce:	2800      	cmp	r0, #0
 80085d0:	f73f adb8 	bgt.w	8008144 <_dtoa_r+0x4cc>
 80085d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80085d6:	9f03      	ldr	r7, [sp, #12]
 80085d8:	ea6f 0a03 	mvn.w	sl, r3
 80085dc:	f04f 0800 	mov.w	r8, #0
 80085e0:	4621      	mov	r1, r4
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 fbc6 	bl	8008d74 <_Bfree>
 80085e8:	2e00      	cmp	r6, #0
 80085ea:	f43f aea7 	beq.w	800833c <_dtoa_r+0x6c4>
 80085ee:	f1b8 0f00 	cmp.w	r8, #0
 80085f2:	d005      	beq.n	8008600 <_dtoa_r+0x988>
 80085f4:	45b0      	cmp	r8, r6
 80085f6:	d003      	beq.n	8008600 <_dtoa_r+0x988>
 80085f8:	4641      	mov	r1, r8
 80085fa:	4628      	mov	r0, r5
 80085fc:	f000 fbba 	bl	8008d74 <_Bfree>
 8008600:	4631      	mov	r1, r6
 8008602:	4628      	mov	r0, r5
 8008604:	f000 fbb6 	bl	8008d74 <_Bfree>
 8008608:	e698      	b.n	800833c <_dtoa_r+0x6c4>
 800860a:	2400      	movs	r4, #0
 800860c:	4626      	mov	r6, r4
 800860e:	e7e1      	b.n	80085d4 <_dtoa_r+0x95c>
 8008610:	46c2      	mov	sl, r8
 8008612:	4626      	mov	r6, r4
 8008614:	e596      	b.n	8008144 <_dtoa_r+0x4cc>
 8008616:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008618:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800861c:	2b00      	cmp	r3, #0
 800861e:	f000 80fd 	beq.w	800881c <_dtoa_r+0xba4>
 8008622:	2f00      	cmp	r7, #0
 8008624:	dd05      	ble.n	8008632 <_dtoa_r+0x9ba>
 8008626:	4631      	mov	r1, r6
 8008628:	463a      	mov	r2, r7
 800862a:	4628      	mov	r0, r5
 800862c:	f000 fd70 	bl	8009110 <__lshift>
 8008630:	4606      	mov	r6, r0
 8008632:	f1b8 0f00 	cmp.w	r8, #0
 8008636:	d05c      	beq.n	80086f2 <_dtoa_r+0xa7a>
 8008638:	4628      	mov	r0, r5
 800863a:	6871      	ldr	r1, [r6, #4]
 800863c:	f000 fb5a 	bl	8008cf4 <_Balloc>
 8008640:	4607      	mov	r7, r0
 8008642:	b928      	cbnz	r0, 8008650 <_dtoa_r+0x9d8>
 8008644:	4602      	mov	r2, r0
 8008646:	f240 21ea 	movw	r1, #746	; 0x2ea
 800864a:	4b7f      	ldr	r3, [pc, #508]	; (8008848 <_dtoa_r+0xbd0>)
 800864c:	f7ff bb28 	b.w	8007ca0 <_dtoa_r+0x28>
 8008650:	6932      	ldr	r2, [r6, #16]
 8008652:	f106 010c 	add.w	r1, r6, #12
 8008656:	3202      	adds	r2, #2
 8008658:	0092      	lsls	r2, r2, #2
 800865a:	300c      	adds	r0, #12
 800865c:	f7fe fbc8 	bl	8006df0 <memcpy>
 8008660:	2201      	movs	r2, #1
 8008662:	4639      	mov	r1, r7
 8008664:	4628      	mov	r0, r5
 8008666:	f000 fd53 	bl	8009110 <__lshift>
 800866a:	46b0      	mov	r8, r6
 800866c:	4606      	mov	r6, r0
 800866e:	9b03      	ldr	r3, [sp, #12]
 8008670:	3301      	adds	r3, #1
 8008672:	9308      	str	r3, [sp, #32]
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	444b      	add	r3, r9
 8008678:	930a      	str	r3, [sp, #40]	; 0x28
 800867a:	9b04      	ldr	r3, [sp, #16]
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	9309      	str	r3, [sp, #36]	; 0x24
 8008682:	9b08      	ldr	r3, [sp, #32]
 8008684:	4621      	mov	r1, r4
 8008686:	3b01      	subs	r3, #1
 8008688:	4658      	mov	r0, fp
 800868a:	9304      	str	r3, [sp, #16]
 800868c:	f7ff fa65 	bl	8007b5a <quorem>
 8008690:	4603      	mov	r3, r0
 8008692:	4641      	mov	r1, r8
 8008694:	3330      	adds	r3, #48	; 0x30
 8008696:	9006      	str	r0, [sp, #24]
 8008698:	4658      	mov	r0, fp
 800869a:	930b      	str	r3, [sp, #44]	; 0x2c
 800869c:	f000 fda8 	bl	80091f0 <__mcmp>
 80086a0:	4632      	mov	r2, r6
 80086a2:	4681      	mov	r9, r0
 80086a4:	4621      	mov	r1, r4
 80086a6:	4628      	mov	r0, r5
 80086a8:	f000 fdbe 	bl	8009228 <__mdiff>
 80086ac:	68c2      	ldr	r2, [r0, #12]
 80086ae:	4607      	mov	r7, r0
 80086b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086b2:	bb02      	cbnz	r2, 80086f6 <_dtoa_r+0xa7e>
 80086b4:	4601      	mov	r1, r0
 80086b6:	4658      	mov	r0, fp
 80086b8:	f000 fd9a 	bl	80091f0 <__mcmp>
 80086bc:	4602      	mov	r2, r0
 80086be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086c0:	4639      	mov	r1, r7
 80086c2:	4628      	mov	r0, r5
 80086c4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80086c8:	f000 fb54 	bl	8008d74 <_Bfree>
 80086cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086d0:	9f08      	ldr	r7, [sp, #32]
 80086d2:	ea43 0102 	orr.w	r1, r3, r2
 80086d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086d8:	430b      	orrs	r3, r1
 80086da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086dc:	d10d      	bne.n	80086fa <_dtoa_r+0xa82>
 80086de:	2b39      	cmp	r3, #57	; 0x39
 80086e0:	d029      	beq.n	8008736 <_dtoa_r+0xabe>
 80086e2:	f1b9 0f00 	cmp.w	r9, #0
 80086e6:	dd01      	ble.n	80086ec <_dtoa_r+0xa74>
 80086e8:	9b06      	ldr	r3, [sp, #24]
 80086ea:	3331      	adds	r3, #49	; 0x31
 80086ec:	9a04      	ldr	r2, [sp, #16]
 80086ee:	7013      	strb	r3, [r2, #0]
 80086f0:	e776      	b.n	80085e0 <_dtoa_r+0x968>
 80086f2:	4630      	mov	r0, r6
 80086f4:	e7b9      	b.n	800866a <_dtoa_r+0x9f2>
 80086f6:	2201      	movs	r2, #1
 80086f8:	e7e2      	b.n	80086c0 <_dtoa_r+0xa48>
 80086fa:	f1b9 0f00 	cmp.w	r9, #0
 80086fe:	db06      	blt.n	800870e <_dtoa_r+0xa96>
 8008700:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008702:	ea41 0909 	orr.w	r9, r1, r9
 8008706:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008708:	ea59 0101 	orrs.w	r1, r9, r1
 800870c:	d120      	bne.n	8008750 <_dtoa_r+0xad8>
 800870e:	2a00      	cmp	r2, #0
 8008710:	ddec      	ble.n	80086ec <_dtoa_r+0xa74>
 8008712:	4659      	mov	r1, fp
 8008714:	2201      	movs	r2, #1
 8008716:	4628      	mov	r0, r5
 8008718:	9308      	str	r3, [sp, #32]
 800871a:	f000 fcf9 	bl	8009110 <__lshift>
 800871e:	4621      	mov	r1, r4
 8008720:	4683      	mov	fp, r0
 8008722:	f000 fd65 	bl	80091f0 <__mcmp>
 8008726:	2800      	cmp	r0, #0
 8008728:	9b08      	ldr	r3, [sp, #32]
 800872a:	dc02      	bgt.n	8008732 <_dtoa_r+0xaba>
 800872c:	d1de      	bne.n	80086ec <_dtoa_r+0xa74>
 800872e:	07da      	lsls	r2, r3, #31
 8008730:	d5dc      	bpl.n	80086ec <_dtoa_r+0xa74>
 8008732:	2b39      	cmp	r3, #57	; 0x39
 8008734:	d1d8      	bne.n	80086e8 <_dtoa_r+0xa70>
 8008736:	2339      	movs	r3, #57	; 0x39
 8008738:	9a04      	ldr	r2, [sp, #16]
 800873a:	7013      	strb	r3, [r2, #0]
 800873c:	463b      	mov	r3, r7
 800873e:	461f      	mov	r7, r3
 8008740:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008744:	3b01      	subs	r3, #1
 8008746:	2a39      	cmp	r2, #57	; 0x39
 8008748:	d050      	beq.n	80087ec <_dtoa_r+0xb74>
 800874a:	3201      	adds	r2, #1
 800874c:	701a      	strb	r2, [r3, #0]
 800874e:	e747      	b.n	80085e0 <_dtoa_r+0x968>
 8008750:	2a00      	cmp	r2, #0
 8008752:	dd03      	ble.n	800875c <_dtoa_r+0xae4>
 8008754:	2b39      	cmp	r3, #57	; 0x39
 8008756:	d0ee      	beq.n	8008736 <_dtoa_r+0xabe>
 8008758:	3301      	adds	r3, #1
 800875a:	e7c7      	b.n	80086ec <_dtoa_r+0xa74>
 800875c:	9a08      	ldr	r2, [sp, #32]
 800875e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008760:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008764:	428a      	cmp	r2, r1
 8008766:	d02a      	beq.n	80087be <_dtoa_r+0xb46>
 8008768:	4659      	mov	r1, fp
 800876a:	2300      	movs	r3, #0
 800876c:	220a      	movs	r2, #10
 800876e:	4628      	mov	r0, r5
 8008770:	f000 fb22 	bl	8008db8 <__multadd>
 8008774:	45b0      	cmp	r8, r6
 8008776:	4683      	mov	fp, r0
 8008778:	f04f 0300 	mov.w	r3, #0
 800877c:	f04f 020a 	mov.w	r2, #10
 8008780:	4641      	mov	r1, r8
 8008782:	4628      	mov	r0, r5
 8008784:	d107      	bne.n	8008796 <_dtoa_r+0xb1e>
 8008786:	f000 fb17 	bl	8008db8 <__multadd>
 800878a:	4680      	mov	r8, r0
 800878c:	4606      	mov	r6, r0
 800878e:	9b08      	ldr	r3, [sp, #32]
 8008790:	3301      	adds	r3, #1
 8008792:	9308      	str	r3, [sp, #32]
 8008794:	e775      	b.n	8008682 <_dtoa_r+0xa0a>
 8008796:	f000 fb0f 	bl	8008db8 <__multadd>
 800879a:	4631      	mov	r1, r6
 800879c:	4680      	mov	r8, r0
 800879e:	2300      	movs	r3, #0
 80087a0:	220a      	movs	r2, #10
 80087a2:	4628      	mov	r0, r5
 80087a4:	f000 fb08 	bl	8008db8 <__multadd>
 80087a8:	4606      	mov	r6, r0
 80087aa:	e7f0      	b.n	800878e <_dtoa_r+0xb16>
 80087ac:	f1b9 0f00 	cmp.w	r9, #0
 80087b0:	bfcc      	ite	gt
 80087b2:	464f      	movgt	r7, r9
 80087b4:	2701      	movle	r7, #1
 80087b6:	f04f 0800 	mov.w	r8, #0
 80087ba:	9a03      	ldr	r2, [sp, #12]
 80087bc:	4417      	add	r7, r2
 80087be:	4659      	mov	r1, fp
 80087c0:	2201      	movs	r2, #1
 80087c2:	4628      	mov	r0, r5
 80087c4:	9308      	str	r3, [sp, #32]
 80087c6:	f000 fca3 	bl	8009110 <__lshift>
 80087ca:	4621      	mov	r1, r4
 80087cc:	4683      	mov	fp, r0
 80087ce:	f000 fd0f 	bl	80091f0 <__mcmp>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	dcb2      	bgt.n	800873c <_dtoa_r+0xac4>
 80087d6:	d102      	bne.n	80087de <_dtoa_r+0xb66>
 80087d8:	9b08      	ldr	r3, [sp, #32]
 80087da:	07db      	lsls	r3, r3, #31
 80087dc:	d4ae      	bmi.n	800873c <_dtoa_r+0xac4>
 80087de:	463b      	mov	r3, r7
 80087e0:	461f      	mov	r7, r3
 80087e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087e6:	2a30      	cmp	r2, #48	; 0x30
 80087e8:	d0fa      	beq.n	80087e0 <_dtoa_r+0xb68>
 80087ea:	e6f9      	b.n	80085e0 <_dtoa_r+0x968>
 80087ec:	9a03      	ldr	r2, [sp, #12]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d1a5      	bne.n	800873e <_dtoa_r+0xac6>
 80087f2:	2331      	movs	r3, #49	; 0x31
 80087f4:	f10a 0a01 	add.w	sl, sl, #1
 80087f8:	e779      	b.n	80086ee <_dtoa_r+0xa76>
 80087fa:	4b14      	ldr	r3, [pc, #80]	; (800884c <_dtoa_r+0xbd4>)
 80087fc:	f7ff baa8 	b.w	8007d50 <_dtoa_r+0xd8>
 8008800:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008802:	2b00      	cmp	r3, #0
 8008804:	f47f aa81 	bne.w	8007d0a <_dtoa_r+0x92>
 8008808:	4b11      	ldr	r3, [pc, #68]	; (8008850 <_dtoa_r+0xbd8>)
 800880a:	f7ff baa1 	b.w	8007d50 <_dtoa_r+0xd8>
 800880e:	f1b9 0f00 	cmp.w	r9, #0
 8008812:	dc03      	bgt.n	800881c <_dtoa_r+0xba4>
 8008814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008816:	2b02      	cmp	r3, #2
 8008818:	f73f aecb 	bgt.w	80085b2 <_dtoa_r+0x93a>
 800881c:	9f03      	ldr	r7, [sp, #12]
 800881e:	4621      	mov	r1, r4
 8008820:	4658      	mov	r0, fp
 8008822:	f7ff f99a 	bl	8007b5a <quorem>
 8008826:	9a03      	ldr	r2, [sp, #12]
 8008828:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800882c:	f807 3b01 	strb.w	r3, [r7], #1
 8008830:	1aba      	subs	r2, r7, r2
 8008832:	4591      	cmp	r9, r2
 8008834:	ddba      	ble.n	80087ac <_dtoa_r+0xb34>
 8008836:	4659      	mov	r1, fp
 8008838:	2300      	movs	r3, #0
 800883a:	220a      	movs	r2, #10
 800883c:	4628      	mov	r0, r5
 800883e:	f000 fabb 	bl	8008db8 <__multadd>
 8008842:	4683      	mov	fp, r0
 8008844:	e7eb      	b.n	800881e <_dtoa_r+0xba6>
 8008846:	bf00      	nop
 8008848:	0800a358 	.word	0x0800a358
 800884c:	0800a2b5 	.word	0x0800a2b5
 8008850:	0800a2d9 	.word	0x0800a2d9

08008854 <__sflush_r>:
 8008854:	898a      	ldrh	r2, [r1, #12]
 8008856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008858:	4605      	mov	r5, r0
 800885a:	0710      	lsls	r0, r2, #28
 800885c:	460c      	mov	r4, r1
 800885e:	d457      	bmi.n	8008910 <__sflush_r+0xbc>
 8008860:	684b      	ldr	r3, [r1, #4]
 8008862:	2b00      	cmp	r3, #0
 8008864:	dc04      	bgt.n	8008870 <__sflush_r+0x1c>
 8008866:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008868:	2b00      	cmp	r3, #0
 800886a:	dc01      	bgt.n	8008870 <__sflush_r+0x1c>
 800886c:	2000      	movs	r0, #0
 800886e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008870:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008872:	2e00      	cmp	r6, #0
 8008874:	d0fa      	beq.n	800886c <__sflush_r+0x18>
 8008876:	2300      	movs	r3, #0
 8008878:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800887c:	682f      	ldr	r7, [r5, #0]
 800887e:	602b      	str	r3, [r5, #0]
 8008880:	d032      	beq.n	80088e8 <__sflush_r+0x94>
 8008882:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	075a      	lsls	r2, r3, #29
 8008888:	d505      	bpl.n	8008896 <__sflush_r+0x42>
 800888a:	6863      	ldr	r3, [r4, #4]
 800888c:	1ac0      	subs	r0, r0, r3
 800888e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008890:	b10b      	cbz	r3, 8008896 <__sflush_r+0x42>
 8008892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008894:	1ac0      	subs	r0, r0, r3
 8008896:	2300      	movs	r3, #0
 8008898:	4602      	mov	r2, r0
 800889a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800889c:	4628      	mov	r0, r5
 800889e:	6a21      	ldr	r1, [r4, #32]
 80088a0:	47b0      	blx	r6
 80088a2:	1c43      	adds	r3, r0, #1
 80088a4:	89a3      	ldrh	r3, [r4, #12]
 80088a6:	d106      	bne.n	80088b6 <__sflush_r+0x62>
 80088a8:	6829      	ldr	r1, [r5, #0]
 80088aa:	291d      	cmp	r1, #29
 80088ac:	d82c      	bhi.n	8008908 <__sflush_r+0xb4>
 80088ae:	4a29      	ldr	r2, [pc, #164]	; (8008954 <__sflush_r+0x100>)
 80088b0:	40ca      	lsrs	r2, r1
 80088b2:	07d6      	lsls	r6, r2, #31
 80088b4:	d528      	bpl.n	8008908 <__sflush_r+0xb4>
 80088b6:	2200      	movs	r2, #0
 80088b8:	6062      	str	r2, [r4, #4]
 80088ba:	6922      	ldr	r2, [r4, #16]
 80088bc:	04d9      	lsls	r1, r3, #19
 80088be:	6022      	str	r2, [r4, #0]
 80088c0:	d504      	bpl.n	80088cc <__sflush_r+0x78>
 80088c2:	1c42      	adds	r2, r0, #1
 80088c4:	d101      	bne.n	80088ca <__sflush_r+0x76>
 80088c6:	682b      	ldr	r3, [r5, #0]
 80088c8:	b903      	cbnz	r3, 80088cc <__sflush_r+0x78>
 80088ca:	6560      	str	r0, [r4, #84]	; 0x54
 80088cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088ce:	602f      	str	r7, [r5, #0]
 80088d0:	2900      	cmp	r1, #0
 80088d2:	d0cb      	beq.n	800886c <__sflush_r+0x18>
 80088d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088d8:	4299      	cmp	r1, r3
 80088da:	d002      	beq.n	80088e2 <__sflush_r+0x8e>
 80088dc:	4628      	mov	r0, r5
 80088de:	f000 fd9f 	bl	8009420 <_free_r>
 80088e2:	2000      	movs	r0, #0
 80088e4:	6360      	str	r0, [r4, #52]	; 0x34
 80088e6:	e7c2      	b.n	800886e <__sflush_r+0x1a>
 80088e8:	6a21      	ldr	r1, [r4, #32]
 80088ea:	2301      	movs	r3, #1
 80088ec:	4628      	mov	r0, r5
 80088ee:	47b0      	blx	r6
 80088f0:	1c41      	adds	r1, r0, #1
 80088f2:	d1c7      	bne.n	8008884 <__sflush_r+0x30>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d0c4      	beq.n	8008884 <__sflush_r+0x30>
 80088fa:	2b1d      	cmp	r3, #29
 80088fc:	d001      	beq.n	8008902 <__sflush_r+0xae>
 80088fe:	2b16      	cmp	r3, #22
 8008900:	d101      	bne.n	8008906 <__sflush_r+0xb2>
 8008902:	602f      	str	r7, [r5, #0]
 8008904:	e7b2      	b.n	800886c <__sflush_r+0x18>
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800890c:	81a3      	strh	r3, [r4, #12]
 800890e:	e7ae      	b.n	800886e <__sflush_r+0x1a>
 8008910:	690f      	ldr	r7, [r1, #16]
 8008912:	2f00      	cmp	r7, #0
 8008914:	d0aa      	beq.n	800886c <__sflush_r+0x18>
 8008916:	0793      	lsls	r3, r2, #30
 8008918:	bf18      	it	ne
 800891a:	2300      	movne	r3, #0
 800891c:	680e      	ldr	r6, [r1, #0]
 800891e:	bf08      	it	eq
 8008920:	694b      	ldreq	r3, [r1, #20]
 8008922:	1bf6      	subs	r6, r6, r7
 8008924:	600f      	str	r7, [r1, #0]
 8008926:	608b      	str	r3, [r1, #8]
 8008928:	2e00      	cmp	r6, #0
 800892a:	dd9f      	ble.n	800886c <__sflush_r+0x18>
 800892c:	4633      	mov	r3, r6
 800892e:	463a      	mov	r2, r7
 8008930:	4628      	mov	r0, r5
 8008932:	6a21      	ldr	r1, [r4, #32]
 8008934:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008938:	47e0      	blx	ip
 800893a:	2800      	cmp	r0, #0
 800893c:	dc06      	bgt.n	800894c <__sflush_r+0xf8>
 800893e:	89a3      	ldrh	r3, [r4, #12]
 8008940:	f04f 30ff 	mov.w	r0, #4294967295
 8008944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008948:	81a3      	strh	r3, [r4, #12]
 800894a:	e790      	b.n	800886e <__sflush_r+0x1a>
 800894c:	4407      	add	r7, r0
 800894e:	1a36      	subs	r6, r6, r0
 8008950:	e7ea      	b.n	8008928 <__sflush_r+0xd4>
 8008952:	bf00      	nop
 8008954:	20400001 	.word	0x20400001

08008958 <_fflush_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	690b      	ldr	r3, [r1, #16]
 800895c:	4605      	mov	r5, r0
 800895e:	460c      	mov	r4, r1
 8008960:	b913      	cbnz	r3, 8008968 <_fflush_r+0x10>
 8008962:	2500      	movs	r5, #0
 8008964:	4628      	mov	r0, r5
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	b118      	cbz	r0, 8008972 <_fflush_r+0x1a>
 800896a:	6983      	ldr	r3, [r0, #24]
 800896c:	b90b      	cbnz	r3, 8008972 <_fflush_r+0x1a>
 800896e:	f000 f887 	bl	8008a80 <__sinit>
 8008972:	4b14      	ldr	r3, [pc, #80]	; (80089c4 <_fflush_r+0x6c>)
 8008974:	429c      	cmp	r4, r3
 8008976:	d11b      	bne.n	80089b0 <_fflush_r+0x58>
 8008978:	686c      	ldr	r4, [r5, #4]
 800897a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0ef      	beq.n	8008962 <_fflush_r+0xa>
 8008982:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008984:	07d0      	lsls	r0, r2, #31
 8008986:	d404      	bmi.n	8008992 <_fflush_r+0x3a>
 8008988:	0599      	lsls	r1, r3, #22
 800898a:	d402      	bmi.n	8008992 <_fflush_r+0x3a>
 800898c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800898e:	f000 f91a 	bl	8008bc6 <__retarget_lock_acquire_recursive>
 8008992:	4628      	mov	r0, r5
 8008994:	4621      	mov	r1, r4
 8008996:	f7ff ff5d 	bl	8008854 <__sflush_r>
 800899a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800899c:	4605      	mov	r5, r0
 800899e:	07da      	lsls	r2, r3, #31
 80089a0:	d4e0      	bmi.n	8008964 <_fflush_r+0xc>
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	059b      	lsls	r3, r3, #22
 80089a6:	d4dd      	bmi.n	8008964 <_fflush_r+0xc>
 80089a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089aa:	f000 f90d 	bl	8008bc8 <__retarget_lock_release_recursive>
 80089ae:	e7d9      	b.n	8008964 <_fflush_r+0xc>
 80089b0:	4b05      	ldr	r3, [pc, #20]	; (80089c8 <_fflush_r+0x70>)
 80089b2:	429c      	cmp	r4, r3
 80089b4:	d101      	bne.n	80089ba <_fflush_r+0x62>
 80089b6:	68ac      	ldr	r4, [r5, #8]
 80089b8:	e7df      	b.n	800897a <_fflush_r+0x22>
 80089ba:	4b04      	ldr	r3, [pc, #16]	; (80089cc <_fflush_r+0x74>)
 80089bc:	429c      	cmp	r4, r3
 80089be:	bf08      	it	eq
 80089c0:	68ec      	ldreq	r4, [r5, #12]
 80089c2:	e7da      	b.n	800897a <_fflush_r+0x22>
 80089c4:	0800a38c 	.word	0x0800a38c
 80089c8:	0800a3ac 	.word	0x0800a3ac
 80089cc:	0800a36c 	.word	0x0800a36c

080089d0 <std>:
 80089d0:	2300      	movs	r3, #0
 80089d2:	b510      	push	{r4, lr}
 80089d4:	4604      	mov	r4, r0
 80089d6:	e9c0 3300 	strd	r3, r3, [r0]
 80089da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089de:	6083      	str	r3, [r0, #8]
 80089e0:	8181      	strh	r1, [r0, #12]
 80089e2:	6643      	str	r3, [r0, #100]	; 0x64
 80089e4:	81c2      	strh	r2, [r0, #14]
 80089e6:	6183      	str	r3, [r0, #24]
 80089e8:	4619      	mov	r1, r3
 80089ea:	2208      	movs	r2, #8
 80089ec:	305c      	adds	r0, #92	; 0x5c
 80089ee:	f7fe fa0d 	bl	8006e0c <memset>
 80089f2:	4b05      	ldr	r3, [pc, #20]	; (8008a08 <std+0x38>)
 80089f4:	6224      	str	r4, [r4, #32]
 80089f6:	6263      	str	r3, [r4, #36]	; 0x24
 80089f8:	4b04      	ldr	r3, [pc, #16]	; (8008a0c <std+0x3c>)
 80089fa:	62a3      	str	r3, [r4, #40]	; 0x28
 80089fc:	4b04      	ldr	r3, [pc, #16]	; (8008a10 <std+0x40>)
 80089fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a00:	4b04      	ldr	r3, [pc, #16]	; (8008a14 <std+0x44>)
 8008a02:	6323      	str	r3, [r4, #48]	; 0x30
 8008a04:	bd10      	pop	{r4, pc}
 8008a06:	bf00      	nop
 8008a08:	08009995 	.word	0x08009995
 8008a0c:	080099b7 	.word	0x080099b7
 8008a10:	080099ef 	.word	0x080099ef
 8008a14:	08009a13 	.word	0x08009a13

08008a18 <_cleanup_r>:
 8008a18:	4901      	ldr	r1, [pc, #4]	; (8008a20 <_cleanup_r+0x8>)
 8008a1a:	f000 b8af 	b.w	8008b7c <_fwalk_reent>
 8008a1e:	bf00      	nop
 8008a20:	08008959 	.word	0x08008959

08008a24 <__sfmoreglue>:
 8008a24:	2268      	movs	r2, #104	; 0x68
 8008a26:	b570      	push	{r4, r5, r6, lr}
 8008a28:	1e4d      	subs	r5, r1, #1
 8008a2a:	4355      	muls	r5, r2
 8008a2c:	460e      	mov	r6, r1
 8008a2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008a32:	f000 fd5d 	bl	80094f0 <_malloc_r>
 8008a36:	4604      	mov	r4, r0
 8008a38:	b140      	cbz	r0, 8008a4c <__sfmoreglue+0x28>
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	e9c0 1600 	strd	r1, r6, [r0]
 8008a40:	300c      	adds	r0, #12
 8008a42:	60a0      	str	r0, [r4, #8]
 8008a44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008a48:	f7fe f9e0 	bl	8006e0c <memset>
 8008a4c:	4620      	mov	r0, r4
 8008a4e:	bd70      	pop	{r4, r5, r6, pc}

08008a50 <__sfp_lock_acquire>:
 8008a50:	4801      	ldr	r0, [pc, #4]	; (8008a58 <__sfp_lock_acquire+0x8>)
 8008a52:	f000 b8b8 	b.w	8008bc6 <__retarget_lock_acquire_recursive>
 8008a56:	bf00      	nop
 8008a58:	20000e55 	.word	0x20000e55

08008a5c <__sfp_lock_release>:
 8008a5c:	4801      	ldr	r0, [pc, #4]	; (8008a64 <__sfp_lock_release+0x8>)
 8008a5e:	f000 b8b3 	b.w	8008bc8 <__retarget_lock_release_recursive>
 8008a62:	bf00      	nop
 8008a64:	20000e55 	.word	0x20000e55

08008a68 <__sinit_lock_acquire>:
 8008a68:	4801      	ldr	r0, [pc, #4]	; (8008a70 <__sinit_lock_acquire+0x8>)
 8008a6a:	f000 b8ac 	b.w	8008bc6 <__retarget_lock_acquire_recursive>
 8008a6e:	bf00      	nop
 8008a70:	20000e56 	.word	0x20000e56

08008a74 <__sinit_lock_release>:
 8008a74:	4801      	ldr	r0, [pc, #4]	; (8008a7c <__sinit_lock_release+0x8>)
 8008a76:	f000 b8a7 	b.w	8008bc8 <__retarget_lock_release_recursive>
 8008a7a:	bf00      	nop
 8008a7c:	20000e56 	.word	0x20000e56

08008a80 <__sinit>:
 8008a80:	b510      	push	{r4, lr}
 8008a82:	4604      	mov	r4, r0
 8008a84:	f7ff fff0 	bl	8008a68 <__sinit_lock_acquire>
 8008a88:	69a3      	ldr	r3, [r4, #24]
 8008a8a:	b11b      	cbz	r3, 8008a94 <__sinit+0x14>
 8008a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a90:	f7ff bff0 	b.w	8008a74 <__sinit_lock_release>
 8008a94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008a98:	6523      	str	r3, [r4, #80]	; 0x50
 8008a9a:	4b13      	ldr	r3, [pc, #76]	; (8008ae8 <__sinit+0x68>)
 8008a9c:	4a13      	ldr	r2, [pc, #76]	; (8008aec <__sinit+0x6c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008aa2:	42a3      	cmp	r3, r4
 8008aa4:	bf08      	it	eq
 8008aa6:	2301      	moveq	r3, #1
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	bf08      	it	eq
 8008aac:	61a3      	streq	r3, [r4, #24]
 8008aae:	f000 f81f 	bl	8008af0 <__sfp>
 8008ab2:	6060      	str	r0, [r4, #4]
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f000 f81b 	bl	8008af0 <__sfp>
 8008aba:	60a0      	str	r0, [r4, #8]
 8008abc:	4620      	mov	r0, r4
 8008abe:	f000 f817 	bl	8008af0 <__sfp>
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	2104      	movs	r1, #4
 8008ac6:	60e0      	str	r0, [r4, #12]
 8008ac8:	6860      	ldr	r0, [r4, #4]
 8008aca:	f7ff ff81 	bl	80089d0 <std>
 8008ace:	2201      	movs	r2, #1
 8008ad0:	2109      	movs	r1, #9
 8008ad2:	68a0      	ldr	r0, [r4, #8]
 8008ad4:	f7ff ff7c 	bl	80089d0 <std>
 8008ad8:	2202      	movs	r2, #2
 8008ada:	2112      	movs	r1, #18
 8008adc:	68e0      	ldr	r0, [r4, #12]
 8008ade:	f7ff ff77 	bl	80089d0 <std>
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	61a3      	str	r3, [r4, #24]
 8008ae6:	e7d1      	b.n	8008a8c <__sinit+0xc>
 8008ae8:	0800a290 	.word	0x0800a290
 8008aec:	08008a19 	.word	0x08008a19

08008af0 <__sfp>:
 8008af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af2:	4607      	mov	r7, r0
 8008af4:	f7ff ffac 	bl	8008a50 <__sfp_lock_acquire>
 8008af8:	4b1e      	ldr	r3, [pc, #120]	; (8008b74 <__sfp+0x84>)
 8008afa:	681e      	ldr	r6, [r3, #0]
 8008afc:	69b3      	ldr	r3, [r6, #24]
 8008afe:	b913      	cbnz	r3, 8008b06 <__sfp+0x16>
 8008b00:	4630      	mov	r0, r6
 8008b02:	f7ff ffbd 	bl	8008a80 <__sinit>
 8008b06:	3648      	adds	r6, #72	; 0x48
 8008b08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	d503      	bpl.n	8008b18 <__sfp+0x28>
 8008b10:	6833      	ldr	r3, [r6, #0]
 8008b12:	b30b      	cbz	r3, 8008b58 <__sfp+0x68>
 8008b14:	6836      	ldr	r6, [r6, #0]
 8008b16:	e7f7      	b.n	8008b08 <__sfp+0x18>
 8008b18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b1c:	b9d5      	cbnz	r5, 8008b54 <__sfp+0x64>
 8008b1e:	4b16      	ldr	r3, [pc, #88]	; (8008b78 <__sfp+0x88>)
 8008b20:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b24:	60e3      	str	r3, [r4, #12]
 8008b26:	6665      	str	r5, [r4, #100]	; 0x64
 8008b28:	f000 f84c 	bl	8008bc4 <__retarget_lock_init_recursive>
 8008b2c:	f7ff ff96 	bl	8008a5c <__sfp_lock_release>
 8008b30:	2208      	movs	r2, #8
 8008b32:	4629      	mov	r1, r5
 8008b34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008b38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008b3c:	6025      	str	r5, [r4, #0]
 8008b3e:	61a5      	str	r5, [r4, #24]
 8008b40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008b44:	f7fe f962 	bl	8006e0c <memset>
 8008b48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008b4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008b50:	4620      	mov	r0, r4
 8008b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b54:	3468      	adds	r4, #104	; 0x68
 8008b56:	e7d9      	b.n	8008b0c <__sfp+0x1c>
 8008b58:	2104      	movs	r1, #4
 8008b5a:	4638      	mov	r0, r7
 8008b5c:	f7ff ff62 	bl	8008a24 <__sfmoreglue>
 8008b60:	4604      	mov	r4, r0
 8008b62:	6030      	str	r0, [r6, #0]
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d1d5      	bne.n	8008b14 <__sfp+0x24>
 8008b68:	f7ff ff78 	bl	8008a5c <__sfp_lock_release>
 8008b6c:	230c      	movs	r3, #12
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	e7ee      	b.n	8008b50 <__sfp+0x60>
 8008b72:	bf00      	nop
 8008b74:	0800a290 	.word	0x0800a290
 8008b78:	ffff0001 	.word	0xffff0001

08008b7c <_fwalk_reent>:
 8008b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b80:	4606      	mov	r6, r0
 8008b82:	4688      	mov	r8, r1
 8008b84:	2700      	movs	r7, #0
 8008b86:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008b8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b8e:	f1b9 0901 	subs.w	r9, r9, #1
 8008b92:	d505      	bpl.n	8008ba0 <_fwalk_reent+0x24>
 8008b94:	6824      	ldr	r4, [r4, #0]
 8008b96:	2c00      	cmp	r4, #0
 8008b98:	d1f7      	bne.n	8008b8a <_fwalk_reent+0xe>
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ba0:	89ab      	ldrh	r3, [r5, #12]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d907      	bls.n	8008bb6 <_fwalk_reent+0x3a>
 8008ba6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008baa:	3301      	adds	r3, #1
 8008bac:	d003      	beq.n	8008bb6 <_fwalk_reent+0x3a>
 8008bae:	4629      	mov	r1, r5
 8008bb0:	4630      	mov	r0, r6
 8008bb2:	47c0      	blx	r8
 8008bb4:	4307      	orrs	r7, r0
 8008bb6:	3568      	adds	r5, #104	; 0x68
 8008bb8:	e7e9      	b.n	8008b8e <_fwalk_reent+0x12>
	...

08008bbc <_localeconv_r>:
 8008bbc:	4800      	ldr	r0, [pc, #0]	; (8008bc0 <_localeconv_r+0x4>)
 8008bbe:	4770      	bx	lr
 8008bc0:	2000016c 	.word	0x2000016c

08008bc4 <__retarget_lock_init_recursive>:
 8008bc4:	4770      	bx	lr

08008bc6 <__retarget_lock_acquire_recursive>:
 8008bc6:	4770      	bx	lr

08008bc8 <__retarget_lock_release_recursive>:
 8008bc8:	4770      	bx	lr

08008bca <__swhatbuf_r>:
 8008bca:	b570      	push	{r4, r5, r6, lr}
 8008bcc:	460e      	mov	r6, r1
 8008bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bd2:	4614      	mov	r4, r2
 8008bd4:	2900      	cmp	r1, #0
 8008bd6:	461d      	mov	r5, r3
 8008bd8:	b096      	sub	sp, #88	; 0x58
 8008bda:	da08      	bge.n	8008bee <__swhatbuf_r+0x24>
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008be2:	602a      	str	r2, [r5, #0]
 8008be4:	061a      	lsls	r2, r3, #24
 8008be6:	d410      	bmi.n	8008c0a <__swhatbuf_r+0x40>
 8008be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bec:	e00e      	b.n	8008c0c <__swhatbuf_r+0x42>
 8008bee:	466a      	mov	r2, sp
 8008bf0:	f000 ff36 	bl	8009a60 <_fstat_r>
 8008bf4:	2800      	cmp	r0, #0
 8008bf6:	dbf1      	blt.n	8008bdc <__swhatbuf_r+0x12>
 8008bf8:	9a01      	ldr	r2, [sp, #4]
 8008bfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008bfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c02:	425a      	negs	r2, r3
 8008c04:	415a      	adcs	r2, r3
 8008c06:	602a      	str	r2, [r5, #0]
 8008c08:	e7ee      	b.n	8008be8 <__swhatbuf_r+0x1e>
 8008c0a:	2340      	movs	r3, #64	; 0x40
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	6023      	str	r3, [r4, #0]
 8008c10:	b016      	add	sp, #88	; 0x58
 8008c12:	bd70      	pop	{r4, r5, r6, pc}

08008c14 <__smakebuf_r>:
 8008c14:	898b      	ldrh	r3, [r1, #12]
 8008c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c18:	079d      	lsls	r5, r3, #30
 8008c1a:	4606      	mov	r6, r0
 8008c1c:	460c      	mov	r4, r1
 8008c1e:	d507      	bpl.n	8008c30 <__smakebuf_r+0x1c>
 8008c20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	6123      	str	r3, [r4, #16]
 8008c28:	2301      	movs	r3, #1
 8008c2a:	6163      	str	r3, [r4, #20]
 8008c2c:	b002      	add	sp, #8
 8008c2e:	bd70      	pop	{r4, r5, r6, pc}
 8008c30:	466a      	mov	r2, sp
 8008c32:	ab01      	add	r3, sp, #4
 8008c34:	f7ff ffc9 	bl	8008bca <__swhatbuf_r>
 8008c38:	9900      	ldr	r1, [sp, #0]
 8008c3a:	4605      	mov	r5, r0
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f000 fc57 	bl	80094f0 <_malloc_r>
 8008c42:	b948      	cbnz	r0, 8008c58 <__smakebuf_r+0x44>
 8008c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c48:	059a      	lsls	r2, r3, #22
 8008c4a:	d4ef      	bmi.n	8008c2c <__smakebuf_r+0x18>
 8008c4c:	f023 0303 	bic.w	r3, r3, #3
 8008c50:	f043 0302 	orr.w	r3, r3, #2
 8008c54:	81a3      	strh	r3, [r4, #12]
 8008c56:	e7e3      	b.n	8008c20 <__smakebuf_r+0xc>
 8008c58:	4b0d      	ldr	r3, [pc, #52]	; (8008c90 <__smakebuf_r+0x7c>)
 8008c5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008c5c:	89a3      	ldrh	r3, [r4, #12]
 8008c5e:	6020      	str	r0, [r4, #0]
 8008c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c64:	81a3      	strh	r3, [r4, #12]
 8008c66:	9b00      	ldr	r3, [sp, #0]
 8008c68:	6120      	str	r0, [r4, #16]
 8008c6a:	6163      	str	r3, [r4, #20]
 8008c6c:	9b01      	ldr	r3, [sp, #4]
 8008c6e:	b15b      	cbz	r3, 8008c88 <__smakebuf_r+0x74>
 8008c70:	4630      	mov	r0, r6
 8008c72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c76:	f000 ff05 	bl	8009a84 <_isatty_r>
 8008c7a:	b128      	cbz	r0, 8008c88 <__smakebuf_r+0x74>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	f023 0303 	bic.w	r3, r3, #3
 8008c82:	f043 0301 	orr.w	r3, r3, #1
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	89a0      	ldrh	r0, [r4, #12]
 8008c8a:	4305      	orrs	r5, r0
 8008c8c:	81a5      	strh	r5, [r4, #12]
 8008c8e:	e7cd      	b.n	8008c2c <__smakebuf_r+0x18>
 8008c90:	08008a19 	.word	0x08008a19

08008c94 <malloc>:
 8008c94:	4b02      	ldr	r3, [pc, #8]	; (8008ca0 <malloc+0xc>)
 8008c96:	4601      	mov	r1, r0
 8008c98:	6818      	ldr	r0, [r3, #0]
 8008c9a:	f000 bc29 	b.w	80094f0 <_malloc_r>
 8008c9e:	bf00      	nop
 8008ca0:	20000018 	.word	0x20000018

08008ca4 <memchr>:
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	b510      	push	{r4, lr}
 8008ca8:	b2c9      	uxtb	r1, r1
 8008caa:	4402      	add	r2, r0
 8008cac:	4293      	cmp	r3, r2
 8008cae:	4618      	mov	r0, r3
 8008cb0:	d101      	bne.n	8008cb6 <memchr+0x12>
 8008cb2:	2000      	movs	r0, #0
 8008cb4:	e003      	b.n	8008cbe <memchr+0x1a>
 8008cb6:	7804      	ldrb	r4, [r0, #0]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	428c      	cmp	r4, r1
 8008cbc:	d1f6      	bne.n	8008cac <memchr+0x8>
 8008cbe:	bd10      	pop	{r4, pc}

08008cc0 <memmove>:
 8008cc0:	4288      	cmp	r0, r1
 8008cc2:	b510      	push	{r4, lr}
 8008cc4:	eb01 0402 	add.w	r4, r1, r2
 8008cc8:	d902      	bls.n	8008cd0 <memmove+0x10>
 8008cca:	4284      	cmp	r4, r0
 8008ccc:	4623      	mov	r3, r4
 8008cce:	d807      	bhi.n	8008ce0 <memmove+0x20>
 8008cd0:	1e43      	subs	r3, r0, #1
 8008cd2:	42a1      	cmp	r1, r4
 8008cd4:	d008      	beq.n	8008ce8 <memmove+0x28>
 8008cd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008cda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cde:	e7f8      	b.n	8008cd2 <memmove+0x12>
 8008ce0:	4601      	mov	r1, r0
 8008ce2:	4402      	add	r2, r0
 8008ce4:	428a      	cmp	r2, r1
 8008ce6:	d100      	bne.n	8008cea <memmove+0x2a>
 8008ce8:	bd10      	pop	{r4, pc}
 8008cea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cf2:	e7f7      	b.n	8008ce4 <memmove+0x24>

08008cf4 <_Balloc>:
 8008cf4:	b570      	push	{r4, r5, r6, lr}
 8008cf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008cf8:	4604      	mov	r4, r0
 8008cfa:	460d      	mov	r5, r1
 8008cfc:	b976      	cbnz	r6, 8008d1c <_Balloc+0x28>
 8008cfe:	2010      	movs	r0, #16
 8008d00:	f7ff ffc8 	bl	8008c94 <malloc>
 8008d04:	4602      	mov	r2, r0
 8008d06:	6260      	str	r0, [r4, #36]	; 0x24
 8008d08:	b920      	cbnz	r0, 8008d14 <_Balloc+0x20>
 8008d0a:	2166      	movs	r1, #102	; 0x66
 8008d0c:	4b17      	ldr	r3, [pc, #92]	; (8008d6c <_Balloc+0x78>)
 8008d0e:	4818      	ldr	r0, [pc, #96]	; (8008d70 <_Balloc+0x7c>)
 8008d10:	f7fe f814 	bl	8006d3c <__assert_func>
 8008d14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d18:	6006      	str	r6, [r0, #0]
 8008d1a:	60c6      	str	r6, [r0, #12]
 8008d1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008d1e:	68f3      	ldr	r3, [r6, #12]
 8008d20:	b183      	cbz	r3, 8008d44 <_Balloc+0x50>
 8008d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d2a:	b9b8      	cbnz	r0, 8008d5c <_Balloc+0x68>
 8008d2c:	2101      	movs	r1, #1
 8008d2e:	fa01 f605 	lsl.w	r6, r1, r5
 8008d32:	1d72      	adds	r2, r6, #5
 8008d34:	4620      	mov	r0, r4
 8008d36:	0092      	lsls	r2, r2, #2
 8008d38:	f000 fb5e 	bl	80093f8 <_calloc_r>
 8008d3c:	b160      	cbz	r0, 8008d58 <_Balloc+0x64>
 8008d3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d42:	e00e      	b.n	8008d62 <_Balloc+0x6e>
 8008d44:	2221      	movs	r2, #33	; 0x21
 8008d46:	2104      	movs	r1, #4
 8008d48:	4620      	mov	r0, r4
 8008d4a:	f000 fb55 	bl	80093f8 <_calloc_r>
 8008d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d50:	60f0      	str	r0, [r6, #12]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1e4      	bne.n	8008d22 <_Balloc+0x2e>
 8008d58:	2000      	movs	r0, #0
 8008d5a:	bd70      	pop	{r4, r5, r6, pc}
 8008d5c:	6802      	ldr	r2, [r0, #0]
 8008d5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d62:	2300      	movs	r3, #0
 8008d64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d68:	e7f7      	b.n	8008d5a <_Balloc+0x66>
 8008d6a:	bf00      	nop
 8008d6c:	0800a2e6 	.word	0x0800a2e6
 8008d70:	0800a3cc 	.word	0x0800a3cc

08008d74 <_Bfree>:
 8008d74:	b570      	push	{r4, r5, r6, lr}
 8008d76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d78:	4605      	mov	r5, r0
 8008d7a:	460c      	mov	r4, r1
 8008d7c:	b976      	cbnz	r6, 8008d9c <_Bfree+0x28>
 8008d7e:	2010      	movs	r0, #16
 8008d80:	f7ff ff88 	bl	8008c94 <malloc>
 8008d84:	4602      	mov	r2, r0
 8008d86:	6268      	str	r0, [r5, #36]	; 0x24
 8008d88:	b920      	cbnz	r0, 8008d94 <_Bfree+0x20>
 8008d8a:	218a      	movs	r1, #138	; 0x8a
 8008d8c:	4b08      	ldr	r3, [pc, #32]	; (8008db0 <_Bfree+0x3c>)
 8008d8e:	4809      	ldr	r0, [pc, #36]	; (8008db4 <_Bfree+0x40>)
 8008d90:	f7fd ffd4 	bl	8006d3c <__assert_func>
 8008d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d98:	6006      	str	r6, [r0, #0]
 8008d9a:	60c6      	str	r6, [r0, #12]
 8008d9c:	b13c      	cbz	r4, 8008dae <_Bfree+0x3a>
 8008d9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008da0:	6862      	ldr	r2, [r4, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008da8:	6021      	str	r1, [r4, #0]
 8008daa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dae:	bd70      	pop	{r4, r5, r6, pc}
 8008db0:	0800a2e6 	.word	0x0800a2e6
 8008db4:	0800a3cc 	.word	0x0800a3cc

08008db8 <__multadd>:
 8008db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dbc:	4607      	mov	r7, r0
 8008dbe:	460c      	mov	r4, r1
 8008dc0:	461e      	mov	r6, r3
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	690d      	ldr	r5, [r1, #16]
 8008dc6:	f101 0c14 	add.w	ip, r1, #20
 8008dca:	f8dc 3000 	ldr.w	r3, [ip]
 8008dce:	3001      	adds	r0, #1
 8008dd0:	b299      	uxth	r1, r3
 8008dd2:	fb02 6101 	mla	r1, r2, r1, r6
 8008dd6:	0c1e      	lsrs	r6, r3, #16
 8008dd8:	0c0b      	lsrs	r3, r1, #16
 8008dda:	fb02 3306 	mla	r3, r2, r6, r3
 8008dde:	b289      	uxth	r1, r1
 8008de0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008de4:	4285      	cmp	r5, r0
 8008de6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008dea:	f84c 1b04 	str.w	r1, [ip], #4
 8008dee:	dcec      	bgt.n	8008dca <__multadd+0x12>
 8008df0:	b30e      	cbz	r6, 8008e36 <__multadd+0x7e>
 8008df2:	68a3      	ldr	r3, [r4, #8]
 8008df4:	42ab      	cmp	r3, r5
 8008df6:	dc19      	bgt.n	8008e2c <__multadd+0x74>
 8008df8:	6861      	ldr	r1, [r4, #4]
 8008dfa:	4638      	mov	r0, r7
 8008dfc:	3101      	adds	r1, #1
 8008dfe:	f7ff ff79 	bl	8008cf4 <_Balloc>
 8008e02:	4680      	mov	r8, r0
 8008e04:	b928      	cbnz	r0, 8008e12 <__multadd+0x5a>
 8008e06:	4602      	mov	r2, r0
 8008e08:	21b5      	movs	r1, #181	; 0xb5
 8008e0a:	4b0c      	ldr	r3, [pc, #48]	; (8008e3c <__multadd+0x84>)
 8008e0c:	480c      	ldr	r0, [pc, #48]	; (8008e40 <__multadd+0x88>)
 8008e0e:	f7fd ff95 	bl	8006d3c <__assert_func>
 8008e12:	6922      	ldr	r2, [r4, #16]
 8008e14:	f104 010c 	add.w	r1, r4, #12
 8008e18:	3202      	adds	r2, #2
 8008e1a:	0092      	lsls	r2, r2, #2
 8008e1c:	300c      	adds	r0, #12
 8008e1e:	f7fd ffe7 	bl	8006df0 <memcpy>
 8008e22:	4621      	mov	r1, r4
 8008e24:	4638      	mov	r0, r7
 8008e26:	f7ff ffa5 	bl	8008d74 <_Bfree>
 8008e2a:	4644      	mov	r4, r8
 8008e2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e30:	3501      	adds	r5, #1
 8008e32:	615e      	str	r6, [r3, #20]
 8008e34:	6125      	str	r5, [r4, #16]
 8008e36:	4620      	mov	r0, r4
 8008e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e3c:	0800a358 	.word	0x0800a358
 8008e40:	0800a3cc 	.word	0x0800a3cc

08008e44 <__hi0bits>:
 8008e44:	0c02      	lsrs	r2, r0, #16
 8008e46:	0412      	lsls	r2, r2, #16
 8008e48:	4603      	mov	r3, r0
 8008e4a:	b9ca      	cbnz	r2, 8008e80 <__hi0bits+0x3c>
 8008e4c:	0403      	lsls	r3, r0, #16
 8008e4e:	2010      	movs	r0, #16
 8008e50:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008e54:	bf04      	itt	eq
 8008e56:	021b      	lsleq	r3, r3, #8
 8008e58:	3008      	addeq	r0, #8
 8008e5a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e5e:	bf04      	itt	eq
 8008e60:	011b      	lsleq	r3, r3, #4
 8008e62:	3004      	addeq	r0, #4
 8008e64:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008e68:	bf04      	itt	eq
 8008e6a:	009b      	lsleq	r3, r3, #2
 8008e6c:	3002      	addeq	r0, #2
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	db05      	blt.n	8008e7e <__hi0bits+0x3a>
 8008e72:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008e76:	f100 0001 	add.w	r0, r0, #1
 8008e7a:	bf08      	it	eq
 8008e7c:	2020      	moveq	r0, #32
 8008e7e:	4770      	bx	lr
 8008e80:	2000      	movs	r0, #0
 8008e82:	e7e5      	b.n	8008e50 <__hi0bits+0xc>

08008e84 <__lo0bits>:
 8008e84:	6803      	ldr	r3, [r0, #0]
 8008e86:	4602      	mov	r2, r0
 8008e88:	f013 0007 	ands.w	r0, r3, #7
 8008e8c:	d00b      	beq.n	8008ea6 <__lo0bits+0x22>
 8008e8e:	07d9      	lsls	r1, r3, #31
 8008e90:	d421      	bmi.n	8008ed6 <__lo0bits+0x52>
 8008e92:	0798      	lsls	r0, r3, #30
 8008e94:	bf49      	itett	mi
 8008e96:	085b      	lsrmi	r3, r3, #1
 8008e98:	089b      	lsrpl	r3, r3, #2
 8008e9a:	2001      	movmi	r0, #1
 8008e9c:	6013      	strmi	r3, [r2, #0]
 8008e9e:	bf5c      	itt	pl
 8008ea0:	2002      	movpl	r0, #2
 8008ea2:	6013      	strpl	r3, [r2, #0]
 8008ea4:	4770      	bx	lr
 8008ea6:	b299      	uxth	r1, r3
 8008ea8:	b909      	cbnz	r1, 8008eae <__lo0bits+0x2a>
 8008eaa:	2010      	movs	r0, #16
 8008eac:	0c1b      	lsrs	r3, r3, #16
 8008eae:	b2d9      	uxtb	r1, r3
 8008eb0:	b909      	cbnz	r1, 8008eb6 <__lo0bits+0x32>
 8008eb2:	3008      	adds	r0, #8
 8008eb4:	0a1b      	lsrs	r3, r3, #8
 8008eb6:	0719      	lsls	r1, r3, #28
 8008eb8:	bf04      	itt	eq
 8008eba:	091b      	lsreq	r3, r3, #4
 8008ebc:	3004      	addeq	r0, #4
 8008ebe:	0799      	lsls	r1, r3, #30
 8008ec0:	bf04      	itt	eq
 8008ec2:	089b      	lsreq	r3, r3, #2
 8008ec4:	3002      	addeq	r0, #2
 8008ec6:	07d9      	lsls	r1, r3, #31
 8008ec8:	d403      	bmi.n	8008ed2 <__lo0bits+0x4e>
 8008eca:	085b      	lsrs	r3, r3, #1
 8008ecc:	f100 0001 	add.w	r0, r0, #1
 8008ed0:	d003      	beq.n	8008eda <__lo0bits+0x56>
 8008ed2:	6013      	str	r3, [r2, #0]
 8008ed4:	4770      	bx	lr
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	4770      	bx	lr
 8008eda:	2020      	movs	r0, #32
 8008edc:	4770      	bx	lr
	...

08008ee0 <__i2b>:
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	2101      	movs	r1, #1
 8008ee6:	f7ff ff05 	bl	8008cf4 <_Balloc>
 8008eea:	4602      	mov	r2, r0
 8008eec:	b928      	cbnz	r0, 8008efa <__i2b+0x1a>
 8008eee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ef2:	4b04      	ldr	r3, [pc, #16]	; (8008f04 <__i2b+0x24>)
 8008ef4:	4804      	ldr	r0, [pc, #16]	; (8008f08 <__i2b+0x28>)
 8008ef6:	f7fd ff21 	bl	8006d3c <__assert_func>
 8008efa:	2301      	movs	r3, #1
 8008efc:	6144      	str	r4, [r0, #20]
 8008efe:	6103      	str	r3, [r0, #16]
 8008f00:	bd10      	pop	{r4, pc}
 8008f02:	bf00      	nop
 8008f04:	0800a358 	.word	0x0800a358
 8008f08:	0800a3cc 	.word	0x0800a3cc

08008f0c <__multiply>:
 8008f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f10:	4691      	mov	r9, r2
 8008f12:	690a      	ldr	r2, [r1, #16]
 8008f14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f18:	460c      	mov	r4, r1
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	bfbe      	ittt	lt
 8008f1e:	460b      	movlt	r3, r1
 8008f20:	464c      	movlt	r4, r9
 8008f22:	4699      	movlt	r9, r3
 8008f24:	6927      	ldr	r7, [r4, #16]
 8008f26:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f2a:	68a3      	ldr	r3, [r4, #8]
 8008f2c:	6861      	ldr	r1, [r4, #4]
 8008f2e:	eb07 060a 	add.w	r6, r7, sl
 8008f32:	42b3      	cmp	r3, r6
 8008f34:	b085      	sub	sp, #20
 8008f36:	bfb8      	it	lt
 8008f38:	3101      	addlt	r1, #1
 8008f3a:	f7ff fedb 	bl	8008cf4 <_Balloc>
 8008f3e:	b930      	cbnz	r0, 8008f4e <__multiply+0x42>
 8008f40:	4602      	mov	r2, r0
 8008f42:	f240 115d 	movw	r1, #349	; 0x15d
 8008f46:	4b43      	ldr	r3, [pc, #268]	; (8009054 <__multiply+0x148>)
 8008f48:	4843      	ldr	r0, [pc, #268]	; (8009058 <__multiply+0x14c>)
 8008f4a:	f7fd fef7 	bl	8006d3c <__assert_func>
 8008f4e:	f100 0514 	add.w	r5, r0, #20
 8008f52:	462b      	mov	r3, r5
 8008f54:	2200      	movs	r2, #0
 8008f56:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f5a:	4543      	cmp	r3, r8
 8008f5c:	d321      	bcc.n	8008fa2 <__multiply+0x96>
 8008f5e:	f104 0314 	add.w	r3, r4, #20
 8008f62:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f66:	f109 0314 	add.w	r3, r9, #20
 8008f6a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f6e:	9202      	str	r2, [sp, #8]
 8008f70:	1b3a      	subs	r2, r7, r4
 8008f72:	3a15      	subs	r2, #21
 8008f74:	f022 0203 	bic.w	r2, r2, #3
 8008f78:	3204      	adds	r2, #4
 8008f7a:	f104 0115 	add.w	r1, r4, #21
 8008f7e:	428f      	cmp	r7, r1
 8008f80:	bf38      	it	cc
 8008f82:	2204      	movcc	r2, #4
 8008f84:	9201      	str	r2, [sp, #4]
 8008f86:	9a02      	ldr	r2, [sp, #8]
 8008f88:	9303      	str	r3, [sp, #12]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d80c      	bhi.n	8008fa8 <__multiply+0x9c>
 8008f8e:	2e00      	cmp	r6, #0
 8008f90:	dd03      	ble.n	8008f9a <__multiply+0x8e>
 8008f92:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d059      	beq.n	800904e <__multiply+0x142>
 8008f9a:	6106      	str	r6, [r0, #16]
 8008f9c:	b005      	add	sp, #20
 8008f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa2:	f843 2b04 	str.w	r2, [r3], #4
 8008fa6:	e7d8      	b.n	8008f5a <__multiply+0x4e>
 8008fa8:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fac:	f1ba 0f00 	cmp.w	sl, #0
 8008fb0:	d023      	beq.n	8008ffa <__multiply+0xee>
 8008fb2:	46a9      	mov	r9, r5
 8008fb4:	f04f 0c00 	mov.w	ip, #0
 8008fb8:	f104 0e14 	add.w	lr, r4, #20
 8008fbc:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008fc0:	f8d9 1000 	ldr.w	r1, [r9]
 8008fc4:	fa1f fb82 	uxth.w	fp, r2
 8008fc8:	b289      	uxth	r1, r1
 8008fca:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fce:	4461      	add	r1, ip
 8008fd0:	f8d9 c000 	ldr.w	ip, [r9]
 8008fd4:	0c12      	lsrs	r2, r2, #16
 8008fd6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008fda:	fb0a c202 	mla	r2, sl, r2, ip
 8008fde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fe2:	b289      	uxth	r1, r1
 8008fe4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fe8:	4577      	cmp	r7, lr
 8008fea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fee:	f849 1b04 	str.w	r1, [r9], #4
 8008ff2:	d8e3      	bhi.n	8008fbc <__multiply+0xb0>
 8008ff4:	9a01      	ldr	r2, [sp, #4]
 8008ff6:	f845 c002 	str.w	ip, [r5, r2]
 8008ffa:	9a03      	ldr	r2, [sp, #12]
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009002:	f1b9 0f00 	cmp.w	r9, #0
 8009006:	d020      	beq.n	800904a <__multiply+0x13e>
 8009008:	46ae      	mov	lr, r5
 800900a:	f04f 0a00 	mov.w	sl, #0
 800900e:	6829      	ldr	r1, [r5, #0]
 8009010:	f104 0c14 	add.w	ip, r4, #20
 8009014:	f8bc b000 	ldrh.w	fp, [ip]
 8009018:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800901c:	b289      	uxth	r1, r1
 800901e:	fb09 220b 	mla	r2, r9, fp, r2
 8009022:	4492      	add	sl, r2
 8009024:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009028:	f84e 1b04 	str.w	r1, [lr], #4
 800902c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009030:	f8be 1000 	ldrh.w	r1, [lr]
 8009034:	0c12      	lsrs	r2, r2, #16
 8009036:	fb09 1102 	mla	r1, r9, r2, r1
 800903a:	4567      	cmp	r7, ip
 800903c:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009040:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009044:	d8e6      	bhi.n	8009014 <__multiply+0x108>
 8009046:	9a01      	ldr	r2, [sp, #4]
 8009048:	50a9      	str	r1, [r5, r2]
 800904a:	3504      	adds	r5, #4
 800904c:	e79b      	b.n	8008f86 <__multiply+0x7a>
 800904e:	3e01      	subs	r6, #1
 8009050:	e79d      	b.n	8008f8e <__multiply+0x82>
 8009052:	bf00      	nop
 8009054:	0800a358 	.word	0x0800a358
 8009058:	0800a3cc 	.word	0x0800a3cc

0800905c <__pow5mult>:
 800905c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009060:	4615      	mov	r5, r2
 8009062:	f012 0203 	ands.w	r2, r2, #3
 8009066:	4606      	mov	r6, r0
 8009068:	460f      	mov	r7, r1
 800906a:	d007      	beq.n	800907c <__pow5mult+0x20>
 800906c:	4c25      	ldr	r4, [pc, #148]	; (8009104 <__pow5mult+0xa8>)
 800906e:	3a01      	subs	r2, #1
 8009070:	2300      	movs	r3, #0
 8009072:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009076:	f7ff fe9f 	bl	8008db8 <__multadd>
 800907a:	4607      	mov	r7, r0
 800907c:	10ad      	asrs	r5, r5, #2
 800907e:	d03d      	beq.n	80090fc <__pow5mult+0xa0>
 8009080:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009082:	b97c      	cbnz	r4, 80090a4 <__pow5mult+0x48>
 8009084:	2010      	movs	r0, #16
 8009086:	f7ff fe05 	bl	8008c94 <malloc>
 800908a:	4602      	mov	r2, r0
 800908c:	6270      	str	r0, [r6, #36]	; 0x24
 800908e:	b928      	cbnz	r0, 800909c <__pow5mult+0x40>
 8009090:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009094:	4b1c      	ldr	r3, [pc, #112]	; (8009108 <__pow5mult+0xac>)
 8009096:	481d      	ldr	r0, [pc, #116]	; (800910c <__pow5mult+0xb0>)
 8009098:	f7fd fe50 	bl	8006d3c <__assert_func>
 800909c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090a0:	6004      	str	r4, [r0, #0]
 80090a2:	60c4      	str	r4, [r0, #12]
 80090a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80090a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090ac:	b94c      	cbnz	r4, 80090c2 <__pow5mult+0x66>
 80090ae:	f240 2171 	movw	r1, #625	; 0x271
 80090b2:	4630      	mov	r0, r6
 80090b4:	f7ff ff14 	bl	8008ee0 <__i2b>
 80090b8:	2300      	movs	r3, #0
 80090ba:	4604      	mov	r4, r0
 80090bc:	f8c8 0008 	str.w	r0, [r8, #8]
 80090c0:	6003      	str	r3, [r0, #0]
 80090c2:	f04f 0900 	mov.w	r9, #0
 80090c6:	07eb      	lsls	r3, r5, #31
 80090c8:	d50a      	bpl.n	80090e0 <__pow5mult+0x84>
 80090ca:	4639      	mov	r1, r7
 80090cc:	4622      	mov	r2, r4
 80090ce:	4630      	mov	r0, r6
 80090d0:	f7ff ff1c 	bl	8008f0c <__multiply>
 80090d4:	4680      	mov	r8, r0
 80090d6:	4639      	mov	r1, r7
 80090d8:	4630      	mov	r0, r6
 80090da:	f7ff fe4b 	bl	8008d74 <_Bfree>
 80090de:	4647      	mov	r7, r8
 80090e0:	106d      	asrs	r5, r5, #1
 80090e2:	d00b      	beq.n	80090fc <__pow5mult+0xa0>
 80090e4:	6820      	ldr	r0, [r4, #0]
 80090e6:	b938      	cbnz	r0, 80090f8 <__pow5mult+0x9c>
 80090e8:	4622      	mov	r2, r4
 80090ea:	4621      	mov	r1, r4
 80090ec:	4630      	mov	r0, r6
 80090ee:	f7ff ff0d 	bl	8008f0c <__multiply>
 80090f2:	6020      	str	r0, [r4, #0]
 80090f4:	f8c0 9000 	str.w	r9, [r0]
 80090f8:	4604      	mov	r4, r0
 80090fa:	e7e4      	b.n	80090c6 <__pow5mult+0x6a>
 80090fc:	4638      	mov	r0, r7
 80090fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009102:	bf00      	nop
 8009104:	0800a518 	.word	0x0800a518
 8009108:	0800a2e6 	.word	0x0800a2e6
 800910c:	0800a3cc 	.word	0x0800a3cc

08009110 <__lshift>:
 8009110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009114:	460c      	mov	r4, r1
 8009116:	4607      	mov	r7, r0
 8009118:	4691      	mov	r9, r2
 800911a:	6923      	ldr	r3, [r4, #16]
 800911c:	6849      	ldr	r1, [r1, #4]
 800911e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009122:	68a3      	ldr	r3, [r4, #8]
 8009124:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009128:	f108 0601 	add.w	r6, r8, #1
 800912c:	42b3      	cmp	r3, r6
 800912e:	db0b      	blt.n	8009148 <__lshift+0x38>
 8009130:	4638      	mov	r0, r7
 8009132:	f7ff fddf 	bl	8008cf4 <_Balloc>
 8009136:	4605      	mov	r5, r0
 8009138:	b948      	cbnz	r0, 800914e <__lshift+0x3e>
 800913a:	4602      	mov	r2, r0
 800913c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009140:	4b29      	ldr	r3, [pc, #164]	; (80091e8 <__lshift+0xd8>)
 8009142:	482a      	ldr	r0, [pc, #168]	; (80091ec <__lshift+0xdc>)
 8009144:	f7fd fdfa 	bl	8006d3c <__assert_func>
 8009148:	3101      	adds	r1, #1
 800914a:	005b      	lsls	r3, r3, #1
 800914c:	e7ee      	b.n	800912c <__lshift+0x1c>
 800914e:	2300      	movs	r3, #0
 8009150:	f100 0114 	add.w	r1, r0, #20
 8009154:	f100 0210 	add.w	r2, r0, #16
 8009158:	4618      	mov	r0, r3
 800915a:	4553      	cmp	r3, sl
 800915c:	db37      	blt.n	80091ce <__lshift+0xbe>
 800915e:	6920      	ldr	r0, [r4, #16]
 8009160:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009164:	f104 0314 	add.w	r3, r4, #20
 8009168:	f019 091f 	ands.w	r9, r9, #31
 800916c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009170:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009174:	d02f      	beq.n	80091d6 <__lshift+0xc6>
 8009176:	468a      	mov	sl, r1
 8009178:	f04f 0c00 	mov.w	ip, #0
 800917c:	f1c9 0e20 	rsb	lr, r9, #32
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	fa02 f209 	lsl.w	r2, r2, r9
 8009186:	ea42 020c 	orr.w	r2, r2, ip
 800918a:	f84a 2b04 	str.w	r2, [sl], #4
 800918e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009192:	4298      	cmp	r0, r3
 8009194:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009198:	d8f2      	bhi.n	8009180 <__lshift+0x70>
 800919a:	1b03      	subs	r3, r0, r4
 800919c:	3b15      	subs	r3, #21
 800919e:	f023 0303 	bic.w	r3, r3, #3
 80091a2:	3304      	adds	r3, #4
 80091a4:	f104 0215 	add.w	r2, r4, #21
 80091a8:	4290      	cmp	r0, r2
 80091aa:	bf38      	it	cc
 80091ac:	2304      	movcc	r3, #4
 80091ae:	f841 c003 	str.w	ip, [r1, r3]
 80091b2:	f1bc 0f00 	cmp.w	ip, #0
 80091b6:	d001      	beq.n	80091bc <__lshift+0xac>
 80091b8:	f108 0602 	add.w	r6, r8, #2
 80091bc:	3e01      	subs	r6, #1
 80091be:	4638      	mov	r0, r7
 80091c0:	4621      	mov	r1, r4
 80091c2:	612e      	str	r6, [r5, #16]
 80091c4:	f7ff fdd6 	bl	8008d74 <_Bfree>
 80091c8:	4628      	mov	r0, r5
 80091ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80091d2:	3301      	adds	r3, #1
 80091d4:	e7c1      	b.n	800915a <__lshift+0x4a>
 80091d6:	3904      	subs	r1, #4
 80091d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80091dc:	4298      	cmp	r0, r3
 80091de:	f841 2f04 	str.w	r2, [r1, #4]!
 80091e2:	d8f9      	bhi.n	80091d8 <__lshift+0xc8>
 80091e4:	e7ea      	b.n	80091bc <__lshift+0xac>
 80091e6:	bf00      	nop
 80091e8:	0800a358 	.word	0x0800a358
 80091ec:	0800a3cc 	.word	0x0800a3cc

080091f0 <__mcmp>:
 80091f0:	4603      	mov	r3, r0
 80091f2:	690a      	ldr	r2, [r1, #16]
 80091f4:	6900      	ldr	r0, [r0, #16]
 80091f6:	b530      	push	{r4, r5, lr}
 80091f8:	1a80      	subs	r0, r0, r2
 80091fa:	d10d      	bne.n	8009218 <__mcmp+0x28>
 80091fc:	3314      	adds	r3, #20
 80091fe:	3114      	adds	r1, #20
 8009200:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009204:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009208:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800920c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009210:	4295      	cmp	r5, r2
 8009212:	d002      	beq.n	800921a <__mcmp+0x2a>
 8009214:	d304      	bcc.n	8009220 <__mcmp+0x30>
 8009216:	2001      	movs	r0, #1
 8009218:	bd30      	pop	{r4, r5, pc}
 800921a:	42a3      	cmp	r3, r4
 800921c:	d3f4      	bcc.n	8009208 <__mcmp+0x18>
 800921e:	e7fb      	b.n	8009218 <__mcmp+0x28>
 8009220:	f04f 30ff 	mov.w	r0, #4294967295
 8009224:	e7f8      	b.n	8009218 <__mcmp+0x28>
	...

08009228 <__mdiff>:
 8009228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800922c:	460d      	mov	r5, r1
 800922e:	4607      	mov	r7, r0
 8009230:	4611      	mov	r1, r2
 8009232:	4628      	mov	r0, r5
 8009234:	4614      	mov	r4, r2
 8009236:	f7ff ffdb 	bl	80091f0 <__mcmp>
 800923a:	1e06      	subs	r6, r0, #0
 800923c:	d111      	bne.n	8009262 <__mdiff+0x3a>
 800923e:	4631      	mov	r1, r6
 8009240:	4638      	mov	r0, r7
 8009242:	f7ff fd57 	bl	8008cf4 <_Balloc>
 8009246:	4602      	mov	r2, r0
 8009248:	b928      	cbnz	r0, 8009256 <__mdiff+0x2e>
 800924a:	f240 2132 	movw	r1, #562	; 0x232
 800924e:	4b3a      	ldr	r3, [pc, #232]	; (8009338 <__mdiff+0x110>)
 8009250:	483a      	ldr	r0, [pc, #232]	; (800933c <__mdiff+0x114>)
 8009252:	f7fd fd73 	bl	8006d3c <__assert_func>
 8009256:	2301      	movs	r3, #1
 8009258:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800925c:	4610      	mov	r0, r2
 800925e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009262:	bfa4      	itt	ge
 8009264:	4623      	movge	r3, r4
 8009266:	462c      	movge	r4, r5
 8009268:	4638      	mov	r0, r7
 800926a:	6861      	ldr	r1, [r4, #4]
 800926c:	bfa6      	itte	ge
 800926e:	461d      	movge	r5, r3
 8009270:	2600      	movge	r6, #0
 8009272:	2601      	movlt	r6, #1
 8009274:	f7ff fd3e 	bl	8008cf4 <_Balloc>
 8009278:	4602      	mov	r2, r0
 800927a:	b918      	cbnz	r0, 8009284 <__mdiff+0x5c>
 800927c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009280:	4b2d      	ldr	r3, [pc, #180]	; (8009338 <__mdiff+0x110>)
 8009282:	e7e5      	b.n	8009250 <__mdiff+0x28>
 8009284:	f102 0814 	add.w	r8, r2, #20
 8009288:	46c2      	mov	sl, r8
 800928a:	f04f 0c00 	mov.w	ip, #0
 800928e:	6927      	ldr	r7, [r4, #16]
 8009290:	60c6      	str	r6, [r0, #12]
 8009292:	692e      	ldr	r6, [r5, #16]
 8009294:	f104 0014 	add.w	r0, r4, #20
 8009298:	f105 0914 	add.w	r9, r5, #20
 800929c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80092a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80092a4:	3410      	adds	r4, #16
 80092a6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80092aa:	f859 3b04 	ldr.w	r3, [r9], #4
 80092ae:	fa1f f18b 	uxth.w	r1, fp
 80092b2:	448c      	add	ip, r1
 80092b4:	b299      	uxth	r1, r3
 80092b6:	0c1b      	lsrs	r3, r3, #16
 80092b8:	ebac 0101 	sub.w	r1, ip, r1
 80092bc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092c0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80092c4:	b289      	uxth	r1, r1
 80092c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80092ca:	454e      	cmp	r6, r9
 80092cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80092d0:	f84a 3b04 	str.w	r3, [sl], #4
 80092d4:	d8e7      	bhi.n	80092a6 <__mdiff+0x7e>
 80092d6:	1b73      	subs	r3, r6, r5
 80092d8:	3b15      	subs	r3, #21
 80092da:	f023 0303 	bic.w	r3, r3, #3
 80092de:	3515      	adds	r5, #21
 80092e0:	3304      	adds	r3, #4
 80092e2:	42ae      	cmp	r6, r5
 80092e4:	bf38      	it	cc
 80092e6:	2304      	movcc	r3, #4
 80092e8:	4418      	add	r0, r3
 80092ea:	4443      	add	r3, r8
 80092ec:	461e      	mov	r6, r3
 80092ee:	4605      	mov	r5, r0
 80092f0:	4575      	cmp	r5, lr
 80092f2:	d30e      	bcc.n	8009312 <__mdiff+0xea>
 80092f4:	f10e 0103 	add.w	r1, lr, #3
 80092f8:	1a09      	subs	r1, r1, r0
 80092fa:	f021 0103 	bic.w	r1, r1, #3
 80092fe:	3803      	subs	r0, #3
 8009300:	4586      	cmp	lr, r0
 8009302:	bf38      	it	cc
 8009304:	2100      	movcc	r1, #0
 8009306:	4419      	add	r1, r3
 8009308:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800930c:	b18b      	cbz	r3, 8009332 <__mdiff+0x10a>
 800930e:	6117      	str	r7, [r2, #16]
 8009310:	e7a4      	b.n	800925c <__mdiff+0x34>
 8009312:	f855 8b04 	ldr.w	r8, [r5], #4
 8009316:	fa1f f188 	uxth.w	r1, r8
 800931a:	4461      	add	r1, ip
 800931c:	140c      	asrs	r4, r1, #16
 800931e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009322:	b289      	uxth	r1, r1
 8009324:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009328:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800932c:	f846 1b04 	str.w	r1, [r6], #4
 8009330:	e7de      	b.n	80092f0 <__mdiff+0xc8>
 8009332:	3f01      	subs	r7, #1
 8009334:	e7e8      	b.n	8009308 <__mdiff+0xe0>
 8009336:	bf00      	nop
 8009338:	0800a358 	.word	0x0800a358
 800933c:	0800a3cc 	.word	0x0800a3cc

08009340 <__d2b>:
 8009340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009344:	2101      	movs	r1, #1
 8009346:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800934a:	4690      	mov	r8, r2
 800934c:	461d      	mov	r5, r3
 800934e:	f7ff fcd1 	bl	8008cf4 <_Balloc>
 8009352:	4604      	mov	r4, r0
 8009354:	b930      	cbnz	r0, 8009364 <__d2b+0x24>
 8009356:	4602      	mov	r2, r0
 8009358:	f240 310a 	movw	r1, #778	; 0x30a
 800935c:	4b24      	ldr	r3, [pc, #144]	; (80093f0 <__d2b+0xb0>)
 800935e:	4825      	ldr	r0, [pc, #148]	; (80093f4 <__d2b+0xb4>)
 8009360:	f7fd fcec 	bl	8006d3c <__assert_func>
 8009364:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009368:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800936c:	bb2d      	cbnz	r5, 80093ba <__d2b+0x7a>
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	f1b8 0300 	subs.w	r3, r8, #0
 8009374:	d026      	beq.n	80093c4 <__d2b+0x84>
 8009376:	4668      	mov	r0, sp
 8009378:	9300      	str	r3, [sp, #0]
 800937a:	f7ff fd83 	bl	8008e84 <__lo0bits>
 800937e:	9900      	ldr	r1, [sp, #0]
 8009380:	b1f0      	cbz	r0, 80093c0 <__d2b+0x80>
 8009382:	9a01      	ldr	r2, [sp, #4]
 8009384:	f1c0 0320 	rsb	r3, r0, #32
 8009388:	fa02 f303 	lsl.w	r3, r2, r3
 800938c:	430b      	orrs	r3, r1
 800938e:	40c2      	lsrs	r2, r0
 8009390:	6163      	str	r3, [r4, #20]
 8009392:	9201      	str	r2, [sp, #4]
 8009394:	9b01      	ldr	r3, [sp, #4]
 8009396:	2b00      	cmp	r3, #0
 8009398:	bf14      	ite	ne
 800939a:	2102      	movne	r1, #2
 800939c:	2101      	moveq	r1, #1
 800939e:	61a3      	str	r3, [r4, #24]
 80093a0:	6121      	str	r1, [r4, #16]
 80093a2:	b1c5      	cbz	r5, 80093d6 <__d2b+0x96>
 80093a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093a8:	4405      	add	r5, r0
 80093aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093ae:	603d      	str	r5, [r7, #0]
 80093b0:	6030      	str	r0, [r6, #0]
 80093b2:	4620      	mov	r0, r4
 80093b4:	b002      	add	sp, #8
 80093b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093be:	e7d6      	b.n	800936e <__d2b+0x2e>
 80093c0:	6161      	str	r1, [r4, #20]
 80093c2:	e7e7      	b.n	8009394 <__d2b+0x54>
 80093c4:	a801      	add	r0, sp, #4
 80093c6:	f7ff fd5d 	bl	8008e84 <__lo0bits>
 80093ca:	2101      	movs	r1, #1
 80093cc:	9b01      	ldr	r3, [sp, #4]
 80093ce:	6121      	str	r1, [r4, #16]
 80093d0:	6163      	str	r3, [r4, #20]
 80093d2:	3020      	adds	r0, #32
 80093d4:	e7e5      	b.n	80093a2 <__d2b+0x62>
 80093d6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80093da:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093de:	6038      	str	r0, [r7, #0]
 80093e0:	6918      	ldr	r0, [r3, #16]
 80093e2:	f7ff fd2f 	bl	8008e44 <__hi0bits>
 80093e6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80093ea:	6031      	str	r1, [r6, #0]
 80093ec:	e7e1      	b.n	80093b2 <__d2b+0x72>
 80093ee:	bf00      	nop
 80093f0:	0800a358 	.word	0x0800a358
 80093f4:	0800a3cc 	.word	0x0800a3cc

080093f8 <_calloc_r>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	fba1 5402 	umull	r5, r4, r1, r2
 80093fe:	b934      	cbnz	r4, 800940e <_calloc_r+0x16>
 8009400:	4629      	mov	r1, r5
 8009402:	f000 f875 	bl	80094f0 <_malloc_r>
 8009406:	4606      	mov	r6, r0
 8009408:	b928      	cbnz	r0, 8009416 <_calloc_r+0x1e>
 800940a:	4630      	mov	r0, r6
 800940c:	bd70      	pop	{r4, r5, r6, pc}
 800940e:	220c      	movs	r2, #12
 8009410:	2600      	movs	r6, #0
 8009412:	6002      	str	r2, [r0, #0]
 8009414:	e7f9      	b.n	800940a <_calloc_r+0x12>
 8009416:	462a      	mov	r2, r5
 8009418:	4621      	mov	r1, r4
 800941a:	f7fd fcf7 	bl	8006e0c <memset>
 800941e:	e7f4      	b.n	800940a <_calloc_r+0x12>

08009420 <_free_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4605      	mov	r5, r0
 8009424:	2900      	cmp	r1, #0
 8009426:	d040      	beq.n	80094aa <_free_r+0x8a>
 8009428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800942c:	1f0c      	subs	r4, r1, #4
 800942e:	2b00      	cmp	r3, #0
 8009430:	bfb8      	it	lt
 8009432:	18e4      	addlt	r4, r4, r3
 8009434:	f000 fb5a 	bl	8009aec <__malloc_lock>
 8009438:	4a1c      	ldr	r2, [pc, #112]	; (80094ac <_free_r+0x8c>)
 800943a:	6813      	ldr	r3, [r2, #0]
 800943c:	b933      	cbnz	r3, 800944c <_free_r+0x2c>
 800943e:	6063      	str	r3, [r4, #4]
 8009440:	6014      	str	r4, [r2, #0]
 8009442:	4628      	mov	r0, r5
 8009444:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009448:	f000 bb56 	b.w	8009af8 <__malloc_unlock>
 800944c:	42a3      	cmp	r3, r4
 800944e:	d908      	bls.n	8009462 <_free_r+0x42>
 8009450:	6820      	ldr	r0, [r4, #0]
 8009452:	1821      	adds	r1, r4, r0
 8009454:	428b      	cmp	r3, r1
 8009456:	bf01      	itttt	eq
 8009458:	6819      	ldreq	r1, [r3, #0]
 800945a:	685b      	ldreq	r3, [r3, #4]
 800945c:	1809      	addeq	r1, r1, r0
 800945e:	6021      	streq	r1, [r4, #0]
 8009460:	e7ed      	b.n	800943e <_free_r+0x1e>
 8009462:	461a      	mov	r2, r3
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	b10b      	cbz	r3, 800946c <_free_r+0x4c>
 8009468:	42a3      	cmp	r3, r4
 800946a:	d9fa      	bls.n	8009462 <_free_r+0x42>
 800946c:	6811      	ldr	r1, [r2, #0]
 800946e:	1850      	adds	r0, r2, r1
 8009470:	42a0      	cmp	r0, r4
 8009472:	d10b      	bne.n	800948c <_free_r+0x6c>
 8009474:	6820      	ldr	r0, [r4, #0]
 8009476:	4401      	add	r1, r0
 8009478:	1850      	adds	r0, r2, r1
 800947a:	4283      	cmp	r3, r0
 800947c:	6011      	str	r1, [r2, #0]
 800947e:	d1e0      	bne.n	8009442 <_free_r+0x22>
 8009480:	6818      	ldr	r0, [r3, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	4401      	add	r1, r0
 8009486:	6011      	str	r1, [r2, #0]
 8009488:	6053      	str	r3, [r2, #4]
 800948a:	e7da      	b.n	8009442 <_free_r+0x22>
 800948c:	d902      	bls.n	8009494 <_free_r+0x74>
 800948e:	230c      	movs	r3, #12
 8009490:	602b      	str	r3, [r5, #0]
 8009492:	e7d6      	b.n	8009442 <_free_r+0x22>
 8009494:	6820      	ldr	r0, [r4, #0]
 8009496:	1821      	adds	r1, r4, r0
 8009498:	428b      	cmp	r3, r1
 800949a:	bf01      	itttt	eq
 800949c:	6819      	ldreq	r1, [r3, #0]
 800949e:	685b      	ldreq	r3, [r3, #4]
 80094a0:	1809      	addeq	r1, r1, r0
 80094a2:	6021      	streq	r1, [r4, #0]
 80094a4:	6063      	str	r3, [r4, #4]
 80094a6:	6054      	str	r4, [r2, #4]
 80094a8:	e7cb      	b.n	8009442 <_free_r+0x22>
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	20000e58 	.word	0x20000e58

080094b0 <sbrk_aligned>:
 80094b0:	b570      	push	{r4, r5, r6, lr}
 80094b2:	4e0e      	ldr	r6, [pc, #56]	; (80094ec <sbrk_aligned+0x3c>)
 80094b4:	460c      	mov	r4, r1
 80094b6:	6831      	ldr	r1, [r6, #0]
 80094b8:	4605      	mov	r5, r0
 80094ba:	b911      	cbnz	r1, 80094c2 <sbrk_aligned+0x12>
 80094bc:	f000 fa16 	bl	80098ec <_sbrk_r>
 80094c0:	6030      	str	r0, [r6, #0]
 80094c2:	4621      	mov	r1, r4
 80094c4:	4628      	mov	r0, r5
 80094c6:	f000 fa11 	bl	80098ec <_sbrk_r>
 80094ca:	1c43      	adds	r3, r0, #1
 80094cc:	d00a      	beq.n	80094e4 <sbrk_aligned+0x34>
 80094ce:	1cc4      	adds	r4, r0, #3
 80094d0:	f024 0403 	bic.w	r4, r4, #3
 80094d4:	42a0      	cmp	r0, r4
 80094d6:	d007      	beq.n	80094e8 <sbrk_aligned+0x38>
 80094d8:	1a21      	subs	r1, r4, r0
 80094da:	4628      	mov	r0, r5
 80094dc:	f000 fa06 	bl	80098ec <_sbrk_r>
 80094e0:	3001      	adds	r0, #1
 80094e2:	d101      	bne.n	80094e8 <sbrk_aligned+0x38>
 80094e4:	f04f 34ff 	mov.w	r4, #4294967295
 80094e8:	4620      	mov	r0, r4
 80094ea:	bd70      	pop	{r4, r5, r6, pc}
 80094ec:	20000e5c 	.word	0x20000e5c

080094f0 <_malloc_r>:
 80094f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f4:	1ccd      	adds	r5, r1, #3
 80094f6:	f025 0503 	bic.w	r5, r5, #3
 80094fa:	3508      	adds	r5, #8
 80094fc:	2d0c      	cmp	r5, #12
 80094fe:	bf38      	it	cc
 8009500:	250c      	movcc	r5, #12
 8009502:	2d00      	cmp	r5, #0
 8009504:	4607      	mov	r7, r0
 8009506:	db01      	blt.n	800950c <_malloc_r+0x1c>
 8009508:	42a9      	cmp	r1, r5
 800950a:	d905      	bls.n	8009518 <_malloc_r+0x28>
 800950c:	230c      	movs	r3, #12
 800950e:	2600      	movs	r6, #0
 8009510:	603b      	str	r3, [r7, #0]
 8009512:	4630      	mov	r0, r6
 8009514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009518:	4e2e      	ldr	r6, [pc, #184]	; (80095d4 <_malloc_r+0xe4>)
 800951a:	f000 fae7 	bl	8009aec <__malloc_lock>
 800951e:	6833      	ldr	r3, [r6, #0]
 8009520:	461c      	mov	r4, r3
 8009522:	bb34      	cbnz	r4, 8009572 <_malloc_r+0x82>
 8009524:	4629      	mov	r1, r5
 8009526:	4638      	mov	r0, r7
 8009528:	f7ff ffc2 	bl	80094b0 <sbrk_aligned>
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	4604      	mov	r4, r0
 8009530:	d14d      	bne.n	80095ce <_malloc_r+0xde>
 8009532:	6834      	ldr	r4, [r6, #0]
 8009534:	4626      	mov	r6, r4
 8009536:	2e00      	cmp	r6, #0
 8009538:	d140      	bne.n	80095bc <_malloc_r+0xcc>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	4631      	mov	r1, r6
 800953e:	4638      	mov	r0, r7
 8009540:	eb04 0803 	add.w	r8, r4, r3
 8009544:	f000 f9d2 	bl	80098ec <_sbrk_r>
 8009548:	4580      	cmp	r8, r0
 800954a:	d13a      	bne.n	80095c2 <_malloc_r+0xd2>
 800954c:	6821      	ldr	r1, [r4, #0]
 800954e:	3503      	adds	r5, #3
 8009550:	1a6d      	subs	r5, r5, r1
 8009552:	f025 0503 	bic.w	r5, r5, #3
 8009556:	3508      	adds	r5, #8
 8009558:	2d0c      	cmp	r5, #12
 800955a:	bf38      	it	cc
 800955c:	250c      	movcc	r5, #12
 800955e:	4638      	mov	r0, r7
 8009560:	4629      	mov	r1, r5
 8009562:	f7ff ffa5 	bl	80094b0 <sbrk_aligned>
 8009566:	3001      	adds	r0, #1
 8009568:	d02b      	beq.n	80095c2 <_malloc_r+0xd2>
 800956a:	6823      	ldr	r3, [r4, #0]
 800956c:	442b      	add	r3, r5
 800956e:	6023      	str	r3, [r4, #0]
 8009570:	e00e      	b.n	8009590 <_malloc_r+0xa0>
 8009572:	6822      	ldr	r2, [r4, #0]
 8009574:	1b52      	subs	r2, r2, r5
 8009576:	d41e      	bmi.n	80095b6 <_malloc_r+0xc6>
 8009578:	2a0b      	cmp	r2, #11
 800957a:	d916      	bls.n	80095aa <_malloc_r+0xba>
 800957c:	1961      	adds	r1, r4, r5
 800957e:	42a3      	cmp	r3, r4
 8009580:	6025      	str	r5, [r4, #0]
 8009582:	bf18      	it	ne
 8009584:	6059      	strne	r1, [r3, #4]
 8009586:	6863      	ldr	r3, [r4, #4]
 8009588:	bf08      	it	eq
 800958a:	6031      	streq	r1, [r6, #0]
 800958c:	5162      	str	r2, [r4, r5]
 800958e:	604b      	str	r3, [r1, #4]
 8009590:	4638      	mov	r0, r7
 8009592:	f104 060b 	add.w	r6, r4, #11
 8009596:	f000 faaf 	bl	8009af8 <__malloc_unlock>
 800959a:	f026 0607 	bic.w	r6, r6, #7
 800959e:	1d23      	adds	r3, r4, #4
 80095a0:	1af2      	subs	r2, r6, r3
 80095a2:	d0b6      	beq.n	8009512 <_malloc_r+0x22>
 80095a4:	1b9b      	subs	r3, r3, r6
 80095a6:	50a3      	str	r3, [r4, r2]
 80095a8:	e7b3      	b.n	8009512 <_malloc_r+0x22>
 80095aa:	6862      	ldr	r2, [r4, #4]
 80095ac:	42a3      	cmp	r3, r4
 80095ae:	bf0c      	ite	eq
 80095b0:	6032      	streq	r2, [r6, #0]
 80095b2:	605a      	strne	r2, [r3, #4]
 80095b4:	e7ec      	b.n	8009590 <_malloc_r+0xa0>
 80095b6:	4623      	mov	r3, r4
 80095b8:	6864      	ldr	r4, [r4, #4]
 80095ba:	e7b2      	b.n	8009522 <_malloc_r+0x32>
 80095bc:	4634      	mov	r4, r6
 80095be:	6876      	ldr	r6, [r6, #4]
 80095c0:	e7b9      	b.n	8009536 <_malloc_r+0x46>
 80095c2:	230c      	movs	r3, #12
 80095c4:	4638      	mov	r0, r7
 80095c6:	603b      	str	r3, [r7, #0]
 80095c8:	f000 fa96 	bl	8009af8 <__malloc_unlock>
 80095cc:	e7a1      	b.n	8009512 <_malloc_r+0x22>
 80095ce:	6025      	str	r5, [r4, #0]
 80095d0:	e7de      	b.n	8009590 <_malloc_r+0xa0>
 80095d2:	bf00      	nop
 80095d4:	20000e58 	.word	0x20000e58

080095d8 <_realloc_r>:
 80095d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095dc:	4680      	mov	r8, r0
 80095de:	4614      	mov	r4, r2
 80095e0:	460e      	mov	r6, r1
 80095e2:	b921      	cbnz	r1, 80095ee <_realloc_r+0x16>
 80095e4:	4611      	mov	r1, r2
 80095e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095ea:	f7ff bf81 	b.w	80094f0 <_malloc_r>
 80095ee:	b92a      	cbnz	r2, 80095fc <_realloc_r+0x24>
 80095f0:	f7ff ff16 	bl	8009420 <_free_r>
 80095f4:	4625      	mov	r5, r4
 80095f6:	4628      	mov	r0, r5
 80095f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095fc:	f000 fa82 	bl	8009b04 <_malloc_usable_size_r>
 8009600:	4284      	cmp	r4, r0
 8009602:	4607      	mov	r7, r0
 8009604:	d802      	bhi.n	800960c <_realloc_r+0x34>
 8009606:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800960a:	d812      	bhi.n	8009632 <_realloc_r+0x5a>
 800960c:	4621      	mov	r1, r4
 800960e:	4640      	mov	r0, r8
 8009610:	f7ff ff6e 	bl	80094f0 <_malloc_r>
 8009614:	4605      	mov	r5, r0
 8009616:	2800      	cmp	r0, #0
 8009618:	d0ed      	beq.n	80095f6 <_realloc_r+0x1e>
 800961a:	42bc      	cmp	r4, r7
 800961c:	4622      	mov	r2, r4
 800961e:	4631      	mov	r1, r6
 8009620:	bf28      	it	cs
 8009622:	463a      	movcs	r2, r7
 8009624:	f7fd fbe4 	bl	8006df0 <memcpy>
 8009628:	4631      	mov	r1, r6
 800962a:	4640      	mov	r0, r8
 800962c:	f7ff fef8 	bl	8009420 <_free_r>
 8009630:	e7e1      	b.n	80095f6 <_realloc_r+0x1e>
 8009632:	4635      	mov	r5, r6
 8009634:	e7df      	b.n	80095f6 <_realloc_r+0x1e>

08009636 <__ssputs_r>:
 8009636:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800963a:	688e      	ldr	r6, [r1, #8]
 800963c:	4682      	mov	sl, r0
 800963e:	429e      	cmp	r6, r3
 8009640:	460c      	mov	r4, r1
 8009642:	4690      	mov	r8, r2
 8009644:	461f      	mov	r7, r3
 8009646:	d838      	bhi.n	80096ba <__ssputs_r+0x84>
 8009648:	898a      	ldrh	r2, [r1, #12]
 800964a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800964e:	d032      	beq.n	80096b6 <__ssputs_r+0x80>
 8009650:	6825      	ldr	r5, [r4, #0]
 8009652:	6909      	ldr	r1, [r1, #16]
 8009654:	3301      	adds	r3, #1
 8009656:	eba5 0901 	sub.w	r9, r5, r1
 800965a:	6965      	ldr	r5, [r4, #20]
 800965c:	444b      	add	r3, r9
 800965e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009662:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009666:	106d      	asrs	r5, r5, #1
 8009668:	429d      	cmp	r5, r3
 800966a:	bf38      	it	cc
 800966c:	461d      	movcc	r5, r3
 800966e:	0553      	lsls	r3, r2, #21
 8009670:	d531      	bpl.n	80096d6 <__ssputs_r+0xa0>
 8009672:	4629      	mov	r1, r5
 8009674:	f7ff ff3c 	bl	80094f0 <_malloc_r>
 8009678:	4606      	mov	r6, r0
 800967a:	b950      	cbnz	r0, 8009692 <__ssputs_r+0x5c>
 800967c:	230c      	movs	r3, #12
 800967e:	f04f 30ff 	mov.w	r0, #4294967295
 8009682:	f8ca 3000 	str.w	r3, [sl]
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800968c:	81a3      	strh	r3, [r4, #12]
 800968e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009692:	464a      	mov	r2, r9
 8009694:	6921      	ldr	r1, [r4, #16]
 8009696:	f7fd fbab 	bl	8006df0 <memcpy>
 800969a:	89a3      	ldrh	r3, [r4, #12]
 800969c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80096a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096a4:	81a3      	strh	r3, [r4, #12]
 80096a6:	6126      	str	r6, [r4, #16]
 80096a8:	444e      	add	r6, r9
 80096aa:	6026      	str	r6, [r4, #0]
 80096ac:	463e      	mov	r6, r7
 80096ae:	6165      	str	r5, [r4, #20]
 80096b0:	eba5 0509 	sub.w	r5, r5, r9
 80096b4:	60a5      	str	r5, [r4, #8]
 80096b6:	42be      	cmp	r6, r7
 80096b8:	d900      	bls.n	80096bc <__ssputs_r+0x86>
 80096ba:	463e      	mov	r6, r7
 80096bc:	4632      	mov	r2, r6
 80096be:	4641      	mov	r1, r8
 80096c0:	6820      	ldr	r0, [r4, #0]
 80096c2:	f7ff fafd 	bl	8008cc0 <memmove>
 80096c6:	68a3      	ldr	r3, [r4, #8]
 80096c8:	2000      	movs	r0, #0
 80096ca:	1b9b      	subs	r3, r3, r6
 80096cc:	60a3      	str	r3, [r4, #8]
 80096ce:	6823      	ldr	r3, [r4, #0]
 80096d0:	4433      	add	r3, r6
 80096d2:	6023      	str	r3, [r4, #0]
 80096d4:	e7db      	b.n	800968e <__ssputs_r+0x58>
 80096d6:	462a      	mov	r2, r5
 80096d8:	f7ff ff7e 	bl	80095d8 <_realloc_r>
 80096dc:	4606      	mov	r6, r0
 80096de:	2800      	cmp	r0, #0
 80096e0:	d1e1      	bne.n	80096a6 <__ssputs_r+0x70>
 80096e2:	4650      	mov	r0, sl
 80096e4:	6921      	ldr	r1, [r4, #16]
 80096e6:	f7ff fe9b 	bl	8009420 <_free_r>
 80096ea:	e7c7      	b.n	800967c <__ssputs_r+0x46>

080096ec <_svfiprintf_r>:
 80096ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f0:	4698      	mov	r8, r3
 80096f2:	898b      	ldrh	r3, [r1, #12]
 80096f4:	4607      	mov	r7, r0
 80096f6:	061b      	lsls	r3, r3, #24
 80096f8:	460d      	mov	r5, r1
 80096fa:	4614      	mov	r4, r2
 80096fc:	b09d      	sub	sp, #116	; 0x74
 80096fe:	d50e      	bpl.n	800971e <_svfiprintf_r+0x32>
 8009700:	690b      	ldr	r3, [r1, #16]
 8009702:	b963      	cbnz	r3, 800971e <_svfiprintf_r+0x32>
 8009704:	2140      	movs	r1, #64	; 0x40
 8009706:	f7ff fef3 	bl	80094f0 <_malloc_r>
 800970a:	6028      	str	r0, [r5, #0]
 800970c:	6128      	str	r0, [r5, #16]
 800970e:	b920      	cbnz	r0, 800971a <_svfiprintf_r+0x2e>
 8009710:	230c      	movs	r3, #12
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	f04f 30ff 	mov.w	r0, #4294967295
 8009718:	e0d1      	b.n	80098be <_svfiprintf_r+0x1d2>
 800971a:	2340      	movs	r3, #64	; 0x40
 800971c:	616b      	str	r3, [r5, #20]
 800971e:	2300      	movs	r3, #0
 8009720:	9309      	str	r3, [sp, #36]	; 0x24
 8009722:	2320      	movs	r3, #32
 8009724:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009728:	2330      	movs	r3, #48	; 0x30
 800972a:	f04f 0901 	mov.w	r9, #1
 800972e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009732:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80098d8 <_svfiprintf_r+0x1ec>
 8009736:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800973a:	4623      	mov	r3, r4
 800973c:	469a      	mov	sl, r3
 800973e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009742:	b10a      	cbz	r2, 8009748 <_svfiprintf_r+0x5c>
 8009744:	2a25      	cmp	r2, #37	; 0x25
 8009746:	d1f9      	bne.n	800973c <_svfiprintf_r+0x50>
 8009748:	ebba 0b04 	subs.w	fp, sl, r4
 800974c:	d00b      	beq.n	8009766 <_svfiprintf_r+0x7a>
 800974e:	465b      	mov	r3, fp
 8009750:	4622      	mov	r2, r4
 8009752:	4629      	mov	r1, r5
 8009754:	4638      	mov	r0, r7
 8009756:	f7ff ff6e 	bl	8009636 <__ssputs_r>
 800975a:	3001      	adds	r0, #1
 800975c:	f000 80aa 	beq.w	80098b4 <_svfiprintf_r+0x1c8>
 8009760:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009762:	445a      	add	r2, fp
 8009764:	9209      	str	r2, [sp, #36]	; 0x24
 8009766:	f89a 3000 	ldrb.w	r3, [sl]
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 80a2 	beq.w	80098b4 <_svfiprintf_r+0x1c8>
 8009770:	2300      	movs	r3, #0
 8009772:	f04f 32ff 	mov.w	r2, #4294967295
 8009776:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800977a:	f10a 0a01 	add.w	sl, sl, #1
 800977e:	9304      	str	r3, [sp, #16]
 8009780:	9307      	str	r3, [sp, #28]
 8009782:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009786:	931a      	str	r3, [sp, #104]	; 0x68
 8009788:	4654      	mov	r4, sl
 800978a:	2205      	movs	r2, #5
 800978c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009790:	4851      	ldr	r0, [pc, #324]	; (80098d8 <_svfiprintf_r+0x1ec>)
 8009792:	f7ff fa87 	bl	8008ca4 <memchr>
 8009796:	9a04      	ldr	r2, [sp, #16]
 8009798:	b9d8      	cbnz	r0, 80097d2 <_svfiprintf_r+0xe6>
 800979a:	06d0      	lsls	r0, r2, #27
 800979c:	bf44      	itt	mi
 800979e:	2320      	movmi	r3, #32
 80097a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097a4:	0711      	lsls	r1, r2, #28
 80097a6:	bf44      	itt	mi
 80097a8:	232b      	movmi	r3, #43	; 0x2b
 80097aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ae:	f89a 3000 	ldrb.w	r3, [sl]
 80097b2:	2b2a      	cmp	r3, #42	; 0x2a
 80097b4:	d015      	beq.n	80097e2 <_svfiprintf_r+0xf6>
 80097b6:	4654      	mov	r4, sl
 80097b8:	2000      	movs	r0, #0
 80097ba:	f04f 0c0a 	mov.w	ip, #10
 80097be:	9a07      	ldr	r2, [sp, #28]
 80097c0:	4621      	mov	r1, r4
 80097c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097c6:	3b30      	subs	r3, #48	; 0x30
 80097c8:	2b09      	cmp	r3, #9
 80097ca:	d94e      	bls.n	800986a <_svfiprintf_r+0x17e>
 80097cc:	b1b0      	cbz	r0, 80097fc <_svfiprintf_r+0x110>
 80097ce:	9207      	str	r2, [sp, #28]
 80097d0:	e014      	b.n	80097fc <_svfiprintf_r+0x110>
 80097d2:	eba0 0308 	sub.w	r3, r0, r8
 80097d6:	fa09 f303 	lsl.w	r3, r9, r3
 80097da:	4313      	orrs	r3, r2
 80097dc:	46a2      	mov	sl, r4
 80097de:	9304      	str	r3, [sp, #16]
 80097e0:	e7d2      	b.n	8009788 <_svfiprintf_r+0x9c>
 80097e2:	9b03      	ldr	r3, [sp, #12]
 80097e4:	1d19      	adds	r1, r3, #4
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	9103      	str	r1, [sp, #12]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	bfbb      	ittet	lt
 80097ee:	425b      	neglt	r3, r3
 80097f0:	f042 0202 	orrlt.w	r2, r2, #2
 80097f4:	9307      	strge	r3, [sp, #28]
 80097f6:	9307      	strlt	r3, [sp, #28]
 80097f8:	bfb8      	it	lt
 80097fa:	9204      	strlt	r2, [sp, #16]
 80097fc:	7823      	ldrb	r3, [r4, #0]
 80097fe:	2b2e      	cmp	r3, #46	; 0x2e
 8009800:	d10c      	bne.n	800981c <_svfiprintf_r+0x130>
 8009802:	7863      	ldrb	r3, [r4, #1]
 8009804:	2b2a      	cmp	r3, #42	; 0x2a
 8009806:	d135      	bne.n	8009874 <_svfiprintf_r+0x188>
 8009808:	9b03      	ldr	r3, [sp, #12]
 800980a:	3402      	adds	r4, #2
 800980c:	1d1a      	adds	r2, r3, #4
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	9203      	str	r2, [sp, #12]
 8009812:	2b00      	cmp	r3, #0
 8009814:	bfb8      	it	lt
 8009816:	f04f 33ff 	movlt.w	r3, #4294967295
 800981a:	9305      	str	r3, [sp, #20]
 800981c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80098dc <_svfiprintf_r+0x1f0>
 8009820:	2203      	movs	r2, #3
 8009822:	4650      	mov	r0, sl
 8009824:	7821      	ldrb	r1, [r4, #0]
 8009826:	f7ff fa3d 	bl	8008ca4 <memchr>
 800982a:	b140      	cbz	r0, 800983e <_svfiprintf_r+0x152>
 800982c:	2340      	movs	r3, #64	; 0x40
 800982e:	eba0 000a 	sub.w	r0, r0, sl
 8009832:	fa03 f000 	lsl.w	r0, r3, r0
 8009836:	9b04      	ldr	r3, [sp, #16]
 8009838:	3401      	adds	r4, #1
 800983a:	4303      	orrs	r3, r0
 800983c:	9304      	str	r3, [sp, #16]
 800983e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009842:	2206      	movs	r2, #6
 8009844:	4826      	ldr	r0, [pc, #152]	; (80098e0 <_svfiprintf_r+0x1f4>)
 8009846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800984a:	f7ff fa2b 	bl	8008ca4 <memchr>
 800984e:	2800      	cmp	r0, #0
 8009850:	d038      	beq.n	80098c4 <_svfiprintf_r+0x1d8>
 8009852:	4b24      	ldr	r3, [pc, #144]	; (80098e4 <_svfiprintf_r+0x1f8>)
 8009854:	bb1b      	cbnz	r3, 800989e <_svfiprintf_r+0x1b2>
 8009856:	9b03      	ldr	r3, [sp, #12]
 8009858:	3307      	adds	r3, #7
 800985a:	f023 0307 	bic.w	r3, r3, #7
 800985e:	3308      	adds	r3, #8
 8009860:	9303      	str	r3, [sp, #12]
 8009862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009864:	4433      	add	r3, r6
 8009866:	9309      	str	r3, [sp, #36]	; 0x24
 8009868:	e767      	b.n	800973a <_svfiprintf_r+0x4e>
 800986a:	460c      	mov	r4, r1
 800986c:	2001      	movs	r0, #1
 800986e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009872:	e7a5      	b.n	80097c0 <_svfiprintf_r+0xd4>
 8009874:	2300      	movs	r3, #0
 8009876:	f04f 0c0a 	mov.w	ip, #10
 800987a:	4619      	mov	r1, r3
 800987c:	3401      	adds	r4, #1
 800987e:	9305      	str	r3, [sp, #20]
 8009880:	4620      	mov	r0, r4
 8009882:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009886:	3a30      	subs	r2, #48	; 0x30
 8009888:	2a09      	cmp	r2, #9
 800988a:	d903      	bls.n	8009894 <_svfiprintf_r+0x1a8>
 800988c:	2b00      	cmp	r3, #0
 800988e:	d0c5      	beq.n	800981c <_svfiprintf_r+0x130>
 8009890:	9105      	str	r1, [sp, #20]
 8009892:	e7c3      	b.n	800981c <_svfiprintf_r+0x130>
 8009894:	4604      	mov	r4, r0
 8009896:	2301      	movs	r3, #1
 8009898:	fb0c 2101 	mla	r1, ip, r1, r2
 800989c:	e7f0      	b.n	8009880 <_svfiprintf_r+0x194>
 800989e:	ab03      	add	r3, sp, #12
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	462a      	mov	r2, r5
 80098a4:	4638      	mov	r0, r7
 80098a6:	4b10      	ldr	r3, [pc, #64]	; (80098e8 <_svfiprintf_r+0x1fc>)
 80098a8:	a904      	add	r1, sp, #16
 80098aa:	f7fd fcad 	bl	8007208 <_printf_float>
 80098ae:	1c42      	adds	r2, r0, #1
 80098b0:	4606      	mov	r6, r0
 80098b2:	d1d6      	bne.n	8009862 <_svfiprintf_r+0x176>
 80098b4:	89ab      	ldrh	r3, [r5, #12]
 80098b6:	065b      	lsls	r3, r3, #25
 80098b8:	f53f af2c 	bmi.w	8009714 <_svfiprintf_r+0x28>
 80098bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098be:	b01d      	add	sp, #116	; 0x74
 80098c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098c4:	ab03      	add	r3, sp, #12
 80098c6:	9300      	str	r3, [sp, #0]
 80098c8:	462a      	mov	r2, r5
 80098ca:	4638      	mov	r0, r7
 80098cc:	4b06      	ldr	r3, [pc, #24]	; (80098e8 <_svfiprintf_r+0x1fc>)
 80098ce:	a904      	add	r1, sp, #16
 80098d0:	f7fd ff36 	bl	8007740 <_printf_i>
 80098d4:	e7eb      	b.n	80098ae <_svfiprintf_r+0x1c2>
 80098d6:	bf00      	nop
 80098d8:	0800a294 	.word	0x0800a294
 80098dc:	0800a29a 	.word	0x0800a29a
 80098e0:	0800a29e 	.word	0x0800a29e
 80098e4:	08007209 	.word	0x08007209
 80098e8:	08009637 	.word	0x08009637

080098ec <_sbrk_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	2300      	movs	r3, #0
 80098f0:	4d05      	ldr	r5, [pc, #20]	; (8009908 <_sbrk_r+0x1c>)
 80098f2:	4604      	mov	r4, r0
 80098f4:	4608      	mov	r0, r1
 80098f6:	602b      	str	r3, [r5, #0]
 80098f8:	f7fa f816 	bl	8003928 <_sbrk>
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	d102      	bne.n	8009906 <_sbrk_r+0x1a>
 8009900:	682b      	ldr	r3, [r5, #0]
 8009902:	b103      	cbz	r3, 8009906 <_sbrk_r+0x1a>
 8009904:	6023      	str	r3, [r4, #0]
 8009906:	bd38      	pop	{r3, r4, r5, pc}
 8009908:	20000e60 	.word	0x20000e60

0800990c <_raise_r>:
 800990c:	291f      	cmp	r1, #31
 800990e:	b538      	push	{r3, r4, r5, lr}
 8009910:	4604      	mov	r4, r0
 8009912:	460d      	mov	r5, r1
 8009914:	d904      	bls.n	8009920 <_raise_r+0x14>
 8009916:	2316      	movs	r3, #22
 8009918:	6003      	str	r3, [r0, #0]
 800991a:	f04f 30ff 	mov.w	r0, #4294967295
 800991e:	bd38      	pop	{r3, r4, r5, pc}
 8009920:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009922:	b112      	cbz	r2, 800992a <_raise_r+0x1e>
 8009924:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009928:	b94b      	cbnz	r3, 800993e <_raise_r+0x32>
 800992a:	4620      	mov	r0, r4
 800992c:	f000 f830 	bl	8009990 <_getpid_r>
 8009930:	462a      	mov	r2, r5
 8009932:	4601      	mov	r1, r0
 8009934:	4620      	mov	r0, r4
 8009936:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800993a:	f000 b817 	b.w	800996c <_kill_r>
 800993e:	2b01      	cmp	r3, #1
 8009940:	d00a      	beq.n	8009958 <_raise_r+0x4c>
 8009942:	1c59      	adds	r1, r3, #1
 8009944:	d103      	bne.n	800994e <_raise_r+0x42>
 8009946:	2316      	movs	r3, #22
 8009948:	6003      	str	r3, [r0, #0]
 800994a:	2001      	movs	r0, #1
 800994c:	e7e7      	b.n	800991e <_raise_r+0x12>
 800994e:	2400      	movs	r4, #0
 8009950:	4628      	mov	r0, r5
 8009952:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009956:	4798      	blx	r3
 8009958:	2000      	movs	r0, #0
 800995a:	e7e0      	b.n	800991e <_raise_r+0x12>

0800995c <raise>:
 800995c:	4b02      	ldr	r3, [pc, #8]	; (8009968 <raise+0xc>)
 800995e:	4601      	mov	r1, r0
 8009960:	6818      	ldr	r0, [r3, #0]
 8009962:	f7ff bfd3 	b.w	800990c <_raise_r>
 8009966:	bf00      	nop
 8009968:	20000018 	.word	0x20000018

0800996c <_kill_r>:
 800996c:	b538      	push	{r3, r4, r5, lr}
 800996e:	2300      	movs	r3, #0
 8009970:	4d06      	ldr	r5, [pc, #24]	; (800998c <_kill_r+0x20>)
 8009972:	4604      	mov	r4, r0
 8009974:	4608      	mov	r0, r1
 8009976:	4611      	mov	r1, r2
 8009978:	602b      	str	r3, [r5, #0]
 800997a:	f7f9 ff52 	bl	8003822 <_kill>
 800997e:	1c43      	adds	r3, r0, #1
 8009980:	d102      	bne.n	8009988 <_kill_r+0x1c>
 8009982:	682b      	ldr	r3, [r5, #0]
 8009984:	b103      	cbz	r3, 8009988 <_kill_r+0x1c>
 8009986:	6023      	str	r3, [r4, #0]
 8009988:	bd38      	pop	{r3, r4, r5, pc}
 800998a:	bf00      	nop
 800998c:	20000e60 	.word	0x20000e60

08009990 <_getpid_r>:
 8009990:	f7f9 bf40 	b.w	8003814 <_getpid>

08009994 <__sread>:
 8009994:	b510      	push	{r4, lr}
 8009996:	460c      	mov	r4, r1
 8009998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800999c:	f000 f8ba 	bl	8009b14 <_read_r>
 80099a0:	2800      	cmp	r0, #0
 80099a2:	bfab      	itete	ge
 80099a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80099a6:	89a3      	ldrhlt	r3, [r4, #12]
 80099a8:	181b      	addge	r3, r3, r0
 80099aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80099ae:	bfac      	ite	ge
 80099b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80099b2:	81a3      	strhlt	r3, [r4, #12]
 80099b4:	bd10      	pop	{r4, pc}

080099b6 <__swrite>:
 80099b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ba:	461f      	mov	r7, r3
 80099bc:	898b      	ldrh	r3, [r1, #12]
 80099be:	4605      	mov	r5, r0
 80099c0:	05db      	lsls	r3, r3, #23
 80099c2:	460c      	mov	r4, r1
 80099c4:	4616      	mov	r6, r2
 80099c6:	d505      	bpl.n	80099d4 <__swrite+0x1e>
 80099c8:	2302      	movs	r3, #2
 80099ca:	2200      	movs	r2, #0
 80099cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099d0:	f000 f868 	bl	8009aa4 <_lseek_r>
 80099d4:	89a3      	ldrh	r3, [r4, #12]
 80099d6:	4632      	mov	r2, r6
 80099d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099dc:	81a3      	strh	r3, [r4, #12]
 80099de:	4628      	mov	r0, r5
 80099e0:	463b      	mov	r3, r7
 80099e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099ea:	f000 b817 	b.w	8009a1c <_write_r>

080099ee <__sseek>:
 80099ee:	b510      	push	{r4, lr}
 80099f0:	460c      	mov	r4, r1
 80099f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099f6:	f000 f855 	bl	8009aa4 <_lseek_r>
 80099fa:	1c43      	adds	r3, r0, #1
 80099fc:	89a3      	ldrh	r3, [r4, #12]
 80099fe:	bf15      	itete	ne
 8009a00:	6560      	strne	r0, [r4, #84]	; 0x54
 8009a02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009a06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009a0a:	81a3      	strheq	r3, [r4, #12]
 8009a0c:	bf18      	it	ne
 8009a0e:	81a3      	strhne	r3, [r4, #12]
 8009a10:	bd10      	pop	{r4, pc}

08009a12 <__sclose>:
 8009a12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a16:	f000 b813 	b.w	8009a40 <_close_r>
	...

08009a1c <_write_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4604      	mov	r4, r0
 8009a20:	4608      	mov	r0, r1
 8009a22:	4611      	mov	r1, r2
 8009a24:	2200      	movs	r2, #0
 8009a26:	4d05      	ldr	r5, [pc, #20]	; (8009a3c <_write_r+0x20>)
 8009a28:	602a      	str	r2, [r5, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	f7f9 ff30 	bl	8003890 <_write>
 8009a30:	1c43      	adds	r3, r0, #1
 8009a32:	d102      	bne.n	8009a3a <_write_r+0x1e>
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	b103      	cbz	r3, 8009a3a <_write_r+0x1e>
 8009a38:	6023      	str	r3, [r4, #0]
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	20000e60 	.word	0x20000e60

08009a40 <_close_r>:
 8009a40:	b538      	push	{r3, r4, r5, lr}
 8009a42:	2300      	movs	r3, #0
 8009a44:	4d05      	ldr	r5, [pc, #20]	; (8009a5c <_close_r+0x1c>)
 8009a46:	4604      	mov	r4, r0
 8009a48:	4608      	mov	r0, r1
 8009a4a:	602b      	str	r3, [r5, #0]
 8009a4c:	f7f9 ff3c 	bl	80038c8 <_close>
 8009a50:	1c43      	adds	r3, r0, #1
 8009a52:	d102      	bne.n	8009a5a <_close_r+0x1a>
 8009a54:	682b      	ldr	r3, [r5, #0]
 8009a56:	b103      	cbz	r3, 8009a5a <_close_r+0x1a>
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	bd38      	pop	{r3, r4, r5, pc}
 8009a5c:	20000e60 	.word	0x20000e60

08009a60 <_fstat_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	2300      	movs	r3, #0
 8009a64:	4d06      	ldr	r5, [pc, #24]	; (8009a80 <_fstat_r+0x20>)
 8009a66:	4604      	mov	r4, r0
 8009a68:	4608      	mov	r0, r1
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	602b      	str	r3, [r5, #0]
 8009a6e:	f7f9 ff36 	bl	80038de <_fstat>
 8009a72:	1c43      	adds	r3, r0, #1
 8009a74:	d102      	bne.n	8009a7c <_fstat_r+0x1c>
 8009a76:	682b      	ldr	r3, [r5, #0]
 8009a78:	b103      	cbz	r3, 8009a7c <_fstat_r+0x1c>
 8009a7a:	6023      	str	r3, [r4, #0]
 8009a7c:	bd38      	pop	{r3, r4, r5, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000e60 	.word	0x20000e60

08009a84 <_isatty_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	2300      	movs	r3, #0
 8009a88:	4d05      	ldr	r5, [pc, #20]	; (8009aa0 <_isatty_r+0x1c>)
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	4608      	mov	r0, r1
 8009a8e:	602b      	str	r3, [r5, #0]
 8009a90:	f7f9 ff34 	bl	80038fc <_isatty>
 8009a94:	1c43      	adds	r3, r0, #1
 8009a96:	d102      	bne.n	8009a9e <_isatty_r+0x1a>
 8009a98:	682b      	ldr	r3, [r5, #0]
 8009a9a:	b103      	cbz	r3, 8009a9e <_isatty_r+0x1a>
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	bd38      	pop	{r3, r4, r5, pc}
 8009aa0:	20000e60 	.word	0x20000e60

08009aa4 <_lseek_r>:
 8009aa4:	b538      	push	{r3, r4, r5, lr}
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	4611      	mov	r1, r2
 8009aac:	2200      	movs	r2, #0
 8009aae:	4d05      	ldr	r5, [pc, #20]	; (8009ac4 <_lseek_r+0x20>)
 8009ab0:	602a      	str	r2, [r5, #0]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	f7f9 ff2c 	bl	8003910 <_lseek>
 8009ab8:	1c43      	adds	r3, r0, #1
 8009aba:	d102      	bne.n	8009ac2 <_lseek_r+0x1e>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	b103      	cbz	r3, 8009ac2 <_lseek_r+0x1e>
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	bd38      	pop	{r3, r4, r5, pc}
 8009ac4:	20000e60 	.word	0x20000e60

08009ac8 <__ascii_mbtowc>:
 8009ac8:	b082      	sub	sp, #8
 8009aca:	b901      	cbnz	r1, 8009ace <__ascii_mbtowc+0x6>
 8009acc:	a901      	add	r1, sp, #4
 8009ace:	b142      	cbz	r2, 8009ae2 <__ascii_mbtowc+0x1a>
 8009ad0:	b14b      	cbz	r3, 8009ae6 <__ascii_mbtowc+0x1e>
 8009ad2:	7813      	ldrb	r3, [r2, #0]
 8009ad4:	600b      	str	r3, [r1, #0]
 8009ad6:	7812      	ldrb	r2, [r2, #0]
 8009ad8:	1e10      	subs	r0, r2, #0
 8009ada:	bf18      	it	ne
 8009adc:	2001      	movne	r0, #1
 8009ade:	b002      	add	sp, #8
 8009ae0:	4770      	bx	lr
 8009ae2:	4610      	mov	r0, r2
 8009ae4:	e7fb      	b.n	8009ade <__ascii_mbtowc+0x16>
 8009ae6:	f06f 0001 	mvn.w	r0, #1
 8009aea:	e7f8      	b.n	8009ade <__ascii_mbtowc+0x16>

08009aec <__malloc_lock>:
 8009aec:	4801      	ldr	r0, [pc, #4]	; (8009af4 <__malloc_lock+0x8>)
 8009aee:	f7ff b86a 	b.w	8008bc6 <__retarget_lock_acquire_recursive>
 8009af2:	bf00      	nop
 8009af4:	20000e54 	.word	0x20000e54

08009af8 <__malloc_unlock>:
 8009af8:	4801      	ldr	r0, [pc, #4]	; (8009b00 <__malloc_unlock+0x8>)
 8009afa:	f7ff b865 	b.w	8008bc8 <__retarget_lock_release_recursive>
 8009afe:	bf00      	nop
 8009b00:	20000e54 	.word	0x20000e54

08009b04 <_malloc_usable_size_r>:
 8009b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b08:	1f18      	subs	r0, r3, #4
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	bfbc      	itt	lt
 8009b0e:	580b      	ldrlt	r3, [r1, r0]
 8009b10:	18c0      	addlt	r0, r0, r3
 8009b12:	4770      	bx	lr

08009b14 <_read_r>:
 8009b14:	b538      	push	{r3, r4, r5, lr}
 8009b16:	4604      	mov	r4, r0
 8009b18:	4608      	mov	r0, r1
 8009b1a:	4611      	mov	r1, r2
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	4d05      	ldr	r5, [pc, #20]	; (8009b34 <_read_r+0x20>)
 8009b20:	602a      	str	r2, [r5, #0]
 8009b22:	461a      	mov	r2, r3
 8009b24:	f7f9 fe97 	bl	8003856 <_read>
 8009b28:	1c43      	adds	r3, r0, #1
 8009b2a:	d102      	bne.n	8009b32 <_read_r+0x1e>
 8009b2c:	682b      	ldr	r3, [r5, #0]
 8009b2e:	b103      	cbz	r3, 8009b32 <_read_r+0x1e>
 8009b30:	6023      	str	r3, [r4, #0]
 8009b32:	bd38      	pop	{r3, r4, r5, pc}
 8009b34:	20000e60 	.word	0x20000e60

08009b38 <__ascii_wctomb>:
 8009b38:	4603      	mov	r3, r0
 8009b3a:	4608      	mov	r0, r1
 8009b3c:	b141      	cbz	r1, 8009b50 <__ascii_wctomb+0x18>
 8009b3e:	2aff      	cmp	r2, #255	; 0xff
 8009b40:	d904      	bls.n	8009b4c <__ascii_wctomb+0x14>
 8009b42:	228a      	movs	r2, #138	; 0x8a
 8009b44:	f04f 30ff 	mov.w	r0, #4294967295
 8009b48:	601a      	str	r2, [r3, #0]
 8009b4a:	4770      	bx	lr
 8009b4c:	2001      	movs	r0, #1
 8009b4e:	700a      	strb	r2, [r1, #0]
 8009b50:	4770      	bx	lr
	...

08009b54 <roundf>:
 8009b54:	b508      	push	{r3, lr}
 8009b56:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8009b5a:	3b7f      	subs	r3, #127	; 0x7f
 8009b5c:	2b16      	cmp	r3, #22
 8009b5e:	4601      	mov	r1, r0
 8009b60:	4602      	mov	r2, r0
 8009b62:	dc14      	bgt.n	8009b8e <roundf+0x3a>
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	da07      	bge.n	8009b78 <roundf+0x24>
 8009b68:	3301      	adds	r3, #1
 8009b6a:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8009b6e:	d101      	bne.n	8009b74 <roundf+0x20>
 8009b70:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8009b74:	4608      	mov	r0, r1
 8009b76:	bd08      	pop	{r3, pc}
 8009b78:	4808      	ldr	r0, [pc, #32]	; (8009b9c <roundf+0x48>)
 8009b7a:	4118      	asrs	r0, r3
 8009b7c:	4201      	tst	r1, r0
 8009b7e:	d0f9      	beq.n	8009b74 <roundf+0x20>
 8009b80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009b84:	4119      	asrs	r1, r3
 8009b86:	4411      	add	r1, r2
 8009b88:	ea21 0100 	bic.w	r1, r1, r0
 8009b8c:	e7f2      	b.n	8009b74 <roundf+0x20>
 8009b8e:	2b80      	cmp	r3, #128	; 0x80
 8009b90:	d1f0      	bne.n	8009b74 <roundf+0x20>
 8009b92:	f7f6 ffcf 	bl	8000b34 <__addsf3>
 8009b96:	4601      	mov	r1, r0
 8009b98:	e7ec      	b.n	8009b74 <roundf+0x20>
 8009b9a:	bf00      	nop
 8009b9c:	007fffff 	.word	0x007fffff

08009ba0 <_init>:
 8009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba2:	bf00      	nop
 8009ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ba6:	bc08      	pop	{r3}
 8009ba8:	469e      	mov	lr, r3
 8009baa:	4770      	bx	lr

08009bac <_fini>:
 8009bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bae:	bf00      	nop
 8009bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009bb2:	bc08      	pop	{r3}
 8009bb4:	469e      	mov	lr, r3
 8009bb6:	4770      	bx	lr
