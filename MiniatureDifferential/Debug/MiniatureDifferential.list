
MiniatureDifferential.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009520  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08009630  08009630  00019630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa0  08009aa0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009aa0  08009aa0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009aa0  08009aa0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009aa0  08009aa0  00019aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009aa4  08009aa4  00019aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009aa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c0c  200001e0  08009c88  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dec  08009c88  00020dec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a58  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8e  00000000  00000000  00031c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  000346f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  00035898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a40  00000000  00000000  00036950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000149da  00000000  00000000  0003a390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f9f2  00000000  00000000  0004ed6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000de75c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf0  00000000  00000000  000de7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009618 	.word	0x08009618

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009618 	.word	0x08009618

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <huansic_jy62_init>:
uint8_t setBaud9600_pack[3] = { 0xFF, 0xAA, 0x64 };
uint8_t setHorizontal_pack[3] = { 0xFF, 0xAA, 0x65 };
uint8_t setVertical_pack[3] = { 0xFF, 0xAA, 0x66 };
uint8_t sleepAndAwake_pack[3] = { 0xFF, 0xAA, 0x60 };

void huansic_jy62_init(JY62_HandleTypeDef *hjy62) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if(!hjy62) return;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d038      	beq.n	8001190 <huansic_jy62_init+0x80>
	if(!hjy62->uartPort) return;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d036      	beq.n	8001194 <huansic_jy62_init+0x84>

	huansic_jy62_resetAngle(hjy62);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 f838 	bl	800119c <huansic_jy62_resetAngle>

	hjy62->accel_x = 0;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
	hjy62->accel_y = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
	hjy62->accel_z = 0;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f04f 0200 	mov.w	r2, #0
 8001142:	60da      	str	r2, [r3, #12]
	hjy62->omega_x = 0;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
	hjy62->omega_y = 0;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f04f 0200 	mov.w	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
	hjy62->omega_z = 0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
	hjy62->theta_x = 0;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
	hjy62->theta_y = 0;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
	hjy62->theta_z = 0;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	625a      	str	r2, [r3, #36]	; 0x24

	hjy62->lastUpdated = HAL_GetTick();
 8001174:	f002 fb9a 	bl	80038ac <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	332c      	adds	r3, #44	; 0x2c
 8001186:	220b      	movs	r2, #11
 8001188:	4619      	mov	r1, r3
 800118a:	f005 fa5a 	bl	8006642 <HAL_UART_Receive_DMA>
 800118e:	e002      	b.n	8001196 <huansic_jy62_init+0x86>
	if(!hjy62) return;
 8001190:	bf00      	nop
 8001192:	e000      	b.n	8001196 <huansic_jy62_init+0x86>
	if(!hjy62->uartPort) return;
 8001194:	bf00      	nop
}
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <huansic_jy62_resetAngle>:

void huansic_jy62_resetAngle(JY62_HandleTypeDef *hjy62) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(hjy62->uartPort, initAngle_pack, 3, HAL_MAX_DELAY);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6818      	ldr	r0, [r3, #0]
 80011a8:	f04f 33ff 	mov.w	r3, #4294967295
 80011ac:	2203      	movs	r2, #3
 80011ae:	4903      	ldr	r1, [pc, #12]	; (80011bc <huansic_jy62_resetAngle+0x20>)
 80011b0:	f005 f9b5 	bl	800651e <HAL_UART_Transmit>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000000 	.word	0x20000000

080011c0 <huansic_jy62_decodePackage>:

void huansic_jy62_decodePackage(JY62_HandleTypeDef *hjy62) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	// package header
	if (hjy62->buffer[0] != 0x55)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80011ce:	2b55      	cmp	r3, #85	; 0x55
 80011d0:	f040 81f2 	bne.w	80015b8 <huansic_jy62_decodePackage+0x3f8>
		return;

	// checksum
	uint8_t sum = hjy62->buffer[0] + hjy62->buffer[1] + hjy62->buffer[2] + hjy62->buffer[3]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80011e0:	4413      	add	r3, r2
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80011ea:	4413      	add	r3, r2
 80011ec:	b2da      	uxtb	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80011f4:	4413      	add	r3, r2
 80011f6:	b2da      	uxtb	r2, r3
			+ hjy62->buffer[4] + hjy62->buffer[5] + hjy62->buffer[6] + hjy62->buffer[7]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011fe:	4413      	add	r3, r2
 8001200:	b2da      	uxtb	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001208:	4413      	add	r3, r2
 800120a:	b2da      	uxtb	r2, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001212:	4413      	add	r3, r2
 8001214:	b2da      	uxtb	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800121c:	4413      	add	r3, r2
 800121e:	b2da      	uxtb	r2, r3
			+ hjy62->buffer[8] + hjy62->buffer[9];
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001226:	4413      	add	r3, r2
 8001228:	b2da      	uxtb	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	uint8_t sum = hjy62->buffer[0] + hjy62->buffer[1] + hjy62->buffer[2] + hjy62->buffer[3]
 8001230:	4413      	add	r3, r2
 8001232:	73fb      	strb	r3, [r7, #15]
	if (hjy62->buffer[10] != sum)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800123a:	7bfa      	ldrb	r2, [r7, #15]
 800123c:	429a      	cmp	r2, r3
 800123e:	f040 81bd 	bne.w	80015bc <huansic_jy62_decodePackage+0x3fc>
		return;

	// decoding
	int16_t temp;
	if (hjy62->buffer[1] == 0x51) {		// acceleration
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001248:	2b51      	cmp	r3, #81	; 0x51
 800124a:	d175      	bne.n	8001338 <huansic_jy62_decodePackage+0x178>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_x = temp / 32768.0 * 16.0;
 8001262:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f8cc 	bl	8000404 <__aeabi_i2d>
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b8d      	ldr	r3, [pc, #564]	; (80014a8 <huansic_jy62_decodePackage+0x2e8>)
 8001272:	f7ff fa5b 	bl	800072c <__aeabi_ddiv>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	f04f 0200 	mov.w	r2, #0
 8001282:	4b8a      	ldr	r3, [pc, #552]	; (80014ac <huansic_jy62_decodePackage+0x2ec>)
 8001284:	f7ff f928 	bl	80004d8 <__aeabi_dmul>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fbfa 	bl	8000a88 <__aeabi_d2f>
 8001294:	4602      	mov	r2, r0
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	605a      	str	r2, [r3, #4]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80012a0:	021b      	lsls	r3, r3, #8
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_y = temp / 32768.0 * 16.0;
 80012b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f8a5 	bl	8000404 <__aeabi_i2d>
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b7a      	ldr	r3, [pc, #488]	; (80014a8 <huansic_jy62_decodePackage+0x2e8>)
 80012c0:	f7ff fa34 	bl	800072c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b76      	ldr	r3, [pc, #472]	; (80014ac <huansic_jy62_decodePackage+0x2ec>)
 80012d2:	f7ff f901 	bl	80004d8 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fbd3 	bl	8000a88 <__aeabi_d2f>
 80012e2:	4602      	mov	r2, r0
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80012ee:	021b      	lsls	r3, r3, #8
 80012f0:	b21a      	sxth	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	4313      	orrs	r3, r2
 80012fc:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_z = temp / 32768.0 * 16.0;
 80012fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f87e 	bl	8000404 <__aeabi_i2d>
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b66      	ldr	r3, [pc, #408]	; (80014a8 <huansic_jy62_decodePackage+0x2e8>)
 800130e:	f7ff fa0d 	bl	800072c <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b63      	ldr	r3, [pc, #396]	; (80014ac <huansic_jy62_decodePackage+0x2ec>)
 8001320:	f7ff f8da 	bl	80004d8 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f7ff fbac 	bl	8000a88 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	e139      	b.n	80015ac <huansic_jy62_decodePackage+0x3ec>
	} else if (hjy62->buffer[1] == 0x52) {		// angular speed
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800133e:	2b52      	cmp	r3, #82	; 0x52
 8001340:	f040 80ba 	bne.w	80014b8 <huansic_jy62_decodePackage+0x2f8>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800134a:	021b      	lsls	r3, r3, #8
 800134c:	b21a      	sxth	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001354:	b21b      	sxth	r3, r3
 8001356:	4313      	orrs	r3, r2
 8001358:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_x = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 800135a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f850 	bl	8000404 <__aeabi_i2d>
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	4b4f      	ldr	r3, [pc, #316]	; (80014a8 <huansic_jy62_decodePackage+0x2e8>)
 800136a:	f7ff f9df 	bl	800072c <__aeabi_ddiv>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	4b4d      	ldr	r3, [pc, #308]	; (80014b0 <huansic_jy62_decodePackage+0x2f0>)
 800137c:	f7ff f8ac 	bl	80004d8 <__aeabi_dmul>
 8001380:	4602      	mov	r2, r0
 8001382:	460b      	mov	r3, r1
 8001384:	4610      	mov	r0, r2
 8001386:	4619      	mov	r1, r3
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	4b49      	ldr	r3, [pc, #292]	; (80014b4 <huansic_jy62_decodePackage+0x2f4>)
 800138e:	f7ff f9cd 	bl	800072c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	a341      	add	r3, pc, #260	; (adr r3, 80014a0 <huansic_jy62_decodePackage+0x2e0>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7ff f89a 	bl	80004d8 <__aeabi_dmul>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fb6c 	bl	8000a88 <__aeabi_d2f>
 80013b0:	4602      	mov	r2, r0
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	611a      	str	r2, [r3, #16]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80013bc:	021b      	lsls	r3, r3, #8
 80013be:	b21a      	sxth	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	4313      	orrs	r3, r2
 80013ca:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_y = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 80013cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f817 	bl	8000404 <__aeabi_i2d>
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b33      	ldr	r3, [pc, #204]	; (80014a8 <huansic_jy62_decodePackage+0x2e8>)
 80013dc:	f7ff f9a6 	bl	800072c <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	4b30      	ldr	r3, [pc, #192]	; (80014b0 <huansic_jy62_decodePackage+0x2f0>)
 80013ee:	f7ff f873 	bl	80004d8 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f04f 0200 	mov.w	r2, #0
 80013fe:	4b2d      	ldr	r3, [pc, #180]	; (80014b4 <huansic_jy62_decodePackage+0x2f4>)
 8001400:	f7ff f994 	bl	800072c <__aeabi_ddiv>
 8001404:	4602      	mov	r2, r0
 8001406:	460b      	mov	r3, r1
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	a324      	add	r3, pc, #144	; (adr r3, 80014a0 <huansic_jy62_decodePackage+0x2e0>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	f7ff f861 	bl	80004d8 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	f7ff fb33 	bl	8000a88 <__aeabi_d2f>
 8001422:	4602      	mov	r2, r0
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	615a      	str	r2, [r3, #20]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b21a      	sxth	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001438:	b21b      	sxth	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_z = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 800143e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001442:	4618      	mov	r0, r3
 8001444:	f7fe ffde 	bl	8000404 <__aeabi_i2d>
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	4b16      	ldr	r3, [pc, #88]	; (80014a8 <huansic_jy62_decodePackage+0x2e8>)
 800144e:	f7ff f96d 	bl	800072c <__aeabi_ddiv>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4610      	mov	r0, r2
 8001458:	4619      	mov	r1, r3
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <huansic_jy62_decodePackage+0x2f0>)
 8001460:	f7ff f83a 	bl	80004d8 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 0200 	mov.w	r2, #0
 8001470:	4b10      	ldr	r3, [pc, #64]	; (80014b4 <huansic_jy62_decodePackage+0x2f4>)
 8001472:	f7ff f95b 	bl	800072c <__aeabi_ddiv>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	a308      	add	r3, pc, #32	; (adr r3, 80014a0 <huansic_jy62_decodePackage+0x2e0>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7ff f828 	bl	80004d8 <__aeabi_dmul>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fafa 	bl	8000a88 <__aeabi_d2f>
 8001494:	4602      	mov	r2, r0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	619a      	str	r2, [r3, #24]
 800149a:	e087      	b.n	80015ac <huansic_jy62_decodePackage+0x3ec>
 800149c:	f3af 8000 	nop.w
 80014a0:	54442d18 	.word	0x54442d18
 80014a4:	400921fb 	.word	0x400921fb
 80014a8:	40e00000 	.word	0x40e00000
 80014ac:	40300000 	.word	0x40300000
 80014b0:	409f4000 	.word	0x409f4000
 80014b4:	40668000 	.word	0x40668000
	} else if (hjy62->buffer[1] == 0x53) {		// angle
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80014be:	2b53      	cmp	r3, #83	; 0x53
 80014c0:	d174      	bne.n	80015ac <huansic_jy62_decodePackage+0x3ec>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	b21a      	sxth	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80014d2:	b21b      	sxth	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_x = temp / 32768.0 * M_PI;
 80014d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7fe ff91 	bl	8000404 <__aeabi_i2d>
 80014e2:	f04f 0200 	mov.w	r2, #0
 80014e6:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <huansic_jy62_decodePackage+0x410>)
 80014e8:	f7ff f920 	bl	800072c <__aeabi_ddiv>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4610      	mov	r0, r2
 80014f2:	4619      	mov	r1, r3
 80014f4:	a334      	add	r3, pc, #208	; (adr r3, 80015c8 <huansic_jy62_decodePackage+0x408>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7fe ffed 	bl	80004d8 <__aeabi_dmul>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4610      	mov	r0, r2
 8001504:	4619      	mov	r1, r3
 8001506:	f7ff fabf 	bl	8000a88 <__aeabi_d2f>
 800150a:	4602      	mov	r2, r0
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	61da      	str	r2, [r3, #28]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	b21a      	sxth	r2, r3
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001520:	b21b      	sxth	r3, r3
 8001522:	4313      	orrs	r3, r2
 8001524:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_y = temp / 32768.0 * M_PI;
 8001526:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ff6a 	bl	8000404 <__aeabi_i2d>
 8001530:	f04f 0200 	mov.w	r2, #0
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <huansic_jy62_decodePackage+0x410>)
 8001536:	f7ff f8f9 	bl	800072c <__aeabi_ddiv>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4610      	mov	r0, r2
 8001540:	4619      	mov	r1, r3
 8001542:	a321      	add	r3, pc, #132	; (adr r3, 80015c8 <huansic_jy62_decodePackage+0x408>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7fe ffc6 	bl	80004d8 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4610      	mov	r0, r2
 8001552:	4619      	mov	r1, r3
 8001554:	f7ff fa98 	bl	8000a88 <__aeabi_d2f>
 8001558:	4602      	mov	r2, r0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	621a      	str	r2, [r3, #32]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	b21a      	sxth	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800156e:	b21b      	sxth	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_z = temp / 32768.0 * M_PI;
 8001574:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ff43 	bl	8000404 <__aeabi_i2d>
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <huansic_jy62_decodePackage+0x410>)
 8001584:	f7ff f8d2 	bl	800072c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	a30d      	add	r3, pc, #52	; (adr r3, 80015c8 <huansic_jy62_decodePackage+0x408>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7fe ff9f 	bl	80004d8 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff fa71 	bl	8000a88 <__aeabi_d2f>
 80015a6:	4602      	mov	r2, r0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// record current time
	hjy62->lastUpdated = HAL_GetTick();
 80015ac:	f002 f97e 	bl	80038ac <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	629a      	str	r2, [r3, #40]	; 0x28
 80015b6:	e002      	b.n	80015be <huansic_jy62_decodePackage+0x3fe>
		return;
 80015b8:	bf00      	nop
 80015ba:	e000      	b.n	80015be <huansic_jy62_decodePackage+0x3fe>
		return;
 80015bc:	bf00      	nop
}
 80015be:	3710      	adds	r7, #16
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	f3af 8000 	nop.w
 80015c8:	54442d18 	.word	0x54442d18
 80015cc:	400921fb 	.word	0x400921fb
 80015d0:	40e00000 	.word	0x40e00000

080015d4 <huansic_jy62_setDMA>:

void huansic_jy62_setDMA(JY62_HandleTypeDef *hjy62) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6818      	ldr	r0, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	332c      	adds	r3, #44	; 0x2c
 80015e4:	220b      	movs	r2, #11
 80015e6:	4619      	mov	r1, r3
 80015e8:	f005 f82b 	bl	8006642 <HAL_UART_Receive_DMA>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
	...

08001608 <huansic_order_new>:
		orderBuffers[i].id = -1;
	for (i = 0; i < 5; i++)
		delivering[i] = &orderBuffers[i];		// give it some default value
}

Order* huansic_order_new(int8_t id) {
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161a:	d101      	bne.n	8001620 <huansic_order_new+0x18>
		return 0;
 800161c:	2300      	movs	r3, #0
 800161e:	e046      	b.n	80016ae <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001620:	2300      	movs	r3, #0
 8001622:	73fb      	strb	r3, [r7, #15]
 8001624:	e017      	b.n	8001656 <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 8001626:	7bfa      	ldrb	r2, [r7, #15]
 8001628:	4923      	ldr	r1, [pc, #140]	; (80016b8 <huansic_order_new+0xb0>)
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	440b      	add	r3, r1
 8001634:	3310      	adds	r3, #16
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163c:	429a      	cmp	r2, r3
 800163e:	d107      	bne.n	8001650 <huansic_order_new+0x48>
			return &orderBuffers[i];
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	4613      	mov	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	4413      	add	r3, r2
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	4a1b      	ldr	r2, [pc, #108]	; (80016b8 <huansic_order_new+0xb0>)
 800164c:	4413      	add	r3, r2
 800164e:	e02e      	b.n	80016ae <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001650:	7bfb      	ldrb	r3, [r7, #15]
 8001652:	3301      	adds	r3, #1
 8001654:	73fb      	strb	r3, [r7, #15]
 8001656:	7bfb      	ldrb	r3, [r7, #15]
 8001658:	2b3b      	cmp	r3, #59	; 0x3b
 800165a:	d9e4      	bls.n	8001626 <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]
 8001660:	e021      	b.n	80016a6 <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	4914      	ldr	r1, [pc, #80]	; (80016b8 <huansic_order_new+0xb0>)
 8001666:	4613      	mov	r3, r2
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	440b      	add	r3, r1
 8001670:	3310      	adds	r3, #16
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d112      	bne.n	80016a0 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <huansic_order_new+0xb0>)
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	4403      	add	r3, r0
 800168c:	3310      	adds	r3, #16
 800168e:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 8001690:	7bfa      	ldrb	r2, [r7, #15]
 8001692:	4613      	mov	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	4413      	add	r3, r2
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <huansic_order_new+0xb0>)
 800169c:	4413      	add	r3, r2
 800169e:	e006      	b.n	80016ae <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
 80016a2:	3301      	adds	r3, #1
 80016a4:	73fb      	strb	r3, [r7, #15]
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
 80016a8:	2b3b      	cmp	r3, #59	; 0x3b
 80016aa:	d9da      	bls.n	8001662 <huansic_order_new+0x5a>
		}
	}

	return 0;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3714      	adds	r7, #20
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	200001fc 	.word	0x200001fc

080016bc <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	if (ptr->id == -1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016cc:	d103      	bne.n	80016d6 <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff90 	bl	80015f4 <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 80016d4:	e003      	b.n	80016de <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f04f 32ff 	mov.w	r2, #4294967295
 80016dc:	611a      	str	r2, [r3, #16]
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d105      	bne.n	8001704 <huansic_motor_init+0x1c>
 80016f8:	4b55      	ldr	r3, [pc, #340]	; (8001850 <huansic_motor_init+0x168>)
 80016fa:	4a56      	ldr	r2, [pc, #344]	; (8001854 <huansic_motor_init+0x16c>)
 80016fc:	210c      	movs	r1, #12
 80016fe:	4856      	ldr	r0, [pc, #344]	; (8001858 <huansic_motor_init+0x170>)
 8001700:	f005 fa24 	bl	8006b4c <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d105      	bne.n	8001718 <huansic_motor_init+0x30>
 800170c:	4b53      	ldr	r3, [pc, #332]	; (800185c <huansic_motor_init+0x174>)
 800170e:	4a51      	ldr	r2, [pc, #324]	; (8001854 <huansic_motor_init+0x16c>)
 8001710:	210d      	movs	r1, #13
 8001712:	4851      	ldr	r0, [pc, #324]	; (8001858 <huansic_motor_init+0x170>)
 8001714:	f005 fa1a 	bl	8006b4c <__assert_func>
	assert(hmotor->dt);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	f04f 0100 	mov.w	r1, #0
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fca3 	bl	800106c <__aeabi_fcmpeq>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <huansic_motor_init+0x50>
 800172c:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <huansic_motor_init+0x178>)
 800172e:	4a49      	ldr	r2, [pc, #292]	; (8001854 <huansic_motor_init+0x16c>)
 8001730:	210e      	movs	r1, #14
 8001732:	4849      	ldr	r0, [pc, #292]	; (8001858 <huansic_motor_init+0x170>)
 8001734:	f005 fa0a 	bl	8006b4c <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2200      	movs	r2, #0
 800173c:	849a      	strh	r2, [r3, #36]	; 0x24
	hmotor->lastError = 0;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d105      	bne.n	8001784 <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2200      	movs	r2, #0
 8001780:	635a      	str	r2, [r3, #52]	; 0x34
 8001782:	e01c      	b.n	80017be <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	2b04      	cmp	r3, #4
 800178a:	d105      	bne.n	8001798 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2200      	movs	r2, #0
 8001794:	639a      	str	r2, [r3, #56]	; 0x38
 8001796:	e012      	b.n	80017be <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	2b08      	cmp	r3, #8
 800179e:	d105      	bne.n	80017ac <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2200      	movs	r2, #0
 80017a8:	63da      	str	r2, [r3, #60]	; 0x3c
 80017aa:	e008      	b.n	80017be <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b0c      	cmp	r3, #12
 80017b2:	d104      	bne.n	80017be <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d026      	beq.n	8001814 <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d105      	bne.n	80017da <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2200      	movs	r2, #0
 80017d6:	635a      	str	r2, [r3, #52]	; 0x34
 80017d8:	e01c      	b.n	8001814 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d105      	bne.n	80017ee <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2200      	movs	r2, #0
 80017ea:	639a      	str	r2, [r3, #56]	; 0x38
 80017ec:	e012      	b.n	8001814 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d105      	bne.n	8001802 <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2200      	movs	r2, #0
 80017fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001800:	e008      	b.n	8001814 <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d104      	bne.n	8001814 <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2200      	movs	r2, #0
 8001812:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	213c      	movs	r1, #60	; 0x3c
 800181a:	4618      	mov	r0, r3
 800181c:	f003 ffd8 	bl	80057d0 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4619      	mov	r1, r3
 800182a:	4610      	mov	r0, r2
 800182c:	f003 fe8c 	bl	8005548 <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f003 fe80 	bl	8005548 <HAL_TIM_PWM_Start>
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	08009630 	.word	0x08009630
 8001854:	08009698 	.word	0x08009698
 8001858:	08009640 	.word	0x08009640
 800185c:	08009660 	.word	0x08009660
 8001860:	08009674 	.word	0x08009674

08001864 <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	int16_t diffTick = (0x0FFFF & hmotor->counter->Instance->CNT) - hmotor->lastTick;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	b29a      	uxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	b29b      	uxth	r3, r3
 800187e:	82fb      	strh	r3, [r7, #22]

	hmotor->lastTick = hmotor->counter->Instance->CNT;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	849a      	strh	r2, [r3, #36]	; 0x24

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 800188e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fa02 	bl	8000c9c <__aeabi_i2f>
 8001898:	4602      	mov	r2, r0
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a1b      	ldr	r3, [r3, #32]
 800189e:	4619      	mov	r1, r3
 80018a0:	4610      	mov	r0, r2
 80018a2:	f7ff fb03 	bl	8000eac <__aeabi_fdiv>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	62da      	str	r2, [r3, #44]	; 0x2c
	//hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	4619      	mov	r1, r3
 80018bc:	4610      	mov	r0, r2
 80018be:	f7ff f937 	bl	8000b30 <__aeabi_fsub>
 80018c2:	4603      	mov	r3, r0
 80018c4:	4619      	mov	r1, r3
 80018c6:	4620      	mov	r0, r4
 80018c8:	f7ff f932 	bl	8000b30 <__aeabi_fsub>
 80018cc:	4603      	mov	r3, r0
 80018ce:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	4619      	mov	r1, r3
 80018da:	4610      	mov	r0, r2
 80018dc:	f7ff f928 	bl	8000b30 <__aeabi_fsub>
 80018e0:	4603      	mov	r3, r0
 80018e2:	461a      	mov	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f0:	4619      	mov	r1, r3
 80018f2:	4610      	mov	r0, r2
 80018f4:	f7ff f91e 	bl	8000b34 <__addsf3>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	695a      	ldr	r2, [r3, #20]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001908:	4619      	mov	r1, r3
 800190a:	4610      	mov	r0, r2
 800190c:	f7ff fa1a 	bl	8000d44 <__aeabi_fmul>
 8001910:	4603      	mov	r3, r0
 8001912:	461c      	mov	r4, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	699a      	ldr	r2, [r3, #24]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191c:	4619      	mov	r1, r3
 800191e:	4610      	mov	r0, r2
 8001920:	f7ff fa10 	bl	8000d44 <__aeabi_fmul>
 8001924:	4603      	mov	r3, r0
 8001926:	4619      	mov	r1, r3
 8001928:	4620      	mov	r0, r4
 800192a:	f7ff f903 	bl	8000b34 <__addsf3>
 800192e:	4603      	mov	r3, r0
 8001930:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	6939      	ldr	r1, [r7, #16]
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fa03 	bl	8000d44 <__aeabi_fmul>
 800193e:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001940:	4619      	mov	r1, r3
 8001942:	4620      	mov	r0, r4
 8001944:	f7ff f8f6 	bl	8000b34 <__addsf3>
 8001948:	4603      	mov	r3, r0
 800194a:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 800194c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001950:	68f8      	ldr	r0, [r7, #12]
 8001952:	f7ff fbb3 	bl	80010bc <__aeabi_fcmpgt>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d002      	beq.n	8001962 <huansic_motor_pid+0xfe>
 800195c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001960:	e009      	b.n	8001976 <huansic_motor_pid+0x112>
 8001962:	4954      	ldr	r1, [pc, #336]	; (8001ab4 <huansic_motor_pid+0x250>)
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f7ff fb8b 	bl	8001080 <__aeabi_fcmplt>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <huansic_motor_pid+0x110>
 8001970:	4b50      	ldr	r3, [pc, #320]	; (8001ab4 <huansic_motor_pid+0x250>)
 8001972:	e000      	b.n	8001976 <huansic_motor_pid+0x112>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 8001978:	f04f 0100 	mov.w	r1, #0
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff fb9d 	bl	80010bc <__aeabi_fcmpgt>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d019      	beq.n	80019bc <huansic_motor_pid+0x158>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff f97c 	bl	8000c94 <__aeabi_ui2f>
 800199c:	4603      	mov	r3, r0
 800199e:	4619      	mov	r1, r3
 80019a0:	4620      	mov	r0, r4
 80019a2:	f7ff f9cf 	bl	8000d44 <__aeabi_fmul>
 80019a6:	4603      	mov	r3, r0
 80019a8:	4618      	mov	r0, r3
 80019aa:	f007 fe0f 	bl	80095cc <roundf>
 80019ae:	4603      	mov	r3, r0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fb8d 	bl	80010d0 <__aeabi_f2uiz>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	e000      	b.n	80019be <huansic_motor_pid+0x15a>
 80019bc:	2300      	movs	r3, #0
 80019be:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 80019c0:	f04f 0100 	mov.w	r1, #0
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff fb5b 	bl	8001080 <__aeabi_fcmplt>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d019      	beq.n	8001a04 <huansic_motor_pid+0x1a0>
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff f958 	bl	8000c94 <__aeabi_ui2f>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4619      	mov	r1, r3
 80019e8:	4620      	mov	r0, r4
 80019ea:	f7ff f9ab 	bl	8000d44 <__aeabi_fmul>
 80019ee:	4603      	mov	r3, r0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f007 fdeb 	bl	80095cc <roundf>
 80019f6:	4603      	mov	r3, r0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fb69 	bl	80010d0 <__aeabi_f2uiz>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	e000      	b.n	8001a06 <huansic_motor_pid+0x1a2>
 8001a04:	2300      	movs	r3, #0
 8001a06:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <huansic_motor_pid+0x1b8>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	897a      	ldrh	r2, [r7, #10]
 8001a18:	635a      	str	r2, [r3, #52]	; 0x34
 8001a1a:	e01c      	b.n	8001a56 <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d105      	bne.n	8001a30 <huansic_motor_pid+0x1cc>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	897a      	ldrh	r2, [r7, #10]
 8001a2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001a2e:	e012      	b.n	8001a56 <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d105      	bne.n	8001a44 <huansic_motor_pid+0x1e0>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	897a      	ldrh	r2, [r7, #10]
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a42:	e008      	b.n	8001a56 <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	2b0c      	cmp	r3, #12
 8001a4a:	d104      	bne.n	8001a56 <huansic_motor_pid+0x1f2>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	897a      	ldrh	r2, [r7, #10]
 8001a54:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d026      	beq.n	8001aac <huansic_motor_pid+0x248>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d105      	bne.n	8001a72 <huansic_motor_pid+0x20e>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	893a      	ldrh	r2, [r7, #8]
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8001a70:	e01c      	b.n	8001aac <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d105      	bne.n	8001a86 <huansic_motor_pid+0x222>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	893a      	ldrh	r2, [r7, #8]
 8001a82:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001a84:	e012      	b.n	8001aac <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d105      	bne.n	8001a9a <huansic_motor_pid+0x236>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	893a      	ldrh	r2, [r7, #8]
 8001a96:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001a98:	e008      	b.n	8001aac <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	691b      	ldr	r3, [r3, #16]
 8001a9e:	2b0c      	cmp	r3, #12
 8001aa0:	d104      	bne.n	8001aac <huansic_motor_pid+0x248>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	893a      	ldrh	r2, [r7, #8]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001aac:	bf00      	nop
 8001aae:	371c      	adds	r7, #28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd90      	pop	{r4, r7, pc}
 8001ab4:	bf800000 	.word	0xbf800000

08001ab8 <custom_order_new_failed>:
extern float myCharge;				// current charge returned by Master

// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms

__weak void custom_order_new_failed(int16_t id) {
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]

}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	hxb->nextPackageLength = 6;		// header length
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2206      	movs	r2, #6
 8001ad8:	725a      	strb	r2, [r3, #9]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6818      	ldr	r0, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f103 010a 	add.w	r1, r3, #10
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	7a5b      	ldrb	r3, [r3, #9]
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	f004 fda9 	bl	8006642 <HAL_UART_Receive_DMA>
}
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <huansic_xb_decodeHeader>:

uint8_t huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	// check header
	if (hxb->buffer[0] != 0x55 || hxb->buffer[1] != 0xAA)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	7a9b      	ldrb	r3, [r3, #10]
 8001b04:	2b55      	cmp	r3, #85	; 0x55
 8001b06:	d103      	bne.n	8001b10 <huansic_xb_decodeHeader+0x18>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7adb      	ldrb	r3, [r3, #11]
 8001b0c:	2baa      	cmp	r3, #170	; 0xaa
 8001b0e:	d001      	beq.n	8001b14 <huansic_xb_decodeHeader+0x1c>
		return 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e035      	b.n	8001b80 <huansic_xb_decodeHeader+0x88>

	// checksum
	if (hxb->buffer[5]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7bda      	ldrb	r2, [r3, #15]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7a99      	ldrb	r1, [r3, #10]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	7adb      	ldrb	r3, [r3, #11]
 8001b20:	404b      	eors	r3, r1
 8001b22:	b2d9      	uxtb	r1, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7b1b      	ldrb	r3, [r3, #12]
 8001b28:	404b      	eors	r3, r1
 8001b2a:	b2d9      	uxtb	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7b5b      	ldrb	r3, [r3, #13]
 8001b30:	404b      	eors	r3, r1
 8001b32:	b2d9      	uxtb	r1, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7b9b      	ldrb	r3, [r3, #14]
 8001b38:	404b      	eors	r3, r1
 8001b3a:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d001      	beq.n	8001b44 <huansic_xb_decodeHeader+0x4c>
		return 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e01d      	b.n	8001b80 <huansic_xb_decodeHeader+0x88>

	// get and check packet ID
	if (hxb->buffer[2] != 0x01 && hxb->buffer[2] != 0x05)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	7b1b      	ldrb	r3, [r3, #12]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d005      	beq.n	8001b58 <huansic_xb_decodeHeader+0x60>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7b1b      	ldrb	r3, [r3, #12]
 8001b50:	2b05      	cmp	r3, #5
 8001b52:	d001      	beq.n	8001b58 <huansic_xb_decodeHeader+0x60>
		return 0;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e013      	b.n	8001b80 <huansic_xb_decodeHeader+0x88>
	hxb->nextPackageID = hxb->buffer[2];
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7b1a      	ldrb	r2, [r3, #12]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	721a      	strb	r2, [r3, #8]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4];
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7b9a      	ldrb	r2, [r3, #14]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	725a      	strb	r2, [r3, #9]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f103 010a 	add.w	r1, r3, #10
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	7a5b      	ldrb	r3, [r3, #9]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f004 fd62 	bl	8006642 <HAL_UART_Receive_DMA>
	return 1;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <huansic_xb_decodeBody>:
//	hxb->nextPackageLength = 6;		// header length
//	hxb->nextPackageID = 0x00;		// the next one is header
//	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
//}

void huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b088      	sub	sp, #32
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	76fb      	strb	r3, [r7, #27]
 8001b94:	2300      	movs	r3, #0
 8001b96:	777b      	strb	r3, [r7, #29]
	uint32_t temp32;
	uint16_t temp16;
	if (hxb->nextPackageID == 0x01) {		// game information
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	7a1b      	ldrb	r3, [r3, #8]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	f040 81f7 	bne.w	8001f90 <huansic_xb_decodeBody+0x408>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8001ba2:	7f7b      	ldrb	r3, [r7, #29]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	777a      	strb	r2, [r7, #29]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	7a9a      	ldrb	r2, [r3, #10]
 8001bb0:	4b8b      	ldr	r3, [pc, #556]	; (8001de0 <huansic_xb_decodeBody+0x258>)
 8001bb2:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8001bb4:	7f7b      	ldrb	r3, [r7, #29]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8001bba:	2300      	movs	r3, #0
 8001bbc:	77fb      	strb	r3, [r7, #31]
 8001bbe:	e0c0      	b.n	8001d42 <huansic_xb_decodeBody+0x1ba>
			obstacles[i].coord1.x = hxb->buffer[index++];
 8001bc0:	7f7b      	ldrb	r3, [r7, #29]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	777a      	strb	r2, [r7, #29]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	7a9a      	ldrb	r2, [r3, #10]
 8001bce:	7ffb      	ldrb	r3, [r7, #31]
 8001bd0:	b211      	sxth	r1, r2
 8001bd2:	4a84      	ldr	r2, [pc, #528]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001bd4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x <<= 8;
 8001bd8:	7ffb      	ldrb	r3, [r7, #31]
 8001bda:	4a82      	ldr	r2, [pc, #520]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001bdc:	f932 3033 	ldrsh.w	r3, [r2, r3, lsl #3]
 8001be0:	021a      	lsls	r2, r3, #8
 8001be2:	7ffb      	ldrb	r3, [r7, #31]
 8001be4:	b211      	sxth	r1, r2
 8001be6:	4a7f      	ldr	r2, [pc, #508]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001be8:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x |= hxb->buffer[index++];
 8001bec:	7f7b      	ldrb	r3, [r7, #29]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	777a      	strb	r2, [r7, #29]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	7a98      	ldrb	r0, [r3, #10]
 8001bfa:	7ffb      	ldrb	r3, [r7, #31]
 8001bfc:	4a79      	ldr	r2, [pc, #484]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001bfe:	f932 1033 	ldrsh.w	r1, [r2, r3, lsl #3]
 8001c02:	b202      	sxth	r2, r0
 8001c04:	7ffb      	ldrb	r3, [r7, #31]
 8001c06:	430a      	orrs	r2, r1
 8001c08:	b211      	sxth	r1, r2
 8001c0a:	4a76      	ldr	r2, [pc, #472]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001c0c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.y = hxb->buffer[index++];
 8001c10:	7f7b      	ldrb	r3, [r7, #29]
 8001c12:	1c5a      	adds	r2, r3, #1
 8001c14:	777a      	strb	r2, [r7, #29]
 8001c16:	461a      	mov	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	7a9a      	ldrb	r2, [r3, #10]
 8001c1e:	7ffb      	ldrb	r3, [r7, #31]
 8001c20:	b211      	sxth	r1, r2
 8001c22:	4a70      	ldr	r2, [pc, #448]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	4413      	add	r3, r2
 8001c28:	460a      	mov	r2, r1
 8001c2a:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y <<= 8;
 8001c2c:	7ffb      	ldrb	r3, [r7, #31]
 8001c2e:	4a6d      	ldr	r2, [pc, #436]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	4413      	add	r3, r2
 8001c34:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c38:	021a      	lsls	r2, r3, #8
 8001c3a:	7ffb      	ldrb	r3, [r7, #31]
 8001c3c:	b211      	sxth	r1, r2
 8001c3e:	4a69      	ldr	r2, [pc, #420]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4413      	add	r3, r2
 8001c44:	460a      	mov	r2, r1
 8001c46:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y |= hxb->buffer[index++];
 8001c48:	7f7b      	ldrb	r3, [r7, #29]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	777a      	strb	r2, [r7, #29]
 8001c4e:	461a      	mov	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4413      	add	r3, r2
 8001c54:	7a98      	ldrb	r0, [r3, #10]
 8001c56:	7ffb      	ldrb	r3, [r7, #31]
 8001c58:	4a62      	ldr	r2, [pc, #392]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4413      	add	r3, r2
 8001c5e:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001c62:	b202      	sxth	r2, r0
 8001c64:	7ffb      	ldrb	r3, [r7, #31]
 8001c66:	430a      	orrs	r2, r1
 8001c68:	b211      	sxth	r1, r2
 8001c6a:	4a5e      	ldr	r2, [pc, #376]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4413      	add	r3, r2
 8001c70:	460a      	mov	r2, r1
 8001c72:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord2.x = hxb->buffer[index++];
 8001c74:	7f7b      	ldrb	r3, [r7, #29]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	777a      	strb	r2, [r7, #29]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4413      	add	r3, r2
 8001c80:	7a9a      	ldrb	r2, [r3, #10]
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
 8001c84:	b211      	sxth	r1, r2
 8001c86:	4a57      	ldr	r2, [pc, #348]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001c88:	00db      	lsls	r3, r3, #3
 8001c8a:	4413      	add	r3, r2
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x <<= 8;
 8001c90:	7ffb      	ldrb	r3, [r7, #31]
 8001c92:	4a54      	ldr	r2, [pc, #336]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c9c:	021a      	lsls	r2, r3, #8
 8001c9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ca0:	b211      	sxth	r1, r2
 8001ca2:	4a50      	ldr	r2, [pc, #320]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	460a      	mov	r2, r1
 8001caa:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x |= hxb->buffer[index++];
 8001cac:	7f7b      	ldrb	r3, [r7, #29]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	777a      	strb	r2, [r7, #29]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	7a98      	ldrb	r0, [r3, #10]
 8001cba:	7ffb      	ldrb	r3, [r7, #31]
 8001cbc:	4a49      	ldr	r2, [pc, #292]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001cbe:	00db      	lsls	r3, r3, #3
 8001cc0:	4413      	add	r3, r2
 8001cc2:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8001cc6:	b202      	sxth	r2, r0
 8001cc8:	7ffb      	ldrb	r3, [r7, #31]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	b211      	sxth	r1, r2
 8001cce:	4a45      	ldr	r2, [pc, #276]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	460a      	mov	r2, r1
 8001cd6:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.y = hxb->buffer[index++];
 8001cd8:	7f7b      	ldrb	r3, [r7, #29]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	777a      	strb	r2, [r7, #29]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	7a9a      	ldrb	r2, [r3, #10]
 8001ce6:	7ffb      	ldrb	r3, [r7, #31]
 8001ce8:	b211      	sxth	r1, r2
 8001cea:	4a3e      	ldr	r2, [pc, #248]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y <<= 8;
 8001cf4:	7ffb      	ldrb	r3, [r7, #31]
 8001cf6:	4a3b      	ldr	r2, [pc, #236]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001d00:	021a      	lsls	r2, r3, #8
 8001d02:	7ffb      	ldrb	r3, [r7, #31]
 8001d04:	b211      	sxth	r1, r2
 8001d06:	4a37      	ldr	r2, [pc, #220]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001d08:	00db      	lsls	r3, r3, #3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y |= hxb->buffer[index++];
 8001d10:	7f7b      	ldrb	r3, [r7, #29]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	777a      	strb	r2, [r7, #29]
 8001d16:	461a      	mov	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	7a98      	ldrb	r0, [r3, #10]
 8001d1e:	7ffb      	ldrb	r3, [r7, #31]
 8001d20:	4a30      	ldr	r2, [pc, #192]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8001d2a:	b202      	sxth	r2, r0
 8001d2c:	7ffb      	ldrb	r3, [r7, #31]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	b211      	sxth	r1, r2
 8001d32:	4a2c      	ldr	r2, [pc, #176]	; (8001de4 <huansic_xb_decodeBody+0x25c>)
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	4413      	add	r3, r2
 8001d38:	460a      	mov	r2, r1
 8001d3a:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 8001d3c:	7ffb      	ldrb	r3, [r7, #31]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	77fb      	strb	r3, [r7, #31]
 8001d42:	7ffb      	ldrb	r3, [r7, #31]
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	f67f af3b 	bls.w	8001bc0 <huansic_xb_decodeBody+0x38>
		}

		/* total time of this round */
		gameStageTimeLimit = hxb->buffer[index++];
 8001d4a:	7f7b      	ldrb	r3, [r7, #29]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	777a      	strb	r2, [r7, #29]
 8001d50:	461a      	mov	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	7a9b      	ldrb	r3, [r3, #10]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <huansic_xb_decodeBody+0x260>)
 8001d5c:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8001d5e:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <huansic_xb_decodeBody+0x260>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	4a20      	ldr	r2, [pc, #128]	; (8001de8 <huansic_xb_decodeBody+0x260>)
 8001d66:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001d68:	7f7b      	ldrb	r3, [r7, #29]
 8001d6a:	1c5a      	adds	r2, r3, #1
 8001d6c:	777a      	strb	r2, [r7, #29]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4413      	add	r3, r2
 8001d74:	7a9b      	ldrb	r3, [r3, #10]
 8001d76:	461a      	mov	r2, r3
 8001d78:	4b1b      	ldr	r3, [pc, #108]	; (8001de8 <huansic_xb_decodeBody+0x260>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	4a1a      	ldr	r2, [pc, #104]	; (8001de8 <huansic_xb_decodeBody+0x260>)
 8001d80:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001d82:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <huansic_xb_decodeBody+0x260>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	021b      	lsls	r3, r3, #8
 8001d88:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <huansic_xb_decodeBody+0x260>)
 8001d8a:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001d8c:	7f7b      	ldrb	r3, [r7, #29]
 8001d8e:	1c5a      	adds	r2, r3, #1
 8001d90:	777a      	strb	r2, [r7, #29]
 8001d92:	461a      	mov	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	7a9b      	ldrb	r3, [r3, #10]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <huansic_xb_decodeBody+0x260>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	4a11      	ldr	r2, [pc, #68]	; (8001de8 <huansic_xb_decodeBody+0x260>)
 8001da4:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001da6:	4b10      	ldr	r3, [pc, #64]	; (8001de8 <huansic_xb_decodeBody+0x260>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	4a0e      	ldr	r2, [pc, #56]	; (8001de8 <huansic_xb_decodeBody+0x260>)
 8001dae:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001db0:	7f7b      	ldrb	r3, [r7, #29]
 8001db2:	1c5a      	adds	r2, r3, #1
 8001db4:	777a      	strb	r2, [r7, #29]
 8001db6:	461a      	mov	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4413      	add	r3, r2
 8001dbc:	7a9b      	ldrb	r3, [r3, #10]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <huansic_xb_decodeBody+0x260>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <huansic_xb_decodeBody+0x260>)
 8001dc8:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index++];
 8001dca:	7f7b      	ldrb	r3, [r7, #29]
 8001dcc:	1c5a      	adds	r2, r3, #1
 8001dce:	777a      	strb	r2, [r7, #29]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4413      	add	r3, r2
 8001dd6:	7a9b      	ldrb	r3, [r3, #10]
 8001dd8:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8001dda:	2300      	movs	r3, #0
 8001ddc:	77fb      	strb	r3, [r7, #31]
 8001dde:	e062      	b.n	8001ea6 <huansic_xb_decodeBody+0x31e>
 8001de0:	20000b5c 	.word	0x20000b5c
 8001de4:	20000b68 	.word	0x20000b68
 8001de8:	20000b60 	.word	0x20000b60
			allyBeacons[i].x = hxb->buffer[index++];
 8001dec:	7f7b      	ldrb	r3, [r7, #29]
 8001dee:	1c5a      	adds	r2, r3, #1
 8001df0:	777a      	strb	r2, [r7, #29]
 8001df2:	461a      	mov	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4413      	add	r3, r2
 8001df8:	7a9a      	ldrb	r2, [r3, #10]
 8001dfa:	7ffb      	ldrb	r3, [r7, #31]
 8001dfc:	b211      	sxth	r1, r2
 8001dfe:	4a62      	ldr	r2, [pc, #392]	; (8001f88 <huansic_xb_decodeBody+0x400>)
 8001e00:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x <<= 8;
 8001e04:	7ffb      	ldrb	r3, [r7, #31]
 8001e06:	4a60      	ldr	r2, [pc, #384]	; (8001f88 <huansic_xb_decodeBody+0x400>)
 8001e08:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 8001e0c:	021a      	lsls	r2, r3, #8
 8001e0e:	7ffb      	ldrb	r3, [r7, #31]
 8001e10:	b211      	sxth	r1, r2
 8001e12:	4a5d      	ldr	r2, [pc, #372]	; (8001f88 <huansic_xb_decodeBody+0x400>)
 8001e14:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x |= hxb->buffer[index++];
 8001e18:	7f7b      	ldrb	r3, [r7, #29]
 8001e1a:	1c5a      	adds	r2, r3, #1
 8001e1c:	777a      	strb	r2, [r7, #29]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4413      	add	r3, r2
 8001e24:	7a98      	ldrb	r0, [r3, #10]
 8001e26:	7ffb      	ldrb	r3, [r7, #31]
 8001e28:	4a57      	ldr	r2, [pc, #348]	; (8001f88 <huansic_xb_decodeBody+0x400>)
 8001e2a:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
 8001e2e:	b202      	sxth	r2, r0
 8001e30:	7ffb      	ldrb	r3, [r7, #31]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	b211      	sxth	r1, r2
 8001e36:	4a54      	ldr	r2, [pc, #336]	; (8001f88 <huansic_xb_decodeBody+0x400>)
 8001e38:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++];
 8001e3c:	7f7b      	ldrb	r3, [r7, #29]
 8001e3e:	1c5a      	adds	r2, r3, #1
 8001e40:	777a      	strb	r2, [r7, #29]
 8001e42:	461a      	mov	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4413      	add	r3, r2
 8001e48:	7a9a      	ldrb	r2, [r3, #10]
 8001e4a:	7ffb      	ldrb	r3, [r7, #31]
 8001e4c:	b211      	sxth	r1, r2
 8001e4e:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <huansic_xb_decodeBody+0x400>)
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	460a      	mov	r2, r1
 8001e56:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y <<= 8;
 8001e58:	7ffb      	ldrb	r3, [r7, #31]
 8001e5a:	4a4b      	ldr	r2, [pc, #300]	; (8001f88 <huansic_xb_decodeBody+0x400>)
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e64:	021a      	lsls	r2, r3, #8
 8001e66:	7ffb      	ldrb	r3, [r7, #31]
 8001e68:	b211      	sxth	r1, r2
 8001e6a:	4a47      	ldr	r2, [pc, #284]	; (8001f88 <huansic_xb_decodeBody+0x400>)
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	460a      	mov	r2, r1
 8001e72:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y |= hxb->buffer[index++];
 8001e74:	7f7b      	ldrb	r3, [r7, #29]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	777a      	strb	r2, [r7, #29]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4413      	add	r3, r2
 8001e80:	7a98      	ldrb	r0, [r3, #10]
 8001e82:	7ffb      	ldrb	r3, [r7, #31]
 8001e84:	4a40      	ldr	r2, [pc, #256]	; (8001f88 <huansic_xb_decodeBody+0x400>)
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001e8e:	b202      	sxth	r2, r0
 8001e90:	7ffb      	ldrb	r3, [r7, #31]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	b211      	sxth	r1, r2
 8001e96:	4a3c      	ldr	r2, [pc, #240]	; (8001f88 <huansic_xb_decodeBody+0x400>)
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	4413      	add	r3, r2
 8001e9c:	460a      	mov	r2, r1
 8001e9e:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8001ea0:	7ffb      	ldrb	r3, [r7, #31]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	77fb      	strb	r3, [r7, #31]
 8001ea6:	7ffa      	ldrb	r2, [r7, #31]
 8001ea8:	7efb      	ldrb	r3, [r7, #27]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d39e      	bcc.n	8001dec <huansic_xb_decodeBody+0x264>
		}

		/* opponent beacons */
		listLength = hxb->buffer[index++];
 8001eae:	7f7b      	ldrb	r3, [r7, #29]
 8001eb0:	1c5a      	adds	r2, r3, #1
 8001eb2:	777a      	strb	r2, [r7, #29]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4413      	add	r3, r2
 8001eba:	7a9b      	ldrb	r3, [r3, #10]
 8001ebc:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	77fb      	strb	r3, [r7, #31]
 8001ec2:	e05c      	b.n	8001f7e <huansic_xb_decodeBody+0x3f6>
			oppoBeacons[i].x = hxb->buffer[index++];
 8001ec4:	7f7b      	ldrb	r3, [r7, #29]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	777a      	strb	r2, [r7, #29]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	7a9a      	ldrb	r2, [r3, #10]
 8001ed2:	7ffb      	ldrb	r3, [r7, #31]
 8001ed4:	b211      	sxth	r1, r2
 8001ed6:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <huansic_xb_decodeBody+0x404>)
 8001ed8:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x <<= 8;
 8001edc:	7ffb      	ldrb	r3, [r7, #31]
 8001ede:	4a2b      	ldr	r2, [pc, #172]	; (8001f8c <huansic_xb_decodeBody+0x404>)
 8001ee0:	f932 3023 	ldrsh.w	r3, [r2, r3, lsl #2]
 8001ee4:	021a      	lsls	r2, r3, #8
 8001ee6:	7ffb      	ldrb	r3, [r7, #31]
 8001ee8:	b211      	sxth	r1, r2
 8001eea:	4a28      	ldr	r2, [pc, #160]	; (8001f8c <huansic_xb_decodeBody+0x404>)
 8001eec:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x |= hxb->buffer[index++];
 8001ef0:	7f7b      	ldrb	r3, [r7, #29]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	777a      	strb	r2, [r7, #29]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4413      	add	r3, r2
 8001efc:	7a98      	ldrb	r0, [r3, #10]
 8001efe:	7ffb      	ldrb	r3, [r7, #31]
 8001f00:	4a22      	ldr	r2, [pc, #136]	; (8001f8c <huansic_xb_decodeBody+0x404>)
 8001f02:	f932 1023 	ldrsh.w	r1, [r2, r3, lsl #2]
 8001f06:	b202      	sxth	r2, r0
 8001f08:	7ffb      	ldrb	r3, [r7, #31]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	b211      	sxth	r1, r2
 8001f0e:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <huansic_xb_decodeBody+0x404>)
 8001f10:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8001f14:	7f7b      	ldrb	r3, [r7, #29]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	777a      	strb	r2, [r7, #29]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	7a9a      	ldrb	r2, [r3, #10]
 8001f22:	7ffb      	ldrb	r3, [r7, #31]
 8001f24:	b211      	sxth	r1, r2
 8001f26:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <huansic_xb_decodeBody+0x404>)
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	460a      	mov	r2, r1
 8001f2e:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y <<= 8;
 8001f30:	7ffb      	ldrb	r3, [r7, #31]
 8001f32:	4a16      	ldr	r2, [pc, #88]	; (8001f8c <huansic_xb_decodeBody+0x404>)
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f3c:	021a      	lsls	r2, r3, #8
 8001f3e:	7ffb      	ldrb	r3, [r7, #31]
 8001f40:	b211      	sxth	r1, r2
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <huansic_xb_decodeBody+0x404>)
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	460a      	mov	r2, r1
 8001f4a:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y |= hxb->buffer[index++];
 8001f4c:	7f7b      	ldrb	r3, [r7, #29]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	777a      	strb	r2, [r7, #29]
 8001f52:	461a      	mov	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4413      	add	r3, r2
 8001f58:	7a98      	ldrb	r0, [r3, #10]
 8001f5a:	7ffb      	ldrb	r3, [r7, #31]
 8001f5c:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <huansic_xb_decodeBody+0x404>)
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001f66:	b202      	sxth	r2, r0
 8001f68:	7ffb      	ldrb	r3, [r7, #31]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	b211      	sxth	r1, r2
 8001f6e:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <huansic_xb_decodeBody+0x404>)
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	460a      	mov	r2, r1
 8001f76:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8001f78:	7ffb      	ldrb	r3, [r7, #31]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	77fb      	strb	r3, [r7, #31]
 8001f7e:	7ffa      	ldrb	r2, [r7, #31]
 8001f80:	7efb      	ldrb	r3, [r7, #27]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d39e      	bcc.n	8001ec4 <huansic_xb_decodeBody+0x33c>
 8001f86:	e31f      	b.n	80025c8 <huansic_xb_decodeBody+0xa40>
 8001f88:	20000b90 	.word	0x20000b90
 8001f8c:	20000b9c 	.word	0x20000b9c
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7a1b      	ldrb	r3, [r3, #8]
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	f040 8317 	bne.w	80025c8 <huansic_xb_decodeBody+0xa40>
		/* game status */
		gameStatus = hxb->buffer[index++];
 8001f9a:	7f7b      	ldrb	r3, [r7, #29]
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	777a      	strb	r2, [r7, #29]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	7a9a      	ldrb	r2, [r3, #10]
 8001fa8:	4b97      	ldr	r3, [pc, #604]	; (8002208 <huansic_xb_decodeBody+0x680>)
 8001faa:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 8001fac:	7f7b      	ldrb	r3, [r7, #29]
 8001fae:	1c5a      	adds	r2, r3, #1
 8001fb0:	777a      	strb	r2, [r7, #29]
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	7a9b      	ldrb	r3, [r3, #10]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4b93      	ldr	r3, [pc, #588]	; (800220c <huansic_xb_decodeBody+0x684>)
 8001fbe:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 8001fc0:	4b92      	ldr	r3, [pc, #584]	; (800220c <huansic_xb_decodeBody+0x684>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	021b      	lsls	r3, r3, #8
 8001fc6:	4a91      	ldr	r2, [pc, #580]	; (800220c <huansic_xb_decodeBody+0x684>)
 8001fc8:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001fca:	7f7b      	ldrb	r3, [r7, #29]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	777a      	strb	r2, [r7, #29]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	7a9b      	ldrb	r3, [r3, #10]
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4b8c      	ldr	r3, [pc, #560]	; (800220c <huansic_xb_decodeBody+0x684>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	4a8a      	ldr	r2, [pc, #552]	; (800220c <huansic_xb_decodeBody+0x684>)
 8001fe2:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8001fe4:	4b89      	ldr	r3, [pc, #548]	; (800220c <huansic_xb_decodeBody+0x684>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	4a88      	ldr	r2, [pc, #544]	; (800220c <huansic_xb_decodeBody+0x684>)
 8001fec:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8001fee:	7f7b      	ldrb	r3, [r7, #29]
 8001ff0:	1c5a      	adds	r2, r3, #1
 8001ff2:	777a      	strb	r2, [r7, #29]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	7a9b      	ldrb	r3, [r3, #10]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b83      	ldr	r3, [pc, #524]	; (800220c <huansic_xb_decodeBody+0x684>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	4a81      	ldr	r2, [pc, #516]	; (800220c <huansic_xb_decodeBody+0x684>)
 8002006:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 8002008:	4b80      	ldr	r3, [pc, #512]	; (800220c <huansic_xb_decodeBody+0x684>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	021b      	lsls	r3, r3, #8
 800200e:	4a7f      	ldr	r2, [pc, #508]	; (800220c <huansic_xb_decodeBody+0x684>)
 8002010:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 8002012:	7f7b      	ldrb	r3, [r7, #29]
 8002014:	1c5a      	adds	r2, r3, #1
 8002016:	777a      	strb	r2, [r7, #29]
 8002018:	461a      	mov	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4413      	add	r3, r2
 800201e:	7a9b      	ldrb	r3, [r3, #10]
 8002020:	461a      	mov	r2, r3
 8002022:	4b7a      	ldr	r3, [pc, #488]	; (800220c <huansic_xb_decodeBody+0x684>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4313      	orrs	r3, r2
 8002028:	4a78      	ldr	r2, [pc, #480]	; (800220c <huansic_xb_decodeBody+0x684>)
 800202a:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 800202c:	4b78      	ldr	r3, [pc, #480]	; (8002210 <huansic_xb_decodeBody+0x688>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b76      	ldr	r3, [pc, #472]	; (800220c <huansic_xb_decodeBody+0x684>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	4a77      	ldr	r2, [pc, #476]	; (8002214 <huansic_xb_decodeBody+0x68c>)
 8002038:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp32 = hxb->buffer[index++];
 800203a:	7f7b      	ldrb	r3, [r7, #29]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	777a      	strb	r2, [r7, #29]
 8002040:	461a      	mov	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4413      	add	r3, r2
 8002046:	7a9b      	ldrb	r3, [r3, #10]
 8002048:	613b      	str	r3, [r7, #16]
		temp32 <<= 8;
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	613b      	str	r3, [r7, #16]
		temp32 |= hxb->buffer[index++];
 8002050:	7f7b      	ldrb	r3, [r7, #29]
 8002052:	1c5a      	adds	r2, r3, #1
 8002054:	777a      	strb	r2, [r7, #29]
 8002056:	461a      	mov	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4413      	add	r3, r2
 800205c:	7a9b      	ldrb	r3, [r3, #10]
 800205e:	461a      	mov	r2, r3
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
		temp32 <<= 8;
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	613b      	str	r3, [r7, #16]
		temp32 |= hxb->buffer[index++];
 800206c:	7f7b      	ldrb	r3, [r7, #29]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	777a      	strb	r2, [r7, #29]
 8002072:	461a      	mov	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	7a9b      	ldrb	r3, [r3, #10]
 800207a:	461a      	mov	r2, r3
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
		temp32 <<= 8;
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	613b      	str	r3, [r7, #16]
		temp32 |= hxb->buffer[index++];
 8002088:	7f7b      	ldrb	r3, [r7, #29]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	777a      	strb	r2, [r7, #29]
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4413      	add	r3, r2
 8002094:	7a9b      	ldrb	r3, [r3, #10]
 8002096:	461a      	mov	r2, r3
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp32;			// decode float from uint32
 800209e:	f107 0310 	add.w	r3, r7, #16
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a5c      	ldr	r2, [pc, #368]	; (8002218 <huansic_xb_decodeBody+0x690>)
 80020a6:	6013      	str	r3, [r2, #0]

		/* my position */
		myCoord.x = hxb->buffer[index++];
 80020a8:	7f7b      	ldrb	r3, [r7, #29]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	777a      	strb	r2, [r7, #29]
 80020ae:	461a      	mov	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	4413      	add	r3, r2
 80020b4:	7a9b      	ldrb	r3, [r3, #10]
 80020b6:	b21a      	sxth	r2, r3
 80020b8:	4b58      	ldr	r3, [pc, #352]	; (800221c <huansic_xb_decodeBody+0x694>)
 80020ba:	801a      	strh	r2, [r3, #0]
		myCoord.x <<= 8;
 80020bc:	4b57      	ldr	r3, [pc, #348]	; (800221c <huansic_xb_decodeBody+0x694>)
 80020be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	b21a      	sxth	r2, r3
 80020c6:	4b55      	ldr	r3, [pc, #340]	; (800221c <huansic_xb_decodeBody+0x694>)
 80020c8:	801a      	strh	r2, [r3, #0]
		myCoord.x |= hxb->buffer[index++];
 80020ca:	7f7b      	ldrb	r3, [r7, #29]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	777a      	strb	r2, [r7, #29]
 80020d0:	461a      	mov	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	7a99      	ldrb	r1, [r3, #10]
 80020d8:	4b50      	ldr	r3, [pc, #320]	; (800221c <huansic_xb_decodeBody+0x694>)
 80020da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020de:	b20b      	sxth	r3, r1
 80020e0:	4313      	orrs	r3, r2
 80020e2:	b21a      	sxth	r2, r3
 80020e4:	4b4d      	ldr	r3, [pc, #308]	; (800221c <huansic_xb_decodeBody+0x694>)
 80020e6:	801a      	strh	r2, [r3, #0]
		myCoord.y = hxb->buffer[index++];
 80020e8:	7f7b      	ldrb	r3, [r7, #29]
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	777a      	strb	r2, [r7, #29]
 80020ee:	461a      	mov	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4413      	add	r3, r2
 80020f4:	7a9b      	ldrb	r3, [r3, #10]
 80020f6:	b21a      	sxth	r2, r3
 80020f8:	4b48      	ldr	r3, [pc, #288]	; (800221c <huansic_xb_decodeBody+0x694>)
 80020fa:	805a      	strh	r2, [r3, #2]
		myCoord.y <<= 8;
 80020fc:	4b47      	ldr	r3, [pc, #284]	; (800221c <huansic_xb_decodeBody+0x694>)
 80020fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	b21a      	sxth	r2, r3
 8002106:	4b45      	ldr	r3, [pc, #276]	; (800221c <huansic_xb_decodeBody+0x694>)
 8002108:	805a      	strh	r2, [r3, #2]
		myCoord.y |= hxb->buffer[index++];
 800210a:	7f7b      	ldrb	r3, [r7, #29]
 800210c:	1c5a      	adds	r2, r3, #1
 800210e:	777a      	strb	r2, [r7, #29]
 8002110:	461a      	mov	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4413      	add	r3, r2
 8002116:	7a99      	ldrb	r1, [r3, #10]
 8002118:	4b40      	ldr	r3, [pc, #256]	; (800221c <huansic_xb_decodeBody+0x694>)
 800211a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800211e:	b20b      	sxth	r3, r1
 8002120:	4313      	orrs	r3, r2
 8002122:	b21a      	sxth	r2, r3
 8002124:	4b3d      	ldr	r3, [pc, #244]	; (800221c <huansic_xb_decodeBody+0x694>)
 8002126:	805a      	strh	r2, [r3, #2]

		/* fetch battery */
		temp32 = hxb->buffer[index++];
 8002128:	7f7b      	ldrb	r3, [r7, #29]
 800212a:	1c5a      	adds	r2, r3, #1
 800212c:	777a      	strb	r2, [r7, #29]
 800212e:	461a      	mov	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4413      	add	r3, r2
 8002134:	7a9b      	ldrb	r3, [r3, #10]
 8002136:	613b      	str	r3, [r7, #16]
		temp32 <<= 8;
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	021b      	lsls	r3, r3, #8
 800213c:	613b      	str	r3, [r7, #16]
		temp32 |= hxb->buffer[index++];
 800213e:	7f7b      	ldrb	r3, [r7, #29]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	777a      	strb	r2, [r7, #29]
 8002144:	461a      	mov	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	7a9b      	ldrb	r3, [r3, #10]
 800214c:	461a      	mov	r2, r3
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
		temp32 <<= 8;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	613b      	str	r3, [r7, #16]
		temp32 |= hxb->buffer[index++];
 800215a:	7f7b      	ldrb	r3, [r7, #29]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	777a      	strb	r2, [r7, #29]
 8002160:	461a      	mov	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	7a9b      	ldrb	r3, [r3, #10]
 8002168:	461a      	mov	r2, r3
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
		temp32 <<= 8;
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	613b      	str	r3, [r7, #16]
		temp32 |= hxb->buffer[index++];
 8002176:	7f7b      	ldrb	r3, [r7, #29]
 8002178:	1c5a      	adds	r2, r3, #1
 800217a:	777a      	strb	r2, [r7, #29]
 800217c:	461a      	mov	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	7a9b      	ldrb	r3, [r3, #10]
 8002184:	461a      	mov	r2, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	4313      	orrs	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp32;			// decode float from uint32
 800218c:	f107 0310 	add.w	r3, r7, #16
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a23      	ldr	r2, [pc, #140]	; (8002220 <huansic_xb_decodeBody+0x698>)
 8002194:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 8002196:	4a23      	ldr	r2, [pc, #140]	; (8002224 <huansic_xb_decodeBody+0x69c>)
 8002198:	f107 0308 	add.w	r3, r7, #8
 800219c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80021a0:	6018      	str	r0, [r3, #0]
 80021a2:	3304      	adds	r3, #4
 80021a4:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 80021aa:	7f7b      	ldrb	r3, [r7, #29]
 80021ac:	1c5a      	adds	r2, r3, #1
 80021ae:	777a      	strb	r2, [r7, #29]
 80021b0:	461a      	mov	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	7a9b      	ldrb	r3, [r3, #10]
 80021b8:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	77fb      	strb	r3, [r7, #31]
 80021be:	e0f6      	b.n	80023ae <huansic_xb_decodeBody+0x826>
			temp16 = hxb->buffer[index + 16];
 80021c0:	7f7b      	ldrb	r3, [r7, #29]
 80021c2:	3310      	adds	r3, #16
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	4413      	add	r3, r2
 80021c8:	7a9b      	ldrb	r3, [r3, #10]
 80021ca:	833b      	strh	r3, [r7, #24]
			temp16 <<= 8;
 80021cc:	8b3b      	ldrh	r3, [r7, #24]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	833b      	strh	r3, [r7, #24]
			temp16 |= hxb->buffer[index + 17];
 80021d2:	7f7b      	ldrb	r3, [r7, #29]
 80021d4:	3311      	adds	r3, #17
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	7a9b      	ldrb	r3, [r3, #10]
 80021dc:	b29a      	uxth	r2, r3
 80021de:	8b3b      	ldrh	r3, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	833b      	strh	r3, [r7, #24]
			tempOrder = huansic_order_new((int16_t) temp16);
 80021e4:	8b3b      	ldrh	r3, [r7, #24]
 80021e6:	b25b      	sxtb	r3, r3
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fa0d 	bl	8001608 <huansic_order_new>
 80021ee:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d118      	bne.n	8002228 <huansic_xb_decodeBody+0x6a0>
				index += 18;
 80021f6:	7f7b      	ldrb	r3, [r7, #29]
 80021f8:	3312      	adds	r3, #18
 80021fa:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp16);
 80021fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fc59 	bl	8001ab8 <custom_order_new_failed>
				continue;
 8002206:	e0cf      	b.n	80023a8 <huansic_xb_decodeBody+0x820>
 8002208:	20000b5d 	.word	0x20000b5d
 800220c:	20000b64 	.word	0x20000b64
 8002210:	20000b60 	.word	0x20000b60
 8002214:	20000bc8 	.word	0x20000bc8
 8002218:	20000bc0 	.word	0x20000bc0
 800221c:	20000bbc 	.word	0x20000bbc
 8002220:	20000bc4 	.word	0x20000bc4
 8002224:	08009680 	.word	0x08009680
			}

			// start
			temp16 = hxb->buffer[index + 0];
 8002228:	7f7b      	ldrb	r3, [r7, #29]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	7a9b      	ldrb	r3, [r3, #10]
 8002230:	833b      	strh	r3, [r7, #24]
			temp16 <<= 8;
 8002232:	8b3b      	ldrh	r3, [r7, #24]
 8002234:	021b      	lsls	r3, r3, #8
 8002236:	833b      	strh	r3, [r7, #24]
			temp16 |= hxb->buffer[index + 1];
 8002238:	7f7b      	ldrb	r3, [r7, #29]
 800223a:	3301      	adds	r3, #1
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4413      	add	r3, r2
 8002240:	7a9b      	ldrb	r3, [r3, #10]
 8002242:	b29a      	uxth	r2, r3
 8002244:	8b3b      	ldrh	r3, [r7, #24]
 8002246:	4313      	orrs	r3, r2
 8002248:	833b      	strh	r3, [r7, #24]
			tempOrder->startCoord.x = (int16_t) temp16;
 800224a:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	801a      	strh	r2, [r3, #0]
			temp16 = hxb->buffer[index + 2];
 8002252:	7f7b      	ldrb	r3, [r7, #29]
 8002254:	3302      	adds	r3, #2
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	7a9b      	ldrb	r3, [r3, #10]
 800225c:	833b      	strh	r3, [r7, #24]
			temp16 <<= 8;
 800225e:	8b3b      	ldrh	r3, [r7, #24]
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	833b      	strh	r3, [r7, #24]
			temp16 |= hxb->buffer[index + 3];
 8002264:	7f7b      	ldrb	r3, [r7, #29]
 8002266:	3303      	adds	r3, #3
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	4413      	add	r3, r2
 800226c:	7a9b      	ldrb	r3, [r3, #10]
 800226e:	b29a      	uxth	r2, r3
 8002270:	8b3b      	ldrh	r3, [r7, #24]
 8002272:	4313      	orrs	r3, r2
 8002274:	833b      	strh	r3, [r7, #24]
			tempOrder->startCoord.y = (int16_t) temp16;
 8002276:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	805a      	strh	r2, [r3, #2]

			// destination
			temp16 = hxb->buffer[index + 4];
 800227e:	7f7b      	ldrb	r3, [r7, #29]
 8002280:	3304      	adds	r3, #4
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	7a9b      	ldrb	r3, [r3, #10]
 8002288:	833b      	strh	r3, [r7, #24]
			temp16 <<= 8;
 800228a:	8b3b      	ldrh	r3, [r7, #24]
 800228c:	021b      	lsls	r3, r3, #8
 800228e:	833b      	strh	r3, [r7, #24]
			temp16 |= hxb->buffer[index + 5];
 8002290:	7f7b      	ldrb	r3, [r7, #29]
 8002292:	3305      	adds	r3, #5
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	7a9b      	ldrb	r3, [r3, #10]
 800229a:	b29a      	uxth	r2, r3
 800229c:	8b3b      	ldrh	r3, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	833b      	strh	r3, [r7, #24]
			tempOrder->destCoord.x = (int16_t) temp16;
 80022a2:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	809a      	strh	r2, [r3, #4]
			temp16 = hxb->buffer[index + 6];
 80022aa:	7f7b      	ldrb	r3, [r7, #29]
 80022ac:	3306      	adds	r3, #6
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	4413      	add	r3, r2
 80022b2:	7a9b      	ldrb	r3, [r3, #10]
 80022b4:	833b      	strh	r3, [r7, #24]
			temp16 <<= 8;
 80022b6:	8b3b      	ldrh	r3, [r7, #24]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	833b      	strh	r3, [r7, #24]
			temp16 |= hxb->buffer[index + 7];
 80022bc:	7f7b      	ldrb	r3, [r7, #29]
 80022be:	3307      	adds	r3, #7
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	7a9b      	ldrb	r3, [r3, #10]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	8b3b      	ldrh	r3, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	833b      	strh	r3, [r7, #24]
			tempOrder->destCoord.y = (int16_t) temp16;
 80022ce:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	80da      	strh	r2, [r3, #6]

			// time limit
			temp32 = hxb->buffer[index + 8];
 80022d6:	7f7b      	ldrb	r3, [r7, #29]
 80022d8:	3308      	adds	r3, #8
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4413      	add	r3, r2
 80022de:	7a9b      	ldrb	r3, [r3, #10]
 80022e0:	613b      	str	r3, [r7, #16]
			temp32 <<= 8;
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	021b      	lsls	r3, r3, #8
 80022e6:	613b      	str	r3, [r7, #16]
			temp32 |= hxb->buffer[index + 9];
 80022e8:	7f7b      	ldrb	r3, [r7, #29]
 80022ea:	3309      	adds	r3, #9
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	7a9b      	ldrb	r3, [r3, #10]
 80022f2:	461a      	mov	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
			temp32 <<= 8;
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	021b      	lsls	r3, r3, #8
 80022fe:	613b      	str	r3, [r7, #16]
			temp32 |= hxb->buffer[index + 10];
 8002300:	7f7b      	ldrb	r3, [r7, #29]
 8002302:	330a      	adds	r3, #10
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	4413      	add	r3, r2
 8002308:	7a9b      	ldrb	r3, [r3, #10]
 800230a:	461a      	mov	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
			temp32 <<= 8;
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	613b      	str	r3, [r7, #16]
			temp32 |= hxb->buffer[index + 11];
 8002318:	7f7b      	ldrb	r3, [r7, #29]
 800231a:	330b      	adds	r3, #11
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	7a9b      	ldrb	r3, [r3, #10]
 8002322:	461a      	mov	r2, r3
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp32;
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	609a      	str	r2, [r3, #8]

			// reward
			temp32 = hxb->buffer[index + 12];
 8002330:	7f7b      	ldrb	r3, [r7, #29]
 8002332:	330c      	adds	r3, #12
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	7a9b      	ldrb	r3, [r3, #10]
 800233a:	613b      	str	r3, [r7, #16]
			temp32 <<= 8;
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	613b      	str	r3, [r7, #16]
			temp32 |= hxb->buffer[index + 13];
 8002342:	7f7b      	ldrb	r3, [r7, #29]
 8002344:	330d      	adds	r3, #13
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	7a9b      	ldrb	r3, [r3, #10]
 800234c:	461a      	mov	r2, r3
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	4313      	orrs	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
			temp32 <<= 8;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	613b      	str	r3, [r7, #16]
			temp32 |= hxb->buffer[index + 14];
 800235a:	7f7b      	ldrb	r3, [r7, #29]
 800235c:	330e      	adds	r3, #14
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	7a9b      	ldrb	r3, [r3, #10]
 8002364:	461a      	mov	r2, r3
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
			temp32 <<= 8;
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	613b      	str	r3, [r7, #16]
			temp32 |= hxb->buffer[index + 15];
 8002372:	7f7b      	ldrb	r3, [r7, #29]
 8002374:	330f      	adds	r3, #15
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	7a9b      	ldrb	r3, [r3, #10]
 800237c:	461a      	mov	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp32;
 8002384:	f107 0310 	add.w	r3, r7, #16
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 18;
 800238e:	7f7b      	ldrb	r3, [r7, #29]
 8002390:	3312      	adds	r3, #18
 8002392:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	7f3b      	ldrb	r3, [r7, #28]
 800239a:	1c59      	adds	r1, r3, #1
 800239c:	7739      	strb	r1, [r7, #28]
 800239e:	b252      	sxtb	r2, r2
 80023a0:	3320      	adds	r3, #32
 80023a2:	443b      	add	r3, r7
 80023a4:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 80023a8:	7ffb      	ldrb	r3, [r7, #31]
 80023aa:	3301      	adds	r3, #1
 80023ac:	77fb      	strb	r3, [r7, #31]
 80023ae:	7ffa      	ldrb	r2, [r7, #31]
 80023b0:	7efb      	ldrb	r3, [r7, #27]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	f4ff af04 	bcc.w	80021c0 <huansic_xb_decodeBody+0x638>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 80023b8:	2300      	movs	r3, #0
 80023ba:	77fb      	strb	r3, [r7, #31]
 80023bc:	e02d      	b.n	800241a <huansic_xb_decodeBody+0x892>
			if (delivering[i]->id != -1) {
 80023be:	7ffb      	ldrb	r3, [r7, #31]
 80023c0:	4a8c      	ldr	r2, [pc, #560]	; (80025f4 <huansic_xb_decodeBody+0xa6c>)
 80023c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023cc:	d022      	beq.n	8002414 <huansic_xb_decodeBody+0x88c>
				for (j = 0; i < updatedOrderIndex; j++)
 80023ce:	2300      	movs	r3, #0
 80023d0:	77bb      	strb	r3, [r7, #30]
 80023d2:	e011      	b.n	80023f8 <huansic_xb_decodeBody+0x870>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 80023d4:	7ffb      	ldrb	r3, [r7, #31]
 80023d6:	4a87      	ldr	r2, [pc, #540]	; (80025f4 <huansic_xb_decodeBody+0xa6c>)
 80023d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	7fba      	ldrb	r2, [r7, #30]
 80023e0:	3220      	adds	r2, #32
 80023e2:	443a      	add	r2, r7
 80023e4:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d102      	bne.n	80023f2 <huansic_xb_decodeBody+0x86a>
						j = 255;
 80023ec:	23ff      	movs	r3, #255	; 0xff
 80023ee:	77bb      	strb	r3, [r7, #30]
						break;
 80023f0:	e006      	b.n	8002400 <huansic_xb_decodeBody+0x878>
				for (j = 0; i < updatedOrderIndex; j++)
 80023f2:	7fbb      	ldrb	r3, [r7, #30]
 80023f4:	3301      	adds	r3, #1
 80023f6:	77bb      	strb	r3, [r7, #30]
 80023f8:	7ffa      	ldrb	r2, [r7, #31]
 80023fa:	7f3b      	ldrb	r3, [r7, #28]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d3e9      	bcc.n	80023d4 <huansic_xb_decodeBody+0x84c>
					}
				if (j != 255)
 8002400:	7fbb      	ldrb	r3, [r7, #30]
 8002402:	2bff      	cmp	r3, #255	; 0xff
 8002404:	d006      	beq.n	8002414 <huansic_xb_decodeBody+0x88c>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 8002406:	7ffb      	ldrb	r3, [r7, #31]
 8002408:	4a7a      	ldr	r2, [pc, #488]	; (80025f4 <huansic_xb_decodeBody+0xa6c>)
 800240a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800240e:	4618      	mov	r0, r3
 8002410:	f7ff f954 	bl	80016bc <huansic_order_delete>
		for (i = 0; i < 5; i++)
 8002414:	7ffb      	ldrb	r3, [r7, #31]
 8002416:	3301      	adds	r3, #1
 8002418:	77fb      	strb	r3, [r7, #31]
 800241a:	7ffb      	ldrb	r3, [r7, #31]
 800241c:	2b04      	cmp	r3, #4
 800241e:	d9ce      	bls.n	80023be <huansic_xb_decodeBody+0x836>
			}

		/* record latest order */
		temp16 = hxb->buffer[index + 16];
 8002420:	7f7b      	ldrb	r3, [r7, #29]
 8002422:	3310      	adds	r3, #16
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	7a9b      	ldrb	r3, [r3, #10]
 800242a:	833b      	strh	r3, [r7, #24]
		temp16 <<= 8;
 800242c:	8b3b      	ldrh	r3, [r7, #24]
 800242e:	021b      	lsls	r3, r3, #8
 8002430:	833b      	strh	r3, [r7, #24]
		temp16 |= hxb->buffer[index + 17];
 8002432:	7f7b      	ldrb	r3, [r7, #29]
 8002434:	3311      	adds	r3, #17
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	7a9b      	ldrb	r3, [r3, #10]
 800243c:	b29a      	uxth	r2, r3
 800243e:	8b3b      	ldrh	r3, [r7, #24]
 8002440:	4313      	orrs	r3, r2
 8002442:	833b      	strh	r3, [r7, #24]
		tempOrder = huansic_order_new(temp16);
 8002444:	8b3b      	ldrh	r3, [r7, #24]
 8002446:	b25b      	sxtb	r3, r3
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff f8dd 	bl	8001608 <huansic_order_new>
 800244e:	6178      	str	r0, [r7, #20]
		if (!tempOrder)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d105      	bne.n	8002462 <huansic_xb_decodeBody+0x8da>
			custom_order_new_failed(temp16);
 8002456:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fb2c 	bl	8001ab8 <custom_order_new_failed>
 8002460:	e0b2      	b.n	80025c8 <huansic_xb_decodeBody+0xa40>
		else {
			// start
			temp16 = hxb->buffer[index + 0];
 8002462:	7f7b      	ldrb	r3, [r7, #29]
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	4413      	add	r3, r2
 8002468:	7a9b      	ldrb	r3, [r3, #10]
 800246a:	833b      	strh	r3, [r7, #24]
			temp16 <<= 8;
 800246c:	8b3b      	ldrh	r3, [r7, #24]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	833b      	strh	r3, [r7, #24]
			temp16 |= hxb->buffer[index + 1];
 8002472:	7f7b      	ldrb	r3, [r7, #29]
 8002474:	3301      	adds	r3, #1
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	7a9b      	ldrb	r3, [r3, #10]
 800247c:	b29a      	uxth	r2, r3
 800247e:	8b3b      	ldrh	r3, [r7, #24]
 8002480:	4313      	orrs	r3, r2
 8002482:	833b      	strh	r3, [r7, #24]
			tempOrder->startCoord.x = (int16_t) temp16;
 8002484:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	801a      	strh	r2, [r3, #0]
			temp16 = hxb->buffer[index + 2];
 800248c:	7f7b      	ldrb	r3, [r7, #29]
 800248e:	3302      	adds	r3, #2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	7a9b      	ldrb	r3, [r3, #10]
 8002496:	833b      	strh	r3, [r7, #24]
			temp16 <<= 8;
 8002498:	8b3b      	ldrh	r3, [r7, #24]
 800249a:	021b      	lsls	r3, r3, #8
 800249c:	833b      	strh	r3, [r7, #24]
			temp16 |= hxb->buffer[index + 3];
 800249e:	7f7b      	ldrb	r3, [r7, #29]
 80024a0:	3303      	adds	r3, #3
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	7a9b      	ldrb	r3, [r3, #10]
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	8b3b      	ldrh	r3, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	833b      	strh	r3, [r7, #24]
			tempOrder->startCoord.y = (int16_t) temp16;
 80024b0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	805a      	strh	r2, [r3, #2]

			// destination
			temp16 = hxb->buffer[index + 4];
 80024b8:	7f7b      	ldrb	r3, [r7, #29]
 80024ba:	3304      	adds	r3, #4
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	4413      	add	r3, r2
 80024c0:	7a9b      	ldrb	r3, [r3, #10]
 80024c2:	833b      	strh	r3, [r7, #24]
			temp16 <<= 8;
 80024c4:	8b3b      	ldrh	r3, [r7, #24]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	833b      	strh	r3, [r7, #24]
			temp16 |= hxb->buffer[index + 5];
 80024ca:	7f7b      	ldrb	r3, [r7, #29]
 80024cc:	3305      	adds	r3, #5
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	7a9b      	ldrb	r3, [r3, #10]
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	8b3b      	ldrh	r3, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	833b      	strh	r3, [r7, #24]
			tempOrder->destCoord.x = (int16_t) temp16;
 80024dc:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	809a      	strh	r2, [r3, #4]
			temp16 = hxb->buffer[index + 6];
 80024e4:	7f7b      	ldrb	r3, [r7, #29]
 80024e6:	3306      	adds	r3, #6
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	4413      	add	r3, r2
 80024ec:	7a9b      	ldrb	r3, [r3, #10]
 80024ee:	833b      	strh	r3, [r7, #24]
			temp16 <<= 8;
 80024f0:	8b3b      	ldrh	r3, [r7, #24]
 80024f2:	021b      	lsls	r3, r3, #8
 80024f4:	833b      	strh	r3, [r7, #24]
			temp16 |= hxb->buffer[index + 7];
 80024f6:	7f7b      	ldrb	r3, [r7, #29]
 80024f8:	3307      	adds	r3, #7
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	7a9b      	ldrb	r3, [r3, #10]
 8002500:	b29a      	uxth	r2, r3
 8002502:	8b3b      	ldrh	r3, [r7, #24]
 8002504:	4313      	orrs	r3, r2
 8002506:	833b      	strh	r3, [r7, #24]
			tempOrder->destCoord.y = (int16_t) temp16;
 8002508:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	80da      	strh	r2, [r3, #6]

			// time limit
			temp32 = hxb->buffer[index + 8];
 8002510:	7f7b      	ldrb	r3, [r7, #29]
 8002512:	3308      	adds	r3, #8
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	4413      	add	r3, r2
 8002518:	7a9b      	ldrb	r3, [r3, #10]
 800251a:	613b      	str	r3, [r7, #16]
			temp32 <<= 8;
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	613b      	str	r3, [r7, #16]
			temp32 |= hxb->buffer[index + 9];
 8002522:	7f7b      	ldrb	r3, [r7, #29]
 8002524:	3309      	adds	r3, #9
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	4413      	add	r3, r2
 800252a:	7a9b      	ldrb	r3, [r3, #10]
 800252c:	461a      	mov	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
			temp32 <<= 8;
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	613b      	str	r3, [r7, #16]
			temp32 |= hxb->buffer[index + 10];
 800253a:	7f7b      	ldrb	r3, [r7, #29]
 800253c:	330a      	adds	r3, #10
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	7a9b      	ldrb	r3, [r3, #10]
 8002544:	461a      	mov	r2, r3
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
			temp32 <<= 8;
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	613b      	str	r3, [r7, #16]
			temp32 |= hxb->buffer[index + 11];
 8002552:	7f7b      	ldrb	r3, [r7, #29]
 8002554:	330b      	adds	r3, #11
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	4413      	add	r3, r2
 800255a:	7a9b      	ldrb	r3, [r3, #10]
 800255c:	461a      	mov	r2, r3
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp32;
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	609a      	str	r2, [r3, #8]

			// reward
			temp32 = hxb->buffer[index + 12];
 800256a:	7f7b      	ldrb	r3, [r7, #29]
 800256c:	330c      	adds	r3, #12
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	7a9b      	ldrb	r3, [r3, #10]
 8002574:	613b      	str	r3, [r7, #16]
			temp32 <<= 8;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	613b      	str	r3, [r7, #16]
			temp32 |= hxb->buffer[index + 13];
 800257c:	7f7b      	ldrb	r3, [r7, #29]
 800257e:	330d      	adds	r3, #13
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	4413      	add	r3, r2
 8002584:	7a9b      	ldrb	r3, [r3, #10]
 8002586:	461a      	mov	r2, r3
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
			temp32 <<= 8;
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	021b      	lsls	r3, r3, #8
 8002592:	613b      	str	r3, [r7, #16]
			temp32 |= hxb->buffer[index + 14];
 8002594:	7f7b      	ldrb	r3, [r7, #29]
 8002596:	330e      	adds	r3, #14
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	4413      	add	r3, r2
 800259c:	7a9b      	ldrb	r3, [r3, #10]
 800259e:	461a      	mov	r2, r3
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
			temp32 <<= 8;
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	613b      	str	r3, [r7, #16]
			temp32 |= hxb->buffer[index + 15];
 80025ac:	7f7b      	ldrb	r3, [r7, #29]
 80025ae:	330f      	adds	r3, #15
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	7a9b      	ldrb	r3, [r3, #10]
 80025b6:	461a      	mov	r2, r3
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp32;
 80025be:	f107 0310 	add.w	r3, r7, #16
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	615a      	str	r2, [r3, #20]
		}
	}

	// set up next DMA
	hxb->nextPackageLength = 6;		// header length
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2206      	movs	r2, #6
 80025cc:	725a      	strb	r2, [r3, #9]
	hxb->nextPackageID = 0x00;		// the next one is header
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f103 010a 	add.w	r1, r3, #10
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	7a5b      	ldrb	r3, [r3, #9]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	f004 f82c 	bl	8006642 <HAL_UART_Receive_DMA>
}
 80025ea:	bf00      	nop
 80025ec:	3720      	adds	r7, #32
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	20000ba8 	.word	0x20000ba8

080025f8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80025fe:	f001 f8fd 	bl	80037fc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002602:	f000 f8eb 	bl	80027dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002606:	f000 fb67 	bl	8002cd8 <MX_GPIO_Init>
	MX_DMA_Init();
 800260a:	f000 fb3f 	bl	8002c8c <MX_DMA_Init>
	MX_I2C1_Init();
 800260e:	f000 f92b 	bl	8002868 <MX_I2C1_Init>
	MX_TIM1_Init();
 8002612:	f000 f957 	bl	80028c4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8002616:	f000 f9a5 	bl	8002964 <MX_TIM2_Init>
	MX_TIM3_Init();
 800261a:	f000 f9f7 	bl	8002a0c <MX_TIM3_Init>
	MX_TIM4_Init();
 800261e:	f000 fa8d 	bl	8002b3c <MX_TIM4_Init>
	MX_USART2_UART_Init();
 8002622:	f000 fb09 	bl	8002c38 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 8002626:	f000 fadd 	bl	8002be4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_Delay(1000);
 800262a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800262e:	f001 f947 	bl	80038c0 <HAL_Delay>

	RED_LED_BLINK(2);
 8002632:	2300      	movs	r3, #0
 8002634:	71fb      	strb	r3, [r7, #7]
 8002636:	e014      	b.n	8002662 <main+0x6a>
 8002638:	2201      	movs	r2, #1
 800263a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800263e:	4862      	ldr	r0, [pc, #392]	; (80027c8 <main+0x1d0>)
 8002640:	f001 fde2 	bl	8004208 <HAL_GPIO_WritePin>
 8002644:	2096      	movs	r0, #150	; 0x96
 8002646:	f001 f93b 	bl	80038c0 <HAL_Delay>
 800264a:	2200      	movs	r2, #0
 800264c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002650:	485d      	ldr	r0, [pc, #372]	; (80027c8 <main+0x1d0>)
 8002652:	f001 fdd9 	bl	8004208 <HAL_GPIO_WritePin>
 8002656:	2096      	movs	r0, #150	; 0x96
 8002658:	f001 f932 	bl	80038c0 <HAL_Delay>
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	3301      	adds	r3, #1
 8002660:	71fb      	strb	r3, [r7, #7]
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d9e7      	bls.n	8002638 <main+0x40>
	HAL_Delay(500);
 8002668:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800266c:	f001 f928 	bl	80038c0 <HAL_Delay>
	HUAN_IMU_Init();
 8002670:	f000 fbde 	bl	8002e30 <HUAN_IMU_Init>

	RED_LED_BLINK(3);
 8002674:	2300      	movs	r3, #0
 8002676:	71bb      	strb	r3, [r7, #6]
 8002678:	e014      	b.n	80026a4 <main+0xac>
 800267a:	2201      	movs	r2, #1
 800267c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002680:	4851      	ldr	r0, [pc, #324]	; (80027c8 <main+0x1d0>)
 8002682:	f001 fdc1 	bl	8004208 <HAL_GPIO_WritePin>
 8002686:	2096      	movs	r0, #150	; 0x96
 8002688:	f001 f91a 	bl	80038c0 <HAL_Delay>
 800268c:	2200      	movs	r2, #0
 800268e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002692:	484d      	ldr	r0, [pc, #308]	; (80027c8 <main+0x1d0>)
 8002694:	f001 fdb8 	bl	8004208 <HAL_GPIO_WritePin>
 8002698:	2096      	movs	r0, #150	; 0x96
 800269a:	f001 f911 	bl	80038c0 <HAL_Delay>
 800269e:	79bb      	ldrb	r3, [r7, #6]
 80026a0:	3301      	adds	r3, #1
 80026a2:	71bb      	strb	r3, [r7, #6]
 80026a4:	79bb      	ldrb	r3, [r7, #6]
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d9e7      	bls.n	800267a <main+0x82>
	HAL_Delay(500);
 80026aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026ae:	f001 f907 	bl	80038c0 <HAL_Delay>
	HUAN_ZIGBEE_Init();
 80026b2:	f000 fbcb 	bl	8002e4c <HUAN_ZIGBEE_Init>

	RED_LED_BLINK(4);
 80026b6:	2300      	movs	r3, #0
 80026b8:	717b      	strb	r3, [r7, #5]
 80026ba:	e014      	b.n	80026e6 <main+0xee>
 80026bc:	2201      	movs	r2, #1
 80026be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026c2:	4841      	ldr	r0, [pc, #260]	; (80027c8 <main+0x1d0>)
 80026c4:	f001 fda0 	bl	8004208 <HAL_GPIO_WritePin>
 80026c8:	2096      	movs	r0, #150	; 0x96
 80026ca:	f001 f8f9 	bl	80038c0 <HAL_Delay>
 80026ce:	2200      	movs	r2, #0
 80026d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026d4:	483c      	ldr	r0, [pc, #240]	; (80027c8 <main+0x1d0>)
 80026d6:	f001 fd97 	bl	8004208 <HAL_GPIO_WritePin>
 80026da:	2096      	movs	r0, #150	; 0x96
 80026dc:	f001 f8f0 	bl	80038c0 <HAL_Delay>
 80026e0:	797b      	ldrb	r3, [r7, #5]
 80026e2:	3301      	adds	r3, #1
 80026e4:	717b      	strb	r3, [r7, #5]
 80026e6:	797b      	ldrb	r3, [r7, #5]
 80026e8:	2b03      	cmp	r3, #3
 80026ea:	d9e7      	bls.n	80026bc <main+0xc4>
	HAL_Delay(500);
 80026ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80026f0:	f001 f8e6 	bl	80038c0 <HAL_Delay>
	ssd1306_Init();
 80026f4:	f000 fbf6 	bl	8002ee4 <ssd1306_Init>

	RED_LED_ON;
 80026f8:	2201      	movs	r2, #1
 80026fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80026fe:	4832      	ldr	r0, [pc, #200]	; (80027c8 <main+0x1d0>)
 8002700:	f001 fd82 	bl	8004208 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002708:	f001 f8da 	bl	80038c0 <HAL_Delay>
	huansic_jy62_resetAngle(&himu);		// reset Z angle
 800270c:	482f      	ldr	r0, [pc, #188]	; (80027cc <main+0x1d4>)
 800270e:	f7fe fd45 	bl	800119c <huansic_jy62_resetAngle>
	HAL_Delay(1000);
 8002712:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002716:	f001 f8d3 	bl	80038c0 <HAL_Delay>
	RED_LED_OFF;
 800271a:	2200      	movs	r2, #0
 800271c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002720:	4829      	ldr	r0, [pc, #164]	; (80027c8 <main+0x1d0>)
 8002722:	f001 fd71 	bl	8004208 <HAL_GPIO_WritePin>

	RED_LED_BLINK(5);
 8002726:	2300      	movs	r3, #0
 8002728:	713b      	strb	r3, [r7, #4]
 800272a:	e014      	b.n	8002756 <main+0x15e>
 800272c:	2201      	movs	r2, #1
 800272e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002732:	4825      	ldr	r0, [pc, #148]	; (80027c8 <main+0x1d0>)
 8002734:	f001 fd68 	bl	8004208 <HAL_GPIO_WritePin>
 8002738:	2096      	movs	r0, #150	; 0x96
 800273a:	f001 f8c1 	bl	80038c0 <HAL_Delay>
 800273e:	2200      	movs	r2, #0
 8002740:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002744:	4820      	ldr	r0, [pc, #128]	; (80027c8 <main+0x1d0>)
 8002746:	f001 fd5f 	bl	8004208 <HAL_GPIO_WritePin>
 800274a:	2096      	movs	r0, #150	; 0x96
 800274c:	f001 f8b8 	bl	80038c0 <HAL_Delay>
 8002750:	793b      	ldrb	r3, [r7, #4]
 8002752:	3301      	adds	r3, #1
 8002754:	713b      	strb	r3, [r7, #4]
 8002756:	793b      	ldrb	r3, [r7, #4]
 8002758:	2b04      	cmp	r3, #4
 800275a:	d9e7      	bls.n	800272c <main+0x134>
	HAL_Delay(500);
 800275c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002760:	f001 f8ae 	bl	80038c0 <HAL_Delay>
	HUAN_MOTOR_LEFT_Init();
 8002764:	f000 fb04 	bl	8002d70 <HUAN_MOTOR_LEFT_Init>
	HUAN_MOTOR_RIGHT_Init();
 8002768:	f000 fb32 	bl	8002dd0 <HUAN_MOTOR_RIGHT_Init>
	HAL_TIM_Base_Start_IT(&htim1);		// for PID
 800276c:	4818      	ldr	r0, [pc, #96]	; (80027d0 <main+0x1d8>)
 800276e:	f002 fe41 	bl	80053f4 <HAL_TIM_Base_Start_IT>

	HAL_Delay(1000);
 8002772:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002776:	f001 f8a3 	bl	80038c0 <HAL_Delay>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		while(!gameStatus){		// if the game is not running
 800277a:	bf00      	nop
 800277c:	4b15      	ldr	r3, [pc, #84]	; (80027d4 <main+0x1dc>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0fb      	beq.n	800277c <main+0x184>

		}

		while (gameStage == 0) {		// pre-match
 8002784:	e003      	b.n	800278e <main+0x196>
			if (!gameStatus)	// if the game stopped
 8002786:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <main+0x1dc>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <main+0x1a0>
		while (gameStage == 0) {		// pre-match
 800278e:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <main+0x1e0>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f7      	beq.n	8002786 <main+0x18e>
 8002796:	e005      	b.n	80027a4 <main+0x1ac>
				break;
 8002798:	bf00      	nop
			// do some initialization

			// find angle offset
		}

		while (gameStage == 1){			// first-half
 800279a:	e003      	b.n	80027a4 <main+0x1ac>
			if (!gameStatus)	// if the game stopped
 800279c:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <main+0x1dc>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <main+0x1b6>
		while (gameStage == 1){			// first-half
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <main+0x1e0>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d0f7      	beq.n	800279c <main+0x1a4>
 80027ac:	e005      	b.n	80027ba <main+0x1c2>
				break;
 80027ae:	bf00      	nop

		}

		while (gameStage == 2){			// second-half
 80027b0:	e003      	b.n	80027ba <main+0x1c2>
			if (!gameStatus)	// if the game stopped
 80027b2:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <main+0x1dc>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d004      	beq.n	80027c4 <main+0x1cc>
		while (gameStage == 2){			// second-half
 80027ba:	4b07      	ldr	r3, [pc, #28]	; (80027d8 <main+0x1e0>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d0f7      	beq.n	80027b2 <main+0x1ba>
 80027c2:	e7da      	b.n	800277a <main+0x182>
				break;
 80027c4:	bf00      	nop
		while(!gameStatus){		// if the game is not running
 80027c6:	e7d8      	b.n	800277a <main+0x182>
 80027c8:	40010c00 	.word	0x40010c00
 80027cc:	20000a98 	.word	0x20000a98
 80027d0:	200007f0 	.word	0x200007f0
 80027d4:	20000b5d 	.word	0x20000b5d
 80027d8:	20000b5c 	.word	0x20000b5c

080027dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b090      	sub	sp, #64	; 0x40
 80027e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80027e2:	f107 0318 	add.w	r3, r7, #24
 80027e6:	2228      	movs	r2, #40	; 0x28
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f004 fa16 	bl	8006c1c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80027f0:	1d3b      	adds	r3, r7, #4
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]
 80027fc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027fe:	2301      	movs	r3, #1
 8002800:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002802:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002806:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002808:	2300      	movs	r3, #0
 800280a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800280c:	2301      	movs	r3, #1
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002810:	2302      	movs	r3, #2
 8002812:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002818:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800281a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800281e:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002820:	f107 0318 	add.w	r3, r7, #24
 8002824:	4618      	mov	r0, r3
 8002826:	f002 f97b 	bl	8004b20 <HAL_RCC_OscConfig>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <SystemClock_Config+0x58>
			{
		Error_Handler();
 8002830:	f000 fb1a 	bl	8002e68 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002834:	230f      	movs	r3, #15
 8002836:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002838:	2302      	movs	r3, #2
 800283a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002840:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002844:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002846:	2300      	movs	r3, #0
 8002848:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	2102      	movs	r1, #2
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fbe8 	bl	8005024 <HAL_RCC_ClockConfig>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <SystemClock_Config+0x82>
			{
		Error_Handler();
 800285a:	f000 fb05 	bl	8002e68 <Error_Handler>
	}
}
 800285e:	bf00      	nop
 8002860:	3740      	adds	r7, #64	; 0x40
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <MX_I2C1_Init+0x50>)
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <MX_I2C1_Init+0x54>)
 8002870:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <MX_I2C1_Init+0x50>)
 8002874:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <MX_I2C1_Init+0x58>)
 8002876:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002878:	4b0f      	ldr	r3, [pc, #60]	; (80028b8 <MX_I2C1_Init+0x50>)
 800287a:	2200      	movs	r2, #0
 800287c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <MX_I2C1_Init+0x50>)
 8002880:	2200      	movs	r2, #0
 8002882:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002884:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <MX_I2C1_Init+0x50>)
 8002886:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800288a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800288c:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <MX_I2C1_Init+0x50>)
 800288e:	2200      	movs	r2, #0
 8002890:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <MX_I2C1_Init+0x50>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002898:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <MX_I2C1_Init+0x50>)
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800289e:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <MX_I2C1_Init+0x50>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028a4:	4804      	ldr	r0, [pc, #16]	; (80028b8 <MX_I2C1_Init+0x50>)
 80028a6:	f001 fce1 	bl	800426c <HAL_I2C_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <MX_I2C1_Init+0x4c>
			{
		Error_Handler();
 80028b0:	f000 fada 	bl	8002e68 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	2000079c 	.word	0x2000079c
 80028bc:	40005400 	.word	0x40005400
 80028c0:	000186a0 	.word	0x000186a0

080028c4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80028ca:	f107 0308 	add.w	r3, r7, #8
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80028d8:	463b      	mov	r3, r7
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]
 80028de:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80028e0:	4b1e      	ldr	r3, [pc, #120]	; (800295c <MX_TIM1_Init+0x98>)
 80028e2:	4a1f      	ldr	r2, [pc, #124]	; (8002960 <MX_TIM1_Init+0x9c>)
 80028e4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <MX_TIM1_Init+0x98>)
 80028e8:	2247      	movs	r2, #71	; 0x47
 80028ea:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <MX_TIM1_Init+0x98>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 50000 - 1;
 80028f2:	4b1a      	ldr	r3, [pc, #104]	; (800295c <MX_TIM1_Init+0x98>)
 80028f4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80028f8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <MX_TIM1_Init+0x98>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002900:	4b16      	ldr	r3, [pc, #88]	; (800295c <MX_TIM1_Init+0x98>)
 8002902:	2200      	movs	r2, #0
 8002904:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <MX_TIM1_Init+0x98>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800290c:	4813      	ldr	r0, [pc, #76]	; (800295c <MX_TIM1_Init+0x98>)
 800290e:	f002 fd21 	bl	8005354 <HAL_TIM_Base_Init>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <MX_TIM1_Init+0x58>
			{
		Error_Handler();
 8002918:	f000 faa6 	bl	8002e68 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800291c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002920:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002922:	f107 0308 	add.w	r3, r7, #8
 8002926:	4619      	mov	r1, r3
 8002928:	480c      	ldr	r0, [pc, #48]	; (800295c <MX_TIM1_Init+0x98>)
 800292a:	f003 f9a5 	bl	8005c78 <HAL_TIM_ConfigClockSource>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_TIM1_Init+0x74>
			{
		Error_Handler();
 8002934:	f000 fa98 	bl	8002e68 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002938:	2300      	movs	r3, #0
 800293a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002940:	463b      	mov	r3, r7
 8002942:	4619      	mov	r1, r3
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <MX_TIM1_Init+0x98>)
 8002946:	f003 fd2d 	bl	80063a4 <HAL_TIMEx_MasterConfigSynchronization>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_TIM1_Init+0x90>
			{
		Error_Handler();
 8002950:	f000 fa8a 	bl	8002e68 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8002954:	bf00      	nop
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	200007f0 	.word	0x200007f0
 8002960:	40012c00 	.word	0x40012c00

08002964 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	2224      	movs	r2, #36	; 0x24
 8002970:	2100      	movs	r1, #0
 8002972:	4618      	mov	r0, r3
 8002974:	f004 f952 	bl	8006c1c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002980:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <MX_TIM2_Init+0xa4>)
 8002982:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002986:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002988:	4b1f      	ldr	r3, [pc, #124]	; (8002a08 <MX_TIM2_Init+0xa4>)
 800298a:	2200      	movs	r2, #0
 800298c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298e:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <MX_TIM2_Init+0xa4>)
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <MX_TIM2_Init+0xa4>)
 8002996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800299a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800299c:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <MX_TIM2_Init+0xa4>)
 800299e:	2200      	movs	r2, #0
 80029a0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029a2:	4b19      	ldr	r3, [pc, #100]	; (8002a08 <MX_TIM2_Init+0xa4>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029a8:	2303      	movs	r3, #3
 80029aa:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029ac:	2300      	movs	r3, #0
 80029ae:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029b0:	2301      	movs	r3, #1
 80029b2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029b4:	2300      	movs	r3, #0
 80029b6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029bc:	2300      	movs	r3, #0
 80029be:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80029c0:	2301      	movs	r3, #1
 80029c2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80029cc:	f107 030c 	add.w	r3, r7, #12
 80029d0:	4619      	mov	r1, r3
 80029d2:	480d      	ldr	r0, [pc, #52]	; (8002a08 <MX_TIM2_Init+0xa4>)
 80029d4:	f002 fe5a 	bl	800568c <HAL_TIM_Encoder_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_TIM2_Init+0x7e>
			{
		Error_Handler();
 80029de:	f000 fa43 	bl	8002e68 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029ea:	1d3b      	adds	r3, r7, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	4806      	ldr	r0, [pc, #24]	; (8002a08 <MX_TIM2_Init+0xa4>)
 80029f0:	f003 fcd8 	bl	80063a4 <HAL_TIMEx_MasterConfigSynchronization>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <MX_TIM2_Init+0x9a>
			{
		Error_Handler();
 80029fa:	f000 fa35 	bl	8002e68 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80029fe:	bf00      	nop
 8002a00:	3730      	adds	r7, #48	; 0x30
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000838 	.word	0x20000838

08002a0c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08e      	sub	sp, #56	; 0x38
 8002a10:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002a12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]
 8002a1a:	605a      	str	r2, [r3, #4]
 8002a1c:	609a      	str	r2, [r3, #8]
 8002a1e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002a20:	f107 0320 	add.w	r3, r7, #32
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
 8002a36:	611a      	str	r2, [r3, #16]
 8002a38:	615a      	str	r2, [r3, #20]
 8002a3a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002a3c:	4b3d      	ldr	r3, [pc, #244]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002a3e:	4a3e      	ldr	r2, [pc, #248]	; (8002b38 <MX_TIM3_Init+0x12c>)
 8002a40:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8002a42:	4b3c      	ldr	r3, [pc, #240]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a48:	4b3a      	ldr	r3, [pc, #232]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 72 * 40 - 1;
 8002a4e:	4b39      	ldr	r3, [pc, #228]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002a50:	f640 323f 	movw	r2, #2879	; 0xb3f
 8002a54:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a56:	4b37      	ldr	r3, [pc, #220]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a5c:	4b35      	ldr	r3, [pc, #212]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a62:	4834      	ldr	r0, [pc, #208]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002a64:	f002 fc76 	bl	8005354 <HAL_TIM_Base_Init>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <MX_TIM3_Init+0x66>
			{
		Error_Handler();
 8002a6e:	f000 f9fb 	bl	8002e68 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a76:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	482d      	ldr	r0, [pc, #180]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002a80:	f003 f8fa 	bl	8005c78 <HAL_TIM_ConfigClockSource>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM3_Init+0x82>
			{
		Error_Handler();
 8002a8a:	f000 f9ed 	bl	8002e68 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a8e:	4829      	ldr	r0, [pc, #164]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002a90:	f002 fd02 	bl	8005498 <HAL_TIM_PWM_Init>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d001      	beq.n	8002a9e <MX_TIM3_Init+0x92>
			{
		Error_Handler();
 8002a9a:	f000 f9e5 	bl	8002e68 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aa6:	f107 0320 	add.w	r3, r7, #32
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4821      	ldr	r0, [pc, #132]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002aae:	f003 fc79 	bl	80063a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <MX_TIM3_Init+0xb0>
			{
		Error_Handler();
 8002ab8:	f000 f9d6 	bl	8002e68 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002abc:	2360      	movs	r3, #96	; 0x60
 8002abe:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	2200      	movs	r2, #0
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4818      	ldr	r0, [pc, #96]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002ad4:	f003 f812 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <MX_TIM3_Init+0xd6>
			{
		Error_Handler();
 8002ade:	f000 f9c3 	bl	8002e68 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ae2:	1d3b      	adds	r3, r7, #4
 8002ae4:	2204      	movs	r2, #4
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4812      	ldr	r0, [pc, #72]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002aea:	f003 f807 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_TIM3_Init+0xec>
			{
		Error_Handler();
 8002af4:	f000 f9b8 	bl	8002e68 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002af8:	1d3b      	adds	r3, r7, #4
 8002afa:	2208      	movs	r2, #8
 8002afc:	4619      	mov	r1, r3
 8002afe:	480d      	ldr	r0, [pc, #52]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002b00:	f002 fffc 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <MX_TIM3_Init+0x102>
			{
		Error_Handler();
 8002b0a:	f000 f9ad 	bl	8002e68 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	220c      	movs	r2, #12
 8002b12:	4619      	mov	r1, r3
 8002b14:	4807      	ldr	r0, [pc, #28]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002b16:	f002 fff1 	bl	8005afc <HAL_TIM_PWM_ConfigChannel>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_TIM3_Init+0x118>
			{
		Error_Handler();
 8002b20:	f000 f9a2 	bl	8002e68 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002b24:	4803      	ldr	r0, [pc, #12]	; (8002b34 <MX_TIM3_Init+0x128>)
 8002b26:	f000 fbe9 	bl	80032fc <HAL_TIM_MspPostInit>

}
 8002b2a:	bf00      	nop
 8002b2c:	3738      	adds	r7, #56	; 0x38
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000880 	.word	0x20000880
 8002b38:	40000400 	.word	0x40000400

08002b3c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08c      	sub	sp, #48	; 0x30
 8002b40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002b42:	f107 030c 	add.w	r3, r7, #12
 8002b46:	2224      	movs	r2, #36	; 0x24
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 f866 	bl	8006c1c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002b58:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <MX_TIM4_Init+0xa0>)
 8002b5a:	4a21      	ldr	r2, [pc, #132]	; (8002be0 <MX_TIM4_Init+0xa4>)
 8002b5c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002b5e:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <MX_TIM4_Init+0xa0>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b64:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <MX_TIM4_Init+0xa0>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002b6a:	4b1c      	ldr	r3, [pc, #112]	; (8002bdc <MX_TIM4_Init+0xa0>)
 8002b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b70:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b72:	4b1a      	ldr	r3, [pc, #104]	; (8002bdc <MX_TIM4_Init+0xa0>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b78:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <MX_TIM4_Init+0xa0>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8002b82:	2302      	movs	r3, #2
 8002b84:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b86:	2301      	movs	r3, #1
 8002b88:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002b92:	2300      	movs	r3, #0
 8002b94:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b96:	2301      	movs	r3, #1
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002ba2:	f107 030c 	add.w	r3, r7, #12
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	480c      	ldr	r0, [pc, #48]	; (8002bdc <MX_TIM4_Init+0xa0>)
 8002baa:	f002 fd6f 	bl	800568c <HAL_TIM_Encoder_Init>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_TIM4_Init+0x7c>
			{
		Error_Handler();
 8002bb4:	f000 f958 	bl	8002e68 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	4805      	ldr	r0, [pc, #20]	; (8002bdc <MX_TIM4_Init+0xa0>)
 8002bc6:	f003 fbed 	bl	80063a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <MX_TIM4_Init+0x98>
			{
		Error_Handler();
 8002bd0:	f000 f94a 	bl	8002e68 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8002bd4:	bf00      	nop
 8002bd6:	3730      	adds	r7, #48	; 0x30
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	200008c8 	.word	0x200008c8
 8002be0:	40000800 	.word	0x40000800

08002be4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002be8:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002bea:	4a12      	ldr	r2, [pc, #72]	; (8002c34 <MX_USART1_UART_Init+0x50>)
 8002bec:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bf4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf6:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002bfc:	4b0c      	ldr	r3, [pc, #48]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8002c02:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002c08:	4b09      	ldr	r3, [pc, #36]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c0e:	4b08      	ldr	r3, [pc, #32]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c1a:	4805      	ldr	r0, [pc, #20]	; (8002c30 <MX_USART1_UART_Init+0x4c>)
 8002c1c:	f003 fc32 	bl	8006484 <HAL_UART_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_USART1_UART_Init+0x46>
			{
		Error_Handler();
 8002c26:	f000 f91f 	bl	8002e68 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000910 	.word	0x20000910
 8002c34:	40013800 	.word	0x40013800

08002c38 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002c3c:	4b11      	ldr	r3, [pc, #68]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c3e:	4a12      	ldr	r2, [pc, #72]	; (8002c88 <MX_USART2_UART_Init+0x50>)
 8002c40:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002c42:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c48:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002c56:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c58:	2200      	movs	r2, #0
 8002c5a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002c5c:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c5e:	220c      	movs	r2, #12
 8002c60:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c62:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c6e:	4805      	ldr	r0, [pc, #20]	; (8002c84 <MX_USART2_UART_Init+0x4c>)
 8002c70:	f003 fc08 	bl	8006484 <HAL_UART_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_USART2_UART_Init+0x46>
			{
		Error_Handler();
 8002c7a:	f000 f8f5 	bl	8002e68 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000954 	.word	0x20000954
 8002c88:	40004400 	.word	0x40004400

08002c8c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <MX_DMA_Init+0x48>)
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	4a0f      	ldr	r2, [pc, #60]	; (8002cd4 <MX_DMA_Init+0x48>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6153      	str	r3, [r2, #20]
 8002c9e:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <MX_DMA_Init+0x48>)
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	607b      	str	r3, [r7, #4]
 8002ca8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8002caa:	2200      	movs	r2, #0
 8002cac:	2102      	movs	r1, #2
 8002cae:	200f      	movs	r0, #15
 8002cb0:	f000 ff01 	bl	8003ab6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002cb4:	200f      	movs	r0, #15
 8002cb6:	f000 ff1a 	bl	8003aee <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 3, 0);
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2103      	movs	r1, #3
 8002cbe:	2010      	movs	r0, #16
 8002cc0:	f000 fef9 	bl	8003ab6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002cc4:	2010      	movs	r0, #16
 8002cc6:	f000 ff12 	bl	8003aee <HAL_NVIC_EnableIRQ>

}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002cde:	f107 0310 	add.w	r3, r7, #16
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002cec:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <MX_GPIO_Init+0x90>)
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	4a1d      	ldr	r2, [pc, #116]	; (8002d68 <MX_GPIO_Init+0x90>)
 8002cf2:	f043 0320 	orr.w	r3, r3, #32
 8002cf6:	6193      	str	r3, [r2, #24]
 8002cf8:	4b1b      	ldr	r3, [pc, #108]	; (8002d68 <MX_GPIO_Init+0x90>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	f003 0320 	and.w	r3, r3, #32
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002d04:	4b18      	ldr	r3, [pc, #96]	; (8002d68 <MX_GPIO_Init+0x90>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	4a17      	ldr	r2, [pc, #92]	; (8002d68 <MX_GPIO_Init+0x90>)
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	6193      	str	r3, [r2, #24]
 8002d10:	4b15      	ldr	r3, [pc, #84]	; (8002d68 <MX_GPIO_Init+0x90>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	60bb      	str	r3, [r7, #8]
 8002d1a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1c:	4b12      	ldr	r3, [pc, #72]	; (8002d68 <MX_GPIO_Init+0x90>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	4a11      	ldr	r2, [pc, #68]	; (8002d68 <MX_GPIO_Init+0x90>)
 8002d22:	f043 0308 	orr.w	r3, r3, #8
 8002d26:	6193      	str	r3, [r2, #24]
 8002d28:	4b0f      	ldr	r3, [pc, #60]	; (8002d68 <MX_GPIO_Init+0x90>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	607b      	str	r3, [r7, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Buzzer_Pin | LED_R_Pin | LED_G_Pin | LED_B_Pin, GPIO_PIN_RESET);
 8002d34:	2200      	movs	r2, #0
 8002d36:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002d3a:	480c      	ldr	r0, [pc, #48]	; (8002d6c <MX_GPIO_Init+0x94>)
 8002d3c:	f001 fa64 	bl	8004208 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Buzzer_Pin LED_R_Pin LED_G_Pin LED_B_Pin */
	GPIO_InitStruct.Pin = Buzzer_Pin | LED_R_Pin | LED_G_Pin | LED_B_Pin;
 8002d40:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002d44:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d46:	2301      	movs	r3, #1
 8002d48:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d52:	f107 0310 	add.w	r3, r7, #16
 8002d56:	4619      	mov	r1, r3
 8002d58:	4804      	ldr	r0, [pc, #16]	; (8002d6c <MX_GPIO_Init+0x94>)
 8002d5a:	f001 f8d1 	bl	8003f00 <HAL_GPIO_Init>

}
 8002d5e:	bf00      	nop
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40010c00 	.word	0x40010c00

08002d70 <HUAN_MOTOR_LEFT_Init>:

/* USER CODE BEGIN 4 */
static void HUAN_MOTOR_LEFT_Init(void) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
	hmotor_left.counter = &htim4;
 8002d74:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d76:	4a11      	ldr	r2, [pc, #68]	; (8002dbc <HUAN_MOTOR_LEFT_Init+0x4c>)
 8002d78:	601a      	str	r2, [r3, #0]
	hmotor_left.dt = 0.05;
 8002d7a:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d7c:	4a10      	ldr	r2, [pc, #64]	; (8002dc0 <HUAN_MOTOR_LEFT_Init+0x50>)
 8002d7e:	621a      	str	r2, [r3, #32]
	hmotor_left.posTimer = &htim3;
 8002d80:	4b0d      	ldr	r3, [pc, #52]	; (8002db8 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d82:	4a10      	ldr	r2, [pc, #64]	; (8002dc4 <HUAN_MOTOR_LEFT_Init+0x54>)
 8002d84:	605a      	str	r2, [r3, #4]
	hmotor_left.pos_channel = TIM_CHANNEL_4;
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d88:	220c      	movs	r2, #12
 8002d8a:	60da      	str	r2, [r3, #12]
	hmotor_left.negTimer = &htim3;
 8002d8c:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d8e:	4a0d      	ldr	r2, [pc, #52]	; (8002dc4 <HUAN_MOTOR_LEFT_Init+0x54>)
 8002d90:	609a      	str	r2, [r3, #8]
	hmotor_left.neg_channel = TIM_CHANNEL_3;
 8002d92:	4b09      	ldr	r3, [pc, #36]	; (8002db8 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d94:	2208      	movs	r2, #8
 8002d96:	611a      	str	r2, [r3, #16]
	hmotor_left.kp = 0.00005;
 8002d98:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002d9a:	4a0b      	ldr	r2, [pc, #44]	; (8002dc8 <HUAN_MOTOR_LEFT_Init+0x58>)
 8002d9c:	615a      	str	r2, [r3, #20]
	hmotor_left.ki = 0.0001;
 8002d9e:	4b06      	ldr	r3, [pc, #24]	; (8002db8 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002da0:	4a0a      	ldr	r2, [pc, #40]	; (8002dcc <HUAN_MOTOR_LEFT_Init+0x5c>)
 8002da2:	619a      	str	r2, [r3, #24]
	hmotor_left.kd = 0.0000;
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&hmotor_left);
 8002dac:	4802      	ldr	r0, [pc, #8]	; (8002db8 <HUAN_MOTOR_LEFT_Init+0x48>)
 8002dae:	f7fe fc9b 	bl	80016e8 <huansic_motor_init>
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000a20 	.word	0x20000a20
 8002dbc:	200008c8 	.word	0x200008c8
 8002dc0:	3d4ccccd 	.word	0x3d4ccccd
 8002dc4:	20000880 	.word	0x20000880
 8002dc8:	3851b717 	.word	0x3851b717
 8002dcc:	38d1b717 	.word	0x38d1b717

08002dd0 <HUAN_MOTOR_RIGHT_Init>:

static void HUAN_MOTOR_RIGHT_Init(void) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0
	hmotor_right.counter = &htim2;
 8002dd4:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002dd6:	4a11      	ldr	r2, [pc, #68]	; (8002e1c <HUAN_MOTOR_RIGHT_Init+0x4c>)
 8002dd8:	601a      	str	r2, [r3, #0]
	hmotor_right.dt = 0.05;
 8002dda:	4b0f      	ldr	r3, [pc, #60]	; (8002e18 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002ddc:	4a10      	ldr	r2, [pc, #64]	; (8002e20 <HUAN_MOTOR_RIGHT_Init+0x50>)
 8002dde:	621a      	str	r2, [r3, #32]
	hmotor_right.posTimer = &htim3;
 8002de0:	4b0d      	ldr	r3, [pc, #52]	; (8002e18 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002de2:	4a10      	ldr	r2, [pc, #64]	; (8002e24 <HUAN_MOTOR_RIGHT_Init+0x54>)
 8002de4:	605a      	str	r2, [r3, #4]
	hmotor_right.pos_channel = TIM_CHANNEL_1;
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	60da      	str	r2, [r3, #12]
	hmotor_right.negTimer = &htim3;
 8002dec:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002dee:	4a0d      	ldr	r2, [pc, #52]	; (8002e24 <HUAN_MOTOR_RIGHT_Init+0x54>)
 8002df0:	609a      	str	r2, [r3, #8]
	hmotor_right.neg_channel = TIM_CHANNEL_2;
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002df4:	2204      	movs	r2, #4
 8002df6:	611a      	str	r2, [r3, #16]
	hmotor_right.kp = 0.00005;
 8002df8:	4b07      	ldr	r3, [pc, #28]	; (8002e18 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002dfa:	4a0b      	ldr	r2, [pc, #44]	; (8002e28 <HUAN_MOTOR_RIGHT_Init+0x58>)
 8002dfc:	615a      	str	r2, [r3, #20]
	hmotor_right.ki = 0.0001;
 8002dfe:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002e00:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <HUAN_MOTOR_RIGHT_Init+0x5c>)
 8002e02:	619a      	str	r2, [r3, #24]
	hmotor_right.kd = 0.0000;
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&hmotor_right);
 8002e0c:	4802      	ldr	r0, [pc, #8]	; (8002e18 <HUAN_MOTOR_RIGHT_Init+0x48>)
 8002e0e:	f7fe fc6b 	bl	80016e8 <huansic_motor_init>
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000a5c 	.word	0x20000a5c
 8002e1c:	20000838 	.word	0x20000838
 8002e20:	3d4ccccd 	.word	0x3d4ccccd
 8002e24:	20000880 	.word	0x20000880
 8002e28:	3851b717 	.word	0x3851b717
 8002e2c:	38d1b717 	.word	0x38d1b717

08002e30 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
	himu.uartPort = &huart1;
 8002e34:	4b03      	ldr	r3, [pc, #12]	; (8002e44 <HUAN_IMU_Init+0x14>)
 8002e36:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <HUAN_IMU_Init+0x18>)
 8002e38:	601a      	str	r2, [r3, #0]
	huansic_jy62_init(&himu);
 8002e3a:	4802      	ldr	r0, [pc, #8]	; (8002e44 <HUAN_IMU_Init+0x14>)
 8002e3c:	f7fe f968 	bl	8001110 <huansic_jy62_init>
}
 8002e40:	bf00      	nop
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	20000a98 	.word	0x20000a98
 8002e48:	20000910 	.word	0x20000910

08002e4c <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
	hxb.uartPort = &huart2;
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HUAN_ZIGBEE_Init+0x14>)
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <HUAN_ZIGBEE_Init+0x18>)
 8002e54:	601a      	str	r2, [r3, #0]
	huansic_xb_init(&hxb);
 8002e56:	4802      	ldr	r0, [pc, #8]	; (8002e60 <HUAN_ZIGBEE_Init+0x14>)
 8002e58:	f7fe fe38 	bl	8001acc <huansic_xb_init>
}
 8002e5c:	bf00      	nop
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000ad0 	.word	0x20000ad0
 8002e64:	20000954 	.word	0x20000954

08002e68 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e6c:	b672      	cpsid	i
}
 8002e6e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002e70:	e7fe      	b.n	8002e70 <Error_Handler+0x8>

08002e72 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002e72:	b480      	push	{r7}
 8002e74:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002e76:	bf00      	nop
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr
	...

08002e80 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af04      	add	r7, sp, #16
 8002e86:	4603      	mov	r3, r0
 8002e88:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8e:	9302      	str	r3, [sp, #8]
 8002e90:	2301      	movs	r3, #1
 8002e92:	9301      	str	r3, [sp, #4]
 8002e94:	1dfb      	adds	r3, r7, #7
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2301      	movs	r3, #1
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2178      	movs	r1, #120	; 0x78
 8002e9e:	4803      	ldr	r0, [pc, #12]	; (8002eac <ssd1306_WriteCommand+0x2c>)
 8002ea0:	f001 fb28 	bl	80044f4 <HAL_I2C_Mem_Write>
}
 8002ea4:	bf00      	nop
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	2000079c 	.word	0x2000079c

08002eb0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af04      	add	r7, sp, #16
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec2:	9202      	str	r2, [sp, #8]
 8002ec4:	9301      	str	r3, [sp, #4]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	2301      	movs	r3, #1
 8002ecc:	2240      	movs	r2, #64	; 0x40
 8002ece:	2178      	movs	r1, #120	; 0x78
 8002ed0:	4803      	ldr	r0, [pc, #12]	; (8002ee0 <ssd1306_WriteData+0x30>)
 8002ed2:	f001 fb0f 	bl	80044f4 <HAL_I2C_Mem_Write>
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	2000079c 	.word	0x2000079c

08002ee4 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002ee8:	f7ff ffc3 	bl	8002e72 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002eec:	2064      	movs	r0, #100	; 0x64
 8002eee:	f000 fce7 	bl	80038c0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f000 f8be 	bl	8003074 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002ef8:	2020      	movs	r0, #32
 8002efa:	f7ff ffc1 	bl	8002e80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7ff ffbe 	bl	8002e80 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002f04:	20b0      	movs	r0, #176	; 0xb0
 8002f06:	f7ff ffbb 	bl	8002e80 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002f0a:	20c8      	movs	r0, #200	; 0xc8
 8002f0c:	f7ff ffb8 	bl	8002e80 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002f10:	2000      	movs	r0, #0
 8002f12:	f7ff ffb5 	bl	8002e80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002f16:	2010      	movs	r0, #16
 8002f18:	f7ff ffb2 	bl	8002e80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002f1c:	2040      	movs	r0, #64	; 0x40
 8002f1e:	f7ff ffaf 	bl	8002e80 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002f22:	20ff      	movs	r0, #255	; 0xff
 8002f24:	f000 f892 	bl	800304c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002f28:	20a1      	movs	r0, #161	; 0xa1
 8002f2a:	f7ff ffa9 	bl	8002e80 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002f2e:	20a6      	movs	r0, #166	; 0xa6
 8002f30:	f7ff ffa6 	bl	8002e80 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002f34:	20a8      	movs	r0, #168	; 0xa8
 8002f36:	f7ff ffa3 	bl	8002e80 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8002f3a:	201f      	movs	r0, #31
 8002f3c:	f7ff ffa0 	bl	8002e80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002f40:	20a4      	movs	r0, #164	; 0xa4
 8002f42:	f7ff ff9d 	bl	8002e80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002f46:	20d3      	movs	r0, #211	; 0xd3
 8002f48:	f7ff ff9a 	bl	8002e80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002f4c:	2000      	movs	r0, #0
 8002f4e:	f7ff ff97 	bl	8002e80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002f52:	20d5      	movs	r0, #213	; 0xd5
 8002f54:	f7ff ff94 	bl	8002e80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002f58:	20f0      	movs	r0, #240	; 0xf0
 8002f5a:	f7ff ff91 	bl	8002e80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002f5e:	20d9      	movs	r0, #217	; 0xd9
 8002f60:	f7ff ff8e 	bl	8002e80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002f64:	2022      	movs	r0, #34	; 0x22
 8002f66:	f7ff ff8b 	bl	8002e80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002f6a:	20da      	movs	r0, #218	; 0xda
 8002f6c:	f7ff ff88 	bl	8002e80 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8002f70:	2002      	movs	r0, #2
 8002f72:	f7ff ff85 	bl	8002e80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002f76:	20db      	movs	r0, #219	; 0xdb
 8002f78:	f7ff ff82 	bl	8002e80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002f7c:	2020      	movs	r0, #32
 8002f7e:	f7ff ff7f 	bl	8002e80 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002f82:	208d      	movs	r0, #141	; 0x8d
 8002f84:	f7ff ff7c 	bl	8002e80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002f88:	2014      	movs	r0, #20
 8002f8a:	f7ff ff79 	bl	8002e80 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002f8e:	2001      	movs	r0, #1
 8002f90:	f000 f870 	bl	8003074 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002f94:	2000      	movs	r0, #0
 8002f96:	f000 f80f 	bl	8002fb8 <ssd1306_Fill>

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002f9a:	f000 f82f 	bl	8002ffc <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <ssd1306_Init+0xd0>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002fa4:	4b03      	ldr	r3, [pc, #12]	; (8002fb4 <ssd1306_Init+0xd0>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002faa:	4b02      	ldr	r3, [pc, #8]	; (8002fb4 <ssd1306_Init+0xd0>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	711a      	strb	r2, [r3, #4]
}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20000dcc 	.word	0x20000dcc

08002fb8 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	e00d      	b.n	8002fe4 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <ssd1306_Fill+0x1a>
 8002fce:	2100      	movs	r1, #0
 8002fd0:	e000      	b.n	8002fd4 <ssd1306_Fill+0x1c>
 8002fd2:	21ff      	movs	r1, #255	; 0xff
 8002fd4:	4a08      	ldr	r2, [pc, #32]	; (8002ff8 <ssd1306_Fill+0x40>)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4413      	add	r3, r2
 8002fda:	460a      	mov	r2, r1
 8002fdc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fea:	d3ed      	bcc.n	8002fc8 <ssd1306_Fill+0x10>
    }
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	20000bcc 	.word	0x20000bcc

08002ffc <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003002:	2300      	movs	r3, #0
 8003004:	71fb      	strb	r3, [r7, #7]
 8003006:	e016      	b.n	8003036 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	3b50      	subs	r3, #80	; 0x50
 800300c:	b2db      	uxtb	r3, r3
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff ff36 	bl	8002e80 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003014:	2000      	movs	r0, #0
 8003016:	f7ff ff33 	bl	8002e80 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800301a:	2010      	movs	r0, #16
 800301c:	f7ff ff30 	bl	8002e80 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	01db      	lsls	r3, r3, #7
 8003024:	4a08      	ldr	r2, [pc, #32]	; (8003048 <ssd1306_UpdateScreen+0x4c>)
 8003026:	4413      	add	r3, r2
 8003028:	2180      	movs	r1, #128	; 0x80
 800302a:	4618      	mov	r0, r3
 800302c:	f7ff ff40 	bl	8002eb0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	3301      	adds	r3, #1
 8003034:	71fb      	strb	r3, [r7, #7]
 8003036:	79fb      	ldrb	r3, [r7, #7]
 8003038:	2b03      	cmp	r3, #3
 800303a:	d9e5      	bls.n	8003008 <ssd1306_UpdateScreen+0xc>
    }
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000bcc 	.word	0x20000bcc

0800304c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003056:	2381      	movs	r3, #129	; 0x81
 8003058:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800305a:	7bfb      	ldrb	r3, [r7, #15]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff0f 	bl	8002e80 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003062:	79fb      	ldrb	r3, [r7, #7]
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff ff0b 	bl	8002e80 <ssd1306_WriteCommand>
}
 800306a:	bf00      	nop
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
	...

08003074 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800307e:	79fb      	ldrb	r3, [r7, #7]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003084:	23af      	movs	r3, #175	; 0xaf
 8003086:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003088:	4b08      	ldr	r3, [pc, #32]	; (80030ac <ssd1306_SetDisplayOn+0x38>)
 800308a:	2201      	movs	r2, #1
 800308c:	715a      	strb	r2, [r3, #5]
 800308e:	e004      	b.n	800309a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003090:	23ae      	movs	r3, #174	; 0xae
 8003092:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003094:	4b05      	ldr	r3, [pc, #20]	; (80030ac <ssd1306_SetDisplayOn+0x38>)
 8003096:	2200      	movs	r2, #0
 8003098:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800309a:	7bfb      	ldrb	r3, [r7, #15]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff feef 	bl	8002e80 <ssd1306_WriteCommand>
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000dcc 	.word	0x20000dcc

080030b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80030b6:	4b15      	ldr	r3, [pc, #84]	; (800310c <HAL_MspInit+0x5c>)
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	4a14      	ldr	r2, [pc, #80]	; (800310c <HAL_MspInit+0x5c>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6193      	str	r3, [r2, #24]
 80030c2:	4b12      	ldr	r3, [pc, #72]	; (800310c <HAL_MspInit+0x5c>)
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	60bb      	str	r3, [r7, #8]
 80030cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ce:	4b0f      	ldr	r3, [pc, #60]	; (800310c <HAL_MspInit+0x5c>)
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	4a0e      	ldr	r2, [pc, #56]	; (800310c <HAL_MspInit+0x5c>)
 80030d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d8:	61d3      	str	r3, [r2, #28]
 80030da:	4b0c      	ldr	r3, [pc, #48]	; (800310c <HAL_MspInit+0x5c>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e2:	607b      	str	r3, [r7, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_MspInit+0x60>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	4a04      	ldr	r2, [pc, #16]	; (8003110 <HAL_MspInit+0x60>)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	40021000 	.word	0x40021000
 8003110:	40010000 	.word	0x40010000

08003114 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	; 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <HAL_I2C_MspInit+0x90>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d132      	bne.n	800319a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003134:	4b1c      	ldr	r3, [pc, #112]	; (80031a8 <HAL_I2C_MspInit+0x94>)
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	4a1b      	ldr	r2, [pc, #108]	; (80031a8 <HAL_I2C_MspInit+0x94>)
 800313a:	f043 0308 	orr.w	r3, r3, #8
 800313e:	6193      	str	r3, [r2, #24]
 8003140:	4b19      	ldr	r3, [pc, #100]	; (80031a8 <HAL_I2C_MspInit+0x94>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	f003 0308 	and.w	r3, r3, #8
 8003148:	613b      	str	r3, [r7, #16]
 800314a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800314c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003152:	2312      	movs	r3, #18
 8003154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003156:	2303      	movs	r3, #3
 8003158:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	4619      	mov	r1, r3
 8003160:	4812      	ldr	r0, [pc, #72]	; (80031ac <HAL_I2C_MspInit+0x98>)
 8003162:	f000 fecd 	bl	8003f00 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8003166:	4b12      	ldr	r3, [pc, #72]	; (80031b0 <HAL_I2C_MspInit+0x9c>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	627b      	str	r3, [r7, #36]	; 0x24
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	f043 0302 	orr.w	r3, r3, #2
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
 800317c:	4a0c      	ldr	r2, [pc, #48]	; (80031b0 <HAL_I2C_MspInit+0x9c>)
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_I2C_MspInit+0x94>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <HAL_I2C_MspInit+0x94>)
 8003188:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800318c:	61d3      	str	r3, [r2, #28]
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_I2C_MspInit+0x94>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003196:	60fb      	str	r3, [r7, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800319a:	bf00      	nop
 800319c:	3728      	adds	r7, #40	; 0x28
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	40005400 	.word	0x40005400
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40010c00 	.word	0x40010c00
 80031b0:	40010000 	.word	0x40010000

080031b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a16      	ldr	r2, [pc, #88]	; (800321c <HAL_TIM_Base_MspInit+0x68>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d114      	bne.n	80031f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031c6:	4b16      	ldr	r3, [pc, #88]	; (8003220 <HAL_TIM_Base_MspInit+0x6c>)
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	4a15      	ldr	r2, [pc, #84]	; (8003220 <HAL_TIM_Base_MspInit+0x6c>)
 80031cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031d0:	6193      	str	r3, [r2, #24]
 80031d2:	4b13      	ldr	r3, [pc, #76]	; (8003220 <HAL_TIM_Base_MspInit+0x6c>)
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 1, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	2101      	movs	r1, #1
 80031e2:	2019      	movs	r0, #25
 80031e4:	f000 fc67 	bl	8003ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80031e8:	2019      	movs	r0, #25
 80031ea:	f000 fc80 	bl	8003aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80031ee:	e010      	b.n	8003212 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0b      	ldr	r2, [pc, #44]	; (8003224 <HAL_TIM_Base_MspInit+0x70>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10b      	bne.n	8003212 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031fa:	4b09      	ldr	r3, [pc, #36]	; (8003220 <HAL_TIM_Base_MspInit+0x6c>)
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	4a08      	ldr	r2, [pc, #32]	; (8003220 <HAL_TIM_Base_MspInit+0x6c>)
 8003200:	f043 0302 	orr.w	r3, r3, #2
 8003204:	61d3      	str	r3, [r2, #28]
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_TIM_Base_MspInit+0x6c>)
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40012c00 	.word	0x40012c00
 8003220:	40021000 	.word	0x40021000
 8003224:	40000400 	.word	0x40000400

08003228 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08a      	sub	sp, #40	; 0x28
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	f107 0318 	add.w	r3, r7, #24
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003246:	d124      	bne.n	8003292 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003248:	4b28      	ldr	r3, [pc, #160]	; (80032ec <HAL_TIM_Encoder_MspInit+0xc4>)
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <HAL_TIM_Encoder_MspInit+0xc4>)
 800324e:	f043 0301 	orr.w	r3, r3, #1
 8003252:	61d3      	str	r3, [r2, #28]
 8003254:	4b25      	ldr	r3, [pc, #148]	; (80032ec <HAL_TIM_Encoder_MspInit+0xc4>)
 8003256:	69db      	ldr	r3, [r3, #28]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003260:	4b22      	ldr	r3, [pc, #136]	; (80032ec <HAL_TIM_Encoder_MspInit+0xc4>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	4a21      	ldr	r2, [pc, #132]	; (80032ec <HAL_TIM_Encoder_MspInit+0xc4>)
 8003266:	f043 0304 	orr.w	r3, r3, #4
 800326a:	6193      	str	r3, [r2, #24]
 800326c:	4b1f      	ldr	r3, [pc, #124]	; (80032ec <HAL_TIM_Encoder_MspInit+0xc4>)
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003278:	2303      	movs	r3, #3
 800327a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003280:	2300      	movs	r3, #0
 8003282:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003284:	f107 0318 	add.w	r3, r7, #24
 8003288:	4619      	mov	r1, r3
 800328a:	4819      	ldr	r0, [pc, #100]	; (80032f0 <HAL_TIM_Encoder_MspInit+0xc8>)
 800328c:	f000 fe38 	bl	8003f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003290:	e028      	b.n	80032e4 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM4)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a17      	ldr	r2, [pc, #92]	; (80032f4 <HAL_TIM_Encoder_MspInit+0xcc>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d123      	bne.n	80032e4 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800329c:	4b13      	ldr	r3, [pc, #76]	; (80032ec <HAL_TIM_Encoder_MspInit+0xc4>)
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	4a12      	ldr	r2, [pc, #72]	; (80032ec <HAL_TIM_Encoder_MspInit+0xc4>)
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	61d3      	str	r3, [r2, #28]
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_TIM_Encoder_MspInit+0xc4>)
 80032aa:	69db      	ldr	r3, [r3, #28]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032b4:	4b0d      	ldr	r3, [pc, #52]	; (80032ec <HAL_TIM_Encoder_MspInit+0xc4>)
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	4a0c      	ldr	r2, [pc, #48]	; (80032ec <HAL_TIM_Encoder_MspInit+0xc4>)
 80032ba:	f043 0308 	orr.w	r3, r3, #8
 80032be:	6193      	str	r3, [r2, #24]
 80032c0:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <HAL_TIM_Encoder_MspInit+0xc4>)
 80032c2:	699b      	ldr	r3, [r3, #24]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032cc:	23c0      	movs	r3, #192	; 0xc0
 80032ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d8:	f107 0318 	add.w	r3, r7, #24
 80032dc:	4619      	mov	r1, r3
 80032de:	4806      	ldr	r0, [pc, #24]	; (80032f8 <HAL_TIM_Encoder_MspInit+0xd0>)
 80032e0:	f000 fe0e 	bl	8003f00 <HAL_GPIO_Init>
}
 80032e4:	bf00      	nop
 80032e6:	3728      	adds	r7, #40	; 0x28
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021000 	.word	0x40021000
 80032f0:	40010800 	.word	0x40010800
 80032f4:	40000800 	.word	0x40000800
 80032f8:	40010c00 	.word	0x40010c00

080032fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003304:	f107 0310 	add.w	r3, r7, #16
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	605a      	str	r2, [r3, #4]
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a1b      	ldr	r2, [pc, #108]	; (8003384 <HAL_TIM_MspPostInit+0x88>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d12f      	bne.n	800337c <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331c:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <HAL_TIM_MspPostInit+0x8c>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	4a19      	ldr	r2, [pc, #100]	; (8003388 <HAL_TIM_MspPostInit+0x8c>)
 8003322:	f043 0304 	orr.w	r3, r3, #4
 8003326:	6193      	str	r3, [r2, #24]
 8003328:	4b17      	ldr	r3, [pc, #92]	; (8003388 <HAL_TIM_MspPostInit+0x8c>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_TIM_MspPostInit+0x8c>)
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	4a13      	ldr	r2, [pc, #76]	; (8003388 <HAL_TIM_MspPostInit+0x8c>)
 800333a:	f043 0308 	orr.w	r3, r3, #8
 800333e:	6193      	str	r3, [r2, #24]
 8003340:	4b11      	ldr	r3, [pc, #68]	; (8003388 <HAL_TIM_MspPostInit+0x8c>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800334c:	23c0      	movs	r3, #192	; 0xc0
 800334e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003354:	2302      	movs	r3, #2
 8003356:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003358:	f107 0310 	add.w	r3, r7, #16
 800335c:	4619      	mov	r1, r3
 800335e:	480b      	ldr	r0, [pc, #44]	; (800338c <HAL_TIM_MspPostInit+0x90>)
 8003360:	f000 fdce 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003364:	2303      	movs	r3, #3
 8003366:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336c:	2302      	movs	r3, #2
 800336e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003370:	f107 0310 	add.w	r3, r7, #16
 8003374:	4619      	mov	r1, r3
 8003376:	4806      	ldr	r0, [pc, #24]	; (8003390 <HAL_TIM_MspPostInit+0x94>)
 8003378:	f000 fdc2 	bl	8003f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800337c:	bf00      	nop
 800337e:	3720      	adds	r7, #32
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40000400 	.word	0x40000400
 8003388:	40021000 	.word	0x40021000
 800338c:	40010800 	.word	0x40010800
 8003390:	40010c00 	.word	0x40010c00

08003394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b08a      	sub	sp, #40	; 0x28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339c:	f107 0318 	add.w	r3, r7, #24
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a5d      	ldr	r2, [pc, #372]	; (8003524 <HAL_UART_MspInit+0x190>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d158      	bne.n	8003466 <HAL_UART_MspInit+0xd2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033b4:	4b5c      	ldr	r3, [pc, #368]	; (8003528 <HAL_UART_MspInit+0x194>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	4a5b      	ldr	r2, [pc, #364]	; (8003528 <HAL_UART_MspInit+0x194>)
 80033ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033be:	6193      	str	r3, [r2, #24]
 80033c0:	4b59      	ldr	r3, [pc, #356]	; (8003528 <HAL_UART_MspInit+0x194>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033cc:	4b56      	ldr	r3, [pc, #344]	; (8003528 <HAL_UART_MspInit+0x194>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	4a55      	ldr	r2, [pc, #340]	; (8003528 <HAL_UART_MspInit+0x194>)
 80033d2:	f043 0304 	orr.w	r3, r3, #4
 80033d6:	6193      	str	r3, [r2, #24]
 80033d8:	4b53      	ldr	r3, [pc, #332]	; (8003528 <HAL_UART_MspInit+0x194>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = JY_TX_Pin;
 80033e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	2302      	movs	r3, #2
 80033ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033ee:	2303      	movs	r3, #3
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 80033f2:	f107 0318 	add.w	r3, r7, #24
 80033f6:	4619      	mov	r1, r3
 80033f8:	484c      	ldr	r0, [pc, #304]	; (800352c <HAL_UART_MspInit+0x198>)
 80033fa:	f000 fd81 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JY_RX_Pin;
 80033fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003408:	2300      	movs	r3, #0
 800340a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 800340c:	f107 0318 	add.w	r3, r7, #24
 8003410:	4619      	mov	r1, r3
 8003412:	4846      	ldr	r0, [pc, #280]	; (800352c <HAL_UART_MspInit+0x198>)
 8003414:	f000 fd74 	bl	8003f00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003418:	4b45      	ldr	r3, [pc, #276]	; (8003530 <HAL_UART_MspInit+0x19c>)
 800341a:	4a46      	ldr	r2, [pc, #280]	; (8003534 <HAL_UART_MspInit+0x1a0>)
 800341c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800341e:	4b44      	ldr	r3, [pc, #272]	; (8003530 <HAL_UART_MspInit+0x19c>)
 8003420:	2200      	movs	r2, #0
 8003422:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003424:	4b42      	ldr	r3, [pc, #264]	; (8003530 <HAL_UART_MspInit+0x19c>)
 8003426:	2200      	movs	r2, #0
 8003428:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800342a:	4b41      	ldr	r3, [pc, #260]	; (8003530 <HAL_UART_MspInit+0x19c>)
 800342c:	2280      	movs	r2, #128	; 0x80
 800342e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003430:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <HAL_UART_MspInit+0x19c>)
 8003432:	2200      	movs	r2, #0
 8003434:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003436:	4b3e      	ldr	r3, [pc, #248]	; (8003530 <HAL_UART_MspInit+0x19c>)
 8003438:	2200      	movs	r2, #0
 800343a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800343c:	4b3c      	ldr	r3, [pc, #240]	; (8003530 <HAL_UART_MspInit+0x19c>)
 800343e:	2200      	movs	r2, #0
 8003440:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003442:	4b3b      	ldr	r3, [pc, #236]	; (8003530 <HAL_UART_MspInit+0x19c>)
 8003444:	2200      	movs	r2, #0
 8003446:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003448:	4839      	ldr	r0, [pc, #228]	; (8003530 <HAL_UART_MspInit+0x19c>)
 800344a:	f000 fb6b 	bl	8003b24 <HAL_DMA_Init>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003454:	f7ff fd08 	bl	8002e68 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a35      	ldr	r2, [pc, #212]	; (8003530 <HAL_UART_MspInit+0x19c>)
 800345c:	639a      	str	r2, [r3, #56]	; 0x38
 800345e:	4a34      	ldr	r2, [pc, #208]	; (8003530 <HAL_UART_MspInit+0x19c>)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003464:	e05a      	b.n	800351c <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART2)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a33      	ldr	r2, [pc, #204]	; (8003538 <HAL_UART_MspInit+0x1a4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d155      	bne.n	800351c <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_UART_MspInit+0x194>)
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	4a2c      	ldr	r2, [pc, #176]	; (8003528 <HAL_UART_MspInit+0x194>)
 8003476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347a:	61d3      	str	r3, [r2, #28]
 800347c:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <HAL_UART_MspInit+0x194>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003488:	4b27      	ldr	r3, [pc, #156]	; (8003528 <HAL_UART_MspInit+0x194>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	4a26      	ldr	r2, [pc, #152]	; (8003528 <HAL_UART_MspInit+0x194>)
 800348e:	f043 0304 	orr.w	r3, r3, #4
 8003492:	6193      	str	r3, [r2, #24]
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <HAL_UART_MspInit+0x194>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	60bb      	str	r3, [r7, #8]
 800349e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XB_TX_Pin;
 80034a0:	2304      	movs	r3, #4
 80034a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034a4:	2302      	movs	r3, #2
 80034a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034a8:	2303      	movs	r3, #3
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 80034ac:	f107 0318 	add.w	r3, r7, #24
 80034b0:	4619      	mov	r1, r3
 80034b2:	481e      	ldr	r0, [pc, #120]	; (800352c <HAL_UART_MspInit+0x198>)
 80034b4:	f000 fd24 	bl	8003f00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = XB_RX_Pin;
 80034b8:	2308      	movs	r3, #8
 80034ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 80034c4:	f107 0318 	add.w	r3, r7, #24
 80034c8:	4619      	mov	r1, r3
 80034ca:	4818      	ldr	r0, [pc, #96]	; (800352c <HAL_UART_MspInit+0x198>)
 80034cc:	f000 fd18 	bl	8003f00 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80034d0:	4b1a      	ldr	r3, [pc, #104]	; (800353c <HAL_UART_MspInit+0x1a8>)
 80034d2:	4a1b      	ldr	r2, [pc, #108]	; (8003540 <HAL_UART_MspInit+0x1ac>)
 80034d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034d6:	4b19      	ldr	r3, [pc, #100]	; (800353c <HAL_UART_MspInit+0x1a8>)
 80034d8:	2200      	movs	r2, #0
 80034da:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034dc:	4b17      	ldr	r3, [pc, #92]	; (800353c <HAL_UART_MspInit+0x1a8>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034e2:	4b16      	ldr	r3, [pc, #88]	; (800353c <HAL_UART_MspInit+0x1a8>)
 80034e4:	2280      	movs	r2, #128	; 0x80
 80034e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034e8:	4b14      	ldr	r3, [pc, #80]	; (800353c <HAL_UART_MspInit+0x1a8>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034ee:	4b13      	ldr	r3, [pc, #76]	; (800353c <HAL_UART_MspInit+0x1a8>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80034f4:	4b11      	ldr	r3, [pc, #68]	; (800353c <HAL_UART_MspInit+0x1a8>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034fa:	4b10      	ldr	r3, [pc, #64]	; (800353c <HAL_UART_MspInit+0x1a8>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003500:	480e      	ldr	r0, [pc, #56]	; (800353c <HAL_UART_MspInit+0x1a8>)
 8003502:	f000 fb0f 	bl	8003b24 <HAL_DMA_Init>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 800350c:	f7ff fcac 	bl	8002e68 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a0a      	ldr	r2, [pc, #40]	; (800353c <HAL_UART_MspInit+0x1a8>)
 8003514:	639a      	str	r2, [r3, #56]	; 0x38
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_UART_MspInit+0x1a8>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800351c:	bf00      	nop
 800351e:	3728      	adds	r7, #40	; 0x28
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40013800 	.word	0x40013800
 8003528:	40021000 	.word	0x40021000
 800352c:	40010800 	.word	0x40010800
 8003530:	20000998 	.word	0x20000998
 8003534:	40020058 	.word	0x40020058
 8003538:	40004400 	.word	0x40004400
 800353c:	200009dc 	.word	0x200009dc
 8003540:	4002006c 	.word	0x4002006c

08003544 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8003548:	e7fe      	b.n	8003548 <NMI_Handler+0x4>

0800354a <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 800354a:	b480      	push	{r7}
 800354c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1)
 800354e:	e7fe      	b.n	800354e <HardFault_Handler+0x4>

08003550 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1)
 8003554:	e7fe      	b.n	8003554 <MemManage_Handler+0x4>

08003556 <BusFault_Handler>:

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1)
 800355a:	e7fe      	b.n	800355a <BusFault_Handler+0x4>

0800355c <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 800355c:	b480      	push	{r7}
 800355e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1)
 8003560:	e7fe      	b.n	8003560 <UsageFault_Handler+0x4>

08003562 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8003562:	b480      	push	{r7}
 8003564:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr

0800356e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800356e:	b480      	push	{r7}
 8003570:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr

0800357a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800357a:	b480      	push	{r7}
 800357c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 800358a:	f000 f97d 	bl	8003888 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800358e:	bf00      	nop
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <DMA1_Channel5_IRQHandler>:

/**
 * @brief This function handles DMA1 channel5 global interrupt.
 */
void DMA1_Channel5_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	huansic_jy62_decodePackage(&himu);
 8003598:	4805      	ldr	r0, [pc, #20]	; (80035b0 <DMA1_Channel5_IRQHandler+0x1c>)
 800359a:	f7fd fe11 	bl	80011c0 <huansic_jy62_decodePackage>
	/* USER CODE END DMA1_Channel5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800359e:	4805      	ldr	r0, [pc, #20]	; (80035b4 <DMA1_Channel5_IRQHandler+0x20>)
 80035a0:	f000 fb7a 	bl	8003c98 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
	huansic_jy62_setDMA(&himu);
 80035a4:	4802      	ldr	r0, [pc, #8]	; (80035b0 <DMA1_Channel5_IRQHandler+0x1c>)
 80035a6:	f7fe f815 	bl	80015d4 <huansic_jy62_setDMA>
	/* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000a98 	.word	0x20000a98
 80035b4:	20000998 	.word	0x20000998

080035b8 <DMA1_Channel6_IRQHandler>:

/**
 * @brief This function handles DMA1 channel6 global interrupt.
 */
void DMA1_Channel6_IRQHandler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if (hxb.nextPackageID == 0x00) {
 80035bc:	4b0c      	ldr	r3, [pc, #48]	; (80035f0 <DMA1_Channel6_IRQHandler+0x38>)
 80035be:	7a1b      	ldrb	r3, [r3, #8]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d108      	bne.n	80035d6 <DMA1_Channel6_IRQHandler+0x1e>
		huansic_xb_decodeHeader(&hxb);
 80035c4:	480a      	ldr	r0, [pc, #40]	; (80035f0 <DMA1_Channel6_IRQHandler+0x38>)
 80035c6:	f7fe fa97 	bl	8001af8 <huansic_xb_decodeHeader>
		HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 80035ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035ce:	4809      	ldr	r0, [pc, #36]	; (80035f4 <DMA1_Channel6_IRQHandler+0x3c>)
 80035d0:	f000 fe32 	bl	8004238 <HAL_GPIO_TogglePin>
 80035d4:	e007      	b.n	80035e6 <DMA1_Channel6_IRQHandler+0x2e>
	} else {
		huansic_xb_decodeBody(&hxb);
 80035d6:	4806      	ldr	r0, [pc, #24]	; (80035f0 <DMA1_Channel6_IRQHandler+0x38>)
 80035d8:	f7fe fad6 	bl	8001b88 <huansic_xb_decodeBody>
		HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 80035dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035e0:	4804      	ldr	r0, [pc, #16]	; (80035f4 <DMA1_Channel6_IRQHandler+0x3c>)
 80035e2:	f000 fe29 	bl	8004238 <HAL_GPIO_TogglePin>
	}
	/* USER CODE END DMA1_Channel6_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80035e6:	4804      	ldr	r0, [pc, #16]	; (80035f8 <DMA1_Channel6_IRQHandler+0x40>)
 80035e8:	f000 fb56 	bl	8003c98 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

	/* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000ad0 	.word	0x20000ad0
 80035f4:	40010c00 	.word	0x40010c00
 80035f8:	200009dc 	.word	0x200009dc

080035fc <TIM1_UP_IRQHandler>:

/**
 * @brief This function handles TIM1 update interrupt.
 */
void TIM1_UP_IRQHandler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_IRQn 0 */
	huansic_motor_pid(&hmotor_left);
 8003600:	4805      	ldr	r0, [pc, #20]	; (8003618 <TIM1_UP_IRQHandler+0x1c>)
 8003602:	f7fe f92f 	bl	8001864 <huansic_motor_pid>
	huansic_motor_pid(&hmotor_right);
 8003606:	4805      	ldr	r0, [pc, #20]	; (800361c <TIM1_UP_IRQHandler+0x20>)
 8003608:	f7fe f92c 	bl	8001864 <huansic_motor_pid>
	/* USER CODE END TIM1_UP_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 800360c:	4804      	ldr	r0, [pc, #16]	; (8003620 <TIM1_UP_IRQHandler+0x24>)
 800360e:	f002 f96d 	bl	80058ec <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_IRQn 1 */

	/* USER CODE END TIM1_UP_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000a20 	.word	0x20000a20
 800361c:	20000a5c 	.word	0x20000a5c
 8003620:	200007f0 	.word	0x200007f0

08003624 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
	return 1;
 8003628:	2301      	movs	r3, #1
}
 800362a:	4618      	mov	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	bc80      	pop	{r7}
 8003630:	4770      	bx	lr

08003632 <_kill>:

int _kill(int pid, int sig)
{
 8003632:	b580      	push	{r7, lr}
 8003634:	b082      	sub	sp, #8
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800363c:	f003 faa4 	bl	8006b88 <__errno>
 8003640:	4603      	mov	r3, r0
 8003642:	2216      	movs	r2, #22
 8003644:	601a      	str	r2, [r3, #0]
	return -1;
 8003646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800364a:	4618      	mov	r0, r3
 800364c:	3708      	adds	r7, #8
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <_exit>:

void _exit (int status)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800365a:	f04f 31ff 	mov.w	r1, #4294967295
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff ffe7 	bl	8003632 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003664:	e7fe      	b.n	8003664 <_exit+0x12>

08003666 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	e00a      	b.n	800368e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003678:	f3af 8000 	nop.w
 800367c:	4601      	mov	r1, r0
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	60ba      	str	r2, [r7, #8]
 8003684:	b2ca      	uxtb	r2, r1
 8003686:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	3301      	adds	r3, #1
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	429a      	cmp	r2, r3
 8003694:	dbf0      	blt.n	8003678 <_read+0x12>
	}

return len;
 8003696:	687b      	ldr	r3, [r7, #4]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036ac:	2300      	movs	r3, #0
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e009      	b.n	80036c6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	60ba      	str	r2, [r7, #8]
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	4618      	mov	r0, r3
 80036bc:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	3301      	adds	r3, #1
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	dbf1      	blt.n	80036b2 <_write+0x12>
	}
	return len;
 80036ce:	687b      	ldr	r3, [r7, #4]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <_close>:

int _close(int file)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
	return -1;
 80036e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr

080036ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036ee:	b480      	push	{r7}
 80036f0:	b083      	sub	sp, #12
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036fe:	605a      	str	r2, [r3, #4]
	return 0;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <_isatty>:

int _isatty(int file)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
	return 1;
 8003714:	2301      	movs	r3, #1
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr

08003720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003720:	b480      	push	{r7}
 8003722:	b085      	sub	sp, #20
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
	return 0;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	bc80      	pop	{r7}
 8003736:	4770      	bx	lr

08003738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003740:	4a14      	ldr	r2, [pc, #80]	; (8003794 <_sbrk+0x5c>)
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <_sbrk+0x60>)
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800374c:	4b13      	ldr	r3, [pc, #76]	; (800379c <_sbrk+0x64>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003754:	4b11      	ldr	r3, [pc, #68]	; (800379c <_sbrk+0x64>)
 8003756:	4a12      	ldr	r2, [pc, #72]	; (80037a0 <_sbrk+0x68>)
 8003758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800375a:	4b10      	ldr	r3, [pc, #64]	; (800379c <_sbrk+0x64>)
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4413      	add	r3, r2
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	429a      	cmp	r2, r3
 8003766:	d207      	bcs.n	8003778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003768:	f003 fa0e 	bl	8006b88 <__errno>
 800376c:	4603      	mov	r3, r0
 800376e:	220c      	movs	r2, #12
 8003770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003772:	f04f 33ff 	mov.w	r3, #4294967295
 8003776:	e009      	b.n	800378c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003778:	4b08      	ldr	r3, [pc, #32]	; (800379c <_sbrk+0x64>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800377e:	4b07      	ldr	r3, [pc, #28]	; (800379c <_sbrk+0x64>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	4a05      	ldr	r2, [pc, #20]	; (800379c <_sbrk+0x64>)
 8003788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800378a:	68fb      	ldr	r3, [r7, #12]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20005000 	.word	0x20005000
 8003798:	00000400 	.word	0x00000400
 800379c:	20000dd4 	.word	0x20000dd4
 80037a0:	20000df0 	.word	0x20000df0

080037a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037a8:	bf00      	nop
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037b0:	480c      	ldr	r0, [pc, #48]	; (80037e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80037b2:	490d      	ldr	r1, [pc, #52]	; (80037e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80037b4:	4a0d      	ldr	r2, [pc, #52]	; (80037ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80037b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037b8:	e002      	b.n	80037c0 <LoopCopyDataInit>

080037ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037be:	3304      	adds	r3, #4

080037c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037c4:	d3f9      	bcc.n	80037ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037c6:	4a0a      	ldr	r2, [pc, #40]	; (80037f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037c8:	4c0a      	ldr	r4, [pc, #40]	; (80037f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80037ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037cc:	e001      	b.n	80037d2 <LoopFillZerobss>

080037ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037d0:	3204      	adds	r2, #4

080037d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037d4:	d3fb      	bcc.n	80037ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037d6:	f7ff ffe5 	bl	80037a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037da:	f003 f9ed 	bl	8006bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037de:	f7fe ff0b 	bl	80025f8 <main>
  bx lr
 80037e2:	4770      	bx	lr
  ldr r0, =_sdata
 80037e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037e8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80037ec:	08009aa8 	.word	0x08009aa8
  ldr r2, =_sbss
 80037f0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80037f4:	20000dec 	.word	0x20000dec

080037f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037f8:	e7fe      	b.n	80037f8 <ADC1_2_IRQHandler>
	...

080037fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <HAL_Init+0x28>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a07      	ldr	r2, [pc, #28]	; (8003824 <HAL_Init+0x28>)
 8003806:	f043 0310 	orr.w	r3, r3, #16
 800380a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800380c:	2003      	movs	r0, #3
 800380e:	f000 f947 	bl	8003aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003812:	2000      	movs	r0, #0
 8003814:	f000 f808 	bl	8003828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003818:	f7ff fc4a 	bl	80030b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	40022000 	.word	0x40022000

08003828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003830:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_InitTick+0x54>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_InitTick+0x58>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	4619      	mov	r1, r3
 800383a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800383e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003842:	fbb2 f3f3 	udiv	r3, r2, r3
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f95f 	bl	8003b0a <HAL_SYSTICK_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e00e      	b.n	8003874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b0f      	cmp	r3, #15
 800385a:	d80a      	bhi.n	8003872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800385c:	2200      	movs	r2, #0
 800385e:	6879      	ldr	r1, [r7, #4]
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	f000 f927 	bl	8003ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003868:	4a06      	ldr	r2, [pc, #24]	; (8003884 <HAL_InitTick+0x5c>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e000      	b.n	8003874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000004 	.word	0x20000004
 8003880:	2000000c 	.word	0x2000000c
 8003884:	20000008 	.word	0x20000008

08003888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800388c:	4b05      	ldr	r3, [pc, #20]	; (80038a4 <HAL_IncTick+0x1c>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_IncTick+0x20>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4413      	add	r3, r2
 8003898:	4a03      	ldr	r2, [pc, #12]	; (80038a8 <HAL_IncTick+0x20>)
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr
 80038a4:	2000000c 	.word	0x2000000c
 80038a8:	20000dd8 	.word	0x20000dd8

080038ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  return uwTick;
 80038b0:	4b02      	ldr	r3, [pc, #8]	; (80038bc <HAL_GetTick+0x10>)
 80038b2:	681b      	ldr	r3, [r3, #0]
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	20000dd8 	.word	0x20000dd8

080038c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038c8:	f7ff fff0 	bl	80038ac <HAL_GetTick>
 80038cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d8:	d005      	beq.n	80038e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038da:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <HAL_Delay+0x44>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4413      	add	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038e6:	bf00      	nop
 80038e8:	f7ff ffe0 	bl	80038ac <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d8f7      	bhi.n	80038e8 <HAL_Delay+0x28>
  {
  }
}
 80038f8:	bf00      	nop
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	2000000c 	.word	0x2000000c

08003908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <__NVIC_SetPriorityGrouping+0x44>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003924:	4013      	ands	r3, r2
 8003926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800393a:	4a04      	ldr	r2, [pc, #16]	; (800394c <__NVIC_SetPriorityGrouping+0x44>)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	60d3      	str	r3, [r2, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <__NVIC_GetPriorityGrouping+0x18>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	f003 0307 	and.w	r3, r3, #7
}
 800395e:	4618      	mov	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	bc80      	pop	{r7}
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	2b00      	cmp	r3, #0
 800397c:	db0b      	blt.n	8003996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	f003 021f 	and.w	r2, r3, #31
 8003984:	4906      	ldr	r1, [pc, #24]	; (80039a0 <__NVIC_EnableIRQ+0x34>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2001      	movs	r0, #1
 800398e:	fa00 f202 	lsl.w	r2, r0, r2
 8003992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	e000e100 	.word	0xe000e100

080039a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	4603      	mov	r3, r0
 80039ac:	6039      	str	r1, [r7, #0]
 80039ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	db0a      	blt.n	80039ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	490c      	ldr	r1, [pc, #48]	; (80039f0 <__NVIC_SetPriority+0x4c>)
 80039be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c2:	0112      	lsls	r2, r2, #4
 80039c4:	b2d2      	uxtb	r2, r2
 80039c6:	440b      	add	r3, r1
 80039c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039cc:	e00a      	b.n	80039e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	4908      	ldr	r1, [pc, #32]	; (80039f4 <__NVIC_SetPriority+0x50>)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	3b04      	subs	r3, #4
 80039dc:	0112      	lsls	r2, r2, #4
 80039de:	b2d2      	uxtb	r2, r2
 80039e0:	440b      	add	r3, r1
 80039e2:	761a      	strb	r2, [r3, #24]
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	e000e100 	.word	0xe000e100
 80039f4:	e000ed00 	.word	0xe000ed00

080039f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0307 	and.w	r3, r3, #7
 8003a0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	f1c3 0307 	rsb	r3, r3, #7
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	bf28      	it	cs
 8003a16:	2304      	movcs	r3, #4
 8003a18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	2b06      	cmp	r3, #6
 8003a20:	d902      	bls.n	8003a28 <NVIC_EncodePriority+0x30>
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3b03      	subs	r3, #3
 8003a26:	e000      	b.n	8003a2a <NVIC_EncodePriority+0x32>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43da      	mvns	r2, r3
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	401a      	ands	r2, r3
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a40:	f04f 31ff 	mov.w	r1, #4294967295
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	43d9      	mvns	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a50:	4313      	orrs	r3, r2
         );
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3724      	adds	r7, #36	; 0x24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a6c:	d301      	bcc.n	8003a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e00f      	b.n	8003a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a72:	4a0a      	ldr	r2, [pc, #40]	; (8003a9c <SysTick_Config+0x40>)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a7a:	210f      	movs	r1, #15
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a80:	f7ff ff90 	bl	80039a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a84:	4b05      	ldr	r3, [pc, #20]	; (8003a9c <SysTick_Config+0x40>)
 8003a86:	2200      	movs	r2, #0
 8003a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a8a:	4b04      	ldr	r3, [pc, #16]	; (8003a9c <SysTick_Config+0x40>)
 8003a8c:	2207      	movs	r2, #7
 8003a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	e000e010 	.word	0xe000e010

08003aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff ff2d 	bl	8003908 <__NVIC_SetPriorityGrouping>
}
 8003aae:	bf00      	nop
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b086      	sub	sp, #24
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	4603      	mov	r3, r0
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ac8:	f7ff ff42 	bl	8003950 <__NVIC_GetPriorityGrouping>
 8003acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	6978      	ldr	r0, [r7, #20]
 8003ad4:	f7ff ff90 	bl	80039f8 <NVIC_EncodePriority>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff ff5f 	bl	80039a4 <__NVIC_SetPriority>
}
 8003ae6:	bf00      	nop
 8003ae8:	3718      	adds	r7, #24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	4603      	mov	r3, r0
 8003af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff ff35 	bl	800396c <__NVIC_EnableIRQ>
}
 8003b02:	bf00      	nop
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f7ff ffa2 	bl	8003a5c <SysTick_Config>
 8003b18:	4603      	mov	r3, r0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3708      	adds	r7, #8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e043      	b.n	8003bc2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b22      	ldr	r3, [pc, #136]	; (8003bcc <HAL_DMA_Init+0xa8>)
 8003b42:	4413      	add	r3, r2
 8003b44:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <HAL_DMA_Init+0xac>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	009a      	lsls	r2, r3, #2
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1f      	ldr	r2, [pc, #124]	; (8003bd4 <HAL_DMA_Init+0xb0>)
 8003b56:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2202      	movs	r2, #2
 8003b5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003b6e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	bffdfff8 	.word	0xbffdfff8
 8003bd0:	cccccccd 	.word	0xcccccccd
 8003bd4:	40020000 	.word	0x40020000

08003bd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_DMA_Start_IT+0x20>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e04a      	b.n	8003c8e <HAL_DMA_Start_IT+0xb6>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d13a      	bne.n	8003c80 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f938 	bl	8003ea4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d008      	beq.n	8003c4e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 020e 	orr.w	r2, r2, #14
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e00f      	b.n	8003c6e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0204 	bic.w	r2, r2, #4
 8003c5c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 020a 	orr.w	r2, r2, #10
 8003c6c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0201 	orr.w	r2, r2, #1
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	e005      	b.n	8003c8c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
	...

08003c98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	2204      	movs	r2, #4
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d04f      	beq.n	8003d60 <HAL_DMA_IRQHandler+0xc8>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f003 0304 	and.w	r3, r3, #4
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d04a      	beq.n	8003d60 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0320 	and.w	r3, r3, #32
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d107      	bne.n	8003ce8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 0204 	bic.w	r2, r2, #4
 8003ce6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a66      	ldr	r2, [pc, #408]	; (8003e88 <HAL_DMA_IRQHandler+0x1f0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d029      	beq.n	8003d46 <HAL_DMA_IRQHandler+0xae>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a65      	ldr	r2, [pc, #404]	; (8003e8c <HAL_DMA_IRQHandler+0x1f4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d022      	beq.n	8003d42 <HAL_DMA_IRQHandler+0xaa>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a63      	ldr	r2, [pc, #396]	; (8003e90 <HAL_DMA_IRQHandler+0x1f8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d01a      	beq.n	8003d3c <HAL_DMA_IRQHandler+0xa4>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a62      	ldr	r2, [pc, #392]	; (8003e94 <HAL_DMA_IRQHandler+0x1fc>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d012      	beq.n	8003d36 <HAL_DMA_IRQHandler+0x9e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a60      	ldr	r2, [pc, #384]	; (8003e98 <HAL_DMA_IRQHandler+0x200>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d00a      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x98>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a5f      	ldr	r2, [pc, #380]	; (8003e9c <HAL_DMA_IRQHandler+0x204>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d102      	bne.n	8003d2a <HAL_DMA_IRQHandler+0x92>
 8003d24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d28:	e00e      	b.n	8003d48 <HAL_DMA_IRQHandler+0xb0>
 8003d2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003d2e:	e00b      	b.n	8003d48 <HAL_DMA_IRQHandler+0xb0>
 8003d30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d34:	e008      	b.n	8003d48 <HAL_DMA_IRQHandler+0xb0>
 8003d36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003d3a:	e005      	b.n	8003d48 <HAL_DMA_IRQHandler+0xb0>
 8003d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d40:	e002      	b.n	8003d48 <HAL_DMA_IRQHandler+0xb0>
 8003d42:	2340      	movs	r3, #64	; 0x40
 8003d44:	e000      	b.n	8003d48 <HAL_DMA_IRQHandler+0xb0>
 8003d46:	2304      	movs	r3, #4
 8003d48:	4a55      	ldr	r2, [pc, #340]	; (8003ea0 <HAL_DMA_IRQHandler+0x208>)
 8003d4a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8094 	beq.w	8003e7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003d5e:	e08e      	b.n	8003e7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	2202      	movs	r2, #2
 8003d66:	409a      	lsls	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d056      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x186>
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d051      	beq.n	8003e1e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f003 0320 	and.w	r3, r3, #32
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10b      	bne.n	8003da0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 020a 	bic.w	r2, r2, #10
 8003d96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a38      	ldr	r2, [pc, #224]	; (8003e88 <HAL_DMA_IRQHandler+0x1f0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d029      	beq.n	8003dfe <HAL_DMA_IRQHandler+0x166>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a37      	ldr	r2, [pc, #220]	; (8003e8c <HAL_DMA_IRQHandler+0x1f4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d022      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x162>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a35      	ldr	r2, [pc, #212]	; (8003e90 <HAL_DMA_IRQHandler+0x1f8>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01a      	beq.n	8003df4 <HAL_DMA_IRQHandler+0x15c>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a34      	ldr	r2, [pc, #208]	; (8003e94 <HAL_DMA_IRQHandler+0x1fc>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d012      	beq.n	8003dee <HAL_DMA_IRQHandler+0x156>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a32      	ldr	r2, [pc, #200]	; (8003e98 <HAL_DMA_IRQHandler+0x200>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d00a      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x150>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a31      	ldr	r2, [pc, #196]	; (8003e9c <HAL_DMA_IRQHandler+0x204>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d102      	bne.n	8003de2 <HAL_DMA_IRQHandler+0x14a>
 8003ddc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003de0:	e00e      	b.n	8003e00 <HAL_DMA_IRQHandler+0x168>
 8003de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003de6:	e00b      	b.n	8003e00 <HAL_DMA_IRQHandler+0x168>
 8003de8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003dec:	e008      	b.n	8003e00 <HAL_DMA_IRQHandler+0x168>
 8003dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003df2:	e005      	b.n	8003e00 <HAL_DMA_IRQHandler+0x168>
 8003df4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003df8:	e002      	b.n	8003e00 <HAL_DMA_IRQHandler+0x168>
 8003dfa:	2320      	movs	r3, #32
 8003dfc:	e000      	b.n	8003e00 <HAL_DMA_IRQHandler+0x168>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	4a27      	ldr	r2, [pc, #156]	; (8003ea0 <HAL_DMA_IRQHandler+0x208>)
 8003e02:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d034      	beq.n	8003e7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e1c:	e02f      	b.n	8003e7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2208      	movs	r2, #8
 8003e24:	409a      	lsls	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d028      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x1e8>
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d023      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f022 020e 	bic.w	r2, r2, #14
 8003e46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e50:	2101      	movs	r1, #1
 8003e52:	fa01 f202 	lsl.w	r2, r1, r2
 8003e56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d004      	beq.n	8003e80 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	4798      	blx	r3
    }
  }
  return;
 8003e7e:	bf00      	nop
 8003e80:	bf00      	nop
}
 8003e82:	3710      	adds	r7, #16
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40020008 	.word	0x40020008
 8003e8c:	4002001c 	.word	0x4002001c
 8003e90:	40020030 	.word	0x40020030
 8003e94:	40020044 	.word	0x40020044
 8003e98:	40020058 	.word	0x40020058
 8003e9c:	4002006c 	.word	0x4002006c
 8003ea0:	40020000 	.word	0x40020000

08003ea4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eba:	2101      	movs	r1, #1
 8003ebc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ec0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	2b10      	cmp	r3, #16
 8003ed0:	d108      	bne.n	8003ee4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ee2:	e007      	b.n	8003ef4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	60da      	str	r2, [r3, #12]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bc80      	pop	{r7}
 8003efc:	4770      	bx	lr
	...

08003f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b08b      	sub	sp, #44	; 0x2c
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f12:	e169      	b.n	80041e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003f14:	2201      	movs	r2, #1
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69fa      	ldr	r2, [r7, #28]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	f040 8158 	bne.w	80041e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4a9a      	ldr	r2, [pc, #616]	; (80041a0 <HAL_GPIO_Init+0x2a0>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d05e      	beq.n	8003ffa <HAL_GPIO_Init+0xfa>
 8003f3c:	4a98      	ldr	r2, [pc, #608]	; (80041a0 <HAL_GPIO_Init+0x2a0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d875      	bhi.n	800402e <HAL_GPIO_Init+0x12e>
 8003f42:	4a98      	ldr	r2, [pc, #608]	; (80041a4 <HAL_GPIO_Init+0x2a4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d058      	beq.n	8003ffa <HAL_GPIO_Init+0xfa>
 8003f48:	4a96      	ldr	r2, [pc, #600]	; (80041a4 <HAL_GPIO_Init+0x2a4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d86f      	bhi.n	800402e <HAL_GPIO_Init+0x12e>
 8003f4e:	4a96      	ldr	r2, [pc, #600]	; (80041a8 <HAL_GPIO_Init+0x2a8>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d052      	beq.n	8003ffa <HAL_GPIO_Init+0xfa>
 8003f54:	4a94      	ldr	r2, [pc, #592]	; (80041a8 <HAL_GPIO_Init+0x2a8>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d869      	bhi.n	800402e <HAL_GPIO_Init+0x12e>
 8003f5a:	4a94      	ldr	r2, [pc, #592]	; (80041ac <HAL_GPIO_Init+0x2ac>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d04c      	beq.n	8003ffa <HAL_GPIO_Init+0xfa>
 8003f60:	4a92      	ldr	r2, [pc, #584]	; (80041ac <HAL_GPIO_Init+0x2ac>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d863      	bhi.n	800402e <HAL_GPIO_Init+0x12e>
 8003f66:	4a92      	ldr	r2, [pc, #584]	; (80041b0 <HAL_GPIO_Init+0x2b0>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d046      	beq.n	8003ffa <HAL_GPIO_Init+0xfa>
 8003f6c:	4a90      	ldr	r2, [pc, #576]	; (80041b0 <HAL_GPIO_Init+0x2b0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d85d      	bhi.n	800402e <HAL_GPIO_Init+0x12e>
 8003f72:	2b12      	cmp	r3, #18
 8003f74:	d82a      	bhi.n	8003fcc <HAL_GPIO_Init+0xcc>
 8003f76:	2b12      	cmp	r3, #18
 8003f78:	d859      	bhi.n	800402e <HAL_GPIO_Init+0x12e>
 8003f7a:	a201      	add	r2, pc, #4	; (adr r2, 8003f80 <HAL_GPIO_Init+0x80>)
 8003f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f80:	08003ffb 	.word	0x08003ffb
 8003f84:	08003fd5 	.word	0x08003fd5
 8003f88:	08003fe7 	.word	0x08003fe7
 8003f8c:	08004029 	.word	0x08004029
 8003f90:	0800402f 	.word	0x0800402f
 8003f94:	0800402f 	.word	0x0800402f
 8003f98:	0800402f 	.word	0x0800402f
 8003f9c:	0800402f 	.word	0x0800402f
 8003fa0:	0800402f 	.word	0x0800402f
 8003fa4:	0800402f 	.word	0x0800402f
 8003fa8:	0800402f 	.word	0x0800402f
 8003fac:	0800402f 	.word	0x0800402f
 8003fb0:	0800402f 	.word	0x0800402f
 8003fb4:	0800402f 	.word	0x0800402f
 8003fb8:	0800402f 	.word	0x0800402f
 8003fbc:	0800402f 	.word	0x0800402f
 8003fc0:	0800402f 	.word	0x0800402f
 8003fc4:	08003fdd 	.word	0x08003fdd
 8003fc8:	08003ff1 	.word	0x08003ff1
 8003fcc:	4a79      	ldr	r2, [pc, #484]	; (80041b4 <HAL_GPIO_Init+0x2b4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d013      	beq.n	8003ffa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003fd2:	e02c      	b.n	800402e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	623b      	str	r3, [r7, #32]
          break;
 8003fda:	e029      	b.n	8004030 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	3304      	adds	r3, #4
 8003fe2:	623b      	str	r3, [r7, #32]
          break;
 8003fe4:	e024      	b.n	8004030 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	3308      	adds	r3, #8
 8003fec:	623b      	str	r3, [r7, #32]
          break;
 8003fee:	e01f      	b.n	8004030 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	330c      	adds	r3, #12
 8003ff6:	623b      	str	r3, [r7, #32]
          break;
 8003ff8:	e01a      	b.n	8004030 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004002:	2304      	movs	r3, #4
 8004004:	623b      	str	r3, [r7, #32]
          break;
 8004006:	e013      	b.n	8004030 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d105      	bne.n	800401c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004010:	2308      	movs	r3, #8
 8004012:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	69fa      	ldr	r2, [r7, #28]
 8004018:	611a      	str	r2, [r3, #16]
          break;
 800401a:	e009      	b.n	8004030 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800401c:	2308      	movs	r3, #8
 800401e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69fa      	ldr	r2, [r7, #28]
 8004024:	615a      	str	r2, [r3, #20]
          break;
 8004026:	e003      	b.n	8004030 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004028:	2300      	movs	r3, #0
 800402a:	623b      	str	r3, [r7, #32]
          break;
 800402c:	e000      	b.n	8004030 <HAL_GPIO_Init+0x130>
          break;
 800402e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	2bff      	cmp	r3, #255	; 0xff
 8004034:	d801      	bhi.n	800403a <HAL_GPIO_Init+0x13a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	e001      	b.n	800403e <HAL_GPIO_Init+0x13e>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3304      	adds	r3, #4
 800403e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	2bff      	cmp	r3, #255	; 0xff
 8004044:	d802      	bhi.n	800404c <HAL_GPIO_Init+0x14c>
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	e002      	b.n	8004052 <HAL_GPIO_Init+0x152>
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	3b08      	subs	r3, #8
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	210f      	movs	r1, #15
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	fa01 f303 	lsl.w	r3, r1, r3
 8004060:	43db      	mvns	r3, r3
 8004062:	401a      	ands	r2, r3
 8004064:	6a39      	ldr	r1, [r7, #32]
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	fa01 f303 	lsl.w	r3, r1, r3
 800406c:	431a      	orrs	r2, r3
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 80b1 	beq.w	80041e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004080:	4b4d      	ldr	r3, [pc, #308]	; (80041b8 <HAL_GPIO_Init+0x2b8>)
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	4a4c      	ldr	r2, [pc, #304]	; (80041b8 <HAL_GPIO_Init+0x2b8>)
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	6193      	str	r3, [r2, #24]
 800408c:	4b4a      	ldr	r3, [pc, #296]	; (80041b8 <HAL_GPIO_Init+0x2b8>)
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004098:	4a48      	ldr	r2, [pc, #288]	; (80041bc <HAL_GPIO_Init+0x2bc>)
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	089b      	lsrs	r3, r3, #2
 800409e:	3302      	adds	r3, #2
 80040a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	f003 0303 	and.w	r3, r3, #3
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	220f      	movs	r2, #15
 80040b0:	fa02 f303 	lsl.w	r3, r2, r3
 80040b4:	43db      	mvns	r3, r3
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4013      	ands	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a40      	ldr	r2, [pc, #256]	; (80041c0 <HAL_GPIO_Init+0x2c0>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d013      	beq.n	80040ec <HAL_GPIO_Init+0x1ec>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a3f      	ldr	r2, [pc, #252]	; (80041c4 <HAL_GPIO_Init+0x2c4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00d      	beq.n	80040e8 <HAL_GPIO_Init+0x1e8>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a3e      	ldr	r2, [pc, #248]	; (80041c8 <HAL_GPIO_Init+0x2c8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d007      	beq.n	80040e4 <HAL_GPIO_Init+0x1e4>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a3d      	ldr	r2, [pc, #244]	; (80041cc <HAL_GPIO_Init+0x2cc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d101      	bne.n	80040e0 <HAL_GPIO_Init+0x1e0>
 80040dc:	2303      	movs	r3, #3
 80040de:	e006      	b.n	80040ee <HAL_GPIO_Init+0x1ee>
 80040e0:	2304      	movs	r3, #4
 80040e2:	e004      	b.n	80040ee <HAL_GPIO_Init+0x1ee>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e002      	b.n	80040ee <HAL_GPIO_Init+0x1ee>
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <HAL_GPIO_Init+0x1ee>
 80040ec:	2300      	movs	r3, #0
 80040ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f0:	f002 0203 	and.w	r2, r2, #3
 80040f4:	0092      	lsls	r2, r2, #2
 80040f6:	4093      	lsls	r3, r2
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80040fe:	492f      	ldr	r1, [pc, #188]	; (80041bc <HAL_GPIO_Init+0x2bc>)
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	089b      	lsrs	r3, r3, #2
 8004104:	3302      	adds	r3, #2
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d006      	beq.n	8004126 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004118:	4b2d      	ldr	r3, [pc, #180]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	492c      	ldr	r1, [pc, #176]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	4313      	orrs	r3, r2
 8004122:	600b      	str	r3, [r1, #0]
 8004124:	e006      	b.n	8004134 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004126:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	43db      	mvns	r3, r3
 800412e:	4928      	ldr	r1, [pc, #160]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 8004130:	4013      	ands	r3, r2
 8004132:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d006      	beq.n	800414e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004140:	4b23      	ldr	r3, [pc, #140]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	4922      	ldr	r1, [pc, #136]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	4313      	orrs	r3, r2
 800414a:	604b      	str	r3, [r1, #4]
 800414c:	e006      	b.n	800415c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800414e:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	43db      	mvns	r3, r3
 8004156:	491e      	ldr	r1, [pc, #120]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 8004158:	4013      	ands	r3, r2
 800415a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004168:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 800416a:	689a      	ldr	r2, [r3, #8]
 800416c:	4918      	ldr	r1, [pc, #96]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	4313      	orrs	r3, r2
 8004172:	608b      	str	r3, [r1, #8]
 8004174:	e006      	b.n	8004184 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004176:	4b16      	ldr	r3, [pc, #88]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	43db      	mvns	r3, r3
 800417e:	4914      	ldr	r1, [pc, #80]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 8004180:	4013      	ands	r3, r2
 8004182:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d021      	beq.n	80041d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004190:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	490e      	ldr	r1, [pc, #56]	; (80041d0 <HAL_GPIO_Init+0x2d0>)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	4313      	orrs	r3, r2
 800419a:	60cb      	str	r3, [r1, #12]
 800419c:	e021      	b.n	80041e2 <HAL_GPIO_Init+0x2e2>
 800419e:	bf00      	nop
 80041a0:	10320000 	.word	0x10320000
 80041a4:	10310000 	.word	0x10310000
 80041a8:	10220000 	.word	0x10220000
 80041ac:	10210000 	.word	0x10210000
 80041b0:	10120000 	.word	0x10120000
 80041b4:	10110000 	.word	0x10110000
 80041b8:	40021000 	.word	0x40021000
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40010800 	.word	0x40010800
 80041c4:	40010c00 	.word	0x40010c00
 80041c8:	40011000 	.word	0x40011000
 80041cc:	40011400 	.word	0x40011400
 80041d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80041d4:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <HAL_GPIO_Init+0x304>)
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	43db      	mvns	r3, r3
 80041dc:	4909      	ldr	r1, [pc, #36]	; (8004204 <HAL_GPIO_Init+0x304>)
 80041de:	4013      	ands	r3, r2
 80041e0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	3301      	adds	r3, #1
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	fa22 f303 	lsr.w	r3, r2, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f47f ae8e 	bne.w	8003f14 <HAL_GPIO_Init+0x14>
  }
}
 80041f8:	bf00      	nop
 80041fa:	bf00      	nop
 80041fc:	372c      	adds	r7, #44	; 0x2c
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr
 8004204:	40010400 	.word	0x40010400

08004208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	807b      	strh	r3, [r7, #2]
 8004214:	4613      	mov	r3, r2
 8004216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004218:	787b      	ldrb	r3, [r7, #1]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800421e:	887a      	ldrh	r2, [r7, #2]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004224:	e003      	b.n	800422e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004226:	887b      	ldrh	r3, [r7, #2]
 8004228:	041a      	lsls	r2, r3, #16
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	611a      	str	r2, [r3, #16]
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	460b      	mov	r3, r1
 8004242:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800424a:	887a      	ldrh	r2, [r7, #2]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	4013      	ands	r3, r2
 8004250:	041a      	lsls	r2, r3, #16
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	43d9      	mvns	r1, r3
 8004256:	887b      	ldrh	r3, [r7, #2]
 8004258:	400b      	ands	r3, r1
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	611a      	str	r2, [r3, #16]
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	bc80      	pop	{r7}
 8004268:	4770      	bx	lr
	...

0800426c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d101      	bne.n	800427e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e12b      	b.n	80044d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d106      	bne.n	8004298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7fe ff3e 	bl	8003114 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2224      	movs	r2, #36	; 0x24
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0201 	bic.w	r2, r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042d0:	f000 fffa 	bl	80052c8 <HAL_RCC_GetPCLK1Freq>
 80042d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	4a81      	ldr	r2, [pc, #516]	; (80044e0 <HAL_I2C_Init+0x274>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d807      	bhi.n	80042f0 <HAL_I2C_Init+0x84>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4a80      	ldr	r2, [pc, #512]	; (80044e4 <HAL_I2C_Init+0x278>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	bf94      	ite	ls
 80042e8:	2301      	movls	r3, #1
 80042ea:	2300      	movhi	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	e006      	b.n	80042fe <HAL_I2C_Init+0x92>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4a7d      	ldr	r2, [pc, #500]	; (80044e8 <HAL_I2C_Init+0x27c>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	bf94      	ite	ls
 80042f8:	2301      	movls	r3, #1
 80042fa:	2300      	movhi	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e0e7      	b.n	80044d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a78      	ldr	r2, [pc, #480]	; (80044ec <HAL_I2C_Init+0x280>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	0c9b      	lsrs	r3, r3, #18
 8004310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	430a      	orrs	r2, r1
 8004324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	4a6a      	ldr	r2, [pc, #424]	; (80044e0 <HAL_I2C_Init+0x274>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d802      	bhi.n	8004340 <HAL_I2C_Init+0xd4>
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	3301      	adds	r3, #1
 800433e:	e009      	b.n	8004354 <HAL_I2C_Init+0xe8>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	4a69      	ldr	r2, [pc, #420]	; (80044f0 <HAL_I2C_Init+0x284>)
 800434c:	fba2 2303 	umull	r2, r3, r2, r3
 8004350:	099b      	lsrs	r3, r3, #6
 8004352:	3301      	adds	r3, #1
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6812      	ldr	r2, [r2, #0]
 8004358:	430b      	orrs	r3, r1
 800435a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004366:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	495c      	ldr	r1, [pc, #368]	; (80044e0 <HAL_I2C_Init+0x274>)
 8004370:	428b      	cmp	r3, r1
 8004372:	d819      	bhi.n	80043a8 <HAL_I2C_Init+0x13c>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1e59      	subs	r1, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004382:	1c59      	adds	r1, r3, #1
 8004384:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004388:	400b      	ands	r3, r1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00a      	beq.n	80043a4 <HAL_I2C_Init+0x138>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1e59      	subs	r1, r3, #1
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	005b      	lsls	r3, r3, #1
 8004398:	fbb1 f3f3 	udiv	r3, r1, r3
 800439c:	3301      	adds	r3, #1
 800439e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043a2:	e051      	b.n	8004448 <HAL_I2C_Init+0x1dc>
 80043a4:	2304      	movs	r3, #4
 80043a6:	e04f      	b.n	8004448 <HAL_I2C_Init+0x1dc>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d111      	bne.n	80043d4 <HAL_I2C_Init+0x168>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	1e58      	subs	r0, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	440b      	add	r3, r1
 80043be:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c2:	3301      	adds	r3, #1
 80043c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	bf0c      	ite	eq
 80043cc:	2301      	moveq	r3, #1
 80043ce:	2300      	movne	r3, #0
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	e012      	b.n	80043fa <HAL_I2C_Init+0x18e>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1e58      	subs	r0, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6859      	ldr	r1, [r3, #4]
 80043dc:	460b      	mov	r3, r1
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	0099      	lsls	r1, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ea:	3301      	adds	r3, #1
 80043ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_I2C_Init+0x196>
 80043fe:	2301      	movs	r3, #1
 8004400:	e022      	b.n	8004448 <HAL_I2C_Init+0x1dc>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10e      	bne.n	8004428 <HAL_I2C_Init+0x1bc>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1e58      	subs	r0, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6859      	ldr	r1, [r3, #4]
 8004412:	460b      	mov	r3, r1
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	440b      	add	r3, r1
 8004418:	fbb0 f3f3 	udiv	r3, r0, r3
 800441c:	3301      	adds	r3, #1
 800441e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004426:	e00f      	b.n	8004448 <HAL_I2C_Init+0x1dc>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1e58      	subs	r0, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6859      	ldr	r1, [r3, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	0099      	lsls	r1, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	fbb0 f3f3 	udiv	r3, r0, r3
 800443e:	3301      	adds	r3, #1
 8004440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	6809      	ldr	r1, [r1, #0]
 800444c:	4313      	orrs	r3, r2
 800444e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69da      	ldr	r2, [r3, #28]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	6911      	ldr	r1, [r2, #16]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	68d2      	ldr	r2, [r2, #12]
 8004482:	4311      	orrs	r1, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	430b      	orrs	r3, r1
 800448a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	000186a0 	.word	0x000186a0
 80044e4:	001e847f 	.word	0x001e847f
 80044e8:	003d08ff 	.word	0x003d08ff
 80044ec:	431bde83 	.word	0x431bde83
 80044f0:	10624dd3 	.word	0x10624dd3

080044f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	4608      	mov	r0, r1
 80044fe:	4611      	mov	r1, r2
 8004500:	461a      	mov	r2, r3
 8004502:	4603      	mov	r3, r0
 8004504:	817b      	strh	r3, [r7, #10]
 8004506:	460b      	mov	r3, r1
 8004508:	813b      	strh	r3, [r7, #8]
 800450a:	4613      	mov	r3, r2
 800450c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800450e:	f7ff f9cd 	bl	80038ac <HAL_GetTick>
 8004512:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b20      	cmp	r3, #32
 800451e:	f040 80d9 	bne.w	80046d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	9300      	str	r3, [sp, #0]
 8004526:	2319      	movs	r3, #25
 8004528:	2201      	movs	r2, #1
 800452a:	496d      	ldr	r1, [pc, #436]	; (80046e0 <HAL_I2C_Mem_Write+0x1ec>)
 800452c:	68f8      	ldr	r0, [r7, #12]
 800452e:	f000 f971 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004538:	2302      	movs	r3, #2
 800453a:	e0cc      	b.n	80046d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004542:	2b01      	cmp	r3, #1
 8004544:	d101      	bne.n	800454a <HAL_I2C_Mem_Write+0x56>
 8004546:	2302      	movs	r3, #2
 8004548:	e0c5      	b.n	80046d6 <HAL_I2C_Mem_Write+0x1e2>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b01      	cmp	r3, #1
 800455e:	d007      	beq.n	8004570 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800457e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2221      	movs	r2, #33	; 0x21
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2240      	movs	r2, #64	; 0x40
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a3a      	ldr	r2, [r7, #32]
 800459a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a4d      	ldr	r2, [pc, #308]	; (80046e4 <HAL_I2C_Mem_Write+0x1f0>)
 80045b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045b2:	88f8      	ldrh	r0, [r7, #6]
 80045b4:	893a      	ldrh	r2, [r7, #8]
 80045b6:	8979      	ldrh	r1, [r7, #10]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	9301      	str	r3, [sp, #4]
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	4603      	mov	r3, r0
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 f890 	bl	80046e8 <I2C_RequestMemoryWrite>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d052      	beq.n	8004674 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e081      	b.n	80046d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f9f2 	bl	80049c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00d      	beq.n	80045fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d107      	bne.n	80045fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e06b      	b.n	80046d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	781a      	ldrb	r2, [r3, #0]
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004618:	3b01      	subs	r3, #1
 800461a:	b29a      	uxth	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004624:	b29b      	uxth	r3, r3
 8004626:	3b01      	subs	r3, #1
 8004628:	b29a      	uxth	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f003 0304 	and.w	r3, r3, #4
 8004638:	2b04      	cmp	r3, #4
 800463a:	d11b      	bne.n	8004674 <HAL_I2C_Mem_Write+0x180>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004640:	2b00      	cmp	r3, #0
 8004642:	d017      	beq.n	8004674 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	781a      	ldrb	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1aa      	bne.n	80045d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f9de 	bl	8004a42 <I2C_WaitOnBTFFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00d      	beq.n	80046a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	2b04      	cmp	r3, #4
 8004692:	d107      	bne.n	80046a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e016      	b.n	80046d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e000      	b.n	80046d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80046d4:	2302      	movs	r3, #2
  }
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	00100002 	.word	0x00100002
 80046e4:	ffff0000 	.word	0xffff0000

080046e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	4608      	mov	r0, r1
 80046f2:	4611      	mov	r1, r2
 80046f4:	461a      	mov	r2, r3
 80046f6:	4603      	mov	r3, r0
 80046f8:	817b      	strh	r3, [r7, #10]
 80046fa:	460b      	mov	r3, r1
 80046fc:	813b      	strh	r3, [r7, #8]
 80046fe:	4613      	mov	r3, r2
 8004700:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004710:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	6a3b      	ldr	r3, [r7, #32]
 8004718:	2200      	movs	r2, #0
 800471a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f878 	bl	8004814 <I2C_WaitOnFlagUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00d      	beq.n	8004746 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004738:	d103      	bne.n	8004742 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e05f      	b.n	8004806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004746:	897b      	ldrh	r3, [r7, #10]
 8004748:	b2db      	uxtb	r3, r3
 800474a:	461a      	mov	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004754:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	6a3a      	ldr	r2, [r7, #32]
 800475a:	492d      	ldr	r1, [pc, #180]	; (8004810 <I2C_RequestMemoryWrite+0x128>)
 800475c:	68f8      	ldr	r0, [r7, #12]
 800475e:	f000 f8b0 	bl	80048c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e04c      	b.n	8004806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	617b      	str	r3, [r7, #20]
 8004780:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004784:	6a39      	ldr	r1, [r7, #32]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f000 f91a 	bl	80049c0 <I2C_WaitOnTXEFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00d      	beq.n	80047ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	2b04      	cmp	r3, #4
 8004798:	d107      	bne.n	80047aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e02b      	b.n	8004806 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d105      	bne.n	80047c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047b4:	893b      	ldrh	r3, [r7, #8]
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	611a      	str	r2, [r3, #16]
 80047be:	e021      	b.n	8004804 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047c0:	893b      	ldrh	r3, [r7, #8]
 80047c2:	0a1b      	lsrs	r3, r3, #8
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d0:	6a39      	ldr	r1, [r7, #32]
 80047d2:	68f8      	ldr	r0, [r7, #12]
 80047d4:	f000 f8f4 	bl	80049c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00d      	beq.n	80047fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	2b04      	cmp	r3, #4
 80047e4:	d107      	bne.n	80047f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e005      	b.n	8004806 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047fa:	893b      	ldrh	r3, [r7, #8]
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	00010002 	.word	0x00010002

08004814 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004824:	e025      	b.n	8004872 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800482c:	d021      	beq.n	8004872 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482e:	f7ff f83d 	bl	80038ac <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	429a      	cmp	r2, r3
 800483c:	d302      	bcc.n	8004844 <I2C_WaitOnFlagUntilTimeout+0x30>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d116      	bne.n	8004872 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2220      	movs	r2, #32
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485e:	f043 0220 	orr.w	r2, r3, #32
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e023      	b.n	80048ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	0c1b      	lsrs	r3, r3, #16
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b01      	cmp	r3, #1
 800487a:	d10d      	bne.n	8004898 <I2C_WaitOnFlagUntilTimeout+0x84>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	43da      	mvns	r2, r3
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4013      	ands	r3, r2
 8004888:	b29b      	uxth	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	bf0c      	ite	eq
 800488e:	2301      	moveq	r3, #1
 8004890:	2300      	movne	r3, #0
 8004892:	b2db      	uxtb	r3, r3
 8004894:	461a      	mov	r2, r3
 8004896:	e00c      	b.n	80048b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	43da      	mvns	r2, r3
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4013      	ands	r3, r2
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	bf0c      	ite	eq
 80048aa:	2301      	moveq	r3, #1
 80048ac:	2300      	movne	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d0b6      	beq.n	8004826 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3710      	adds	r7, #16
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	607a      	str	r2, [r7, #4]
 80048ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048d0:	e051      	b.n	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048e0:	d123      	bne.n	800492a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2220      	movs	r2, #32
 8004906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f043 0204 	orr.w	r2, r3, #4
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e046      	b.n	80049b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004930:	d021      	beq.n	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004932:	f7fe ffbb 	bl	80038ac <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	429a      	cmp	r2, r3
 8004940:	d302      	bcc.n	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d116      	bne.n	8004976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f043 0220 	orr.w	r2, r3, #32
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e020      	b.n	80049b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b01      	cmp	r3, #1
 800497e:	d10c      	bne.n	800499a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	43da      	mvns	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4013      	ands	r3, r2
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	bf14      	ite	ne
 8004992:	2301      	movne	r3, #1
 8004994:	2300      	moveq	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	e00b      	b.n	80049b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	43da      	mvns	r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4013      	ands	r3, r2
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d18d      	bne.n	80048d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049cc:	e02d      	b.n	8004a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f878 	bl	8004ac4 <I2C_IsAcknowledgeFailed>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e02d      	b.n	8004a3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e4:	d021      	beq.n	8004a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e6:	f7fe ff61 	bl	80038ac <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d302      	bcc.n	80049fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d116      	bne.n	8004a2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2220      	movs	r2, #32
 8004a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f043 0220 	orr.w	r2, r3, #32
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e007      	b.n	8004a3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a34:	2b80      	cmp	r3, #128	; 0x80
 8004a36:	d1ca      	bne.n	80049ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a4e:	e02d      	b.n	8004aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f837 	bl	8004ac4 <I2C_IsAcknowledgeFailed>
 8004a56:	4603      	mov	r3, r0
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e02d      	b.n	8004abc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a66:	d021      	beq.n	8004aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a68:	f7fe ff20 	bl	80038ac <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d302      	bcc.n	8004a7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d116      	bne.n	8004aac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	f043 0220 	orr.w	r2, r3, #32
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e007      	b.n	8004abc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d1ca      	bne.n	8004a50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ad6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ada:	d11b      	bne.n	8004b14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ae4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b00:	f043 0204 	orr.w	r2, r3, #4
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e272      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 8087 	beq.w	8004c4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b40:	4b92      	ldr	r3, [pc, #584]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f003 030c 	and.w	r3, r3, #12
 8004b48:	2b04      	cmp	r3, #4
 8004b4a:	d00c      	beq.n	8004b66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b4c:	4b8f      	ldr	r3, [pc, #572]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 030c 	and.w	r3, r3, #12
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d112      	bne.n	8004b7e <HAL_RCC_OscConfig+0x5e>
 8004b58:	4b8c      	ldr	r3, [pc, #560]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b64:	d10b      	bne.n	8004b7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b66:	4b89      	ldr	r3, [pc, #548]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d06c      	beq.n	8004c4c <HAL_RCC_OscConfig+0x12c>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d168      	bne.n	8004c4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e24c      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b86:	d106      	bne.n	8004b96 <HAL_RCC_OscConfig+0x76>
 8004b88:	4b80      	ldr	r3, [pc, #512]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a7f      	ldr	r2, [pc, #508]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	e02e      	b.n	8004bf4 <HAL_RCC_OscConfig+0xd4>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x98>
 8004b9e:	4b7b      	ldr	r3, [pc, #492]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a7a      	ldr	r2, [pc, #488]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	4b78      	ldr	r3, [pc, #480]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a77      	ldr	r2, [pc, #476]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	e01d      	b.n	8004bf4 <HAL_RCC_OscConfig+0xd4>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCC_OscConfig+0xbc>
 8004bc2:	4b72      	ldr	r3, [pc, #456]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a71      	ldr	r2, [pc, #452]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	4b6f      	ldr	r3, [pc, #444]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a6e      	ldr	r2, [pc, #440]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	e00b      	b.n	8004bf4 <HAL_RCC_OscConfig+0xd4>
 8004bdc:	4b6b      	ldr	r3, [pc, #428]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a6a      	ldr	r2, [pc, #424]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	4b68      	ldr	r3, [pc, #416]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a67      	ldr	r2, [pc, #412]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d013      	beq.n	8004c24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfc:	f7fe fe56 	bl	80038ac <HAL_GetTick>
 8004c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c02:	e008      	b.n	8004c16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c04:	f7fe fe52 	bl	80038ac <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b64      	cmp	r3, #100	; 0x64
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e200      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	4b5d      	ldr	r3, [pc, #372]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0xe4>
 8004c22:	e014      	b.n	8004c4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c24:	f7fe fe42 	bl	80038ac <HAL_GetTick>
 8004c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c2a:	e008      	b.n	8004c3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c2c:	f7fe fe3e 	bl	80038ac <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	2b64      	cmp	r3, #100	; 0x64
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e1ec      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3e:	4b53      	ldr	r3, [pc, #332]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1f0      	bne.n	8004c2c <HAL_RCC_OscConfig+0x10c>
 8004c4a:	e000      	b.n	8004c4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d063      	beq.n	8004d22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c5a:	4b4c      	ldr	r3, [pc, #304]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00b      	beq.n	8004c7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c66:	4b49      	ldr	r3, [pc, #292]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d11c      	bne.n	8004cac <HAL_RCC_OscConfig+0x18c>
 8004c72:	4b46      	ldr	r3, [pc, #280]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d116      	bne.n	8004cac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c7e:	4b43      	ldr	r3, [pc, #268]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0302 	and.w	r3, r3, #2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <HAL_RCC_OscConfig+0x176>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d001      	beq.n	8004c96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e1c0      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c96:	4b3d      	ldr	r3, [pc, #244]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4939      	ldr	r1, [pc, #228]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004caa:	e03a      	b.n	8004d22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d020      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cb4:	4b36      	ldr	r3, [pc, #216]	; (8004d90 <HAL_RCC_OscConfig+0x270>)
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cba:	f7fe fdf7 	bl	80038ac <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cc2:	f7fe fdf3 	bl	80038ac <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e1a1      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd4:	4b2d      	ldr	r3, [pc, #180]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0f0      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce0:	4b2a      	ldr	r3, [pc, #168]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	695b      	ldr	r3, [r3, #20]
 8004cec:	00db      	lsls	r3, r3, #3
 8004cee:	4927      	ldr	r1, [pc, #156]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	600b      	str	r3, [r1, #0]
 8004cf4:	e015      	b.n	8004d22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cf6:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <HAL_RCC_OscConfig+0x270>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fe fdd6 	bl	80038ac <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d04:	f7fe fdd2 	bl	80038ac <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e180      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d16:	4b1d      	ldr	r3, [pc, #116]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d03a      	beq.n	8004da4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d019      	beq.n	8004d6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d36:	4b17      	ldr	r3, [pc, #92]	; (8004d94 <HAL_RCC_OscConfig+0x274>)
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3c:	f7fe fdb6 	bl	80038ac <HAL_GetTick>
 8004d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d42:	e008      	b.n	8004d56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d44:	f7fe fdb2 	bl	80038ac <HAL_GetTick>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	2b02      	cmp	r3, #2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e160      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d56:	4b0d      	ldr	r3, [pc, #52]	; (8004d8c <HAL_RCC_OscConfig+0x26c>)
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0f0      	beq.n	8004d44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d62:	2001      	movs	r0, #1
 8004d64:	f000 fad8 	bl	8005318 <RCC_Delay>
 8004d68:	e01c      	b.n	8004da4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <HAL_RCC_OscConfig+0x274>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d70:	f7fe fd9c 	bl	80038ac <HAL_GetTick>
 8004d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d76:	e00f      	b.n	8004d98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d78:	f7fe fd98 	bl	80038ac <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d908      	bls.n	8004d98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e146      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
 8004d8a:	bf00      	nop
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	42420000 	.word	0x42420000
 8004d94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d98:	4b92      	ldr	r3, [pc, #584]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e9      	bne.n	8004d78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80a6 	beq.w	8004efe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004db2:	2300      	movs	r3, #0
 8004db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004db6:	4b8b      	ldr	r3, [pc, #556]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10d      	bne.n	8004dde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dc2:	4b88      	ldr	r3, [pc, #544]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	4a87      	ldr	r2, [pc, #540]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dcc:	61d3      	str	r3, [r2, #28]
 8004dce:	4b85      	ldr	r3, [pc, #532]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	60bb      	str	r3, [r7, #8]
 8004dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dde:	4b82      	ldr	r3, [pc, #520]	; (8004fe8 <HAL_RCC_OscConfig+0x4c8>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d118      	bne.n	8004e1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dea:	4b7f      	ldr	r3, [pc, #508]	; (8004fe8 <HAL_RCC_OscConfig+0x4c8>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a7e      	ldr	r2, [pc, #504]	; (8004fe8 <HAL_RCC_OscConfig+0x4c8>)
 8004df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004df6:	f7fe fd59 	bl	80038ac <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dfe:	f7fe fd55 	bl	80038ac <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b64      	cmp	r3, #100	; 0x64
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e103      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e10:	4b75      	ldr	r3, [pc, #468]	; (8004fe8 <HAL_RCC_OscConfig+0x4c8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0f0      	beq.n	8004dfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d106      	bne.n	8004e32 <HAL_RCC_OscConfig+0x312>
 8004e24:	4b6f      	ldr	r3, [pc, #444]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	4a6e      	ldr	r2, [pc, #440]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	6213      	str	r3, [r2, #32]
 8004e30:	e02d      	b.n	8004e8e <HAL_RCC_OscConfig+0x36e>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCC_OscConfig+0x334>
 8004e3a:	4b6a      	ldr	r3, [pc, #424]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	4a69      	ldr	r2, [pc, #420]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e40:	f023 0301 	bic.w	r3, r3, #1
 8004e44:	6213      	str	r3, [r2, #32]
 8004e46:	4b67      	ldr	r3, [pc, #412]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	4a66      	ldr	r2, [pc, #408]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e4c:	f023 0304 	bic.w	r3, r3, #4
 8004e50:	6213      	str	r3, [r2, #32]
 8004e52:	e01c      	b.n	8004e8e <HAL_RCC_OscConfig+0x36e>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	2b05      	cmp	r3, #5
 8004e5a:	d10c      	bne.n	8004e76 <HAL_RCC_OscConfig+0x356>
 8004e5c:	4b61      	ldr	r3, [pc, #388]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	4a60      	ldr	r2, [pc, #384]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e62:	f043 0304 	orr.w	r3, r3, #4
 8004e66:	6213      	str	r3, [r2, #32]
 8004e68:	4b5e      	ldr	r3, [pc, #376]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	4a5d      	ldr	r2, [pc, #372]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e6e:	f043 0301 	orr.w	r3, r3, #1
 8004e72:	6213      	str	r3, [r2, #32]
 8004e74:	e00b      	b.n	8004e8e <HAL_RCC_OscConfig+0x36e>
 8004e76:	4b5b      	ldr	r3, [pc, #364]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	4a5a      	ldr	r2, [pc, #360]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e7c:	f023 0301 	bic.w	r3, r3, #1
 8004e80:	6213      	str	r3, [r2, #32]
 8004e82:	4b58      	ldr	r3, [pc, #352]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	4a57      	ldr	r2, [pc, #348]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004e88:	f023 0304 	bic.w	r3, r3, #4
 8004e8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d015      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e96:	f7fe fd09 	bl	80038ac <HAL_GetTick>
 8004e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9c:	e00a      	b.n	8004eb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e9e:	f7fe fd05 	bl	80038ac <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d901      	bls.n	8004eb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e0b1      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eb4:	4b4b      	ldr	r3, [pc, #300]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	f003 0302 	and.w	r3, r3, #2
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d0ee      	beq.n	8004e9e <HAL_RCC_OscConfig+0x37e>
 8004ec0:	e014      	b.n	8004eec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec2:	f7fe fcf3 	bl	80038ac <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec8:	e00a      	b.n	8004ee0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eca:	f7fe fcef 	bl	80038ac <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e09b      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee0:	4b40      	ldr	r3, [pc, #256]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1ee      	bne.n	8004eca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004eec:	7dfb      	ldrb	r3, [r7, #23]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d105      	bne.n	8004efe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ef2:	4b3c      	ldr	r3, [pc, #240]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	4a3b      	ldr	r2, [pc, #236]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004efc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 8087 	beq.w	8005016 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f08:	4b36      	ldr	r3, [pc, #216]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 030c 	and.w	r3, r3, #12
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d061      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d146      	bne.n	8004faa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f1c:	4b33      	ldr	r3, [pc, #204]	; (8004fec <HAL_RCC_OscConfig+0x4cc>)
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f22:	f7fe fcc3 	bl	80038ac <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2a:	f7fe fcbf 	bl	80038ac <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e06d      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f3c:	4b29      	ldr	r3, [pc, #164]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1f0      	bne.n	8004f2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f50:	d108      	bne.n	8004f64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f52:	4b24      	ldr	r3, [pc, #144]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	4921      	ldr	r1, [pc, #132]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f64:	4b1f      	ldr	r3, [pc, #124]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a19      	ldr	r1, [r3, #32]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f74:	430b      	orrs	r3, r1
 8004f76:	491b      	ldr	r1, [pc, #108]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <HAL_RCC_OscConfig+0x4cc>)
 8004f7e:	2201      	movs	r2, #1
 8004f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f82:	f7fe fc93 	bl	80038ac <HAL_GetTick>
 8004f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f88:	e008      	b.n	8004f9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8a:	f7fe fc8f 	bl	80038ac <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d901      	bls.n	8004f9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e03d      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f9c:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0f0      	beq.n	8004f8a <HAL_RCC_OscConfig+0x46a>
 8004fa8:	e035      	b.n	8005016 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004faa:	4b10      	ldr	r3, [pc, #64]	; (8004fec <HAL_RCC_OscConfig+0x4cc>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb0:	f7fe fc7c 	bl	80038ac <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fb8:	f7fe fc78 	bl	80038ac <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e026      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fca:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_RCC_OscConfig+0x4c4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x498>
 8004fd6:	e01e      	b.n	8005016 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d107      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e019      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	40007000 	.word	0x40007000
 8004fec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ff0:	4b0b      	ldr	r3, [pc, #44]	; (8005020 <HAL_RCC_OscConfig+0x500>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a1b      	ldr	r3, [r3, #32]
 8005000:	429a      	cmp	r2, r3
 8005002:	d106      	bne.n	8005012 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d001      	beq.n	8005016 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3718      	adds	r7, #24
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40021000 	.word	0x40021000

08005024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d101      	bne.n	8005038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e0d0      	b.n	80051da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005038:	4b6a      	ldr	r3, [pc, #424]	; (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d910      	bls.n	8005068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005046:	4b67      	ldr	r3, [pc, #412]	; (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f023 0207 	bic.w	r2, r3, #7
 800504e:	4965      	ldr	r1, [pc, #404]	; (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	4313      	orrs	r3, r2
 8005054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005056:	4b63      	ldr	r3, [pc, #396]	; (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d001      	beq.n	8005068 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e0b8      	b.n	80051da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d020      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005080:	4b59      	ldr	r3, [pc, #356]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4a58      	ldr	r2, [pc, #352]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005086:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800508a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0308 	and.w	r3, r3, #8
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005098:	4b53      	ldr	r3, [pc, #332]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	4a52      	ldr	r2, [pc, #328]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 800509e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80050a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050a4:	4b50      	ldr	r3, [pc, #320]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	494d      	ldr	r1, [pc, #308]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d040      	beq.n	8005144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d107      	bne.n	80050da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050ca:	4b47      	ldr	r3, [pc, #284]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d115      	bne.n	8005102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e07f      	b.n	80051da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d107      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050e2:	4b41      	ldr	r3, [pc, #260]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d109      	bne.n	8005102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e073      	b.n	80051da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050f2:	4b3d      	ldr	r3, [pc, #244]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d101      	bne.n	8005102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e06b      	b.n	80051da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005102:	4b39      	ldr	r3, [pc, #228]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f023 0203 	bic.w	r2, r3, #3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	4936      	ldr	r1, [pc, #216]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005110:	4313      	orrs	r3, r2
 8005112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005114:	f7fe fbca 	bl	80038ac <HAL_GetTick>
 8005118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800511a:	e00a      	b.n	8005132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800511c:	f7fe fbc6 	bl	80038ac <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	; 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e053      	b.n	80051da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005132:	4b2d      	ldr	r3, [pc, #180]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f003 020c 	and.w	r2, r3, #12
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	429a      	cmp	r2, r3
 8005142:	d1eb      	bne.n	800511c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005144:	4b27      	ldr	r3, [pc, #156]	; (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d210      	bcs.n	8005174 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005152:	4b24      	ldr	r3, [pc, #144]	; (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 0207 	bic.w	r2, r3, #7
 800515a:	4922      	ldr	r1, [pc, #136]	; (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	4313      	orrs	r3, r2
 8005160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005162:	4b20      	ldr	r3, [pc, #128]	; (80051e4 <HAL_RCC_ClockConfig+0x1c0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d001      	beq.n	8005174 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e032      	b.n	80051da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0304 	and.w	r3, r3, #4
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005180:	4b19      	ldr	r3, [pc, #100]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	4916      	ldr	r1, [pc, #88]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 800518e:	4313      	orrs	r3, r2
 8005190:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800519e:	4b12      	ldr	r3, [pc, #72]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	00db      	lsls	r3, r3, #3
 80051ac:	490e      	ldr	r1, [pc, #56]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80051ae:	4313      	orrs	r3, r2
 80051b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051b2:	f000 f821 	bl	80051f8 <HAL_RCC_GetSysClockFreq>
 80051b6:	4602      	mov	r2, r0
 80051b8:	4b0b      	ldr	r3, [pc, #44]	; (80051e8 <HAL_RCC_ClockConfig+0x1c4>)
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	091b      	lsrs	r3, r3, #4
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	490a      	ldr	r1, [pc, #40]	; (80051ec <HAL_RCC_ClockConfig+0x1c8>)
 80051c4:	5ccb      	ldrb	r3, [r1, r3]
 80051c6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ca:	4a09      	ldr	r2, [pc, #36]	; (80051f0 <HAL_RCC_ClockConfig+0x1cc>)
 80051cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051ce:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <HAL_RCC_ClockConfig+0x1d0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fb28 	bl	8003828 <HAL_InitTick>

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40022000 	.word	0x40022000
 80051e8:	40021000 	.word	0x40021000
 80051ec:	080096ac 	.word	0x080096ac
 80051f0:	20000004 	.word	0x20000004
 80051f4:	20000008 	.word	0x20000008

080051f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051f8:	b490      	push	{r4, r7}
 80051fa:	b08a      	sub	sp, #40	; 0x28
 80051fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80051fe:	4b29      	ldr	r3, [pc, #164]	; (80052a4 <HAL_RCC_GetSysClockFreq+0xac>)
 8005200:	1d3c      	adds	r4, r7, #4
 8005202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005208:	f240 2301 	movw	r3, #513	; 0x201
 800520c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	2300      	movs	r3, #0
 8005214:	61bb      	str	r3, [r7, #24]
 8005216:	2300      	movs	r3, #0
 8005218:	627b      	str	r3, [r7, #36]	; 0x24
 800521a:	2300      	movs	r3, #0
 800521c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005222:	4b21      	ldr	r3, [pc, #132]	; (80052a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005228:	69fb      	ldr	r3, [r7, #28]
 800522a:	f003 030c 	and.w	r3, r3, #12
 800522e:	2b04      	cmp	r3, #4
 8005230:	d002      	beq.n	8005238 <HAL_RCC_GetSysClockFreq+0x40>
 8005232:	2b08      	cmp	r3, #8
 8005234:	d003      	beq.n	800523e <HAL_RCC_GetSysClockFreq+0x46>
 8005236:	e02b      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005238:	4b1c      	ldr	r3, [pc, #112]	; (80052ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800523a:	623b      	str	r3, [r7, #32]
      break;
 800523c:	e02b      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	0c9b      	lsrs	r3, r3, #18
 8005242:	f003 030f 	and.w	r3, r3, #15
 8005246:	3328      	adds	r3, #40	; 0x28
 8005248:	443b      	add	r3, r7
 800524a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800524e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d012      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800525a:	4b13      	ldr	r3, [pc, #76]	; (80052a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	0c5b      	lsrs	r3, r3, #17
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	3328      	adds	r3, #40	; 0x28
 8005266:	443b      	add	r3, r7
 8005268:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800526c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	4a0e      	ldr	r2, [pc, #56]	; (80052ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8005272:	fb03 f202 	mul.w	r2, r3, r2
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	fbb2 f3f3 	udiv	r3, r2, r3
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
 800527e:	e004      	b.n	800528a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	4a0b      	ldr	r2, [pc, #44]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005284:	fb02 f303 	mul.w	r3, r2, r3
 8005288:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	623b      	str	r3, [r7, #32]
      break;
 800528e:	e002      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005290:	4b06      	ldr	r3, [pc, #24]	; (80052ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8005292:	623b      	str	r3, [r7, #32]
      break;
 8005294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005296:	6a3b      	ldr	r3, [r7, #32]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3728      	adds	r7, #40	; 0x28
 800529c:	46bd      	mov	sp, r7
 800529e:	bc90      	pop	{r4, r7}
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	08009688 	.word	0x08009688
 80052a8:	40021000 	.word	0x40021000
 80052ac:	007a1200 	.word	0x007a1200
 80052b0:	003d0900 	.word	0x003d0900

080052b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b4:	b480      	push	{r7}
 80052b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b8:	4b02      	ldr	r3, [pc, #8]	; (80052c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80052ba:	681b      	ldr	r3, [r3, #0]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr
 80052c4:	20000004 	.word	0x20000004

080052c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052cc:	f7ff fff2 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052d0:	4602      	mov	r2, r0
 80052d2:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	0a1b      	lsrs	r3, r3, #8
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	4903      	ldr	r1, [pc, #12]	; (80052ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80052de:	5ccb      	ldrb	r3, [r1, r3]
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40021000 	.word	0x40021000
 80052ec:	080096bc 	.word	0x080096bc

080052f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052f4:	f7ff ffde 	bl	80052b4 <HAL_RCC_GetHCLKFreq>
 80052f8:	4602      	mov	r2, r0
 80052fa:	4b05      	ldr	r3, [pc, #20]	; (8005310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	0adb      	lsrs	r3, r3, #11
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	4903      	ldr	r1, [pc, #12]	; (8005314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005306:	5ccb      	ldrb	r3, [r1, r3]
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40021000 	.word	0x40021000
 8005314:	080096bc 	.word	0x080096bc

08005318 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005318:	b480      	push	{r7}
 800531a:	b085      	sub	sp, #20
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005320:	4b0a      	ldr	r3, [pc, #40]	; (800534c <RCC_Delay+0x34>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a0a      	ldr	r2, [pc, #40]	; (8005350 <RCC_Delay+0x38>)
 8005326:	fba2 2303 	umull	r2, r3, r2, r3
 800532a:	0a5b      	lsrs	r3, r3, #9
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	fb02 f303 	mul.w	r3, r2, r3
 8005332:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005334:	bf00      	nop
  }
  while (Delay --);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	1e5a      	subs	r2, r3, #1
 800533a:	60fa      	str	r2, [r7, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d1f9      	bne.n	8005334 <RCC_Delay+0x1c>
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr
 800534c:	20000004 	.word	0x20000004
 8005350:	10624dd3 	.word	0x10624dd3

08005354 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e041      	b.n	80053ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d106      	bne.n	8005380 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7fd ff1a 	bl	80031b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3304      	adds	r3, #4
 8005390:	4619      	mov	r1, r3
 8005392:	4610      	mov	r0, r2
 8005394:	f000 fd62 	bl	8005e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}
	...

080053f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d001      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e03a      	b.n	8005482 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a18      	ldr	r2, [pc, #96]	; (800548c <HAL_TIM_Base_Start_IT+0x98>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d00e      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x58>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005436:	d009      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x58>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a14      	ldr	r2, [pc, #80]	; (8005490 <HAL_TIM_Base_Start_IT+0x9c>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d004      	beq.n	800544c <HAL_TIM_Base_Start_IT+0x58>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a13      	ldr	r2, [pc, #76]	; (8005494 <HAL_TIM_Base_Start_IT+0xa0>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d111      	bne.n	8005470 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b06      	cmp	r3, #6
 800545c:	d010      	beq.n	8005480 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0201 	orr.w	r2, r2, #1
 800546c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546e:	e007      	b.n	8005480 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	bc80      	pop	{r7}
 800548a:	4770      	bx	lr
 800548c:	40012c00 	.word	0x40012c00
 8005490:	40000400 	.word	0x40000400
 8005494:	40000800 	.word	0x40000800

08005498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e041      	b.n	800552e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f839 	bl	8005536 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f000 fcc0 	bl	8005e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	bc80      	pop	{r7}
 8005546:	4770      	bx	lr

08005548 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d109      	bne.n	800556c <HAL_TIM_PWM_Start+0x24>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b01      	cmp	r3, #1
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	e022      	b.n	80055b2 <HAL_TIM_PWM_Start+0x6a>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	2b04      	cmp	r3, #4
 8005570:	d109      	bne.n	8005586 <HAL_TIM_PWM_Start+0x3e>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b01      	cmp	r3, #1
 800557c:	bf14      	ite	ne
 800557e:	2301      	movne	r3, #1
 8005580:	2300      	moveq	r3, #0
 8005582:	b2db      	uxtb	r3, r3
 8005584:	e015      	b.n	80055b2 <HAL_TIM_PWM_Start+0x6a>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b08      	cmp	r3, #8
 800558a:	d109      	bne.n	80055a0 <HAL_TIM_PWM_Start+0x58>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b01      	cmp	r3, #1
 8005596:	bf14      	ite	ne
 8005598:	2301      	movne	r3, #1
 800559a:	2300      	moveq	r3, #0
 800559c:	b2db      	uxtb	r3, r3
 800559e:	e008      	b.n	80055b2 <HAL_TIM_PWM_Start+0x6a>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	bf14      	ite	ne
 80055ac:	2301      	movne	r3, #1
 80055ae:	2300      	moveq	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e05e      	b.n	8005678 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d104      	bne.n	80055ca <HAL_TIM_PWM_Start+0x82>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055c8:	e013      	b.n	80055f2 <HAL_TIM_PWM_Start+0xaa>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b04      	cmp	r3, #4
 80055ce:	d104      	bne.n	80055da <HAL_TIM_PWM_Start+0x92>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055d8:	e00b      	b.n	80055f2 <HAL_TIM_PWM_Start+0xaa>
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d104      	bne.n	80055ea <HAL_TIM_PWM_Start+0xa2>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2202      	movs	r2, #2
 80055e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e8:	e003      	b.n	80055f2 <HAL_TIM_PWM_Start+0xaa>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2202      	movs	r2, #2
 80055ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2201      	movs	r2, #1
 80055f8:	6839      	ldr	r1, [r7, #0]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 feae 	bl	800635c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1e      	ldr	r2, [pc, #120]	; (8005680 <HAL_TIM_PWM_Start+0x138>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d107      	bne.n	800561a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005618:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a18      	ldr	r2, [pc, #96]	; (8005680 <HAL_TIM_PWM_Start+0x138>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d00e      	beq.n	8005642 <HAL_TIM_PWM_Start+0xfa>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562c:	d009      	beq.n	8005642 <HAL_TIM_PWM_Start+0xfa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a14      	ldr	r2, [pc, #80]	; (8005684 <HAL_TIM_PWM_Start+0x13c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d004      	beq.n	8005642 <HAL_TIM_PWM_Start+0xfa>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a12      	ldr	r2, [pc, #72]	; (8005688 <HAL_TIM_PWM_Start+0x140>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d111      	bne.n	8005666 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b06      	cmp	r3, #6
 8005652:	d010      	beq.n	8005676 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f042 0201 	orr.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005664:	e007      	b.n	8005676 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0201 	orr.w	r2, r2, #1
 8005674:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	40012c00 	.word	0x40012c00
 8005684:	40000400 	.word	0x40000400
 8005688:	40000800 	.word	0x40000800

0800568c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b086      	sub	sp, #24
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e093      	b.n	80057c8 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7fd fdb7 	bl	8003228 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2202      	movs	r2, #2
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056d0:	f023 0307 	bic.w	r3, r3, #7
 80056d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3304      	adds	r3, #4
 80056de:	4619      	mov	r1, r3
 80056e0:	4610      	mov	r0, r2
 80056e2:	f000 fbbb 	bl	8005e5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6a1b      	ldr	r3, [r3, #32]
 80056fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570e:	f023 0303 	bic.w	r3, r3, #3
 8005712:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	4313      	orrs	r3, r2
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800572c:	f023 030c 	bic.w	r3, r3, #12
 8005730:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005738:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800573c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	68da      	ldr	r2, [r3, #12]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	021b      	lsls	r3, r3, #8
 8005748:	4313      	orrs	r3, r2
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4313      	orrs	r3, r2
 800574e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	011a      	lsls	r2, r3, #4
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	031b      	lsls	r3, r3, #12
 800575c:	4313      	orrs	r3, r2
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4313      	orrs	r3, r2
 8005762:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800576a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	4313      	orrs	r3, r2
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4313      	orrs	r3, r2
 800577c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057c6:	2300      	movs	r3, #0
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d110      	bne.n	8005822 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d102      	bne.n	800580c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005806:	7b7b      	ldrb	r3, [r7, #13]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d001      	beq.n	8005810 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e069      	b.n	80058e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005820:	e031      	b.n	8005886 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b04      	cmp	r3, #4
 8005826:	d110      	bne.n	800584a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005828:	7bbb      	ldrb	r3, [r7, #14]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d102      	bne.n	8005834 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800582e:	7b3b      	ldrb	r3, [r7, #12]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d001      	beq.n	8005838 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e055      	b.n	80058e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2202      	movs	r2, #2
 8005844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005848:	e01d      	b.n	8005886 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d108      	bne.n	8005862 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005850:	7bbb      	ldrb	r3, [r7, #14]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d105      	bne.n	8005862 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005856:	7b7b      	ldrb	r3, [r7, #13]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d102      	bne.n	8005862 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800585c:	7b3b      	ldrb	r3, [r7, #12]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d001      	beq.n	8005866 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e03e      	b.n	80058e4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2202      	movs	r2, #2
 800586a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2202      	movs	r2, #2
 8005872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2202      	movs	r2, #2
 800587a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2202      	movs	r2, #2
 8005882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_TIM_Encoder_Start+0xc4>
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2b04      	cmp	r3, #4
 8005890:	d008      	beq.n	80058a4 <HAL_TIM_Encoder_Start+0xd4>
 8005892:	e00f      	b.n	80058b4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2201      	movs	r2, #1
 800589a:	2100      	movs	r1, #0
 800589c:	4618      	mov	r0, r3
 800589e:	f000 fd5d 	bl	800635c <TIM_CCxChannelCmd>
      break;
 80058a2:	e016      	b.n	80058d2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2201      	movs	r2, #1
 80058aa:	2104      	movs	r1, #4
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fd55 	bl	800635c <TIM_CCxChannelCmd>
      break;
 80058b2:	e00e      	b.n	80058d2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	2201      	movs	r2, #1
 80058ba:	2100      	movs	r1, #0
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fd4d 	bl	800635c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2201      	movs	r2, #1
 80058c8:	2104      	movs	r1, #4
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 fd46 	bl	800635c <TIM_CCxChannelCmd>
      break;
 80058d0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0201 	orr.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d122      	bne.n	8005948 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b02      	cmp	r3, #2
 800590e:	d11b      	bne.n	8005948 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f06f 0202 	mvn.w	r2, #2
 8005918:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	f003 0303 	and.w	r3, r3, #3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d003      	beq.n	8005936 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fa78 	bl	8005e24 <HAL_TIM_IC_CaptureCallback>
 8005934:	e005      	b.n	8005942 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fa6b 	bl	8005e12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fa7a 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	2b04      	cmp	r3, #4
 8005954:	d122      	bne.n	800599c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b04      	cmp	r3, #4
 8005962:	d11b      	bne.n	800599c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f06f 0204 	mvn.w	r2, #4
 800596c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2202      	movs	r2, #2
 8005972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fa4e 	bl	8005e24 <HAL_TIM_IC_CaptureCallback>
 8005988:	e005      	b.n	8005996 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 fa41 	bl	8005e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fa50 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	f003 0308 	and.w	r3, r3, #8
 80059a6:	2b08      	cmp	r3, #8
 80059a8:	d122      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d11b      	bne.n	80059f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f06f 0208 	mvn.w	r2, #8
 80059c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2204      	movs	r2, #4
 80059c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d003      	beq.n	80059de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fa24 	bl	8005e24 <HAL_TIM_IC_CaptureCallback>
 80059dc:	e005      	b.n	80059ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fa17 	bl	8005e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa26 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0310 	and.w	r3, r3, #16
 80059fa:	2b10      	cmp	r3, #16
 80059fc:	d122      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b10      	cmp	r3, #16
 8005a0a:	d11b      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0210 	mvn.w	r2, #16
 8005a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2208      	movs	r2, #8
 8005a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f9fa 	bl	8005e24 <HAL_TIM_IC_CaptureCallback>
 8005a30:	e005      	b.n	8005a3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f9ed 	bl	8005e12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f9fc 	bl	8005e36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d10e      	bne.n	8005a70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d107      	bne.n	8005a70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0201 	mvn.w	r2, #1
 8005a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f9c8 	bl	8005e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7a:	2b80      	cmp	r3, #128	; 0x80
 8005a7c:	d10e      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a88:	2b80      	cmp	r3, #128	; 0x80
 8005a8a:	d107      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fceb 	bl	8006472 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d10e      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab4:	2b40      	cmp	r3, #64	; 0x40
 8005ab6:	d107      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9c0 	bl	8005e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b20      	cmp	r3, #32
 8005ad4:	d10e      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b20      	cmp	r3, #32
 8005ae2:	d107      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0220 	mvn.w	r2, #32
 8005aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fcb6 	bl	8006460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005af4:	bf00      	nop
 8005af6:	3708      	adds	r7, #8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e0ac      	b.n	8005c70 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	f200 809f 	bhi.w	8005c64 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b61 	.word	0x08005b61
 8005b30:	08005c65 	.word	0x08005c65
 8005b34:	08005c65 	.word	0x08005c65
 8005b38:	08005c65 	.word	0x08005c65
 8005b3c:	08005ba1 	.word	0x08005ba1
 8005b40:	08005c65 	.word	0x08005c65
 8005b44:	08005c65 	.word	0x08005c65
 8005b48:	08005c65 	.word	0x08005c65
 8005b4c:	08005be3 	.word	0x08005be3
 8005b50:	08005c65 	.word	0x08005c65
 8005b54:	08005c65 	.word	0x08005c65
 8005b58:	08005c65 	.word	0x08005c65
 8005b5c:	08005c23 	.word	0x08005c23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f9da 	bl	8005f20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699a      	ldr	r2, [r3, #24]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0208 	orr.w	r2, r2, #8
 8005b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699a      	ldr	r2, [r3, #24]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0204 	bic.w	r2, r2, #4
 8005b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	6999      	ldr	r1, [r3, #24]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	691a      	ldr	r2, [r3, #16]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	619a      	str	r2, [r3, #24]
      break;
 8005b9e:	e062      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68b9      	ldr	r1, [r7, #8]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fa20 	bl	8005fec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699a      	ldr	r2, [r3, #24]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	699a      	ldr	r2, [r3, #24]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6999      	ldr	r1, [r3, #24]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	021a      	lsls	r2, r3, #8
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	619a      	str	r2, [r3, #24]
      break;
 8005be0:	e041      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68b9      	ldr	r1, [r7, #8]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f000 fa69 	bl	80060c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	69da      	ldr	r2, [r3, #28]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0208 	orr.w	r2, r2, #8
 8005bfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	69da      	ldr	r2, [r3, #28]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0204 	bic.w	r2, r2, #4
 8005c0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69d9      	ldr	r1, [r3, #28]
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	61da      	str	r2, [r3, #28]
      break;
 8005c20:	e021      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68b9      	ldr	r1, [r7, #8]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fab3 	bl	8006194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	69da      	ldr	r2, [r3, #28]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	69da      	ldr	r2, [r3, #28]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	69d9      	ldr	r1, [r3, #28]
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	021a      	lsls	r2, r3, #8
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	61da      	str	r2, [r3, #28]
      break;
 8005c62:	e000      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005c64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_TIM_ConfigClockSource+0x18>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e0b3      	b.n	8005df8 <HAL_TIM_ConfigClockSource+0x180>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cc8:	d03e      	beq.n	8005d48 <HAL_TIM_ConfigClockSource+0xd0>
 8005cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cce:	f200 8087 	bhi.w	8005de0 <HAL_TIM_ConfigClockSource+0x168>
 8005cd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd6:	f000 8085 	beq.w	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cde:	d87f      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x168>
 8005ce0:	2b70      	cmp	r3, #112	; 0x70
 8005ce2:	d01a      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0xa2>
 8005ce4:	2b70      	cmp	r3, #112	; 0x70
 8005ce6:	d87b      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x168>
 8005ce8:	2b60      	cmp	r3, #96	; 0x60
 8005cea:	d050      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0x116>
 8005cec:	2b60      	cmp	r3, #96	; 0x60
 8005cee:	d877      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x168>
 8005cf0:	2b50      	cmp	r3, #80	; 0x50
 8005cf2:	d03c      	beq.n	8005d6e <HAL_TIM_ConfigClockSource+0xf6>
 8005cf4:	2b50      	cmp	r3, #80	; 0x50
 8005cf6:	d873      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x168>
 8005cf8:	2b40      	cmp	r3, #64	; 0x40
 8005cfa:	d058      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x136>
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	d86f      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x168>
 8005d00:	2b30      	cmp	r3, #48	; 0x30
 8005d02:	d064      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x156>
 8005d04:	2b30      	cmp	r3, #48	; 0x30
 8005d06:	d86b      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x168>
 8005d08:	2b20      	cmp	r3, #32
 8005d0a:	d060      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x156>
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d867      	bhi.n	8005de0 <HAL_TIM_ConfigClockSource+0x168>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d05c      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x156>
 8005d14:	2b10      	cmp	r3, #16
 8005d16:	d05a      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d18:	e062      	b.n	8005de0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6899      	ldr	r1, [r3, #8]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68db      	ldr	r3, [r3, #12]
 8005d2a:	f000 faf8 	bl	800631e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	609a      	str	r2, [r3, #8]
      break;
 8005d46:	e04e      	b.n	8005de6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6818      	ldr	r0, [r3, #0]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	6899      	ldr	r1, [r3, #8]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f000 fae1 	bl	800631e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689a      	ldr	r2, [r3, #8]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d6a:	609a      	str	r2, [r3, #8]
      break;
 8005d6c:	e03b      	b.n	8005de6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	6859      	ldr	r1, [r3, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f000 fa58 	bl	8006230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2150      	movs	r1, #80	; 0x50
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 faaf 	bl	80062ea <TIM_ITRx_SetConfig>
      break;
 8005d8c:	e02b      	b.n	8005de6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6859      	ldr	r1, [r3, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f000 fa76 	bl	800628c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2160      	movs	r1, #96	; 0x60
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fa9f 	bl	80062ea <TIM_ITRx_SetConfig>
      break;
 8005dac:	e01b      	b.n	8005de6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	6859      	ldr	r1, [r3, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f000 fa38 	bl	8006230 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2140      	movs	r1, #64	; 0x40
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fa8f 	bl	80062ea <TIM_ITRx_SetConfig>
      break;
 8005dcc:	e00b      	b.n	8005de6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f000 fa86 	bl	80062ea <TIM_ITRx_SetConfig>
        break;
 8005dde:	e002      	b.n	8005de6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005de0:	bf00      	nop
 8005de2:	e000      	b.n	8005de6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005de4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3710      	adds	r7, #16
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bc80      	pop	{r7}
 8005e10:	4770      	bx	lr

08005e12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b083      	sub	sp, #12
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e1a:	bf00      	nop
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bc80      	pop	{r7}
 8005e34:	4770      	bx	lr

08005e36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bc80      	pop	{r7}
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e50:	bf00      	nop
 8005e52:	370c      	adds	r7, #12
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bc80      	pop	{r7}
 8005e58:	4770      	bx	lr
	...

08005e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a29      	ldr	r2, [pc, #164]	; (8005f14 <TIM_Base_SetConfig+0xb8>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d00b      	beq.n	8005e8c <TIM_Base_SetConfig+0x30>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7a:	d007      	beq.n	8005e8c <TIM_Base_SetConfig+0x30>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a26      	ldr	r2, [pc, #152]	; (8005f18 <TIM_Base_SetConfig+0xbc>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_Base_SetConfig+0x30>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a25      	ldr	r2, [pc, #148]	; (8005f1c <TIM_Base_SetConfig+0xc0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d108      	bne.n	8005e9e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a1c      	ldr	r2, [pc, #112]	; (8005f14 <TIM_Base_SetConfig+0xb8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d00b      	beq.n	8005ebe <TIM_Base_SetConfig+0x62>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eac:	d007      	beq.n	8005ebe <TIM_Base_SetConfig+0x62>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a19      	ldr	r2, [pc, #100]	; (8005f18 <TIM_Base_SetConfig+0xbc>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d003      	beq.n	8005ebe <TIM_Base_SetConfig+0x62>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a18      	ldr	r2, [pc, #96]	; (8005f1c <TIM_Base_SetConfig+0xc0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d108      	bne.n	8005ed0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	695b      	ldr	r3, [r3, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	689a      	ldr	r2, [r3, #8]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a07      	ldr	r2, [pc, #28]	; (8005f14 <TIM_Base_SetConfig+0xb8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d103      	bne.n	8005f04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	691a      	ldr	r2, [r3, #16]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	615a      	str	r2, [r3, #20]
}
 8005f0a:	bf00      	nop
 8005f0c:	3714      	adds	r7, #20
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bc80      	pop	{r7}
 8005f12:	4770      	bx	lr
 8005f14:	40012c00 	.word	0x40012c00
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800

08005f20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	f023 0201 	bic.w	r2, r3, #1
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0303 	bic.w	r3, r3, #3
 8005f56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	f023 0302 	bic.w	r3, r3, #2
 8005f68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a1c      	ldr	r2, [pc, #112]	; (8005fe8 <TIM_OC1_SetConfig+0xc8>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d10c      	bne.n	8005f96 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	f023 0308 	bic.w	r3, r3, #8
 8005f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f023 0304 	bic.w	r3, r3, #4
 8005f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a13      	ldr	r2, [pc, #76]	; (8005fe8 <TIM_OC1_SetConfig+0xc8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d111      	bne.n	8005fc2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	697a      	ldr	r2, [r7, #20]
 8005fda:	621a      	str	r2, [r3, #32]
}
 8005fdc:	bf00      	nop
 8005fde:	371c      	adds	r7, #28
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc80      	pop	{r7}
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40012c00 	.word	0x40012c00

08005fec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	f023 0210 	bic.w	r2, r3, #16
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006022:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	021b      	lsls	r3, r3, #8
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f023 0320 	bic.w	r3, r3, #32
 8006036:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a1d      	ldr	r2, [pc, #116]	; (80060bc <TIM_OC2_SetConfig+0xd0>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d10d      	bne.n	8006068 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006052:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	697a      	ldr	r2, [r7, #20]
 800605c:	4313      	orrs	r3, r2
 800605e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006066:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a14      	ldr	r2, [pc, #80]	; (80060bc <TIM_OC2_SetConfig+0xd0>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d113      	bne.n	8006098 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006076:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800607e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4313      	orrs	r3, r2
 800608a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	699b      	ldr	r3, [r3, #24]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685a      	ldr	r2, [r3, #4]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	697a      	ldr	r2, [r7, #20]
 80060b0:	621a      	str	r2, [r3, #32]
}
 80060b2:	bf00      	nop
 80060b4:	371c      	adds	r7, #28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bc80      	pop	{r7}
 80060ba:	4770      	bx	lr
 80060bc:	40012c00 	.word	0x40012c00

080060c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a1b      	ldr	r3, [r3, #32]
 80060ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f023 0303 	bic.w	r3, r3, #3
 80060f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4313      	orrs	r3, r2
 8006100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	021b      	lsls	r3, r3, #8
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	4313      	orrs	r3, r2
 8006114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a1d      	ldr	r2, [pc, #116]	; (8006190 <TIM_OC3_SetConfig+0xd0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d10d      	bne.n	800613a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006124:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a14      	ldr	r2, [pc, #80]	; (8006190 <TIM_OC3_SetConfig+0xd0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d113      	bne.n	800616a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	011b      	lsls	r3, r3, #4
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	693a      	ldr	r2, [r7, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	621a      	str	r2, [r3, #32]
}
 8006184:	bf00      	nop
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	40012c00 	.word	0x40012c00

08006194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006194:	b480      	push	{r7}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	021b      	lsls	r3, r3, #8
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a0f      	ldr	r2, [pc, #60]	; (800622c <TIM_OC4_SetConfig+0x98>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d109      	bne.n	8006208 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	695b      	ldr	r3, [r3, #20]
 8006200:	019b      	lsls	r3, r3, #6
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	697a      	ldr	r2, [r7, #20]
 800620c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	621a      	str	r2, [r3, #32]
}
 8006222:	bf00      	nop
 8006224:	371c      	adds	r7, #28
 8006226:	46bd      	mov	sp, r7
 8006228:	bc80      	pop	{r7}
 800622a:	4770      	bx	lr
 800622c:	40012c00 	.word	0x40012c00

08006230 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	f023 0201 	bic.w	r2, r3, #1
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800625a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	4313      	orrs	r3, r2
 8006264:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f023 030a 	bic.w	r3, r3, #10
 800626c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4313      	orrs	r3, r2
 8006274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	621a      	str	r2, [r3, #32]
}
 8006282:	bf00      	nop
 8006284:	371c      	adds	r7, #28
 8006286:	46bd      	mov	sp, r7
 8006288:	bc80      	pop	{r7}
 800628a:	4770      	bx	lr

0800628c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f023 0210 	bic.w	r2, r3, #16
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	699b      	ldr	r3, [r3, #24]
 80062a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	031b      	lsls	r3, r3, #12
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	011b      	lsls	r3, r3, #4
 80062ce:	693a      	ldr	r2, [r7, #16]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	621a      	str	r2, [r3, #32]
}
 80062e0:	bf00      	nop
 80062e2:	371c      	adds	r7, #28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bc80      	pop	{r7}
 80062e8:	4770      	bx	lr

080062ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
 80062f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006300:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006302:	683a      	ldr	r2, [r7, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4313      	orrs	r3, r2
 8006308:	f043 0307 	orr.w	r3, r3, #7
 800630c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	609a      	str	r2, [r3, #8]
}
 8006314:	bf00      	nop
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	bc80      	pop	{r7}
 800631c:	4770      	bx	lr

0800631e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800631e:	b480      	push	{r7}
 8006320:	b087      	sub	sp, #28
 8006322:	af00      	add	r7, sp, #0
 8006324:	60f8      	str	r0, [r7, #12]
 8006326:	60b9      	str	r1, [r7, #8]
 8006328:	607a      	str	r2, [r7, #4]
 800632a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006338:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	021a      	lsls	r2, r3, #8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	431a      	orrs	r2, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	4313      	orrs	r3, r2
 8006346:	697a      	ldr	r2, [r7, #20]
 8006348:	4313      	orrs	r3, r2
 800634a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	609a      	str	r2, [r3, #8]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	f003 031f 	and.w	r3, r3, #31
 800636e:	2201      	movs	r2, #1
 8006370:	fa02 f303 	lsl.w	r3, r2, r3
 8006374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a1a      	ldr	r2, [r3, #32]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	43db      	mvns	r3, r3
 800637e:	401a      	ands	r2, r3
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6a1a      	ldr	r2, [r3, #32]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	f003 031f 	and.w	r3, r3, #31
 800638e:	6879      	ldr	r1, [r7, #4]
 8006390:	fa01 f303 	lsl.w	r3, r1, r3
 8006394:	431a      	orrs	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	621a      	str	r2, [r3, #32]
}
 800639a:	bf00      	nop
 800639c:	371c      	adds	r7, #28
 800639e:	46bd      	mov	sp, r7
 80063a0:	bc80      	pop	{r7}
 80063a2:	4770      	bx	lr

080063a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e046      	b.n	800644a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a16      	ldr	r2, [pc, #88]	; (8006454 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00e      	beq.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006408:	d009      	beq.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a12      	ldr	r2, [pc, #72]	; (8006458 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d004      	beq.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a10      	ldr	r2, [pc, #64]	; (800645c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d10c      	bne.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	4313      	orrs	r3, r2
 800642e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	bc80      	pop	{r7}
 8006452:	4770      	bx	lr
 8006454:	40012c00 	.word	0x40012c00
 8006458:	40000400 	.word	0x40000400
 800645c:	40000800 	.word	0x40000800

08006460 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	bc80      	pop	{r7}
 8006470:	4770      	bx	lr

08006472 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800647a:	bf00      	nop
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	bc80      	pop	{r7}
 8006482:	4770      	bx	lr

08006484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e03f      	b.n	8006516 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fc ff72 	bl	8003394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2224      	movs	r2, #36	; 0x24
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68da      	ldr	r2, [r3, #12]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fab1 	bl	8006a30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	695a      	ldr	r2, [r3, #20]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2220      	movs	r2, #32
 8006508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006514:	2300      	movs	r3, #0
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b08a      	sub	sp, #40	; 0x28
 8006522:	af02      	add	r7, sp, #8
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	603b      	str	r3, [r7, #0]
 800652a:	4613      	mov	r3, r2
 800652c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b20      	cmp	r3, #32
 800653c:	d17c      	bne.n	8006638 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <HAL_UART_Transmit+0x2c>
 8006544:	88fb      	ldrh	r3, [r7, #6]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d101      	bne.n	800654e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e075      	b.n	800663a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006554:	2b01      	cmp	r3, #1
 8006556:	d101      	bne.n	800655c <HAL_UART_Transmit+0x3e>
 8006558:	2302      	movs	r3, #2
 800655a:	e06e      	b.n	800663a <HAL_UART_Transmit+0x11c>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2221      	movs	r2, #33	; 0x21
 800656e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006572:	f7fd f99b 	bl	80038ac <HAL_GetTick>
 8006576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	88fa      	ldrh	r2, [r7, #6]
 800657c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	88fa      	ldrh	r2, [r7, #6]
 8006582:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800658c:	d108      	bne.n	80065a0 <HAL_UART_Transmit+0x82>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	691b      	ldr	r3, [r3, #16]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d104      	bne.n	80065a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006596:	2300      	movs	r3, #0
 8006598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	e003      	b.n	80065a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065a4:	2300      	movs	r3, #0
 80065a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80065b0:	e02a      	b.n	8006608 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	2200      	movs	r2, #0
 80065ba:	2180      	movs	r1, #128	; 0x80
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 f946 	bl	800684e <UART_WaitOnFlagUntilTimeout>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d001      	beq.n	80065cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e036      	b.n	800663a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10b      	bne.n	80065ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	881b      	ldrh	r3, [r3, #0]
 80065d6:	461a      	mov	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	3302      	adds	r3, #2
 80065e6:	61bb      	str	r3, [r7, #24]
 80065e8:	e007      	b.n	80065fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	781a      	ldrb	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	3301      	adds	r3, #1
 80065f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065fe:	b29b      	uxth	r3, r3
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d1cf      	bne.n	80065b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2200      	movs	r2, #0
 800661a:	2140      	movs	r1, #64	; 0x40
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 f916 	bl	800684e <UART_WaitOnFlagUntilTimeout>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d001      	beq.n	800662c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e006      	b.n	800663a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006634:	2300      	movs	r3, #0
 8006636:	e000      	b.n	800663a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006638:	2302      	movs	r3, #2
  }
}
 800663a:	4618      	mov	r0, r3
 800663c:	3720      	adds	r7, #32
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b084      	sub	sp, #16
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	60b9      	str	r1, [r7, #8]
 800664c:	4613      	mov	r3, r2
 800664e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b20      	cmp	r3, #32
 800665a:	d11d      	bne.n	8006698 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d002      	beq.n	8006668 <HAL_UART_Receive_DMA+0x26>
 8006662:	88fb      	ldrh	r3, [r7, #6]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e016      	b.n	800669a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <HAL_UART_Receive_DMA+0x38>
 8006676:	2302      	movs	r3, #2
 8006678:	e00f      	b.n	800669a <HAL_UART_Receive_DMA+0x58>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006688:	88fb      	ldrh	r3, [r7, #6]
 800668a:	461a      	mov	r2, r3
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	68f8      	ldr	r0, [r7, #12]
 8006690:	f000 f928 	bl	80068e4 <UART_Start_Receive_DMA>
 8006694:	4603      	mov	r3, r0
 8006696:	e000      	b.n	800669a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006698:	2302      	movs	r3, #2
  }
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bc80      	pop	{r7}
 80066b2:	4770      	bx	lr

080066b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr

080066c6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bc80      	pop	{r7}
 80066d6:	4770      	bx	lr

080066d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bc80      	pop	{r7}
 80066ec:	4770      	bx	lr

080066ee <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b084      	sub	sp, #16
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fa:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0320 	and.w	r3, r3, #32
 8006706:	2b00      	cmp	r3, #0
 8006708:	d12a      	bne.n	8006760 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	68da      	ldr	r2, [r3, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800671e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695a      	ldr	r2, [r3, #20]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0201 	bic.w	r2, r2, #1
 800672e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695a      	ldr	r2, [r3, #20]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800673e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674c:	2b01      	cmp	r3, #1
 800674e:	d107      	bne.n	8006760 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68da      	ldr	r2, [r3, #12]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0210 	bic.w	r2, r2, #16
 800675e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006764:	2b01      	cmp	r3, #1
 8006766:	d106      	bne.n	8006776 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800676c:	4619      	mov	r1, r3
 800676e:	68f8      	ldr	r0, [r7, #12]
 8006770:	f7ff ffb2 	bl	80066d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006774:	e002      	b.n	800677c <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006776:	68f8      	ldr	r0, [r7, #12]
 8006778:	f7ff ff93 	bl	80066a2 <HAL_UART_RxCpltCallback>
}
 800677c:	bf00      	nop
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006790:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006796:	2b01      	cmp	r3, #1
 8006798:	d108      	bne.n	80067ac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800679e:	085b      	lsrs	r3, r3, #1
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	4619      	mov	r1, r3
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f7ff ff97 	bl	80066d8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067aa:	e002      	b.n	80067b2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7ff ff81 	bl	80066b4 <HAL_UART_RxHalfCpltCallback>
}
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b084      	sub	sp, #16
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	bf14      	ite	ne
 80067da:	2301      	movne	r3, #1
 80067dc:	2300      	moveq	r3, #0
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b21      	cmp	r3, #33	; 0x21
 80067ec:	d108      	bne.n	8006800 <UART_DMAError+0x46>
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d005      	beq.n	8006800 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	2200      	movs	r2, #0
 80067f8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80067fa:	68b8      	ldr	r0, [r7, #8]
 80067fc:	f000 f8d6 	bl	80069ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	bf14      	ite	ne
 800680e:	2301      	movne	r3, #1
 8006810:	2300      	moveq	r3, #0
 8006812:	b2db      	uxtb	r3, r3
 8006814:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b22      	cmp	r3, #34	; 0x22
 8006820:	d108      	bne.n	8006834 <UART_DMAError+0x7a>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d005      	beq.n	8006834 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	2200      	movs	r2, #0
 800682c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800682e:	68b8      	ldr	r0, [r7, #8]
 8006830:	f000 f8d1 	bl	80069d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006838:	f043 0210 	orr.w	r2, r3, #16
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006840:	68b8      	ldr	r0, [r7, #8]
 8006842:	f7ff ff40 	bl	80066c6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006846:	bf00      	nop
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	603b      	str	r3, [r7, #0]
 800685a:	4613      	mov	r3, r2
 800685c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800685e:	e02c      	b.n	80068ba <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006866:	d028      	beq.n	80068ba <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d007      	beq.n	800687e <UART_WaitOnFlagUntilTimeout+0x30>
 800686e:	f7fd f81d 	bl	80038ac <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	429a      	cmp	r2, r3
 800687c:	d21d      	bcs.n	80068ba <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68da      	ldr	r2, [r3, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800688c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	695a      	ldr	r2, [r3, #20]
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0201 	bic.w	r2, r2, #1
 800689c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e00f      	b.n	80068da <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4013      	ands	r3, r2
 80068c4:	68ba      	ldr	r2, [r7, #8]
 80068c6:	429a      	cmp	r2, r3
 80068c8:	bf0c      	ite	eq
 80068ca:	2301      	moveq	r3, #1
 80068cc:	2300      	movne	r3, #0
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	79fb      	ldrb	r3, [r7, #7]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d0c3      	beq.n	8006860 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
	...

080068e4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	4613      	mov	r3, r2
 80068f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	88fa      	ldrh	r2, [r7, #6]
 80068fc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2222      	movs	r2, #34	; 0x22
 8006908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	4a23      	ldr	r2, [pc, #140]	; (80069a0 <UART_Start_Receive_DMA+0xbc>)
 8006912:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006918:	4a22      	ldr	r2, [pc, #136]	; (80069a4 <UART_Start_Receive_DMA+0xc0>)
 800691a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006920:	4a21      	ldr	r2, [pc, #132]	; (80069a8 <UART_Start_Receive_DMA+0xc4>)
 8006922:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	2200      	movs	r2, #0
 800692a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800692c:	f107 0308 	add.w	r3, r7, #8
 8006930:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3304      	adds	r3, #4
 800693c:	4619      	mov	r1, r3
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	f7fd f948 	bl	8003bd8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006948:	2300      	movs	r3, #0
 800694a:	613b      	str	r3, [r7, #16]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	613b      	str	r3, [r7, #16]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	68da      	ldr	r2, [r3, #12]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006974:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695a      	ldr	r2, [r3, #20]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f042 0201 	orr.w	r2, r2, #1
 8006984:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695a      	ldr	r2, [r3, #20]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006994:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	080066ef 	.word	0x080066ef
 80069a4:	08006785 	.word	0x08006785
 80069a8:	080067bb 	.word	0x080067bb

080069ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68da      	ldr	r2, [r3, #12]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80069c2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr

080069d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b083      	sub	sp, #12
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68da      	ldr	r2, [r3, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80069ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	695a      	ldr	r2, [r3, #20]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0201 	bic.w	r2, r2, #1
 80069fc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d107      	bne.n	8006a16 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68da      	ldr	r2, [r3, #12]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0210 	bic.w	r2, r2, #16
 8006a14:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bc80      	pop	{r7}
 8006a2c:	4770      	bx	lr
	...

08006a30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	689a      	ldr	r2, [r3, #8]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006a6a:	f023 030c 	bic.w	r3, r3, #12
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6812      	ldr	r2, [r2, #0]
 8006a72:	68b9      	ldr	r1, [r7, #8]
 8006a74:	430b      	orrs	r3, r1
 8006a76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	699a      	ldr	r2, [r3, #24]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2c      	ldr	r2, [pc, #176]	; (8006b44 <UART_SetConfig+0x114>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d103      	bne.n	8006aa0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006a98:	f7fe fc2a 	bl	80052f0 <HAL_RCC_GetPCLK2Freq>
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	e002      	b.n	8006aa6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006aa0:	f7fe fc12 	bl	80052c8 <HAL_RCC_GetPCLK1Freq>
 8006aa4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4613      	mov	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	4413      	add	r3, r2
 8006aae:	009a      	lsls	r2, r3, #2
 8006ab0:	441a      	add	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006abc:	4a22      	ldr	r2, [pc, #136]	; (8006b48 <UART_SetConfig+0x118>)
 8006abe:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac2:	095b      	lsrs	r3, r3, #5
 8006ac4:	0119      	lsls	r1, r3, #4
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	4413      	add	r3, r2
 8006ace:	009a      	lsls	r2, r3, #2
 8006ad0:	441a      	add	r2, r3
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	fbb2 f2f3 	udiv	r2, r2, r3
 8006adc:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <UART_SetConfig+0x118>)
 8006ade:	fba3 0302 	umull	r0, r3, r3, r2
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	2064      	movs	r0, #100	; 0x64
 8006ae6:	fb00 f303 	mul.w	r3, r0, r3
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	3332      	adds	r3, #50	; 0x32
 8006af0:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <UART_SetConfig+0x118>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006afc:	4419      	add	r1, r3
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	009a      	lsls	r2, r3, #2
 8006b08:	441a      	add	r2, r3
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <UART_SetConfig+0x118>)
 8006b16:	fba3 0302 	umull	r0, r3, r3, r2
 8006b1a:	095b      	lsrs	r3, r3, #5
 8006b1c:	2064      	movs	r0, #100	; 0x64
 8006b1e:	fb00 f303 	mul.w	r3, r0, r3
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	011b      	lsls	r3, r3, #4
 8006b26:	3332      	adds	r3, #50	; 0x32
 8006b28:	4a07      	ldr	r2, [pc, #28]	; (8006b48 <UART_SetConfig+0x118>)
 8006b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2e:	095b      	lsrs	r3, r3, #5
 8006b30:	f003 020f 	and.w	r2, r3, #15
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	440a      	add	r2, r1
 8006b3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}
 8006b44:	40013800 	.word	0x40013800
 8006b48:	51eb851f 	.word	0x51eb851f

08006b4c <__assert_func>:
 8006b4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b4e:	4614      	mov	r4, r2
 8006b50:	461a      	mov	r2, r3
 8006b52:	4b09      	ldr	r3, [pc, #36]	; (8006b78 <__assert_func+0x2c>)
 8006b54:	4605      	mov	r5, r0
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68d8      	ldr	r0, [r3, #12]
 8006b5a:	b14c      	cbz	r4, 8006b70 <__assert_func+0x24>
 8006b5c:	4b07      	ldr	r3, [pc, #28]	; (8006b7c <__assert_func+0x30>)
 8006b5e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b62:	9100      	str	r1, [sp, #0]
 8006b64:	462b      	mov	r3, r5
 8006b66:	4906      	ldr	r1, [pc, #24]	; (8006b80 <__assert_func+0x34>)
 8006b68:	f000 f814 	bl	8006b94 <fiprintf>
 8006b6c:	f000 fed6 	bl	800791c <abort>
 8006b70:	4b04      	ldr	r3, [pc, #16]	; (8006b84 <__assert_func+0x38>)
 8006b72:	461c      	mov	r4, r3
 8006b74:	e7f3      	b.n	8006b5e <__assert_func+0x12>
 8006b76:	bf00      	nop
 8006b78:	20000010 	.word	0x20000010
 8006b7c:	080096c4 	.word	0x080096c4
 8006b80:	080096d1 	.word	0x080096d1
 8006b84:	080096ff 	.word	0x080096ff

08006b88 <__errno>:
 8006b88:	4b01      	ldr	r3, [pc, #4]	; (8006b90 <__errno+0x8>)
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	20000010 	.word	0x20000010

08006b94 <fiprintf>:
 8006b94:	b40e      	push	{r1, r2, r3}
 8006b96:	b503      	push	{r0, r1, lr}
 8006b98:	4601      	mov	r1, r0
 8006b9a:	ab03      	add	r3, sp, #12
 8006b9c:	4805      	ldr	r0, [pc, #20]	; (8006bb4 <fiprintf+0x20>)
 8006b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba2:	6800      	ldr	r0, [r0, #0]
 8006ba4:	9301      	str	r3, [sp, #4]
 8006ba6:	f000 f869 	bl	8006c7c <_vfiprintf_r>
 8006baa:	b002      	add	sp, #8
 8006bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bb0:	b003      	add	sp, #12
 8006bb2:	4770      	bx	lr
 8006bb4:	20000010 	.word	0x20000010

08006bb8 <__libc_init_array>:
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	2600      	movs	r6, #0
 8006bbc:	4d0c      	ldr	r5, [pc, #48]	; (8006bf0 <__libc_init_array+0x38>)
 8006bbe:	4c0d      	ldr	r4, [pc, #52]	; (8006bf4 <__libc_init_array+0x3c>)
 8006bc0:	1b64      	subs	r4, r4, r5
 8006bc2:	10a4      	asrs	r4, r4, #2
 8006bc4:	42a6      	cmp	r6, r4
 8006bc6:	d109      	bne.n	8006bdc <__libc_init_array+0x24>
 8006bc8:	f002 fd26 	bl	8009618 <_init>
 8006bcc:	2600      	movs	r6, #0
 8006bce:	4d0a      	ldr	r5, [pc, #40]	; (8006bf8 <__libc_init_array+0x40>)
 8006bd0:	4c0a      	ldr	r4, [pc, #40]	; (8006bfc <__libc_init_array+0x44>)
 8006bd2:	1b64      	subs	r4, r4, r5
 8006bd4:	10a4      	asrs	r4, r4, #2
 8006bd6:	42a6      	cmp	r6, r4
 8006bd8:	d105      	bne.n	8006be6 <__libc_init_array+0x2e>
 8006bda:	bd70      	pop	{r4, r5, r6, pc}
 8006bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006be0:	4798      	blx	r3
 8006be2:	3601      	adds	r6, #1
 8006be4:	e7ee      	b.n	8006bc4 <__libc_init_array+0xc>
 8006be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bea:	4798      	blx	r3
 8006bec:	3601      	adds	r6, #1
 8006bee:	e7f2      	b.n	8006bd6 <__libc_init_array+0x1e>
 8006bf0:	08009aa0 	.word	0x08009aa0
 8006bf4:	08009aa0 	.word	0x08009aa0
 8006bf8:	08009aa0 	.word	0x08009aa0
 8006bfc:	08009aa4 	.word	0x08009aa4

08006c00 <memcpy>:
 8006c00:	440a      	add	r2, r1
 8006c02:	4291      	cmp	r1, r2
 8006c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c08:	d100      	bne.n	8006c0c <memcpy+0xc>
 8006c0a:	4770      	bx	lr
 8006c0c:	b510      	push	{r4, lr}
 8006c0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c12:	4291      	cmp	r1, r2
 8006c14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c18:	d1f9      	bne.n	8006c0e <memcpy+0xe>
 8006c1a:	bd10      	pop	{r4, pc}

08006c1c <memset>:
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	4402      	add	r2, r0
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d100      	bne.n	8006c26 <memset+0xa>
 8006c24:	4770      	bx	lr
 8006c26:	f803 1b01 	strb.w	r1, [r3], #1
 8006c2a:	e7f9      	b.n	8006c20 <memset+0x4>

08006c2c <__sfputc_r>:
 8006c2c:	6893      	ldr	r3, [r2, #8]
 8006c2e:	b410      	push	{r4}
 8006c30:	3b01      	subs	r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	6093      	str	r3, [r2, #8]
 8006c36:	da07      	bge.n	8006c48 <__sfputc_r+0x1c>
 8006c38:	6994      	ldr	r4, [r2, #24]
 8006c3a:	42a3      	cmp	r3, r4
 8006c3c:	db01      	blt.n	8006c42 <__sfputc_r+0x16>
 8006c3e:	290a      	cmp	r1, #10
 8006c40:	d102      	bne.n	8006c48 <__sfputc_r+0x1c>
 8006c42:	bc10      	pop	{r4}
 8006c44:	f000 bdaa 	b.w	800779c <__swbuf_r>
 8006c48:	6813      	ldr	r3, [r2, #0]
 8006c4a:	1c58      	adds	r0, r3, #1
 8006c4c:	6010      	str	r0, [r2, #0]
 8006c4e:	7019      	strb	r1, [r3, #0]
 8006c50:	4608      	mov	r0, r1
 8006c52:	bc10      	pop	{r4}
 8006c54:	4770      	bx	lr

08006c56 <__sfputs_r>:
 8006c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c58:	4606      	mov	r6, r0
 8006c5a:	460f      	mov	r7, r1
 8006c5c:	4614      	mov	r4, r2
 8006c5e:	18d5      	adds	r5, r2, r3
 8006c60:	42ac      	cmp	r4, r5
 8006c62:	d101      	bne.n	8006c68 <__sfputs_r+0x12>
 8006c64:	2000      	movs	r0, #0
 8006c66:	e007      	b.n	8006c78 <__sfputs_r+0x22>
 8006c68:	463a      	mov	r2, r7
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c70:	f7ff ffdc 	bl	8006c2c <__sfputc_r>
 8006c74:	1c43      	adds	r3, r0, #1
 8006c76:	d1f3      	bne.n	8006c60 <__sfputs_r+0xa>
 8006c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c7c <_vfiprintf_r>:
 8006c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c80:	460d      	mov	r5, r1
 8006c82:	4614      	mov	r4, r2
 8006c84:	4698      	mov	r8, r3
 8006c86:	4606      	mov	r6, r0
 8006c88:	b09d      	sub	sp, #116	; 0x74
 8006c8a:	b118      	cbz	r0, 8006c94 <_vfiprintf_r+0x18>
 8006c8c:	6983      	ldr	r3, [r0, #24]
 8006c8e:	b90b      	cbnz	r3, 8006c94 <_vfiprintf_r+0x18>
 8006c90:	f001 fdde 	bl	8008850 <__sinit>
 8006c94:	4b89      	ldr	r3, [pc, #548]	; (8006ebc <_vfiprintf_r+0x240>)
 8006c96:	429d      	cmp	r5, r3
 8006c98:	d11b      	bne.n	8006cd2 <_vfiprintf_r+0x56>
 8006c9a:	6875      	ldr	r5, [r6, #4]
 8006c9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c9e:	07d9      	lsls	r1, r3, #31
 8006ca0:	d405      	bmi.n	8006cae <_vfiprintf_r+0x32>
 8006ca2:	89ab      	ldrh	r3, [r5, #12]
 8006ca4:	059a      	lsls	r2, r3, #22
 8006ca6:	d402      	bmi.n	8006cae <_vfiprintf_r+0x32>
 8006ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006caa:	f001 fe74 	bl	8008996 <__retarget_lock_acquire_recursive>
 8006cae:	89ab      	ldrh	r3, [r5, #12]
 8006cb0:	071b      	lsls	r3, r3, #28
 8006cb2:	d501      	bpl.n	8006cb8 <_vfiprintf_r+0x3c>
 8006cb4:	692b      	ldr	r3, [r5, #16]
 8006cb6:	b9eb      	cbnz	r3, 8006cf4 <_vfiprintf_r+0x78>
 8006cb8:	4629      	mov	r1, r5
 8006cba:	4630      	mov	r0, r6
 8006cbc:	f000 fdc0 	bl	8007840 <__swsetup_r>
 8006cc0:	b1c0      	cbz	r0, 8006cf4 <_vfiprintf_r+0x78>
 8006cc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cc4:	07dc      	lsls	r4, r3, #31
 8006cc6:	d50e      	bpl.n	8006ce6 <_vfiprintf_r+0x6a>
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	b01d      	add	sp, #116	; 0x74
 8006cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd2:	4b7b      	ldr	r3, [pc, #492]	; (8006ec0 <_vfiprintf_r+0x244>)
 8006cd4:	429d      	cmp	r5, r3
 8006cd6:	d101      	bne.n	8006cdc <_vfiprintf_r+0x60>
 8006cd8:	68b5      	ldr	r5, [r6, #8]
 8006cda:	e7df      	b.n	8006c9c <_vfiprintf_r+0x20>
 8006cdc:	4b79      	ldr	r3, [pc, #484]	; (8006ec4 <_vfiprintf_r+0x248>)
 8006cde:	429d      	cmp	r5, r3
 8006ce0:	bf08      	it	eq
 8006ce2:	68f5      	ldreq	r5, [r6, #12]
 8006ce4:	e7da      	b.n	8006c9c <_vfiprintf_r+0x20>
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	0598      	lsls	r0, r3, #22
 8006cea:	d4ed      	bmi.n	8006cc8 <_vfiprintf_r+0x4c>
 8006cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cee:	f001 fe53 	bl	8008998 <__retarget_lock_release_recursive>
 8006cf2:	e7e9      	b.n	8006cc8 <_vfiprintf_r+0x4c>
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf8:	2320      	movs	r3, #32
 8006cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cfe:	2330      	movs	r3, #48	; 0x30
 8006d00:	f04f 0901 	mov.w	r9, #1
 8006d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d08:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006ec8 <_vfiprintf_r+0x24c>
 8006d0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d10:	4623      	mov	r3, r4
 8006d12:	469a      	mov	sl, r3
 8006d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d18:	b10a      	cbz	r2, 8006d1e <_vfiprintf_r+0xa2>
 8006d1a:	2a25      	cmp	r2, #37	; 0x25
 8006d1c:	d1f9      	bne.n	8006d12 <_vfiprintf_r+0x96>
 8006d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8006d22:	d00b      	beq.n	8006d3c <_vfiprintf_r+0xc0>
 8006d24:	465b      	mov	r3, fp
 8006d26:	4622      	mov	r2, r4
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f7ff ff93 	bl	8006c56 <__sfputs_r>
 8006d30:	3001      	adds	r0, #1
 8006d32:	f000 80aa 	beq.w	8006e8a <_vfiprintf_r+0x20e>
 8006d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d38:	445a      	add	r2, fp
 8006d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8006d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f000 80a2 	beq.w	8006e8a <_vfiprintf_r+0x20e>
 8006d46:	2300      	movs	r3, #0
 8006d48:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d50:	f10a 0a01 	add.w	sl, sl, #1
 8006d54:	9304      	str	r3, [sp, #16]
 8006d56:	9307      	str	r3, [sp, #28]
 8006d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8006d5e:	4654      	mov	r4, sl
 8006d60:	2205      	movs	r2, #5
 8006d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d66:	4858      	ldr	r0, [pc, #352]	; (8006ec8 <_vfiprintf_r+0x24c>)
 8006d68:	f001 fe84 	bl	8008a74 <memchr>
 8006d6c:	9a04      	ldr	r2, [sp, #16]
 8006d6e:	b9d8      	cbnz	r0, 8006da8 <_vfiprintf_r+0x12c>
 8006d70:	06d1      	lsls	r1, r2, #27
 8006d72:	bf44      	itt	mi
 8006d74:	2320      	movmi	r3, #32
 8006d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d7a:	0713      	lsls	r3, r2, #28
 8006d7c:	bf44      	itt	mi
 8006d7e:	232b      	movmi	r3, #43	; 0x2b
 8006d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d84:	f89a 3000 	ldrb.w	r3, [sl]
 8006d88:	2b2a      	cmp	r3, #42	; 0x2a
 8006d8a:	d015      	beq.n	8006db8 <_vfiprintf_r+0x13c>
 8006d8c:	4654      	mov	r4, sl
 8006d8e:	2000      	movs	r0, #0
 8006d90:	f04f 0c0a 	mov.w	ip, #10
 8006d94:	9a07      	ldr	r2, [sp, #28]
 8006d96:	4621      	mov	r1, r4
 8006d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d9c:	3b30      	subs	r3, #48	; 0x30
 8006d9e:	2b09      	cmp	r3, #9
 8006da0:	d94e      	bls.n	8006e40 <_vfiprintf_r+0x1c4>
 8006da2:	b1b0      	cbz	r0, 8006dd2 <_vfiprintf_r+0x156>
 8006da4:	9207      	str	r2, [sp, #28]
 8006da6:	e014      	b.n	8006dd2 <_vfiprintf_r+0x156>
 8006da8:	eba0 0308 	sub.w	r3, r0, r8
 8006dac:	fa09 f303 	lsl.w	r3, r9, r3
 8006db0:	4313      	orrs	r3, r2
 8006db2:	46a2      	mov	sl, r4
 8006db4:	9304      	str	r3, [sp, #16]
 8006db6:	e7d2      	b.n	8006d5e <_vfiprintf_r+0xe2>
 8006db8:	9b03      	ldr	r3, [sp, #12]
 8006dba:	1d19      	adds	r1, r3, #4
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	9103      	str	r1, [sp, #12]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	bfbb      	ittet	lt
 8006dc4:	425b      	neglt	r3, r3
 8006dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8006dca:	9307      	strge	r3, [sp, #28]
 8006dcc:	9307      	strlt	r3, [sp, #28]
 8006dce:	bfb8      	it	lt
 8006dd0:	9204      	strlt	r2, [sp, #16]
 8006dd2:	7823      	ldrb	r3, [r4, #0]
 8006dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8006dd6:	d10c      	bne.n	8006df2 <_vfiprintf_r+0x176>
 8006dd8:	7863      	ldrb	r3, [r4, #1]
 8006dda:	2b2a      	cmp	r3, #42	; 0x2a
 8006ddc:	d135      	bne.n	8006e4a <_vfiprintf_r+0x1ce>
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	3402      	adds	r4, #2
 8006de2:	1d1a      	adds	r2, r3, #4
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	9203      	str	r2, [sp, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	bfb8      	it	lt
 8006dec:	f04f 33ff 	movlt.w	r3, #4294967295
 8006df0:	9305      	str	r3, [sp, #20]
 8006df2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006ecc <_vfiprintf_r+0x250>
 8006df6:	2203      	movs	r2, #3
 8006df8:	4650      	mov	r0, sl
 8006dfa:	7821      	ldrb	r1, [r4, #0]
 8006dfc:	f001 fe3a 	bl	8008a74 <memchr>
 8006e00:	b140      	cbz	r0, 8006e14 <_vfiprintf_r+0x198>
 8006e02:	2340      	movs	r3, #64	; 0x40
 8006e04:	eba0 000a 	sub.w	r0, r0, sl
 8006e08:	fa03 f000 	lsl.w	r0, r3, r0
 8006e0c:	9b04      	ldr	r3, [sp, #16]
 8006e0e:	3401      	adds	r4, #1
 8006e10:	4303      	orrs	r3, r0
 8006e12:	9304      	str	r3, [sp, #16]
 8006e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e18:	2206      	movs	r2, #6
 8006e1a:	482d      	ldr	r0, [pc, #180]	; (8006ed0 <_vfiprintf_r+0x254>)
 8006e1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e20:	f001 fe28 	bl	8008a74 <memchr>
 8006e24:	2800      	cmp	r0, #0
 8006e26:	d03f      	beq.n	8006ea8 <_vfiprintf_r+0x22c>
 8006e28:	4b2a      	ldr	r3, [pc, #168]	; (8006ed4 <_vfiprintf_r+0x258>)
 8006e2a:	bb1b      	cbnz	r3, 8006e74 <_vfiprintf_r+0x1f8>
 8006e2c:	9b03      	ldr	r3, [sp, #12]
 8006e2e:	3307      	adds	r3, #7
 8006e30:	f023 0307 	bic.w	r3, r3, #7
 8006e34:	3308      	adds	r3, #8
 8006e36:	9303      	str	r3, [sp, #12]
 8006e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e3a:	443b      	add	r3, r7
 8006e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8006e3e:	e767      	b.n	8006d10 <_vfiprintf_r+0x94>
 8006e40:	460c      	mov	r4, r1
 8006e42:	2001      	movs	r0, #1
 8006e44:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e48:	e7a5      	b.n	8006d96 <_vfiprintf_r+0x11a>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f04f 0c0a 	mov.w	ip, #10
 8006e50:	4619      	mov	r1, r3
 8006e52:	3401      	adds	r4, #1
 8006e54:	9305      	str	r3, [sp, #20]
 8006e56:	4620      	mov	r0, r4
 8006e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e5c:	3a30      	subs	r2, #48	; 0x30
 8006e5e:	2a09      	cmp	r2, #9
 8006e60:	d903      	bls.n	8006e6a <_vfiprintf_r+0x1ee>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d0c5      	beq.n	8006df2 <_vfiprintf_r+0x176>
 8006e66:	9105      	str	r1, [sp, #20]
 8006e68:	e7c3      	b.n	8006df2 <_vfiprintf_r+0x176>
 8006e6a:	4604      	mov	r4, r0
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e72:	e7f0      	b.n	8006e56 <_vfiprintf_r+0x1da>
 8006e74:	ab03      	add	r3, sp, #12
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	462a      	mov	r2, r5
 8006e7a:	4630      	mov	r0, r6
 8006e7c:	4b16      	ldr	r3, [pc, #88]	; (8006ed8 <_vfiprintf_r+0x25c>)
 8006e7e:	a904      	add	r1, sp, #16
 8006e80:	f000 f8ca 	bl	8007018 <_printf_float>
 8006e84:	4607      	mov	r7, r0
 8006e86:	1c78      	adds	r0, r7, #1
 8006e88:	d1d6      	bne.n	8006e38 <_vfiprintf_r+0x1bc>
 8006e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e8c:	07d9      	lsls	r1, r3, #31
 8006e8e:	d405      	bmi.n	8006e9c <_vfiprintf_r+0x220>
 8006e90:	89ab      	ldrh	r3, [r5, #12]
 8006e92:	059a      	lsls	r2, r3, #22
 8006e94:	d402      	bmi.n	8006e9c <_vfiprintf_r+0x220>
 8006e96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e98:	f001 fd7e 	bl	8008998 <__retarget_lock_release_recursive>
 8006e9c:	89ab      	ldrh	r3, [r5, #12]
 8006e9e:	065b      	lsls	r3, r3, #25
 8006ea0:	f53f af12 	bmi.w	8006cc8 <_vfiprintf_r+0x4c>
 8006ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ea6:	e711      	b.n	8006ccc <_vfiprintf_r+0x50>
 8006ea8:	ab03      	add	r3, sp, #12
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	462a      	mov	r2, r5
 8006eae:	4630      	mov	r0, r6
 8006eb0:	4b09      	ldr	r3, [pc, #36]	; (8006ed8 <_vfiprintf_r+0x25c>)
 8006eb2:	a904      	add	r1, sp, #16
 8006eb4:	f000 fb4c 	bl	8007550 <_printf_i>
 8006eb8:	e7e4      	b.n	8006e84 <_vfiprintf_r+0x208>
 8006eba:	bf00      	nop
 8006ebc:	080097fc 	.word	0x080097fc
 8006ec0:	0800981c 	.word	0x0800981c
 8006ec4:	080097dc 	.word	0x080097dc
 8006ec8:	08009704 	.word	0x08009704
 8006ecc:	0800970a 	.word	0x0800970a
 8006ed0:	0800970e 	.word	0x0800970e
 8006ed4:	08007019 	.word	0x08007019
 8006ed8:	08006c57 	.word	0x08006c57

08006edc <__cvt>:
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee2:	461f      	mov	r7, r3
 8006ee4:	bfbb      	ittet	lt
 8006ee6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8006eea:	461f      	movlt	r7, r3
 8006eec:	2300      	movge	r3, #0
 8006eee:	232d      	movlt	r3, #45	; 0x2d
 8006ef0:	b088      	sub	sp, #32
 8006ef2:	4614      	mov	r4, r2
 8006ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ef6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006ef8:	7013      	strb	r3, [r2, #0]
 8006efa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006efc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006f00:	f023 0820 	bic.w	r8, r3, #32
 8006f04:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f08:	d005      	beq.n	8006f16 <__cvt+0x3a>
 8006f0a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f0e:	d100      	bne.n	8006f12 <__cvt+0x36>
 8006f10:	3501      	adds	r5, #1
 8006f12:	2302      	movs	r3, #2
 8006f14:	e000      	b.n	8006f18 <__cvt+0x3c>
 8006f16:	2303      	movs	r3, #3
 8006f18:	aa07      	add	r2, sp, #28
 8006f1a:	9204      	str	r2, [sp, #16]
 8006f1c:	aa06      	add	r2, sp, #24
 8006f1e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006f22:	e9cd 3500 	strd	r3, r5, [sp]
 8006f26:	4622      	mov	r2, r4
 8006f28:	463b      	mov	r3, r7
 8006f2a:	f000 fd8d 	bl	8007a48 <_dtoa_r>
 8006f2e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006f32:	4606      	mov	r6, r0
 8006f34:	d102      	bne.n	8006f3c <__cvt+0x60>
 8006f36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006f38:	07db      	lsls	r3, r3, #31
 8006f3a:	d522      	bpl.n	8006f82 <__cvt+0xa6>
 8006f3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f40:	eb06 0905 	add.w	r9, r6, r5
 8006f44:	d110      	bne.n	8006f68 <__cvt+0x8c>
 8006f46:	7833      	ldrb	r3, [r6, #0]
 8006f48:	2b30      	cmp	r3, #48	; 0x30
 8006f4a:	d10a      	bne.n	8006f62 <__cvt+0x86>
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2300      	movs	r3, #0
 8006f50:	4620      	mov	r0, r4
 8006f52:	4639      	mov	r1, r7
 8006f54:	f7f9 fd28 	bl	80009a8 <__aeabi_dcmpeq>
 8006f58:	b918      	cbnz	r0, 8006f62 <__cvt+0x86>
 8006f5a:	f1c5 0501 	rsb	r5, r5, #1
 8006f5e:	f8ca 5000 	str.w	r5, [sl]
 8006f62:	f8da 3000 	ldr.w	r3, [sl]
 8006f66:	4499      	add	r9, r3
 8006f68:	2200      	movs	r2, #0
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	4639      	mov	r1, r7
 8006f70:	f7f9 fd1a 	bl	80009a8 <__aeabi_dcmpeq>
 8006f74:	b108      	cbz	r0, 8006f7a <__cvt+0x9e>
 8006f76:	f8cd 901c 	str.w	r9, [sp, #28]
 8006f7a:	2230      	movs	r2, #48	; 0x30
 8006f7c:	9b07      	ldr	r3, [sp, #28]
 8006f7e:	454b      	cmp	r3, r9
 8006f80:	d307      	bcc.n	8006f92 <__cvt+0xb6>
 8006f82:	4630      	mov	r0, r6
 8006f84:	9b07      	ldr	r3, [sp, #28]
 8006f86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006f88:	1b9b      	subs	r3, r3, r6
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	b008      	add	sp, #32
 8006f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f92:	1c59      	adds	r1, r3, #1
 8006f94:	9107      	str	r1, [sp, #28]
 8006f96:	701a      	strb	r2, [r3, #0]
 8006f98:	e7f0      	b.n	8006f7c <__cvt+0xa0>

08006f9a <__exponent>:
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	f803 2b02 	strb.w	r2, [r3], #2
 8006fa4:	bfb6      	itet	lt
 8006fa6:	222d      	movlt	r2, #45	; 0x2d
 8006fa8:	222b      	movge	r2, #43	; 0x2b
 8006faa:	4249      	neglt	r1, r1
 8006fac:	2909      	cmp	r1, #9
 8006fae:	7042      	strb	r2, [r0, #1]
 8006fb0:	dd2b      	ble.n	800700a <__exponent+0x70>
 8006fb2:	f10d 0407 	add.w	r4, sp, #7
 8006fb6:	46a4      	mov	ip, r4
 8006fb8:	270a      	movs	r7, #10
 8006fba:	fb91 f6f7 	sdiv	r6, r1, r7
 8006fbe:	460a      	mov	r2, r1
 8006fc0:	46a6      	mov	lr, r4
 8006fc2:	fb07 1516 	mls	r5, r7, r6, r1
 8006fc6:	2a63      	cmp	r2, #99	; 0x63
 8006fc8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006fcc:	4631      	mov	r1, r6
 8006fce:	f104 34ff 	add.w	r4, r4, #4294967295
 8006fd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006fd6:	dcf0      	bgt.n	8006fba <__exponent+0x20>
 8006fd8:	3130      	adds	r1, #48	; 0x30
 8006fda:	f1ae 0502 	sub.w	r5, lr, #2
 8006fde:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	1c44      	adds	r4, r0, #1
 8006fe6:	4561      	cmp	r1, ip
 8006fe8:	d30a      	bcc.n	8007000 <__exponent+0x66>
 8006fea:	f10d 0209 	add.w	r2, sp, #9
 8006fee:	eba2 020e 	sub.w	r2, r2, lr
 8006ff2:	4565      	cmp	r5, ip
 8006ff4:	bf88      	it	hi
 8006ff6:	2200      	movhi	r2, #0
 8006ff8:	4413      	add	r3, r2
 8006ffa:	1a18      	subs	r0, r3, r0
 8006ffc:	b003      	add	sp, #12
 8006ffe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007000:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007004:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007008:	e7ed      	b.n	8006fe6 <__exponent+0x4c>
 800700a:	2330      	movs	r3, #48	; 0x30
 800700c:	3130      	adds	r1, #48	; 0x30
 800700e:	7083      	strb	r3, [r0, #2]
 8007010:	70c1      	strb	r1, [r0, #3]
 8007012:	1d03      	adds	r3, r0, #4
 8007014:	e7f1      	b.n	8006ffa <__exponent+0x60>
	...

08007018 <_printf_float>:
 8007018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800701c:	b091      	sub	sp, #68	; 0x44
 800701e:	460c      	mov	r4, r1
 8007020:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007024:	4616      	mov	r6, r2
 8007026:	461f      	mov	r7, r3
 8007028:	4605      	mov	r5, r0
 800702a:	f001 fcaf 	bl	800898c <_localeconv_r>
 800702e:	6803      	ldr	r3, [r0, #0]
 8007030:	4618      	mov	r0, r3
 8007032:	9309      	str	r3, [sp, #36]	; 0x24
 8007034:	f7f9 f88c 	bl	8000150 <strlen>
 8007038:	2300      	movs	r3, #0
 800703a:	930e      	str	r3, [sp, #56]	; 0x38
 800703c:	f8d8 3000 	ldr.w	r3, [r8]
 8007040:	900a      	str	r0, [sp, #40]	; 0x28
 8007042:	3307      	adds	r3, #7
 8007044:	f023 0307 	bic.w	r3, r3, #7
 8007048:	f103 0208 	add.w	r2, r3, #8
 800704c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007050:	f8d4 b000 	ldr.w	fp, [r4]
 8007054:	f8c8 2000 	str.w	r2, [r8]
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007060:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007064:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007068:	930b      	str	r3, [sp, #44]	; 0x2c
 800706a:	f04f 32ff 	mov.w	r2, #4294967295
 800706e:	4640      	mov	r0, r8
 8007070:	4b9c      	ldr	r3, [pc, #624]	; (80072e4 <_printf_float+0x2cc>)
 8007072:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007074:	f7f9 fcca 	bl	8000a0c <__aeabi_dcmpun>
 8007078:	bb70      	cbnz	r0, 80070d8 <_printf_float+0xc0>
 800707a:	f04f 32ff 	mov.w	r2, #4294967295
 800707e:	4640      	mov	r0, r8
 8007080:	4b98      	ldr	r3, [pc, #608]	; (80072e4 <_printf_float+0x2cc>)
 8007082:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007084:	f7f9 fca4 	bl	80009d0 <__aeabi_dcmple>
 8007088:	bb30      	cbnz	r0, 80070d8 <_printf_float+0xc0>
 800708a:	2200      	movs	r2, #0
 800708c:	2300      	movs	r3, #0
 800708e:	4640      	mov	r0, r8
 8007090:	4651      	mov	r1, sl
 8007092:	f7f9 fc93 	bl	80009bc <__aeabi_dcmplt>
 8007096:	b110      	cbz	r0, 800709e <_printf_float+0x86>
 8007098:	232d      	movs	r3, #45	; 0x2d
 800709a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800709e:	4b92      	ldr	r3, [pc, #584]	; (80072e8 <_printf_float+0x2d0>)
 80070a0:	4892      	ldr	r0, [pc, #584]	; (80072ec <_printf_float+0x2d4>)
 80070a2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80070a6:	bf94      	ite	ls
 80070a8:	4698      	movls	r8, r3
 80070aa:	4680      	movhi	r8, r0
 80070ac:	2303      	movs	r3, #3
 80070ae:	f04f 0a00 	mov.w	sl, #0
 80070b2:	6123      	str	r3, [r4, #16]
 80070b4:	f02b 0304 	bic.w	r3, fp, #4
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	4633      	mov	r3, r6
 80070bc:	4621      	mov	r1, r4
 80070be:	4628      	mov	r0, r5
 80070c0:	9700      	str	r7, [sp, #0]
 80070c2:	aa0f      	add	r2, sp, #60	; 0x3c
 80070c4:	f000 f9d4 	bl	8007470 <_printf_common>
 80070c8:	3001      	adds	r0, #1
 80070ca:	f040 8090 	bne.w	80071ee <_printf_float+0x1d6>
 80070ce:	f04f 30ff 	mov.w	r0, #4294967295
 80070d2:	b011      	add	sp, #68	; 0x44
 80070d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070d8:	4642      	mov	r2, r8
 80070da:	4653      	mov	r3, sl
 80070dc:	4640      	mov	r0, r8
 80070de:	4651      	mov	r1, sl
 80070e0:	f7f9 fc94 	bl	8000a0c <__aeabi_dcmpun>
 80070e4:	b148      	cbz	r0, 80070fa <_printf_float+0xe2>
 80070e6:	f1ba 0f00 	cmp.w	sl, #0
 80070ea:	bfb8      	it	lt
 80070ec:	232d      	movlt	r3, #45	; 0x2d
 80070ee:	4880      	ldr	r0, [pc, #512]	; (80072f0 <_printf_float+0x2d8>)
 80070f0:	bfb8      	it	lt
 80070f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80070f6:	4b7f      	ldr	r3, [pc, #508]	; (80072f4 <_printf_float+0x2dc>)
 80070f8:	e7d3      	b.n	80070a2 <_printf_float+0x8a>
 80070fa:	6863      	ldr	r3, [r4, #4]
 80070fc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	d142      	bne.n	800718a <_printf_float+0x172>
 8007104:	2306      	movs	r3, #6
 8007106:	6063      	str	r3, [r4, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	9206      	str	r2, [sp, #24]
 800710c:	aa0e      	add	r2, sp, #56	; 0x38
 800710e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8007112:	aa0d      	add	r2, sp, #52	; 0x34
 8007114:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007118:	9203      	str	r2, [sp, #12]
 800711a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800711e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007122:	6023      	str	r3, [r4, #0]
 8007124:	6863      	ldr	r3, [r4, #4]
 8007126:	4642      	mov	r2, r8
 8007128:	9300      	str	r3, [sp, #0]
 800712a:	4628      	mov	r0, r5
 800712c:	4653      	mov	r3, sl
 800712e:	910b      	str	r1, [sp, #44]	; 0x2c
 8007130:	f7ff fed4 	bl	8006edc <__cvt>
 8007134:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007136:	4680      	mov	r8, r0
 8007138:	2947      	cmp	r1, #71	; 0x47
 800713a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800713c:	d108      	bne.n	8007150 <_printf_float+0x138>
 800713e:	1cc8      	adds	r0, r1, #3
 8007140:	db02      	blt.n	8007148 <_printf_float+0x130>
 8007142:	6863      	ldr	r3, [r4, #4]
 8007144:	4299      	cmp	r1, r3
 8007146:	dd40      	ble.n	80071ca <_printf_float+0x1b2>
 8007148:	f1a9 0902 	sub.w	r9, r9, #2
 800714c:	fa5f f989 	uxtb.w	r9, r9
 8007150:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007154:	d81f      	bhi.n	8007196 <_printf_float+0x17e>
 8007156:	464a      	mov	r2, r9
 8007158:	3901      	subs	r1, #1
 800715a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800715e:	910d      	str	r1, [sp, #52]	; 0x34
 8007160:	f7ff ff1b 	bl	8006f9a <__exponent>
 8007164:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007166:	4682      	mov	sl, r0
 8007168:	1813      	adds	r3, r2, r0
 800716a:	2a01      	cmp	r2, #1
 800716c:	6123      	str	r3, [r4, #16]
 800716e:	dc02      	bgt.n	8007176 <_printf_float+0x15e>
 8007170:	6822      	ldr	r2, [r4, #0]
 8007172:	07d2      	lsls	r2, r2, #31
 8007174:	d501      	bpl.n	800717a <_printf_float+0x162>
 8007176:	3301      	adds	r3, #1
 8007178:	6123      	str	r3, [r4, #16]
 800717a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800717e:	2b00      	cmp	r3, #0
 8007180:	d09b      	beq.n	80070ba <_printf_float+0xa2>
 8007182:	232d      	movs	r3, #45	; 0x2d
 8007184:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007188:	e797      	b.n	80070ba <_printf_float+0xa2>
 800718a:	2947      	cmp	r1, #71	; 0x47
 800718c:	d1bc      	bne.n	8007108 <_printf_float+0xf0>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1ba      	bne.n	8007108 <_printf_float+0xf0>
 8007192:	2301      	movs	r3, #1
 8007194:	e7b7      	b.n	8007106 <_printf_float+0xee>
 8007196:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800719a:	d118      	bne.n	80071ce <_printf_float+0x1b6>
 800719c:	2900      	cmp	r1, #0
 800719e:	6863      	ldr	r3, [r4, #4]
 80071a0:	dd0b      	ble.n	80071ba <_printf_float+0x1a2>
 80071a2:	6121      	str	r1, [r4, #16]
 80071a4:	b913      	cbnz	r3, 80071ac <_printf_float+0x194>
 80071a6:	6822      	ldr	r2, [r4, #0]
 80071a8:	07d0      	lsls	r0, r2, #31
 80071aa:	d502      	bpl.n	80071b2 <_printf_float+0x19a>
 80071ac:	3301      	adds	r3, #1
 80071ae:	440b      	add	r3, r1
 80071b0:	6123      	str	r3, [r4, #16]
 80071b2:	f04f 0a00 	mov.w	sl, #0
 80071b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80071b8:	e7df      	b.n	800717a <_printf_float+0x162>
 80071ba:	b913      	cbnz	r3, 80071c2 <_printf_float+0x1aa>
 80071bc:	6822      	ldr	r2, [r4, #0]
 80071be:	07d2      	lsls	r2, r2, #31
 80071c0:	d501      	bpl.n	80071c6 <_printf_float+0x1ae>
 80071c2:	3302      	adds	r3, #2
 80071c4:	e7f4      	b.n	80071b0 <_printf_float+0x198>
 80071c6:	2301      	movs	r3, #1
 80071c8:	e7f2      	b.n	80071b0 <_printf_float+0x198>
 80071ca:	f04f 0967 	mov.w	r9, #103	; 0x67
 80071ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80071d0:	4299      	cmp	r1, r3
 80071d2:	db05      	blt.n	80071e0 <_printf_float+0x1c8>
 80071d4:	6823      	ldr	r3, [r4, #0]
 80071d6:	6121      	str	r1, [r4, #16]
 80071d8:	07d8      	lsls	r0, r3, #31
 80071da:	d5ea      	bpl.n	80071b2 <_printf_float+0x19a>
 80071dc:	1c4b      	adds	r3, r1, #1
 80071de:	e7e7      	b.n	80071b0 <_printf_float+0x198>
 80071e0:	2900      	cmp	r1, #0
 80071e2:	bfcc      	ite	gt
 80071e4:	2201      	movgt	r2, #1
 80071e6:	f1c1 0202 	rsble	r2, r1, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	e7e0      	b.n	80071b0 <_printf_float+0x198>
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	055a      	lsls	r2, r3, #21
 80071f2:	d407      	bmi.n	8007204 <_printf_float+0x1ec>
 80071f4:	6923      	ldr	r3, [r4, #16]
 80071f6:	4642      	mov	r2, r8
 80071f8:	4631      	mov	r1, r6
 80071fa:	4628      	mov	r0, r5
 80071fc:	47b8      	blx	r7
 80071fe:	3001      	adds	r0, #1
 8007200:	d12b      	bne.n	800725a <_printf_float+0x242>
 8007202:	e764      	b.n	80070ce <_printf_float+0xb6>
 8007204:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007208:	f240 80dd 	bls.w	80073c6 <_printf_float+0x3ae>
 800720c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007210:	2200      	movs	r2, #0
 8007212:	2300      	movs	r3, #0
 8007214:	f7f9 fbc8 	bl	80009a8 <__aeabi_dcmpeq>
 8007218:	2800      	cmp	r0, #0
 800721a:	d033      	beq.n	8007284 <_printf_float+0x26c>
 800721c:	2301      	movs	r3, #1
 800721e:	4631      	mov	r1, r6
 8007220:	4628      	mov	r0, r5
 8007222:	4a35      	ldr	r2, [pc, #212]	; (80072f8 <_printf_float+0x2e0>)
 8007224:	47b8      	blx	r7
 8007226:	3001      	adds	r0, #1
 8007228:	f43f af51 	beq.w	80070ce <_printf_float+0xb6>
 800722c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007230:	429a      	cmp	r2, r3
 8007232:	db02      	blt.n	800723a <_printf_float+0x222>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	07d8      	lsls	r0, r3, #31
 8007238:	d50f      	bpl.n	800725a <_printf_float+0x242>
 800723a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	f43f af42 	beq.w	80070ce <_printf_float+0xb6>
 800724a:	f04f 0800 	mov.w	r8, #0
 800724e:	f104 091a 	add.w	r9, r4, #26
 8007252:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007254:	3b01      	subs	r3, #1
 8007256:	4543      	cmp	r3, r8
 8007258:	dc09      	bgt.n	800726e <_printf_float+0x256>
 800725a:	6823      	ldr	r3, [r4, #0]
 800725c:	079b      	lsls	r3, r3, #30
 800725e:	f100 8102 	bmi.w	8007466 <_printf_float+0x44e>
 8007262:	68e0      	ldr	r0, [r4, #12]
 8007264:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007266:	4298      	cmp	r0, r3
 8007268:	bfb8      	it	lt
 800726a:	4618      	movlt	r0, r3
 800726c:	e731      	b.n	80070d2 <_printf_float+0xba>
 800726e:	2301      	movs	r3, #1
 8007270:	464a      	mov	r2, r9
 8007272:	4631      	mov	r1, r6
 8007274:	4628      	mov	r0, r5
 8007276:	47b8      	blx	r7
 8007278:	3001      	adds	r0, #1
 800727a:	f43f af28 	beq.w	80070ce <_printf_float+0xb6>
 800727e:	f108 0801 	add.w	r8, r8, #1
 8007282:	e7e6      	b.n	8007252 <_printf_float+0x23a>
 8007284:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007286:	2b00      	cmp	r3, #0
 8007288:	dc38      	bgt.n	80072fc <_printf_float+0x2e4>
 800728a:	2301      	movs	r3, #1
 800728c:	4631      	mov	r1, r6
 800728e:	4628      	mov	r0, r5
 8007290:	4a19      	ldr	r2, [pc, #100]	; (80072f8 <_printf_float+0x2e0>)
 8007292:	47b8      	blx	r7
 8007294:	3001      	adds	r0, #1
 8007296:	f43f af1a 	beq.w	80070ce <_printf_float+0xb6>
 800729a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800729e:	4313      	orrs	r3, r2
 80072a0:	d102      	bne.n	80072a8 <_printf_float+0x290>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	07d9      	lsls	r1, r3, #31
 80072a6:	d5d8      	bpl.n	800725a <_printf_float+0x242>
 80072a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072ac:	4631      	mov	r1, r6
 80072ae:	4628      	mov	r0, r5
 80072b0:	47b8      	blx	r7
 80072b2:	3001      	adds	r0, #1
 80072b4:	f43f af0b 	beq.w	80070ce <_printf_float+0xb6>
 80072b8:	f04f 0900 	mov.w	r9, #0
 80072bc:	f104 0a1a 	add.w	sl, r4, #26
 80072c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072c2:	425b      	negs	r3, r3
 80072c4:	454b      	cmp	r3, r9
 80072c6:	dc01      	bgt.n	80072cc <_printf_float+0x2b4>
 80072c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80072ca:	e794      	b.n	80071f6 <_printf_float+0x1de>
 80072cc:	2301      	movs	r3, #1
 80072ce:	4652      	mov	r2, sl
 80072d0:	4631      	mov	r1, r6
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b8      	blx	r7
 80072d6:	3001      	adds	r0, #1
 80072d8:	f43f aef9 	beq.w	80070ce <_printf_float+0xb6>
 80072dc:	f109 0901 	add.w	r9, r9, #1
 80072e0:	e7ee      	b.n	80072c0 <_printf_float+0x2a8>
 80072e2:	bf00      	nop
 80072e4:	7fefffff 	.word	0x7fefffff
 80072e8:	08009715 	.word	0x08009715
 80072ec:	08009719 	.word	0x08009719
 80072f0:	08009721 	.word	0x08009721
 80072f4:	0800971d 	.word	0x0800971d
 80072f8:	08009725 	.word	0x08009725
 80072fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007300:	429a      	cmp	r2, r3
 8007302:	bfa8      	it	ge
 8007304:	461a      	movge	r2, r3
 8007306:	2a00      	cmp	r2, #0
 8007308:	4691      	mov	r9, r2
 800730a:	dc37      	bgt.n	800737c <_printf_float+0x364>
 800730c:	f04f 0b00 	mov.w	fp, #0
 8007310:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007314:	f104 021a 	add.w	r2, r4, #26
 8007318:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800731c:	ebaa 0309 	sub.w	r3, sl, r9
 8007320:	455b      	cmp	r3, fp
 8007322:	dc33      	bgt.n	800738c <_printf_float+0x374>
 8007324:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007328:	429a      	cmp	r2, r3
 800732a:	db3b      	blt.n	80073a4 <_printf_float+0x38c>
 800732c:	6823      	ldr	r3, [r4, #0]
 800732e:	07da      	lsls	r2, r3, #31
 8007330:	d438      	bmi.n	80073a4 <_printf_float+0x38c>
 8007332:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007334:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007336:	eba3 020a 	sub.w	r2, r3, sl
 800733a:	eba3 0901 	sub.w	r9, r3, r1
 800733e:	4591      	cmp	r9, r2
 8007340:	bfa8      	it	ge
 8007342:	4691      	movge	r9, r2
 8007344:	f1b9 0f00 	cmp.w	r9, #0
 8007348:	dc34      	bgt.n	80073b4 <_printf_float+0x39c>
 800734a:	f04f 0800 	mov.w	r8, #0
 800734e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007352:	f104 0a1a 	add.w	sl, r4, #26
 8007356:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800735a:	1a9b      	subs	r3, r3, r2
 800735c:	eba3 0309 	sub.w	r3, r3, r9
 8007360:	4543      	cmp	r3, r8
 8007362:	f77f af7a 	ble.w	800725a <_printf_float+0x242>
 8007366:	2301      	movs	r3, #1
 8007368:	4652      	mov	r2, sl
 800736a:	4631      	mov	r1, r6
 800736c:	4628      	mov	r0, r5
 800736e:	47b8      	blx	r7
 8007370:	3001      	adds	r0, #1
 8007372:	f43f aeac 	beq.w	80070ce <_printf_float+0xb6>
 8007376:	f108 0801 	add.w	r8, r8, #1
 800737a:	e7ec      	b.n	8007356 <_printf_float+0x33e>
 800737c:	4613      	mov	r3, r2
 800737e:	4631      	mov	r1, r6
 8007380:	4642      	mov	r2, r8
 8007382:	4628      	mov	r0, r5
 8007384:	47b8      	blx	r7
 8007386:	3001      	adds	r0, #1
 8007388:	d1c0      	bne.n	800730c <_printf_float+0x2f4>
 800738a:	e6a0      	b.n	80070ce <_printf_float+0xb6>
 800738c:	2301      	movs	r3, #1
 800738e:	4631      	mov	r1, r6
 8007390:	4628      	mov	r0, r5
 8007392:	920b      	str	r2, [sp, #44]	; 0x2c
 8007394:	47b8      	blx	r7
 8007396:	3001      	adds	r0, #1
 8007398:	f43f ae99 	beq.w	80070ce <_printf_float+0xb6>
 800739c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800739e:	f10b 0b01 	add.w	fp, fp, #1
 80073a2:	e7b9      	b.n	8007318 <_printf_float+0x300>
 80073a4:	4631      	mov	r1, r6
 80073a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073aa:	4628      	mov	r0, r5
 80073ac:	47b8      	blx	r7
 80073ae:	3001      	adds	r0, #1
 80073b0:	d1bf      	bne.n	8007332 <_printf_float+0x31a>
 80073b2:	e68c      	b.n	80070ce <_printf_float+0xb6>
 80073b4:	464b      	mov	r3, r9
 80073b6:	4631      	mov	r1, r6
 80073b8:	4628      	mov	r0, r5
 80073ba:	eb08 020a 	add.w	r2, r8, sl
 80073be:	47b8      	blx	r7
 80073c0:	3001      	adds	r0, #1
 80073c2:	d1c2      	bne.n	800734a <_printf_float+0x332>
 80073c4:	e683      	b.n	80070ce <_printf_float+0xb6>
 80073c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073c8:	2a01      	cmp	r2, #1
 80073ca:	dc01      	bgt.n	80073d0 <_printf_float+0x3b8>
 80073cc:	07db      	lsls	r3, r3, #31
 80073ce:	d537      	bpl.n	8007440 <_printf_float+0x428>
 80073d0:	2301      	movs	r3, #1
 80073d2:	4642      	mov	r2, r8
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	f43f ae77 	beq.w	80070ce <_printf_float+0xb6>
 80073e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073e4:	4631      	mov	r1, r6
 80073e6:	4628      	mov	r0, r5
 80073e8:	47b8      	blx	r7
 80073ea:	3001      	adds	r0, #1
 80073ec:	f43f ae6f 	beq.w	80070ce <_printf_float+0xb6>
 80073f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073f4:	2200      	movs	r2, #0
 80073f6:	2300      	movs	r3, #0
 80073f8:	f7f9 fad6 	bl	80009a8 <__aeabi_dcmpeq>
 80073fc:	b9d8      	cbnz	r0, 8007436 <_printf_float+0x41e>
 80073fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007400:	f108 0201 	add.w	r2, r8, #1
 8007404:	3b01      	subs	r3, #1
 8007406:	4631      	mov	r1, r6
 8007408:	4628      	mov	r0, r5
 800740a:	47b8      	blx	r7
 800740c:	3001      	adds	r0, #1
 800740e:	d10e      	bne.n	800742e <_printf_float+0x416>
 8007410:	e65d      	b.n	80070ce <_printf_float+0xb6>
 8007412:	2301      	movs	r3, #1
 8007414:	464a      	mov	r2, r9
 8007416:	4631      	mov	r1, r6
 8007418:	4628      	mov	r0, r5
 800741a:	47b8      	blx	r7
 800741c:	3001      	adds	r0, #1
 800741e:	f43f ae56 	beq.w	80070ce <_printf_float+0xb6>
 8007422:	f108 0801 	add.w	r8, r8, #1
 8007426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007428:	3b01      	subs	r3, #1
 800742a:	4543      	cmp	r3, r8
 800742c:	dcf1      	bgt.n	8007412 <_printf_float+0x3fa>
 800742e:	4653      	mov	r3, sl
 8007430:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007434:	e6e0      	b.n	80071f8 <_printf_float+0x1e0>
 8007436:	f04f 0800 	mov.w	r8, #0
 800743a:	f104 091a 	add.w	r9, r4, #26
 800743e:	e7f2      	b.n	8007426 <_printf_float+0x40e>
 8007440:	2301      	movs	r3, #1
 8007442:	4642      	mov	r2, r8
 8007444:	e7df      	b.n	8007406 <_printf_float+0x3ee>
 8007446:	2301      	movs	r3, #1
 8007448:	464a      	mov	r2, r9
 800744a:	4631      	mov	r1, r6
 800744c:	4628      	mov	r0, r5
 800744e:	47b8      	blx	r7
 8007450:	3001      	adds	r0, #1
 8007452:	f43f ae3c 	beq.w	80070ce <_printf_float+0xb6>
 8007456:	f108 0801 	add.w	r8, r8, #1
 800745a:	68e3      	ldr	r3, [r4, #12]
 800745c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800745e:	1a5b      	subs	r3, r3, r1
 8007460:	4543      	cmp	r3, r8
 8007462:	dcf0      	bgt.n	8007446 <_printf_float+0x42e>
 8007464:	e6fd      	b.n	8007262 <_printf_float+0x24a>
 8007466:	f04f 0800 	mov.w	r8, #0
 800746a:	f104 0919 	add.w	r9, r4, #25
 800746e:	e7f4      	b.n	800745a <_printf_float+0x442>

08007470 <_printf_common>:
 8007470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007474:	4616      	mov	r6, r2
 8007476:	4699      	mov	r9, r3
 8007478:	688a      	ldr	r2, [r1, #8]
 800747a:	690b      	ldr	r3, [r1, #16]
 800747c:	4607      	mov	r7, r0
 800747e:	4293      	cmp	r3, r2
 8007480:	bfb8      	it	lt
 8007482:	4613      	movlt	r3, r2
 8007484:	6033      	str	r3, [r6, #0]
 8007486:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800748a:	460c      	mov	r4, r1
 800748c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007490:	b10a      	cbz	r2, 8007496 <_printf_common+0x26>
 8007492:	3301      	adds	r3, #1
 8007494:	6033      	str	r3, [r6, #0]
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	0699      	lsls	r1, r3, #26
 800749a:	bf42      	ittt	mi
 800749c:	6833      	ldrmi	r3, [r6, #0]
 800749e:	3302      	addmi	r3, #2
 80074a0:	6033      	strmi	r3, [r6, #0]
 80074a2:	6825      	ldr	r5, [r4, #0]
 80074a4:	f015 0506 	ands.w	r5, r5, #6
 80074a8:	d106      	bne.n	80074b8 <_printf_common+0x48>
 80074aa:	f104 0a19 	add.w	sl, r4, #25
 80074ae:	68e3      	ldr	r3, [r4, #12]
 80074b0:	6832      	ldr	r2, [r6, #0]
 80074b2:	1a9b      	subs	r3, r3, r2
 80074b4:	42ab      	cmp	r3, r5
 80074b6:	dc28      	bgt.n	800750a <_printf_common+0x9a>
 80074b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074bc:	1e13      	subs	r3, r2, #0
 80074be:	6822      	ldr	r2, [r4, #0]
 80074c0:	bf18      	it	ne
 80074c2:	2301      	movne	r3, #1
 80074c4:	0692      	lsls	r2, r2, #26
 80074c6:	d42d      	bmi.n	8007524 <_printf_common+0xb4>
 80074c8:	4649      	mov	r1, r9
 80074ca:	4638      	mov	r0, r7
 80074cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074d0:	47c0      	blx	r8
 80074d2:	3001      	adds	r0, #1
 80074d4:	d020      	beq.n	8007518 <_printf_common+0xa8>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	68e5      	ldr	r5, [r4, #12]
 80074da:	f003 0306 	and.w	r3, r3, #6
 80074de:	2b04      	cmp	r3, #4
 80074e0:	bf18      	it	ne
 80074e2:	2500      	movne	r5, #0
 80074e4:	6832      	ldr	r2, [r6, #0]
 80074e6:	f04f 0600 	mov.w	r6, #0
 80074ea:	68a3      	ldr	r3, [r4, #8]
 80074ec:	bf08      	it	eq
 80074ee:	1aad      	subeq	r5, r5, r2
 80074f0:	6922      	ldr	r2, [r4, #16]
 80074f2:	bf08      	it	eq
 80074f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f8:	4293      	cmp	r3, r2
 80074fa:	bfc4      	itt	gt
 80074fc:	1a9b      	subgt	r3, r3, r2
 80074fe:	18ed      	addgt	r5, r5, r3
 8007500:	341a      	adds	r4, #26
 8007502:	42b5      	cmp	r5, r6
 8007504:	d11a      	bne.n	800753c <_printf_common+0xcc>
 8007506:	2000      	movs	r0, #0
 8007508:	e008      	b.n	800751c <_printf_common+0xac>
 800750a:	2301      	movs	r3, #1
 800750c:	4652      	mov	r2, sl
 800750e:	4649      	mov	r1, r9
 8007510:	4638      	mov	r0, r7
 8007512:	47c0      	blx	r8
 8007514:	3001      	adds	r0, #1
 8007516:	d103      	bne.n	8007520 <_printf_common+0xb0>
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007520:	3501      	adds	r5, #1
 8007522:	e7c4      	b.n	80074ae <_printf_common+0x3e>
 8007524:	2030      	movs	r0, #48	; 0x30
 8007526:	18e1      	adds	r1, r4, r3
 8007528:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800752c:	1c5a      	adds	r2, r3, #1
 800752e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007532:	4422      	add	r2, r4
 8007534:	3302      	adds	r3, #2
 8007536:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800753a:	e7c5      	b.n	80074c8 <_printf_common+0x58>
 800753c:	2301      	movs	r3, #1
 800753e:	4622      	mov	r2, r4
 8007540:	4649      	mov	r1, r9
 8007542:	4638      	mov	r0, r7
 8007544:	47c0      	blx	r8
 8007546:	3001      	adds	r0, #1
 8007548:	d0e6      	beq.n	8007518 <_printf_common+0xa8>
 800754a:	3601      	adds	r6, #1
 800754c:	e7d9      	b.n	8007502 <_printf_common+0x92>
	...

08007550 <_printf_i>:
 8007550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007554:	7e0f      	ldrb	r7, [r1, #24]
 8007556:	4691      	mov	r9, r2
 8007558:	2f78      	cmp	r7, #120	; 0x78
 800755a:	4680      	mov	r8, r0
 800755c:	460c      	mov	r4, r1
 800755e:	469a      	mov	sl, r3
 8007560:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007566:	d807      	bhi.n	8007578 <_printf_i+0x28>
 8007568:	2f62      	cmp	r7, #98	; 0x62
 800756a:	d80a      	bhi.n	8007582 <_printf_i+0x32>
 800756c:	2f00      	cmp	r7, #0
 800756e:	f000 80d9 	beq.w	8007724 <_printf_i+0x1d4>
 8007572:	2f58      	cmp	r7, #88	; 0x58
 8007574:	f000 80a4 	beq.w	80076c0 <_printf_i+0x170>
 8007578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800757c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007580:	e03a      	b.n	80075f8 <_printf_i+0xa8>
 8007582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007586:	2b15      	cmp	r3, #21
 8007588:	d8f6      	bhi.n	8007578 <_printf_i+0x28>
 800758a:	a101      	add	r1, pc, #4	; (adr r1, 8007590 <_printf_i+0x40>)
 800758c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007590:	080075e9 	.word	0x080075e9
 8007594:	080075fd 	.word	0x080075fd
 8007598:	08007579 	.word	0x08007579
 800759c:	08007579 	.word	0x08007579
 80075a0:	08007579 	.word	0x08007579
 80075a4:	08007579 	.word	0x08007579
 80075a8:	080075fd 	.word	0x080075fd
 80075ac:	08007579 	.word	0x08007579
 80075b0:	08007579 	.word	0x08007579
 80075b4:	08007579 	.word	0x08007579
 80075b8:	08007579 	.word	0x08007579
 80075bc:	0800770b 	.word	0x0800770b
 80075c0:	0800762d 	.word	0x0800762d
 80075c4:	080076ed 	.word	0x080076ed
 80075c8:	08007579 	.word	0x08007579
 80075cc:	08007579 	.word	0x08007579
 80075d0:	0800772d 	.word	0x0800772d
 80075d4:	08007579 	.word	0x08007579
 80075d8:	0800762d 	.word	0x0800762d
 80075dc:	08007579 	.word	0x08007579
 80075e0:	08007579 	.word	0x08007579
 80075e4:	080076f5 	.word	0x080076f5
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	1d1a      	adds	r2, r3, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	602a      	str	r2, [r5, #0]
 80075f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075f8:	2301      	movs	r3, #1
 80075fa:	e0a4      	b.n	8007746 <_printf_i+0x1f6>
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	6829      	ldr	r1, [r5, #0]
 8007600:	0606      	lsls	r6, r0, #24
 8007602:	f101 0304 	add.w	r3, r1, #4
 8007606:	d50a      	bpl.n	800761e <_printf_i+0xce>
 8007608:	680e      	ldr	r6, [r1, #0]
 800760a:	602b      	str	r3, [r5, #0]
 800760c:	2e00      	cmp	r6, #0
 800760e:	da03      	bge.n	8007618 <_printf_i+0xc8>
 8007610:	232d      	movs	r3, #45	; 0x2d
 8007612:	4276      	negs	r6, r6
 8007614:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007618:	230a      	movs	r3, #10
 800761a:	485e      	ldr	r0, [pc, #376]	; (8007794 <_printf_i+0x244>)
 800761c:	e019      	b.n	8007652 <_printf_i+0x102>
 800761e:	680e      	ldr	r6, [r1, #0]
 8007620:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007624:	602b      	str	r3, [r5, #0]
 8007626:	bf18      	it	ne
 8007628:	b236      	sxthne	r6, r6
 800762a:	e7ef      	b.n	800760c <_printf_i+0xbc>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	6820      	ldr	r0, [r4, #0]
 8007630:	1d19      	adds	r1, r3, #4
 8007632:	6029      	str	r1, [r5, #0]
 8007634:	0601      	lsls	r1, r0, #24
 8007636:	d501      	bpl.n	800763c <_printf_i+0xec>
 8007638:	681e      	ldr	r6, [r3, #0]
 800763a:	e002      	b.n	8007642 <_printf_i+0xf2>
 800763c:	0646      	lsls	r6, r0, #25
 800763e:	d5fb      	bpl.n	8007638 <_printf_i+0xe8>
 8007640:	881e      	ldrh	r6, [r3, #0]
 8007642:	2f6f      	cmp	r7, #111	; 0x6f
 8007644:	bf0c      	ite	eq
 8007646:	2308      	moveq	r3, #8
 8007648:	230a      	movne	r3, #10
 800764a:	4852      	ldr	r0, [pc, #328]	; (8007794 <_printf_i+0x244>)
 800764c:	2100      	movs	r1, #0
 800764e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007652:	6865      	ldr	r5, [r4, #4]
 8007654:	2d00      	cmp	r5, #0
 8007656:	bfa8      	it	ge
 8007658:	6821      	ldrge	r1, [r4, #0]
 800765a:	60a5      	str	r5, [r4, #8]
 800765c:	bfa4      	itt	ge
 800765e:	f021 0104 	bicge.w	r1, r1, #4
 8007662:	6021      	strge	r1, [r4, #0]
 8007664:	b90e      	cbnz	r6, 800766a <_printf_i+0x11a>
 8007666:	2d00      	cmp	r5, #0
 8007668:	d04d      	beq.n	8007706 <_printf_i+0x1b6>
 800766a:	4615      	mov	r5, r2
 800766c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007670:	fb03 6711 	mls	r7, r3, r1, r6
 8007674:	5dc7      	ldrb	r7, [r0, r7]
 8007676:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800767a:	4637      	mov	r7, r6
 800767c:	42bb      	cmp	r3, r7
 800767e:	460e      	mov	r6, r1
 8007680:	d9f4      	bls.n	800766c <_printf_i+0x11c>
 8007682:	2b08      	cmp	r3, #8
 8007684:	d10b      	bne.n	800769e <_printf_i+0x14e>
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	07de      	lsls	r6, r3, #31
 800768a:	d508      	bpl.n	800769e <_printf_i+0x14e>
 800768c:	6923      	ldr	r3, [r4, #16]
 800768e:	6861      	ldr	r1, [r4, #4]
 8007690:	4299      	cmp	r1, r3
 8007692:	bfde      	ittt	le
 8007694:	2330      	movle	r3, #48	; 0x30
 8007696:	f805 3c01 	strble.w	r3, [r5, #-1]
 800769a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800769e:	1b52      	subs	r2, r2, r5
 80076a0:	6122      	str	r2, [r4, #16]
 80076a2:	464b      	mov	r3, r9
 80076a4:	4621      	mov	r1, r4
 80076a6:	4640      	mov	r0, r8
 80076a8:	f8cd a000 	str.w	sl, [sp]
 80076ac:	aa03      	add	r2, sp, #12
 80076ae:	f7ff fedf 	bl	8007470 <_printf_common>
 80076b2:	3001      	adds	r0, #1
 80076b4:	d14c      	bne.n	8007750 <_printf_i+0x200>
 80076b6:	f04f 30ff 	mov.w	r0, #4294967295
 80076ba:	b004      	add	sp, #16
 80076bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c0:	4834      	ldr	r0, [pc, #208]	; (8007794 <_printf_i+0x244>)
 80076c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80076c6:	6829      	ldr	r1, [r5, #0]
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80076ce:	6029      	str	r1, [r5, #0]
 80076d0:	061d      	lsls	r5, r3, #24
 80076d2:	d514      	bpl.n	80076fe <_printf_i+0x1ae>
 80076d4:	07df      	lsls	r7, r3, #31
 80076d6:	bf44      	itt	mi
 80076d8:	f043 0320 	orrmi.w	r3, r3, #32
 80076dc:	6023      	strmi	r3, [r4, #0]
 80076de:	b91e      	cbnz	r6, 80076e8 <_printf_i+0x198>
 80076e0:	6823      	ldr	r3, [r4, #0]
 80076e2:	f023 0320 	bic.w	r3, r3, #32
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	2310      	movs	r3, #16
 80076ea:	e7af      	b.n	800764c <_printf_i+0xfc>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	f043 0320 	orr.w	r3, r3, #32
 80076f2:	6023      	str	r3, [r4, #0]
 80076f4:	2378      	movs	r3, #120	; 0x78
 80076f6:	4828      	ldr	r0, [pc, #160]	; (8007798 <_printf_i+0x248>)
 80076f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076fc:	e7e3      	b.n	80076c6 <_printf_i+0x176>
 80076fe:	0659      	lsls	r1, r3, #25
 8007700:	bf48      	it	mi
 8007702:	b2b6      	uxthmi	r6, r6
 8007704:	e7e6      	b.n	80076d4 <_printf_i+0x184>
 8007706:	4615      	mov	r5, r2
 8007708:	e7bb      	b.n	8007682 <_printf_i+0x132>
 800770a:	682b      	ldr	r3, [r5, #0]
 800770c:	6826      	ldr	r6, [r4, #0]
 800770e:	1d18      	adds	r0, r3, #4
 8007710:	6961      	ldr	r1, [r4, #20]
 8007712:	6028      	str	r0, [r5, #0]
 8007714:	0635      	lsls	r5, r6, #24
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	d501      	bpl.n	800771e <_printf_i+0x1ce>
 800771a:	6019      	str	r1, [r3, #0]
 800771c:	e002      	b.n	8007724 <_printf_i+0x1d4>
 800771e:	0670      	lsls	r0, r6, #25
 8007720:	d5fb      	bpl.n	800771a <_printf_i+0x1ca>
 8007722:	8019      	strh	r1, [r3, #0]
 8007724:	2300      	movs	r3, #0
 8007726:	4615      	mov	r5, r2
 8007728:	6123      	str	r3, [r4, #16]
 800772a:	e7ba      	b.n	80076a2 <_printf_i+0x152>
 800772c:	682b      	ldr	r3, [r5, #0]
 800772e:	2100      	movs	r1, #0
 8007730:	1d1a      	adds	r2, r3, #4
 8007732:	602a      	str	r2, [r5, #0]
 8007734:	681d      	ldr	r5, [r3, #0]
 8007736:	6862      	ldr	r2, [r4, #4]
 8007738:	4628      	mov	r0, r5
 800773a:	f001 f99b 	bl	8008a74 <memchr>
 800773e:	b108      	cbz	r0, 8007744 <_printf_i+0x1f4>
 8007740:	1b40      	subs	r0, r0, r5
 8007742:	6060      	str	r0, [r4, #4]
 8007744:	6863      	ldr	r3, [r4, #4]
 8007746:	6123      	str	r3, [r4, #16]
 8007748:	2300      	movs	r3, #0
 800774a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800774e:	e7a8      	b.n	80076a2 <_printf_i+0x152>
 8007750:	462a      	mov	r2, r5
 8007752:	4649      	mov	r1, r9
 8007754:	4640      	mov	r0, r8
 8007756:	6923      	ldr	r3, [r4, #16]
 8007758:	47d0      	blx	sl
 800775a:	3001      	adds	r0, #1
 800775c:	d0ab      	beq.n	80076b6 <_printf_i+0x166>
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	079b      	lsls	r3, r3, #30
 8007762:	d413      	bmi.n	800778c <_printf_i+0x23c>
 8007764:	68e0      	ldr	r0, [r4, #12]
 8007766:	9b03      	ldr	r3, [sp, #12]
 8007768:	4298      	cmp	r0, r3
 800776a:	bfb8      	it	lt
 800776c:	4618      	movlt	r0, r3
 800776e:	e7a4      	b.n	80076ba <_printf_i+0x16a>
 8007770:	2301      	movs	r3, #1
 8007772:	4632      	mov	r2, r6
 8007774:	4649      	mov	r1, r9
 8007776:	4640      	mov	r0, r8
 8007778:	47d0      	blx	sl
 800777a:	3001      	adds	r0, #1
 800777c:	d09b      	beq.n	80076b6 <_printf_i+0x166>
 800777e:	3501      	adds	r5, #1
 8007780:	68e3      	ldr	r3, [r4, #12]
 8007782:	9903      	ldr	r1, [sp, #12]
 8007784:	1a5b      	subs	r3, r3, r1
 8007786:	42ab      	cmp	r3, r5
 8007788:	dcf2      	bgt.n	8007770 <_printf_i+0x220>
 800778a:	e7eb      	b.n	8007764 <_printf_i+0x214>
 800778c:	2500      	movs	r5, #0
 800778e:	f104 0619 	add.w	r6, r4, #25
 8007792:	e7f5      	b.n	8007780 <_printf_i+0x230>
 8007794:	08009727 	.word	0x08009727
 8007798:	08009738 	.word	0x08009738

0800779c <__swbuf_r>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	460e      	mov	r6, r1
 80077a0:	4614      	mov	r4, r2
 80077a2:	4605      	mov	r5, r0
 80077a4:	b118      	cbz	r0, 80077ae <__swbuf_r+0x12>
 80077a6:	6983      	ldr	r3, [r0, #24]
 80077a8:	b90b      	cbnz	r3, 80077ae <__swbuf_r+0x12>
 80077aa:	f001 f851 	bl	8008850 <__sinit>
 80077ae:	4b21      	ldr	r3, [pc, #132]	; (8007834 <__swbuf_r+0x98>)
 80077b0:	429c      	cmp	r4, r3
 80077b2:	d12b      	bne.n	800780c <__swbuf_r+0x70>
 80077b4:	686c      	ldr	r4, [r5, #4]
 80077b6:	69a3      	ldr	r3, [r4, #24]
 80077b8:	60a3      	str	r3, [r4, #8]
 80077ba:	89a3      	ldrh	r3, [r4, #12]
 80077bc:	071a      	lsls	r2, r3, #28
 80077be:	d52f      	bpl.n	8007820 <__swbuf_r+0x84>
 80077c0:	6923      	ldr	r3, [r4, #16]
 80077c2:	b36b      	cbz	r3, 8007820 <__swbuf_r+0x84>
 80077c4:	6923      	ldr	r3, [r4, #16]
 80077c6:	6820      	ldr	r0, [r4, #0]
 80077c8:	b2f6      	uxtb	r6, r6
 80077ca:	1ac0      	subs	r0, r0, r3
 80077cc:	6963      	ldr	r3, [r4, #20]
 80077ce:	4637      	mov	r7, r6
 80077d0:	4283      	cmp	r3, r0
 80077d2:	dc04      	bgt.n	80077de <__swbuf_r+0x42>
 80077d4:	4621      	mov	r1, r4
 80077d6:	4628      	mov	r0, r5
 80077d8:	f000 ffa6 	bl	8008728 <_fflush_r>
 80077dc:	bb30      	cbnz	r0, 800782c <__swbuf_r+0x90>
 80077de:	68a3      	ldr	r3, [r4, #8]
 80077e0:	3001      	adds	r0, #1
 80077e2:	3b01      	subs	r3, #1
 80077e4:	60a3      	str	r3, [r4, #8]
 80077e6:	6823      	ldr	r3, [r4, #0]
 80077e8:	1c5a      	adds	r2, r3, #1
 80077ea:	6022      	str	r2, [r4, #0]
 80077ec:	701e      	strb	r6, [r3, #0]
 80077ee:	6963      	ldr	r3, [r4, #20]
 80077f0:	4283      	cmp	r3, r0
 80077f2:	d004      	beq.n	80077fe <__swbuf_r+0x62>
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	07db      	lsls	r3, r3, #31
 80077f8:	d506      	bpl.n	8007808 <__swbuf_r+0x6c>
 80077fa:	2e0a      	cmp	r6, #10
 80077fc:	d104      	bne.n	8007808 <__swbuf_r+0x6c>
 80077fe:	4621      	mov	r1, r4
 8007800:	4628      	mov	r0, r5
 8007802:	f000 ff91 	bl	8008728 <_fflush_r>
 8007806:	b988      	cbnz	r0, 800782c <__swbuf_r+0x90>
 8007808:	4638      	mov	r0, r7
 800780a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800780c:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <__swbuf_r+0x9c>)
 800780e:	429c      	cmp	r4, r3
 8007810:	d101      	bne.n	8007816 <__swbuf_r+0x7a>
 8007812:	68ac      	ldr	r4, [r5, #8]
 8007814:	e7cf      	b.n	80077b6 <__swbuf_r+0x1a>
 8007816:	4b09      	ldr	r3, [pc, #36]	; (800783c <__swbuf_r+0xa0>)
 8007818:	429c      	cmp	r4, r3
 800781a:	bf08      	it	eq
 800781c:	68ec      	ldreq	r4, [r5, #12]
 800781e:	e7ca      	b.n	80077b6 <__swbuf_r+0x1a>
 8007820:	4621      	mov	r1, r4
 8007822:	4628      	mov	r0, r5
 8007824:	f000 f80c 	bl	8007840 <__swsetup_r>
 8007828:	2800      	cmp	r0, #0
 800782a:	d0cb      	beq.n	80077c4 <__swbuf_r+0x28>
 800782c:	f04f 37ff 	mov.w	r7, #4294967295
 8007830:	e7ea      	b.n	8007808 <__swbuf_r+0x6c>
 8007832:	bf00      	nop
 8007834:	080097fc 	.word	0x080097fc
 8007838:	0800981c 	.word	0x0800981c
 800783c:	080097dc 	.word	0x080097dc

08007840 <__swsetup_r>:
 8007840:	4b32      	ldr	r3, [pc, #200]	; (800790c <__swsetup_r+0xcc>)
 8007842:	b570      	push	{r4, r5, r6, lr}
 8007844:	681d      	ldr	r5, [r3, #0]
 8007846:	4606      	mov	r6, r0
 8007848:	460c      	mov	r4, r1
 800784a:	b125      	cbz	r5, 8007856 <__swsetup_r+0x16>
 800784c:	69ab      	ldr	r3, [r5, #24]
 800784e:	b913      	cbnz	r3, 8007856 <__swsetup_r+0x16>
 8007850:	4628      	mov	r0, r5
 8007852:	f000 fffd 	bl	8008850 <__sinit>
 8007856:	4b2e      	ldr	r3, [pc, #184]	; (8007910 <__swsetup_r+0xd0>)
 8007858:	429c      	cmp	r4, r3
 800785a:	d10f      	bne.n	800787c <__swsetup_r+0x3c>
 800785c:	686c      	ldr	r4, [r5, #4]
 800785e:	89a3      	ldrh	r3, [r4, #12]
 8007860:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007864:	0719      	lsls	r1, r3, #28
 8007866:	d42c      	bmi.n	80078c2 <__swsetup_r+0x82>
 8007868:	06dd      	lsls	r5, r3, #27
 800786a:	d411      	bmi.n	8007890 <__swsetup_r+0x50>
 800786c:	2309      	movs	r3, #9
 800786e:	6033      	str	r3, [r6, #0]
 8007870:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007874:	f04f 30ff 	mov.w	r0, #4294967295
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	e03e      	b.n	80078fa <__swsetup_r+0xba>
 800787c:	4b25      	ldr	r3, [pc, #148]	; (8007914 <__swsetup_r+0xd4>)
 800787e:	429c      	cmp	r4, r3
 8007880:	d101      	bne.n	8007886 <__swsetup_r+0x46>
 8007882:	68ac      	ldr	r4, [r5, #8]
 8007884:	e7eb      	b.n	800785e <__swsetup_r+0x1e>
 8007886:	4b24      	ldr	r3, [pc, #144]	; (8007918 <__swsetup_r+0xd8>)
 8007888:	429c      	cmp	r4, r3
 800788a:	bf08      	it	eq
 800788c:	68ec      	ldreq	r4, [r5, #12]
 800788e:	e7e6      	b.n	800785e <__swsetup_r+0x1e>
 8007890:	0758      	lsls	r0, r3, #29
 8007892:	d512      	bpl.n	80078ba <__swsetup_r+0x7a>
 8007894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007896:	b141      	cbz	r1, 80078aa <__swsetup_r+0x6a>
 8007898:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800789c:	4299      	cmp	r1, r3
 800789e:	d002      	beq.n	80078a6 <__swsetup_r+0x66>
 80078a0:	4630      	mov	r0, r6
 80078a2:	f001 fc8b 	bl	80091bc <_free_r>
 80078a6:	2300      	movs	r3, #0
 80078a8:	6363      	str	r3, [r4, #52]	; 0x34
 80078aa:	89a3      	ldrh	r3, [r4, #12]
 80078ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078b0:	81a3      	strh	r3, [r4, #12]
 80078b2:	2300      	movs	r3, #0
 80078b4:	6063      	str	r3, [r4, #4]
 80078b6:	6923      	ldr	r3, [r4, #16]
 80078b8:	6023      	str	r3, [r4, #0]
 80078ba:	89a3      	ldrh	r3, [r4, #12]
 80078bc:	f043 0308 	orr.w	r3, r3, #8
 80078c0:	81a3      	strh	r3, [r4, #12]
 80078c2:	6923      	ldr	r3, [r4, #16]
 80078c4:	b94b      	cbnz	r3, 80078da <__swsetup_r+0x9a>
 80078c6:	89a3      	ldrh	r3, [r4, #12]
 80078c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078d0:	d003      	beq.n	80078da <__swsetup_r+0x9a>
 80078d2:	4621      	mov	r1, r4
 80078d4:	4630      	mov	r0, r6
 80078d6:	f001 f885 	bl	80089e4 <__smakebuf_r>
 80078da:	89a0      	ldrh	r0, [r4, #12]
 80078dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078e0:	f010 0301 	ands.w	r3, r0, #1
 80078e4:	d00a      	beq.n	80078fc <__swsetup_r+0xbc>
 80078e6:	2300      	movs	r3, #0
 80078e8:	60a3      	str	r3, [r4, #8]
 80078ea:	6963      	ldr	r3, [r4, #20]
 80078ec:	425b      	negs	r3, r3
 80078ee:	61a3      	str	r3, [r4, #24]
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	b943      	cbnz	r3, 8007906 <__swsetup_r+0xc6>
 80078f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078f8:	d1ba      	bne.n	8007870 <__swsetup_r+0x30>
 80078fa:	bd70      	pop	{r4, r5, r6, pc}
 80078fc:	0781      	lsls	r1, r0, #30
 80078fe:	bf58      	it	pl
 8007900:	6963      	ldrpl	r3, [r4, #20]
 8007902:	60a3      	str	r3, [r4, #8]
 8007904:	e7f4      	b.n	80078f0 <__swsetup_r+0xb0>
 8007906:	2000      	movs	r0, #0
 8007908:	e7f7      	b.n	80078fa <__swsetup_r+0xba>
 800790a:	bf00      	nop
 800790c:	20000010 	.word	0x20000010
 8007910:	080097fc 	.word	0x080097fc
 8007914:	0800981c 	.word	0x0800981c
 8007918:	080097dc 	.word	0x080097dc

0800791c <abort>:
 800791c:	2006      	movs	r0, #6
 800791e:	b508      	push	{r3, lr}
 8007920:	f001 fd60 	bl	80093e4 <raise>
 8007924:	2001      	movs	r0, #1
 8007926:	f7fb fe94 	bl	8003652 <_exit>

0800792a <quorem>:
 800792a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800792e:	6903      	ldr	r3, [r0, #16]
 8007930:	690c      	ldr	r4, [r1, #16]
 8007932:	4607      	mov	r7, r0
 8007934:	42a3      	cmp	r3, r4
 8007936:	f2c0 8082 	blt.w	8007a3e <quorem+0x114>
 800793a:	3c01      	subs	r4, #1
 800793c:	f100 0514 	add.w	r5, r0, #20
 8007940:	f101 0814 	add.w	r8, r1, #20
 8007944:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007948:	9301      	str	r3, [sp, #4]
 800794a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800794e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007952:	3301      	adds	r3, #1
 8007954:	429a      	cmp	r2, r3
 8007956:	fbb2 f6f3 	udiv	r6, r2, r3
 800795a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800795e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007962:	d331      	bcc.n	80079c8 <quorem+0x9e>
 8007964:	f04f 0e00 	mov.w	lr, #0
 8007968:	4640      	mov	r0, r8
 800796a:	46ac      	mov	ip, r5
 800796c:	46f2      	mov	sl, lr
 800796e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007972:	b293      	uxth	r3, r2
 8007974:	fb06 e303 	mla	r3, r6, r3, lr
 8007978:	0c12      	lsrs	r2, r2, #16
 800797a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800797e:	b29b      	uxth	r3, r3
 8007980:	fb06 e202 	mla	r2, r6, r2, lr
 8007984:	ebaa 0303 	sub.w	r3, sl, r3
 8007988:	f8dc a000 	ldr.w	sl, [ip]
 800798c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007990:	fa1f fa8a 	uxth.w	sl, sl
 8007994:	4453      	add	r3, sl
 8007996:	f8dc a000 	ldr.w	sl, [ip]
 800799a:	b292      	uxth	r2, r2
 800799c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079aa:	4581      	cmp	r9, r0
 80079ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079b0:	f84c 3b04 	str.w	r3, [ip], #4
 80079b4:	d2db      	bcs.n	800796e <quorem+0x44>
 80079b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80079ba:	b92b      	cbnz	r3, 80079c8 <quorem+0x9e>
 80079bc:	9b01      	ldr	r3, [sp, #4]
 80079be:	3b04      	subs	r3, #4
 80079c0:	429d      	cmp	r5, r3
 80079c2:	461a      	mov	r2, r3
 80079c4:	d32f      	bcc.n	8007a26 <quorem+0xfc>
 80079c6:	613c      	str	r4, [r7, #16]
 80079c8:	4638      	mov	r0, r7
 80079ca:	f001 fadf 	bl	8008f8c <__mcmp>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	db25      	blt.n	8007a1e <quorem+0xf4>
 80079d2:	4628      	mov	r0, r5
 80079d4:	f04f 0c00 	mov.w	ip, #0
 80079d8:	3601      	adds	r6, #1
 80079da:	f858 1b04 	ldr.w	r1, [r8], #4
 80079de:	f8d0 e000 	ldr.w	lr, [r0]
 80079e2:	b28b      	uxth	r3, r1
 80079e4:	ebac 0303 	sub.w	r3, ip, r3
 80079e8:	fa1f f28e 	uxth.w	r2, lr
 80079ec:	4413      	add	r3, r2
 80079ee:	0c0a      	lsrs	r2, r1, #16
 80079f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80079f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079fe:	45c1      	cmp	r9, r8
 8007a00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007a04:	f840 3b04 	str.w	r3, [r0], #4
 8007a08:	d2e7      	bcs.n	80079da <quorem+0xb0>
 8007a0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a12:	b922      	cbnz	r2, 8007a1e <quorem+0xf4>
 8007a14:	3b04      	subs	r3, #4
 8007a16:	429d      	cmp	r5, r3
 8007a18:	461a      	mov	r2, r3
 8007a1a:	d30a      	bcc.n	8007a32 <quorem+0x108>
 8007a1c:	613c      	str	r4, [r7, #16]
 8007a1e:	4630      	mov	r0, r6
 8007a20:	b003      	add	sp, #12
 8007a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a26:	6812      	ldr	r2, [r2, #0]
 8007a28:	3b04      	subs	r3, #4
 8007a2a:	2a00      	cmp	r2, #0
 8007a2c:	d1cb      	bne.n	80079c6 <quorem+0x9c>
 8007a2e:	3c01      	subs	r4, #1
 8007a30:	e7c6      	b.n	80079c0 <quorem+0x96>
 8007a32:	6812      	ldr	r2, [r2, #0]
 8007a34:	3b04      	subs	r3, #4
 8007a36:	2a00      	cmp	r2, #0
 8007a38:	d1f0      	bne.n	8007a1c <quorem+0xf2>
 8007a3a:	3c01      	subs	r4, #1
 8007a3c:	e7eb      	b.n	8007a16 <quorem+0xec>
 8007a3e:	2000      	movs	r0, #0
 8007a40:	e7ee      	b.n	8007a20 <quorem+0xf6>
 8007a42:	0000      	movs	r0, r0
 8007a44:	0000      	movs	r0, r0
	...

08007a48 <_dtoa_r>:
 8007a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4c:	4616      	mov	r6, r2
 8007a4e:	461f      	mov	r7, r3
 8007a50:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007a52:	b099      	sub	sp, #100	; 0x64
 8007a54:	4605      	mov	r5, r0
 8007a56:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007a5a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007a5e:	b974      	cbnz	r4, 8007a7e <_dtoa_r+0x36>
 8007a60:	2010      	movs	r0, #16
 8007a62:	f000 ffff 	bl	8008a64 <malloc>
 8007a66:	4602      	mov	r2, r0
 8007a68:	6268      	str	r0, [r5, #36]	; 0x24
 8007a6a:	b920      	cbnz	r0, 8007a76 <_dtoa_r+0x2e>
 8007a6c:	21ea      	movs	r1, #234	; 0xea
 8007a6e:	4ba8      	ldr	r3, [pc, #672]	; (8007d10 <_dtoa_r+0x2c8>)
 8007a70:	48a8      	ldr	r0, [pc, #672]	; (8007d14 <_dtoa_r+0x2cc>)
 8007a72:	f7ff f86b 	bl	8006b4c <__assert_func>
 8007a76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a7a:	6004      	str	r4, [r0, #0]
 8007a7c:	60c4      	str	r4, [r0, #12]
 8007a7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a80:	6819      	ldr	r1, [r3, #0]
 8007a82:	b151      	cbz	r1, 8007a9a <_dtoa_r+0x52>
 8007a84:	685a      	ldr	r2, [r3, #4]
 8007a86:	2301      	movs	r3, #1
 8007a88:	4093      	lsls	r3, r2
 8007a8a:	604a      	str	r2, [r1, #4]
 8007a8c:	608b      	str	r3, [r1, #8]
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f001 f83e 	bl	8008b10 <_Bfree>
 8007a94:	2200      	movs	r2, #0
 8007a96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	1e3b      	subs	r3, r7, #0
 8007a9c:	bfaf      	iteee	ge
 8007a9e:	2300      	movge	r3, #0
 8007aa0:	2201      	movlt	r2, #1
 8007aa2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007aa6:	9305      	strlt	r3, [sp, #20]
 8007aa8:	bfa8      	it	ge
 8007aaa:	f8c8 3000 	strge.w	r3, [r8]
 8007aae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007ab2:	4b99      	ldr	r3, [pc, #612]	; (8007d18 <_dtoa_r+0x2d0>)
 8007ab4:	bfb8      	it	lt
 8007ab6:	f8c8 2000 	strlt.w	r2, [r8]
 8007aba:	ea33 0309 	bics.w	r3, r3, r9
 8007abe:	d119      	bne.n	8007af4 <_dtoa_r+0xac>
 8007ac0:	f242 730f 	movw	r3, #9999	; 0x270f
 8007ac4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007acc:	4333      	orrs	r3, r6
 8007ace:	f000 857f 	beq.w	80085d0 <_dtoa_r+0xb88>
 8007ad2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007ad4:	b953      	cbnz	r3, 8007aec <_dtoa_r+0xa4>
 8007ad6:	4b91      	ldr	r3, [pc, #580]	; (8007d1c <_dtoa_r+0x2d4>)
 8007ad8:	e022      	b.n	8007b20 <_dtoa_r+0xd8>
 8007ada:	4b91      	ldr	r3, [pc, #580]	; (8007d20 <_dtoa_r+0x2d8>)
 8007adc:	9303      	str	r3, [sp, #12]
 8007ade:	3308      	adds	r3, #8
 8007ae0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007ae2:	6013      	str	r3, [r2, #0]
 8007ae4:	9803      	ldr	r0, [sp, #12]
 8007ae6:	b019      	add	sp, #100	; 0x64
 8007ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aec:	4b8b      	ldr	r3, [pc, #556]	; (8007d1c <_dtoa_r+0x2d4>)
 8007aee:	9303      	str	r3, [sp, #12]
 8007af0:	3303      	adds	r3, #3
 8007af2:	e7f5      	b.n	8007ae0 <_dtoa_r+0x98>
 8007af4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007af8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007afc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b00:	2200      	movs	r2, #0
 8007b02:	2300      	movs	r3, #0
 8007b04:	f7f8 ff50 	bl	80009a8 <__aeabi_dcmpeq>
 8007b08:	4680      	mov	r8, r0
 8007b0a:	b158      	cbz	r0, 8007b24 <_dtoa_r+0xdc>
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007b10:	6013      	str	r3, [r2, #0]
 8007b12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 8558 	beq.w	80085ca <_dtoa_r+0xb82>
 8007b1a:	4882      	ldr	r0, [pc, #520]	; (8007d24 <_dtoa_r+0x2dc>)
 8007b1c:	6018      	str	r0, [r3, #0]
 8007b1e:	1e43      	subs	r3, r0, #1
 8007b20:	9303      	str	r3, [sp, #12]
 8007b22:	e7df      	b.n	8007ae4 <_dtoa_r+0x9c>
 8007b24:	ab16      	add	r3, sp, #88	; 0x58
 8007b26:	9301      	str	r3, [sp, #4]
 8007b28:	ab17      	add	r3, sp, #92	; 0x5c
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b32:	f001 fad3 	bl	80090dc <__d2b>
 8007b36:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007b3a:	4683      	mov	fp, r0
 8007b3c:	2c00      	cmp	r4, #0
 8007b3e:	d07f      	beq.n	8007c40 <_dtoa_r+0x1f8>
 8007b40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b46:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007b4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b4e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007b52:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007b56:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	4b72      	ldr	r3, [pc, #456]	; (8007d28 <_dtoa_r+0x2e0>)
 8007b5e:	f7f8 fb03 	bl	8000168 <__aeabi_dsub>
 8007b62:	a365      	add	r3, pc, #404	; (adr r3, 8007cf8 <_dtoa_r+0x2b0>)
 8007b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b68:	f7f8 fcb6 	bl	80004d8 <__aeabi_dmul>
 8007b6c:	a364      	add	r3, pc, #400	; (adr r3, 8007d00 <_dtoa_r+0x2b8>)
 8007b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b72:	f7f8 fafb 	bl	800016c <__adddf3>
 8007b76:	4606      	mov	r6, r0
 8007b78:	4620      	mov	r0, r4
 8007b7a:	460f      	mov	r7, r1
 8007b7c:	f7f8 fc42 	bl	8000404 <__aeabi_i2d>
 8007b80:	a361      	add	r3, pc, #388	; (adr r3, 8007d08 <_dtoa_r+0x2c0>)
 8007b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b86:	f7f8 fca7 	bl	80004d8 <__aeabi_dmul>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	4630      	mov	r0, r6
 8007b90:	4639      	mov	r1, r7
 8007b92:	f7f8 faeb 	bl	800016c <__adddf3>
 8007b96:	4606      	mov	r6, r0
 8007b98:	460f      	mov	r7, r1
 8007b9a:	f7f8 ff4d 	bl	8000a38 <__aeabi_d2iz>
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	4682      	mov	sl, r0
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	4630      	mov	r0, r6
 8007ba6:	4639      	mov	r1, r7
 8007ba8:	f7f8 ff08 	bl	80009bc <__aeabi_dcmplt>
 8007bac:	b148      	cbz	r0, 8007bc2 <_dtoa_r+0x17a>
 8007bae:	4650      	mov	r0, sl
 8007bb0:	f7f8 fc28 	bl	8000404 <__aeabi_i2d>
 8007bb4:	4632      	mov	r2, r6
 8007bb6:	463b      	mov	r3, r7
 8007bb8:	f7f8 fef6 	bl	80009a8 <__aeabi_dcmpeq>
 8007bbc:	b908      	cbnz	r0, 8007bc2 <_dtoa_r+0x17a>
 8007bbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007bc2:	f1ba 0f16 	cmp.w	sl, #22
 8007bc6:	d858      	bhi.n	8007c7a <_dtoa_r+0x232>
 8007bc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007bcc:	4b57      	ldr	r3, [pc, #348]	; (8007d2c <_dtoa_r+0x2e4>)
 8007bce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd6:	f7f8 fef1 	bl	80009bc <__aeabi_dcmplt>
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	d04f      	beq.n	8007c7e <_dtoa_r+0x236>
 8007bde:	2300      	movs	r3, #0
 8007be0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007be4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007be6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007be8:	1b1c      	subs	r4, r3, r4
 8007bea:	1e63      	subs	r3, r4, #1
 8007bec:	9309      	str	r3, [sp, #36]	; 0x24
 8007bee:	bf49      	itett	mi
 8007bf0:	f1c4 0301 	rsbmi	r3, r4, #1
 8007bf4:	2300      	movpl	r3, #0
 8007bf6:	9306      	strmi	r3, [sp, #24]
 8007bf8:	2300      	movmi	r3, #0
 8007bfa:	bf54      	ite	pl
 8007bfc:	9306      	strpl	r3, [sp, #24]
 8007bfe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8007c00:	f1ba 0f00 	cmp.w	sl, #0
 8007c04:	db3d      	blt.n	8007c82 <_dtoa_r+0x23a>
 8007c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c08:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007c0c:	4453      	add	r3, sl
 8007c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c10:	2300      	movs	r3, #0
 8007c12:	930a      	str	r3, [sp, #40]	; 0x28
 8007c14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c16:	2b09      	cmp	r3, #9
 8007c18:	f200 808c 	bhi.w	8007d34 <_dtoa_r+0x2ec>
 8007c1c:	2b05      	cmp	r3, #5
 8007c1e:	bfc4      	itt	gt
 8007c20:	3b04      	subgt	r3, #4
 8007c22:	9322      	strgt	r3, [sp, #136]	; 0x88
 8007c24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c26:	bfc8      	it	gt
 8007c28:	2400      	movgt	r4, #0
 8007c2a:	f1a3 0302 	sub.w	r3, r3, #2
 8007c2e:	bfd8      	it	le
 8007c30:	2401      	movle	r4, #1
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	f200 808a 	bhi.w	8007d4c <_dtoa_r+0x304>
 8007c38:	e8df f003 	tbb	[pc, r3]
 8007c3c:	5b4d4f2d 	.word	0x5b4d4f2d
 8007c40:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8007c44:	441c      	add	r4, r3
 8007c46:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	bfc3      	ittte	gt
 8007c4e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c52:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8007c56:	fa09 f303 	lslgt.w	r3, r9, r3
 8007c5a:	f1c3 0320 	rsble	r3, r3, #32
 8007c5e:	bfc6      	itte	gt
 8007c60:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007c64:	4318      	orrgt	r0, r3
 8007c66:	fa06 f003 	lslle.w	r0, r6, r3
 8007c6a:	f7f8 fbbb 	bl	80003e4 <__aeabi_ui2d>
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007c74:	3c01      	subs	r4, #1
 8007c76:	9313      	str	r3, [sp, #76]	; 0x4c
 8007c78:	e76f      	b.n	8007b5a <_dtoa_r+0x112>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e7b2      	b.n	8007be4 <_dtoa_r+0x19c>
 8007c7e:	900f      	str	r0, [sp, #60]	; 0x3c
 8007c80:	e7b1      	b.n	8007be6 <_dtoa_r+0x19e>
 8007c82:	9b06      	ldr	r3, [sp, #24]
 8007c84:	eba3 030a 	sub.w	r3, r3, sl
 8007c88:	9306      	str	r3, [sp, #24]
 8007c8a:	f1ca 0300 	rsb	r3, sl, #0
 8007c8e:	930a      	str	r3, [sp, #40]	; 0x28
 8007c90:	2300      	movs	r3, #0
 8007c92:	930e      	str	r3, [sp, #56]	; 0x38
 8007c94:	e7be      	b.n	8007c14 <_dtoa_r+0x1cc>
 8007c96:	2300      	movs	r3, #0
 8007c98:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	dc58      	bgt.n	8007d52 <_dtoa_r+0x30a>
 8007ca0:	f04f 0901 	mov.w	r9, #1
 8007ca4:	464b      	mov	r3, r9
 8007ca6:	f8cd 9020 	str.w	r9, [sp, #32]
 8007caa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8007cae:	2200      	movs	r2, #0
 8007cb0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8007cb2:	6042      	str	r2, [r0, #4]
 8007cb4:	2204      	movs	r2, #4
 8007cb6:	f102 0614 	add.w	r6, r2, #20
 8007cba:	429e      	cmp	r6, r3
 8007cbc:	6841      	ldr	r1, [r0, #4]
 8007cbe:	d94e      	bls.n	8007d5e <_dtoa_r+0x316>
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	f000 fee5 	bl	8008a90 <_Balloc>
 8007cc6:	9003      	str	r0, [sp, #12]
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	d14c      	bne.n	8007d66 <_dtoa_r+0x31e>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007cd2:	4b17      	ldr	r3, [pc, #92]	; (8007d30 <_dtoa_r+0x2e8>)
 8007cd4:	e6cc      	b.n	8007a70 <_dtoa_r+0x28>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e7de      	b.n	8007c98 <_dtoa_r+0x250>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cde:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ce0:	eb0a 0903 	add.w	r9, sl, r3
 8007ce4:	f109 0301 	add.w	r3, r9, #1
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	9308      	str	r3, [sp, #32]
 8007cec:	bfb8      	it	lt
 8007cee:	2301      	movlt	r3, #1
 8007cf0:	e7dd      	b.n	8007cae <_dtoa_r+0x266>
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e7f2      	b.n	8007cdc <_dtoa_r+0x294>
 8007cf6:	bf00      	nop
 8007cf8:	636f4361 	.word	0x636f4361
 8007cfc:	3fd287a7 	.word	0x3fd287a7
 8007d00:	8b60c8b3 	.word	0x8b60c8b3
 8007d04:	3fc68a28 	.word	0x3fc68a28
 8007d08:	509f79fb 	.word	0x509f79fb
 8007d0c:	3fd34413 	.word	0x3fd34413
 8007d10:	08009756 	.word	0x08009756
 8007d14:	0800976d 	.word	0x0800976d
 8007d18:	7ff00000 	.word	0x7ff00000
 8007d1c:	08009752 	.word	0x08009752
 8007d20:	08009749 	.word	0x08009749
 8007d24:	08009726 	.word	0x08009726
 8007d28:	3ff80000 	.word	0x3ff80000
 8007d2c:	080098c0 	.word	0x080098c0
 8007d30:	080097c8 	.word	0x080097c8
 8007d34:	2401      	movs	r4, #1
 8007d36:	2300      	movs	r3, #0
 8007d38:	940b      	str	r4, [sp, #44]	; 0x2c
 8007d3a:	9322      	str	r3, [sp, #136]	; 0x88
 8007d3c:	f04f 39ff 	mov.w	r9, #4294967295
 8007d40:	2200      	movs	r2, #0
 8007d42:	2312      	movs	r3, #18
 8007d44:	f8cd 9020 	str.w	r9, [sp, #32]
 8007d48:	9223      	str	r2, [sp, #140]	; 0x8c
 8007d4a:	e7b0      	b.n	8007cae <_dtoa_r+0x266>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d50:	e7f4      	b.n	8007d3c <_dtoa_r+0x2f4>
 8007d52:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8007d56:	464b      	mov	r3, r9
 8007d58:	f8cd 9020 	str.w	r9, [sp, #32]
 8007d5c:	e7a7      	b.n	8007cae <_dtoa_r+0x266>
 8007d5e:	3101      	adds	r1, #1
 8007d60:	6041      	str	r1, [r0, #4]
 8007d62:	0052      	lsls	r2, r2, #1
 8007d64:	e7a7      	b.n	8007cb6 <_dtoa_r+0x26e>
 8007d66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007d68:	9a03      	ldr	r2, [sp, #12]
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	9b08      	ldr	r3, [sp, #32]
 8007d6e:	2b0e      	cmp	r3, #14
 8007d70:	f200 80a8 	bhi.w	8007ec4 <_dtoa_r+0x47c>
 8007d74:	2c00      	cmp	r4, #0
 8007d76:	f000 80a5 	beq.w	8007ec4 <_dtoa_r+0x47c>
 8007d7a:	f1ba 0f00 	cmp.w	sl, #0
 8007d7e:	dd34      	ble.n	8007dea <_dtoa_r+0x3a2>
 8007d80:	4a9a      	ldr	r2, [pc, #616]	; (8007fec <_dtoa_r+0x5a4>)
 8007d82:	f00a 030f 	and.w	r3, sl, #15
 8007d86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007d8a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007d8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007d96:	ea4f 142a 	mov.w	r4, sl, asr #4
 8007d9a:	d016      	beq.n	8007dca <_dtoa_r+0x382>
 8007d9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007da0:	4b93      	ldr	r3, [pc, #588]	; (8007ff0 <_dtoa_r+0x5a8>)
 8007da2:	2703      	movs	r7, #3
 8007da4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007da8:	f7f8 fcc0 	bl	800072c <__aeabi_ddiv>
 8007dac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007db0:	f004 040f 	and.w	r4, r4, #15
 8007db4:	4e8e      	ldr	r6, [pc, #568]	; (8007ff0 <_dtoa_r+0x5a8>)
 8007db6:	b954      	cbnz	r4, 8007dce <_dtoa_r+0x386>
 8007db8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007dbc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dc0:	f7f8 fcb4 	bl	800072c <__aeabi_ddiv>
 8007dc4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dc8:	e029      	b.n	8007e1e <_dtoa_r+0x3d6>
 8007dca:	2702      	movs	r7, #2
 8007dcc:	e7f2      	b.n	8007db4 <_dtoa_r+0x36c>
 8007dce:	07e1      	lsls	r1, r4, #31
 8007dd0:	d508      	bpl.n	8007de4 <_dtoa_r+0x39c>
 8007dd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007dd6:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007dda:	f7f8 fb7d 	bl	80004d8 <__aeabi_dmul>
 8007dde:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007de2:	3701      	adds	r7, #1
 8007de4:	1064      	asrs	r4, r4, #1
 8007de6:	3608      	adds	r6, #8
 8007de8:	e7e5      	b.n	8007db6 <_dtoa_r+0x36e>
 8007dea:	f000 80a5 	beq.w	8007f38 <_dtoa_r+0x4f0>
 8007dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007df2:	f1ca 0400 	rsb	r4, sl, #0
 8007df6:	4b7d      	ldr	r3, [pc, #500]	; (8007fec <_dtoa_r+0x5a4>)
 8007df8:	f004 020f 	and.w	r2, r4, #15
 8007dfc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e04:	f7f8 fb68 	bl	80004d8 <__aeabi_dmul>
 8007e08:	2702      	movs	r7, #2
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e10:	4e77      	ldr	r6, [pc, #476]	; (8007ff0 <_dtoa_r+0x5a8>)
 8007e12:	1124      	asrs	r4, r4, #4
 8007e14:	2c00      	cmp	r4, #0
 8007e16:	f040 8084 	bne.w	8007f22 <_dtoa_r+0x4da>
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1d2      	bne.n	8007dc4 <_dtoa_r+0x37c>
 8007e1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 808b 	beq.w	8007f3c <_dtoa_r+0x4f4>
 8007e26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007e2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8007e2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e32:	2200      	movs	r2, #0
 8007e34:	4b6f      	ldr	r3, [pc, #444]	; (8007ff4 <_dtoa_r+0x5ac>)
 8007e36:	f7f8 fdc1 	bl	80009bc <__aeabi_dcmplt>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d07e      	beq.n	8007f3c <_dtoa_r+0x4f4>
 8007e3e:	9b08      	ldr	r3, [sp, #32]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d07b      	beq.n	8007f3c <_dtoa_r+0x4f4>
 8007e44:	f1b9 0f00 	cmp.w	r9, #0
 8007e48:	dd38      	ble.n	8007ebc <_dtoa_r+0x474>
 8007e4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007e4e:	2200      	movs	r2, #0
 8007e50:	4b69      	ldr	r3, [pc, #420]	; (8007ff8 <_dtoa_r+0x5b0>)
 8007e52:	f7f8 fb41 	bl	80004d8 <__aeabi_dmul>
 8007e56:	464c      	mov	r4, r9
 8007e58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e5c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8007e60:	3701      	adds	r7, #1
 8007e62:	4638      	mov	r0, r7
 8007e64:	f7f8 face 	bl	8000404 <__aeabi_i2d>
 8007e68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e6c:	f7f8 fb34 	bl	80004d8 <__aeabi_dmul>
 8007e70:	2200      	movs	r2, #0
 8007e72:	4b62      	ldr	r3, [pc, #392]	; (8007ffc <_dtoa_r+0x5b4>)
 8007e74:	f7f8 f97a 	bl	800016c <__adddf3>
 8007e78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007e7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007e80:	9611      	str	r6, [sp, #68]	; 0x44
 8007e82:	2c00      	cmp	r4, #0
 8007e84:	d15d      	bne.n	8007f42 <_dtoa_r+0x4fa>
 8007e86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	4b5c      	ldr	r3, [pc, #368]	; (8008000 <_dtoa_r+0x5b8>)
 8007e8e:	f7f8 f96b 	bl	8000168 <__aeabi_dsub>
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e9a:	4633      	mov	r3, r6
 8007e9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007e9e:	f7f8 fdab 	bl	80009f8 <__aeabi_dcmpgt>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	f040 829c 	bne.w	80083e0 <_dtoa_r+0x998>
 8007ea8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007eae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007eb2:	f7f8 fd83 	bl	80009bc <__aeabi_dcmplt>
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	f040 8290 	bne.w	80083dc <_dtoa_r+0x994>
 8007ebc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8007ec0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ec4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f2c0 8152 	blt.w	8008170 <_dtoa_r+0x728>
 8007ecc:	f1ba 0f0e 	cmp.w	sl, #14
 8007ed0:	f300 814e 	bgt.w	8008170 <_dtoa_r+0x728>
 8007ed4:	4b45      	ldr	r3, [pc, #276]	; (8007fec <_dtoa_r+0x5a4>)
 8007ed6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007eda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007ede:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8007ee2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f280 80db 	bge.w	80080a0 <_dtoa_r+0x658>
 8007eea:	9b08      	ldr	r3, [sp, #32]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f300 80d7 	bgt.w	80080a0 <_dtoa_r+0x658>
 8007ef2:	f040 8272 	bne.w	80083da <_dtoa_r+0x992>
 8007ef6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007efa:	2200      	movs	r2, #0
 8007efc:	4b40      	ldr	r3, [pc, #256]	; (8008000 <_dtoa_r+0x5b8>)
 8007efe:	f7f8 faeb 	bl	80004d8 <__aeabi_dmul>
 8007f02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f06:	f7f8 fd6d 	bl	80009e4 <__aeabi_dcmpge>
 8007f0a:	9c08      	ldr	r4, [sp, #32]
 8007f0c:	4626      	mov	r6, r4
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	f040 8248 	bne.w	80083a4 <_dtoa_r+0x95c>
 8007f14:	2331      	movs	r3, #49	; 0x31
 8007f16:	9f03      	ldr	r7, [sp, #12]
 8007f18:	f10a 0a01 	add.w	sl, sl, #1
 8007f1c:	f807 3b01 	strb.w	r3, [r7], #1
 8007f20:	e244      	b.n	80083ac <_dtoa_r+0x964>
 8007f22:	07e2      	lsls	r2, r4, #31
 8007f24:	d505      	bpl.n	8007f32 <_dtoa_r+0x4ea>
 8007f26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007f2a:	f7f8 fad5 	bl	80004d8 <__aeabi_dmul>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	3701      	adds	r7, #1
 8007f32:	1064      	asrs	r4, r4, #1
 8007f34:	3608      	adds	r6, #8
 8007f36:	e76d      	b.n	8007e14 <_dtoa_r+0x3cc>
 8007f38:	2702      	movs	r7, #2
 8007f3a:	e770      	b.n	8007e1e <_dtoa_r+0x3d6>
 8007f3c:	46d0      	mov	r8, sl
 8007f3e:	9c08      	ldr	r4, [sp, #32]
 8007f40:	e78f      	b.n	8007e62 <_dtoa_r+0x41a>
 8007f42:	9903      	ldr	r1, [sp, #12]
 8007f44:	4b29      	ldr	r3, [pc, #164]	; (8007fec <_dtoa_r+0x5a4>)
 8007f46:	4421      	add	r1, r4
 8007f48:	9112      	str	r1, [sp, #72]	; 0x48
 8007f4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007f54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f58:	2900      	cmp	r1, #0
 8007f5a:	d055      	beq.n	8008008 <_dtoa_r+0x5c0>
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	4929      	ldr	r1, [pc, #164]	; (8008004 <_dtoa_r+0x5bc>)
 8007f60:	f7f8 fbe4 	bl	800072c <__aeabi_ddiv>
 8007f64:	463b      	mov	r3, r7
 8007f66:	4632      	mov	r2, r6
 8007f68:	f7f8 f8fe 	bl	8000168 <__aeabi_dsub>
 8007f6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007f70:	9f03      	ldr	r7, [sp, #12]
 8007f72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f76:	f7f8 fd5f 	bl	8000a38 <__aeabi_d2iz>
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	f7f8 fa42 	bl	8000404 <__aeabi_i2d>
 8007f80:	4602      	mov	r2, r0
 8007f82:	460b      	mov	r3, r1
 8007f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f88:	f7f8 f8ee 	bl	8000168 <__aeabi_dsub>
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	460b      	mov	r3, r1
 8007f90:	3430      	adds	r4, #48	; 0x30
 8007f92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007f96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007f9a:	f807 4b01 	strb.w	r4, [r7], #1
 8007f9e:	f7f8 fd0d 	bl	80009bc <__aeabi_dcmplt>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	d174      	bne.n	8008090 <_dtoa_r+0x648>
 8007fa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007faa:	2000      	movs	r0, #0
 8007fac:	4911      	ldr	r1, [pc, #68]	; (8007ff4 <_dtoa_r+0x5ac>)
 8007fae:	f7f8 f8db 	bl	8000168 <__aeabi_dsub>
 8007fb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007fb6:	f7f8 fd01 	bl	80009bc <__aeabi_dcmplt>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	f040 80b7 	bne.w	800812e <_dtoa_r+0x6e6>
 8007fc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007fc2:	429f      	cmp	r7, r3
 8007fc4:	f43f af7a 	beq.w	8007ebc <_dtoa_r+0x474>
 8007fc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007fcc:	2200      	movs	r2, #0
 8007fce:	4b0a      	ldr	r3, [pc, #40]	; (8007ff8 <_dtoa_r+0x5b0>)
 8007fd0:	f7f8 fa82 	bl	80004d8 <__aeabi_dmul>
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007fda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fde:	4b06      	ldr	r3, [pc, #24]	; (8007ff8 <_dtoa_r+0x5b0>)
 8007fe0:	f7f8 fa7a 	bl	80004d8 <__aeabi_dmul>
 8007fe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007fe8:	e7c3      	b.n	8007f72 <_dtoa_r+0x52a>
 8007fea:	bf00      	nop
 8007fec:	080098c0 	.word	0x080098c0
 8007ff0:	08009898 	.word	0x08009898
 8007ff4:	3ff00000 	.word	0x3ff00000
 8007ff8:	40240000 	.word	0x40240000
 8007ffc:	401c0000 	.word	0x401c0000
 8008000:	40140000 	.word	0x40140000
 8008004:	3fe00000 	.word	0x3fe00000
 8008008:	4630      	mov	r0, r6
 800800a:	4639      	mov	r1, r7
 800800c:	f7f8 fa64 	bl	80004d8 <__aeabi_dmul>
 8008010:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008012:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008016:	9c03      	ldr	r4, [sp, #12]
 8008018:	9314      	str	r3, [sp, #80]	; 0x50
 800801a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800801e:	f7f8 fd0b 	bl	8000a38 <__aeabi_d2iz>
 8008022:	9015      	str	r0, [sp, #84]	; 0x54
 8008024:	f7f8 f9ee 	bl	8000404 <__aeabi_i2d>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008030:	f7f8 f89a 	bl	8000168 <__aeabi_dsub>
 8008034:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008036:	4606      	mov	r6, r0
 8008038:	3330      	adds	r3, #48	; 0x30
 800803a:	f804 3b01 	strb.w	r3, [r4], #1
 800803e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008040:	460f      	mov	r7, r1
 8008042:	429c      	cmp	r4, r3
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	d124      	bne.n	8008094 <_dtoa_r+0x64c>
 800804a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800804e:	4bb0      	ldr	r3, [pc, #704]	; (8008310 <_dtoa_r+0x8c8>)
 8008050:	f7f8 f88c 	bl	800016c <__adddf3>
 8008054:	4602      	mov	r2, r0
 8008056:	460b      	mov	r3, r1
 8008058:	4630      	mov	r0, r6
 800805a:	4639      	mov	r1, r7
 800805c:	f7f8 fccc 	bl	80009f8 <__aeabi_dcmpgt>
 8008060:	2800      	cmp	r0, #0
 8008062:	d163      	bne.n	800812c <_dtoa_r+0x6e4>
 8008064:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008068:	2000      	movs	r0, #0
 800806a:	49a9      	ldr	r1, [pc, #676]	; (8008310 <_dtoa_r+0x8c8>)
 800806c:	f7f8 f87c 	bl	8000168 <__aeabi_dsub>
 8008070:	4602      	mov	r2, r0
 8008072:	460b      	mov	r3, r1
 8008074:	4630      	mov	r0, r6
 8008076:	4639      	mov	r1, r7
 8008078:	f7f8 fca0 	bl	80009bc <__aeabi_dcmplt>
 800807c:	2800      	cmp	r0, #0
 800807e:	f43f af1d 	beq.w	8007ebc <_dtoa_r+0x474>
 8008082:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8008084:	1e7b      	subs	r3, r7, #1
 8008086:	9314      	str	r3, [sp, #80]	; 0x50
 8008088:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800808c:	2b30      	cmp	r3, #48	; 0x30
 800808e:	d0f8      	beq.n	8008082 <_dtoa_r+0x63a>
 8008090:	46c2      	mov	sl, r8
 8008092:	e03b      	b.n	800810c <_dtoa_r+0x6c4>
 8008094:	4b9f      	ldr	r3, [pc, #636]	; (8008314 <_dtoa_r+0x8cc>)
 8008096:	f7f8 fa1f 	bl	80004d8 <__aeabi_dmul>
 800809a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800809e:	e7bc      	b.n	800801a <_dtoa_r+0x5d2>
 80080a0:	9f03      	ldr	r7, [sp, #12]
 80080a2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80080a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080aa:	4640      	mov	r0, r8
 80080ac:	4649      	mov	r1, r9
 80080ae:	f7f8 fb3d 	bl	800072c <__aeabi_ddiv>
 80080b2:	f7f8 fcc1 	bl	8000a38 <__aeabi_d2iz>
 80080b6:	4604      	mov	r4, r0
 80080b8:	f7f8 f9a4 	bl	8000404 <__aeabi_i2d>
 80080bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080c0:	f7f8 fa0a 	bl	80004d8 <__aeabi_dmul>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4640      	mov	r0, r8
 80080ca:	4649      	mov	r1, r9
 80080cc:	f7f8 f84c 	bl	8000168 <__aeabi_dsub>
 80080d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80080d4:	f807 6b01 	strb.w	r6, [r7], #1
 80080d8:	9e03      	ldr	r6, [sp, #12]
 80080da:	f8dd c020 	ldr.w	ip, [sp, #32]
 80080de:	1bbe      	subs	r6, r7, r6
 80080e0:	45b4      	cmp	ip, r6
 80080e2:	4602      	mov	r2, r0
 80080e4:	460b      	mov	r3, r1
 80080e6:	d136      	bne.n	8008156 <_dtoa_r+0x70e>
 80080e8:	f7f8 f840 	bl	800016c <__adddf3>
 80080ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080f0:	4680      	mov	r8, r0
 80080f2:	4689      	mov	r9, r1
 80080f4:	f7f8 fc80 	bl	80009f8 <__aeabi_dcmpgt>
 80080f8:	bb58      	cbnz	r0, 8008152 <_dtoa_r+0x70a>
 80080fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80080fe:	4640      	mov	r0, r8
 8008100:	4649      	mov	r1, r9
 8008102:	f7f8 fc51 	bl	80009a8 <__aeabi_dcmpeq>
 8008106:	b108      	cbz	r0, 800810c <_dtoa_r+0x6c4>
 8008108:	07e1      	lsls	r1, r4, #31
 800810a:	d422      	bmi.n	8008152 <_dtoa_r+0x70a>
 800810c:	4628      	mov	r0, r5
 800810e:	4659      	mov	r1, fp
 8008110:	f000 fcfe 	bl	8008b10 <_Bfree>
 8008114:	2300      	movs	r3, #0
 8008116:	703b      	strb	r3, [r7, #0]
 8008118:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800811a:	f10a 0001 	add.w	r0, sl, #1
 800811e:	6018      	str	r0, [r3, #0]
 8008120:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008122:	2b00      	cmp	r3, #0
 8008124:	f43f acde 	beq.w	8007ae4 <_dtoa_r+0x9c>
 8008128:	601f      	str	r7, [r3, #0]
 800812a:	e4db      	b.n	8007ae4 <_dtoa_r+0x9c>
 800812c:	4627      	mov	r7, r4
 800812e:	463b      	mov	r3, r7
 8008130:	461f      	mov	r7, r3
 8008132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008136:	2a39      	cmp	r2, #57	; 0x39
 8008138:	d107      	bne.n	800814a <_dtoa_r+0x702>
 800813a:	9a03      	ldr	r2, [sp, #12]
 800813c:	429a      	cmp	r2, r3
 800813e:	d1f7      	bne.n	8008130 <_dtoa_r+0x6e8>
 8008140:	2230      	movs	r2, #48	; 0x30
 8008142:	9903      	ldr	r1, [sp, #12]
 8008144:	f108 0801 	add.w	r8, r8, #1
 8008148:	700a      	strb	r2, [r1, #0]
 800814a:	781a      	ldrb	r2, [r3, #0]
 800814c:	3201      	adds	r2, #1
 800814e:	701a      	strb	r2, [r3, #0]
 8008150:	e79e      	b.n	8008090 <_dtoa_r+0x648>
 8008152:	46d0      	mov	r8, sl
 8008154:	e7eb      	b.n	800812e <_dtoa_r+0x6e6>
 8008156:	2200      	movs	r2, #0
 8008158:	4b6e      	ldr	r3, [pc, #440]	; (8008314 <_dtoa_r+0x8cc>)
 800815a:	f7f8 f9bd 	bl	80004d8 <__aeabi_dmul>
 800815e:	2200      	movs	r2, #0
 8008160:	2300      	movs	r3, #0
 8008162:	4680      	mov	r8, r0
 8008164:	4689      	mov	r9, r1
 8008166:	f7f8 fc1f 	bl	80009a8 <__aeabi_dcmpeq>
 800816a:	2800      	cmp	r0, #0
 800816c:	d09b      	beq.n	80080a6 <_dtoa_r+0x65e>
 800816e:	e7cd      	b.n	800810c <_dtoa_r+0x6c4>
 8008170:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008172:	2a00      	cmp	r2, #0
 8008174:	f000 80d0 	beq.w	8008318 <_dtoa_r+0x8d0>
 8008178:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800817a:	2a01      	cmp	r2, #1
 800817c:	f300 80ae 	bgt.w	80082dc <_dtoa_r+0x894>
 8008180:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008182:	2a00      	cmp	r2, #0
 8008184:	f000 80a6 	beq.w	80082d4 <_dtoa_r+0x88c>
 8008188:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800818c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800818e:	9f06      	ldr	r7, [sp, #24]
 8008190:	9a06      	ldr	r2, [sp, #24]
 8008192:	2101      	movs	r1, #1
 8008194:	441a      	add	r2, r3
 8008196:	9206      	str	r2, [sp, #24]
 8008198:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800819a:	4628      	mov	r0, r5
 800819c:	441a      	add	r2, r3
 800819e:	9209      	str	r2, [sp, #36]	; 0x24
 80081a0:	f000 fd6c 	bl	8008c7c <__i2b>
 80081a4:	4606      	mov	r6, r0
 80081a6:	2f00      	cmp	r7, #0
 80081a8:	dd0c      	ble.n	80081c4 <_dtoa_r+0x77c>
 80081aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	dd09      	ble.n	80081c4 <_dtoa_r+0x77c>
 80081b0:	42bb      	cmp	r3, r7
 80081b2:	bfa8      	it	ge
 80081b4:	463b      	movge	r3, r7
 80081b6:	9a06      	ldr	r2, [sp, #24]
 80081b8:	1aff      	subs	r7, r7, r3
 80081ba:	1ad2      	subs	r2, r2, r3
 80081bc:	9206      	str	r2, [sp, #24]
 80081be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081c0:	1ad3      	subs	r3, r2, r3
 80081c2:	9309      	str	r3, [sp, #36]	; 0x24
 80081c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c6:	b1f3      	cbz	r3, 8008206 <_dtoa_r+0x7be>
 80081c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 80a8 	beq.w	8008320 <_dtoa_r+0x8d8>
 80081d0:	2c00      	cmp	r4, #0
 80081d2:	dd10      	ble.n	80081f6 <_dtoa_r+0x7ae>
 80081d4:	4631      	mov	r1, r6
 80081d6:	4622      	mov	r2, r4
 80081d8:	4628      	mov	r0, r5
 80081da:	f000 fe0d 	bl	8008df8 <__pow5mult>
 80081de:	465a      	mov	r2, fp
 80081e0:	4601      	mov	r1, r0
 80081e2:	4606      	mov	r6, r0
 80081e4:	4628      	mov	r0, r5
 80081e6:	f000 fd5f 	bl	8008ca8 <__multiply>
 80081ea:	4680      	mov	r8, r0
 80081ec:	4659      	mov	r1, fp
 80081ee:	4628      	mov	r0, r5
 80081f0:	f000 fc8e 	bl	8008b10 <_Bfree>
 80081f4:	46c3      	mov	fp, r8
 80081f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081f8:	1b1a      	subs	r2, r3, r4
 80081fa:	d004      	beq.n	8008206 <_dtoa_r+0x7be>
 80081fc:	4659      	mov	r1, fp
 80081fe:	4628      	mov	r0, r5
 8008200:	f000 fdfa 	bl	8008df8 <__pow5mult>
 8008204:	4683      	mov	fp, r0
 8008206:	2101      	movs	r1, #1
 8008208:	4628      	mov	r0, r5
 800820a:	f000 fd37 	bl	8008c7c <__i2b>
 800820e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008210:	4604      	mov	r4, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	f340 8086 	ble.w	8008324 <_dtoa_r+0x8dc>
 8008218:	461a      	mov	r2, r3
 800821a:	4601      	mov	r1, r0
 800821c:	4628      	mov	r0, r5
 800821e:	f000 fdeb 	bl	8008df8 <__pow5mult>
 8008222:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008224:	4604      	mov	r4, r0
 8008226:	2b01      	cmp	r3, #1
 8008228:	dd7f      	ble.n	800832a <_dtoa_r+0x8e2>
 800822a:	f04f 0800 	mov.w	r8, #0
 800822e:	6923      	ldr	r3, [r4, #16]
 8008230:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008234:	6918      	ldr	r0, [r3, #16]
 8008236:	f000 fcd3 	bl	8008be0 <__hi0bits>
 800823a:	f1c0 0020 	rsb	r0, r0, #32
 800823e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008240:	4418      	add	r0, r3
 8008242:	f010 001f 	ands.w	r0, r0, #31
 8008246:	f000 8092 	beq.w	800836e <_dtoa_r+0x926>
 800824a:	f1c0 0320 	rsb	r3, r0, #32
 800824e:	2b04      	cmp	r3, #4
 8008250:	f340 808a 	ble.w	8008368 <_dtoa_r+0x920>
 8008254:	f1c0 001c 	rsb	r0, r0, #28
 8008258:	9b06      	ldr	r3, [sp, #24]
 800825a:	4407      	add	r7, r0
 800825c:	4403      	add	r3, r0
 800825e:	9306      	str	r3, [sp, #24]
 8008260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008262:	4403      	add	r3, r0
 8008264:	9309      	str	r3, [sp, #36]	; 0x24
 8008266:	9b06      	ldr	r3, [sp, #24]
 8008268:	2b00      	cmp	r3, #0
 800826a:	dd05      	ble.n	8008278 <_dtoa_r+0x830>
 800826c:	4659      	mov	r1, fp
 800826e:	461a      	mov	r2, r3
 8008270:	4628      	mov	r0, r5
 8008272:	f000 fe1b 	bl	8008eac <__lshift>
 8008276:	4683      	mov	fp, r0
 8008278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827a:	2b00      	cmp	r3, #0
 800827c:	dd05      	ble.n	800828a <_dtoa_r+0x842>
 800827e:	4621      	mov	r1, r4
 8008280:	461a      	mov	r2, r3
 8008282:	4628      	mov	r0, r5
 8008284:	f000 fe12 	bl	8008eac <__lshift>
 8008288:	4604      	mov	r4, r0
 800828a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800828c:	2b00      	cmp	r3, #0
 800828e:	d070      	beq.n	8008372 <_dtoa_r+0x92a>
 8008290:	4621      	mov	r1, r4
 8008292:	4658      	mov	r0, fp
 8008294:	f000 fe7a 	bl	8008f8c <__mcmp>
 8008298:	2800      	cmp	r0, #0
 800829a:	da6a      	bge.n	8008372 <_dtoa_r+0x92a>
 800829c:	2300      	movs	r3, #0
 800829e:	4659      	mov	r1, fp
 80082a0:	220a      	movs	r2, #10
 80082a2:	4628      	mov	r0, r5
 80082a4:	f000 fc56 	bl	8008b54 <__multadd>
 80082a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082aa:	4683      	mov	fp, r0
 80082ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	f000 8194 	beq.w	80085de <_dtoa_r+0xb96>
 80082b6:	4631      	mov	r1, r6
 80082b8:	2300      	movs	r3, #0
 80082ba:	220a      	movs	r2, #10
 80082bc:	4628      	mov	r0, r5
 80082be:	f000 fc49 	bl	8008b54 <__multadd>
 80082c2:	f1b9 0f00 	cmp.w	r9, #0
 80082c6:	4606      	mov	r6, r0
 80082c8:	f300 8093 	bgt.w	80083f2 <_dtoa_r+0x9aa>
 80082cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	dc57      	bgt.n	8008382 <_dtoa_r+0x93a>
 80082d2:	e08e      	b.n	80083f2 <_dtoa_r+0x9aa>
 80082d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80082d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80082da:	e757      	b.n	800818c <_dtoa_r+0x744>
 80082dc:	9b08      	ldr	r3, [sp, #32]
 80082de:	1e5c      	subs	r4, r3, #1
 80082e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e2:	42a3      	cmp	r3, r4
 80082e4:	bfb7      	itett	lt
 80082e6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80082e8:	1b1c      	subge	r4, r3, r4
 80082ea:	1ae2      	sublt	r2, r4, r3
 80082ec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80082ee:	bfbe      	ittt	lt
 80082f0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80082f2:	189b      	addlt	r3, r3, r2
 80082f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80082f6:	9b08      	ldr	r3, [sp, #32]
 80082f8:	bfb8      	it	lt
 80082fa:	2400      	movlt	r4, #0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	bfbb      	ittet	lt
 8008300:	9b06      	ldrlt	r3, [sp, #24]
 8008302:	9a08      	ldrlt	r2, [sp, #32]
 8008304:	9f06      	ldrge	r7, [sp, #24]
 8008306:	1a9f      	sublt	r7, r3, r2
 8008308:	bfac      	ite	ge
 800830a:	9b08      	ldrge	r3, [sp, #32]
 800830c:	2300      	movlt	r3, #0
 800830e:	e73f      	b.n	8008190 <_dtoa_r+0x748>
 8008310:	3fe00000 	.word	0x3fe00000
 8008314:	40240000 	.word	0x40240000
 8008318:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800831a:	9f06      	ldr	r7, [sp, #24]
 800831c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800831e:	e742      	b.n	80081a6 <_dtoa_r+0x75e>
 8008320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008322:	e76b      	b.n	80081fc <_dtoa_r+0x7b4>
 8008324:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008326:	2b01      	cmp	r3, #1
 8008328:	dc19      	bgt.n	800835e <_dtoa_r+0x916>
 800832a:	9b04      	ldr	r3, [sp, #16]
 800832c:	b9bb      	cbnz	r3, 800835e <_dtoa_r+0x916>
 800832e:	9b05      	ldr	r3, [sp, #20]
 8008330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008334:	b99b      	cbnz	r3, 800835e <_dtoa_r+0x916>
 8008336:	9b05      	ldr	r3, [sp, #20]
 8008338:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800833c:	0d1b      	lsrs	r3, r3, #20
 800833e:	051b      	lsls	r3, r3, #20
 8008340:	b183      	cbz	r3, 8008364 <_dtoa_r+0x91c>
 8008342:	f04f 0801 	mov.w	r8, #1
 8008346:	9b06      	ldr	r3, [sp, #24]
 8008348:	3301      	adds	r3, #1
 800834a:	9306      	str	r3, [sp, #24]
 800834c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800834e:	3301      	adds	r3, #1
 8008350:	9309      	str	r3, [sp, #36]	; 0x24
 8008352:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008354:	2b00      	cmp	r3, #0
 8008356:	f47f af6a 	bne.w	800822e <_dtoa_r+0x7e6>
 800835a:	2001      	movs	r0, #1
 800835c:	e76f      	b.n	800823e <_dtoa_r+0x7f6>
 800835e:	f04f 0800 	mov.w	r8, #0
 8008362:	e7f6      	b.n	8008352 <_dtoa_r+0x90a>
 8008364:	4698      	mov	r8, r3
 8008366:	e7f4      	b.n	8008352 <_dtoa_r+0x90a>
 8008368:	f43f af7d 	beq.w	8008266 <_dtoa_r+0x81e>
 800836c:	4618      	mov	r0, r3
 800836e:	301c      	adds	r0, #28
 8008370:	e772      	b.n	8008258 <_dtoa_r+0x810>
 8008372:	9b08      	ldr	r3, [sp, #32]
 8008374:	2b00      	cmp	r3, #0
 8008376:	dc36      	bgt.n	80083e6 <_dtoa_r+0x99e>
 8008378:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800837a:	2b02      	cmp	r3, #2
 800837c:	dd33      	ble.n	80083e6 <_dtoa_r+0x99e>
 800837e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008382:	f1b9 0f00 	cmp.w	r9, #0
 8008386:	d10d      	bne.n	80083a4 <_dtoa_r+0x95c>
 8008388:	4621      	mov	r1, r4
 800838a:	464b      	mov	r3, r9
 800838c:	2205      	movs	r2, #5
 800838e:	4628      	mov	r0, r5
 8008390:	f000 fbe0 	bl	8008b54 <__multadd>
 8008394:	4601      	mov	r1, r0
 8008396:	4604      	mov	r4, r0
 8008398:	4658      	mov	r0, fp
 800839a:	f000 fdf7 	bl	8008f8c <__mcmp>
 800839e:	2800      	cmp	r0, #0
 80083a0:	f73f adb8 	bgt.w	8007f14 <_dtoa_r+0x4cc>
 80083a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80083a6:	9f03      	ldr	r7, [sp, #12]
 80083a8:	ea6f 0a03 	mvn.w	sl, r3
 80083ac:	f04f 0800 	mov.w	r8, #0
 80083b0:	4621      	mov	r1, r4
 80083b2:	4628      	mov	r0, r5
 80083b4:	f000 fbac 	bl	8008b10 <_Bfree>
 80083b8:	2e00      	cmp	r6, #0
 80083ba:	f43f aea7 	beq.w	800810c <_dtoa_r+0x6c4>
 80083be:	f1b8 0f00 	cmp.w	r8, #0
 80083c2:	d005      	beq.n	80083d0 <_dtoa_r+0x988>
 80083c4:	45b0      	cmp	r8, r6
 80083c6:	d003      	beq.n	80083d0 <_dtoa_r+0x988>
 80083c8:	4641      	mov	r1, r8
 80083ca:	4628      	mov	r0, r5
 80083cc:	f000 fba0 	bl	8008b10 <_Bfree>
 80083d0:	4631      	mov	r1, r6
 80083d2:	4628      	mov	r0, r5
 80083d4:	f000 fb9c 	bl	8008b10 <_Bfree>
 80083d8:	e698      	b.n	800810c <_dtoa_r+0x6c4>
 80083da:	2400      	movs	r4, #0
 80083dc:	4626      	mov	r6, r4
 80083de:	e7e1      	b.n	80083a4 <_dtoa_r+0x95c>
 80083e0:	46c2      	mov	sl, r8
 80083e2:	4626      	mov	r6, r4
 80083e4:	e596      	b.n	8007f14 <_dtoa_r+0x4cc>
 80083e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 80fd 	beq.w	80085ec <_dtoa_r+0xba4>
 80083f2:	2f00      	cmp	r7, #0
 80083f4:	dd05      	ble.n	8008402 <_dtoa_r+0x9ba>
 80083f6:	4631      	mov	r1, r6
 80083f8:	463a      	mov	r2, r7
 80083fa:	4628      	mov	r0, r5
 80083fc:	f000 fd56 	bl	8008eac <__lshift>
 8008400:	4606      	mov	r6, r0
 8008402:	f1b8 0f00 	cmp.w	r8, #0
 8008406:	d05c      	beq.n	80084c2 <_dtoa_r+0xa7a>
 8008408:	4628      	mov	r0, r5
 800840a:	6871      	ldr	r1, [r6, #4]
 800840c:	f000 fb40 	bl	8008a90 <_Balloc>
 8008410:	4607      	mov	r7, r0
 8008412:	b928      	cbnz	r0, 8008420 <_dtoa_r+0x9d8>
 8008414:	4602      	mov	r2, r0
 8008416:	f240 21ea 	movw	r1, #746	; 0x2ea
 800841a:	4b7f      	ldr	r3, [pc, #508]	; (8008618 <_dtoa_r+0xbd0>)
 800841c:	f7ff bb28 	b.w	8007a70 <_dtoa_r+0x28>
 8008420:	6932      	ldr	r2, [r6, #16]
 8008422:	f106 010c 	add.w	r1, r6, #12
 8008426:	3202      	adds	r2, #2
 8008428:	0092      	lsls	r2, r2, #2
 800842a:	300c      	adds	r0, #12
 800842c:	f7fe fbe8 	bl	8006c00 <memcpy>
 8008430:	2201      	movs	r2, #1
 8008432:	4639      	mov	r1, r7
 8008434:	4628      	mov	r0, r5
 8008436:	f000 fd39 	bl	8008eac <__lshift>
 800843a:	46b0      	mov	r8, r6
 800843c:	4606      	mov	r6, r0
 800843e:	9b03      	ldr	r3, [sp, #12]
 8008440:	3301      	adds	r3, #1
 8008442:	9308      	str	r3, [sp, #32]
 8008444:	9b03      	ldr	r3, [sp, #12]
 8008446:	444b      	add	r3, r9
 8008448:	930a      	str	r3, [sp, #40]	; 0x28
 800844a:	9b04      	ldr	r3, [sp, #16]
 800844c:	f003 0301 	and.w	r3, r3, #1
 8008450:	9309      	str	r3, [sp, #36]	; 0x24
 8008452:	9b08      	ldr	r3, [sp, #32]
 8008454:	4621      	mov	r1, r4
 8008456:	3b01      	subs	r3, #1
 8008458:	4658      	mov	r0, fp
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	f7ff fa65 	bl	800792a <quorem>
 8008460:	4603      	mov	r3, r0
 8008462:	4641      	mov	r1, r8
 8008464:	3330      	adds	r3, #48	; 0x30
 8008466:	9006      	str	r0, [sp, #24]
 8008468:	4658      	mov	r0, fp
 800846a:	930b      	str	r3, [sp, #44]	; 0x2c
 800846c:	f000 fd8e 	bl	8008f8c <__mcmp>
 8008470:	4632      	mov	r2, r6
 8008472:	4681      	mov	r9, r0
 8008474:	4621      	mov	r1, r4
 8008476:	4628      	mov	r0, r5
 8008478:	f000 fda4 	bl	8008fc4 <__mdiff>
 800847c:	68c2      	ldr	r2, [r0, #12]
 800847e:	4607      	mov	r7, r0
 8008480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008482:	bb02      	cbnz	r2, 80084c6 <_dtoa_r+0xa7e>
 8008484:	4601      	mov	r1, r0
 8008486:	4658      	mov	r0, fp
 8008488:	f000 fd80 	bl	8008f8c <__mcmp>
 800848c:	4602      	mov	r2, r0
 800848e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008490:	4639      	mov	r1, r7
 8008492:	4628      	mov	r0, r5
 8008494:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008498:	f000 fb3a 	bl	8008b10 <_Bfree>
 800849c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800849e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084a0:	9f08      	ldr	r7, [sp, #32]
 80084a2:	ea43 0102 	orr.w	r1, r3, r2
 80084a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a8:	430b      	orrs	r3, r1
 80084aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084ac:	d10d      	bne.n	80084ca <_dtoa_r+0xa82>
 80084ae:	2b39      	cmp	r3, #57	; 0x39
 80084b0:	d029      	beq.n	8008506 <_dtoa_r+0xabe>
 80084b2:	f1b9 0f00 	cmp.w	r9, #0
 80084b6:	dd01      	ble.n	80084bc <_dtoa_r+0xa74>
 80084b8:	9b06      	ldr	r3, [sp, #24]
 80084ba:	3331      	adds	r3, #49	; 0x31
 80084bc:	9a04      	ldr	r2, [sp, #16]
 80084be:	7013      	strb	r3, [r2, #0]
 80084c0:	e776      	b.n	80083b0 <_dtoa_r+0x968>
 80084c2:	4630      	mov	r0, r6
 80084c4:	e7b9      	b.n	800843a <_dtoa_r+0x9f2>
 80084c6:	2201      	movs	r2, #1
 80084c8:	e7e2      	b.n	8008490 <_dtoa_r+0xa48>
 80084ca:	f1b9 0f00 	cmp.w	r9, #0
 80084ce:	db06      	blt.n	80084de <_dtoa_r+0xa96>
 80084d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80084d2:	ea41 0909 	orr.w	r9, r1, r9
 80084d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084d8:	ea59 0101 	orrs.w	r1, r9, r1
 80084dc:	d120      	bne.n	8008520 <_dtoa_r+0xad8>
 80084de:	2a00      	cmp	r2, #0
 80084e0:	ddec      	ble.n	80084bc <_dtoa_r+0xa74>
 80084e2:	4659      	mov	r1, fp
 80084e4:	2201      	movs	r2, #1
 80084e6:	4628      	mov	r0, r5
 80084e8:	9308      	str	r3, [sp, #32]
 80084ea:	f000 fcdf 	bl	8008eac <__lshift>
 80084ee:	4621      	mov	r1, r4
 80084f0:	4683      	mov	fp, r0
 80084f2:	f000 fd4b 	bl	8008f8c <__mcmp>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	9b08      	ldr	r3, [sp, #32]
 80084fa:	dc02      	bgt.n	8008502 <_dtoa_r+0xaba>
 80084fc:	d1de      	bne.n	80084bc <_dtoa_r+0xa74>
 80084fe:	07da      	lsls	r2, r3, #31
 8008500:	d5dc      	bpl.n	80084bc <_dtoa_r+0xa74>
 8008502:	2b39      	cmp	r3, #57	; 0x39
 8008504:	d1d8      	bne.n	80084b8 <_dtoa_r+0xa70>
 8008506:	2339      	movs	r3, #57	; 0x39
 8008508:	9a04      	ldr	r2, [sp, #16]
 800850a:	7013      	strb	r3, [r2, #0]
 800850c:	463b      	mov	r3, r7
 800850e:	461f      	mov	r7, r3
 8008510:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008514:	3b01      	subs	r3, #1
 8008516:	2a39      	cmp	r2, #57	; 0x39
 8008518:	d050      	beq.n	80085bc <_dtoa_r+0xb74>
 800851a:	3201      	adds	r2, #1
 800851c:	701a      	strb	r2, [r3, #0]
 800851e:	e747      	b.n	80083b0 <_dtoa_r+0x968>
 8008520:	2a00      	cmp	r2, #0
 8008522:	dd03      	ble.n	800852c <_dtoa_r+0xae4>
 8008524:	2b39      	cmp	r3, #57	; 0x39
 8008526:	d0ee      	beq.n	8008506 <_dtoa_r+0xabe>
 8008528:	3301      	adds	r3, #1
 800852a:	e7c7      	b.n	80084bc <_dtoa_r+0xa74>
 800852c:	9a08      	ldr	r2, [sp, #32]
 800852e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008530:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008534:	428a      	cmp	r2, r1
 8008536:	d02a      	beq.n	800858e <_dtoa_r+0xb46>
 8008538:	4659      	mov	r1, fp
 800853a:	2300      	movs	r3, #0
 800853c:	220a      	movs	r2, #10
 800853e:	4628      	mov	r0, r5
 8008540:	f000 fb08 	bl	8008b54 <__multadd>
 8008544:	45b0      	cmp	r8, r6
 8008546:	4683      	mov	fp, r0
 8008548:	f04f 0300 	mov.w	r3, #0
 800854c:	f04f 020a 	mov.w	r2, #10
 8008550:	4641      	mov	r1, r8
 8008552:	4628      	mov	r0, r5
 8008554:	d107      	bne.n	8008566 <_dtoa_r+0xb1e>
 8008556:	f000 fafd 	bl	8008b54 <__multadd>
 800855a:	4680      	mov	r8, r0
 800855c:	4606      	mov	r6, r0
 800855e:	9b08      	ldr	r3, [sp, #32]
 8008560:	3301      	adds	r3, #1
 8008562:	9308      	str	r3, [sp, #32]
 8008564:	e775      	b.n	8008452 <_dtoa_r+0xa0a>
 8008566:	f000 faf5 	bl	8008b54 <__multadd>
 800856a:	4631      	mov	r1, r6
 800856c:	4680      	mov	r8, r0
 800856e:	2300      	movs	r3, #0
 8008570:	220a      	movs	r2, #10
 8008572:	4628      	mov	r0, r5
 8008574:	f000 faee 	bl	8008b54 <__multadd>
 8008578:	4606      	mov	r6, r0
 800857a:	e7f0      	b.n	800855e <_dtoa_r+0xb16>
 800857c:	f1b9 0f00 	cmp.w	r9, #0
 8008580:	bfcc      	ite	gt
 8008582:	464f      	movgt	r7, r9
 8008584:	2701      	movle	r7, #1
 8008586:	f04f 0800 	mov.w	r8, #0
 800858a:	9a03      	ldr	r2, [sp, #12]
 800858c:	4417      	add	r7, r2
 800858e:	4659      	mov	r1, fp
 8008590:	2201      	movs	r2, #1
 8008592:	4628      	mov	r0, r5
 8008594:	9308      	str	r3, [sp, #32]
 8008596:	f000 fc89 	bl	8008eac <__lshift>
 800859a:	4621      	mov	r1, r4
 800859c:	4683      	mov	fp, r0
 800859e:	f000 fcf5 	bl	8008f8c <__mcmp>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	dcb2      	bgt.n	800850c <_dtoa_r+0xac4>
 80085a6:	d102      	bne.n	80085ae <_dtoa_r+0xb66>
 80085a8:	9b08      	ldr	r3, [sp, #32]
 80085aa:	07db      	lsls	r3, r3, #31
 80085ac:	d4ae      	bmi.n	800850c <_dtoa_r+0xac4>
 80085ae:	463b      	mov	r3, r7
 80085b0:	461f      	mov	r7, r3
 80085b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085b6:	2a30      	cmp	r2, #48	; 0x30
 80085b8:	d0fa      	beq.n	80085b0 <_dtoa_r+0xb68>
 80085ba:	e6f9      	b.n	80083b0 <_dtoa_r+0x968>
 80085bc:	9a03      	ldr	r2, [sp, #12]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d1a5      	bne.n	800850e <_dtoa_r+0xac6>
 80085c2:	2331      	movs	r3, #49	; 0x31
 80085c4:	f10a 0a01 	add.w	sl, sl, #1
 80085c8:	e779      	b.n	80084be <_dtoa_r+0xa76>
 80085ca:	4b14      	ldr	r3, [pc, #80]	; (800861c <_dtoa_r+0xbd4>)
 80085cc:	f7ff baa8 	b.w	8007b20 <_dtoa_r+0xd8>
 80085d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f47f aa81 	bne.w	8007ada <_dtoa_r+0x92>
 80085d8:	4b11      	ldr	r3, [pc, #68]	; (8008620 <_dtoa_r+0xbd8>)
 80085da:	f7ff baa1 	b.w	8007b20 <_dtoa_r+0xd8>
 80085de:	f1b9 0f00 	cmp.w	r9, #0
 80085e2:	dc03      	bgt.n	80085ec <_dtoa_r+0xba4>
 80085e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	f73f aecb 	bgt.w	8008382 <_dtoa_r+0x93a>
 80085ec:	9f03      	ldr	r7, [sp, #12]
 80085ee:	4621      	mov	r1, r4
 80085f0:	4658      	mov	r0, fp
 80085f2:	f7ff f99a 	bl	800792a <quorem>
 80085f6:	9a03      	ldr	r2, [sp, #12]
 80085f8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80085fc:	f807 3b01 	strb.w	r3, [r7], #1
 8008600:	1aba      	subs	r2, r7, r2
 8008602:	4591      	cmp	r9, r2
 8008604:	ddba      	ble.n	800857c <_dtoa_r+0xb34>
 8008606:	4659      	mov	r1, fp
 8008608:	2300      	movs	r3, #0
 800860a:	220a      	movs	r2, #10
 800860c:	4628      	mov	r0, r5
 800860e:	f000 faa1 	bl	8008b54 <__multadd>
 8008612:	4683      	mov	fp, r0
 8008614:	e7eb      	b.n	80085ee <_dtoa_r+0xba6>
 8008616:	bf00      	nop
 8008618:	080097c8 	.word	0x080097c8
 800861c:	08009725 	.word	0x08009725
 8008620:	08009749 	.word	0x08009749

08008624 <__sflush_r>:
 8008624:	898a      	ldrh	r2, [r1, #12]
 8008626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008628:	4605      	mov	r5, r0
 800862a:	0710      	lsls	r0, r2, #28
 800862c:	460c      	mov	r4, r1
 800862e:	d457      	bmi.n	80086e0 <__sflush_r+0xbc>
 8008630:	684b      	ldr	r3, [r1, #4]
 8008632:	2b00      	cmp	r3, #0
 8008634:	dc04      	bgt.n	8008640 <__sflush_r+0x1c>
 8008636:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008638:	2b00      	cmp	r3, #0
 800863a:	dc01      	bgt.n	8008640 <__sflush_r+0x1c>
 800863c:	2000      	movs	r0, #0
 800863e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008642:	2e00      	cmp	r6, #0
 8008644:	d0fa      	beq.n	800863c <__sflush_r+0x18>
 8008646:	2300      	movs	r3, #0
 8008648:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800864c:	682f      	ldr	r7, [r5, #0]
 800864e:	602b      	str	r3, [r5, #0]
 8008650:	d032      	beq.n	80086b8 <__sflush_r+0x94>
 8008652:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008654:	89a3      	ldrh	r3, [r4, #12]
 8008656:	075a      	lsls	r2, r3, #29
 8008658:	d505      	bpl.n	8008666 <__sflush_r+0x42>
 800865a:	6863      	ldr	r3, [r4, #4]
 800865c:	1ac0      	subs	r0, r0, r3
 800865e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008660:	b10b      	cbz	r3, 8008666 <__sflush_r+0x42>
 8008662:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008664:	1ac0      	subs	r0, r0, r3
 8008666:	2300      	movs	r3, #0
 8008668:	4602      	mov	r2, r0
 800866a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800866c:	4628      	mov	r0, r5
 800866e:	6a21      	ldr	r1, [r4, #32]
 8008670:	47b0      	blx	r6
 8008672:	1c43      	adds	r3, r0, #1
 8008674:	89a3      	ldrh	r3, [r4, #12]
 8008676:	d106      	bne.n	8008686 <__sflush_r+0x62>
 8008678:	6829      	ldr	r1, [r5, #0]
 800867a:	291d      	cmp	r1, #29
 800867c:	d82c      	bhi.n	80086d8 <__sflush_r+0xb4>
 800867e:	4a29      	ldr	r2, [pc, #164]	; (8008724 <__sflush_r+0x100>)
 8008680:	40ca      	lsrs	r2, r1
 8008682:	07d6      	lsls	r6, r2, #31
 8008684:	d528      	bpl.n	80086d8 <__sflush_r+0xb4>
 8008686:	2200      	movs	r2, #0
 8008688:	6062      	str	r2, [r4, #4]
 800868a:	6922      	ldr	r2, [r4, #16]
 800868c:	04d9      	lsls	r1, r3, #19
 800868e:	6022      	str	r2, [r4, #0]
 8008690:	d504      	bpl.n	800869c <__sflush_r+0x78>
 8008692:	1c42      	adds	r2, r0, #1
 8008694:	d101      	bne.n	800869a <__sflush_r+0x76>
 8008696:	682b      	ldr	r3, [r5, #0]
 8008698:	b903      	cbnz	r3, 800869c <__sflush_r+0x78>
 800869a:	6560      	str	r0, [r4, #84]	; 0x54
 800869c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800869e:	602f      	str	r7, [r5, #0]
 80086a0:	2900      	cmp	r1, #0
 80086a2:	d0cb      	beq.n	800863c <__sflush_r+0x18>
 80086a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086a8:	4299      	cmp	r1, r3
 80086aa:	d002      	beq.n	80086b2 <__sflush_r+0x8e>
 80086ac:	4628      	mov	r0, r5
 80086ae:	f000 fd85 	bl	80091bc <_free_r>
 80086b2:	2000      	movs	r0, #0
 80086b4:	6360      	str	r0, [r4, #52]	; 0x34
 80086b6:	e7c2      	b.n	800863e <__sflush_r+0x1a>
 80086b8:	6a21      	ldr	r1, [r4, #32]
 80086ba:	2301      	movs	r3, #1
 80086bc:	4628      	mov	r0, r5
 80086be:	47b0      	blx	r6
 80086c0:	1c41      	adds	r1, r0, #1
 80086c2:	d1c7      	bne.n	8008654 <__sflush_r+0x30>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d0c4      	beq.n	8008654 <__sflush_r+0x30>
 80086ca:	2b1d      	cmp	r3, #29
 80086cc:	d001      	beq.n	80086d2 <__sflush_r+0xae>
 80086ce:	2b16      	cmp	r3, #22
 80086d0:	d101      	bne.n	80086d6 <__sflush_r+0xb2>
 80086d2:	602f      	str	r7, [r5, #0]
 80086d4:	e7b2      	b.n	800863c <__sflush_r+0x18>
 80086d6:	89a3      	ldrh	r3, [r4, #12]
 80086d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80086dc:	81a3      	strh	r3, [r4, #12]
 80086de:	e7ae      	b.n	800863e <__sflush_r+0x1a>
 80086e0:	690f      	ldr	r7, [r1, #16]
 80086e2:	2f00      	cmp	r7, #0
 80086e4:	d0aa      	beq.n	800863c <__sflush_r+0x18>
 80086e6:	0793      	lsls	r3, r2, #30
 80086e8:	bf18      	it	ne
 80086ea:	2300      	movne	r3, #0
 80086ec:	680e      	ldr	r6, [r1, #0]
 80086ee:	bf08      	it	eq
 80086f0:	694b      	ldreq	r3, [r1, #20]
 80086f2:	1bf6      	subs	r6, r6, r7
 80086f4:	600f      	str	r7, [r1, #0]
 80086f6:	608b      	str	r3, [r1, #8]
 80086f8:	2e00      	cmp	r6, #0
 80086fa:	dd9f      	ble.n	800863c <__sflush_r+0x18>
 80086fc:	4633      	mov	r3, r6
 80086fe:	463a      	mov	r2, r7
 8008700:	4628      	mov	r0, r5
 8008702:	6a21      	ldr	r1, [r4, #32]
 8008704:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008708:	47e0      	blx	ip
 800870a:	2800      	cmp	r0, #0
 800870c:	dc06      	bgt.n	800871c <__sflush_r+0xf8>
 800870e:	89a3      	ldrh	r3, [r4, #12]
 8008710:	f04f 30ff 	mov.w	r0, #4294967295
 8008714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008718:	81a3      	strh	r3, [r4, #12]
 800871a:	e790      	b.n	800863e <__sflush_r+0x1a>
 800871c:	4407      	add	r7, r0
 800871e:	1a36      	subs	r6, r6, r0
 8008720:	e7ea      	b.n	80086f8 <__sflush_r+0xd4>
 8008722:	bf00      	nop
 8008724:	20400001 	.word	0x20400001

08008728 <_fflush_r>:
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	690b      	ldr	r3, [r1, #16]
 800872c:	4605      	mov	r5, r0
 800872e:	460c      	mov	r4, r1
 8008730:	b913      	cbnz	r3, 8008738 <_fflush_r+0x10>
 8008732:	2500      	movs	r5, #0
 8008734:	4628      	mov	r0, r5
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	b118      	cbz	r0, 8008742 <_fflush_r+0x1a>
 800873a:	6983      	ldr	r3, [r0, #24]
 800873c:	b90b      	cbnz	r3, 8008742 <_fflush_r+0x1a>
 800873e:	f000 f887 	bl	8008850 <__sinit>
 8008742:	4b14      	ldr	r3, [pc, #80]	; (8008794 <_fflush_r+0x6c>)
 8008744:	429c      	cmp	r4, r3
 8008746:	d11b      	bne.n	8008780 <_fflush_r+0x58>
 8008748:	686c      	ldr	r4, [r5, #4]
 800874a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d0ef      	beq.n	8008732 <_fflush_r+0xa>
 8008752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008754:	07d0      	lsls	r0, r2, #31
 8008756:	d404      	bmi.n	8008762 <_fflush_r+0x3a>
 8008758:	0599      	lsls	r1, r3, #22
 800875a:	d402      	bmi.n	8008762 <_fflush_r+0x3a>
 800875c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800875e:	f000 f91a 	bl	8008996 <__retarget_lock_acquire_recursive>
 8008762:	4628      	mov	r0, r5
 8008764:	4621      	mov	r1, r4
 8008766:	f7ff ff5d 	bl	8008624 <__sflush_r>
 800876a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800876c:	4605      	mov	r5, r0
 800876e:	07da      	lsls	r2, r3, #31
 8008770:	d4e0      	bmi.n	8008734 <_fflush_r+0xc>
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	059b      	lsls	r3, r3, #22
 8008776:	d4dd      	bmi.n	8008734 <_fflush_r+0xc>
 8008778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800877a:	f000 f90d 	bl	8008998 <__retarget_lock_release_recursive>
 800877e:	e7d9      	b.n	8008734 <_fflush_r+0xc>
 8008780:	4b05      	ldr	r3, [pc, #20]	; (8008798 <_fflush_r+0x70>)
 8008782:	429c      	cmp	r4, r3
 8008784:	d101      	bne.n	800878a <_fflush_r+0x62>
 8008786:	68ac      	ldr	r4, [r5, #8]
 8008788:	e7df      	b.n	800874a <_fflush_r+0x22>
 800878a:	4b04      	ldr	r3, [pc, #16]	; (800879c <_fflush_r+0x74>)
 800878c:	429c      	cmp	r4, r3
 800878e:	bf08      	it	eq
 8008790:	68ec      	ldreq	r4, [r5, #12]
 8008792:	e7da      	b.n	800874a <_fflush_r+0x22>
 8008794:	080097fc 	.word	0x080097fc
 8008798:	0800981c 	.word	0x0800981c
 800879c:	080097dc 	.word	0x080097dc

080087a0 <std>:
 80087a0:	2300      	movs	r3, #0
 80087a2:	b510      	push	{r4, lr}
 80087a4:	4604      	mov	r4, r0
 80087a6:	e9c0 3300 	strd	r3, r3, [r0]
 80087aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087ae:	6083      	str	r3, [r0, #8]
 80087b0:	8181      	strh	r1, [r0, #12]
 80087b2:	6643      	str	r3, [r0, #100]	; 0x64
 80087b4:	81c2      	strh	r2, [r0, #14]
 80087b6:	6183      	str	r3, [r0, #24]
 80087b8:	4619      	mov	r1, r3
 80087ba:	2208      	movs	r2, #8
 80087bc:	305c      	adds	r0, #92	; 0x5c
 80087be:	f7fe fa2d 	bl	8006c1c <memset>
 80087c2:	4b05      	ldr	r3, [pc, #20]	; (80087d8 <std+0x38>)
 80087c4:	6224      	str	r4, [r4, #32]
 80087c6:	6263      	str	r3, [r4, #36]	; 0x24
 80087c8:	4b04      	ldr	r3, [pc, #16]	; (80087dc <std+0x3c>)
 80087ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80087cc:	4b04      	ldr	r3, [pc, #16]	; (80087e0 <std+0x40>)
 80087ce:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087d0:	4b04      	ldr	r3, [pc, #16]	; (80087e4 <std+0x44>)
 80087d2:	6323      	str	r3, [r4, #48]	; 0x30
 80087d4:	bd10      	pop	{r4, pc}
 80087d6:	bf00      	nop
 80087d8:	0800941d 	.word	0x0800941d
 80087dc:	0800943f 	.word	0x0800943f
 80087e0:	08009477 	.word	0x08009477
 80087e4:	0800949b 	.word	0x0800949b

080087e8 <_cleanup_r>:
 80087e8:	4901      	ldr	r1, [pc, #4]	; (80087f0 <_cleanup_r+0x8>)
 80087ea:	f000 b8af 	b.w	800894c <_fwalk_reent>
 80087ee:	bf00      	nop
 80087f0:	08008729 	.word	0x08008729

080087f4 <__sfmoreglue>:
 80087f4:	2268      	movs	r2, #104	; 0x68
 80087f6:	b570      	push	{r4, r5, r6, lr}
 80087f8:	1e4d      	subs	r5, r1, #1
 80087fa:	4355      	muls	r5, r2
 80087fc:	460e      	mov	r6, r1
 80087fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008802:	f000 fd43 	bl	800928c <_malloc_r>
 8008806:	4604      	mov	r4, r0
 8008808:	b140      	cbz	r0, 800881c <__sfmoreglue+0x28>
 800880a:	2100      	movs	r1, #0
 800880c:	e9c0 1600 	strd	r1, r6, [r0]
 8008810:	300c      	adds	r0, #12
 8008812:	60a0      	str	r0, [r4, #8]
 8008814:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008818:	f7fe fa00 	bl	8006c1c <memset>
 800881c:	4620      	mov	r0, r4
 800881e:	bd70      	pop	{r4, r5, r6, pc}

08008820 <__sfp_lock_acquire>:
 8008820:	4801      	ldr	r0, [pc, #4]	; (8008828 <__sfp_lock_acquire+0x8>)
 8008822:	f000 b8b8 	b.w	8008996 <__retarget_lock_acquire_recursive>
 8008826:	bf00      	nop
 8008828:	20000ddd 	.word	0x20000ddd

0800882c <__sfp_lock_release>:
 800882c:	4801      	ldr	r0, [pc, #4]	; (8008834 <__sfp_lock_release+0x8>)
 800882e:	f000 b8b3 	b.w	8008998 <__retarget_lock_release_recursive>
 8008832:	bf00      	nop
 8008834:	20000ddd 	.word	0x20000ddd

08008838 <__sinit_lock_acquire>:
 8008838:	4801      	ldr	r0, [pc, #4]	; (8008840 <__sinit_lock_acquire+0x8>)
 800883a:	f000 b8ac 	b.w	8008996 <__retarget_lock_acquire_recursive>
 800883e:	bf00      	nop
 8008840:	20000dde 	.word	0x20000dde

08008844 <__sinit_lock_release>:
 8008844:	4801      	ldr	r0, [pc, #4]	; (800884c <__sinit_lock_release+0x8>)
 8008846:	f000 b8a7 	b.w	8008998 <__retarget_lock_release_recursive>
 800884a:	bf00      	nop
 800884c:	20000dde 	.word	0x20000dde

08008850 <__sinit>:
 8008850:	b510      	push	{r4, lr}
 8008852:	4604      	mov	r4, r0
 8008854:	f7ff fff0 	bl	8008838 <__sinit_lock_acquire>
 8008858:	69a3      	ldr	r3, [r4, #24]
 800885a:	b11b      	cbz	r3, 8008864 <__sinit+0x14>
 800885c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008860:	f7ff bff0 	b.w	8008844 <__sinit_lock_release>
 8008864:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008868:	6523      	str	r3, [r4, #80]	; 0x50
 800886a:	4b13      	ldr	r3, [pc, #76]	; (80088b8 <__sinit+0x68>)
 800886c:	4a13      	ldr	r2, [pc, #76]	; (80088bc <__sinit+0x6c>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	62a2      	str	r2, [r4, #40]	; 0x28
 8008872:	42a3      	cmp	r3, r4
 8008874:	bf08      	it	eq
 8008876:	2301      	moveq	r3, #1
 8008878:	4620      	mov	r0, r4
 800887a:	bf08      	it	eq
 800887c:	61a3      	streq	r3, [r4, #24]
 800887e:	f000 f81f 	bl	80088c0 <__sfp>
 8008882:	6060      	str	r0, [r4, #4]
 8008884:	4620      	mov	r0, r4
 8008886:	f000 f81b 	bl	80088c0 <__sfp>
 800888a:	60a0      	str	r0, [r4, #8]
 800888c:	4620      	mov	r0, r4
 800888e:	f000 f817 	bl	80088c0 <__sfp>
 8008892:	2200      	movs	r2, #0
 8008894:	2104      	movs	r1, #4
 8008896:	60e0      	str	r0, [r4, #12]
 8008898:	6860      	ldr	r0, [r4, #4]
 800889a:	f7ff ff81 	bl	80087a0 <std>
 800889e:	2201      	movs	r2, #1
 80088a0:	2109      	movs	r1, #9
 80088a2:	68a0      	ldr	r0, [r4, #8]
 80088a4:	f7ff ff7c 	bl	80087a0 <std>
 80088a8:	2202      	movs	r2, #2
 80088aa:	2112      	movs	r1, #18
 80088ac:	68e0      	ldr	r0, [r4, #12]
 80088ae:	f7ff ff77 	bl	80087a0 <std>
 80088b2:	2301      	movs	r3, #1
 80088b4:	61a3      	str	r3, [r4, #24]
 80088b6:	e7d1      	b.n	800885c <__sinit+0xc>
 80088b8:	08009700 	.word	0x08009700
 80088bc:	080087e9 	.word	0x080087e9

080088c0 <__sfp>:
 80088c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088c2:	4607      	mov	r7, r0
 80088c4:	f7ff ffac 	bl	8008820 <__sfp_lock_acquire>
 80088c8:	4b1e      	ldr	r3, [pc, #120]	; (8008944 <__sfp+0x84>)
 80088ca:	681e      	ldr	r6, [r3, #0]
 80088cc:	69b3      	ldr	r3, [r6, #24]
 80088ce:	b913      	cbnz	r3, 80088d6 <__sfp+0x16>
 80088d0:	4630      	mov	r0, r6
 80088d2:	f7ff ffbd 	bl	8008850 <__sinit>
 80088d6:	3648      	adds	r6, #72	; 0x48
 80088d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80088dc:	3b01      	subs	r3, #1
 80088de:	d503      	bpl.n	80088e8 <__sfp+0x28>
 80088e0:	6833      	ldr	r3, [r6, #0]
 80088e2:	b30b      	cbz	r3, 8008928 <__sfp+0x68>
 80088e4:	6836      	ldr	r6, [r6, #0]
 80088e6:	e7f7      	b.n	80088d8 <__sfp+0x18>
 80088e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80088ec:	b9d5      	cbnz	r5, 8008924 <__sfp+0x64>
 80088ee:	4b16      	ldr	r3, [pc, #88]	; (8008948 <__sfp+0x88>)
 80088f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088f4:	60e3      	str	r3, [r4, #12]
 80088f6:	6665      	str	r5, [r4, #100]	; 0x64
 80088f8:	f000 f84c 	bl	8008994 <__retarget_lock_init_recursive>
 80088fc:	f7ff ff96 	bl	800882c <__sfp_lock_release>
 8008900:	2208      	movs	r2, #8
 8008902:	4629      	mov	r1, r5
 8008904:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008908:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800890c:	6025      	str	r5, [r4, #0]
 800890e:	61a5      	str	r5, [r4, #24]
 8008910:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008914:	f7fe f982 	bl	8006c1c <memset>
 8008918:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800891c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008920:	4620      	mov	r0, r4
 8008922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008924:	3468      	adds	r4, #104	; 0x68
 8008926:	e7d9      	b.n	80088dc <__sfp+0x1c>
 8008928:	2104      	movs	r1, #4
 800892a:	4638      	mov	r0, r7
 800892c:	f7ff ff62 	bl	80087f4 <__sfmoreglue>
 8008930:	4604      	mov	r4, r0
 8008932:	6030      	str	r0, [r6, #0]
 8008934:	2800      	cmp	r0, #0
 8008936:	d1d5      	bne.n	80088e4 <__sfp+0x24>
 8008938:	f7ff ff78 	bl	800882c <__sfp_lock_release>
 800893c:	230c      	movs	r3, #12
 800893e:	603b      	str	r3, [r7, #0]
 8008940:	e7ee      	b.n	8008920 <__sfp+0x60>
 8008942:	bf00      	nop
 8008944:	08009700 	.word	0x08009700
 8008948:	ffff0001 	.word	0xffff0001

0800894c <_fwalk_reent>:
 800894c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008950:	4606      	mov	r6, r0
 8008952:	4688      	mov	r8, r1
 8008954:	2700      	movs	r7, #0
 8008956:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800895a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800895e:	f1b9 0901 	subs.w	r9, r9, #1
 8008962:	d505      	bpl.n	8008970 <_fwalk_reent+0x24>
 8008964:	6824      	ldr	r4, [r4, #0]
 8008966:	2c00      	cmp	r4, #0
 8008968:	d1f7      	bne.n	800895a <_fwalk_reent+0xe>
 800896a:	4638      	mov	r0, r7
 800896c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008970:	89ab      	ldrh	r3, [r5, #12]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d907      	bls.n	8008986 <_fwalk_reent+0x3a>
 8008976:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800897a:	3301      	adds	r3, #1
 800897c:	d003      	beq.n	8008986 <_fwalk_reent+0x3a>
 800897e:	4629      	mov	r1, r5
 8008980:	4630      	mov	r0, r6
 8008982:	47c0      	blx	r8
 8008984:	4307      	orrs	r7, r0
 8008986:	3568      	adds	r5, #104	; 0x68
 8008988:	e7e9      	b.n	800895e <_fwalk_reent+0x12>
	...

0800898c <_localeconv_r>:
 800898c:	4800      	ldr	r0, [pc, #0]	; (8008990 <_localeconv_r+0x4>)
 800898e:	4770      	bx	lr
 8008990:	20000164 	.word	0x20000164

08008994 <__retarget_lock_init_recursive>:
 8008994:	4770      	bx	lr

08008996 <__retarget_lock_acquire_recursive>:
 8008996:	4770      	bx	lr

08008998 <__retarget_lock_release_recursive>:
 8008998:	4770      	bx	lr

0800899a <__swhatbuf_r>:
 800899a:	b570      	push	{r4, r5, r6, lr}
 800899c:	460e      	mov	r6, r1
 800899e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a2:	4614      	mov	r4, r2
 80089a4:	2900      	cmp	r1, #0
 80089a6:	461d      	mov	r5, r3
 80089a8:	b096      	sub	sp, #88	; 0x58
 80089aa:	da08      	bge.n	80089be <__swhatbuf_r+0x24>
 80089ac:	2200      	movs	r2, #0
 80089ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80089b2:	602a      	str	r2, [r5, #0]
 80089b4:	061a      	lsls	r2, r3, #24
 80089b6:	d410      	bmi.n	80089da <__swhatbuf_r+0x40>
 80089b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089bc:	e00e      	b.n	80089dc <__swhatbuf_r+0x42>
 80089be:	466a      	mov	r2, sp
 80089c0:	f000 fd92 	bl	80094e8 <_fstat_r>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	dbf1      	blt.n	80089ac <__swhatbuf_r+0x12>
 80089c8:	9a01      	ldr	r2, [sp, #4]
 80089ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089d2:	425a      	negs	r2, r3
 80089d4:	415a      	adcs	r2, r3
 80089d6:	602a      	str	r2, [r5, #0]
 80089d8:	e7ee      	b.n	80089b8 <__swhatbuf_r+0x1e>
 80089da:	2340      	movs	r3, #64	; 0x40
 80089dc:	2000      	movs	r0, #0
 80089de:	6023      	str	r3, [r4, #0]
 80089e0:	b016      	add	sp, #88	; 0x58
 80089e2:	bd70      	pop	{r4, r5, r6, pc}

080089e4 <__smakebuf_r>:
 80089e4:	898b      	ldrh	r3, [r1, #12]
 80089e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089e8:	079d      	lsls	r5, r3, #30
 80089ea:	4606      	mov	r6, r0
 80089ec:	460c      	mov	r4, r1
 80089ee:	d507      	bpl.n	8008a00 <__smakebuf_r+0x1c>
 80089f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	6123      	str	r3, [r4, #16]
 80089f8:	2301      	movs	r3, #1
 80089fa:	6163      	str	r3, [r4, #20]
 80089fc:	b002      	add	sp, #8
 80089fe:	bd70      	pop	{r4, r5, r6, pc}
 8008a00:	466a      	mov	r2, sp
 8008a02:	ab01      	add	r3, sp, #4
 8008a04:	f7ff ffc9 	bl	800899a <__swhatbuf_r>
 8008a08:	9900      	ldr	r1, [sp, #0]
 8008a0a:	4605      	mov	r5, r0
 8008a0c:	4630      	mov	r0, r6
 8008a0e:	f000 fc3d 	bl	800928c <_malloc_r>
 8008a12:	b948      	cbnz	r0, 8008a28 <__smakebuf_r+0x44>
 8008a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a18:	059a      	lsls	r2, r3, #22
 8008a1a:	d4ef      	bmi.n	80089fc <__smakebuf_r+0x18>
 8008a1c:	f023 0303 	bic.w	r3, r3, #3
 8008a20:	f043 0302 	orr.w	r3, r3, #2
 8008a24:	81a3      	strh	r3, [r4, #12]
 8008a26:	e7e3      	b.n	80089f0 <__smakebuf_r+0xc>
 8008a28:	4b0d      	ldr	r3, [pc, #52]	; (8008a60 <__smakebuf_r+0x7c>)
 8008a2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	6020      	str	r0, [r4, #0]
 8008a30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a34:	81a3      	strh	r3, [r4, #12]
 8008a36:	9b00      	ldr	r3, [sp, #0]
 8008a38:	6120      	str	r0, [r4, #16]
 8008a3a:	6163      	str	r3, [r4, #20]
 8008a3c:	9b01      	ldr	r3, [sp, #4]
 8008a3e:	b15b      	cbz	r3, 8008a58 <__smakebuf_r+0x74>
 8008a40:	4630      	mov	r0, r6
 8008a42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a46:	f000 fd61 	bl	800950c <_isatty_r>
 8008a4a:	b128      	cbz	r0, 8008a58 <__smakebuf_r+0x74>
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	f023 0303 	bic.w	r3, r3, #3
 8008a52:	f043 0301 	orr.w	r3, r3, #1
 8008a56:	81a3      	strh	r3, [r4, #12]
 8008a58:	89a0      	ldrh	r0, [r4, #12]
 8008a5a:	4305      	orrs	r5, r0
 8008a5c:	81a5      	strh	r5, [r4, #12]
 8008a5e:	e7cd      	b.n	80089fc <__smakebuf_r+0x18>
 8008a60:	080087e9 	.word	0x080087e9

08008a64 <malloc>:
 8008a64:	4b02      	ldr	r3, [pc, #8]	; (8008a70 <malloc+0xc>)
 8008a66:	4601      	mov	r1, r0
 8008a68:	6818      	ldr	r0, [r3, #0]
 8008a6a:	f000 bc0f 	b.w	800928c <_malloc_r>
 8008a6e:	bf00      	nop
 8008a70:	20000010 	.word	0x20000010

08008a74 <memchr>:
 8008a74:	4603      	mov	r3, r0
 8008a76:	b510      	push	{r4, lr}
 8008a78:	b2c9      	uxtb	r1, r1
 8008a7a:	4402      	add	r2, r0
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	4618      	mov	r0, r3
 8008a80:	d101      	bne.n	8008a86 <memchr+0x12>
 8008a82:	2000      	movs	r0, #0
 8008a84:	e003      	b.n	8008a8e <memchr+0x1a>
 8008a86:	7804      	ldrb	r4, [r0, #0]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	428c      	cmp	r4, r1
 8008a8c:	d1f6      	bne.n	8008a7c <memchr+0x8>
 8008a8e:	bd10      	pop	{r4, pc}

08008a90 <_Balloc>:
 8008a90:	b570      	push	{r4, r5, r6, lr}
 8008a92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008a94:	4604      	mov	r4, r0
 8008a96:	460d      	mov	r5, r1
 8008a98:	b976      	cbnz	r6, 8008ab8 <_Balloc+0x28>
 8008a9a:	2010      	movs	r0, #16
 8008a9c:	f7ff ffe2 	bl	8008a64 <malloc>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	6260      	str	r0, [r4, #36]	; 0x24
 8008aa4:	b920      	cbnz	r0, 8008ab0 <_Balloc+0x20>
 8008aa6:	2166      	movs	r1, #102	; 0x66
 8008aa8:	4b17      	ldr	r3, [pc, #92]	; (8008b08 <_Balloc+0x78>)
 8008aaa:	4818      	ldr	r0, [pc, #96]	; (8008b0c <_Balloc+0x7c>)
 8008aac:	f7fe f84e 	bl	8006b4c <__assert_func>
 8008ab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ab4:	6006      	str	r6, [r0, #0]
 8008ab6:	60c6      	str	r6, [r0, #12]
 8008ab8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008aba:	68f3      	ldr	r3, [r6, #12]
 8008abc:	b183      	cbz	r3, 8008ae0 <_Balloc+0x50>
 8008abe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ac6:	b9b8      	cbnz	r0, 8008af8 <_Balloc+0x68>
 8008ac8:	2101      	movs	r1, #1
 8008aca:	fa01 f605 	lsl.w	r6, r1, r5
 8008ace:	1d72      	adds	r2, r6, #5
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	0092      	lsls	r2, r2, #2
 8008ad4:	f000 fb5e 	bl	8009194 <_calloc_r>
 8008ad8:	b160      	cbz	r0, 8008af4 <_Balloc+0x64>
 8008ada:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ade:	e00e      	b.n	8008afe <_Balloc+0x6e>
 8008ae0:	2221      	movs	r2, #33	; 0x21
 8008ae2:	2104      	movs	r1, #4
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f000 fb55 	bl	8009194 <_calloc_r>
 8008aea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008aec:	60f0      	str	r0, [r6, #12]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e4      	bne.n	8008abe <_Balloc+0x2e>
 8008af4:	2000      	movs	r0, #0
 8008af6:	bd70      	pop	{r4, r5, r6, pc}
 8008af8:	6802      	ldr	r2, [r0, #0]
 8008afa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008afe:	2300      	movs	r3, #0
 8008b00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008b04:	e7f7      	b.n	8008af6 <_Balloc+0x66>
 8008b06:	bf00      	nop
 8008b08:	08009756 	.word	0x08009756
 8008b0c:	0800983c 	.word	0x0800983c

08008b10 <_Bfree>:
 8008b10:	b570      	push	{r4, r5, r6, lr}
 8008b12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008b14:	4605      	mov	r5, r0
 8008b16:	460c      	mov	r4, r1
 8008b18:	b976      	cbnz	r6, 8008b38 <_Bfree+0x28>
 8008b1a:	2010      	movs	r0, #16
 8008b1c:	f7ff ffa2 	bl	8008a64 <malloc>
 8008b20:	4602      	mov	r2, r0
 8008b22:	6268      	str	r0, [r5, #36]	; 0x24
 8008b24:	b920      	cbnz	r0, 8008b30 <_Bfree+0x20>
 8008b26:	218a      	movs	r1, #138	; 0x8a
 8008b28:	4b08      	ldr	r3, [pc, #32]	; (8008b4c <_Bfree+0x3c>)
 8008b2a:	4809      	ldr	r0, [pc, #36]	; (8008b50 <_Bfree+0x40>)
 8008b2c:	f7fe f80e 	bl	8006b4c <__assert_func>
 8008b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b34:	6006      	str	r6, [r0, #0]
 8008b36:	60c6      	str	r6, [r0, #12]
 8008b38:	b13c      	cbz	r4, 8008b4a <_Bfree+0x3a>
 8008b3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008b3c:	6862      	ldr	r2, [r4, #4]
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008b44:	6021      	str	r1, [r4, #0]
 8008b46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008b4a:	bd70      	pop	{r4, r5, r6, pc}
 8008b4c:	08009756 	.word	0x08009756
 8008b50:	0800983c 	.word	0x0800983c

08008b54 <__multadd>:
 8008b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b58:	4607      	mov	r7, r0
 8008b5a:	460c      	mov	r4, r1
 8008b5c:	461e      	mov	r6, r3
 8008b5e:	2000      	movs	r0, #0
 8008b60:	690d      	ldr	r5, [r1, #16]
 8008b62:	f101 0c14 	add.w	ip, r1, #20
 8008b66:	f8dc 3000 	ldr.w	r3, [ip]
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	b299      	uxth	r1, r3
 8008b6e:	fb02 6101 	mla	r1, r2, r1, r6
 8008b72:	0c1e      	lsrs	r6, r3, #16
 8008b74:	0c0b      	lsrs	r3, r1, #16
 8008b76:	fb02 3306 	mla	r3, r2, r6, r3
 8008b7a:	b289      	uxth	r1, r1
 8008b7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b80:	4285      	cmp	r5, r0
 8008b82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b86:	f84c 1b04 	str.w	r1, [ip], #4
 8008b8a:	dcec      	bgt.n	8008b66 <__multadd+0x12>
 8008b8c:	b30e      	cbz	r6, 8008bd2 <__multadd+0x7e>
 8008b8e:	68a3      	ldr	r3, [r4, #8]
 8008b90:	42ab      	cmp	r3, r5
 8008b92:	dc19      	bgt.n	8008bc8 <__multadd+0x74>
 8008b94:	6861      	ldr	r1, [r4, #4]
 8008b96:	4638      	mov	r0, r7
 8008b98:	3101      	adds	r1, #1
 8008b9a:	f7ff ff79 	bl	8008a90 <_Balloc>
 8008b9e:	4680      	mov	r8, r0
 8008ba0:	b928      	cbnz	r0, 8008bae <__multadd+0x5a>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	21b5      	movs	r1, #181	; 0xb5
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <__multadd+0x84>)
 8008ba8:	480c      	ldr	r0, [pc, #48]	; (8008bdc <__multadd+0x88>)
 8008baa:	f7fd ffcf 	bl	8006b4c <__assert_func>
 8008bae:	6922      	ldr	r2, [r4, #16]
 8008bb0:	f104 010c 	add.w	r1, r4, #12
 8008bb4:	3202      	adds	r2, #2
 8008bb6:	0092      	lsls	r2, r2, #2
 8008bb8:	300c      	adds	r0, #12
 8008bba:	f7fe f821 	bl	8006c00 <memcpy>
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	f7ff ffa5 	bl	8008b10 <_Bfree>
 8008bc6:	4644      	mov	r4, r8
 8008bc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008bcc:	3501      	adds	r5, #1
 8008bce:	615e      	str	r6, [r3, #20]
 8008bd0:	6125      	str	r5, [r4, #16]
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd8:	080097c8 	.word	0x080097c8
 8008bdc:	0800983c 	.word	0x0800983c

08008be0 <__hi0bits>:
 8008be0:	0c02      	lsrs	r2, r0, #16
 8008be2:	0412      	lsls	r2, r2, #16
 8008be4:	4603      	mov	r3, r0
 8008be6:	b9ca      	cbnz	r2, 8008c1c <__hi0bits+0x3c>
 8008be8:	0403      	lsls	r3, r0, #16
 8008bea:	2010      	movs	r0, #16
 8008bec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008bf0:	bf04      	itt	eq
 8008bf2:	021b      	lsleq	r3, r3, #8
 8008bf4:	3008      	addeq	r0, #8
 8008bf6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008bfa:	bf04      	itt	eq
 8008bfc:	011b      	lsleq	r3, r3, #4
 8008bfe:	3004      	addeq	r0, #4
 8008c00:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008c04:	bf04      	itt	eq
 8008c06:	009b      	lsleq	r3, r3, #2
 8008c08:	3002      	addeq	r0, #2
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	db05      	blt.n	8008c1a <__hi0bits+0x3a>
 8008c0e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008c12:	f100 0001 	add.w	r0, r0, #1
 8008c16:	bf08      	it	eq
 8008c18:	2020      	moveq	r0, #32
 8008c1a:	4770      	bx	lr
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	e7e5      	b.n	8008bec <__hi0bits+0xc>

08008c20 <__lo0bits>:
 8008c20:	6803      	ldr	r3, [r0, #0]
 8008c22:	4602      	mov	r2, r0
 8008c24:	f013 0007 	ands.w	r0, r3, #7
 8008c28:	d00b      	beq.n	8008c42 <__lo0bits+0x22>
 8008c2a:	07d9      	lsls	r1, r3, #31
 8008c2c:	d421      	bmi.n	8008c72 <__lo0bits+0x52>
 8008c2e:	0798      	lsls	r0, r3, #30
 8008c30:	bf49      	itett	mi
 8008c32:	085b      	lsrmi	r3, r3, #1
 8008c34:	089b      	lsrpl	r3, r3, #2
 8008c36:	2001      	movmi	r0, #1
 8008c38:	6013      	strmi	r3, [r2, #0]
 8008c3a:	bf5c      	itt	pl
 8008c3c:	2002      	movpl	r0, #2
 8008c3e:	6013      	strpl	r3, [r2, #0]
 8008c40:	4770      	bx	lr
 8008c42:	b299      	uxth	r1, r3
 8008c44:	b909      	cbnz	r1, 8008c4a <__lo0bits+0x2a>
 8008c46:	2010      	movs	r0, #16
 8008c48:	0c1b      	lsrs	r3, r3, #16
 8008c4a:	b2d9      	uxtb	r1, r3
 8008c4c:	b909      	cbnz	r1, 8008c52 <__lo0bits+0x32>
 8008c4e:	3008      	adds	r0, #8
 8008c50:	0a1b      	lsrs	r3, r3, #8
 8008c52:	0719      	lsls	r1, r3, #28
 8008c54:	bf04      	itt	eq
 8008c56:	091b      	lsreq	r3, r3, #4
 8008c58:	3004      	addeq	r0, #4
 8008c5a:	0799      	lsls	r1, r3, #30
 8008c5c:	bf04      	itt	eq
 8008c5e:	089b      	lsreq	r3, r3, #2
 8008c60:	3002      	addeq	r0, #2
 8008c62:	07d9      	lsls	r1, r3, #31
 8008c64:	d403      	bmi.n	8008c6e <__lo0bits+0x4e>
 8008c66:	085b      	lsrs	r3, r3, #1
 8008c68:	f100 0001 	add.w	r0, r0, #1
 8008c6c:	d003      	beq.n	8008c76 <__lo0bits+0x56>
 8008c6e:	6013      	str	r3, [r2, #0]
 8008c70:	4770      	bx	lr
 8008c72:	2000      	movs	r0, #0
 8008c74:	4770      	bx	lr
 8008c76:	2020      	movs	r0, #32
 8008c78:	4770      	bx	lr
	...

08008c7c <__i2b>:
 8008c7c:	b510      	push	{r4, lr}
 8008c7e:	460c      	mov	r4, r1
 8008c80:	2101      	movs	r1, #1
 8008c82:	f7ff ff05 	bl	8008a90 <_Balloc>
 8008c86:	4602      	mov	r2, r0
 8008c88:	b928      	cbnz	r0, 8008c96 <__i2b+0x1a>
 8008c8a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008c8e:	4b04      	ldr	r3, [pc, #16]	; (8008ca0 <__i2b+0x24>)
 8008c90:	4804      	ldr	r0, [pc, #16]	; (8008ca4 <__i2b+0x28>)
 8008c92:	f7fd ff5b 	bl	8006b4c <__assert_func>
 8008c96:	2301      	movs	r3, #1
 8008c98:	6144      	str	r4, [r0, #20]
 8008c9a:	6103      	str	r3, [r0, #16]
 8008c9c:	bd10      	pop	{r4, pc}
 8008c9e:	bf00      	nop
 8008ca0:	080097c8 	.word	0x080097c8
 8008ca4:	0800983c 	.word	0x0800983c

08008ca8 <__multiply>:
 8008ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cac:	4691      	mov	r9, r2
 8008cae:	690a      	ldr	r2, [r1, #16]
 8008cb0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008cb4:	460c      	mov	r4, r1
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	bfbe      	ittt	lt
 8008cba:	460b      	movlt	r3, r1
 8008cbc:	464c      	movlt	r4, r9
 8008cbe:	4699      	movlt	r9, r3
 8008cc0:	6927      	ldr	r7, [r4, #16]
 8008cc2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008cc6:	68a3      	ldr	r3, [r4, #8]
 8008cc8:	6861      	ldr	r1, [r4, #4]
 8008cca:	eb07 060a 	add.w	r6, r7, sl
 8008cce:	42b3      	cmp	r3, r6
 8008cd0:	b085      	sub	sp, #20
 8008cd2:	bfb8      	it	lt
 8008cd4:	3101      	addlt	r1, #1
 8008cd6:	f7ff fedb 	bl	8008a90 <_Balloc>
 8008cda:	b930      	cbnz	r0, 8008cea <__multiply+0x42>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	f240 115d 	movw	r1, #349	; 0x15d
 8008ce2:	4b43      	ldr	r3, [pc, #268]	; (8008df0 <__multiply+0x148>)
 8008ce4:	4843      	ldr	r0, [pc, #268]	; (8008df4 <__multiply+0x14c>)
 8008ce6:	f7fd ff31 	bl	8006b4c <__assert_func>
 8008cea:	f100 0514 	add.w	r5, r0, #20
 8008cee:	462b      	mov	r3, r5
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008cf6:	4543      	cmp	r3, r8
 8008cf8:	d321      	bcc.n	8008d3e <__multiply+0x96>
 8008cfa:	f104 0314 	add.w	r3, r4, #20
 8008cfe:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008d02:	f109 0314 	add.w	r3, r9, #20
 8008d06:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008d0a:	9202      	str	r2, [sp, #8]
 8008d0c:	1b3a      	subs	r2, r7, r4
 8008d0e:	3a15      	subs	r2, #21
 8008d10:	f022 0203 	bic.w	r2, r2, #3
 8008d14:	3204      	adds	r2, #4
 8008d16:	f104 0115 	add.w	r1, r4, #21
 8008d1a:	428f      	cmp	r7, r1
 8008d1c:	bf38      	it	cc
 8008d1e:	2204      	movcc	r2, #4
 8008d20:	9201      	str	r2, [sp, #4]
 8008d22:	9a02      	ldr	r2, [sp, #8]
 8008d24:	9303      	str	r3, [sp, #12]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d80c      	bhi.n	8008d44 <__multiply+0x9c>
 8008d2a:	2e00      	cmp	r6, #0
 8008d2c:	dd03      	ble.n	8008d36 <__multiply+0x8e>
 8008d2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d059      	beq.n	8008dea <__multiply+0x142>
 8008d36:	6106      	str	r6, [r0, #16]
 8008d38:	b005      	add	sp, #20
 8008d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3e:	f843 2b04 	str.w	r2, [r3], #4
 8008d42:	e7d8      	b.n	8008cf6 <__multiply+0x4e>
 8008d44:	f8b3 a000 	ldrh.w	sl, [r3]
 8008d48:	f1ba 0f00 	cmp.w	sl, #0
 8008d4c:	d023      	beq.n	8008d96 <__multiply+0xee>
 8008d4e:	46a9      	mov	r9, r5
 8008d50:	f04f 0c00 	mov.w	ip, #0
 8008d54:	f104 0e14 	add.w	lr, r4, #20
 8008d58:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d5c:	f8d9 1000 	ldr.w	r1, [r9]
 8008d60:	fa1f fb82 	uxth.w	fp, r2
 8008d64:	b289      	uxth	r1, r1
 8008d66:	fb0a 110b 	mla	r1, sl, fp, r1
 8008d6a:	4461      	add	r1, ip
 8008d6c:	f8d9 c000 	ldr.w	ip, [r9]
 8008d70:	0c12      	lsrs	r2, r2, #16
 8008d72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008d76:	fb0a c202 	mla	r2, sl, r2, ip
 8008d7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d7e:	b289      	uxth	r1, r1
 8008d80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008d84:	4577      	cmp	r7, lr
 8008d86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008d8a:	f849 1b04 	str.w	r1, [r9], #4
 8008d8e:	d8e3      	bhi.n	8008d58 <__multiply+0xb0>
 8008d90:	9a01      	ldr	r2, [sp, #4]
 8008d92:	f845 c002 	str.w	ip, [r5, r2]
 8008d96:	9a03      	ldr	r2, [sp, #12]
 8008d98:	3304      	adds	r3, #4
 8008d9a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008d9e:	f1b9 0f00 	cmp.w	r9, #0
 8008da2:	d020      	beq.n	8008de6 <__multiply+0x13e>
 8008da4:	46ae      	mov	lr, r5
 8008da6:	f04f 0a00 	mov.w	sl, #0
 8008daa:	6829      	ldr	r1, [r5, #0]
 8008dac:	f104 0c14 	add.w	ip, r4, #20
 8008db0:	f8bc b000 	ldrh.w	fp, [ip]
 8008db4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008db8:	b289      	uxth	r1, r1
 8008dba:	fb09 220b 	mla	r2, r9, fp, r2
 8008dbe:	4492      	add	sl, r2
 8008dc0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008dc4:	f84e 1b04 	str.w	r1, [lr], #4
 8008dc8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008dcc:	f8be 1000 	ldrh.w	r1, [lr]
 8008dd0:	0c12      	lsrs	r2, r2, #16
 8008dd2:	fb09 1102 	mla	r1, r9, r2, r1
 8008dd6:	4567      	cmp	r7, ip
 8008dd8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008ddc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008de0:	d8e6      	bhi.n	8008db0 <__multiply+0x108>
 8008de2:	9a01      	ldr	r2, [sp, #4]
 8008de4:	50a9      	str	r1, [r5, r2]
 8008de6:	3504      	adds	r5, #4
 8008de8:	e79b      	b.n	8008d22 <__multiply+0x7a>
 8008dea:	3e01      	subs	r6, #1
 8008dec:	e79d      	b.n	8008d2a <__multiply+0x82>
 8008dee:	bf00      	nop
 8008df0:	080097c8 	.word	0x080097c8
 8008df4:	0800983c 	.word	0x0800983c

08008df8 <__pow5mult>:
 8008df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dfc:	4615      	mov	r5, r2
 8008dfe:	f012 0203 	ands.w	r2, r2, #3
 8008e02:	4606      	mov	r6, r0
 8008e04:	460f      	mov	r7, r1
 8008e06:	d007      	beq.n	8008e18 <__pow5mult+0x20>
 8008e08:	4c25      	ldr	r4, [pc, #148]	; (8008ea0 <__pow5mult+0xa8>)
 8008e0a:	3a01      	subs	r2, #1
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e12:	f7ff fe9f 	bl	8008b54 <__multadd>
 8008e16:	4607      	mov	r7, r0
 8008e18:	10ad      	asrs	r5, r5, #2
 8008e1a:	d03d      	beq.n	8008e98 <__pow5mult+0xa0>
 8008e1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008e1e:	b97c      	cbnz	r4, 8008e40 <__pow5mult+0x48>
 8008e20:	2010      	movs	r0, #16
 8008e22:	f7ff fe1f 	bl	8008a64 <malloc>
 8008e26:	4602      	mov	r2, r0
 8008e28:	6270      	str	r0, [r6, #36]	; 0x24
 8008e2a:	b928      	cbnz	r0, 8008e38 <__pow5mult+0x40>
 8008e2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008e30:	4b1c      	ldr	r3, [pc, #112]	; (8008ea4 <__pow5mult+0xac>)
 8008e32:	481d      	ldr	r0, [pc, #116]	; (8008ea8 <__pow5mult+0xb0>)
 8008e34:	f7fd fe8a 	bl	8006b4c <__assert_func>
 8008e38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e3c:	6004      	str	r4, [r0, #0]
 8008e3e:	60c4      	str	r4, [r0, #12]
 8008e40:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008e44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e48:	b94c      	cbnz	r4, 8008e5e <__pow5mult+0x66>
 8008e4a:	f240 2171 	movw	r1, #625	; 0x271
 8008e4e:	4630      	mov	r0, r6
 8008e50:	f7ff ff14 	bl	8008c7c <__i2b>
 8008e54:	2300      	movs	r3, #0
 8008e56:	4604      	mov	r4, r0
 8008e58:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e5c:	6003      	str	r3, [r0, #0]
 8008e5e:	f04f 0900 	mov.w	r9, #0
 8008e62:	07eb      	lsls	r3, r5, #31
 8008e64:	d50a      	bpl.n	8008e7c <__pow5mult+0x84>
 8008e66:	4639      	mov	r1, r7
 8008e68:	4622      	mov	r2, r4
 8008e6a:	4630      	mov	r0, r6
 8008e6c:	f7ff ff1c 	bl	8008ca8 <__multiply>
 8008e70:	4680      	mov	r8, r0
 8008e72:	4639      	mov	r1, r7
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff fe4b 	bl	8008b10 <_Bfree>
 8008e7a:	4647      	mov	r7, r8
 8008e7c:	106d      	asrs	r5, r5, #1
 8008e7e:	d00b      	beq.n	8008e98 <__pow5mult+0xa0>
 8008e80:	6820      	ldr	r0, [r4, #0]
 8008e82:	b938      	cbnz	r0, 8008e94 <__pow5mult+0x9c>
 8008e84:	4622      	mov	r2, r4
 8008e86:	4621      	mov	r1, r4
 8008e88:	4630      	mov	r0, r6
 8008e8a:	f7ff ff0d 	bl	8008ca8 <__multiply>
 8008e8e:	6020      	str	r0, [r4, #0]
 8008e90:	f8c0 9000 	str.w	r9, [r0]
 8008e94:	4604      	mov	r4, r0
 8008e96:	e7e4      	b.n	8008e62 <__pow5mult+0x6a>
 8008e98:	4638      	mov	r0, r7
 8008e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e9e:	bf00      	nop
 8008ea0:	08009988 	.word	0x08009988
 8008ea4:	08009756 	.word	0x08009756
 8008ea8:	0800983c 	.word	0x0800983c

08008eac <__lshift>:
 8008eac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb0:	460c      	mov	r4, r1
 8008eb2:	4607      	mov	r7, r0
 8008eb4:	4691      	mov	r9, r2
 8008eb6:	6923      	ldr	r3, [r4, #16]
 8008eb8:	6849      	ldr	r1, [r1, #4]
 8008eba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ebe:	68a3      	ldr	r3, [r4, #8]
 8008ec0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ec4:	f108 0601 	add.w	r6, r8, #1
 8008ec8:	42b3      	cmp	r3, r6
 8008eca:	db0b      	blt.n	8008ee4 <__lshift+0x38>
 8008ecc:	4638      	mov	r0, r7
 8008ece:	f7ff fddf 	bl	8008a90 <_Balloc>
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	b948      	cbnz	r0, 8008eea <__lshift+0x3e>
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008edc:	4b29      	ldr	r3, [pc, #164]	; (8008f84 <__lshift+0xd8>)
 8008ede:	482a      	ldr	r0, [pc, #168]	; (8008f88 <__lshift+0xdc>)
 8008ee0:	f7fd fe34 	bl	8006b4c <__assert_func>
 8008ee4:	3101      	adds	r1, #1
 8008ee6:	005b      	lsls	r3, r3, #1
 8008ee8:	e7ee      	b.n	8008ec8 <__lshift+0x1c>
 8008eea:	2300      	movs	r3, #0
 8008eec:	f100 0114 	add.w	r1, r0, #20
 8008ef0:	f100 0210 	add.w	r2, r0, #16
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	4553      	cmp	r3, sl
 8008ef8:	db37      	blt.n	8008f6a <__lshift+0xbe>
 8008efa:	6920      	ldr	r0, [r4, #16]
 8008efc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f00:	f104 0314 	add.w	r3, r4, #20
 8008f04:	f019 091f 	ands.w	r9, r9, #31
 8008f08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008f10:	d02f      	beq.n	8008f72 <__lshift+0xc6>
 8008f12:	468a      	mov	sl, r1
 8008f14:	f04f 0c00 	mov.w	ip, #0
 8008f18:	f1c9 0e20 	rsb	lr, r9, #32
 8008f1c:	681a      	ldr	r2, [r3, #0]
 8008f1e:	fa02 f209 	lsl.w	r2, r2, r9
 8008f22:	ea42 020c 	orr.w	r2, r2, ip
 8008f26:	f84a 2b04 	str.w	r2, [sl], #4
 8008f2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f2e:	4298      	cmp	r0, r3
 8008f30:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008f34:	d8f2      	bhi.n	8008f1c <__lshift+0x70>
 8008f36:	1b03      	subs	r3, r0, r4
 8008f38:	3b15      	subs	r3, #21
 8008f3a:	f023 0303 	bic.w	r3, r3, #3
 8008f3e:	3304      	adds	r3, #4
 8008f40:	f104 0215 	add.w	r2, r4, #21
 8008f44:	4290      	cmp	r0, r2
 8008f46:	bf38      	it	cc
 8008f48:	2304      	movcc	r3, #4
 8008f4a:	f841 c003 	str.w	ip, [r1, r3]
 8008f4e:	f1bc 0f00 	cmp.w	ip, #0
 8008f52:	d001      	beq.n	8008f58 <__lshift+0xac>
 8008f54:	f108 0602 	add.w	r6, r8, #2
 8008f58:	3e01      	subs	r6, #1
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	612e      	str	r6, [r5, #16]
 8008f60:	f7ff fdd6 	bl	8008b10 <_Bfree>
 8008f64:	4628      	mov	r0, r5
 8008f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f6a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f6e:	3301      	adds	r3, #1
 8008f70:	e7c1      	b.n	8008ef6 <__lshift+0x4a>
 8008f72:	3904      	subs	r1, #4
 8008f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f78:	4298      	cmp	r0, r3
 8008f7a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008f7e:	d8f9      	bhi.n	8008f74 <__lshift+0xc8>
 8008f80:	e7ea      	b.n	8008f58 <__lshift+0xac>
 8008f82:	bf00      	nop
 8008f84:	080097c8 	.word	0x080097c8
 8008f88:	0800983c 	.word	0x0800983c

08008f8c <__mcmp>:
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	690a      	ldr	r2, [r1, #16]
 8008f90:	6900      	ldr	r0, [r0, #16]
 8008f92:	b530      	push	{r4, r5, lr}
 8008f94:	1a80      	subs	r0, r0, r2
 8008f96:	d10d      	bne.n	8008fb4 <__mcmp+0x28>
 8008f98:	3314      	adds	r3, #20
 8008f9a:	3114      	adds	r1, #20
 8008f9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fa0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fa4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fa8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fac:	4295      	cmp	r5, r2
 8008fae:	d002      	beq.n	8008fb6 <__mcmp+0x2a>
 8008fb0:	d304      	bcc.n	8008fbc <__mcmp+0x30>
 8008fb2:	2001      	movs	r0, #1
 8008fb4:	bd30      	pop	{r4, r5, pc}
 8008fb6:	42a3      	cmp	r3, r4
 8008fb8:	d3f4      	bcc.n	8008fa4 <__mcmp+0x18>
 8008fba:	e7fb      	b.n	8008fb4 <__mcmp+0x28>
 8008fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc0:	e7f8      	b.n	8008fb4 <__mcmp+0x28>
	...

08008fc4 <__mdiff>:
 8008fc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fc8:	460d      	mov	r5, r1
 8008fca:	4607      	mov	r7, r0
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4628      	mov	r0, r5
 8008fd0:	4614      	mov	r4, r2
 8008fd2:	f7ff ffdb 	bl	8008f8c <__mcmp>
 8008fd6:	1e06      	subs	r6, r0, #0
 8008fd8:	d111      	bne.n	8008ffe <__mdiff+0x3a>
 8008fda:	4631      	mov	r1, r6
 8008fdc:	4638      	mov	r0, r7
 8008fde:	f7ff fd57 	bl	8008a90 <_Balloc>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	b928      	cbnz	r0, 8008ff2 <__mdiff+0x2e>
 8008fe6:	f240 2132 	movw	r1, #562	; 0x232
 8008fea:	4b3a      	ldr	r3, [pc, #232]	; (80090d4 <__mdiff+0x110>)
 8008fec:	483a      	ldr	r0, [pc, #232]	; (80090d8 <__mdiff+0x114>)
 8008fee:	f7fd fdad 	bl	8006b4c <__assert_func>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ffe:	bfa4      	itt	ge
 8009000:	4623      	movge	r3, r4
 8009002:	462c      	movge	r4, r5
 8009004:	4638      	mov	r0, r7
 8009006:	6861      	ldr	r1, [r4, #4]
 8009008:	bfa6      	itte	ge
 800900a:	461d      	movge	r5, r3
 800900c:	2600      	movge	r6, #0
 800900e:	2601      	movlt	r6, #1
 8009010:	f7ff fd3e 	bl	8008a90 <_Balloc>
 8009014:	4602      	mov	r2, r0
 8009016:	b918      	cbnz	r0, 8009020 <__mdiff+0x5c>
 8009018:	f44f 7110 	mov.w	r1, #576	; 0x240
 800901c:	4b2d      	ldr	r3, [pc, #180]	; (80090d4 <__mdiff+0x110>)
 800901e:	e7e5      	b.n	8008fec <__mdiff+0x28>
 8009020:	f102 0814 	add.w	r8, r2, #20
 8009024:	46c2      	mov	sl, r8
 8009026:	f04f 0c00 	mov.w	ip, #0
 800902a:	6927      	ldr	r7, [r4, #16]
 800902c:	60c6      	str	r6, [r0, #12]
 800902e:	692e      	ldr	r6, [r5, #16]
 8009030:	f104 0014 	add.w	r0, r4, #20
 8009034:	f105 0914 	add.w	r9, r5, #20
 8009038:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800903c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009040:	3410      	adds	r4, #16
 8009042:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009046:	f859 3b04 	ldr.w	r3, [r9], #4
 800904a:	fa1f f18b 	uxth.w	r1, fp
 800904e:	448c      	add	ip, r1
 8009050:	b299      	uxth	r1, r3
 8009052:	0c1b      	lsrs	r3, r3, #16
 8009054:	ebac 0101 	sub.w	r1, ip, r1
 8009058:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800905c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009060:	b289      	uxth	r1, r1
 8009062:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009066:	454e      	cmp	r6, r9
 8009068:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800906c:	f84a 3b04 	str.w	r3, [sl], #4
 8009070:	d8e7      	bhi.n	8009042 <__mdiff+0x7e>
 8009072:	1b73      	subs	r3, r6, r5
 8009074:	3b15      	subs	r3, #21
 8009076:	f023 0303 	bic.w	r3, r3, #3
 800907a:	3515      	adds	r5, #21
 800907c:	3304      	adds	r3, #4
 800907e:	42ae      	cmp	r6, r5
 8009080:	bf38      	it	cc
 8009082:	2304      	movcc	r3, #4
 8009084:	4418      	add	r0, r3
 8009086:	4443      	add	r3, r8
 8009088:	461e      	mov	r6, r3
 800908a:	4605      	mov	r5, r0
 800908c:	4575      	cmp	r5, lr
 800908e:	d30e      	bcc.n	80090ae <__mdiff+0xea>
 8009090:	f10e 0103 	add.w	r1, lr, #3
 8009094:	1a09      	subs	r1, r1, r0
 8009096:	f021 0103 	bic.w	r1, r1, #3
 800909a:	3803      	subs	r0, #3
 800909c:	4586      	cmp	lr, r0
 800909e:	bf38      	it	cc
 80090a0:	2100      	movcc	r1, #0
 80090a2:	4419      	add	r1, r3
 80090a4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80090a8:	b18b      	cbz	r3, 80090ce <__mdiff+0x10a>
 80090aa:	6117      	str	r7, [r2, #16]
 80090ac:	e7a4      	b.n	8008ff8 <__mdiff+0x34>
 80090ae:	f855 8b04 	ldr.w	r8, [r5], #4
 80090b2:	fa1f f188 	uxth.w	r1, r8
 80090b6:	4461      	add	r1, ip
 80090b8:	140c      	asrs	r4, r1, #16
 80090ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80090be:	b289      	uxth	r1, r1
 80090c0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80090c4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80090c8:	f846 1b04 	str.w	r1, [r6], #4
 80090cc:	e7de      	b.n	800908c <__mdiff+0xc8>
 80090ce:	3f01      	subs	r7, #1
 80090d0:	e7e8      	b.n	80090a4 <__mdiff+0xe0>
 80090d2:	bf00      	nop
 80090d4:	080097c8 	.word	0x080097c8
 80090d8:	0800983c 	.word	0x0800983c

080090dc <__d2b>:
 80090dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80090e0:	2101      	movs	r1, #1
 80090e2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80090e6:	4690      	mov	r8, r2
 80090e8:	461d      	mov	r5, r3
 80090ea:	f7ff fcd1 	bl	8008a90 <_Balloc>
 80090ee:	4604      	mov	r4, r0
 80090f0:	b930      	cbnz	r0, 8009100 <__d2b+0x24>
 80090f2:	4602      	mov	r2, r0
 80090f4:	f240 310a 	movw	r1, #778	; 0x30a
 80090f8:	4b24      	ldr	r3, [pc, #144]	; (800918c <__d2b+0xb0>)
 80090fa:	4825      	ldr	r0, [pc, #148]	; (8009190 <__d2b+0xb4>)
 80090fc:	f7fd fd26 	bl	8006b4c <__assert_func>
 8009100:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8009104:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009108:	bb2d      	cbnz	r5, 8009156 <__d2b+0x7a>
 800910a:	9301      	str	r3, [sp, #4]
 800910c:	f1b8 0300 	subs.w	r3, r8, #0
 8009110:	d026      	beq.n	8009160 <__d2b+0x84>
 8009112:	4668      	mov	r0, sp
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	f7ff fd83 	bl	8008c20 <__lo0bits>
 800911a:	9900      	ldr	r1, [sp, #0]
 800911c:	b1f0      	cbz	r0, 800915c <__d2b+0x80>
 800911e:	9a01      	ldr	r2, [sp, #4]
 8009120:	f1c0 0320 	rsb	r3, r0, #32
 8009124:	fa02 f303 	lsl.w	r3, r2, r3
 8009128:	430b      	orrs	r3, r1
 800912a:	40c2      	lsrs	r2, r0
 800912c:	6163      	str	r3, [r4, #20]
 800912e:	9201      	str	r2, [sp, #4]
 8009130:	9b01      	ldr	r3, [sp, #4]
 8009132:	2b00      	cmp	r3, #0
 8009134:	bf14      	ite	ne
 8009136:	2102      	movne	r1, #2
 8009138:	2101      	moveq	r1, #1
 800913a:	61a3      	str	r3, [r4, #24]
 800913c:	6121      	str	r1, [r4, #16]
 800913e:	b1c5      	cbz	r5, 8009172 <__d2b+0x96>
 8009140:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009144:	4405      	add	r5, r0
 8009146:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800914a:	603d      	str	r5, [r7, #0]
 800914c:	6030      	str	r0, [r6, #0]
 800914e:	4620      	mov	r0, r4
 8009150:	b002      	add	sp, #8
 8009152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800915a:	e7d6      	b.n	800910a <__d2b+0x2e>
 800915c:	6161      	str	r1, [r4, #20]
 800915e:	e7e7      	b.n	8009130 <__d2b+0x54>
 8009160:	a801      	add	r0, sp, #4
 8009162:	f7ff fd5d 	bl	8008c20 <__lo0bits>
 8009166:	2101      	movs	r1, #1
 8009168:	9b01      	ldr	r3, [sp, #4]
 800916a:	6121      	str	r1, [r4, #16]
 800916c:	6163      	str	r3, [r4, #20]
 800916e:	3020      	adds	r0, #32
 8009170:	e7e5      	b.n	800913e <__d2b+0x62>
 8009172:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009176:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800917a:	6038      	str	r0, [r7, #0]
 800917c:	6918      	ldr	r0, [r3, #16]
 800917e:	f7ff fd2f 	bl	8008be0 <__hi0bits>
 8009182:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009186:	6031      	str	r1, [r6, #0]
 8009188:	e7e1      	b.n	800914e <__d2b+0x72>
 800918a:	bf00      	nop
 800918c:	080097c8 	.word	0x080097c8
 8009190:	0800983c 	.word	0x0800983c

08009194 <_calloc_r>:
 8009194:	b570      	push	{r4, r5, r6, lr}
 8009196:	fba1 5402 	umull	r5, r4, r1, r2
 800919a:	b934      	cbnz	r4, 80091aa <_calloc_r+0x16>
 800919c:	4629      	mov	r1, r5
 800919e:	f000 f875 	bl	800928c <_malloc_r>
 80091a2:	4606      	mov	r6, r0
 80091a4:	b928      	cbnz	r0, 80091b2 <_calloc_r+0x1e>
 80091a6:	4630      	mov	r0, r6
 80091a8:	bd70      	pop	{r4, r5, r6, pc}
 80091aa:	220c      	movs	r2, #12
 80091ac:	2600      	movs	r6, #0
 80091ae:	6002      	str	r2, [r0, #0]
 80091b0:	e7f9      	b.n	80091a6 <_calloc_r+0x12>
 80091b2:	462a      	mov	r2, r5
 80091b4:	4621      	mov	r1, r4
 80091b6:	f7fd fd31 	bl	8006c1c <memset>
 80091ba:	e7f4      	b.n	80091a6 <_calloc_r+0x12>

080091bc <_free_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	4605      	mov	r5, r0
 80091c0:	2900      	cmp	r1, #0
 80091c2:	d040      	beq.n	8009246 <_free_r+0x8a>
 80091c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091c8:	1f0c      	subs	r4, r1, #4
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	bfb8      	it	lt
 80091ce:	18e4      	addlt	r4, r4, r3
 80091d0:	f000 f9d0 	bl	8009574 <__malloc_lock>
 80091d4:	4a1c      	ldr	r2, [pc, #112]	; (8009248 <_free_r+0x8c>)
 80091d6:	6813      	ldr	r3, [r2, #0]
 80091d8:	b933      	cbnz	r3, 80091e8 <_free_r+0x2c>
 80091da:	6063      	str	r3, [r4, #4]
 80091dc:	6014      	str	r4, [r2, #0]
 80091de:	4628      	mov	r0, r5
 80091e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091e4:	f000 b9cc 	b.w	8009580 <__malloc_unlock>
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	d908      	bls.n	80091fe <_free_r+0x42>
 80091ec:	6820      	ldr	r0, [r4, #0]
 80091ee:	1821      	adds	r1, r4, r0
 80091f0:	428b      	cmp	r3, r1
 80091f2:	bf01      	itttt	eq
 80091f4:	6819      	ldreq	r1, [r3, #0]
 80091f6:	685b      	ldreq	r3, [r3, #4]
 80091f8:	1809      	addeq	r1, r1, r0
 80091fa:	6021      	streq	r1, [r4, #0]
 80091fc:	e7ed      	b.n	80091da <_free_r+0x1e>
 80091fe:	461a      	mov	r2, r3
 8009200:	685b      	ldr	r3, [r3, #4]
 8009202:	b10b      	cbz	r3, 8009208 <_free_r+0x4c>
 8009204:	42a3      	cmp	r3, r4
 8009206:	d9fa      	bls.n	80091fe <_free_r+0x42>
 8009208:	6811      	ldr	r1, [r2, #0]
 800920a:	1850      	adds	r0, r2, r1
 800920c:	42a0      	cmp	r0, r4
 800920e:	d10b      	bne.n	8009228 <_free_r+0x6c>
 8009210:	6820      	ldr	r0, [r4, #0]
 8009212:	4401      	add	r1, r0
 8009214:	1850      	adds	r0, r2, r1
 8009216:	4283      	cmp	r3, r0
 8009218:	6011      	str	r1, [r2, #0]
 800921a:	d1e0      	bne.n	80091de <_free_r+0x22>
 800921c:	6818      	ldr	r0, [r3, #0]
 800921e:	685b      	ldr	r3, [r3, #4]
 8009220:	4401      	add	r1, r0
 8009222:	6011      	str	r1, [r2, #0]
 8009224:	6053      	str	r3, [r2, #4]
 8009226:	e7da      	b.n	80091de <_free_r+0x22>
 8009228:	d902      	bls.n	8009230 <_free_r+0x74>
 800922a:	230c      	movs	r3, #12
 800922c:	602b      	str	r3, [r5, #0]
 800922e:	e7d6      	b.n	80091de <_free_r+0x22>
 8009230:	6820      	ldr	r0, [r4, #0]
 8009232:	1821      	adds	r1, r4, r0
 8009234:	428b      	cmp	r3, r1
 8009236:	bf01      	itttt	eq
 8009238:	6819      	ldreq	r1, [r3, #0]
 800923a:	685b      	ldreq	r3, [r3, #4]
 800923c:	1809      	addeq	r1, r1, r0
 800923e:	6021      	streq	r1, [r4, #0]
 8009240:	6063      	str	r3, [r4, #4]
 8009242:	6054      	str	r4, [r2, #4]
 8009244:	e7cb      	b.n	80091de <_free_r+0x22>
 8009246:	bd38      	pop	{r3, r4, r5, pc}
 8009248:	20000de0 	.word	0x20000de0

0800924c <sbrk_aligned>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	4e0e      	ldr	r6, [pc, #56]	; (8009288 <sbrk_aligned+0x3c>)
 8009250:	460c      	mov	r4, r1
 8009252:	6831      	ldr	r1, [r6, #0]
 8009254:	4605      	mov	r5, r0
 8009256:	b911      	cbnz	r1, 800925e <sbrk_aligned+0x12>
 8009258:	f000 f88c 	bl	8009374 <_sbrk_r>
 800925c:	6030      	str	r0, [r6, #0]
 800925e:	4621      	mov	r1, r4
 8009260:	4628      	mov	r0, r5
 8009262:	f000 f887 	bl	8009374 <_sbrk_r>
 8009266:	1c43      	adds	r3, r0, #1
 8009268:	d00a      	beq.n	8009280 <sbrk_aligned+0x34>
 800926a:	1cc4      	adds	r4, r0, #3
 800926c:	f024 0403 	bic.w	r4, r4, #3
 8009270:	42a0      	cmp	r0, r4
 8009272:	d007      	beq.n	8009284 <sbrk_aligned+0x38>
 8009274:	1a21      	subs	r1, r4, r0
 8009276:	4628      	mov	r0, r5
 8009278:	f000 f87c 	bl	8009374 <_sbrk_r>
 800927c:	3001      	adds	r0, #1
 800927e:	d101      	bne.n	8009284 <sbrk_aligned+0x38>
 8009280:	f04f 34ff 	mov.w	r4, #4294967295
 8009284:	4620      	mov	r0, r4
 8009286:	bd70      	pop	{r4, r5, r6, pc}
 8009288:	20000de4 	.word	0x20000de4

0800928c <_malloc_r>:
 800928c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009290:	1ccd      	adds	r5, r1, #3
 8009292:	f025 0503 	bic.w	r5, r5, #3
 8009296:	3508      	adds	r5, #8
 8009298:	2d0c      	cmp	r5, #12
 800929a:	bf38      	it	cc
 800929c:	250c      	movcc	r5, #12
 800929e:	2d00      	cmp	r5, #0
 80092a0:	4607      	mov	r7, r0
 80092a2:	db01      	blt.n	80092a8 <_malloc_r+0x1c>
 80092a4:	42a9      	cmp	r1, r5
 80092a6:	d905      	bls.n	80092b4 <_malloc_r+0x28>
 80092a8:	230c      	movs	r3, #12
 80092aa:	2600      	movs	r6, #0
 80092ac:	603b      	str	r3, [r7, #0]
 80092ae:	4630      	mov	r0, r6
 80092b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092b4:	4e2e      	ldr	r6, [pc, #184]	; (8009370 <_malloc_r+0xe4>)
 80092b6:	f000 f95d 	bl	8009574 <__malloc_lock>
 80092ba:	6833      	ldr	r3, [r6, #0]
 80092bc:	461c      	mov	r4, r3
 80092be:	bb34      	cbnz	r4, 800930e <_malloc_r+0x82>
 80092c0:	4629      	mov	r1, r5
 80092c2:	4638      	mov	r0, r7
 80092c4:	f7ff ffc2 	bl	800924c <sbrk_aligned>
 80092c8:	1c43      	adds	r3, r0, #1
 80092ca:	4604      	mov	r4, r0
 80092cc:	d14d      	bne.n	800936a <_malloc_r+0xde>
 80092ce:	6834      	ldr	r4, [r6, #0]
 80092d0:	4626      	mov	r6, r4
 80092d2:	2e00      	cmp	r6, #0
 80092d4:	d140      	bne.n	8009358 <_malloc_r+0xcc>
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	4631      	mov	r1, r6
 80092da:	4638      	mov	r0, r7
 80092dc:	eb04 0803 	add.w	r8, r4, r3
 80092e0:	f000 f848 	bl	8009374 <_sbrk_r>
 80092e4:	4580      	cmp	r8, r0
 80092e6:	d13a      	bne.n	800935e <_malloc_r+0xd2>
 80092e8:	6821      	ldr	r1, [r4, #0]
 80092ea:	3503      	adds	r5, #3
 80092ec:	1a6d      	subs	r5, r5, r1
 80092ee:	f025 0503 	bic.w	r5, r5, #3
 80092f2:	3508      	adds	r5, #8
 80092f4:	2d0c      	cmp	r5, #12
 80092f6:	bf38      	it	cc
 80092f8:	250c      	movcc	r5, #12
 80092fa:	4638      	mov	r0, r7
 80092fc:	4629      	mov	r1, r5
 80092fe:	f7ff ffa5 	bl	800924c <sbrk_aligned>
 8009302:	3001      	adds	r0, #1
 8009304:	d02b      	beq.n	800935e <_malloc_r+0xd2>
 8009306:	6823      	ldr	r3, [r4, #0]
 8009308:	442b      	add	r3, r5
 800930a:	6023      	str	r3, [r4, #0]
 800930c:	e00e      	b.n	800932c <_malloc_r+0xa0>
 800930e:	6822      	ldr	r2, [r4, #0]
 8009310:	1b52      	subs	r2, r2, r5
 8009312:	d41e      	bmi.n	8009352 <_malloc_r+0xc6>
 8009314:	2a0b      	cmp	r2, #11
 8009316:	d916      	bls.n	8009346 <_malloc_r+0xba>
 8009318:	1961      	adds	r1, r4, r5
 800931a:	42a3      	cmp	r3, r4
 800931c:	6025      	str	r5, [r4, #0]
 800931e:	bf18      	it	ne
 8009320:	6059      	strne	r1, [r3, #4]
 8009322:	6863      	ldr	r3, [r4, #4]
 8009324:	bf08      	it	eq
 8009326:	6031      	streq	r1, [r6, #0]
 8009328:	5162      	str	r2, [r4, r5]
 800932a:	604b      	str	r3, [r1, #4]
 800932c:	4638      	mov	r0, r7
 800932e:	f104 060b 	add.w	r6, r4, #11
 8009332:	f000 f925 	bl	8009580 <__malloc_unlock>
 8009336:	f026 0607 	bic.w	r6, r6, #7
 800933a:	1d23      	adds	r3, r4, #4
 800933c:	1af2      	subs	r2, r6, r3
 800933e:	d0b6      	beq.n	80092ae <_malloc_r+0x22>
 8009340:	1b9b      	subs	r3, r3, r6
 8009342:	50a3      	str	r3, [r4, r2]
 8009344:	e7b3      	b.n	80092ae <_malloc_r+0x22>
 8009346:	6862      	ldr	r2, [r4, #4]
 8009348:	42a3      	cmp	r3, r4
 800934a:	bf0c      	ite	eq
 800934c:	6032      	streq	r2, [r6, #0]
 800934e:	605a      	strne	r2, [r3, #4]
 8009350:	e7ec      	b.n	800932c <_malloc_r+0xa0>
 8009352:	4623      	mov	r3, r4
 8009354:	6864      	ldr	r4, [r4, #4]
 8009356:	e7b2      	b.n	80092be <_malloc_r+0x32>
 8009358:	4634      	mov	r4, r6
 800935a:	6876      	ldr	r6, [r6, #4]
 800935c:	e7b9      	b.n	80092d2 <_malloc_r+0x46>
 800935e:	230c      	movs	r3, #12
 8009360:	4638      	mov	r0, r7
 8009362:	603b      	str	r3, [r7, #0]
 8009364:	f000 f90c 	bl	8009580 <__malloc_unlock>
 8009368:	e7a1      	b.n	80092ae <_malloc_r+0x22>
 800936a:	6025      	str	r5, [r4, #0]
 800936c:	e7de      	b.n	800932c <_malloc_r+0xa0>
 800936e:	bf00      	nop
 8009370:	20000de0 	.word	0x20000de0

08009374 <_sbrk_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	2300      	movs	r3, #0
 8009378:	4d05      	ldr	r5, [pc, #20]	; (8009390 <_sbrk_r+0x1c>)
 800937a:	4604      	mov	r4, r0
 800937c:	4608      	mov	r0, r1
 800937e:	602b      	str	r3, [r5, #0]
 8009380:	f7fa f9da 	bl	8003738 <_sbrk>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d102      	bne.n	800938e <_sbrk_r+0x1a>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	b103      	cbz	r3, 800938e <_sbrk_r+0x1a>
 800938c:	6023      	str	r3, [r4, #0]
 800938e:	bd38      	pop	{r3, r4, r5, pc}
 8009390:	20000de8 	.word	0x20000de8

08009394 <_raise_r>:
 8009394:	291f      	cmp	r1, #31
 8009396:	b538      	push	{r3, r4, r5, lr}
 8009398:	4604      	mov	r4, r0
 800939a:	460d      	mov	r5, r1
 800939c:	d904      	bls.n	80093a8 <_raise_r+0x14>
 800939e:	2316      	movs	r3, #22
 80093a0:	6003      	str	r3, [r0, #0]
 80093a2:	f04f 30ff 	mov.w	r0, #4294967295
 80093a6:	bd38      	pop	{r3, r4, r5, pc}
 80093a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80093aa:	b112      	cbz	r2, 80093b2 <_raise_r+0x1e>
 80093ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80093b0:	b94b      	cbnz	r3, 80093c6 <_raise_r+0x32>
 80093b2:	4620      	mov	r0, r4
 80093b4:	f000 f830 	bl	8009418 <_getpid_r>
 80093b8:	462a      	mov	r2, r5
 80093ba:	4601      	mov	r1, r0
 80093bc:	4620      	mov	r0, r4
 80093be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093c2:	f000 b817 	b.w	80093f4 <_kill_r>
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	d00a      	beq.n	80093e0 <_raise_r+0x4c>
 80093ca:	1c59      	adds	r1, r3, #1
 80093cc:	d103      	bne.n	80093d6 <_raise_r+0x42>
 80093ce:	2316      	movs	r3, #22
 80093d0:	6003      	str	r3, [r0, #0]
 80093d2:	2001      	movs	r0, #1
 80093d4:	e7e7      	b.n	80093a6 <_raise_r+0x12>
 80093d6:	2400      	movs	r4, #0
 80093d8:	4628      	mov	r0, r5
 80093da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80093de:	4798      	blx	r3
 80093e0:	2000      	movs	r0, #0
 80093e2:	e7e0      	b.n	80093a6 <_raise_r+0x12>

080093e4 <raise>:
 80093e4:	4b02      	ldr	r3, [pc, #8]	; (80093f0 <raise+0xc>)
 80093e6:	4601      	mov	r1, r0
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	f7ff bfd3 	b.w	8009394 <_raise_r>
 80093ee:	bf00      	nop
 80093f0:	20000010 	.word	0x20000010

080093f4 <_kill_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	2300      	movs	r3, #0
 80093f8:	4d06      	ldr	r5, [pc, #24]	; (8009414 <_kill_r+0x20>)
 80093fa:	4604      	mov	r4, r0
 80093fc:	4608      	mov	r0, r1
 80093fe:	4611      	mov	r1, r2
 8009400:	602b      	str	r3, [r5, #0]
 8009402:	f7fa f916 	bl	8003632 <_kill>
 8009406:	1c43      	adds	r3, r0, #1
 8009408:	d102      	bne.n	8009410 <_kill_r+0x1c>
 800940a:	682b      	ldr	r3, [r5, #0]
 800940c:	b103      	cbz	r3, 8009410 <_kill_r+0x1c>
 800940e:	6023      	str	r3, [r4, #0]
 8009410:	bd38      	pop	{r3, r4, r5, pc}
 8009412:	bf00      	nop
 8009414:	20000de8 	.word	0x20000de8

08009418 <_getpid_r>:
 8009418:	f7fa b904 	b.w	8003624 <_getpid>

0800941c <__sread>:
 800941c:	b510      	push	{r4, lr}
 800941e:	460c      	mov	r4, r1
 8009420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009424:	f000 f8b2 	bl	800958c <_read_r>
 8009428:	2800      	cmp	r0, #0
 800942a:	bfab      	itete	ge
 800942c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800942e:	89a3      	ldrhlt	r3, [r4, #12]
 8009430:	181b      	addge	r3, r3, r0
 8009432:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009436:	bfac      	ite	ge
 8009438:	6563      	strge	r3, [r4, #84]	; 0x54
 800943a:	81a3      	strhlt	r3, [r4, #12]
 800943c:	bd10      	pop	{r4, pc}

0800943e <__swrite>:
 800943e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009442:	461f      	mov	r7, r3
 8009444:	898b      	ldrh	r3, [r1, #12]
 8009446:	4605      	mov	r5, r0
 8009448:	05db      	lsls	r3, r3, #23
 800944a:	460c      	mov	r4, r1
 800944c:	4616      	mov	r6, r2
 800944e:	d505      	bpl.n	800945c <__swrite+0x1e>
 8009450:	2302      	movs	r3, #2
 8009452:	2200      	movs	r2, #0
 8009454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009458:	f000 f868 	bl	800952c <_lseek_r>
 800945c:	89a3      	ldrh	r3, [r4, #12]
 800945e:	4632      	mov	r2, r6
 8009460:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009464:	81a3      	strh	r3, [r4, #12]
 8009466:	4628      	mov	r0, r5
 8009468:	463b      	mov	r3, r7
 800946a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800946e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009472:	f000 b817 	b.w	80094a4 <_write_r>

08009476 <__sseek>:
 8009476:	b510      	push	{r4, lr}
 8009478:	460c      	mov	r4, r1
 800947a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947e:	f000 f855 	bl	800952c <_lseek_r>
 8009482:	1c43      	adds	r3, r0, #1
 8009484:	89a3      	ldrh	r3, [r4, #12]
 8009486:	bf15      	itete	ne
 8009488:	6560      	strne	r0, [r4, #84]	; 0x54
 800948a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800948e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009492:	81a3      	strheq	r3, [r4, #12]
 8009494:	bf18      	it	ne
 8009496:	81a3      	strhne	r3, [r4, #12]
 8009498:	bd10      	pop	{r4, pc}

0800949a <__sclose>:
 800949a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800949e:	f000 b813 	b.w	80094c8 <_close_r>
	...

080094a4 <_write_r>:
 80094a4:	b538      	push	{r3, r4, r5, lr}
 80094a6:	4604      	mov	r4, r0
 80094a8:	4608      	mov	r0, r1
 80094aa:	4611      	mov	r1, r2
 80094ac:	2200      	movs	r2, #0
 80094ae:	4d05      	ldr	r5, [pc, #20]	; (80094c4 <_write_r+0x20>)
 80094b0:	602a      	str	r2, [r5, #0]
 80094b2:	461a      	mov	r2, r3
 80094b4:	f7fa f8f4 	bl	80036a0 <_write>
 80094b8:	1c43      	adds	r3, r0, #1
 80094ba:	d102      	bne.n	80094c2 <_write_r+0x1e>
 80094bc:	682b      	ldr	r3, [r5, #0]
 80094be:	b103      	cbz	r3, 80094c2 <_write_r+0x1e>
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	bd38      	pop	{r3, r4, r5, pc}
 80094c4:	20000de8 	.word	0x20000de8

080094c8 <_close_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	2300      	movs	r3, #0
 80094cc:	4d05      	ldr	r5, [pc, #20]	; (80094e4 <_close_r+0x1c>)
 80094ce:	4604      	mov	r4, r0
 80094d0:	4608      	mov	r0, r1
 80094d2:	602b      	str	r3, [r5, #0]
 80094d4:	f7fa f900 	bl	80036d8 <_close>
 80094d8:	1c43      	adds	r3, r0, #1
 80094da:	d102      	bne.n	80094e2 <_close_r+0x1a>
 80094dc:	682b      	ldr	r3, [r5, #0]
 80094de:	b103      	cbz	r3, 80094e2 <_close_r+0x1a>
 80094e0:	6023      	str	r3, [r4, #0]
 80094e2:	bd38      	pop	{r3, r4, r5, pc}
 80094e4:	20000de8 	.word	0x20000de8

080094e8 <_fstat_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	2300      	movs	r3, #0
 80094ec:	4d06      	ldr	r5, [pc, #24]	; (8009508 <_fstat_r+0x20>)
 80094ee:	4604      	mov	r4, r0
 80094f0:	4608      	mov	r0, r1
 80094f2:	4611      	mov	r1, r2
 80094f4:	602b      	str	r3, [r5, #0]
 80094f6:	f7fa f8fa 	bl	80036ee <_fstat>
 80094fa:	1c43      	adds	r3, r0, #1
 80094fc:	d102      	bne.n	8009504 <_fstat_r+0x1c>
 80094fe:	682b      	ldr	r3, [r5, #0]
 8009500:	b103      	cbz	r3, 8009504 <_fstat_r+0x1c>
 8009502:	6023      	str	r3, [r4, #0]
 8009504:	bd38      	pop	{r3, r4, r5, pc}
 8009506:	bf00      	nop
 8009508:	20000de8 	.word	0x20000de8

0800950c <_isatty_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	2300      	movs	r3, #0
 8009510:	4d05      	ldr	r5, [pc, #20]	; (8009528 <_isatty_r+0x1c>)
 8009512:	4604      	mov	r4, r0
 8009514:	4608      	mov	r0, r1
 8009516:	602b      	str	r3, [r5, #0]
 8009518:	f7fa f8f8 	bl	800370c <_isatty>
 800951c:	1c43      	adds	r3, r0, #1
 800951e:	d102      	bne.n	8009526 <_isatty_r+0x1a>
 8009520:	682b      	ldr	r3, [r5, #0]
 8009522:	b103      	cbz	r3, 8009526 <_isatty_r+0x1a>
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	20000de8 	.word	0x20000de8

0800952c <_lseek_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4604      	mov	r4, r0
 8009530:	4608      	mov	r0, r1
 8009532:	4611      	mov	r1, r2
 8009534:	2200      	movs	r2, #0
 8009536:	4d05      	ldr	r5, [pc, #20]	; (800954c <_lseek_r+0x20>)
 8009538:	602a      	str	r2, [r5, #0]
 800953a:	461a      	mov	r2, r3
 800953c:	f7fa f8f0 	bl	8003720 <_lseek>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	d102      	bne.n	800954a <_lseek_r+0x1e>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	b103      	cbz	r3, 800954a <_lseek_r+0x1e>
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	20000de8 	.word	0x20000de8

08009550 <__ascii_mbtowc>:
 8009550:	b082      	sub	sp, #8
 8009552:	b901      	cbnz	r1, 8009556 <__ascii_mbtowc+0x6>
 8009554:	a901      	add	r1, sp, #4
 8009556:	b142      	cbz	r2, 800956a <__ascii_mbtowc+0x1a>
 8009558:	b14b      	cbz	r3, 800956e <__ascii_mbtowc+0x1e>
 800955a:	7813      	ldrb	r3, [r2, #0]
 800955c:	600b      	str	r3, [r1, #0]
 800955e:	7812      	ldrb	r2, [r2, #0]
 8009560:	1e10      	subs	r0, r2, #0
 8009562:	bf18      	it	ne
 8009564:	2001      	movne	r0, #1
 8009566:	b002      	add	sp, #8
 8009568:	4770      	bx	lr
 800956a:	4610      	mov	r0, r2
 800956c:	e7fb      	b.n	8009566 <__ascii_mbtowc+0x16>
 800956e:	f06f 0001 	mvn.w	r0, #1
 8009572:	e7f8      	b.n	8009566 <__ascii_mbtowc+0x16>

08009574 <__malloc_lock>:
 8009574:	4801      	ldr	r0, [pc, #4]	; (800957c <__malloc_lock+0x8>)
 8009576:	f7ff ba0e 	b.w	8008996 <__retarget_lock_acquire_recursive>
 800957a:	bf00      	nop
 800957c:	20000ddc 	.word	0x20000ddc

08009580 <__malloc_unlock>:
 8009580:	4801      	ldr	r0, [pc, #4]	; (8009588 <__malloc_unlock+0x8>)
 8009582:	f7ff ba09 	b.w	8008998 <__retarget_lock_release_recursive>
 8009586:	bf00      	nop
 8009588:	20000ddc 	.word	0x20000ddc

0800958c <_read_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	4611      	mov	r1, r2
 8009594:	2200      	movs	r2, #0
 8009596:	4d05      	ldr	r5, [pc, #20]	; (80095ac <_read_r+0x20>)
 8009598:	602a      	str	r2, [r5, #0]
 800959a:	461a      	mov	r2, r3
 800959c:	f7fa f863 	bl	8003666 <_read>
 80095a0:	1c43      	adds	r3, r0, #1
 80095a2:	d102      	bne.n	80095aa <_read_r+0x1e>
 80095a4:	682b      	ldr	r3, [r5, #0]
 80095a6:	b103      	cbz	r3, 80095aa <_read_r+0x1e>
 80095a8:	6023      	str	r3, [r4, #0]
 80095aa:	bd38      	pop	{r3, r4, r5, pc}
 80095ac:	20000de8 	.word	0x20000de8

080095b0 <__ascii_wctomb>:
 80095b0:	4603      	mov	r3, r0
 80095b2:	4608      	mov	r0, r1
 80095b4:	b141      	cbz	r1, 80095c8 <__ascii_wctomb+0x18>
 80095b6:	2aff      	cmp	r2, #255	; 0xff
 80095b8:	d904      	bls.n	80095c4 <__ascii_wctomb+0x14>
 80095ba:	228a      	movs	r2, #138	; 0x8a
 80095bc:	f04f 30ff 	mov.w	r0, #4294967295
 80095c0:	601a      	str	r2, [r3, #0]
 80095c2:	4770      	bx	lr
 80095c4:	2001      	movs	r0, #1
 80095c6:	700a      	strb	r2, [r1, #0]
 80095c8:	4770      	bx	lr
	...

080095cc <roundf>:
 80095cc:	b508      	push	{r3, lr}
 80095ce:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80095d2:	3b7f      	subs	r3, #127	; 0x7f
 80095d4:	2b16      	cmp	r3, #22
 80095d6:	4601      	mov	r1, r0
 80095d8:	4602      	mov	r2, r0
 80095da:	dc14      	bgt.n	8009606 <roundf+0x3a>
 80095dc:	2b00      	cmp	r3, #0
 80095de:	da07      	bge.n	80095f0 <roundf+0x24>
 80095e0:	3301      	adds	r3, #1
 80095e2:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 80095e6:	d101      	bne.n	80095ec <roundf+0x20>
 80095e8:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 80095ec:	4608      	mov	r0, r1
 80095ee:	bd08      	pop	{r3, pc}
 80095f0:	4808      	ldr	r0, [pc, #32]	; (8009614 <roundf+0x48>)
 80095f2:	4118      	asrs	r0, r3
 80095f4:	4201      	tst	r1, r0
 80095f6:	d0f9      	beq.n	80095ec <roundf+0x20>
 80095f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095fc:	4119      	asrs	r1, r3
 80095fe:	4411      	add	r1, r2
 8009600:	ea21 0100 	bic.w	r1, r1, r0
 8009604:	e7f2      	b.n	80095ec <roundf+0x20>
 8009606:	2b80      	cmp	r3, #128	; 0x80
 8009608:	d1f0      	bne.n	80095ec <roundf+0x20>
 800960a:	f7f7 fa93 	bl	8000b34 <__addsf3>
 800960e:	4601      	mov	r1, r0
 8009610:	e7ec      	b.n	80095ec <roundf+0x20>
 8009612:	bf00      	nop
 8009614:	007fffff 	.word	0x007fffff

08009618 <_init>:
 8009618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961a:	bf00      	nop
 800961c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800961e:	bc08      	pop	{r3}
 8009620:	469e      	mov	lr, r3
 8009622:	4770      	bx	lr

08009624 <_fini>:
 8009624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009626:	bf00      	nop
 8009628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962a:	bc08      	pop	{r3}
 800962c:	469e      	mov	lr, r3
 800962e:	4770      	bx	lr
