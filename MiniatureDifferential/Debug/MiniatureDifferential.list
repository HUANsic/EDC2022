
MiniatureDifferential.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005728  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005994  08005994  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005994  08005994  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005994  08005994  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005994  08005994  00015994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005998  08005998  00015998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800599c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  20000074  08005a10  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  08005a10  000204b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fff9  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002493  00000000  00000000  00030096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00032530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  000335a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b26  00000000  00000000  00034540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a32  00000000  00000000  00038066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f345  00000000  00000000  0004aa98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d9ddd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ef0  00000000  00000000  000d9e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800581c 	.word	0x0800581c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800581c 	.word	0x0800581c

0800014c <__gesf2>:
 800014c:	f04f 3cff 	mov.w	ip, #4294967295
 8000150:	e006      	b.n	8000160 <__cmpsf2+0x4>
 8000152:	bf00      	nop

08000154 <__lesf2>:
 8000154:	f04f 0c01 	mov.w	ip, #1
 8000158:	e002      	b.n	8000160 <__cmpsf2+0x4>
 800015a:	bf00      	nop

0800015c <__cmpsf2>:
 800015c:	f04f 0c01 	mov.w	ip, #1
 8000160:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000164:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000168:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800016c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000170:	bf18      	it	ne
 8000172:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000176:	d011      	beq.n	800019c <__cmpsf2+0x40>
 8000178:	b001      	add	sp, #4
 800017a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800017e:	bf18      	it	ne
 8000180:	ea90 0f01 	teqne	r0, r1
 8000184:	bf58      	it	pl
 8000186:	ebb2 0003 	subspl.w	r0, r2, r3
 800018a:	bf88      	it	hi
 800018c:	17c8      	asrhi	r0, r1, #31
 800018e:	bf38      	it	cc
 8000190:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000194:	bf18      	it	ne
 8000196:	f040 0001 	orrne.w	r0, r0, #1
 800019a:	4770      	bx	lr
 800019c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80001a0:	d102      	bne.n	80001a8 <__cmpsf2+0x4c>
 80001a2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80001a6:	d105      	bne.n	80001b4 <__cmpsf2+0x58>
 80001a8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80001ac:	d1e4      	bne.n	8000178 <__cmpsf2+0x1c>
 80001ae:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80001b2:	d0e1      	beq.n	8000178 <__cmpsf2+0x1c>
 80001b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop

080001bc <__aeabi_cfrcmple>:
 80001bc:	4684      	mov	ip, r0
 80001be:	4608      	mov	r0, r1
 80001c0:	4661      	mov	r1, ip
 80001c2:	e7ff      	b.n	80001c4 <__aeabi_cfcmpeq>

080001c4 <__aeabi_cfcmpeq>:
 80001c4:	b50f      	push	{r0, r1, r2, r3, lr}
 80001c6:	f7ff ffc9 	bl	800015c <__cmpsf2>
 80001ca:	2800      	cmp	r0, #0
 80001cc:	bf48      	it	mi
 80001ce:	f110 0f00 	cmnmi.w	r0, #0
 80001d2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080001d4 <__aeabi_fcmpeq>:
 80001d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001d8:	f7ff fff4 	bl	80001c4 <__aeabi_cfcmpeq>
 80001dc:	bf0c      	ite	eq
 80001de:	2001      	moveq	r0, #1
 80001e0:	2000      	movne	r0, #0
 80001e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80001e6:	bf00      	nop

080001e8 <__aeabi_fcmplt>:
 80001e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80001ec:	f7ff ffea 	bl	80001c4 <__aeabi_cfcmpeq>
 80001f0:	bf34      	ite	cc
 80001f2:	2001      	movcc	r0, #1
 80001f4:	2000      	movcs	r0, #0
 80001f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80001fa:	bf00      	nop

080001fc <__aeabi_fcmple>:
 80001fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000200:	f7ff ffe0 	bl	80001c4 <__aeabi_cfcmpeq>
 8000204:	bf94      	ite	ls
 8000206:	2001      	movls	r0, #1
 8000208:	2000      	movhi	r0, #0
 800020a:	f85d fb08 	ldr.w	pc, [sp], #8
 800020e:	bf00      	nop

08000210 <__aeabi_fcmpge>:
 8000210:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000214:	f7ff ffd2 	bl	80001bc <__aeabi_cfrcmple>
 8000218:	bf94      	ite	ls
 800021a:	2001      	movls	r0, #1
 800021c:	2000      	movhi	r0, #0
 800021e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000222:	bf00      	nop

08000224 <__aeabi_fcmpgt>:
 8000224:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000228:	f7ff ffc8 	bl	80001bc <__aeabi_cfrcmple>
 800022c:	bf34      	ite	cc
 800022e:	2001      	movcc	r0, #1
 8000230:	2000      	movcs	r0, #0
 8000232:	f85d fb08 	ldr.w	pc, [sp], #8
 8000236:	bf00      	nop

08000238 <huansic_jy62_init>:
uint8_t setBaud9600_pack[3] = { 0xFF, 0xAA, 0x64 };
uint8_t setHorizontal_pack[3] = { 0xFF, 0xAA, 0x65 };
uint8_t setVertical_pack[3] = { 0xFF, 0xAA, 0x66 };
uint8_t sleepAndAwake_pack[3] = { 0xFF, 0xAA, 0x60 };

void huansic_jy62_init(JY62_HandleTypeDef *hjy62) {
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
	if(!hjy62) return;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2b00      	cmp	r3, #0
 8000244:	d03c      	beq.n	80002c0 <huansic_jy62_init+0x88>
	if(!hjy62->uartPort || !hjy62->rxDMA) return;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d03a      	beq.n	80002c4 <huansic_jy62_init+0x8c>
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d036      	beq.n	80002c4 <huansic_jy62_init+0x8c>

	huansic_jy62_resetAngle(hjy62);
 8000256:	6878      	ldr	r0, [r7, #4]
 8000258:	f000 f838 	bl	80002cc <huansic_jy62_resetAngle>

	hjy62->accel_x = 0;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f04f 0200 	mov.w	r2, #0
 8000262:	609a      	str	r2, [r3, #8]
	hjy62->accel_y = 0;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f04f 0200 	mov.w	r2, #0
 800026a:	60da      	str	r2, [r3, #12]
	hjy62->accel_z = 0;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f04f 0200 	mov.w	r2, #0
 8000272:	611a      	str	r2, [r3, #16]
	hjy62->omega_x = 0;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	f04f 0200 	mov.w	r2, #0
 800027a:	615a      	str	r2, [r3, #20]
	hjy62->omega_y = 0;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	f04f 0200 	mov.w	r2, #0
 8000282:	619a      	str	r2, [r3, #24]
	hjy62->omega_z = 0;
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	f04f 0200 	mov.w	r2, #0
 800028a:	61da      	str	r2, [r3, #28]
	hjy62->theta_x = 0;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f04f 0200 	mov.w	r2, #0
 8000292:	621a      	str	r2, [r3, #32]
	hjy62->theta_y = 0;
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	f04f 0200 	mov.w	r2, #0
 800029a:	625a      	str	r2, [r3, #36]	; 0x24
	hjy62->theta_z = 0;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f04f 0200 	mov.w	r2, #0
 80002a2:	629a      	str	r2, [r3, #40]	; 0x28

	hjy62->lastUpdated = HAL_GetTick();
 80002a4:	f001 f8ce 	bl	8001444 <HAL_GetTick>
 80002a8:	4602      	mov	r2, r0
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	6818      	ldr	r0, [r3, #0]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3330      	adds	r3, #48	; 0x30
 80002b6:	220b      	movs	r2, #11
 80002b8:	4619      	mov	r1, r3
 80002ba:	f003 fd28 	bl	8003d0e <HAL_UART_Receive_DMA>
 80002be:	e002      	b.n	80002c6 <huansic_jy62_init+0x8e>
	if(!hjy62) return;
 80002c0:	bf00      	nop
 80002c2:	e000      	b.n	80002c6 <huansic_jy62_init+0x8e>
	if(!hjy62->uartPort || !hjy62->rxDMA) return;
 80002c4:	bf00      	nop
}
 80002c6:	3708      	adds	r7, #8
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}

080002cc <huansic_jy62_resetAngle>:

void huansic_jy62_resetAngle(JY62_HandleTypeDef *hjy62) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(hjy62->uartPort, initAngle_pack, 3, HAL_MAX_DELAY);
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	6818      	ldr	r0, [r3, #0]
 80002d8:	f04f 33ff 	mov.w	r3, #4294967295
 80002dc:	2203      	movs	r2, #3
 80002de:	4903      	ldr	r1, [pc, #12]	; (80002ec <huansic_jy62_resetAngle+0x20>)
 80002e0:	f003 fc83 	bl	8003bea <HAL_UART_Transmit>
}
 80002e4:	bf00      	nop
 80002e6:	3708      	adds	r7, #8
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	20000000 	.word	0x20000000

080002f0 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d105      	bne.n	800030c <huansic_motor_init+0x1c>
 8000300:	4b55      	ldr	r3, [pc, #340]	; (8000458 <huansic_motor_init+0x168>)
 8000302:	4a56      	ldr	r2, [pc, #344]	; (800045c <huansic_motor_init+0x16c>)
 8000304:	210c      	movs	r1, #12
 8000306:	4856      	ldr	r0, [pc, #344]	; (8000460 <huansic_motor_init+0x170>)
 8000308:	f004 fa5e 	bl	80047c8 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d105      	bne.n	8000320 <huansic_motor_init+0x30>
 8000314:	4b53      	ldr	r3, [pc, #332]	; (8000464 <huansic_motor_init+0x174>)
 8000316:	4a51      	ldr	r2, [pc, #324]	; (800045c <huansic_motor_init+0x16c>)
 8000318:	210d      	movs	r1, #13
 800031a:	4851      	ldr	r0, [pc, #324]	; (8000460 <huansic_motor_init+0x170>)
 800031c:	f004 fa54 	bl	80047c8 <__assert_func>
	assert(hmotor->dt);
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	f04f 0100 	mov.w	r1, #0
 8000328:	4618      	mov	r0, r3
 800032a:	f7ff ff53 	bl	80001d4 <__aeabi_fcmpeq>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d005      	beq.n	8000340 <huansic_motor_init+0x50>
 8000334:	4b4c      	ldr	r3, [pc, #304]	; (8000468 <huansic_motor_init+0x178>)
 8000336:	4a49      	ldr	r2, [pc, #292]	; (800045c <huansic_motor_init+0x16c>)
 8000338:	210e      	movs	r1, #14
 800033a:	4849      	ldr	r0, [pc, #292]	; (8000460 <huansic_motor_init+0x170>)
 800033c:	f004 fa44 	bl	80047c8 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2200      	movs	r2, #0
 8000344:	625a      	str	r2, [r3, #36]	; 0x24
	hmotor->lastError = 0;
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	f04f 0200 	mov.w	r2, #0
 800034c:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	f04f 0200 	mov.w	r2, #0
 8000354:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f04f 0200 	mov.w	r2, #0
 800035c:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f04f 0200 	mov.w	r2, #0
 8000364:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	f04f 0200 	mov.w	r2, #0
 800036c:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	2200      	movs	r2, #0
 8000376:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d105      	bne.n	800038c <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	2200      	movs	r2, #0
 8000388:	635a      	str	r2, [r3, #52]	; 0x34
 800038a:	e01c      	b.n	80003c6 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	2b04      	cmp	r3, #4
 8000392:	d105      	bne.n	80003a0 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	685b      	ldr	r3, [r3, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2200      	movs	r2, #0
 800039c:	639a      	str	r2, [r3, #56]	; 0x38
 800039e:	e012      	b.n	80003c6 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d105      	bne.n	80003b4 <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2200      	movs	r2, #0
 80003b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80003b2:	e008      	b.n	80003c6 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	68db      	ldr	r3, [r3, #12]
 80003b8:	2b0c      	cmp	r3, #12
 80003ba:	d104      	bne.n	80003c6 <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	685b      	ldr	r3, [r3, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2200      	movs	r2, #0
 80003c4:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d026      	beq.n	800041c <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	691b      	ldr	r3, [r3, #16]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d105      	bne.n	80003e2 <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	689b      	ldr	r3, [r3, #8]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2200      	movs	r2, #0
 80003de:	635a      	str	r2, [r3, #52]	; 0x34
 80003e0:	e01c      	b.n	800041c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	691b      	ldr	r3, [r3, #16]
 80003e6:	2b04      	cmp	r3, #4
 80003e8:	d105      	bne.n	80003f6 <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	689b      	ldr	r3, [r3, #8]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	2200      	movs	r2, #0
 80003f2:	639a      	str	r2, [r3, #56]	; 0x38
 80003f4:	e012      	b.n	800041c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	691b      	ldr	r3, [r3, #16]
 80003fa:	2b08      	cmp	r3, #8
 80003fc:	d105      	bne.n	800040a <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	689b      	ldr	r3, [r3, #8]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	2200      	movs	r2, #0
 8000406:	63da      	str	r2, [r3, #60]	; 0x3c
 8000408:	e008      	b.n	800041c <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	691b      	ldr	r3, [r3, #16]
 800040e:	2b0c      	cmp	r3, #12
 8000410:	d104      	bne.n	800041c <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	689b      	ldr	r3, [r3, #8]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2200      	movs	r2, #0
 800041a:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	213c      	movs	r1, #60	; 0x3c
 8000422:	4618      	mov	r0, r3
 8000424:	f002 fd3a 	bl	8002e9c <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	685a      	ldr	r2, [r3, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	4619      	mov	r1, r3
 8000432:	4610      	mov	r0, r2
 8000434:	f002 fbee 	bl	8002c14 <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d007      	beq.n	8000450 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	689a      	ldr	r2, [r3, #8]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	691b      	ldr	r3, [r3, #16]
 8000448:	4619      	mov	r1, r3
 800044a:	4610      	mov	r0, r2
 800044c:	f002 fbe2 	bl	8002c14 <HAL_TIM_PWM_Start>
}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	08005834 	.word	0x08005834
 800045c:	08005894 	.word	0x08005894
 8000460:	08005844 	.word	0x08005844
 8000464:	08005864 	.word	0x08005864
 8000468:	08005878 	.word	0x08005878

0800046c <huansic_xb_init>:
extern float myCharge;				// current charge returned by Master

// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
	hxb->nextPackageLength = 6;		// header length
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2206      	movs	r2, #6
 8000478:	73da      	strb	r2, [r3, #15]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	6818      	ldr	r0, [r3, #0]
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f103 0110 	add.w	r1, r3, #16
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	7bdb      	ldrb	r3, [r3, #15]
 8000488:	b29b      	uxth	r3, r3
 800048a:	461a      	mov	r2, r3
 800048c:	f003 fc3f 	bl	8003d0e <HAL_UART_Receive_DMA>
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}

08000498 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800049c:	f000 ff7a 	bl	8001394 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004a0:	f000 f878 	bl	8000594 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004a4:	f000 faf4 	bl	8000a90 <MX_GPIO_Init>
	MX_DMA_Init();
 80004a8:	f000 facc 	bl	8000a44 <MX_DMA_Init>
	MX_I2C1_Init();
 80004ac:	f000 f8b8 	bl	8000620 <MX_I2C1_Init>
	MX_TIM1_Init();
 80004b0:	f000 f8e4 	bl	800067c <MX_TIM1_Init>
	MX_TIM2_Init();
 80004b4:	f000 f932 	bl	800071c <MX_TIM2_Init>
	MX_TIM3_Init();
 80004b8:	f000 f984 	bl	80007c4 <MX_TIM3_Init>
	MX_TIM4_Init();
 80004bc:	f000 fa1a 	bl	80008f4 <MX_TIM4_Init>
	MX_USART2_UART_Init();
 80004c0:	f000 fa96 	bl	80009f0 <MX_USART2_UART_Init>
	MX_USART1_UART_Init();
 80004c4:	f000 fa6a 	bl	800099c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	RED_LED_ON;
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004ce:	482f      	ldr	r0, [pc, #188]	; (800058c <main+0xf4>)
 80004d0:	f001 fd16 	bl	8001f00 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80004d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004d8:	f000 ffbe 	bl	8001458 <HAL_Delay>
	RED_LED_OFF;
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e2:	482a      	ldr	r0, [pc, #168]	; (800058c <main+0xf4>)
 80004e4:	f001 fd0c 	bl	8001f00 <HAL_GPIO_WritePin>

	HUAN_MOTOR_LEFT_Init();
 80004e8:	f000 fb1e 	bl	8000b28 <HUAN_MOTOR_LEFT_Init>
	HUAN_MOTOR_RIGHT_Init();
 80004ec:	f000 fb3e 	bl	8000b6c <HUAN_MOTOR_RIGHT_Init>

	HUAN_IMU_Init();
 80004f0:	f000 fb5e 	bl	8000bb0 <HUAN_IMU_Init>

	HUAN_ZIGBEE_Init();
 80004f4:	f000 fb70 	bl	8000bd8 <HUAN_ZIGBEE_Init>

	RED_LED_ON;
 80004f8:	2201      	movs	r2, #1
 80004fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004fe:	4823      	ldr	r0, [pc, #140]	; (800058c <main+0xf4>)
 8000500:	f001 fcfe 	bl	8001f00 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8000504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000508:	f000 ffa6 	bl	8001458 <HAL_Delay>
	RED_LED_OFF;
 800050c:	2200      	movs	r2, #0
 800050e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000512:	481e      	ldr	r0, [pc, #120]	; (800058c <main+0xf4>)
 8000514:	f001 fcf4 	bl	8001f00 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000518:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800051c:	f000 ff9c 	bl	8001458 <HAL_Delay>

	RED_LED_ON;
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000526:	4819      	ldr	r0, [pc, #100]	; (800058c <main+0xf4>)
 8000528:	f001 fcea 	bl	8001f00 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 800052c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000530:	f000 ff92 	bl	8001458 <HAL_Delay>
	RED_LED_OFF;
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800053a:	4814      	ldr	r0, [pc, #80]	; (800058c <main+0xf4>)
 800053c:	f001 fce0 	bl	8001f00 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000540:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000544:	f000 ff88 	bl	8001458 <HAL_Delay>

	HAL_TIM_Base_Start_IT(&htim1);
 8000548:	4811      	ldr	r0, [pc, #68]	; (8000590 <main+0xf8>)
 800054a:	f002 fab9 	bl	8002ac0 <HAL_TIM_Base_Start_IT>

	RED_LED_ON;
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000554:	480d      	ldr	r0, [pc, #52]	; (800058c <main+0xf4>)
 8000556:	f001 fcd3 	bl	8001f00 <HAL_GPIO_WritePin>
	HAL_Delay(4000);
 800055a:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800055e:	f000 ff7b 	bl	8001458 <HAL_Delay>
	RED_LED_OFF;
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000568:	4808      	ldr	r0, [pc, #32]	; (800058c <main+0xf4>)
 800056a:	f001 fcc9 	bl	8001f00 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 800056e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000572:	f000 ff71 	bl	8001458 <HAL_Delay>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		GREEN_LED_TOGGLE;
 8000576:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800057a:	4804      	ldr	r0, [pc, #16]	; (800058c <main+0xf4>)
 800057c:	f001 fcd8 	bl	8001f30 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000580:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000584:	f000 ff68 	bl	8001458 <HAL_Delay>
		GREEN_LED_TOGGLE;
 8000588:	e7f5      	b.n	8000576 <main+0xde>
 800058a:	bf00      	nop
 800058c:	40010c00 	.word	0x40010c00
 8000590:	200000e4 	.word	0x200000e4

08000594 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b090      	sub	sp, #64	; 0x40
 8000598:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800059a:	f107 0318 	add.w	r3, r7, #24
 800059e:	2228      	movs	r2, #40	; 0x28
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f004 f96a 	bl	800487c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b6:	2301      	movs	r3, #1
 80005b8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005be:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c8:	2302      	movs	r3, #2
 80005ca:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0318 	add.w	r3, r7, #24
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fe05 	bl	80021ec <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x58>
			{
		Error_Handler();
 80005e8:	f000 fb0a 	bl	8000c00 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2102      	movs	r1, #2
 8000606:	4618      	mov	r0, r3
 8000608:	f002 f872 	bl	80026f0 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x82>
			{
		Error_Handler();
 8000612:	f000 faf5 	bl	8000c00 <Error_Handler>
	}
}
 8000616:	bf00      	nop
 8000618:	3740      	adds	r7, #64	; 0x40
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <MX_I2C1_Init+0x50>)
 8000626:	4a13      	ldr	r2, [pc, #76]	; (8000674 <MX_I2C1_Init+0x54>)
 8000628:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800062a:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_I2C1_Init+0x50>)
 800062c:	4a12      	ldr	r2, [pc, #72]	; (8000678 <MX_I2C1_Init+0x58>)
 800062e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000630:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <MX_I2C1_Init+0x50>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_I2C1_Init+0x50>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <MX_I2C1_Init+0x50>)
 800063e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000642:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065c:	4804      	ldr	r0, [pc, #16]	; (8000670 <MX_I2C1_Init+0x50>)
 800065e:	f001 fc81 	bl	8001f64 <HAL_I2C_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_I2C1_Init+0x4c>
			{
		Error_Handler();
 8000668:	f000 faca 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000090 	.word	0x20000090
 8000674:	40005400 	.word	0x40005400
 8000678:	000186a0 	.word	0x000186a0

0800067c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_TIM1_Init+0x98>)
 800069a:	4a1f      	ldr	r2, [pc, #124]	; (8000718 <MX_TIM1_Init+0x9c>)
 800069c:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 72 - 1;
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_TIM1_Init+0x98>)
 80006a0:	2247      	movs	r2, #71	; 0x47
 80006a2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_TIM1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 20000 - 1;
 80006aa:	4b1a      	ldr	r3, [pc, #104]	; (8000714 <MX_TIM1_Init+0x98>)
 80006ac:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80006b0:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <MX_TIM1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_TIM1_Init+0x98>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_TIM1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c4:	4813      	ldr	r0, [pc, #76]	; (8000714 <MX_TIM1_Init+0x98>)
 80006c6:	f002 f9ab 	bl	8002a20 <HAL_TIM_Base_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM1_Init+0x58>
			{
		Error_Handler();
 80006d0:	f000 fa96 	bl	8000c00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4619      	mov	r1, r3
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <MX_TIM1_Init+0x98>)
 80006e2:	f002 fe2f 	bl	8003344 <HAL_TIM_ConfigClockSource>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0x74>
			{
		Error_Handler();
 80006ec:	f000 fa88 	bl	8000c00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_TIM1_Init+0x98>)
 80006fe:	f003 f9b7 	bl	8003a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM1_Init+0x90>
			{
		Error_Handler();
 8000708:	f000 fa7a 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	200000e4 	.word	0x200000e4
 8000718:	40012c00 	.word	0x40012c00

0800071c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08c      	sub	sp, #48	; 0x30
 8000720:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000722:	f107 030c 	add.w	r3, r7, #12
 8000726:	2224      	movs	r2, #36	; 0x24
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f004 f8a6 	bl	800487c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000738:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_TIM2_Init+0xa4>)
 800073a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000740:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_TIM2_Init+0xa4>)
 8000742:	2200      	movs	r2, #0
 8000744:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_TIM2_Init+0xa4>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <MX_TIM2_Init+0xa4>)
 800074e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000752:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_TIM2_Init+0xa4>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b19      	ldr	r3, [pc, #100]	; (80007c0 <MX_TIM2_Init+0xa4>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000760:	2301      	movs	r3, #1
 8000762:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000764:	2300      	movs	r3, #0
 8000766:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000768:	2301      	movs	r3, #1
 800076a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800076c:	2300      	movs	r3, #0
 800076e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000774:	2300      	movs	r3, #0
 8000776:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000778:	2301      	movs	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000784:	f107 030c 	add.w	r3, r7, #12
 8000788:	4619      	mov	r1, r3
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_TIM2_Init+0xa4>)
 800078c:	f002 fae4 	bl	8002d58 <HAL_TIM_Encoder_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM2_Init+0x7e>
			{
		Error_Handler();
 8000796:	f000 fa33 	bl	8000c00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	4619      	mov	r1, r3
 80007a6:	4806      	ldr	r0, [pc, #24]	; (80007c0 <MX_TIM2_Init+0xa4>)
 80007a8:	f003 f962 	bl	8003a70 <HAL_TIMEx_MasterConfigSynchronization>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM2_Init+0x9a>
			{
		Error_Handler();
 80007b2:	f000 fa25 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	3730      	adds	r7, #48	; 0x30
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	2000012c 	.word	0x2000012c

080007c4 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08e      	sub	sp, #56	; 0x38
 80007c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80007ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80007f4:	4b3d      	ldr	r3, [pc, #244]	; (80008ec <MX_TIM3_Init+0x128>)
 80007f6:	4a3e      	ldr	r2, [pc, #248]	; (80008f0 <MX_TIM3_Init+0x12c>)
 80007f8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 100;
 80007fa:	4b3c      	ldr	r3, [pc, #240]	; (80008ec <MX_TIM3_Init+0x128>)
 80007fc:	2264      	movs	r2, #100	; 0x64
 80007fe:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000800:	4b3a      	ldr	r3, [pc, #232]	; (80008ec <MX_TIM3_Init+0x128>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 72 * 40 - 1;
 8000806:	4b39      	ldr	r3, [pc, #228]	; (80008ec <MX_TIM3_Init+0x128>)
 8000808:	f640 323f 	movw	r2, #2879	; 0xb3f
 800080c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b37      	ldr	r3, [pc, #220]	; (80008ec <MX_TIM3_Init+0x128>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000814:	4b35      	ldr	r3, [pc, #212]	; (80008ec <MX_TIM3_Init+0x128>)
 8000816:	2200      	movs	r2, #0
 8000818:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800081a:	4834      	ldr	r0, [pc, #208]	; (80008ec <MX_TIM3_Init+0x128>)
 800081c:	f002 f900 	bl	8002a20 <HAL_TIM_Base_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM3_Init+0x66>
			{
		Error_Handler();
 8000826:	f000 f9eb 	bl	8000c00 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000834:	4619      	mov	r1, r3
 8000836:	482d      	ldr	r0, [pc, #180]	; (80008ec <MX_TIM3_Init+0x128>)
 8000838:	f002 fd84 	bl	8003344 <HAL_TIM_ConfigClockSource>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM3_Init+0x82>
			{
		Error_Handler();
 8000842:	f000 f9dd 	bl	8000c00 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000846:	4829      	ldr	r0, [pc, #164]	; (80008ec <MX_TIM3_Init+0x128>)
 8000848:	f002 f98c 	bl	8002b64 <HAL_TIM_PWM_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0x92>
			{
		Error_Handler();
 8000852:	f000 f9d5 	bl	8000c00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	4619      	mov	r1, r3
 8000864:	4821      	ldr	r0, [pc, #132]	; (80008ec <MX_TIM3_Init+0x128>)
 8000866:	f003 f903 	bl	8003a70 <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM3_Init+0xb0>
			{
		Error_Handler();
 8000870:	f000 f9c6 	bl	8000c00 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	4818      	ldr	r0, [pc, #96]	; (80008ec <MX_TIM3_Init+0x128>)
 800088c:	f002 fc9c 	bl	80031c8 <HAL_TIM_PWM_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM3_Init+0xd6>
			{
		Error_Handler();
 8000896:	f000 f9b3 	bl	8000c00 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2204      	movs	r2, #4
 800089e:	4619      	mov	r1, r3
 80008a0:	4812      	ldr	r0, [pc, #72]	; (80008ec <MX_TIM3_Init+0x128>)
 80008a2:	f002 fc91 	bl	80031c8 <HAL_TIM_PWM_ConfigChannel>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM3_Init+0xec>
			{
		Error_Handler();
 80008ac:	f000 f9a8 	bl	8000c00 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2208      	movs	r2, #8
 80008b4:	4619      	mov	r1, r3
 80008b6:	480d      	ldr	r0, [pc, #52]	; (80008ec <MX_TIM3_Init+0x128>)
 80008b8:	f002 fc86 	bl	80031c8 <HAL_TIM_PWM_ConfigChannel>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0x102>
			{
		Error_Handler();
 80008c2:	f000 f99d 	bl	8000c00 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	220c      	movs	r2, #12
 80008ca:	4619      	mov	r1, r3
 80008cc:	4807      	ldr	r0, [pc, #28]	; (80008ec <MX_TIM3_Init+0x128>)
 80008ce:	f002 fc7b 	bl	80031c8 <HAL_TIM_PWM_ConfigChannel>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM3_Init+0x118>
			{
		Error_Handler();
 80008d8:	f000 f992 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80008dc:	4803      	ldr	r0, [pc, #12]	; (80008ec <MX_TIM3_Init+0x128>)
 80008de:	f000 facb 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 80008e2:	bf00      	nop
 80008e4:	3738      	adds	r7, #56	; 0x38
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000174 	.word	0x20000174
 80008f0:	40000400 	.word	0x40000400

080008f4 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08c      	sub	sp, #48	; 0x30
 80008f8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	2224      	movs	r2, #36	; 0x24
 8000900:	2100      	movs	r1, #0
 8000902:	4618      	mov	r0, r3
 8000904:	f003 ffba 	bl	800487c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000910:	4b20      	ldr	r3, [pc, #128]	; (8000994 <MX_TIM4_Init+0xa0>)
 8000912:	4a21      	ldr	r2, [pc, #132]	; (8000998 <MX_TIM4_Init+0xa4>)
 8000914:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <MX_TIM4_Init+0xa0>)
 8000918:	2200      	movs	r2, #0
 800091a:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800091c:	4b1d      	ldr	r3, [pc, #116]	; (8000994 <MX_TIM4_Init+0xa0>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <MX_TIM4_Init+0xa0>)
 8000924:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000928:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <MX_TIM4_Init+0xa0>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_TIM4_Init+0xa0>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000936:	2301      	movs	r3, #1
 8000938:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800093e:	2301      	movs	r3, #1
 8000940:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800094e:	2301      	movs	r3, #1
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4619      	mov	r1, r3
 8000960:	480c      	ldr	r0, [pc, #48]	; (8000994 <MX_TIM4_Init+0xa0>)
 8000962:	f002 f9f9 	bl	8002d58 <HAL_TIM_Encoder_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM4_Init+0x7c>
			{
		Error_Handler();
 800096c:	f000 f948 	bl	8000c00 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	4619      	mov	r1, r3
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_TIM4_Init+0xa0>)
 800097e:	f003 f877 	bl	8003a70 <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM4_Init+0x98>
			{
		Error_Handler();
 8000988:	f000 f93a 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800098c:	bf00      	nop
 800098e:	3730      	adds	r7, #48	; 0x30
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	200001bc 	.word	0x200001bc
 8000998:	40000800 	.word	0x40000800

0800099c <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	; (80009ec <MX_USART1_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART1_UART_Init+0x4c>)
 80009d4:	f003 f8bc 	bl	8003b50 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART1_UART_Init+0x46>
			{
		Error_Handler();
 80009de:	f000 f90f 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000204 	.word	0x20000204
 80009ec:	40013800 	.word	0x40013800

080009f0 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 80009f6:	4a12      	ldr	r2, [pc, #72]	; (8000a40 <MX_USART2_UART_Init+0x50>)
 80009f8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 80009fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a00:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a0e:	4b0b      	ldr	r3, [pc, #44]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a14:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a16:	220c      	movs	r2, #12
 8000a18:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a26:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_USART2_UART_Init+0x4c>)
 8000a28:	f003 f892 	bl	8003b50 <HAL_UART_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_USART2_UART_Init+0x46>
			{
		Error_Handler();
 8000a32:	f000 f8e5 	bl	8000c00 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000248 	.word	0x20000248
 8000a40:	40004400 	.word	0x40004400

08000a44 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <MX_DMA_Init+0x48>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	4a0f      	ldr	r2, [pc, #60]	; (8000a8c <MX_DMA_Init+0x48>)
 8000a50:	f043 0301 	orr.w	r3, r3, #1
 8000a54:	6153      	str	r3, [r2, #20]
 8000a56:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <MX_DMA_Init+0x48>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	f003 0301 	and.w	r3, r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2100      	movs	r1, #0
 8000a66:	200f      	movs	r0, #15
 8000a68:	f000 fdf1 	bl	800164e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000a6c:	200f      	movs	r0, #15
 8000a6e:	f000 fe0a 	bl	8001686 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	2010      	movs	r0, #16
 8000a78:	f000 fde9 	bl	800164e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000a7c:	2010      	movs	r0, #16
 8000a7e:	f000 fe02 	bl	8001686 <HAL_NVIC_EnableIRQ>

}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40021000 	.word	0x40021000

08000a90 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b088      	sub	sp, #32
 8000a94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a96:	f107 0310 	add.w	r3, r7, #16
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa4:	4b1e      	ldr	r3, [pc, #120]	; (8000b20 <MX_GPIO_Init+0x90>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a1d      	ldr	r2, [pc, #116]	; (8000b20 <MX_GPIO_Init+0x90>)
 8000aaa:	f043 0320 	orr.w	r3, r3, #32
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b1b      	ldr	r3, [pc, #108]	; (8000b20 <MX_GPIO_Init+0x90>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0320 	and.w	r3, r3, #32
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <MX_GPIO_Init+0x90>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <MX_GPIO_Init+0x90>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <MX_GPIO_Init+0x90>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0304 	and.w	r3, r3, #4
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <MX_GPIO_Init+0x90>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a11      	ldr	r2, [pc, #68]	; (8000b20 <MX_GPIO_Init+0x90>)
 8000ada:	f043 0308 	orr.w	r3, r3, #8
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b0f      	ldr	r3, [pc, #60]	; (8000b20 <MX_GPIO_Init+0x90>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0308 	and.w	r3, r3, #8
 8000ae8:	607b      	str	r3, [r7, #4]
 8000aea:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, Buzzer_Pin | LED_B_Pin | LED_G_Pin | LED_R_Pin, GPIO_PIN_RESET);
 8000aec:	2200      	movs	r2, #0
 8000aee:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000af2:	480c      	ldr	r0, [pc, #48]	; (8000b24 <MX_GPIO_Init+0x94>)
 8000af4:	f001 fa04 	bl	8001f00 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Buzzer_Pin LED_B_Pin LED_G_Pin LED_R_Pin */
	GPIO_InitStruct.Pin = Buzzer_Pin | LED_B_Pin | LED_G_Pin | LED_R_Pin;
 8000af8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000afc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afe:	2301      	movs	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 0310 	add.w	r3, r7, #16
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_GPIO_Init+0x94>)
 8000b12:	f001 f871 	bl	8001bf8 <HAL_GPIO_Init>

}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010c00 	.word	0x40010c00

08000b28 <HUAN_MOTOR_LEFT_Init>:

/* USER CODE BEGIN 4 */
static void HUAN_MOTOR_LEFT_Init(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	hmotor_left.counter = &htim2;
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HUAN_MOTOR_LEFT_Init+0x34>)
 8000b2e:	4a0c      	ldr	r2, [pc, #48]	; (8000b60 <HUAN_MOTOR_LEFT_Init+0x38>)
 8000b30:	601a      	str	r2, [r3, #0]
	hmotor_left.dt = 0.02;
 8000b32:	4b0a      	ldr	r3, [pc, #40]	; (8000b5c <HUAN_MOTOR_LEFT_Init+0x34>)
 8000b34:	4a0b      	ldr	r2, [pc, #44]	; (8000b64 <HUAN_MOTOR_LEFT_Init+0x3c>)
 8000b36:	621a      	str	r2, [r3, #32]
	hmotor_left.posTimer = &htim3;
 8000b38:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <HUAN_MOTOR_LEFT_Init+0x34>)
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <HUAN_MOTOR_LEFT_Init+0x40>)
 8000b3c:	605a      	str	r2, [r3, #4]
	hmotor_left.pos_channel = TIM_CHANNEL_1;
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <HUAN_MOTOR_LEFT_Init+0x34>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
	hmotor_left.negTimer = &htim3;
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <HUAN_MOTOR_LEFT_Init+0x34>)
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <HUAN_MOTOR_LEFT_Init+0x40>)
 8000b48:	609a      	str	r2, [r3, #8]
	hmotor_left.neg_channel = TIM_CHANNEL_2;
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <HUAN_MOTOR_LEFT_Init+0x34>)
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	611a      	str	r2, [r3, #16]
	huansic_motor_init(&hmotor_left);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <HUAN_MOTOR_LEFT_Init+0x34>)
 8000b52:	f7ff fbcd 	bl	80002f0 <huansic_motor_init>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000314 	.word	0x20000314
 8000b60:	2000012c 	.word	0x2000012c
 8000b64:	3ca3d70a 	.word	0x3ca3d70a
 8000b68:	20000174 	.word	0x20000174

08000b6c <HUAN_MOTOR_RIGHT_Init>:

static void HUAN_MOTOR_RIGHT_Init(void) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	hmotor_right.counter = &htim4;
 8000b70:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <HUAN_MOTOR_RIGHT_Init+0x34>)
 8000b72:	4a0c      	ldr	r2, [pc, #48]	; (8000ba4 <HUAN_MOTOR_RIGHT_Init+0x38>)
 8000b74:	601a      	str	r2, [r3, #0]
	hmotor_right.dt = 0.02;
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HUAN_MOTOR_RIGHT_Init+0x34>)
 8000b78:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <HUAN_MOTOR_RIGHT_Init+0x3c>)
 8000b7a:	621a      	str	r2, [r3, #32]
	hmotor_right.posTimer = &htim3;
 8000b7c:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <HUAN_MOTOR_RIGHT_Init+0x34>)
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <HUAN_MOTOR_RIGHT_Init+0x40>)
 8000b80:	605a      	str	r2, [r3, #4]
	hmotor_right.pos_channel = TIM_CHANNEL_3;
 8000b82:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <HUAN_MOTOR_RIGHT_Init+0x34>)
 8000b84:	2208      	movs	r2, #8
 8000b86:	60da      	str	r2, [r3, #12]
	hmotor_right.negTimer = &htim3;
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <HUAN_MOTOR_RIGHT_Init+0x34>)
 8000b8a:	4a08      	ldr	r2, [pc, #32]	; (8000bac <HUAN_MOTOR_RIGHT_Init+0x40>)
 8000b8c:	609a      	str	r2, [r3, #8]
	hmotor_right.neg_channel = TIM_CHANNEL_4;
 8000b8e:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <HUAN_MOTOR_RIGHT_Init+0x34>)
 8000b90:	220c      	movs	r2, #12
 8000b92:	611a      	str	r2, [r3, #16]
	huansic_motor_init(&hmotor_right);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <HUAN_MOTOR_RIGHT_Init+0x34>)
 8000b96:	f7ff fbab 	bl	80002f0 <huansic_motor_init>
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000350 	.word	0x20000350
 8000ba4:	200001bc 	.word	0x200001bc
 8000ba8:	3ca3d70a 	.word	0x3ca3d70a
 8000bac:	20000174 	.word	0x20000174

08000bb0 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
	himu.uartPort = &huart1;
 8000bb4:	4b05      	ldr	r3, [pc, #20]	; (8000bcc <HUAN_IMU_Init+0x1c>)
 8000bb6:	4a06      	ldr	r2, [pc, #24]	; (8000bd0 <HUAN_IMU_Init+0x20>)
 8000bb8:	601a      	str	r2, [r3, #0]
	himu.rxDMA = &hdma_usart1_rx;
 8000bba:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <HUAN_IMU_Init+0x1c>)
 8000bbc:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <HUAN_IMU_Init+0x24>)
 8000bbe:	605a      	str	r2, [r3, #4]
	huansic_jy62_init(&himu);
 8000bc0:	4802      	ldr	r0, [pc, #8]	; (8000bcc <HUAN_IMU_Init+0x1c>)
 8000bc2:	f7ff fb39 	bl	8000238 <huansic_jy62_init>
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000038c 	.word	0x2000038c
 8000bd0:	20000204 	.word	0x20000204
 8000bd4:	2000028c 	.word	0x2000028c

08000bd8 <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	hxb.uartPort = &huart2;
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HUAN_ZIGBEE_Init+0x1c>)
 8000bde:	4a06      	ldr	r2, [pc, #24]	; (8000bf8 <HUAN_ZIGBEE_Init+0x20>)
 8000be0:	601a      	str	r2, [r3, #0]
	hxb.rxDMA = &hdma_usart2_rx;
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <HUAN_ZIGBEE_Init+0x1c>)
 8000be4:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <HUAN_ZIGBEE_Init+0x24>)
 8000be6:	605a      	str	r2, [r3, #4]
	huansic_xb_init(&hxb);
 8000be8:	4802      	ldr	r0, [pc, #8]	; (8000bf4 <HUAN_ZIGBEE_Init+0x1c>)
 8000bea:	f7ff fc3f 	bl	800046c <huansic_xb_init>
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200003c8 	.word	0x200003c8
 8000bf8:	20000248 	.word	0x20000248
 8000bfc:	200002d0 	.word	0x200002d0

08000c00 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c08:	e7fe      	b.n	8000c08 <Error_Handler+0x8>
	...

08000c0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6193      	str	r3, [r2, #24]
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	61d3      	str	r3, [r2, #28]
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_MspInit+0x60>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_MspInit+0x60>)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010000 	.word	0x40010000

08000c70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a1d      	ldr	r2, [pc, #116]	; (8000d00 <HAL_I2C_MspInit+0x90>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d132      	bne.n	8000cf6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c90:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <HAL_I2C_MspInit+0x94>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a1b      	ldr	r2, [pc, #108]	; (8000d04 <HAL_I2C_MspInit+0x94>)
 8000c96:	f043 0308 	orr.w	r3, r3, #8
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <HAL_I2C_MspInit+0x94>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f003 0308 	and.w	r3, r3, #8
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ca8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cae:	2312      	movs	r3, #18
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4812      	ldr	r0, [pc, #72]	; (8000d08 <HAL_I2C_MspInit+0x98>)
 8000cbe:	f000 ff9b 	bl	8001bf8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000cc2:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_I2C_MspInit+0x9c>)
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cca:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd2:	f043 0302 	orr.w	r3, r3, #2
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd8:	4a0c      	ldr	r2, [pc, #48]	; (8000d0c <HAL_I2C_MspInit+0x9c>)
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_I2C_MspInit+0x94>)
 8000ce0:	69db      	ldr	r3, [r3, #28]
 8000ce2:	4a08      	ldr	r2, [pc, #32]	; (8000d04 <HAL_I2C_MspInit+0x94>)
 8000ce4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ce8:	61d3      	str	r3, [r2, #28]
 8000cea:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_I2C_MspInit+0x94>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40005400 	.word	0x40005400
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010c00 	.word	0x40010c00
 8000d0c:	40010000 	.word	0x40010000

08000d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a16      	ldr	r2, [pc, #88]	; (8000d78 <HAL_TIM_Base_MspInit+0x68>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d114      	bne.n	8000d4c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d22:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <HAL_TIM_Base_MspInit+0x6c>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	4a15      	ldr	r2, [pc, #84]	; (8000d7c <HAL_TIM_Base_MspInit+0x6c>)
 8000d28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d2c:	6193      	str	r3, [r2, #24]
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <HAL_TIM_Base_MspInit+0x6c>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2019      	movs	r0, #25
 8000d40:	f000 fc85 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d44:	2019      	movs	r0, #25
 8000d46:	f000 fc9e 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d4a:	e010      	b.n	8000d6e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0b      	ldr	r2, [pc, #44]	; (8000d80 <HAL_TIM_Base_MspInit+0x70>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d10b      	bne.n	8000d6e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d56:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <HAL_TIM_Base_MspInit+0x6c>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	4a08      	ldr	r2, [pc, #32]	; (8000d7c <HAL_TIM_Base_MspInit+0x6c>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	61d3      	str	r3, [r2, #28]
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_TIM_Base_MspInit+0x6c>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40012c00 	.word	0x40012c00
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40000400 	.word	0x40000400

08000d84 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08a      	sub	sp, #40	; 0x28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0318 	add.w	r3, r7, #24
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000da2:	d12c      	bne.n	8000dfe <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000da4:	4b30      	ldr	r3, [pc, #192]	; (8000e68 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000da6:	69db      	ldr	r3, [r3, #28]
 8000da8:	4a2f      	ldr	r2, [pc, #188]	; (8000e68 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	61d3      	str	r3, [r2, #28]
 8000db0:	4b2d      	ldr	r3, [pc, #180]	; (8000e68 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000db2:	69db      	ldr	r3, [r3, #28]
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
 8000dba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a29      	ldr	r2, [pc, #164]	; (8000e68 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0318 	add.w	r3, r7, #24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4821      	ldr	r0, [pc, #132]	; (8000e6c <HAL_TIM_Encoder_MspInit+0xe8>)
 8000de8:	f000 ff06 	bl	8001bf8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2101      	movs	r1, #1
 8000df0:	201c      	movs	r0, #28
 8000df2:	f000 fc2c 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000df6:	201c      	movs	r0, #28
 8000df8:	f000 fc45 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dfc:	e030      	b.n	8000e60 <HAL_TIM_Encoder_MspInit+0xdc>
  else if(htim_encoder->Instance==TIM4)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <HAL_TIM_Encoder_MspInit+0xec>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d12b      	bne.n	8000e60 <HAL_TIM_Encoder_MspInit+0xdc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e08:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000e0a:	69db      	ldr	r3, [r3, #28]
 8000e0c:	4a16      	ldr	r2, [pc, #88]	; (8000e68 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000e0e:	f043 0304 	orr.w	r3, r3, #4
 8000e12:	61d3      	str	r3, [r2, #28]
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000e16:	69db      	ldr	r3, [r3, #28]
 8000e18:	f003 0304 	and.w	r3, r3, #4
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	4a10      	ldr	r2, [pc, #64]	; (8000e68 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000e26:	f043 0308 	orr.w	r3, r3, #8
 8000e2a:	6193      	str	r3, [r2, #24]
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <HAL_TIM_Encoder_MspInit+0xe4>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	f003 0308 	and.w	r3, r3, #8
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e38:	23c0      	movs	r3, #192	; 0xc0
 8000e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e44:	f107 0318 	add.w	r3, r7, #24
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480a      	ldr	r0, [pc, #40]	; (8000e74 <HAL_TIM_Encoder_MspInit+0xf0>)
 8000e4c:	f000 fed4 	bl	8001bf8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2101      	movs	r1, #1
 8000e54:	201e      	movs	r0, #30
 8000e56:	f000 fbfa 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000e5a:	201e      	movs	r0, #30
 8000e5c:	f000 fc13 	bl	8001686 <HAL_NVIC_EnableIRQ>
}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40010800 	.word	0x40010800
 8000e70:	40000800 	.word	0x40000800
 8000e74:	40010c00 	.word	0x40010c00

08000e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a1b      	ldr	r2, [pc, #108]	; (8000f00 <HAL_TIM_MspPostInit+0x88>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d12f      	bne.n	8000ef8 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <HAL_TIM_MspPostInit+0x8c>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <HAL_TIM_MspPostInit+0x8c>)
 8000e9e:	f043 0304 	orr.w	r3, r3, #4
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <HAL_TIM_MspPostInit+0x8c>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	60fb      	str	r3, [r7, #12]
 8000eae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <HAL_TIM_MspPostInit+0x8c>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <HAL_TIM_MspPostInit+0x8c>)
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <HAL_TIM_MspPostInit+0x8c>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0308 	and.w	r3, r3, #8
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec8:	23c0      	movs	r3, #192	; 0xc0
 8000eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480b      	ldr	r0, [pc, #44]	; (8000f08 <HAL_TIM_MspPostInit+0x90>)
 8000edc:	f000 fe8c 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <HAL_TIM_MspPostInit+0x94>)
 8000ef4:	f000 fe80 	bl	8001bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000ef8:	bf00      	nop
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40000400 	.word	0x40000400
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010800 	.word	0x40010800
 8000f0c:	40010c00 	.word	0x40010c00

08000f10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08a      	sub	sp, #40	; 0x28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0318 	add.w	r3, r7, #24
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a65      	ldr	r2, [pc, #404]	; (80010c0 <HAL_UART_MspInit+0x1b0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d160      	bne.n	8000ff2 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f30:	4b64      	ldr	r3, [pc, #400]	; (80010c4 <HAL_UART_MspInit+0x1b4>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	4a63      	ldr	r2, [pc, #396]	; (80010c4 <HAL_UART_MspInit+0x1b4>)
 8000f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f3a:	6193      	str	r3, [r2, #24]
 8000f3c:	4b61      	ldr	r3, [pc, #388]	; (80010c4 <HAL_UART_MspInit+0x1b4>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f48:	4b5e      	ldr	r3, [pc, #376]	; (80010c4 <HAL_UART_MspInit+0x1b4>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	4a5d      	ldr	r2, [pc, #372]	; (80010c4 <HAL_UART_MspInit+0x1b4>)
 8000f4e:	f043 0304 	orr.w	r3, r3, #4
 8000f52:	6193      	str	r3, [r2, #24]
 8000f54:	4b5b      	ldr	r3, [pc, #364]	; (80010c4 <HAL_UART_MspInit+0x1b4>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8000f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8000f6e:	f107 0318 	add.w	r3, r7, #24
 8000f72:	4619      	mov	r1, r3
 8000f74:	4854      	ldr	r0, [pc, #336]	; (80010c8 <HAL_UART_MspInit+0x1b8>)
 8000f76:	f000 fe3f 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = JY_RX_Pin;
 8000f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8000f88:	f107 0318 	add.w	r3, r7, #24
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	484e      	ldr	r0, [pc, #312]	; (80010c8 <HAL_UART_MspInit+0x1b8>)
 8000f90:	f000 fe32 	bl	8001bf8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000f94:	4b4d      	ldr	r3, [pc, #308]	; (80010cc <HAL_UART_MspInit+0x1bc>)
 8000f96:	4a4e      	ldr	r2, [pc, #312]	; (80010d0 <HAL_UART_MspInit+0x1c0>)
 8000f98:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <HAL_UART_MspInit+0x1bc>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa0:	4b4a      	ldr	r3, [pc, #296]	; (80010cc <HAL_UART_MspInit+0x1bc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa6:	4b49      	ldr	r3, [pc, #292]	; (80010cc <HAL_UART_MspInit+0x1bc>)
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fac:	4b47      	ldr	r3, [pc, #284]	; (80010cc <HAL_UART_MspInit+0x1bc>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb2:	4b46      	ldr	r3, [pc, #280]	; (80010cc <HAL_UART_MspInit+0x1bc>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000fb8:	4b44      	ldr	r3, [pc, #272]	; (80010cc <HAL_UART_MspInit+0x1bc>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fbe:	4b43      	ldr	r3, [pc, #268]	; (80010cc <HAL_UART_MspInit+0x1bc>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000fc4:	4841      	ldr	r0, [pc, #260]	; (80010cc <HAL_UART_MspInit+0x1bc>)
 8000fc6:	f000 fb79 	bl	80016bc <HAL_DMA_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000fd0:	f7ff fe16 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a3d      	ldr	r2, [pc, #244]	; (80010cc <HAL_UART_MspInit+0x1bc>)
 8000fd8:	639a      	str	r2, [r3, #56]	; 0x38
 8000fda:	4a3c      	ldr	r2, [pc, #240]	; (80010cc <HAL_UART_MspInit+0x1bc>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2025      	movs	r0, #37	; 0x25
 8000fe6:	f000 fb32 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fea:	2025      	movs	r0, #37	; 0x25
 8000fec:	f000 fb4b 	bl	8001686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff0:	e062      	b.n	80010b8 <HAL_UART_MspInit+0x1a8>
  else if(huart->Instance==USART2)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a37      	ldr	r2, [pc, #220]	; (80010d4 <HAL_UART_MspInit+0x1c4>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d15d      	bne.n	80010b8 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ffc:	4b31      	ldr	r3, [pc, #196]	; (80010c4 <HAL_UART_MspInit+0x1b4>)
 8000ffe:	69db      	ldr	r3, [r3, #28]
 8001000:	4a30      	ldr	r2, [pc, #192]	; (80010c4 <HAL_UART_MspInit+0x1b4>)
 8001002:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001006:	61d3      	str	r3, [r2, #28]
 8001008:	4b2e      	ldr	r3, [pc, #184]	; (80010c4 <HAL_UART_MspInit+0x1b4>)
 800100a:	69db      	ldr	r3, [r3, #28]
 800100c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <HAL_UART_MspInit+0x1b4>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4a2a      	ldr	r2, [pc, #168]	; (80010c4 <HAL_UART_MspInit+0x1b4>)
 800101a:	f043 0304 	orr.w	r3, r3, #4
 800101e:	6193      	str	r3, [r2, #24]
 8001020:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <HAL_UART_MspInit+0x1b4>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XB_TX_Pin;
 800102c:	2304      	movs	r3, #4
 800102e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001030:	2302      	movs	r3, #2
 8001032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 8001038:	f107 0318 	add.w	r3, r7, #24
 800103c:	4619      	mov	r1, r3
 800103e:	4822      	ldr	r0, [pc, #136]	; (80010c8 <HAL_UART_MspInit+0x1b8>)
 8001040:	f000 fdda 	bl	8001bf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = XB_RX_Pin;
 8001044:	2308      	movs	r3, #8
 8001046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 0318 	add.w	r3, r7, #24
 8001054:	4619      	mov	r1, r3
 8001056:	481c      	ldr	r0, [pc, #112]	; (80010c8 <HAL_UART_MspInit+0x1b8>)
 8001058:	f000 fdce 	bl	8001bf8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <HAL_UART_MspInit+0x1c8>)
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <HAL_UART_MspInit+0x1cc>)
 8001060:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001062:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <HAL_UART_MspInit+0x1c8>)
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <HAL_UART_MspInit+0x1c8>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <HAL_UART_MspInit+0x1c8>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_UART_MspInit+0x1c8>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_UART_MspInit+0x1c8>)
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <HAL_UART_MspInit+0x1c8>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <HAL_UART_MspInit+0x1c8>)
 8001088:	2200      	movs	r2, #0
 800108a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800108c:	4812      	ldr	r0, [pc, #72]	; (80010d8 <HAL_UART_MspInit+0x1c8>)
 800108e:	f000 fb15 	bl	80016bc <HAL_DMA_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8001098:	f7ff fdb2 	bl	8000c00 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a0e      	ldr	r2, [pc, #56]	; (80010d8 <HAL_UART_MspInit+0x1c8>)
 80010a0:	639a      	str	r2, [r3, #56]	; 0x38
 80010a2:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <HAL_UART_MspInit+0x1c8>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2103      	movs	r1, #3
 80010ac:	2026      	movs	r0, #38	; 0x26
 80010ae:	f000 face 	bl	800164e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010b2:	2026      	movs	r0, #38	; 0x26
 80010b4:	f000 fae7 	bl	8001686 <HAL_NVIC_EnableIRQ>
}
 80010b8:	bf00      	nop
 80010ba:	3728      	adds	r7, #40	; 0x28
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40013800 	.word	0x40013800
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40010800 	.word	0x40010800
 80010cc:	2000028c 	.word	0x2000028c
 80010d0:	40020058 	.word	0x40020058
 80010d4:	40004400 	.word	0x40004400
 80010d8:	200002d0 	.word	0x200002d0
 80010dc:	4002006c 	.word	0x4002006c

080010e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80010e4:	e7fe      	b.n	80010e4 <NMI_Handler+0x4>

080010e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e6:	b480      	push	{r7}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ea:	e7fe      	b.n	80010ea <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <MemManage_Handler+0x4>

080010f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <BusFault_Handler+0x4>

080010f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <UsageFault_Handler+0x4>

080010fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	bc80      	pop	{r7}
 8001114:	4770      	bx	lr

08001116 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	bc80      	pop	{r7}
 8001120:	4770      	bx	lr

08001122 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001126:	f000 f97b 	bl	8001420 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001134:	4802      	ldr	r0, [pc, #8]	; (8001140 <DMA1_Channel5_IRQHandler+0x10>)
 8001136:	f000 fc2b 	bl	8001990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	2000028c 	.word	0x2000028c

08001144 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001148:	4802      	ldr	r0, [pc, #8]	; (8001154 <DMA1_Channel6_IRQHandler+0x10>)
 800114a:	f000 fc21 	bl	8001990 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200002d0 	.word	0x200002d0

08001158 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */
	//huansic_motor_pid(leftMotor);
	//huansic_motor_pid(rightMotor);
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <TIM1_UP_IRQHandler+0x10>)
 800115e:	f001 ff2b 	bl	8002fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	200000e4 	.word	0x200000e4

0800116c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <TIM2_IRQHandler+0x10>)
 8001172:	f001 ff21 	bl	8002fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000012c 	.word	0x2000012c

08001180 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001184:	4802      	ldr	r0, [pc, #8]	; (8001190 <TIM4_IRQHandler+0x10>)
 8001186:	f001 ff17 	bl	8002fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200001bc 	.word	0x200001bc

08001194 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <USART1_IRQHandler+0x10>)
 800119a:	f002 fde9 	bl	8003d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000204 	.word	0x20000204

080011a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <USART2_IRQHandler+0x10>)
 80011ae:	f002 fddf 	bl	8003d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000248 	.word	0x20000248

080011bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
	return 1;
 80011c0:	2301      	movs	r3, #1
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr

080011ca <_kill>:

int _kill(int pid, int sig)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80011d4:	f003 fb16 	bl	8004804 <__errno>
 80011d8:	4603      	mov	r3, r0
 80011da:	2216      	movs	r2, #22
 80011dc:	601a      	str	r2, [r3, #0]
	return -1;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_exit>:

void _exit (int status)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80011f2:	f04f 31ff 	mov.w	r1, #4294967295
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffe7 	bl	80011ca <_kill>
	while (1) {}		/* Make sure we hang here */
 80011fc:	e7fe      	b.n	80011fc <_exit+0x12>

080011fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	e00a      	b.n	8001226 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001210:	f3af 8000 	nop.w
 8001214:	4601      	mov	r1, r0
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	1c5a      	adds	r2, r3, #1
 800121a:	60ba      	str	r2, [r7, #8]
 800121c:	b2ca      	uxtb	r2, r1
 800121e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
 8001226:	697a      	ldr	r2, [r7, #20]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	dbf0      	blt.n	8001210 <_read+0x12>
	}

return len;
 800122e:	687b      	ldr	r3, [r7, #4]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	e009      	b.n	800125e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	60ba      	str	r2, [r7, #8]
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3301      	adds	r3, #1
 800125c:	617b      	str	r3, [r7, #20]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	429a      	cmp	r2, r3
 8001264:	dbf1      	blt.n	800124a <_write+0x12>
	}
	return len;
 8001266:	687b      	ldr	r3, [r7, #4]
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_close>:

int _close(int file)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	return -1;
 8001278:	f04f 33ff 	mov.w	r3, #4294967295
}
 800127c:	4618      	mov	r0, r3
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001296:	605a      	str	r2, [r3, #4]
	return 0;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <_isatty>:

int _isatty(int file)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	return 1;
 80012ac:	2301      	movs	r3, #1
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
	return 0;
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc80      	pop	{r7}
 80012ce:	4770      	bx	lr

080012d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d8:	4a14      	ldr	r2, [pc, #80]	; (800132c <_sbrk+0x5c>)
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <_sbrk+0x60>)
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e4:	4b13      	ldr	r3, [pc, #76]	; (8001334 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <_sbrk+0x64>)
 80012ee:	4a12      	ldr	r2, [pc, #72]	; (8001338 <_sbrk+0x68>)
 80012f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d207      	bcs.n	8001310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001300:	f003 fa80 	bl	8004804 <__errno>
 8001304:	4603      	mov	r3, r0
 8001306:	220c      	movs	r2, #12
 8001308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	e009      	b.n	8001324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <_sbrk+0x64>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001316:	4b07      	ldr	r3, [pc, #28]	; (8001334 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	4a05      	ldr	r2, [pc, #20]	; (8001334 <_sbrk+0x64>)
 8001320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001322:	68fb      	ldr	r3, [r7, #12]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20005000 	.word	0x20005000
 8001330:	00000400 	.word	0x00000400
 8001334:	20000498 	.word	0x20000498
 8001338:	200004b0 	.word	0x200004b0

0800133c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001348:	480c      	ldr	r0, [pc, #48]	; (800137c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800134a:	490d      	ldr	r1, [pc, #52]	; (8001380 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800134c:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001350:	e002      	b.n	8001358 <LoopCopyDataInit>

08001352 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001352:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001354:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001356:	3304      	adds	r3, #4

08001358 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001358:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800135a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800135c:	d3f9      	bcc.n	8001352 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001360:	4c0a      	ldr	r4, [pc, #40]	; (800138c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001362:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001364:	e001      	b.n	800136a <LoopFillZerobss>

08001366 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001366:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001368:	3204      	adds	r2, #4

0800136a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800136a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800136c:	d3fb      	bcc.n	8001366 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800136e:	f7ff ffe5 	bl	800133c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001372:	f003 fa5f 	bl	8004834 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001376:	f7ff f88f 	bl	8000498 <main>
  bx lr
 800137a:	4770      	bx	lr
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001384:	0800599c 	.word	0x0800599c
  ldr r2, =_sbss
 8001388:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800138c:	200004b0 	.word	0x200004b0

08001390 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC1_2_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001398:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_Init+0x28>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_Init+0x28>)
 800139e:	f043 0310 	orr.w	r3, r3, #16
 80013a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 f947 	bl	8001638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013aa:	2000      	movs	r0, #0
 80013ac:	f000 f808 	bl	80013c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b0:	f7ff fc2c 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000

080013c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013c8:	4b12      	ldr	r3, [pc, #72]	; (8001414 <HAL_InitTick+0x54>)
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_InitTick+0x58>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013da:	fbb2 f3f3 	udiv	r3, r2, r3
 80013de:	4618      	mov	r0, r3
 80013e0:	f000 f95f 	bl	80016a2 <HAL_SYSTICK_Config>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e00e      	b.n	800140c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2b0f      	cmp	r3, #15
 80013f2:	d80a      	bhi.n	800140a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013f4:	2200      	movs	r2, #0
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 30ff 	mov.w	r0, #4294967295
 80013fc:	f000 f927 	bl	800164e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001400:	4a06      	ldr	r2, [pc, #24]	; (800141c <HAL_InitTick+0x5c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001406:	2300      	movs	r3, #0
 8001408:	e000      	b.n	800140c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
}
 800140c:	4618      	mov	r0, r3
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000004 	.word	0x20000004
 8001418:	2000000c 	.word	0x2000000c
 800141c:	20000008 	.word	0x20000008

08001420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <HAL_IncTick+0x1c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_IncTick+0x20>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4413      	add	r3, r2
 8001430:	4a03      	ldr	r2, [pc, #12]	; (8001440 <HAL_IncTick+0x20>)
 8001432:	6013      	str	r3, [r2, #0]
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	2000000c 	.word	0x2000000c
 8001440:	2000049c 	.word	0x2000049c

08001444 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return uwTick;
 8001448:	4b02      	ldr	r3, [pc, #8]	; (8001454 <HAL_GetTick+0x10>)
 800144a:	681b      	ldr	r3, [r3, #0]
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	2000049c 	.word	0x2000049c

08001458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001460:	f7ff fff0 	bl	8001444 <HAL_GetTick>
 8001464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001470:	d005      	beq.n	800147e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_Delay+0x44>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800147e:	bf00      	nop
 8001480:	f7ff ffe0 	bl	8001444 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d8f7      	bhi.n	8001480 <HAL_Delay+0x28>
  {
  }
}
 8001490:	bf00      	nop
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	2000000c 	.word	0x2000000c

080014a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014bc:	4013      	ands	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014d2:	4a04      	ldr	r2, [pc, #16]	; (80014e4 <__NVIC_SetPriorityGrouping+0x44>)
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	60d3      	str	r3, [r2, #12]
}
 80014d8:	bf00      	nop
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	bc80      	pop	{r7}
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ec:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__NVIC_GetPriorityGrouping+0x18>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0a1b      	lsrs	r3, r3, #8
 80014f2:	f003 0307 	and.w	r3, r3, #7
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db0b      	blt.n	800152e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 021f 	and.w	r2, r3, #31
 800151c:	4906      	ldr	r1, [pc, #24]	; (8001538 <__NVIC_EnableIRQ+0x34>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	095b      	lsrs	r3, r3, #5
 8001524:	2001      	movs	r0, #1
 8001526:	fa00 f202 	lsl.w	r2, r0, r2
 800152a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	e000e100 	.word	0xe000e100

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	; (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	; (800158c <__NVIC_SetPriority+0x50>)
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	; 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	; 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001604:	d301      	bcc.n	800160a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001606:	2301      	movs	r3, #1
 8001608:	e00f      	b.n	800162a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <SysTick_Config+0x40>)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001612:	210f      	movs	r1, #15
 8001614:	f04f 30ff 	mov.w	r0, #4294967295
 8001618:	f7ff ff90 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <SysTick_Config+0x40>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001622:	4b04      	ldr	r3, [pc, #16]	; (8001634 <SysTick_Config+0x40>)
 8001624:	2207      	movs	r2, #7
 8001626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	e000e010 	.word	0xe000e010

08001638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ff2d 	bl	80014a0 <__NVIC_SetPriorityGrouping>
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
 800165a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff42 	bl	80014e8 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff90 	bl	8001590 <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5f 	bl	800153c <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff35 	bl	8001504 <__NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffa2 	bl	80015f4 <SysTick_Config>
 80016b0:	4603      	mov	r3, r0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e043      	b.n	800175a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b22      	ldr	r3, [pc, #136]	; (8001764 <HAL_DMA_Init+0xa8>)
 80016da:	4413      	add	r3, r2
 80016dc:	4a22      	ldr	r2, [pc, #136]	; (8001768 <HAL_DMA_Init+0xac>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	009a      	lsls	r2, r3, #2
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a1f      	ldr	r2, [pc, #124]	; (800176c <HAL_DMA_Init+0xb0>)
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2202      	movs	r2, #2
 80016f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001706:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800170a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	bffdfff8 	.word	0xbffdfff8
 8001768:	cccccccd 	.word	0xcccccccd
 800176c:	40020000 	.word	0x40020000

08001770 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b086      	sub	sp, #24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
 800177c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d101      	bne.n	8001790 <HAL_DMA_Start_IT+0x20>
 800178c:	2302      	movs	r3, #2
 800178e:	e04a      	b.n	8001826 <HAL_DMA_Start_IT+0xb6>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d13a      	bne.n	8001818 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	2202      	movs	r2, #2
 80017a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 f9e8 	bl	8001b9c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 020e 	orr.w	r2, r2, #14
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	e00f      	b.n	8001806 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0204 	bic.w	r2, r2, #4
 80017f4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 020a 	orr.w	r2, r2, #10
 8001804:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f042 0201 	orr.w	r2, r2, #1
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	e005      	b.n	8001824 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001820:	2302      	movs	r3, #2
 8001822:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001824:	7dfb      	ldrb	r3, [r7, #23]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800182e:	b480      	push	{r7}
 8001830:	b085      	sub	sp, #20
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001836:	2300      	movs	r3, #0
 8001838:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001840:	2b02      	cmp	r3, #2
 8001842:	d008      	beq.n	8001856 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2204      	movs	r2, #4
 8001848:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e020      	b.n	8001898 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 020e 	bic.w	r2, r2, #14
 8001864:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0201 	bic.w	r2, r2, #1
 8001874:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800187e:	2101      	movs	r1, #1
 8001880:	fa01 f202 	lsl.w	r2, r1, r2
 8001884:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001896:	7bfb      	ldrb	r3, [r7, #15]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d005      	beq.n	80018c6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2204      	movs	r2, #4
 80018be:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e051      	b.n	800196a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 020e 	bic.w	r2, r2, #14
 80018d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0201 	bic.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a22      	ldr	r2, [pc, #136]	; (8001974 <HAL_DMA_Abort_IT+0xd0>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d029      	beq.n	8001944 <HAL_DMA_Abort_IT+0xa0>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a20      	ldr	r2, [pc, #128]	; (8001978 <HAL_DMA_Abort_IT+0xd4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d022      	beq.n	8001940 <HAL_DMA_Abort_IT+0x9c>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a1f      	ldr	r2, [pc, #124]	; (800197c <HAL_DMA_Abort_IT+0xd8>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d01a      	beq.n	800193a <HAL_DMA_Abort_IT+0x96>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a1d      	ldr	r2, [pc, #116]	; (8001980 <HAL_DMA_Abort_IT+0xdc>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d012      	beq.n	8001934 <HAL_DMA_Abort_IT+0x90>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <HAL_DMA_Abort_IT+0xe0>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d00a      	beq.n	800192e <HAL_DMA_Abort_IT+0x8a>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a1a      	ldr	r2, [pc, #104]	; (8001988 <HAL_DMA_Abort_IT+0xe4>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d102      	bne.n	8001928 <HAL_DMA_Abort_IT+0x84>
 8001922:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001926:	e00e      	b.n	8001946 <HAL_DMA_Abort_IT+0xa2>
 8001928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800192c:	e00b      	b.n	8001946 <HAL_DMA_Abort_IT+0xa2>
 800192e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001932:	e008      	b.n	8001946 <HAL_DMA_Abort_IT+0xa2>
 8001934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001938:	e005      	b.n	8001946 <HAL_DMA_Abort_IT+0xa2>
 800193a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800193e:	e002      	b.n	8001946 <HAL_DMA_Abort_IT+0xa2>
 8001940:	2310      	movs	r3, #16
 8001942:	e000      	b.n	8001946 <HAL_DMA_Abort_IT+0xa2>
 8001944:	2301      	movs	r3, #1
 8001946:	4a11      	ldr	r2, [pc, #68]	; (800198c <HAL_DMA_Abort_IT+0xe8>)
 8001948:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2200      	movs	r2, #0
 8001956:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	4798      	blx	r3
    } 
  }
  return status;
 800196a:	7bfb      	ldrb	r3, [r7, #15]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40020008 	.word	0x40020008
 8001978:	4002001c 	.word	0x4002001c
 800197c:	40020030 	.word	0x40020030
 8001980:	40020044 	.word	0x40020044
 8001984:	40020058 	.word	0x40020058
 8001988:	4002006c 	.word	0x4002006c
 800198c:	40020000 	.word	0x40020000

08001990 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	2204      	movs	r2, #4
 80019ae:	409a      	lsls	r2, r3
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4013      	ands	r3, r2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d04f      	beq.n	8001a58 <HAL_DMA_IRQHandler+0xc8>
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d04a      	beq.n	8001a58 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0320 	and.w	r3, r3, #32
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d107      	bne.n	80019e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0204 	bic.w	r2, r2, #4
 80019de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a66      	ldr	r2, [pc, #408]	; (8001b80 <HAL_DMA_IRQHandler+0x1f0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d029      	beq.n	8001a3e <HAL_DMA_IRQHandler+0xae>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a65      	ldr	r2, [pc, #404]	; (8001b84 <HAL_DMA_IRQHandler+0x1f4>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d022      	beq.n	8001a3a <HAL_DMA_IRQHandler+0xaa>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a63      	ldr	r2, [pc, #396]	; (8001b88 <HAL_DMA_IRQHandler+0x1f8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d01a      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xa4>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a62      	ldr	r2, [pc, #392]	; (8001b8c <HAL_DMA_IRQHandler+0x1fc>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d012      	beq.n	8001a2e <HAL_DMA_IRQHandler+0x9e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a60      	ldr	r2, [pc, #384]	; (8001b90 <HAL_DMA_IRQHandler+0x200>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00a      	beq.n	8001a28 <HAL_DMA_IRQHandler+0x98>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a5f      	ldr	r2, [pc, #380]	; (8001b94 <HAL_DMA_IRQHandler+0x204>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d102      	bne.n	8001a22 <HAL_DMA_IRQHandler+0x92>
 8001a1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a20:	e00e      	b.n	8001a40 <HAL_DMA_IRQHandler+0xb0>
 8001a22:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a26:	e00b      	b.n	8001a40 <HAL_DMA_IRQHandler+0xb0>
 8001a28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001a2c:	e008      	b.n	8001a40 <HAL_DMA_IRQHandler+0xb0>
 8001a2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a32:	e005      	b.n	8001a40 <HAL_DMA_IRQHandler+0xb0>
 8001a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a38:	e002      	b.n	8001a40 <HAL_DMA_IRQHandler+0xb0>
 8001a3a:	2340      	movs	r3, #64	; 0x40
 8001a3c:	e000      	b.n	8001a40 <HAL_DMA_IRQHandler+0xb0>
 8001a3e:	2304      	movs	r3, #4
 8001a40:	4a55      	ldr	r2, [pc, #340]	; (8001b98 <HAL_DMA_IRQHandler+0x208>)
 8001a42:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 8094 	beq.w	8001b76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a56:	e08e      	b.n	8001b76 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4013      	ands	r3, r2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d056      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x186>
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d051      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10b      	bne.n	8001a98 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 020a 	bic.w	r2, r2, #10
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a38      	ldr	r2, [pc, #224]	; (8001b80 <HAL_DMA_IRQHandler+0x1f0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d029      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x166>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a37      	ldr	r2, [pc, #220]	; (8001b84 <HAL_DMA_IRQHandler+0x1f4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d022      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x162>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a35      	ldr	r2, [pc, #212]	; (8001b88 <HAL_DMA_IRQHandler+0x1f8>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d01a      	beq.n	8001aec <HAL_DMA_IRQHandler+0x15c>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a34      	ldr	r2, [pc, #208]	; (8001b8c <HAL_DMA_IRQHandler+0x1fc>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d012      	beq.n	8001ae6 <HAL_DMA_IRQHandler+0x156>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a32      	ldr	r2, [pc, #200]	; (8001b90 <HAL_DMA_IRQHandler+0x200>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00a      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x150>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a31      	ldr	r2, [pc, #196]	; (8001b94 <HAL_DMA_IRQHandler+0x204>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d102      	bne.n	8001ada <HAL_DMA_IRQHandler+0x14a>
 8001ad4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ad8:	e00e      	b.n	8001af8 <HAL_DMA_IRQHandler+0x168>
 8001ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ade:	e00b      	b.n	8001af8 <HAL_DMA_IRQHandler+0x168>
 8001ae0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ae4:	e008      	b.n	8001af8 <HAL_DMA_IRQHandler+0x168>
 8001ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aea:	e005      	b.n	8001af8 <HAL_DMA_IRQHandler+0x168>
 8001aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af0:	e002      	b.n	8001af8 <HAL_DMA_IRQHandler+0x168>
 8001af2:	2320      	movs	r3, #32
 8001af4:	e000      	b.n	8001af8 <HAL_DMA_IRQHandler+0x168>
 8001af6:	2302      	movs	r3, #2
 8001af8:	4a27      	ldr	r2, [pc, #156]	; (8001b98 <HAL_DMA_IRQHandler+0x208>)
 8001afa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d034      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b14:	e02f      	b.n	8001b76 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2208      	movs	r2, #8
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d028      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x1e8>
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d023      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 020e 	bic.w	r2, r2, #14
 8001b3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b48:	2101      	movs	r1, #1
 8001b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d004      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	4798      	blx	r3
    }
  }
  return;
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
}
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40020008 	.word	0x40020008
 8001b84:	4002001c 	.word	0x4002001c
 8001b88:	40020030 	.word	0x40020030
 8001b8c:	40020044 	.word	0x40020044
 8001b90:	40020058 	.word	0x40020058
 8001b94:	4002006c 	.word	0x4002006c
 8001b98:	40020000 	.word	0x40020000

08001b9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b10      	cmp	r3, #16
 8001bc8:	d108      	bne.n	8001bdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bda:	e007      	b.n	8001bec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	60da      	str	r2, [r3, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bc80      	pop	{r7}
 8001bf4:	4770      	bx	lr
	...

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b08b      	sub	sp, #44	; 0x2c
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0a:	e169      	b.n	8001ee0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	f040 8158 	bne.w	8001eda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4a9a      	ldr	r2, [pc, #616]	; (8001e98 <HAL_GPIO_Init+0x2a0>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d05e      	beq.n	8001cf2 <HAL_GPIO_Init+0xfa>
 8001c34:	4a98      	ldr	r2, [pc, #608]	; (8001e98 <HAL_GPIO_Init+0x2a0>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d875      	bhi.n	8001d26 <HAL_GPIO_Init+0x12e>
 8001c3a:	4a98      	ldr	r2, [pc, #608]	; (8001e9c <HAL_GPIO_Init+0x2a4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d058      	beq.n	8001cf2 <HAL_GPIO_Init+0xfa>
 8001c40:	4a96      	ldr	r2, [pc, #600]	; (8001e9c <HAL_GPIO_Init+0x2a4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d86f      	bhi.n	8001d26 <HAL_GPIO_Init+0x12e>
 8001c46:	4a96      	ldr	r2, [pc, #600]	; (8001ea0 <HAL_GPIO_Init+0x2a8>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d052      	beq.n	8001cf2 <HAL_GPIO_Init+0xfa>
 8001c4c:	4a94      	ldr	r2, [pc, #592]	; (8001ea0 <HAL_GPIO_Init+0x2a8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d869      	bhi.n	8001d26 <HAL_GPIO_Init+0x12e>
 8001c52:	4a94      	ldr	r2, [pc, #592]	; (8001ea4 <HAL_GPIO_Init+0x2ac>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d04c      	beq.n	8001cf2 <HAL_GPIO_Init+0xfa>
 8001c58:	4a92      	ldr	r2, [pc, #584]	; (8001ea4 <HAL_GPIO_Init+0x2ac>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d863      	bhi.n	8001d26 <HAL_GPIO_Init+0x12e>
 8001c5e:	4a92      	ldr	r2, [pc, #584]	; (8001ea8 <HAL_GPIO_Init+0x2b0>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d046      	beq.n	8001cf2 <HAL_GPIO_Init+0xfa>
 8001c64:	4a90      	ldr	r2, [pc, #576]	; (8001ea8 <HAL_GPIO_Init+0x2b0>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d85d      	bhi.n	8001d26 <HAL_GPIO_Init+0x12e>
 8001c6a:	2b12      	cmp	r3, #18
 8001c6c:	d82a      	bhi.n	8001cc4 <HAL_GPIO_Init+0xcc>
 8001c6e:	2b12      	cmp	r3, #18
 8001c70:	d859      	bhi.n	8001d26 <HAL_GPIO_Init+0x12e>
 8001c72:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <HAL_GPIO_Init+0x80>)
 8001c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c78:	08001cf3 	.word	0x08001cf3
 8001c7c:	08001ccd 	.word	0x08001ccd
 8001c80:	08001cdf 	.word	0x08001cdf
 8001c84:	08001d21 	.word	0x08001d21
 8001c88:	08001d27 	.word	0x08001d27
 8001c8c:	08001d27 	.word	0x08001d27
 8001c90:	08001d27 	.word	0x08001d27
 8001c94:	08001d27 	.word	0x08001d27
 8001c98:	08001d27 	.word	0x08001d27
 8001c9c:	08001d27 	.word	0x08001d27
 8001ca0:	08001d27 	.word	0x08001d27
 8001ca4:	08001d27 	.word	0x08001d27
 8001ca8:	08001d27 	.word	0x08001d27
 8001cac:	08001d27 	.word	0x08001d27
 8001cb0:	08001d27 	.word	0x08001d27
 8001cb4:	08001d27 	.word	0x08001d27
 8001cb8:	08001d27 	.word	0x08001d27
 8001cbc:	08001cd5 	.word	0x08001cd5
 8001cc0:	08001ce9 	.word	0x08001ce9
 8001cc4:	4a79      	ldr	r2, [pc, #484]	; (8001eac <HAL_GPIO_Init+0x2b4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d013      	beq.n	8001cf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cca:	e02c      	b.n	8001d26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	623b      	str	r3, [r7, #32]
          break;
 8001cd2:	e029      	b.n	8001d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	623b      	str	r3, [r7, #32]
          break;
 8001cdc:	e024      	b.n	8001d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	3308      	adds	r3, #8
 8001ce4:	623b      	str	r3, [r7, #32]
          break;
 8001ce6:	e01f      	b.n	8001d28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	330c      	adds	r3, #12
 8001cee:	623b      	str	r3, [r7, #32]
          break;
 8001cf0:	e01a      	b.n	8001d28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d102      	bne.n	8001d00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cfa:	2304      	movs	r3, #4
 8001cfc:	623b      	str	r3, [r7, #32]
          break;
 8001cfe:	e013      	b.n	8001d28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d105      	bne.n	8001d14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d08:	2308      	movs	r3, #8
 8001d0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	69fa      	ldr	r2, [r7, #28]
 8001d10:	611a      	str	r2, [r3, #16]
          break;
 8001d12:	e009      	b.n	8001d28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d14:	2308      	movs	r3, #8
 8001d16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	69fa      	ldr	r2, [r7, #28]
 8001d1c:	615a      	str	r2, [r3, #20]
          break;
 8001d1e:	e003      	b.n	8001d28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
          break;
 8001d24:	e000      	b.n	8001d28 <HAL_GPIO_Init+0x130>
          break;
 8001d26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2bff      	cmp	r3, #255	; 0xff
 8001d2c:	d801      	bhi.n	8001d32 <HAL_GPIO_Init+0x13a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	e001      	b.n	8001d36 <HAL_GPIO_Init+0x13e>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3304      	adds	r3, #4
 8001d36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	2bff      	cmp	r3, #255	; 0xff
 8001d3c:	d802      	bhi.n	8001d44 <HAL_GPIO_Init+0x14c>
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	e002      	b.n	8001d4a <HAL_GPIO_Init+0x152>
 8001d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d46:	3b08      	subs	r3, #8
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	210f      	movs	r1, #15
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	6a39      	ldr	r1, [r7, #32]
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	fa01 f303 	lsl.w	r3, r1, r3
 8001d64:	431a      	orrs	r2, r3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80b1 	beq.w	8001eda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d78:	4b4d      	ldr	r3, [pc, #308]	; (8001eb0 <HAL_GPIO_Init+0x2b8>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a4c      	ldr	r2, [pc, #304]	; (8001eb0 <HAL_GPIO_Init+0x2b8>)
 8001d7e:	f043 0301 	orr.w	r3, r3, #1
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b4a      	ldr	r3, [pc, #296]	; (8001eb0 <HAL_GPIO_Init+0x2b8>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d90:	4a48      	ldr	r2, [pc, #288]	; (8001eb4 <HAL_GPIO_Init+0x2bc>)
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43db      	mvns	r3, r3
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a40      	ldr	r2, [pc, #256]	; (8001eb8 <HAL_GPIO_Init+0x2c0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d013      	beq.n	8001de4 <HAL_GPIO_Init+0x1ec>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a3f      	ldr	r2, [pc, #252]	; (8001ebc <HAL_GPIO_Init+0x2c4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d00d      	beq.n	8001de0 <HAL_GPIO_Init+0x1e8>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a3e      	ldr	r2, [pc, #248]	; (8001ec0 <HAL_GPIO_Init+0x2c8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d007      	beq.n	8001ddc <HAL_GPIO_Init+0x1e4>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a3d      	ldr	r2, [pc, #244]	; (8001ec4 <HAL_GPIO_Init+0x2cc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d101      	bne.n	8001dd8 <HAL_GPIO_Init+0x1e0>
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e006      	b.n	8001de6 <HAL_GPIO_Init+0x1ee>
 8001dd8:	2304      	movs	r3, #4
 8001dda:	e004      	b.n	8001de6 <HAL_GPIO_Init+0x1ee>
 8001ddc:	2302      	movs	r3, #2
 8001dde:	e002      	b.n	8001de6 <HAL_GPIO_Init+0x1ee>
 8001de0:	2301      	movs	r3, #1
 8001de2:	e000      	b.n	8001de6 <HAL_GPIO_Init+0x1ee>
 8001de4:	2300      	movs	r3, #0
 8001de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001de8:	f002 0203 	and.w	r2, r2, #3
 8001dec:	0092      	lsls	r2, r2, #2
 8001dee:	4093      	lsls	r3, r2
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001df6:	492f      	ldr	r1, [pc, #188]	; (8001eb4 <HAL_GPIO_Init+0x2bc>)
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e10:	4b2d      	ldr	r3, [pc, #180]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	492c      	ldr	r1, [pc, #176]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	4928      	ldr	r1, [pc, #160]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e38:	4b23      	ldr	r3, [pc, #140]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	4922      	ldr	r1, [pc, #136]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
 8001e44:	e006      	b.n	8001e54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e46:	4b20      	ldr	r3, [pc, #128]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	491e      	ldr	r1, [pc, #120]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d006      	beq.n	8001e6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e62:	689a      	ldr	r2, [r3, #8]
 8001e64:	4918      	ldr	r1, [pc, #96]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]
 8001e6c:	e006      	b.n	8001e7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e6e:	4b16      	ldr	r3, [pc, #88]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e70:	689a      	ldr	r2, [r3, #8]
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	4914      	ldr	r1, [pc, #80]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d021      	beq.n	8001ecc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e88:	4b0f      	ldr	r3, [pc, #60]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <HAL_GPIO_Init+0x2d0>)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60cb      	str	r3, [r1, #12]
 8001e94:	e021      	b.n	8001eda <HAL_GPIO_Init+0x2e2>
 8001e96:	bf00      	nop
 8001e98:	10320000 	.word	0x10320000
 8001e9c:	10310000 	.word	0x10310000
 8001ea0:	10220000 	.word	0x10220000
 8001ea4:	10210000 	.word	0x10210000
 8001ea8:	10120000 	.word	0x10120000
 8001eac:	10110000 	.word	0x10110000
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40010000 	.word	0x40010000
 8001eb8:	40010800 	.word	0x40010800
 8001ebc:	40010c00 	.word	0x40010c00
 8001ec0:	40011000 	.word	0x40011000
 8001ec4:	40011400 	.word	0x40011400
 8001ec8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_GPIO_Init+0x304>)
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	4909      	ldr	r1, [pc, #36]	; (8001efc <HAL_GPIO_Init+0x304>)
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	3301      	adds	r3, #1
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f47f ae8e 	bne.w	8001c0c <HAL_GPIO_Init+0x14>
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	372c      	adds	r7, #44	; 0x2c
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr
 8001efc:	40010400 	.word	0x40010400

08001f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f1c:	e003      	b.n	8001f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	041a      	lsls	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	611a      	str	r2, [r3, #16]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bc80      	pop	{r7}
 8001f2e:	4770      	bx	lr

08001f30 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f42:	887a      	ldrh	r2, [r7, #2]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4013      	ands	r3, r2
 8001f48:	041a      	lsls	r2, r3, #16
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43d9      	mvns	r1, r3
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	400b      	ands	r3, r1
 8001f52:	431a      	orrs	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	611a      	str	r2, [r3, #16]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr
	...

08001f64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e12b      	b.n	80021ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d106      	bne.n	8001f90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe fe70 	bl	8000c70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2224      	movs	r2, #36	; 0x24
 8001f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fb6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fc8:	f000 fce4 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 8001fcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4a81      	ldr	r2, [pc, #516]	; (80021d8 <HAL_I2C_Init+0x274>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d807      	bhi.n	8001fe8 <HAL_I2C_Init+0x84>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4a80      	ldr	r2, [pc, #512]	; (80021dc <HAL_I2C_Init+0x278>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	bf94      	ite	ls
 8001fe0:	2301      	movls	r3, #1
 8001fe2:	2300      	movhi	r3, #0
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	e006      	b.n	8001ff6 <HAL_I2C_Init+0x92>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4a7d      	ldr	r2, [pc, #500]	; (80021e0 <HAL_I2C_Init+0x27c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	bf94      	ite	ls
 8001ff0:	2301      	movls	r3, #1
 8001ff2:	2300      	movhi	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e0e7      	b.n	80021ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	4a78      	ldr	r2, [pc, #480]	; (80021e4 <HAL_I2C_Init+0x280>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	0c9b      	lsrs	r3, r3, #18
 8002008:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	430a      	orrs	r2, r1
 800201c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	4a6a      	ldr	r2, [pc, #424]	; (80021d8 <HAL_I2C_Init+0x274>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d802      	bhi.n	8002038 <HAL_I2C_Init+0xd4>
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3301      	adds	r3, #1
 8002036:	e009      	b.n	800204c <HAL_I2C_Init+0xe8>
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800203e:	fb02 f303 	mul.w	r3, r2, r3
 8002042:	4a69      	ldr	r2, [pc, #420]	; (80021e8 <HAL_I2C_Init+0x284>)
 8002044:	fba2 2303 	umull	r2, r3, r2, r3
 8002048:	099b      	lsrs	r3, r3, #6
 800204a:	3301      	adds	r3, #1
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6812      	ldr	r2, [r2, #0]
 8002050:	430b      	orrs	r3, r1
 8002052:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800205e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	495c      	ldr	r1, [pc, #368]	; (80021d8 <HAL_I2C_Init+0x274>)
 8002068:	428b      	cmp	r3, r1
 800206a:	d819      	bhi.n	80020a0 <HAL_I2C_Init+0x13c>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	1e59      	subs	r1, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	fbb1 f3f3 	udiv	r3, r1, r3
 800207a:	1c59      	adds	r1, r3, #1
 800207c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002080:	400b      	ands	r3, r1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_I2C_Init+0x138>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1e59      	subs	r1, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fbb1 f3f3 	udiv	r3, r1, r3
 8002094:	3301      	adds	r3, #1
 8002096:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209a:	e051      	b.n	8002140 <HAL_I2C_Init+0x1dc>
 800209c:	2304      	movs	r3, #4
 800209e:	e04f      	b.n	8002140 <HAL_I2C_Init+0x1dc>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d111      	bne.n	80020cc <HAL_I2C_Init+0x168>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1e58      	subs	r0, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	440b      	add	r3, r1
 80020b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ba:	3301      	adds	r3, #1
 80020bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bf0c      	ite	eq
 80020c4:	2301      	moveq	r3, #1
 80020c6:	2300      	movne	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	e012      	b.n	80020f2 <HAL_I2C_Init+0x18e>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	1e58      	subs	r0, r3, #1
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6859      	ldr	r1, [r3, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	0099      	lsls	r1, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Init+0x196>
 80020f6:	2301      	movs	r3, #1
 80020f8:	e022      	b.n	8002140 <HAL_I2C_Init+0x1dc>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10e      	bne.n	8002120 <HAL_I2C_Init+0x1bc>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	1e58      	subs	r0, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6859      	ldr	r1, [r3, #4]
 800210a:	460b      	mov	r3, r1
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	440b      	add	r3, r1
 8002110:	fbb0 f3f3 	udiv	r3, r0, r3
 8002114:	3301      	adds	r3, #1
 8002116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800211a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800211e:	e00f      	b.n	8002140 <HAL_I2C_Init+0x1dc>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e58      	subs	r0, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	0099      	lsls	r1, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	fbb0 f3f3 	udiv	r3, r0, r3
 8002136:	3301      	adds	r3, #1
 8002138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800213c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	6809      	ldr	r1, [r1, #0]
 8002144:	4313      	orrs	r3, r2
 8002146:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69da      	ldr	r2, [r3, #28]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800216e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6911      	ldr	r1, [r2, #16]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68d2      	ldr	r2, [r2, #12]
 800217a:	4311      	orrs	r1, r2
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	430b      	orrs	r3, r1
 8002182:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695a      	ldr	r2, [r3, #20]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	000186a0 	.word	0x000186a0
 80021dc:	001e847f 	.word	0x001e847f
 80021e0:	003d08ff 	.word	0x003d08ff
 80021e4:	431bde83 	.word	0x431bde83
 80021e8:	10624dd3 	.word	0x10624dd3

080021ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e272      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	f000 8087 	beq.w	800231a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800220c:	4b92      	ldr	r3, [pc, #584]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 030c 	and.w	r3, r3, #12
 8002214:	2b04      	cmp	r3, #4
 8002216:	d00c      	beq.n	8002232 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002218:	4b8f      	ldr	r3, [pc, #572]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b08      	cmp	r3, #8
 8002222:	d112      	bne.n	800224a <HAL_RCC_OscConfig+0x5e>
 8002224:	4b8c      	ldr	r3, [pc, #560]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002230:	d10b      	bne.n	800224a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002232:	4b89      	ldr	r3, [pc, #548]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d06c      	beq.n	8002318 <HAL_RCC_OscConfig+0x12c>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d168      	bne.n	8002318 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e24c      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002252:	d106      	bne.n	8002262 <HAL_RCC_OscConfig+0x76>
 8002254:	4b80      	ldr	r3, [pc, #512]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a7f      	ldr	r2, [pc, #508]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800225a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	e02e      	b.n	80022c0 <HAL_RCC_OscConfig+0xd4>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10c      	bne.n	8002284 <HAL_RCC_OscConfig+0x98>
 800226a:	4b7b      	ldr	r3, [pc, #492]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a7a      	ldr	r2, [pc, #488]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002270:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	4b78      	ldr	r3, [pc, #480]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a77      	ldr	r2, [pc, #476]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800227c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	e01d      	b.n	80022c0 <HAL_RCC_OscConfig+0xd4>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800228c:	d10c      	bne.n	80022a8 <HAL_RCC_OscConfig+0xbc>
 800228e:	4b72      	ldr	r3, [pc, #456]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a71      	ldr	r2, [pc, #452]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	4b6f      	ldr	r3, [pc, #444]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a6e      	ldr	r2, [pc, #440]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	e00b      	b.n	80022c0 <HAL_RCC_OscConfig+0xd4>
 80022a8:	4b6b      	ldr	r3, [pc, #428]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a6a      	ldr	r2, [pc, #424]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b2:	6013      	str	r3, [r2, #0]
 80022b4:	4b68      	ldr	r3, [pc, #416]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a67      	ldr	r2, [pc, #412]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d013      	beq.n	80022f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7ff f8bc 	bl	8001444 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7ff f8b8 	bl	8001444 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e200      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b5d      	ldr	r3, [pc, #372]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0xe4>
 80022ee:	e014      	b.n	800231a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7ff f8a8 	bl	8001444 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f8:	f7ff f8a4 	bl	8001444 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b64      	cmp	r3, #100	; 0x64
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e1ec      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800230a:	4b53      	ldr	r3, [pc, #332]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x10c>
 8002316:	e000      	b.n	800231a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002318:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d063      	beq.n	80023ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002326:	4b4c      	ldr	r3, [pc, #304]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00b      	beq.n	800234a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002332:	4b49      	ldr	r3, [pc, #292]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b08      	cmp	r3, #8
 800233c:	d11c      	bne.n	8002378 <HAL_RCC_OscConfig+0x18c>
 800233e:	4b46      	ldr	r3, [pc, #280]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d116      	bne.n	8002378 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234a:	4b43      	ldr	r3, [pc, #268]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <HAL_RCC_OscConfig+0x176>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d001      	beq.n	8002362 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e1c0      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002362:	4b3d      	ldr	r3, [pc, #244]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4939      	ldr	r1, [pc, #228]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002376:	e03a      	b.n	80023ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d020      	beq.n	80023c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002380:	4b36      	ldr	r3, [pc, #216]	; (800245c <HAL_RCC_OscConfig+0x270>)
 8002382:	2201      	movs	r2, #1
 8002384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002386:	f7ff f85d 	bl	8001444 <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	e008      	b.n	80023a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800238e:	f7ff f859 	bl	8001444 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d901      	bls.n	80023a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e1a1      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a0:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d0f0      	beq.n	800238e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ac:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4927      	ldr	r1, [pc, #156]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	600b      	str	r3, [r1, #0]
 80023c0:	e015      	b.n	80023ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023c2:	4b26      	ldr	r3, [pc, #152]	; (800245c <HAL_RCC_OscConfig+0x270>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7ff f83c 	bl	8001444 <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d0:	f7ff f838 	bl	8001444 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e180      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d03a      	beq.n	8002470 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d019      	beq.n	8002436 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002402:	4b17      	ldr	r3, [pc, #92]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002404:	2201      	movs	r2, #1
 8002406:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002408:	f7ff f81c 	bl	8001444 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002410:	f7ff f818 	bl	8001444 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e160      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002422:	4b0d      	ldr	r3, [pc, #52]	; (8002458 <HAL_RCC_OscConfig+0x26c>)
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800242e:	2001      	movs	r0, #1
 8002430:	f000 fad8 	bl	80029e4 <RCC_Delay>
 8002434:	e01c      	b.n	8002470 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <HAL_RCC_OscConfig+0x274>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243c:	f7ff f802 	bl	8001444 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002442:	e00f      	b.n	8002464 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002444:	f7fe fffe 	bl	8001444 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d908      	bls.n	8002464 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e146      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	42420000 	.word	0x42420000
 8002460:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002464:	4b92      	ldr	r3, [pc, #584]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1e9      	bne.n	8002444 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 80a6 	beq.w	80025ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002482:	4b8b      	ldr	r3, [pc, #556]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	69db      	ldr	r3, [r3, #28]
 8002486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10d      	bne.n	80024aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	4b88      	ldr	r3, [pc, #544]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	4a87      	ldr	r2, [pc, #540]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002498:	61d3      	str	r3, [r2, #28]
 800249a:	4b85      	ldr	r3, [pc, #532]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a6:	2301      	movs	r3, #1
 80024a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024aa:	4b82      	ldr	r3, [pc, #520]	; (80026b4 <HAL_RCC_OscConfig+0x4c8>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d118      	bne.n	80024e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024b6:	4b7f      	ldr	r3, [pc, #508]	; (80026b4 <HAL_RCC_OscConfig+0x4c8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a7e      	ldr	r2, [pc, #504]	; (80026b4 <HAL_RCC_OscConfig+0x4c8>)
 80024bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024c2:	f7fe ffbf 	bl	8001444 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ca:	f7fe ffbb 	bl	8001444 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b64      	cmp	r3, #100	; 0x64
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e103      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024dc:	4b75      	ldr	r3, [pc, #468]	; (80026b4 <HAL_RCC_OscConfig+0x4c8>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0f0      	beq.n	80024ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d106      	bne.n	80024fe <HAL_RCC_OscConfig+0x312>
 80024f0:	4b6f      	ldr	r3, [pc, #444]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4a6e      	ldr	r2, [pc, #440]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	f043 0301 	orr.w	r3, r3, #1
 80024fa:	6213      	str	r3, [r2, #32]
 80024fc:	e02d      	b.n	800255a <HAL_RCC_OscConfig+0x36e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10c      	bne.n	8002520 <HAL_RCC_OscConfig+0x334>
 8002506:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	4a69      	ldr	r2, [pc, #420]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	f023 0301 	bic.w	r3, r3, #1
 8002510:	6213      	str	r3, [r2, #32]
 8002512:	4b67      	ldr	r3, [pc, #412]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a66      	ldr	r2, [pc, #408]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 0304 	bic.w	r3, r3, #4
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	e01c      	b.n	800255a <HAL_RCC_OscConfig+0x36e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	2b05      	cmp	r3, #5
 8002526:	d10c      	bne.n	8002542 <HAL_RCC_OscConfig+0x356>
 8002528:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	4a60      	ldr	r2, [pc, #384]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	f043 0304 	orr.w	r3, r3, #4
 8002532:	6213      	str	r3, [r2, #32]
 8002534:	4b5e      	ldr	r3, [pc, #376]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a5d      	ldr	r2, [pc, #372]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800253a:	f043 0301 	orr.w	r3, r3, #1
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	e00b      	b.n	800255a <HAL_RCC_OscConfig+0x36e>
 8002542:	4b5b      	ldr	r3, [pc, #364]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	6a1b      	ldr	r3, [r3, #32]
 8002546:	4a5a      	ldr	r2, [pc, #360]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6213      	str	r3, [r2, #32]
 800254e:	4b58      	ldr	r3, [pc, #352]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a57      	ldr	r2, [pc, #348]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 0304 	bic.w	r3, r3, #4
 8002558:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d015      	beq.n	800258e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002562:	f7fe ff6f 	bl	8001444 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002568:	e00a      	b.n	8002580 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7fe ff6b 	bl	8001444 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f241 3288 	movw	r2, #5000	; 0x1388
 8002578:	4293      	cmp	r3, r2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e0b1      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002580:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0ee      	beq.n	800256a <HAL_RCC_OscConfig+0x37e>
 800258c:	e014      	b.n	80025b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800258e:	f7fe ff59 	bl	8001444 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002594:	e00a      	b.n	80025ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002596:	f7fe ff55 	bl	8001444 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e09b      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ac:	4b40      	ldr	r3, [pc, #256]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1ee      	bne.n	8002596 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d105      	bne.n	80025ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025be:	4b3c      	ldr	r3, [pc, #240]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	4a3b      	ldr	r2, [pc, #236]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 8087 	beq.w	80026e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d4:	4b36      	ldr	r3, [pc, #216]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 030c 	and.w	r3, r3, #12
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d061      	beq.n	80026a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	69db      	ldr	r3, [r3, #28]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d146      	bne.n	8002676 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e8:	4b33      	ldr	r3, [pc, #204]	; (80026b8 <HAL_RCC_OscConfig+0x4cc>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe ff29 	bl	8001444 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f6:	f7fe ff25 	bl	8001444 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e06d      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002608:	4b29      	ldr	r3, [pc, #164]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1f0      	bne.n	80025f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261c:	d108      	bne.n	8002630 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800261e:	4b24      	ldr	r3, [pc, #144]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	4921      	ldr	r1, [pc, #132]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002630:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a19      	ldr	r1, [r3, #32]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	430b      	orrs	r3, r1
 8002642:	491b      	ldr	r1, [pc, #108]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002648:	4b1b      	ldr	r3, [pc, #108]	; (80026b8 <HAL_RCC_OscConfig+0x4cc>)
 800264a:	2201      	movs	r2, #1
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264e:	f7fe fef9 	bl	8001444 <HAL_GetTick>
 8002652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002656:	f7fe fef5 	bl	8001444 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e03d      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002668:	4b11      	ldr	r3, [pc, #68]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d0f0      	beq.n	8002656 <HAL_RCC_OscConfig+0x46a>
 8002674:	e035      	b.n	80026e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <HAL_RCC_OscConfig+0x4cc>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe fee2 	bl	8001444 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fede 	bl	8001444 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e026      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002696:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x498>
 80026a2:	e01e      	b.n	80026e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d107      	bne.n	80026bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	e019      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
 80026b0:	40021000 	.word	0x40021000
 80026b4:	40007000 	.word	0x40007000
 80026b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x500>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000

080026f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0d0      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b6a      	ldr	r3, [pc, #424]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d910      	bls.n	8002734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b67      	ldr	r3, [pc, #412]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 0207 	bic.w	r2, r3, #7
 800271a:	4965      	ldr	r1, [pc, #404]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b63      	ldr	r3, [pc, #396]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0b8      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d020      	beq.n	8002782 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d005      	beq.n	8002758 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800274c:	4b59      	ldr	r3, [pc, #356]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4a58      	ldr	r2, [pc, #352]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002756:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002764:	4b53      	ldr	r3, [pc, #332]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a52      	ldr	r2, [pc, #328]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800276e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002770:	4b50      	ldr	r3, [pc, #320]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	494d      	ldr	r1, [pc, #308]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	4313      	orrs	r3, r2
 8002780:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d040      	beq.n	8002810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d107      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b47      	ldr	r3, [pc, #284]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d115      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e07f      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ae:	4b41      	ldr	r3, [pc, #260]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e073      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027be:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e06b      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ce:	4b39      	ldr	r3, [pc, #228]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	4936      	ldr	r1, [pc, #216]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e0:	f7fe fe30 	bl	8001444 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	e00a      	b.n	80027fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e8:	f7fe fe2c 	bl	8001444 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e053      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 020c 	and.w	r2, r3, #12
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d1eb      	bne.n	80027e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002810:	4b27      	ldr	r3, [pc, #156]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d210      	bcs.n	8002840 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 0207 	bic.w	r2, r3, #7
 8002826:	4922      	ldr	r1, [pc, #136]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b20      	ldr	r3, [pc, #128]	; (80028b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e032      	b.n	80028a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800284c:	4b19      	ldr	r3, [pc, #100]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	4916      	ldr	r1, [pc, #88]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	4313      	orrs	r3, r2
 800285c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0308 	and.w	r3, r3, #8
 8002866:	2b00      	cmp	r3, #0
 8002868:	d009      	beq.n	800287e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800286a:	4b12      	ldr	r3, [pc, #72]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	490e      	ldr	r1, [pc, #56]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800287e:	f000 f821 	bl	80028c4 <HAL_RCC_GetSysClockFreq>
 8002882:	4602      	mov	r2, r0
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	490a      	ldr	r1, [pc, #40]	; (80028b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002890:	5ccb      	ldrb	r3, [r1, r3]
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <HAL_RCC_ClockConfig+0x1cc>)
 8002898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800289a:	4b09      	ldr	r3, [pc, #36]	; (80028c0 <HAL_RCC_ClockConfig+0x1d0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fe fd8e 	bl	80013c0 <HAL_InitTick>

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	40022000 	.word	0x40022000
 80028b4:	40021000 	.word	0x40021000
 80028b8:	080058a8 	.word	0x080058a8
 80028bc:	20000004 	.word	0x20000004
 80028c0:	20000008 	.word	0x20000008

080028c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028c4:	b490      	push	{r4, r7}
 80028c6:	b08a      	sub	sp, #40	; 0x28
 80028c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028ca:	4b29      	ldr	r3, [pc, #164]	; (8002970 <HAL_RCC_GetSysClockFreq+0xac>)
 80028cc:	1d3c      	adds	r4, r7, #4
 80028ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028d4:	f240 2301 	movw	r3, #513	; 0x201
 80028d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	2300      	movs	r3, #0
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	2300      	movs	r3, #0
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ee:	4b21      	ldr	r3, [pc, #132]	; (8002974 <HAL_RCC_GetSysClockFreq+0xb0>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d002      	beq.n	8002904 <HAL_RCC_GetSysClockFreq+0x40>
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d003      	beq.n	800290a <HAL_RCC_GetSysClockFreq+0x46>
 8002902:	e02b      	b.n	800295c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002904:	4b1c      	ldr	r3, [pc, #112]	; (8002978 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002906:	623b      	str	r3, [r7, #32]
      break;
 8002908:	e02b      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	0c9b      	lsrs	r3, r3, #18
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	3328      	adds	r3, #40	; 0x28
 8002914:	443b      	add	r3, r7
 8002916:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800291a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d012      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002926:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	0c5b      	lsrs	r3, r3, #17
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	3328      	adds	r3, #40	; 0x28
 8002932:	443b      	add	r3, r7
 8002934:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002938:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	4a0e      	ldr	r2, [pc, #56]	; (8002978 <HAL_RCC_GetSysClockFreq+0xb4>)
 800293e:	fb03 f202 	mul.w	r2, r3, r2
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	627b      	str	r3, [r7, #36]	; 0x24
 800294a:	e004      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	4a0b      	ldr	r2, [pc, #44]	; (800297c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002950:	fb02 f303 	mul.w	r3, r2, r3
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	623b      	str	r3, [r7, #32]
      break;
 800295a:	e002      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <HAL_RCC_GetSysClockFreq+0xb4>)
 800295e:	623b      	str	r3, [r7, #32]
      break;
 8002960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002962:	6a3b      	ldr	r3, [r7, #32]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3728      	adds	r7, #40	; 0x28
 8002968:	46bd      	mov	sp, r7
 800296a:	bc90      	pop	{r4, r7}
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	08005884 	.word	0x08005884
 8002974:	40021000 	.word	0x40021000
 8002978:	007a1200 	.word	0x007a1200
 800297c:	003d0900 	.word	0x003d0900

08002980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002984:	4b02      	ldr	r3, [pc, #8]	; (8002990 <HAL_RCC_GetHCLKFreq+0x10>)
 8002986:	681b      	ldr	r3, [r3, #0]
}
 8002988:	4618      	mov	r0, r3
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	20000004 	.word	0x20000004

08002994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002998:	f7ff fff2 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 800299c:	4602      	mov	r2, r0
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	0a1b      	lsrs	r3, r3, #8
 80029a4:	f003 0307 	and.w	r3, r3, #7
 80029a8:	4903      	ldr	r1, [pc, #12]	; (80029b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029aa:	5ccb      	ldrb	r3, [r1, r3]
 80029ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40021000 	.word	0x40021000
 80029b8:	080058b8 	.word	0x080058b8

080029bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029c0:	f7ff ffde 	bl	8002980 <HAL_RCC_GetHCLKFreq>
 80029c4:	4602      	mov	r2, r0
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	0adb      	lsrs	r3, r3, #11
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	4903      	ldr	r1, [pc, #12]	; (80029e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029d2:	5ccb      	ldrb	r3, [r1, r3]
 80029d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	080058b8 	.word	0x080058b8

080029e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <RCC_Delay+0x34>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <RCC_Delay+0x38>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0a5b      	lsrs	r3, r3, #9
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a00:	bf00      	nop
  }
  while (Delay --);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1e5a      	subs	r2, r3, #1
 8002a06:	60fa      	str	r2, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f9      	bne.n	8002a00 <RCC_Delay+0x1c>
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	20000004 	.word	0x20000004
 8002a1c:	10624dd3 	.word	0x10624dd3

08002a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e041      	b.n	8002ab6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7fe f962 	bl	8000d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f000 fd62 	bl	8003528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d001      	beq.n	8002ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e03a      	b.n	8002b4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <HAL_TIM_Base_Start_IT+0x98>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00e      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0x58>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d009      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0x58>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <HAL_TIM_Base_Start_IT+0x9c>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d004      	beq.n	8002b18 <HAL_TIM_Base_Start_IT+0x58>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a13      	ldr	r2, [pc, #76]	; (8002b60 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d111      	bne.n	8002b3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	d010      	beq.n	8002b4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3a:	e007      	b.n	8002b4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3714      	adds	r7, #20
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bc80      	pop	{r7}
 8002b56:	4770      	bx	lr
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40000800 	.word	0x40000800

08002b64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e041      	b.n	8002bfa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d106      	bne.n	8002b90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f839 	bl	8002c02 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2202      	movs	r2, #2
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4610      	mov	r0, r2
 8002ba4:	f000 fcc0 	bl	8003528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3708      	adds	r7, #8
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_TIM_PWM_Start+0x24>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	e022      	b.n	8002c7e <HAL_TIM_PWM_Start+0x6a>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d109      	bne.n	8002c52 <HAL_TIM_PWM_Start+0x3e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	bf14      	ite	ne
 8002c4a:	2301      	movne	r3, #1
 8002c4c:	2300      	moveq	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	e015      	b.n	8002c7e <HAL_TIM_PWM_Start+0x6a>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d109      	bne.n	8002c6c <HAL_TIM_PWM_Start+0x58>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	bf14      	ite	ne
 8002c64:	2301      	movne	r3, #1
 8002c66:	2300      	moveq	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	e008      	b.n	8002c7e <HAL_TIM_PWM_Start+0x6a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	bf14      	ite	ne
 8002c78:	2301      	movne	r3, #1
 8002c7a:	2300      	moveq	r3, #0
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e05e      	b.n	8002d44 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d104      	bne.n	8002c96 <HAL_TIM_PWM_Start+0x82>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c94:	e013      	b.n	8002cbe <HAL_TIM_PWM_Start+0xaa>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d104      	bne.n	8002ca6 <HAL_TIM_PWM_Start+0x92>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2202      	movs	r2, #2
 8002ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca4:	e00b      	b.n	8002cbe <HAL_TIM_PWM_Start+0xaa>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d104      	bne.n	8002cb6 <HAL_TIM_PWM_Start+0xa2>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb4:	e003      	b.n	8002cbe <HAL_TIM_PWM_Start+0xaa>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2202      	movs	r2, #2
 8002cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	6839      	ldr	r1, [r7, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f000 feae 	bl	8003a28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a1e      	ldr	r2, [pc, #120]	; (8002d4c <HAL_TIM_PWM_Start+0x138>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d107      	bne.n	8002ce6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ce4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a18      	ldr	r2, [pc, #96]	; (8002d4c <HAL_TIM_PWM_Start+0x138>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00e      	beq.n	8002d0e <HAL_TIM_PWM_Start+0xfa>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d009      	beq.n	8002d0e <HAL_TIM_PWM_Start+0xfa>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a14      	ldr	r2, [pc, #80]	; (8002d50 <HAL_TIM_PWM_Start+0x13c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d004      	beq.n	8002d0e <HAL_TIM_PWM_Start+0xfa>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <HAL_TIM_PWM_Start+0x140>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d111      	bne.n	8002d32 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b06      	cmp	r3, #6
 8002d1e:	d010      	beq.n	8002d42 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0201 	orr.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d30:	e007      	b.n	8002d42 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f042 0201 	orr.w	r2, r2, #1
 8002d40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40012c00 	.word	0x40012c00
 8002d50:	40000400 	.word	0x40000400
 8002d54:	40000800 	.word	0x40000800

08002d58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e093      	b.n	8002e94 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d106      	bne.n	8002d86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f7fd ffff 	bl	8000d84 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2202      	movs	r2, #2
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d9c:	f023 0307 	bic.w	r3, r3, #7
 8002da0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	3304      	adds	r3, #4
 8002daa:	4619      	mov	r1, r3
 8002dac:	4610      	mov	r0, r2
 8002dae:	f000 fbbb 	bl	8003528 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dda:	f023 0303 	bic.w	r3, r3, #3
 8002dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	4313      	orrs	r3, r2
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002df8:	f023 030c 	bic.w	r3, r3, #12
 8002dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	021b      	lsls	r3, r3, #8
 8002e14:	4313      	orrs	r3, r2
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	011a      	lsls	r2, r3, #4
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	031b      	lsls	r3, r3, #12
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002e36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	4313      	orrs	r3, r2
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	693a      	ldr	r2, [r7, #16]
 8002e58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002eac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002eb4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ebc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002ec4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d110      	bne.n	8002eee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d102      	bne.n	8002ed8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002ed2:	7b7b      	ldrb	r3, [r7, #13]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d001      	beq.n	8002edc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e069      	b.n	8002fb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eec:	e031      	b.n	8002f52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d110      	bne.n	8002f16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ef4:	7bbb      	ldrb	r3, [r7, #14]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d102      	bne.n	8002f00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002efa:	7b3b      	ldrb	r3, [r7, #12]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d001      	beq.n	8002f04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e055      	b.n	8002fb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f14:	e01d      	b.n	8002f52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d108      	bne.n	8002f2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f1c:	7bbb      	ldrb	r3, [r7, #14]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d105      	bne.n	8002f2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f22:	7b7b      	ldrb	r3, [r7, #13]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d102      	bne.n	8002f2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f28:	7b3b      	ldrb	r3, [r7, #12]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d001      	beq.n	8002f32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e03e      	b.n	8002fb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2202      	movs	r2, #2
 8002f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2202      	movs	r2, #2
 8002f3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2202      	movs	r2, #2
 8002f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <HAL_TIM_Encoder_Start+0xc4>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d008      	beq.n	8002f70 <HAL_TIM_Encoder_Start+0xd4>
 8002f5e:	e00f      	b.n	8002f80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2201      	movs	r2, #1
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fd5d 	bl	8003a28 <TIM_CCxChannelCmd>
      break;
 8002f6e:	e016      	b.n	8002f9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2201      	movs	r2, #1
 8002f76:	2104      	movs	r1, #4
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fd55 	bl	8003a28 <TIM_CCxChannelCmd>
      break;
 8002f7e:	e00e      	b.n	8002f9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2201      	movs	r2, #1
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 fd4d 	bl	8003a28 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2201      	movs	r2, #1
 8002f94:	2104      	movs	r1, #4
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fd46 	bl	8003a28 <TIM_CCxChannelCmd>
      break;
 8002f9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d122      	bne.n	8003014 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d11b      	bne.n	8003014 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f06f 0202 	mvn.w	r2, #2
 8002fe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d003      	beq.n	8003002 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 fa78 	bl	80034f0 <HAL_TIM_IC_CaptureCallback>
 8003000:	e005      	b.n	800300e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa6b 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fa7a 	bl	8003502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b04      	cmp	r3, #4
 8003020:	d122      	bne.n	8003068 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b04      	cmp	r3, #4
 800302e:	d11b      	bne.n	8003068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0204 	mvn.w	r2, #4
 8003038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fa4e 	bl	80034f0 <HAL_TIM_IC_CaptureCallback>
 8003054:	e005      	b.n	8003062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fa41 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fa50 	bl	8003502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b08      	cmp	r3, #8
 8003074:	d122      	bne.n	80030bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b08      	cmp	r3, #8
 8003082:	d11b      	bne.n	80030bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0208 	mvn.w	r2, #8
 800308c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2204      	movs	r2, #4
 8003092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fa24 	bl	80034f0 <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fa17 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fa26 	bl	8003502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d122      	bne.n	8003110 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d11b      	bne.n	8003110 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0210 	mvn.w	r2, #16
 80030e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2208      	movs	r2, #8
 80030e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f9fa 	bl	80034f0 <HAL_TIM_IC_CaptureCallback>
 80030fc:	e005      	b.n	800310a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f9ed 	bl	80034de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f9fc 	bl	8003502 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d10e      	bne.n	800313c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d107      	bne.n	800313c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f06f 0201 	mvn.w	r2, #1
 8003134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 f9c8 	bl	80034cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b80      	cmp	r3, #128	; 0x80
 8003148:	d10e      	bne.n	8003168 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003154:	2b80      	cmp	r3, #128	; 0x80
 8003156:	d107      	bne.n	8003168 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fceb 	bl	8003b3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003172:	2b40      	cmp	r3, #64	; 0x40
 8003174:	d10e      	bne.n	8003194 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	d107      	bne.n	8003194 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800318c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f9c0 	bl	8003514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0320 	and.w	r3, r3, #32
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d10e      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d107      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0220 	mvn.w	r2, #32
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 fcb6 	bl	8003b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031de:	2302      	movs	r3, #2
 80031e0:	e0ac      	b.n	800333c <HAL_TIM_PWM_ConfigChannel+0x174>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b0c      	cmp	r3, #12
 80031ee:	f200 809f 	bhi.w	8003330 <HAL_TIM_PWM_ConfigChannel+0x168>
 80031f2:	a201      	add	r2, pc, #4	; (adr r2, 80031f8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80031f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f8:	0800322d 	.word	0x0800322d
 80031fc:	08003331 	.word	0x08003331
 8003200:	08003331 	.word	0x08003331
 8003204:	08003331 	.word	0x08003331
 8003208:	0800326d 	.word	0x0800326d
 800320c:	08003331 	.word	0x08003331
 8003210:	08003331 	.word	0x08003331
 8003214:	08003331 	.word	0x08003331
 8003218:	080032af 	.word	0x080032af
 800321c:	08003331 	.word	0x08003331
 8003220:	08003331 	.word	0x08003331
 8003224:	08003331 	.word	0x08003331
 8003228:	080032ef 	.word	0x080032ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	4618      	mov	r0, r3
 8003234:	f000 f9da 	bl	80035ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	699a      	ldr	r2, [r3, #24]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0208 	orr.w	r2, r2, #8
 8003246:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	699a      	ldr	r2, [r3, #24]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 0204 	bic.w	r2, r2, #4
 8003256:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6999      	ldr	r1, [r3, #24]
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	691a      	ldr	r2, [r3, #16]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	619a      	str	r2, [r3, #24]
      break;
 800326a:	e062      	b.n	8003332 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fa20 	bl	80036b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6999      	ldr	r1, [r3, #24]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	021a      	lsls	r2, r3, #8
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	619a      	str	r2, [r3, #24]
      break;
 80032ac:	e041      	b.n	8003332 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	68b9      	ldr	r1, [r7, #8]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f000 fa69 	bl	800378c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69da      	ldr	r2, [r3, #28]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 0208 	orr.w	r2, r2, #8
 80032c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	69da      	ldr	r2, [r3, #28]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0204 	bic.w	r2, r2, #4
 80032d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69d9      	ldr	r1, [r3, #28]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	691a      	ldr	r2, [r3, #16]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	61da      	str	r2, [r3, #28]
      break;
 80032ec:	e021      	b.n	8003332 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fab3 	bl	8003860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69da      	ldr	r2, [r3, #28]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69da      	ldr	r2, [r3, #28]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69d9      	ldr	r1, [r3, #28]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	021a      	lsls	r2, r3, #8
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	61da      	str	r2, [r3, #28]
      break;
 800332e:	e000      	b.n	8003332 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003330:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d101      	bne.n	800335c <HAL_TIM_ConfigClockSource+0x18>
 8003358:	2302      	movs	r3, #2
 800335a:	e0b3      	b.n	80034c4 <HAL_TIM_ConfigClockSource+0x180>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800337a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003382:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003394:	d03e      	beq.n	8003414 <HAL_TIM_ConfigClockSource+0xd0>
 8003396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800339a:	f200 8087 	bhi.w	80034ac <HAL_TIM_ConfigClockSource+0x168>
 800339e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033a2:	f000 8085 	beq.w	80034b0 <HAL_TIM_ConfigClockSource+0x16c>
 80033a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033aa:	d87f      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x168>
 80033ac:	2b70      	cmp	r3, #112	; 0x70
 80033ae:	d01a      	beq.n	80033e6 <HAL_TIM_ConfigClockSource+0xa2>
 80033b0:	2b70      	cmp	r3, #112	; 0x70
 80033b2:	d87b      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x168>
 80033b4:	2b60      	cmp	r3, #96	; 0x60
 80033b6:	d050      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x116>
 80033b8:	2b60      	cmp	r3, #96	; 0x60
 80033ba:	d877      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x168>
 80033bc:	2b50      	cmp	r3, #80	; 0x50
 80033be:	d03c      	beq.n	800343a <HAL_TIM_ConfigClockSource+0xf6>
 80033c0:	2b50      	cmp	r3, #80	; 0x50
 80033c2:	d873      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x168>
 80033c4:	2b40      	cmp	r3, #64	; 0x40
 80033c6:	d058      	beq.n	800347a <HAL_TIM_ConfigClockSource+0x136>
 80033c8:	2b40      	cmp	r3, #64	; 0x40
 80033ca:	d86f      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x168>
 80033cc:	2b30      	cmp	r3, #48	; 0x30
 80033ce:	d064      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x156>
 80033d0:	2b30      	cmp	r3, #48	; 0x30
 80033d2:	d86b      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x168>
 80033d4:	2b20      	cmp	r3, #32
 80033d6:	d060      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x156>
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d867      	bhi.n	80034ac <HAL_TIM_ConfigClockSource+0x168>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d05c      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x156>
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d05a      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80033e4:	e062      	b.n	80034ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6818      	ldr	r0, [r3, #0]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	6899      	ldr	r1, [r3, #8]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68db      	ldr	r3, [r3, #12]
 80033f6:	f000 faf8 	bl	80039ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003408:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	609a      	str	r2, [r3, #8]
      break;
 8003412:	e04e      	b.n	80034b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	6899      	ldr	r1, [r3, #8]
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f000 fae1 	bl	80039ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003436:	609a      	str	r2, [r3, #8]
      break;
 8003438:	e03b      	b.n	80034b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6859      	ldr	r1, [r3, #4]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	461a      	mov	r2, r3
 8003448:	f000 fa58 	bl	80038fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2150      	movs	r1, #80	; 0x50
 8003452:	4618      	mov	r0, r3
 8003454:	f000 faaf 	bl	80039b6 <TIM_ITRx_SetConfig>
      break;
 8003458:	e02b      	b.n	80034b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6859      	ldr	r1, [r3, #4]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	461a      	mov	r2, r3
 8003468:	f000 fa76 	bl	8003958 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2160      	movs	r1, #96	; 0x60
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fa9f 	bl	80039b6 <TIM_ITRx_SetConfig>
      break;
 8003478:	e01b      	b.n	80034b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	461a      	mov	r2, r3
 8003488:	f000 fa38 	bl	80038fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2140      	movs	r1, #64	; 0x40
 8003492:	4618      	mov	r0, r3
 8003494:	f000 fa8f 	bl	80039b6 <TIM_ITRx_SetConfig>
      break;
 8003498:	e00b      	b.n	80034b2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f000 fa86 	bl	80039b6 <TIM_ITRx_SetConfig>
        break;
 80034aa:	e002      	b.n	80034b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034ac:	bf00      	nop
 80034ae:	e000      	b.n	80034b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80034b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr

080034de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800350a:	bf00      	nop
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	bc80      	pop	{r7}
 8003512:	4770      	bx	lr

08003514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr
	...

08003528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a29      	ldr	r2, [pc, #164]	; (80035e0 <TIM_Base_SetConfig+0xb8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00b      	beq.n	8003558 <TIM_Base_SetConfig+0x30>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003546:	d007      	beq.n	8003558 <TIM_Base_SetConfig+0x30>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a26      	ldr	r2, [pc, #152]	; (80035e4 <TIM_Base_SetConfig+0xbc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d003      	beq.n	8003558 <TIM_Base_SetConfig+0x30>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a25      	ldr	r2, [pc, #148]	; (80035e8 <TIM_Base_SetConfig+0xc0>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d108      	bne.n	800356a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <TIM_Base_SetConfig+0xb8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00b      	beq.n	800358a <TIM_Base_SetConfig+0x62>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003578:	d007      	beq.n	800358a <TIM_Base_SetConfig+0x62>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a19      	ldr	r2, [pc, #100]	; (80035e4 <TIM_Base_SetConfig+0xbc>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d003      	beq.n	800358a <TIM_Base_SetConfig+0x62>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a18      	ldr	r2, [pc, #96]	; (80035e8 <TIM_Base_SetConfig+0xc0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d108      	bne.n	800359c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <TIM_Base_SetConfig+0xb8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d103      	bne.n	80035d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	691a      	ldr	r2, [r3, #16]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	615a      	str	r2, [r3, #20]
}
 80035d6:	bf00      	nop
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr
 80035e0:	40012c00 	.word	0x40012c00
 80035e4:	40000400 	.word	0x40000400
 80035e8:	40000800 	.word	0x40000800

080035ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	f023 0201 	bic.w	r2, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800361a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f023 0303 	bic.w	r3, r3, #3
 8003622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	4313      	orrs	r3, r2
 800362c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f023 0302 	bic.w	r3, r3, #2
 8003634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	4313      	orrs	r3, r2
 800363e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <TIM_OC1_SetConfig+0xc8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d10c      	bne.n	8003662 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f023 0308 	bic.w	r3, r3, #8
 800364e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	f023 0304 	bic.w	r3, r3, #4
 8003660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <TIM_OC1_SetConfig+0xc8>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d111      	bne.n	800368e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	621a      	str	r2, [r3, #32]
}
 80036a8:	bf00      	nop
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40012c00 	.word	0x40012c00

080036b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	f023 0210 	bic.w	r2, r3, #16
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f023 0320 	bic.w	r3, r3, #32
 8003702:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4a1d      	ldr	r2, [pc, #116]	; (8003788 <TIM_OC2_SetConfig+0xd0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d10d      	bne.n	8003734 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800371e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003732:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a14      	ldr	r2, [pc, #80]	; (8003788 <TIM_OC2_SetConfig+0xd0>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d113      	bne.n	8003764 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003742:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800374a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	695b      	ldr	r3, [r3, #20]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4313      	orrs	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	697a      	ldr	r2, [r7, #20]
 800377c:	621a      	str	r2, [r3, #32]
}
 800377e:	bf00      	nop
 8003780:	371c      	adds	r7, #28
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr
 8003788:	40012c00 	.word	0x40012c00

0800378c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
 80037a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	4313      	orrs	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a1d      	ldr	r2, [pc, #116]	; (800385c <TIM_OC3_SetConfig+0xd0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d10d      	bne.n	8003806 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	021b      	lsls	r3, r3, #8
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a14      	ldr	r2, [pc, #80]	; (800385c <TIM_OC3_SetConfig+0xd0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d113      	bne.n	8003836 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800381c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	621a      	str	r2, [r3, #32]
}
 8003850:	bf00      	nop
 8003852:	371c      	adds	r7, #28
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40012c00 	.word	0x40012c00

08003860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800388e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	031b      	lsls	r3, r3, #12
 80038b2:	693a      	ldr	r2, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a0f      	ldr	r2, [pc, #60]	; (80038f8 <TIM_OC4_SetConfig+0x98>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d109      	bne.n	80038d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	019b      	lsls	r3, r3, #6
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	621a      	str	r2, [r3, #32]
}
 80038ee:	bf00      	nop
 80038f0:	371c      	adds	r7, #28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr
 80038f8:	40012c00 	.word	0x40012c00

080038fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	f023 0201 	bic.w	r2, r3, #1
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003926:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f023 030a 	bic.w	r3, r3, #10
 8003938:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4313      	orrs	r3, r2
 8003940:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	621a      	str	r2, [r3, #32]
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	f023 0210 	bic.w	r2, r3, #16
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1b      	ldr	r3, [r3, #32]
 800397a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003982:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	031b      	lsls	r3, r3, #12
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003994:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	621a      	str	r2, [r3, #32]
}
 80039ac:	bf00      	nop
 80039ae:	371c      	adds	r7, #28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr

080039b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b085      	sub	sp, #20
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f043 0307 	orr.w	r3, r3, #7
 80039d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	609a      	str	r2, [r3, #8]
}
 80039e0:	bf00      	nop
 80039e2:	3714      	adds	r7, #20
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bc80      	pop	{r7}
 80039e8:	4770      	bx	lr

080039ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039ea:	b480      	push	{r7}
 80039ec:	b087      	sub	sp, #28
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	60f8      	str	r0, [r7, #12]
 80039f2:	60b9      	str	r1, [r7, #8]
 80039f4:	607a      	str	r2, [r7, #4]
 80039f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a04:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	021a      	lsls	r2, r3, #8
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	431a      	orrs	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	609a      	str	r2, [r3, #8]
}
 8003a1e:	bf00      	nop
 8003a20:	371c      	adds	r7, #28
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr

08003a28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a1a      	ldr	r2, [r3, #32]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	43db      	mvns	r3, r3
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1a      	ldr	r2, [r3, #32]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f003 031f 	and.w	r3, r3, #31
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a60:	431a      	orrs	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	621a      	str	r2, [r3, #32]
}
 8003a66:	bf00      	nop
 8003a68:	371c      	adds	r7, #28
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr

08003a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d101      	bne.n	8003a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e046      	b.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a16      	ldr	r2, [pc, #88]	; (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00e      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad4:	d009      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a12      	ldr	r2, [pc, #72]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a10      	ldr	r2, [pc, #64]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10c      	bne.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr
 8003b20:	40012c00 	.word	0x40012c00
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800

08003b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr

08003b3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b46:	bf00      	nop
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr

08003b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d101      	bne.n	8003b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e03f      	b.n	8003be2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d106      	bne.n	8003b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7fd f9ca 	bl	8000f10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2224      	movs	r2, #36	; 0x24
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fd89 	bl	80046ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695a      	ldr	r2, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2220      	movs	r2, #32
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}

08003bea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bea:	b580      	push	{r7, lr}
 8003bec:	b08a      	sub	sp, #40	; 0x28
 8003bee:	af02      	add	r7, sp, #8
 8003bf0:	60f8      	str	r0, [r7, #12]
 8003bf2:	60b9      	str	r1, [r7, #8]
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d17c      	bne.n	8003d04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <HAL_UART_Transmit+0x2c>
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e075      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_UART_Transmit+0x3e>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e06e      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2221      	movs	r2, #33	; 0x21
 8003c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c3e:	f7fd fc01 	bl	8001444 <HAL_GetTick>
 8003c42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	88fa      	ldrh	r2, [r7, #6]
 8003c48:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	88fa      	ldrh	r2, [r7, #6]
 8003c4e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c58:	d108      	bne.n	8003c6c <HAL_UART_Transmit+0x82>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d104      	bne.n	8003c6c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	e003      	b.n	8003c74 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c7c:	e02a      	b.n	8003cd4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2200      	movs	r2, #0
 8003c86:	2180      	movs	r1, #128	; 0x80
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 fafa 	bl	8004282 <UART_WaitOnFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e036      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10b      	bne.n	8003cb6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	881b      	ldrh	r3, [r3, #0]
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	3302      	adds	r3, #2
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	e007      	b.n	8003cc6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	781a      	ldrb	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1cf      	bne.n	8003c7e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2140      	movs	r1, #64	; 0x40
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 faca 	bl	8004282 <UART_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e006      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3720      	adds	r7, #32
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d11d      	bne.n	8003d64 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d002      	beq.n	8003d34 <HAL_UART_Receive_DMA+0x26>
 8003d2e:	88fb      	ldrh	r3, [r7, #6]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e016      	b.n	8003d66 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d101      	bne.n	8003d46 <HAL_UART_Receive_DMA+0x38>
 8003d42:	2302      	movs	r3, #2
 8003d44:	e00f      	b.n	8003d66 <HAL_UART_Receive_DMA+0x58>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	461a      	mov	r2, r3
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fadc 	bl	8004318 <UART_Start_Receive_DMA>
 8003d60:	4603      	mov	r3, r0
 8003d62:	e000      	b.n	8003d66 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d64:	2302      	movs	r3, #2
  }
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3710      	adds	r7, #16
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
	...

08003d70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08a      	sub	sp, #40	; 0x28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003d90:	2300      	movs	r3, #0
 8003d92:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	f003 030f 	and.w	r3, r3, #15
 8003d9e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10d      	bne.n	8003dc2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x52>
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fbcc 	bl	8004558 <UART_Receive_IT>
      return;
 8003dc0:	e17b      	b.n	80040ba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	f000 80b1 	beq.w	8003f2c <HAL_UART_IRQHandler+0x1bc>
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d105      	bne.n	8003de0 <HAL_UART_IRQHandler+0x70>
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 80a6 	beq.w	8003f2c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <HAL_UART_IRQHandler+0x90>
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df8:	f043 0201 	orr.w	r2, r3, #1
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e02:	f003 0304 	and.w	r3, r3, #4
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d00a      	beq.n	8003e20 <HAL_UART_IRQHandler+0xb0>
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f043 0202 	orr.w	r2, r3, #2
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <HAL_UART_IRQHandler+0xd0>
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d005      	beq.n	8003e40 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e38:	f043 0204 	orr.w	r2, r3, #4
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00f      	beq.n	8003e6a <HAL_UART_IRQHandler+0xfa>
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	f003 0320 	and.w	r3, r3, #32
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <HAL_UART_IRQHandler+0xee>
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 0208 	orr.w	r2, r3, #8
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 811e 	beq.w	80040b0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d007      	beq.n	8003e8e <HAL_UART_IRQHandler+0x11e>
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	f003 0320 	and.w	r3, r3, #32
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fb65 	bl	8004558 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d102      	bne.n	8003eb6 <HAL_UART_IRQHandler+0x146>
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d031      	beq.n	8003f1a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 faa7 	bl	800440a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d023      	beq.n	8003f12 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	695a      	ldr	r2, [r3, #20]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ed8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d013      	beq.n	8003f0a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	4a76      	ldr	r2, [pc, #472]	; (80040c0 <HAL_UART_IRQHandler+0x350>)
 8003ee8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f7fd fcd8 	bl	80018a4 <HAL_DMA_Abort_IT>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f04:	4610      	mov	r0, r2
 8003f06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	e00e      	b.n	8003f28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 f8f5 	bl	80040fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f10:	e00a      	b.n	8003f28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 f8f1 	bl	80040fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	e006      	b.n	8003f28 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f8ed 	bl	80040fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f26:	e0c3      	b.n	80040b0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f28:	bf00      	nop
    return;
 8003f2a:	e0c1      	b.n	80040b0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	f040 80a1 	bne.w	8004078 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 809b 	beq.w	8004078 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8003f42:	6a3b      	ldr	r3, [r7, #32]
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 8095 	beq.w	8004078 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d04e      	beq.n	8004010 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003f7c:	8a3b      	ldrh	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 8098 	beq.w	80040b4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003f88:	8a3a      	ldrh	r2, [r7, #16]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	f080 8092 	bcs.w	80040b4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	8a3a      	ldrh	r2, [r7, #16]
 8003f94:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f9a:	699b      	ldr	r3, [r3, #24]
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d02b      	beq.n	8003ff8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fae:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fce:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68da      	ldr	r2, [r3, #12]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0210 	bic.w	r2, r2, #16
 8003fec:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7fd fc1b 	bl	800182e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004000:	b29b      	uxth	r3, r3
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	b29b      	uxth	r3, r3
 8004006:	4619      	mov	r1, r3
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f87f 	bl	800410c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800400e:	e051      	b.n	80040b4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004018:	b29b      	uxth	r3, r3
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d047      	beq.n	80040b8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004028:	8a7b      	ldrh	r3, [r7, #18]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d044      	beq.n	80040b8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68da      	ldr	r2, [r3, #12]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800403c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2220      	movs	r2, #32
 8004052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0210 	bic.w	r2, r2, #16
 800406a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800406c:	8a7b      	ldrh	r3, [r7, #18]
 800406e:	4619      	mov	r1, r3
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f84b 	bl	800410c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004076:	e01f      	b.n	80040b8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_UART_IRQHandler+0x324>
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f9fc 	bl	800448a <UART_Transmit_IT>
    return;
 8004092:	e012      	b.n	80040ba <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00d      	beq.n	80040ba <HAL_UART_IRQHandler+0x34a>
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fa3d 	bl	8004528 <UART_EndTransmit_IT>
    return;
 80040ae:	e004      	b.n	80040ba <HAL_UART_IRQHandler+0x34a>
    return;
 80040b0:	bf00      	nop
 80040b2:	e002      	b.n	80040ba <HAL_UART_IRQHandler+0x34a>
      return;
 80040b4:	bf00      	nop
 80040b6:	e000      	b.n	80040ba <HAL_UART_IRQHandler+0x34a>
      return;
 80040b8:	bf00      	nop
  }
}
 80040ba:	3728      	adds	r7, #40	; 0x28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	08004463 	.word	0x08004463

080040c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bc80      	pop	{r7}
 80040d4:	4770      	bx	lr

080040d6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b083      	sub	sp, #12
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bc80      	pop	{r7}
 80040e6:	4770      	bx	lr

080040e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	460b      	mov	r3, r1
 8004116:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	bc80      	pop	{r7}
 8004120:	4770      	bx	lr

08004122 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b00      	cmp	r3, #0
 800413c:	d12a      	bne.n	8004194 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004152:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004172:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004180:	2b01      	cmp	r3, #1
 8004182:	d107      	bne.n	8004194 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0210 	bic.w	r2, r2, #16
 8004192:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004198:	2b01      	cmp	r3, #1
 800419a:	d106      	bne.n	80041aa <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041a0:	4619      	mov	r1, r3
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7ff ffb2 	bl	800410c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041a8:	e002      	b.n	80041b0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f7ff ff93 	bl	80040d6 <HAL_UART_RxCpltCallback>
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d108      	bne.n	80041e0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041d2:	085b      	lsrs	r3, r3, #1
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	4619      	mov	r1, r3
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff ff97 	bl	800410c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80041de:	e002      	b.n	80041e6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f7ff ff81 	bl	80040e8 <HAL_UART_RxHalfCpltCallback>
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80041f6:	2300      	movs	r3, #0
 80041f8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	695b      	ldr	r3, [r3, #20]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b00      	cmp	r3, #0
 800420c:	bf14      	ite	ne
 800420e:	2301      	movne	r3, #1
 8004210:	2300      	moveq	r3, #0
 8004212:	b2db      	uxtb	r3, r3
 8004214:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b21      	cmp	r3, #33	; 0x21
 8004220:	d108      	bne.n	8004234 <UART_DMAError+0x46>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	2200      	movs	r2, #0
 800422c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800422e:	68b8      	ldr	r0, [r7, #8]
 8004230:	f000 f8d6 	bl	80043e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	695b      	ldr	r3, [r3, #20]
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	bf14      	ite	ne
 8004242:	2301      	movne	r3, #1
 8004244:	2300      	moveq	r3, #0
 8004246:	b2db      	uxtb	r3, r3
 8004248:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b22      	cmp	r3, #34	; 0x22
 8004254:	d108      	bne.n	8004268 <UART_DMAError+0x7a>
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d005      	beq.n	8004268 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2200      	movs	r2, #0
 8004260:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004262:	68b8      	ldr	r0, [r7, #8]
 8004264:	f000 f8d1 	bl	800440a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426c:	f043 0210 	orr.w	r2, r3, #16
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004274:	68b8      	ldr	r0, [r7, #8]
 8004276:	f7ff ff40 	bl	80040fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800427a:	bf00      	nop
 800427c:	3710      	adds	r7, #16
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}

08004282 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	60b9      	str	r1, [r7, #8]
 800428c:	603b      	str	r3, [r7, #0]
 800428e:	4613      	mov	r3, r2
 8004290:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004292:	e02c      	b.n	80042ee <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429a:	d028      	beq.n	80042ee <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d007      	beq.n	80042b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80042a2:	f7fd f8cf 	bl	8001444 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d21d      	bcs.n	80042ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042c0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695a      	ldr	r2, [r3, #20]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0201 	bic.w	r2, r2, #1
 80042d0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e00f      	b.n	800430e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	bf0c      	ite	eq
 80042fe:	2301      	moveq	r3, #1
 8004300:	2300      	movne	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	429a      	cmp	r2, r3
 800430a:	d0c3      	beq.n	8004294 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	4613      	mov	r3, r2
 8004324:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	88fa      	ldrh	r2, [r7, #6]
 8004330:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2222      	movs	r2, #34	; 0x22
 800433c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004344:	4a23      	ldr	r2, [pc, #140]	; (80043d4 <UART_Start_Receive_DMA+0xbc>)
 8004346:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	4a22      	ldr	r2, [pc, #136]	; (80043d8 <UART_Start_Receive_DMA+0xc0>)
 800434e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	4a21      	ldr	r2, [pc, #132]	; (80043dc <UART_Start_Receive_DMA+0xc4>)
 8004356:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435c:	2200      	movs	r2, #0
 800435e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004360:	f107 0308 	add.w	r3, r7, #8
 8004364:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3304      	adds	r3, #4
 8004370:	4619      	mov	r1, r3
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	88fb      	ldrh	r3, [r7, #6]
 8004378:	f7fd f9fa 	bl	8001770 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800437c:	2300      	movs	r3, #0
 800437e:	613b      	str	r3, [r7, #16]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	613b      	str	r3, [r7, #16]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	613b      	str	r3, [r7, #16]
 8004390:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0201 	orr.w	r2, r2, #1
 80043b8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043c8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	08004123 	.word	0x08004123
 80043d8:	080041b9 	.word	0x080041b9
 80043dc:	080041ef 	.word	0x080041ef

080043e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80043f6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004400:	bf00      	nop
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	bc80      	pop	{r7}
 8004408:	4770      	bx	lr

0800440a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004420:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695a      	ldr	r2, [r3, #20]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0201 	bic.w	r2, r2, #1
 8004430:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	2b01      	cmp	r3, #1
 8004438:	d107      	bne.n	800444a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0210 	bic.w	r2, r2, #16
 8004448:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr

08004462 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f7ff fe3c 	bl	80040fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004482:	bf00      	nop
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800448a:	b480      	push	{r7}
 800448c:	b085      	sub	sp, #20
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b21      	cmp	r3, #33	; 0x21
 800449c:	d13e      	bne.n	800451c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a6:	d114      	bne.n	80044d2 <UART_Transmit_IT+0x48>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d110      	bne.n	80044d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	881b      	ldrh	r3, [r3, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	1c9a      	adds	r2, r3, #2
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	621a      	str	r2, [r3, #32]
 80044d0:	e008      	b.n	80044e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	1c59      	adds	r1, r3, #1
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6211      	str	r1, [r2, #32]
 80044dc:	781a      	ldrb	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	4619      	mov	r1, r3
 80044f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10f      	bne.n	8004518 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004506:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68da      	ldr	r2, [r3, #12]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004516:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	e000      	b.n	800451e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800451c:	2302      	movs	r3, #2
  }
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800453e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7ff fdbb 	bl	80040c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b086      	sub	sp, #24
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004566:	b2db      	uxtb	r3, r3
 8004568:	2b22      	cmp	r3, #34	; 0x22
 800456a:	f040 8099 	bne.w	80046a0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004576:	d117      	bne.n	80045a8 <UART_Receive_IT+0x50>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d113      	bne.n	80045a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	b29b      	uxth	r3, r3
 8004592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004596:	b29a      	uxth	r2, r3
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a0:	1c9a      	adds	r2, r3, #2
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	629a      	str	r2, [r3, #40]	; 0x28
 80045a6:	e026      	b.n	80045f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ac:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ba:	d007      	beq.n	80045cc <UART_Receive_IT+0x74>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <UART_Receive_IT+0x82>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d106      	bne.n	80045da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	b2da      	uxtb	r2, r3
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	e008      	b.n	80045ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29b      	uxth	r3, r3
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	4619      	mov	r1, r3
 8004604:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004606:	2b00      	cmp	r3, #0
 8004608:	d148      	bne.n	800469c <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68da      	ldr	r2, [r3, #12]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0220 	bic.w	r2, r2, #32
 8004618:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004628:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695a      	ldr	r2, [r3, #20]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 0201 	bic.w	r2, r2, #1
 8004638:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	2b01      	cmp	r3, #1
 8004648:	d123      	bne.n	8004692 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68da      	ldr	r2, [r3, #12]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0210 	bic.w	r2, r2, #16
 800465e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	2b10      	cmp	r3, #16
 800466c:	d10a      	bne.n	8004684 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7ff fd3e 	bl	800410c <HAL_UARTEx_RxEventCallback>
 8004690:	e002      	b.n	8004698 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff fd1f 	bl	80040d6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e002      	b.n	80046a2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 800469c:	2300      	movs	r3, #0
 800469e:	e000      	b.n	80046a2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80046a0:	2302      	movs	r3, #2
  }
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68da      	ldr	r2, [r3, #12]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80046e6:	f023 030c 	bic.w	r3, r3, #12
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	68b9      	ldr	r1, [r7, #8]
 80046f0:	430b      	orrs	r3, r1
 80046f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695b      	ldr	r3, [r3, #20]
 80046fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699a      	ldr	r2, [r3, #24]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <UART_SetConfig+0x114>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d103      	bne.n	800471c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004714:	f7fe f952 	bl	80029bc <HAL_RCC_GetPCLK2Freq>
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	e002      	b.n	8004722 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800471c:	f7fe f93a 	bl	8002994 <HAL_RCC_GetPCLK1Freq>
 8004720:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	4613      	mov	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4413      	add	r3, r2
 800472a:	009a      	lsls	r2, r3, #2
 800472c:	441a      	add	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	fbb2 f3f3 	udiv	r3, r2, r3
 8004738:	4a22      	ldr	r2, [pc, #136]	; (80047c4 <UART_SetConfig+0x118>)
 800473a:	fba2 2303 	umull	r2, r3, r2, r3
 800473e:	095b      	lsrs	r3, r3, #5
 8004740:	0119      	lsls	r1, r3, #4
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	009a      	lsls	r2, r3, #2
 800474c:	441a      	add	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	fbb2 f2f3 	udiv	r2, r2, r3
 8004758:	4b1a      	ldr	r3, [pc, #104]	; (80047c4 <UART_SetConfig+0x118>)
 800475a:	fba3 0302 	umull	r0, r3, r3, r2
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	2064      	movs	r0, #100	; 0x64
 8004762:	fb00 f303 	mul.w	r3, r0, r3
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	3332      	adds	r3, #50	; 0x32
 800476c:	4a15      	ldr	r2, [pc, #84]	; (80047c4 <UART_SetConfig+0x118>)
 800476e:	fba2 2303 	umull	r2, r3, r2, r3
 8004772:	095b      	lsrs	r3, r3, #5
 8004774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004778:	4419      	add	r1, r3
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	009a      	lsls	r2, r3, #2
 8004784:	441a      	add	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <UART_SetConfig+0x118>)
 8004792:	fba3 0302 	umull	r0, r3, r3, r2
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	2064      	movs	r0, #100	; 0x64
 800479a:	fb00 f303 	mul.w	r3, r0, r3
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	3332      	adds	r3, #50	; 0x32
 80047a4:	4a07      	ldr	r2, [pc, #28]	; (80047c4 <UART_SetConfig+0x118>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	f003 020f 	and.w	r2, r3, #15
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	440a      	add	r2, r1
 80047b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80047b8:	bf00      	nop
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40013800 	.word	0x40013800
 80047c4:	51eb851f 	.word	0x51eb851f

080047c8 <__assert_func>:
 80047c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047ca:	4614      	mov	r4, r2
 80047cc:	461a      	mov	r2, r3
 80047ce:	4b09      	ldr	r3, [pc, #36]	; (80047f4 <__assert_func+0x2c>)
 80047d0:	4605      	mov	r5, r0
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68d8      	ldr	r0, [r3, #12]
 80047d6:	b14c      	cbz	r4, 80047ec <__assert_func+0x24>
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <__assert_func+0x30>)
 80047da:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80047de:	9100      	str	r1, [sp, #0]
 80047e0:	462b      	mov	r3, r5
 80047e2:	4906      	ldr	r1, [pc, #24]	; (80047fc <__assert_func+0x34>)
 80047e4:	f000 f814 	bl	8004810 <fiprintf>
 80047e8:	f000 fbfe 	bl	8004fe8 <abort>
 80047ec:	4b04      	ldr	r3, [pc, #16]	; (8004800 <__assert_func+0x38>)
 80047ee:	461c      	mov	r4, r3
 80047f0:	e7f3      	b.n	80047da <__assert_func+0x12>
 80047f2:	bf00      	nop
 80047f4:	20000010 	.word	0x20000010
 80047f8:	080058c0 	.word	0x080058c0
 80047fc:	080058cd 	.word	0x080058cd
 8004800:	080058fb 	.word	0x080058fb

08004804 <__errno>:
 8004804:	4b01      	ldr	r3, [pc, #4]	; (800480c <__errno+0x8>)
 8004806:	6818      	ldr	r0, [r3, #0]
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	20000010 	.word	0x20000010

08004810 <fiprintf>:
 8004810:	b40e      	push	{r1, r2, r3}
 8004812:	b503      	push	{r0, r1, lr}
 8004814:	4601      	mov	r1, r0
 8004816:	ab03      	add	r3, sp, #12
 8004818:	4805      	ldr	r0, [pc, #20]	; (8004830 <fiprintf+0x20>)
 800481a:	f853 2b04 	ldr.w	r2, [r3], #4
 800481e:	6800      	ldr	r0, [r0, #0]
 8004820:	9301      	str	r3, [sp, #4]
 8004822:	f000 f85b 	bl	80048dc <_vfiprintf_r>
 8004826:	b002      	add	sp, #8
 8004828:	f85d eb04 	ldr.w	lr, [sp], #4
 800482c:	b003      	add	sp, #12
 800482e:	4770      	bx	lr
 8004830:	20000010 	.word	0x20000010

08004834 <__libc_init_array>:
 8004834:	b570      	push	{r4, r5, r6, lr}
 8004836:	2600      	movs	r6, #0
 8004838:	4d0c      	ldr	r5, [pc, #48]	; (800486c <__libc_init_array+0x38>)
 800483a:	4c0d      	ldr	r4, [pc, #52]	; (8004870 <__libc_init_array+0x3c>)
 800483c:	1b64      	subs	r4, r4, r5
 800483e:	10a4      	asrs	r4, r4, #2
 8004840:	42a6      	cmp	r6, r4
 8004842:	d109      	bne.n	8004858 <__libc_init_array+0x24>
 8004844:	f000 ffea 	bl	800581c <_init>
 8004848:	2600      	movs	r6, #0
 800484a:	4d0a      	ldr	r5, [pc, #40]	; (8004874 <__libc_init_array+0x40>)
 800484c:	4c0a      	ldr	r4, [pc, #40]	; (8004878 <__libc_init_array+0x44>)
 800484e:	1b64      	subs	r4, r4, r5
 8004850:	10a4      	asrs	r4, r4, #2
 8004852:	42a6      	cmp	r6, r4
 8004854:	d105      	bne.n	8004862 <__libc_init_array+0x2e>
 8004856:	bd70      	pop	{r4, r5, r6, pc}
 8004858:	f855 3b04 	ldr.w	r3, [r5], #4
 800485c:	4798      	blx	r3
 800485e:	3601      	adds	r6, #1
 8004860:	e7ee      	b.n	8004840 <__libc_init_array+0xc>
 8004862:	f855 3b04 	ldr.w	r3, [r5], #4
 8004866:	4798      	blx	r3
 8004868:	3601      	adds	r6, #1
 800486a:	e7f2      	b.n	8004852 <__libc_init_array+0x1e>
 800486c:	08005994 	.word	0x08005994
 8004870:	08005994 	.word	0x08005994
 8004874:	08005994 	.word	0x08005994
 8004878:	08005998 	.word	0x08005998

0800487c <memset>:
 800487c:	4603      	mov	r3, r0
 800487e:	4402      	add	r2, r0
 8004880:	4293      	cmp	r3, r2
 8004882:	d100      	bne.n	8004886 <memset+0xa>
 8004884:	4770      	bx	lr
 8004886:	f803 1b01 	strb.w	r1, [r3], #1
 800488a:	e7f9      	b.n	8004880 <memset+0x4>

0800488c <__sfputc_r>:
 800488c:	6893      	ldr	r3, [r2, #8]
 800488e:	b410      	push	{r4}
 8004890:	3b01      	subs	r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	6093      	str	r3, [r2, #8]
 8004896:	da07      	bge.n	80048a8 <__sfputc_r+0x1c>
 8004898:	6994      	ldr	r4, [r2, #24]
 800489a:	42a3      	cmp	r3, r4
 800489c:	db01      	blt.n	80048a2 <__sfputc_r+0x16>
 800489e:	290a      	cmp	r1, #10
 80048a0:	d102      	bne.n	80048a8 <__sfputc_r+0x1c>
 80048a2:	bc10      	pop	{r4}
 80048a4:	f000 bae0 	b.w	8004e68 <__swbuf_r>
 80048a8:	6813      	ldr	r3, [r2, #0]
 80048aa:	1c58      	adds	r0, r3, #1
 80048ac:	6010      	str	r0, [r2, #0]
 80048ae:	7019      	strb	r1, [r3, #0]
 80048b0:	4608      	mov	r0, r1
 80048b2:	bc10      	pop	{r4}
 80048b4:	4770      	bx	lr

080048b6 <__sfputs_r>:
 80048b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b8:	4606      	mov	r6, r0
 80048ba:	460f      	mov	r7, r1
 80048bc:	4614      	mov	r4, r2
 80048be:	18d5      	adds	r5, r2, r3
 80048c0:	42ac      	cmp	r4, r5
 80048c2:	d101      	bne.n	80048c8 <__sfputs_r+0x12>
 80048c4:	2000      	movs	r0, #0
 80048c6:	e007      	b.n	80048d8 <__sfputs_r+0x22>
 80048c8:	463a      	mov	r2, r7
 80048ca:	4630      	mov	r0, r6
 80048cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048d0:	f7ff ffdc 	bl	800488c <__sfputc_r>
 80048d4:	1c43      	adds	r3, r0, #1
 80048d6:	d1f3      	bne.n	80048c0 <__sfputs_r+0xa>
 80048d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080048dc <_vfiprintf_r>:
 80048dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e0:	460d      	mov	r5, r1
 80048e2:	4614      	mov	r4, r2
 80048e4:	4698      	mov	r8, r3
 80048e6:	4606      	mov	r6, r0
 80048e8:	b09d      	sub	sp, #116	; 0x74
 80048ea:	b118      	cbz	r0, 80048f4 <_vfiprintf_r+0x18>
 80048ec:	6983      	ldr	r3, [r0, #24]
 80048ee:	b90b      	cbnz	r3, 80048f4 <_vfiprintf_r+0x18>
 80048f0:	f000 fc98 	bl	8005224 <__sinit>
 80048f4:	4b89      	ldr	r3, [pc, #548]	; (8004b1c <_vfiprintf_r+0x240>)
 80048f6:	429d      	cmp	r5, r3
 80048f8:	d11b      	bne.n	8004932 <_vfiprintf_r+0x56>
 80048fa:	6875      	ldr	r5, [r6, #4]
 80048fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80048fe:	07d9      	lsls	r1, r3, #31
 8004900:	d405      	bmi.n	800490e <_vfiprintf_r+0x32>
 8004902:	89ab      	ldrh	r3, [r5, #12]
 8004904:	059a      	lsls	r2, r3, #22
 8004906:	d402      	bmi.n	800490e <_vfiprintf_r+0x32>
 8004908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800490a:	f000 fd29 	bl	8005360 <__retarget_lock_acquire_recursive>
 800490e:	89ab      	ldrh	r3, [r5, #12]
 8004910:	071b      	lsls	r3, r3, #28
 8004912:	d501      	bpl.n	8004918 <_vfiprintf_r+0x3c>
 8004914:	692b      	ldr	r3, [r5, #16]
 8004916:	b9eb      	cbnz	r3, 8004954 <_vfiprintf_r+0x78>
 8004918:	4629      	mov	r1, r5
 800491a:	4630      	mov	r0, r6
 800491c:	f000 faf6 	bl	8004f0c <__swsetup_r>
 8004920:	b1c0      	cbz	r0, 8004954 <_vfiprintf_r+0x78>
 8004922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004924:	07dc      	lsls	r4, r3, #31
 8004926:	d50e      	bpl.n	8004946 <_vfiprintf_r+0x6a>
 8004928:	f04f 30ff 	mov.w	r0, #4294967295
 800492c:	b01d      	add	sp, #116	; 0x74
 800492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004932:	4b7b      	ldr	r3, [pc, #492]	; (8004b20 <_vfiprintf_r+0x244>)
 8004934:	429d      	cmp	r5, r3
 8004936:	d101      	bne.n	800493c <_vfiprintf_r+0x60>
 8004938:	68b5      	ldr	r5, [r6, #8]
 800493a:	e7df      	b.n	80048fc <_vfiprintf_r+0x20>
 800493c:	4b79      	ldr	r3, [pc, #484]	; (8004b24 <_vfiprintf_r+0x248>)
 800493e:	429d      	cmp	r5, r3
 8004940:	bf08      	it	eq
 8004942:	68f5      	ldreq	r5, [r6, #12]
 8004944:	e7da      	b.n	80048fc <_vfiprintf_r+0x20>
 8004946:	89ab      	ldrh	r3, [r5, #12]
 8004948:	0598      	lsls	r0, r3, #22
 800494a:	d4ed      	bmi.n	8004928 <_vfiprintf_r+0x4c>
 800494c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800494e:	f000 fd08 	bl	8005362 <__retarget_lock_release_recursive>
 8004952:	e7e9      	b.n	8004928 <_vfiprintf_r+0x4c>
 8004954:	2300      	movs	r3, #0
 8004956:	9309      	str	r3, [sp, #36]	; 0x24
 8004958:	2320      	movs	r3, #32
 800495a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800495e:	2330      	movs	r3, #48	; 0x30
 8004960:	f04f 0901 	mov.w	r9, #1
 8004964:	f8cd 800c 	str.w	r8, [sp, #12]
 8004968:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004b28 <_vfiprintf_r+0x24c>
 800496c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004970:	4623      	mov	r3, r4
 8004972:	469a      	mov	sl, r3
 8004974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004978:	b10a      	cbz	r2, 800497e <_vfiprintf_r+0xa2>
 800497a:	2a25      	cmp	r2, #37	; 0x25
 800497c:	d1f9      	bne.n	8004972 <_vfiprintf_r+0x96>
 800497e:	ebba 0b04 	subs.w	fp, sl, r4
 8004982:	d00b      	beq.n	800499c <_vfiprintf_r+0xc0>
 8004984:	465b      	mov	r3, fp
 8004986:	4622      	mov	r2, r4
 8004988:	4629      	mov	r1, r5
 800498a:	4630      	mov	r0, r6
 800498c:	f7ff ff93 	bl	80048b6 <__sfputs_r>
 8004990:	3001      	adds	r0, #1
 8004992:	f000 80aa 	beq.w	8004aea <_vfiprintf_r+0x20e>
 8004996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004998:	445a      	add	r2, fp
 800499a:	9209      	str	r2, [sp, #36]	; 0x24
 800499c:	f89a 3000 	ldrb.w	r3, [sl]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 80a2 	beq.w	8004aea <_vfiprintf_r+0x20e>
 80049a6:	2300      	movs	r3, #0
 80049a8:	f04f 32ff 	mov.w	r2, #4294967295
 80049ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049b0:	f10a 0a01 	add.w	sl, sl, #1
 80049b4:	9304      	str	r3, [sp, #16]
 80049b6:	9307      	str	r3, [sp, #28]
 80049b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049bc:	931a      	str	r3, [sp, #104]	; 0x68
 80049be:	4654      	mov	r4, sl
 80049c0:	2205      	movs	r2, #5
 80049c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c6:	4858      	ldr	r0, [pc, #352]	; (8004b28 <_vfiprintf_r+0x24c>)
 80049c8:	f000 fd32 	bl	8005430 <memchr>
 80049cc:	9a04      	ldr	r2, [sp, #16]
 80049ce:	b9d8      	cbnz	r0, 8004a08 <_vfiprintf_r+0x12c>
 80049d0:	06d1      	lsls	r1, r2, #27
 80049d2:	bf44      	itt	mi
 80049d4:	2320      	movmi	r3, #32
 80049d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049da:	0713      	lsls	r3, r2, #28
 80049dc:	bf44      	itt	mi
 80049de:	232b      	movmi	r3, #43	; 0x2b
 80049e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049e4:	f89a 3000 	ldrb.w	r3, [sl]
 80049e8:	2b2a      	cmp	r3, #42	; 0x2a
 80049ea:	d015      	beq.n	8004a18 <_vfiprintf_r+0x13c>
 80049ec:	4654      	mov	r4, sl
 80049ee:	2000      	movs	r0, #0
 80049f0:	f04f 0c0a 	mov.w	ip, #10
 80049f4:	9a07      	ldr	r2, [sp, #28]
 80049f6:	4621      	mov	r1, r4
 80049f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049fc:	3b30      	subs	r3, #48	; 0x30
 80049fe:	2b09      	cmp	r3, #9
 8004a00:	d94e      	bls.n	8004aa0 <_vfiprintf_r+0x1c4>
 8004a02:	b1b0      	cbz	r0, 8004a32 <_vfiprintf_r+0x156>
 8004a04:	9207      	str	r2, [sp, #28]
 8004a06:	e014      	b.n	8004a32 <_vfiprintf_r+0x156>
 8004a08:	eba0 0308 	sub.w	r3, r0, r8
 8004a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8004a10:	4313      	orrs	r3, r2
 8004a12:	46a2      	mov	sl, r4
 8004a14:	9304      	str	r3, [sp, #16]
 8004a16:	e7d2      	b.n	80049be <_vfiprintf_r+0xe2>
 8004a18:	9b03      	ldr	r3, [sp, #12]
 8004a1a:	1d19      	adds	r1, r3, #4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	9103      	str	r1, [sp, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	bfbb      	ittet	lt
 8004a24:	425b      	neglt	r3, r3
 8004a26:	f042 0202 	orrlt.w	r2, r2, #2
 8004a2a:	9307      	strge	r3, [sp, #28]
 8004a2c:	9307      	strlt	r3, [sp, #28]
 8004a2e:	bfb8      	it	lt
 8004a30:	9204      	strlt	r2, [sp, #16]
 8004a32:	7823      	ldrb	r3, [r4, #0]
 8004a34:	2b2e      	cmp	r3, #46	; 0x2e
 8004a36:	d10c      	bne.n	8004a52 <_vfiprintf_r+0x176>
 8004a38:	7863      	ldrb	r3, [r4, #1]
 8004a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a3c:	d135      	bne.n	8004aaa <_vfiprintf_r+0x1ce>
 8004a3e:	9b03      	ldr	r3, [sp, #12]
 8004a40:	3402      	adds	r4, #2
 8004a42:	1d1a      	adds	r2, r3, #4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	9203      	str	r2, [sp, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bfb8      	it	lt
 8004a4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a50:	9305      	str	r3, [sp, #20]
 8004a52:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004b2c <_vfiprintf_r+0x250>
 8004a56:	2203      	movs	r2, #3
 8004a58:	4650      	mov	r0, sl
 8004a5a:	7821      	ldrb	r1, [r4, #0]
 8004a5c:	f000 fce8 	bl	8005430 <memchr>
 8004a60:	b140      	cbz	r0, 8004a74 <_vfiprintf_r+0x198>
 8004a62:	2340      	movs	r3, #64	; 0x40
 8004a64:	eba0 000a 	sub.w	r0, r0, sl
 8004a68:	fa03 f000 	lsl.w	r0, r3, r0
 8004a6c:	9b04      	ldr	r3, [sp, #16]
 8004a6e:	3401      	adds	r4, #1
 8004a70:	4303      	orrs	r3, r0
 8004a72:	9304      	str	r3, [sp, #16]
 8004a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a78:	2206      	movs	r2, #6
 8004a7a:	482d      	ldr	r0, [pc, #180]	; (8004b30 <_vfiprintf_r+0x254>)
 8004a7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a80:	f000 fcd6 	bl	8005430 <memchr>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d03f      	beq.n	8004b08 <_vfiprintf_r+0x22c>
 8004a88:	4b2a      	ldr	r3, [pc, #168]	; (8004b34 <_vfiprintf_r+0x258>)
 8004a8a:	bb1b      	cbnz	r3, 8004ad4 <_vfiprintf_r+0x1f8>
 8004a8c:	9b03      	ldr	r3, [sp, #12]
 8004a8e:	3307      	adds	r3, #7
 8004a90:	f023 0307 	bic.w	r3, r3, #7
 8004a94:	3308      	adds	r3, #8
 8004a96:	9303      	str	r3, [sp, #12]
 8004a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a9a:	443b      	add	r3, r7
 8004a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9e:	e767      	b.n	8004970 <_vfiprintf_r+0x94>
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	2001      	movs	r0, #1
 8004aa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004aa8:	e7a5      	b.n	80049f6 <_vfiprintf_r+0x11a>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	f04f 0c0a 	mov.w	ip, #10
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	3401      	adds	r4, #1
 8004ab4:	9305      	str	r3, [sp, #20]
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004abc:	3a30      	subs	r2, #48	; 0x30
 8004abe:	2a09      	cmp	r2, #9
 8004ac0:	d903      	bls.n	8004aca <_vfiprintf_r+0x1ee>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0c5      	beq.n	8004a52 <_vfiprintf_r+0x176>
 8004ac6:	9105      	str	r1, [sp, #20]
 8004ac8:	e7c3      	b.n	8004a52 <_vfiprintf_r+0x176>
 8004aca:	4604      	mov	r4, r0
 8004acc:	2301      	movs	r3, #1
 8004ace:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ad2:	e7f0      	b.n	8004ab6 <_vfiprintf_r+0x1da>
 8004ad4:	ab03      	add	r3, sp, #12
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	462a      	mov	r2, r5
 8004ada:	4630      	mov	r0, r6
 8004adc:	4b16      	ldr	r3, [pc, #88]	; (8004b38 <_vfiprintf_r+0x25c>)
 8004ade:	a904      	add	r1, sp, #16
 8004ae0:	f3af 8000 	nop.w
 8004ae4:	4607      	mov	r7, r0
 8004ae6:	1c78      	adds	r0, r7, #1
 8004ae8:	d1d6      	bne.n	8004a98 <_vfiprintf_r+0x1bc>
 8004aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004aec:	07d9      	lsls	r1, r3, #31
 8004aee:	d405      	bmi.n	8004afc <_vfiprintf_r+0x220>
 8004af0:	89ab      	ldrh	r3, [r5, #12]
 8004af2:	059a      	lsls	r2, r3, #22
 8004af4:	d402      	bmi.n	8004afc <_vfiprintf_r+0x220>
 8004af6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004af8:	f000 fc33 	bl	8005362 <__retarget_lock_release_recursive>
 8004afc:	89ab      	ldrh	r3, [r5, #12]
 8004afe:	065b      	lsls	r3, r3, #25
 8004b00:	f53f af12 	bmi.w	8004928 <_vfiprintf_r+0x4c>
 8004b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b06:	e711      	b.n	800492c <_vfiprintf_r+0x50>
 8004b08:	ab03      	add	r3, sp, #12
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	462a      	mov	r2, r5
 8004b0e:	4630      	mov	r0, r6
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <_vfiprintf_r+0x25c>)
 8004b12:	a904      	add	r1, sp, #16
 8004b14:	f000 f882 	bl	8004c1c <_printf_i>
 8004b18:	e7e4      	b.n	8004ae4 <_vfiprintf_r+0x208>
 8004b1a:	bf00      	nop
 8004b1c:	08005954 	.word	0x08005954
 8004b20:	08005974 	.word	0x08005974
 8004b24:	08005934 	.word	0x08005934
 8004b28:	08005900 	.word	0x08005900
 8004b2c:	08005906 	.word	0x08005906
 8004b30:	0800590a 	.word	0x0800590a
 8004b34:	00000000 	.word	0x00000000
 8004b38:	080048b7 	.word	0x080048b7

08004b3c <_printf_common>:
 8004b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b40:	4616      	mov	r6, r2
 8004b42:	4699      	mov	r9, r3
 8004b44:	688a      	ldr	r2, [r1, #8]
 8004b46:	690b      	ldr	r3, [r1, #16]
 8004b48:	4607      	mov	r7, r0
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	bfb8      	it	lt
 8004b4e:	4613      	movlt	r3, r2
 8004b50:	6033      	str	r3, [r6, #0]
 8004b52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b56:	460c      	mov	r4, r1
 8004b58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b5c:	b10a      	cbz	r2, 8004b62 <_printf_common+0x26>
 8004b5e:	3301      	adds	r3, #1
 8004b60:	6033      	str	r3, [r6, #0]
 8004b62:	6823      	ldr	r3, [r4, #0]
 8004b64:	0699      	lsls	r1, r3, #26
 8004b66:	bf42      	ittt	mi
 8004b68:	6833      	ldrmi	r3, [r6, #0]
 8004b6a:	3302      	addmi	r3, #2
 8004b6c:	6033      	strmi	r3, [r6, #0]
 8004b6e:	6825      	ldr	r5, [r4, #0]
 8004b70:	f015 0506 	ands.w	r5, r5, #6
 8004b74:	d106      	bne.n	8004b84 <_printf_common+0x48>
 8004b76:	f104 0a19 	add.w	sl, r4, #25
 8004b7a:	68e3      	ldr	r3, [r4, #12]
 8004b7c:	6832      	ldr	r2, [r6, #0]
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	42ab      	cmp	r3, r5
 8004b82:	dc28      	bgt.n	8004bd6 <_printf_common+0x9a>
 8004b84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b88:	1e13      	subs	r3, r2, #0
 8004b8a:	6822      	ldr	r2, [r4, #0]
 8004b8c:	bf18      	it	ne
 8004b8e:	2301      	movne	r3, #1
 8004b90:	0692      	lsls	r2, r2, #26
 8004b92:	d42d      	bmi.n	8004bf0 <_printf_common+0xb4>
 8004b94:	4649      	mov	r1, r9
 8004b96:	4638      	mov	r0, r7
 8004b98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b9c:	47c0      	blx	r8
 8004b9e:	3001      	adds	r0, #1
 8004ba0:	d020      	beq.n	8004be4 <_printf_common+0xa8>
 8004ba2:	6823      	ldr	r3, [r4, #0]
 8004ba4:	68e5      	ldr	r5, [r4, #12]
 8004ba6:	f003 0306 	and.w	r3, r3, #6
 8004baa:	2b04      	cmp	r3, #4
 8004bac:	bf18      	it	ne
 8004bae:	2500      	movne	r5, #0
 8004bb0:	6832      	ldr	r2, [r6, #0]
 8004bb2:	f04f 0600 	mov.w	r6, #0
 8004bb6:	68a3      	ldr	r3, [r4, #8]
 8004bb8:	bf08      	it	eq
 8004bba:	1aad      	subeq	r5, r5, r2
 8004bbc:	6922      	ldr	r2, [r4, #16]
 8004bbe:	bf08      	it	eq
 8004bc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	bfc4      	itt	gt
 8004bc8:	1a9b      	subgt	r3, r3, r2
 8004bca:	18ed      	addgt	r5, r5, r3
 8004bcc:	341a      	adds	r4, #26
 8004bce:	42b5      	cmp	r5, r6
 8004bd0:	d11a      	bne.n	8004c08 <_printf_common+0xcc>
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	e008      	b.n	8004be8 <_printf_common+0xac>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	4652      	mov	r2, sl
 8004bda:	4649      	mov	r1, r9
 8004bdc:	4638      	mov	r0, r7
 8004bde:	47c0      	blx	r8
 8004be0:	3001      	adds	r0, #1
 8004be2:	d103      	bne.n	8004bec <_printf_common+0xb0>
 8004be4:	f04f 30ff 	mov.w	r0, #4294967295
 8004be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bec:	3501      	adds	r5, #1
 8004bee:	e7c4      	b.n	8004b7a <_printf_common+0x3e>
 8004bf0:	2030      	movs	r0, #48	; 0x30
 8004bf2:	18e1      	adds	r1, r4, r3
 8004bf4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bfe:	4422      	add	r2, r4
 8004c00:	3302      	adds	r3, #2
 8004c02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c06:	e7c5      	b.n	8004b94 <_printf_common+0x58>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	4649      	mov	r1, r9
 8004c0e:	4638      	mov	r0, r7
 8004c10:	47c0      	blx	r8
 8004c12:	3001      	adds	r0, #1
 8004c14:	d0e6      	beq.n	8004be4 <_printf_common+0xa8>
 8004c16:	3601      	adds	r6, #1
 8004c18:	e7d9      	b.n	8004bce <_printf_common+0x92>
	...

08004c1c <_printf_i>:
 8004c1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c20:	7e0f      	ldrb	r7, [r1, #24]
 8004c22:	4691      	mov	r9, r2
 8004c24:	2f78      	cmp	r7, #120	; 0x78
 8004c26:	4680      	mov	r8, r0
 8004c28:	460c      	mov	r4, r1
 8004c2a:	469a      	mov	sl, r3
 8004c2c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c32:	d807      	bhi.n	8004c44 <_printf_i+0x28>
 8004c34:	2f62      	cmp	r7, #98	; 0x62
 8004c36:	d80a      	bhi.n	8004c4e <_printf_i+0x32>
 8004c38:	2f00      	cmp	r7, #0
 8004c3a:	f000 80d9 	beq.w	8004df0 <_printf_i+0x1d4>
 8004c3e:	2f58      	cmp	r7, #88	; 0x58
 8004c40:	f000 80a4 	beq.w	8004d8c <_printf_i+0x170>
 8004c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c4c:	e03a      	b.n	8004cc4 <_printf_i+0xa8>
 8004c4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c52:	2b15      	cmp	r3, #21
 8004c54:	d8f6      	bhi.n	8004c44 <_printf_i+0x28>
 8004c56:	a101      	add	r1, pc, #4	; (adr r1, 8004c5c <_printf_i+0x40>)
 8004c58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c5c:	08004cb5 	.word	0x08004cb5
 8004c60:	08004cc9 	.word	0x08004cc9
 8004c64:	08004c45 	.word	0x08004c45
 8004c68:	08004c45 	.word	0x08004c45
 8004c6c:	08004c45 	.word	0x08004c45
 8004c70:	08004c45 	.word	0x08004c45
 8004c74:	08004cc9 	.word	0x08004cc9
 8004c78:	08004c45 	.word	0x08004c45
 8004c7c:	08004c45 	.word	0x08004c45
 8004c80:	08004c45 	.word	0x08004c45
 8004c84:	08004c45 	.word	0x08004c45
 8004c88:	08004dd7 	.word	0x08004dd7
 8004c8c:	08004cf9 	.word	0x08004cf9
 8004c90:	08004db9 	.word	0x08004db9
 8004c94:	08004c45 	.word	0x08004c45
 8004c98:	08004c45 	.word	0x08004c45
 8004c9c:	08004df9 	.word	0x08004df9
 8004ca0:	08004c45 	.word	0x08004c45
 8004ca4:	08004cf9 	.word	0x08004cf9
 8004ca8:	08004c45 	.word	0x08004c45
 8004cac:	08004c45 	.word	0x08004c45
 8004cb0:	08004dc1 	.word	0x08004dc1
 8004cb4:	682b      	ldr	r3, [r5, #0]
 8004cb6:	1d1a      	adds	r2, r3, #4
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	602a      	str	r2, [r5, #0]
 8004cbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0a4      	b.n	8004e12 <_printf_i+0x1f6>
 8004cc8:	6820      	ldr	r0, [r4, #0]
 8004cca:	6829      	ldr	r1, [r5, #0]
 8004ccc:	0606      	lsls	r6, r0, #24
 8004cce:	f101 0304 	add.w	r3, r1, #4
 8004cd2:	d50a      	bpl.n	8004cea <_printf_i+0xce>
 8004cd4:	680e      	ldr	r6, [r1, #0]
 8004cd6:	602b      	str	r3, [r5, #0]
 8004cd8:	2e00      	cmp	r6, #0
 8004cda:	da03      	bge.n	8004ce4 <_printf_i+0xc8>
 8004cdc:	232d      	movs	r3, #45	; 0x2d
 8004cde:	4276      	negs	r6, r6
 8004ce0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ce4:	230a      	movs	r3, #10
 8004ce6:	485e      	ldr	r0, [pc, #376]	; (8004e60 <_printf_i+0x244>)
 8004ce8:	e019      	b.n	8004d1e <_printf_i+0x102>
 8004cea:	680e      	ldr	r6, [r1, #0]
 8004cec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cf0:	602b      	str	r3, [r5, #0]
 8004cf2:	bf18      	it	ne
 8004cf4:	b236      	sxthne	r6, r6
 8004cf6:	e7ef      	b.n	8004cd8 <_printf_i+0xbc>
 8004cf8:	682b      	ldr	r3, [r5, #0]
 8004cfa:	6820      	ldr	r0, [r4, #0]
 8004cfc:	1d19      	adds	r1, r3, #4
 8004cfe:	6029      	str	r1, [r5, #0]
 8004d00:	0601      	lsls	r1, r0, #24
 8004d02:	d501      	bpl.n	8004d08 <_printf_i+0xec>
 8004d04:	681e      	ldr	r6, [r3, #0]
 8004d06:	e002      	b.n	8004d0e <_printf_i+0xf2>
 8004d08:	0646      	lsls	r6, r0, #25
 8004d0a:	d5fb      	bpl.n	8004d04 <_printf_i+0xe8>
 8004d0c:	881e      	ldrh	r6, [r3, #0]
 8004d0e:	2f6f      	cmp	r7, #111	; 0x6f
 8004d10:	bf0c      	ite	eq
 8004d12:	2308      	moveq	r3, #8
 8004d14:	230a      	movne	r3, #10
 8004d16:	4852      	ldr	r0, [pc, #328]	; (8004e60 <_printf_i+0x244>)
 8004d18:	2100      	movs	r1, #0
 8004d1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d1e:	6865      	ldr	r5, [r4, #4]
 8004d20:	2d00      	cmp	r5, #0
 8004d22:	bfa8      	it	ge
 8004d24:	6821      	ldrge	r1, [r4, #0]
 8004d26:	60a5      	str	r5, [r4, #8]
 8004d28:	bfa4      	itt	ge
 8004d2a:	f021 0104 	bicge.w	r1, r1, #4
 8004d2e:	6021      	strge	r1, [r4, #0]
 8004d30:	b90e      	cbnz	r6, 8004d36 <_printf_i+0x11a>
 8004d32:	2d00      	cmp	r5, #0
 8004d34:	d04d      	beq.n	8004dd2 <_printf_i+0x1b6>
 8004d36:	4615      	mov	r5, r2
 8004d38:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d3c:	fb03 6711 	mls	r7, r3, r1, r6
 8004d40:	5dc7      	ldrb	r7, [r0, r7]
 8004d42:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d46:	4637      	mov	r7, r6
 8004d48:	42bb      	cmp	r3, r7
 8004d4a:	460e      	mov	r6, r1
 8004d4c:	d9f4      	bls.n	8004d38 <_printf_i+0x11c>
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	d10b      	bne.n	8004d6a <_printf_i+0x14e>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	07de      	lsls	r6, r3, #31
 8004d56:	d508      	bpl.n	8004d6a <_printf_i+0x14e>
 8004d58:	6923      	ldr	r3, [r4, #16]
 8004d5a:	6861      	ldr	r1, [r4, #4]
 8004d5c:	4299      	cmp	r1, r3
 8004d5e:	bfde      	ittt	le
 8004d60:	2330      	movle	r3, #48	; 0x30
 8004d62:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d66:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d6a:	1b52      	subs	r2, r2, r5
 8004d6c:	6122      	str	r2, [r4, #16]
 8004d6e:	464b      	mov	r3, r9
 8004d70:	4621      	mov	r1, r4
 8004d72:	4640      	mov	r0, r8
 8004d74:	f8cd a000 	str.w	sl, [sp]
 8004d78:	aa03      	add	r2, sp, #12
 8004d7a:	f7ff fedf 	bl	8004b3c <_printf_common>
 8004d7e:	3001      	adds	r0, #1
 8004d80:	d14c      	bne.n	8004e1c <_printf_i+0x200>
 8004d82:	f04f 30ff 	mov.w	r0, #4294967295
 8004d86:	b004      	add	sp, #16
 8004d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d8c:	4834      	ldr	r0, [pc, #208]	; (8004e60 <_printf_i+0x244>)
 8004d8e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d92:	6829      	ldr	r1, [r5, #0]
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d9a:	6029      	str	r1, [r5, #0]
 8004d9c:	061d      	lsls	r5, r3, #24
 8004d9e:	d514      	bpl.n	8004dca <_printf_i+0x1ae>
 8004da0:	07df      	lsls	r7, r3, #31
 8004da2:	bf44      	itt	mi
 8004da4:	f043 0320 	orrmi.w	r3, r3, #32
 8004da8:	6023      	strmi	r3, [r4, #0]
 8004daa:	b91e      	cbnz	r6, 8004db4 <_printf_i+0x198>
 8004dac:	6823      	ldr	r3, [r4, #0]
 8004dae:	f023 0320 	bic.w	r3, r3, #32
 8004db2:	6023      	str	r3, [r4, #0]
 8004db4:	2310      	movs	r3, #16
 8004db6:	e7af      	b.n	8004d18 <_printf_i+0xfc>
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	f043 0320 	orr.w	r3, r3, #32
 8004dbe:	6023      	str	r3, [r4, #0]
 8004dc0:	2378      	movs	r3, #120	; 0x78
 8004dc2:	4828      	ldr	r0, [pc, #160]	; (8004e64 <_printf_i+0x248>)
 8004dc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004dc8:	e7e3      	b.n	8004d92 <_printf_i+0x176>
 8004dca:	0659      	lsls	r1, r3, #25
 8004dcc:	bf48      	it	mi
 8004dce:	b2b6      	uxthmi	r6, r6
 8004dd0:	e7e6      	b.n	8004da0 <_printf_i+0x184>
 8004dd2:	4615      	mov	r5, r2
 8004dd4:	e7bb      	b.n	8004d4e <_printf_i+0x132>
 8004dd6:	682b      	ldr	r3, [r5, #0]
 8004dd8:	6826      	ldr	r6, [r4, #0]
 8004dda:	1d18      	adds	r0, r3, #4
 8004ddc:	6961      	ldr	r1, [r4, #20]
 8004dde:	6028      	str	r0, [r5, #0]
 8004de0:	0635      	lsls	r5, r6, #24
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	d501      	bpl.n	8004dea <_printf_i+0x1ce>
 8004de6:	6019      	str	r1, [r3, #0]
 8004de8:	e002      	b.n	8004df0 <_printf_i+0x1d4>
 8004dea:	0670      	lsls	r0, r6, #25
 8004dec:	d5fb      	bpl.n	8004de6 <_printf_i+0x1ca>
 8004dee:	8019      	strh	r1, [r3, #0]
 8004df0:	2300      	movs	r3, #0
 8004df2:	4615      	mov	r5, r2
 8004df4:	6123      	str	r3, [r4, #16]
 8004df6:	e7ba      	b.n	8004d6e <_printf_i+0x152>
 8004df8:	682b      	ldr	r3, [r5, #0]
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	1d1a      	adds	r2, r3, #4
 8004dfe:	602a      	str	r2, [r5, #0]
 8004e00:	681d      	ldr	r5, [r3, #0]
 8004e02:	6862      	ldr	r2, [r4, #4]
 8004e04:	4628      	mov	r0, r5
 8004e06:	f000 fb13 	bl	8005430 <memchr>
 8004e0a:	b108      	cbz	r0, 8004e10 <_printf_i+0x1f4>
 8004e0c:	1b40      	subs	r0, r0, r5
 8004e0e:	6060      	str	r0, [r4, #4]
 8004e10:	6863      	ldr	r3, [r4, #4]
 8004e12:	6123      	str	r3, [r4, #16]
 8004e14:	2300      	movs	r3, #0
 8004e16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e1a:	e7a8      	b.n	8004d6e <_printf_i+0x152>
 8004e1c:	462a      	mov	r2, r5
 8004e1e:	4649      	mov	r1, r9
 8004e20:	4640      	mov	r0, r8
 8004e22:	6923      	ldr	r3, [r4, #16]
 8004e24:	47d0      	blx	sl
 8004e26:	3001      	adds	r0, #1
 8004e28:	d0ab      	beq.n	8004d82 <_printf_i+0x166>
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	079b      	lsls	r3, r3, #30
 8004e2e:	d413      	bmi.n	8004e58 <_printf_i+0x23c>
 8004e30:	68e0      	ldr	r0, [r4, #12]
 8004e32:	9b03      	ldr	r3, [sp, #12]
 8004e34:	4298      	cmp	r0, r3
 8004e36:	bfb8      	it	lt
 8004e38:	4618      	movlt	r0, r3
 8004e3a:	e7a4      	b.n	8004d86 <_printf_i+0x16a>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	4632      	mov	r2, r6
 8004e40:	4649      	mov	r1, r9
 8004e42:	4640      	mov	r0, r8
 8004e44:	47d0      	blx	sl
 8004e46:	3001      	adds	r0, #1
 8004e48:	d09b      	beq.n	8004d82 <_printf_i+0x166>
 8004e4a:	3501      	adds	r5, #1
 8004e4c:	68e3      	ldr	r3, [r4, #12]
 8004e4e:	9903      	ldr	r1, [sp, #12]
 8004e50:	1a5b      	subs	r3, r3, r1
 8004e52:	42ab      	cmp	r3, r5
 8004e54:	dcf2      	bgt.n	8004e3c <_printf_i+0x220>
 8004e56:	e7eb      	b.n	8004e30 <_printf_i+0x214>
 8004e58:	2500      	movs	r5, #0
 8004e5a:	f104 0619 	add.w	r6, r4, #25
 8004e5e:	e7f5      	b.n	8004e4c <_printf_i+0x230>
 8004e60:	08005911 	.word	0x08005911
 8004e64:	08005922 	.word	0x08005922

08004e68 <__swbuf_r>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	460e      	mov	r6, r1
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	4605      	mov	r5, r0
 8004e70:	b118      	cbz	r0, 8004e7a <__swbuf_r+0x12>
 8004e72:	6983      	ldr	r3, [r0, #24]
 8004e74:	b90b      	cbnz	r3, 8004e7a <__swbuf_r+0x12>
 8004e76:	f000 f9d5 	bl	8005224 <__sinit>
 8004e7a:	4b21      	ldr	r3, [pc, #132]	; (8004f00 <__swbuf_r+0x98>)
 8004e7c:	429c      	cmp	r4, r3
 8004e7e:	d12b      	bne.n	8004ed8 <__swbuf_r+0x70>
 8004e80:	686c      	ldr	r4, [r5, #4]
 8004e82:	69a3      	ldr	r3, [r4, #24]
 8004e84:	60a3      	str	r3, [r4, #8]
 8004e86:	89a3      	ldrh	r3, [r4, #12]
 8004e88:	071a      	lsls	r2, r3, #28
 8004e8a:	d52f      	bpl.n	8004eec <__swbuf_r+0x84>
 8004e8c:	6923      	ldr	r3, [r4, #16]
 8004e8e:	b36b      	cbz	r3, 8004eec <__swbuf_r+0x84>
 8004e90:	6923      	ldr	r3, [r4, #16]
 8004e92:	6820      	ldr	r0, [r4, #0]
 8004e94:	b2f6      	uxtb	r6, r6
 8004e96:	1ac0      	subs	r0, r0, r3
 8004e98:	6963      	ldr	r3, [r4, #20]
 8004e9a:	4637      	mov	r7, r6
 8004e9c:	4283      	cmp	r3, r0
 8004e9e:	dc04      	bgt.n	8004eaa <__swbuf_r+0x42>
 8004ea0:	4621      	mov	r1, r4
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	f000 f92a 	bl	80050fc <_fflush_r>
 8004ea8:	bb30      	cbnz	r0, 8004ef8 <__swbuf_r+0x90>
 8004eaa:	68a3      	ldr	r3, [r4, #8]
 8004eac:	3001      	adds	r0, #1
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	60a3      	str	r3, [r4, #8]
 8004eb2:	6823      	ldr	r3, [r4, #0]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	6022      	str	r2, [r4, #0]
 8004eb8:	701e      	strb	r6, [r3, #0]
 8004eba:	6963      	ldr	r3, [r4, #20]
 8004ebc:	4283      	cmp	r3, r0
 8004ebe:	d004      	beq.n	8004eca <__swbuf_r+0x62>
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	07db      	lsls	r3, r3, #31
 8004ec4:	d506      	bpl.n	8004ed4 <__swbuf_r+0x6c>
 8004ec6:	2e0a      	cmp	r6, #10
 8004ec8:	d104      	bne.n	8004ed4 <__swbuf_r+0x6c>
 8004eca:	4621      	mov	r1, r4
 8004ecc:	4628      	mov	r0, r5
 8004ece:	f000 f915 	bl	80050fc <_fflush_r>
 8004ed2:	b988      	cbnz	r0, 8004ef8 <__swbuf_r+0x90>
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <__swbuf_r+0x9c>)
 8004eda:	429c      	cmp	r4, r3
 8004edc:	d101      	bne.n	8004ee2 <__swbuf_r+0x7a>
 8004ede:	68ac      	ldr	r4, [r5, #8]
 8004ee0:	e7cf      	b.n	8004e82 <__swbuf_r+0x1a>
 8004ee2:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <__swbuf_r+0xa0>)
 8004ee4:	429c      	cmp	r4, r3
 8004ee6:	bf08      	it	eq
 8004ee8:	68ec      	ldreq	r4, [r5, #12]
 8004eea:	e7ca      	b.n	8004e82 <__swbuf_r+0x1a>
 8004eec:	4621      	mov	r1, r4
 8004eee:	4628      	mov	r0, r5
 8004ef0:	f000 f80c 	bl	8004f0c <__swsetup_r>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	d0cb      	beq.n	8004e90 <__swbuf_r+0x28>
 8004ef8:	f04f 37ff 	mov.w	r7, #4294967295
 8004efc:	e7ea      	b.n	8004ed4 <__swbuf_r+0x6c>
 8004efe:	bf00      	nop
 8004f00:	08005954 	.word	0x08005954
 8004f04:	08005974 	.word	0x08005974
 8004f08:	08005934 	.word	0x08005934

08004f0c <__swsetup_r>:
 8004f0c:	4b32      	ldr	r3, [pc, #200]	; (8004fd8 <__swsetup_r+0xcc>)
 8004f0e:	b570      	push	{r4, r5, r6, lr}
 8004f10:	681d      	ldr	r5, [r3, #0]
 8004f12:	4606      	mov	r6, r0
 8004f14:	460c      	mov	r4, r1
 8004f16:	b125      	cbz	r5, 8004f22 <__swsetup_r+0x16>
 8004f18:	69ab      	ldr	r3, [r5, #24]
 8004f1a:	b913      	cbnz	r3, 8004f22 <__swsetup_r+0x16>
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f000 f981 	bl	8005224 <__sinit>
 8004f22:	4b2e      	ldr	r3, [pc, #184]	; (8004fdc <__swsetup_r+0xd0>)
 8004f24:	429c      	cmp	r4, r3
 8004f26:	d10f      	bne.n	8004f48 <__swsetup_r+0x3c>
 8004f28:	686c      	ldr	r4, [r5, #4]
 8004f2a:	89a3      	ldrh	r3, [r4, #12]
 8004f2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f30:	0719      	lsls	r1, r3, #28
 8004f32:	d42c      	bmi.n	8004f8e <__swsetup_r+0x82>
 8004f34:	06dd      	lsls	r5, r3, #27
 8004f36:	d411      	bmi.n	8004f5c <__swsetup_r+0x50>
 8004f38:	2309      	movs	r3, #9
 8004f3a:	6033      	str	r3, [r6, #0]
 8004f3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295
 8004f44:	81a3      	strh	r3, [r4, #12]
 8004f46:	e03e      	b.n	8004fc6 <__swsetup_r+0xba>
 8004f48:	4b25      	ldr	r3, [pc, #148]	; (8004fe0 <__swsetup_r+0xd4>)
 8004f4a:	429c      	cmp	r4, r3
 8004f4c:	d101      	bne.n	8004f52 <__swsetup_r+0x46>
 8004f4e:	68ac      	ldr	r4, [r5, #8]
 8004f50:	e7eb      	b.n	8004f2a <__swsetup_r+0x1e>
 8004f52:	4b24      	ldr	r3, [pc, #144]	; (8004fe4 <__swsetup_r+0xd8>)
 8004f54:	429c      	cmp	r4, r3
 8004f56:	bf08      	it	eq
 8004f58:	68ec      	ldreq	r4, [r5, #12]
 8004f5a:	e7e6      	b.n	8004f2a <__swsetup_r+0x1e>
 8004f5c:	0758      	lsls	r0, r3, #29
 8004f5e:	d512      	bpl.n	8004f86 <__swsetup_r+0x7a>
 8004f60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f62:	b141      	cbz	r1, 8004f76 <__swsetup_r+0x6a>
 8004f64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f68:	4299      	cmp	r1, r3
 8004f6a:	d002      	beq.n	8004f72 <__swsetup_r+0x66>
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f000 fa6d 	bl	800544c <_free_r>
 8004f72:	2300      	movs	r3, #0
 8004f74:	6363      	str	r3, [r4, #52]	; 0x34
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f7c:	81a3      	strh	r3, [r4, #12]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	6063      	str	r3, [r4, #4]
 8004f82:	6923      	ldr	r3, [r4, #16]
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	89a3      	ldrh	r3, [r4, #12]
 8004f88:	f043 0308 	orr.w	r3, r3, #8
 8004f8c:	81a3      	strh	r3, [r4, #12]
 8004f8e:	6923      	ldr	r3, [r4, #16]
 8004f90:	b94b      	cbnz	r3, 8004fa6 <__swsetup_r+0x9a>
 8004f92:	89a3      	ldrh	r3, [r4, #12]
 8004f94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f9c:	d003      	beq.n	8004fa6 <__swsetup_r+0x9a>
 8004f9e:	4621      	mov	r1, r4
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f000 fa05 	bl	80053b0 <__smakebuf_r>
 8004fa6:	89a0      	ldrh	r0, [r4, #12]
 8004fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fac:	f010 0301 	ands.w	r3, r0, #1
 8004fb0:	d00a      	beq.n	8004fc8 <__swsetup_r+0xbc>
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60a3      	str	r3, [r4, #8]
 8004fb6:	6963      	ldr	r3, [r4, #20]
 8004fb8:	425b      	negs	r3, r3
 8004fba:	61a3      	str	r3, [r4, #24]
 8004fbc:	6923      	ldr	r3, [r4, #16]
 8004fbe:	b943      	cbnz	r3, 8004fd2 <__swsetup_r+0xc6>
 8004fc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004fc4:	d1ba      	bne.n	8004f3c <__swsetup_r+0x30>
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
 8004fc8:	0781      	lsls	r1, r0, #30
 8004fca:	bf58      	it	pl
 8004fcc:	6963      	ldrpl	r3, [r4, #20]
 8004fce:	60a3      	str	r3, [r4, #8]
 8004fd0:	e7f4      	b.n	8004fbc <__swsetup_r+0xb0>
 8004fd2:	2000      	movs	r0, #0
 8004fd4:	e7f7      	b.n	8004fc6 <__swsetup_r+0xba>
 8004fd6:	bf00      	nop
 8004fd8:	20000010 	.word	0x20000010
 8004fdc:	08005954 	.word	0x08005954
 8004fe0:	08005974 	.word	0x08005974
 8004fe4:	08005934 	.word	0x08005934

08004fe8 <abort>:
 8004fe8:	2006      	movs	r0, #6
 8004fea:	b508      	push	{r3, lr}
 8004fec:	f000 fb42 	bl	8005674 <raise>
 8004ff0:	2001      	movs	r0, #1
 8004ff2:	f7fc f8fa 	bl	80011ea <_exit>
	...

08004ff8 <__sflush_r>:
 8004ff8:	898a      	ldrh	r2, [r1, #12]
 8004ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffc:	4605      	mov	r5, r0
 8004ffe:	0710      	lsls	r0, r2, #28
 8005000:	460c      	mov	r4, r1
 8005002:	d457      	bmi.n	80050b4 <__sflush_r+0xbc>
 8005004:	684b      	ldr	r3, [r1, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	dc04      	bgt.n	8005014 <__sflush_r+0x1c>
 800500a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	dc01      	bgt.n	8005014 <__sflush_r+0x1c>
 8005010:	2000      	movs	r0, #0
 8005012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005014:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005016:	2e00      	cmp	r6, #0
 8005018:	d0fa      	beq.n	8005010 <__sflush_r+0x18>
 800501a:	2300      	movs	r3, #0
 800501c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005020:	682f      	ldr	r7, [r5, #0]
 8005022:	602b      	str	r3, [r5, #0]
 8005024:	d032      	beq.n	800508c <__sflush_r+0x94>
 8005026:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005028:	89a3      	ldrh	r3, [r4, #12]
 800502a:	075a      	lsls	r2, r3, #29
 800502c:	d505      	bpl.n	800503a <__sflush_r+0x42>
 800502e:	6863      	ldr	r3, [r4, #4]
 8005030:	1ac0      	subs	r0, r0, r3
 8005032:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005034:	b10b      	cbz	r3, 800503a <__sflush_r+0x42>
 8005036:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005038:	1ac0      	subs	r0, r0, r3
 800503a:	2300      	movs	r3, #0
 800503c:	4602      	mov	r2, r0
 800503e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005040:	4628      	mov	r0, r5
 8005042:	6a21      	ldr	r1, [r4, #32]
 8005044:	47b0      	blx	r6
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	89a3      	ldrh	r3, [r4, #12]
 800504a:	d106      	bne.n	800505a <__sflush_r+0x62>
 800504c:	6829      	ldr	r1, [r5, #0]
 800504e:	291d      	cmp	r1, #29
 8005050:	d82c      	bhi.n	80050ac <__sflush_r+0xb4>
 8005052:	4a29      	ldr	r2, [pc, #164]	; (80050f8 <__sflush_r+0x100>)
 8005054:	40ca      	lsrs	r2, r1
 8005056:	07d6      	lsls	r6, r2, #31
 8005058:	d528      	bpl.n	80050ac <__sflush_r+0xb4>
 800505a:	2200      	movs	r2, #0
 800505c:	6062      	str	r2, [r4, #4]
 800505e:	6922      	ldr	r2, [r4, #16]
 8005060:	04d9      	lsls	r1, r3, #19
 8005062:	6022      	str	r2, [r4, #0]
 8005064:	d504      	bpl.n	8005070 <__sflush_r+0x78>
 8005066:	1c42      	adds	r2, r0, #1
 8005068:	d101      	bne.n	800506e <__sflush_r+0x76>
 800506a:	682b      	ldr	r3, [r5, #0]
 800506c:	b903      	cbnz	r3, 8005070 <__sflush_r+0x78>
 800506e:	6560      	str	r0, [r4, #84]	; 0x54
 8005070:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005072:	602f      	str	r7, [r5, #0]
 8005074:	2900      	cmp	r1, #0
 8005076:	d0cb      	beq.n	8005010 <__sflush_r+0x18>
 8005078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800507c:	4299      	cmp	r1, r3
 800507e:	d002      	beq.n	8005086 <__sflush_r+0x8e>
 8005080:	4628      	mov	r0, r5
 8005082:	f000 f9e3 	bl	800544c <_free_r>
 8005086:	2000      	movs	r0, #0
 8005088:	6360      	str	r0, [r4, #52]	; 0x34
 800508a:	e7c2      	b.n	8005012 <__sflush_r+0x1a>
 800508c:	6a21      	ldr	r1, [r4, #32]
 800508e:	2301      	movs	r3, #1
 8005090:	4628      	mov	r0, r5
 8005092:	47b0      	blx	r6
 8005094:	1c41      	adds	r1, r0, #1
 8005096:	d1c7      	bne.n	8005028 <__sflush_r+0x30>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0c4      	beq.n	8005028 <__sflush_r+0x30>
 800509e:	2b1d      	cmp	r3, #29
 80050a0:	d001      	beq.n	80050a6 <__sflush_r+0xae>
 80050a2:	2b16      	cmp	r3, #22
 80050a4:	d101      	bne.n	80050aa <__sflush_r+0xb2>
 80050a6:	602f      	str	r7, [r5, #0]
 80050a8:	e7b2      	b.n	8005010 <__sflush_r+0x18>
 80050aa:	89a3      	ldrh	r3, [r4, #12]
 80050ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050b0:	81a3      	strh	r3, [r4, #12]
 80050b2:	e7ae      	b.n	8005012 <__sflush_r+0x1a>
 80050b4:	690f      	ldr	r7, [r1, #16]
 80050b6:	2f00      	cmp	r7, #0
 80050b8:	d0aa      	beq.n	8005010 <__sflush_r+0x18>
 80050ba:	0793      	lsls	r3, r2, #30
 80050bc:	bf18      	it	ne
 80050be:	2300      	movne	r3, #0
 80050c0:	680e      	ldr	r6, [r1, #0]
 80050c2:	bf08      	it	eq
 80050c4:	694b      	ldreq	r3, [r1, #20]
 80050c6:	1bf6      	subs	r6, r6, r7
 80050c8:	600f      	str	r7, [r1, #0]
 80050ca:	608b      	str	r3, [r1, #8]
 80050cc:	2e00      	cmp	r6, #0
 80050ce:	dd9f      	ble.n	8005010 <__sflush_r+0x18>
 80050d0:	4633      	mov	r3, r6
 80050d2:	463a      	mov	r2, r7
 80050d4:	4628      	mov	r0, r5
 80050d6:	6a21      	ldr	r1, [r4, #32]
 80050d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80050dc:	47e0      	blx	ip
 80050de:	2800      	cmp	r0, #0
 80050e0:	dc06      	bgt.n	80050f0 <__sflush_r+0xf8>
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	f04f 30ff 	mov.w	r0, #4294967295
 80050e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	e790      	b.n	8005012 <__sflush_r+0x1a>
 80050f0:	4407      	add	r7, r0
 80050f2:	1a36      	subs	r6, r6, r0
 80050f4:	e7ea      	b.n	80050cc <__sflush_r+0xd4>
 80050f6:	bf00      	nop
 80050f8:	20400001 	.word	0x20400001

080050fc <_fflush_r>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	690b      	ldr	r3, [r1, #16]
 8005100:	4605      	mov	r5, r0
 8005102:	460c      	mov	r4, r1
 8005104:	b913      	cbnz	r3, 800510c <_fflush_r+0x10>
 8005106:	2500      	movs	r5, #0
 8005108:	4628      	mov	r0, r5
 800510a:	bd38      	pop	{r3, r4, r5, pc}
 800510c:	b118      	cbz	r0, 8005116 <_fflush_r+0x1a>
 800510e:	6983      	ldr	r3, [r0, #24]
 8005110:	b90b      	cbnz	r3, 8005116 <_fflush_r+0x1a>
 8005112:	f000 f887 	bl	8005224 <__sinit>
 8005116:	4b14      	ldr	r3, [pc, #80]	; (8005168 <_fflush_r+0x6c>)
 8005118:	429c      	cmp	r4, r3
 800511a:	d11b      	bne.n	8005154 <_fflush_r+0x58>
 800511c:	686c      	ldr	r4, [r5, #4]
 800511e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d0ef      	beq.n	8005106 <_fflush_r+0xa>
 8005126:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005128:	07d0      	lsls	r0, r2, #31
 800512a:	d404      	bmi.n	8005136 <_fflush_r+0x3a>
 800512c:	0599      	lsls	r1, r3, #22
 800512e:	d402      	bmi.n	8005136 <_fflush_r+0x3a>
 8005130:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005132:	f000 f915 	bl	8005360 <__retarget_lock_acquire_recursive>
 8005136:	4628      	mov	r0, r5
 8005138:	4621      	mov	r1, r4
 800513a:	f7ff ff5d 	bl	8004ff8 <__sflush_r>
 800513e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005140:	4605      	mov	r5, r0
 8005142:	07da      	lsls	r2, r3, #31
 8005144:	d4e0      	bmi.n	8005108 <_fflush_r+0xc>
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	059b      	lsls	r3, r3, #22
 800514a:	d4dd      	bmi.n	8005108 <_fflush_r+0xc>
 800514c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800514e:	f000 f908 	bl	8005362 <__retarget_lock_release_recursive>
 8005152:	e7d9      	b.n	8005108 <_fflush_r+0xc>
 8005154:	4b05      	ldr	r3, [pc, #20]	; (800516c <_fflush_r+0x70>)
 8005156:	429c      	cmp	r4, r3
 8005158:	d101      	bne.n	800515e <_fflush_r+0x62>
 800515a:	68ac      	ldr	r4, [r5, #8]
 800515c:	e7df      	b.n	800511e <_fflush_r+0x22>
 800515e:	4b04      	ldr	r3, [pc, #16]	; (8005170 <_fflush_r+0x74>)
 8005160:	429c      	cmp	r4, r3
 8005162:	bf08      	it	eq
 8005164:	68ec      	ldreq	r4, [r5, #12]
 8005166:	e7da      	b.n	800511e <_fflush_r+0x22>
 8005168:	08005954 	.word	0x08005954
 800516c:	08005974 	.word	0x08005974
 8005170:	08005934 	.word	0x08005934

08005174 <std>:
 8005174:	2300      	movs	r3, #0
 8005176:	b510      	push	{r4, lr}
 8005178:	4604      	mov	r4, r0
 800517a:	e9c0 3300 	strd	r3, r3, [r0]
 800517e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005182:	6083      	str	r3, [r0, #8]
 8005184:	8181      	strh	r1, [r0, #12]
 8005186:	6643      	str	r3, [r0, #100]	; 0x64
 8005188:	81c2      	strh	r2, [r0, #14]
 800518a:	6183      	str	r3, [r0, #24]
 800518c:	4619      	mov	r1, r3
 800518e:	2208      	movs	r2, #8
 8005190:	305c      	adds	r0, #92	; 0x5c
 8005192:	f7ff fb73 	bl	800487c <memset>
 8005196:	4b05      	ldr	r3, [pc, #20]	; (80051ac <std+0x38>)
 8005198:	6224      	str	r4, [r4, #32]
 800519a:	6263      	str	r3, [r4, #36]	; 0x24
 800519c:	4b04      	ldr	r3, [pc, #16]	; (80051b0 <std+0x3c>)
 800519e:	62a3      	str	r3, [r4, #40]	; 0x28
 80051a0:	4b04      	ldr	r3, [pc, #16]	; (80051b4 <std+0x40>)
 80051a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051a4:	4b04      	ldr	r3, [pc, #16]	; (80051b8 <std+0x44>)
 80051a6:	6323      	str	r3, [r4, #48]	; 0x30
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	bf00      	nop
 80051ac:	080056ad 	.word	0x080056ad
 80051b0:	080056cf 	.word	0x080056cf
 80051b4:	08005707 	.word	0x08005707
 80051b8:	0800572b 	.word	0x0800572b

080051bc <_cleanup_r>:
 80051bc:	4901      	ldr	r1, [pc, #4]	; (80051c4 <_cleanup_r+0x8>)
 80051be:	f000 b8af 	b.w	8005320 <_fwalk_reent>
 80051c2:	bf00      	nop
 80051c4:	080050fd 	.word	0x080050fd

080051c8 <__sfmoreglue>:
 80051c8:	2268      	movs	r2, #104	; 0x68
 80051ca:	b570      	push	{r4, r5, r6, lr}
 80051cc:	1e4d      	subs	r5, r1, #1
 80051ce:	4355      	muls	r5, r2
 80051d0:	460e      	mov	r6, r1
 80051d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80051d6:	f000 f9a1 	bl	800551c <_malloc_r>
 80051da:	4604      	mov	r4, r0
 80051dc:	b140      	cbz	r0, 80051f0 <__sfmoreglue+0x28>
 80051de:	2100      	movs	r1, #0
 80051e0:	e9c0 1600 	strd	r1, r6, [r0]
 80051e4:	300c      	adds	r0, #12
 80051e6:	60a0      	str	r0, [r4, #8]
 80051e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80051ec:	f7ff fb46 	bl	800487c <memset>
 80051f0:	4620      	mov	r0, r4
 80051f2:	bd70      	pop	{r4, r5, r6, pc}

080051f4 <__sfp_lock_acquire>:
 80051f4:	4801      	ldr	r0, [pc, #4]	; (80051fc <__sfp_lock_acquire+0x8>)
 80051f6:	f000 b8b3 	b.w	8005360 <__retarget_lock_acquire_recursive>
 80051fa:	bf00      	nop
 80051fc:	200004a1 	.word	0x200004a1

08005200 <__sfp_lock_release>:
 8005200:	4801      	ldr	r0, [pc, #4]	; (8005208 <__sfp_lock_release+0x8>)
 8005202:	f000 b8ae 	b.w	8005362 <__retarget_lock_release_recursive>
 8005206:	bf00      	nop
 8005208:	200004a1 	.word	0x200004a1

0800520c <__sinit_lock_acquire>:
 800520c:	4801      	ldr	r0, [pc, #4]	; (8005214 <__sinit_lock_acquire+0x8>)
 800520e:	f000 b8a7 	b.w	8005360 <__retarget_lock_acquire_recursive>
 8005212:	bf00      	nop
 8005214:	200004a2 	.word	0x200004a2

08005218 <__sinit_lock_release>:
 8005218:	4801      	ldr	r0, [pc, #4]	; (8005220 <__sinit_lock_release+0x8>)
 800521a:	f000 b8a2 	b.w	8005362 <__retarget_lock_release_recursive>
 800521e:	bf00      	nop
 8005220:	200004a2 	.word	0x200004a2

08005224 <__sinit>:
 8005224:	b510      	push	{r4, lr}
 8005226:	4604      	mov	r4, r0
 8005228:	f7ff fff0 	bl	800520c <__sinit_lock_acquire>
 800522c:	69a3      	ldr	r3, [r4, #24]
 800522e:	b11b      	cbz	r3, 8005238 <__sinit+0x14>
 8005230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005234:	f7ff bff0 	b.w	8005218 <__sinit_lock_release>
 8005238:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800523c:	6523      	str	r3, [r4, #80]	; 0x50
 800523e:	4b13      	ldr	r3, [pc, #76]	; (800528c <__sinit+0x68>)
 8005240:	4a13      	ldr	r2, [pc, #76]	; (8005290 <__sinit+0x6c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	62a2      	str	r2, [r4, #40]	; 0x28
 8005246:	42a3      	cmp	r3, r4
 8005248:	bf08      	it	eq
 800524a:	2301      	moveq	r3, #1
 800524c:	4620      	mov	r0, r4
 800524e:	bf08      	it	eq
 8005250:	61a3      	streq	r3, [r4, #24]
 8005252:	f000 f81f 	bl	8005294 <__sfp>
 8005256:	6060      	str	r0, [r4, #4]
 8005258:	4620      	mov	r0, r4
 800525a:	f000 f81b 	bl	8005294 <__sfp>
 800525e:	60a0      	str	r0, [r4, #8]
 8005260:	4620      	mov	r0, r4
 8005262:	f000 f817 	bl	8005294 <__sfp>
 8005266:	2200      	movs	r2, #0
 8005268:	2104      	movs	r1, #4
 800526a:	60e0      	str	r0, [r4, #12]
 800526c:	6860      	ldr	r0, [r4, #4]
 800526e:	f7ff ff81 	bl	8005174 <std>
 8005272:	2201      	movs	r2, #1
 8005274:	2109      	movs	r1, #9
 8005276:	68a0      	ldr	r0, [r4, #8]
 8005278:	f7ff ff7c 	bl	8005174 <std>
 800527c:	2202      	movs	r2, #2
 800527e:	2112      	movs	r1, #18
 8005280:	68e0      	ldr	r0, [r4, #12]
 8005282:	f7ff ff77 	bl	8005174 <std>
 8005286:	2301      	movs	r3, #1
 8005288:	61a3      	str	r3, [r4, #24]
 800528a:	e7d1      	b.n	8005230 <__sinit+0xc>
 800528c:	080058fc 	.word	0x080058fc
 8005290:	080051bd 	.word	0x080051bd

08005294 <__sfp>:
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	4607      	mov	r7, r0
 8005298:	f7ff ffac 	bl	80051f4 <__sfp_lock_acquire>
 800529c:	4b1e      	ldr	r3, [pc, #120]	; (8005318 <__sfp+0x84>)
 800529e:	681e      	ldr	r6, [r3, #0]
 80052a0:	69b3      	ldr	r3, [r6, #24]
 80052a2:	b913      	cbnz	r3, 80052aa <__sfp+0x16>
 80052a4:	4630      	mov	r0, r6
 80052a6:	f7ff ffbd 	bl	8005224 <__sinit>
 80052aa:	3648      	adds	r6, #72	; 0x48
 80052ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80052b0:	3b01      	subs	r3, #1
 80052b2:	d503      	bpl.n	80052bc <__sfp+0x28>
 80052b4:	6833      	ldr	r3, [r6, #0]
 80052b6:	b30b      	cbz	r3, 80052fc <__sfp+0x68>
 80052b8:	6836      	ldr	r6, [r6, #0]
 80052ba:	e7f7      	b.n	80052ac <__sfp+0x18>
 80052bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80052c0:	b9d5      	cbnz	r5, 80052f8 <__sfp+0x64>
 80052c2:	4b16      	ldr	r3, [pc, #88]	; (800531c <__sfp+0x88>)
 80052c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052c8:	60e3      	str	r3, [r4, #12]
 80052ca:	6665      	str	r5, [r4, #100]	; 0x64
 80052cc:	f000 f847 	bl	800535e <__retarget_lock_init_recursive>
 80052d0:	f7ff ff96 	bl	8005200 <__sfp_lock_release>
 80052d4:	2208      	movs	r2, #8
 80052d6:	4629      	mov	r1, r5
 80052d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80052dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80052e0:	6025      	str	r5, [r4, #0]
 80052e2:	61a5      	str	r5, [r4, #24]
 80052e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80052e8:	f7ff fac8 	bl	800487c <memset>
 80052ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80052f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80052f4:	4620      	mov	r0, r4
 80052f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052f8:	3468      	adds	r4, #104	; 0x68
 80052fa:	e7d9      	b.n	80052b0 <__sfp+0x1c>
 80052fc:	2104      	movs	r1, #4
 80052fe:	4638      	mov	r0, r7
 8005300:	f7ff ff62 	bl	80051c8 <__sfmoreglue>
 8005304:	4604      	mov	r4, r0
 8005306:	6030      	str	r0, [r6, #0]
 8005308:	2800      	cmp	r0, #0
 800530a:	d1d5      	bne.n	80052b8 <__sfp+0x24>
 800530c:	f7ff ff78 	bl	8005200 <__sfp_lock_release>
 8005310:	230c      	movs	r3, #12
 8005312:	603b      	str	r3, [r7, #0]
 8005314:	e7ee      	b.n	80052f4 <__sfp+0x60>
 8005316:	bf00      	nop
 8005318:	080058fc 	.word	0x080058fc
 800531c:	ffff0001 	.word	0xffff0001

08005320 <_fwalk_reent>:
 8005320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005324:	4606      	mov	r6, r0
 8005326:	4688      	mov	r8, r1
 8005328:	2700      	movs	r7, #0
 800532a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800532e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005332:	f1b9 0901 	subs.w	r9, r9, #1
 8005336:	d505      	bpl.n	8005344 <_fwalk_reent+0x24>
 8005338:	6824      	ldr	r4, [r4, #0]
 800533a:	2c00      	cmp	r4, #0
 800533c:	d1f7      	bne.n	800532e <_fwalk_reent+0xe>
 800533e:	4638      	mov	r0, r7
 8005340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005344:	89ab      	ldrh	r3, [r5, #12]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d907      	bls.n	800535a <_fwalk_reent+0x3a>
 800534a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800534e:	3301      	adds	r3, #1
 8005350:	d003      	beq.n	800535a <_fwalk_reent+0x3a>
 8005352:	4629      	mov	r1, r5
 8005354:	4630      	mov	r0, r6
 8005356:	47c0      	blx	r8
 8005358:	4307      	orrs	r7, r0
 800535a:	3568      	adds	r5, #104	; 0x68
 800535c:	e7e9      	b.n	8005332 <_fwalk_reent+0x12>

0800535e <__retarget_lock_init_recursive>:
 800535e:	4770      	bx	lr

08005360 <__retarget_lock_acquire_recursive>:
 8005360:	4770      	bx	lr

08005362 <__retarget_lock_release_recursive>:
 8005362:	4770      	bx	lr

08005364 <__swhatbuf_r>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	460e      	mov	r6, r1
 8005368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800536c:	4614      	mov	r4, r2
 800536e:	2900      	cmp	r1, #0
 8005370:	461d      	mov	r5, r3
 8005372:	b096      	sub	sp, #88	; 0x58
 8005374:	da08      	bge.n	8005388 <__swhatbuf_r+0x24>
 8005376:	2200      	movs	r2, #0
 8005378:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800537c:	602a      	str	r2, [r5, #0]
 800537e:	061a      	lsls	r2, r3, #24
 8005380:	d410      	bmi.n	80053a4 <__swhatbuf_r+0x40>
 8005382:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005386:	e00e      	b.n	80053a6 <__swhatbuf_r+0x42>
 8005388:	466a      	mov	r2, sp
 800538a:	f000 f9f5 	bl	8005778 <_fstat_r>
 800538e:	2800      	cmp	r0, #0
 8005390:	dbf1      	blt.n	8005376 <__swhatbuf_r+0x12>
 8005392:	9a01      	ldr	r2, [sp, #4]
 8005394:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005398:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800539c:	425a      	negs	r2, r3
 800539e:	415a      	adcs	r2, r3
 80053a0:	602a      	str	r2, [r5, #0]
 80053a2:	e7ee      	b.n	8005382 <__swhatbuf_r+0x1e>
 80053a4:	2340      	movs	r3, #64	; 0x40
 80053a6:	2000      	movs	r0, #0
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	b016      	add	sp, #88	; 0x58
 80053ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080053b0 <__smakebuf_r>:
 80053b0:	898b      	ldrh	r3, [r1, #12]
 80053b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053b4:	079d      	lsls	r5, r3, #30
 80053b6:	4606      	mov	r6, r0
 80053b8:	460c      	mov	r4, r1
 80053ba:	d507      	bpl.n	80053cc <__smakebuf_r+0x1c>
 80053bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	6123      	str	r3, [r4, #16]
 80053c4:	2301      	movs	r3, #1
 80053c6:	6163      	str	r3, [r4, #20]
 80053c8:	b002      	add	sp, #8
 80053ca:	bd70      	pop	{r4, r5, r6, pc}
 80053cc:	466a      	mov	r2, sp
 80053ce:	ab01      	add	r3, sp, #4
 80053d0:	f7ff ffc8 	bl	8005364 <__swhatbuf_r>
 80053d4:	9900      	ldr	r1, [sp, #0]
 80053d6:	4605      	mov	r5, r0
 80053d8:	4630      	mov	r0, r6
 80053da:	f000 f89f 	bl	800551c <_malloc_r>
 80053de:	b948      	cbnz	r0, 80053f4 <__smakebuf_r+0x44>
 80053e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053e4:	059a      	lsls	r2, r3, #22
 80053e6:	d4ef      	bmi.n	80053c8 <__smakebuf_r+0x18>
 80053e8:	f023 0303 	bic.w	r3, r3, #3
 80053ec:	f043 0302 	orr.w	r3, r3, #2
 80053f0:	81a3      	strh	r3, [r4, #12]
 80053f2:	e7e3      	b.n	80053bc <__smakebuf_r+0xc>
 80053f4:	4b0d      	ldr	r3, [pc, #52]	; (800542c <__smakebuf_r+0x7c>)
 80053f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	6020      	str	r0, [r4, #0]
 80053fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005400:	81a3      	strh	r3, [r4, #12]
 8005402:	9b00      	ldr	r3, [sp, #0]
 8005404:	6120      	str	r0, [r4, #16]
 8005406:	6163      	str	r3, [r4, #20]
 8005408:	9b01      	ldr	r3, [sp, #4]
 800540a:	b15b      	cbz	r3, 8005424 <__smakebuf_r+0x74>
 800540c:	4630      	mov	r0, r6
 800540e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005412:	f000 f9c3 	bl	800579c <_isatty_r>
 8005416:	b128      	cbz	r0, 8005424 <__smakebuf_r+0x74>
 8005418:	89a3      	ldrh	r3, [r4, #12]
 800541a:	f023 0303 	bic.w	r3, r3, #3
 800541e:	f043 0301 	orr.w	r3, r3, #1
 8005422:	81a3      	strh	r3, [r4, #12]
 8005424:	89a0      	ldrh	r0, [r4, #12]
 8005426:	4305      	orrs	r5, r0
 8005428:	81a5      	strh	r5, [r4, #12]
 800542a:	e7cd      	b.n	80053c8 <__smakebuf_r+0x18>
 800542c:	080051bd 	.word	0x080051bd

08005430 <memchr>:
 8005430:	4603      	mov	r3, r0
 8005432:	b510      	push	{r4, lr}
 8005434:	b2c9      	uxtb	r1, r1
 8005436:	4402      	add	r2, r0
 8005438:	4293      	cmp	r3, r2
 800543a:	4618      	mov	r0, r3
 800543c:	d101      	bne.n	8005442 <memchr+0x12>
 800543e:	2000      	movs	r0, #0
 8005440:	e003      	b.n	800544a <memchr+0x1a>
 8005442:	7804      	ldrb	r4, [r0, #0]
 8005444:	3301      	adds	r3, #1
 8005446:	428c      	cmp	r4, r1
 8005448:	d1f6      	bne.n	8005438 <memchr+0x8>
 800544a:	bd10      	pop	{r4, pc}

0800544c <_free_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4605      	mov	r5, r0
 8005450:	2900      	cmp	r1, #0
 8005452:	d040      	beq.n	80054d6 <_free_r+0x8a>
 8005454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005458:	1f0c      	subs	r4, r1, #4
 800545a:	2b00      	cmp	r3, #0
 800545c:	bfb8      	it	lt
 800545e:	18e4      	addlt	r4, r4, r3
 8005460:	f000 f9be 	bl	80057e0 <__malloc_lock>
 8005464:	4a1c      	ldr	r2, [pc, #112]	; (80054d8 <_free_r+0x8c>)
 8005466:	6813      	ldr	r3, [r2, #0]
 8005468:	b933      	cbnz	r3, 8005478 <_free_r+0x2c>
 800546a:	6063      	str	r3, [r4, #4]
 800546c:	6014      	str	r4, [r2, #0]
 800546e:	4628      	mov	r0, r5
 8005470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005474:	f000 b9ba 	b.w	80057ec <__malloc_unlock>
 8005478:	42a3      	cmp	r3, r4
 800547a:	d908      	bls.n	800548e <_free_r+0x42>
 800547c:	6820      	ldr	r0, [r4, #0]
 800547e:	1821      	adds	r1, r4, r0
 8005480:	428b      	cmp	r3, r1
 8005482:	bf01      	itttt	eq
 8005484:	6819      	ldreq	r1, [r3, #0]
 8005486:	685b      	ldreq	r3, [r3, #4]
 8005488:	1809      	addeq	r1, r1, r0
 800548a:	6021      	streq	r1, [r4, #0]
 800548c:	e7ed      	b.n	800546a <_free_r+0x1e>
 800548e:	461a      	mov	r2, r3
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	b10b      	cbz	r3, 8005498 <_free_r+0x4c>
 8005494:	42a3      	cmp	r3, r4
 8005496:	d9fa      	bls.n	800548e <_free_r+0x42>
 8005498:	6811      	ldr	r1, [r2, #0]
 800549a:	1850      	adds	r0, r2, r1
 800549c:	42a0      	cmp	r0, r4
 800549e:	d10b      	bne.n	80054b8 <_free_r+0x6c>
 80054a0:	6820      	ldr	r0, [r4, #0]
 80054a2:	4401      	add	r1, r0
 80054a4:	1850      	adds	r0, r2, r1
 80054a6:	4283      	cmp	r3, r0
 80054a8:	6011      	str	r1, [r2, #0]
 80054aa:	d1e0      	bne.n	800546e <_free_r+0x22>
 80054ac:	6818      	ldr	r0, [r3, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	4401      	add	r1, r0
 80054b2:	6011      	str	r1, [r2, #0]
 80054b4:	6053      	str	r3, [r2, #4]
 80054b6:	e7da      	b.n	800546e <_free_r+0x22>
 80054b8:	d902      	bls.n	80054c0 <_free_r+0x74>
 80054ba:	230c      	movs	r3, #12
 80054bc:	602b      	str	r3, [r5, #0]
 80054be:	e7d6      	b.n	800546e <_free_r+0x22>
 80054c0:	6820      	ldr	r0, [r4, #0]
 80054c2:	1821      	adds	r1, r4, r0
 80054c4:	428b      	cmp	r3, r1
 80054c6:	bf01      	itttt	eq
 80054c8:	6819      	ldreq	r1, [r3, #0]
 80054ca:	685b      	ldreq	r3, [r3, #4]
 80054cc:	1809      	addeq	r1, r1, r0
 80054ce:	6021      	streq	r1, [r4, #0]
 80054d0:	6063      	str	r3, [r4, #4]
 80054d2:	6054      	str	r4, [r2, #4]
 80054d4:	e7cb      	b.n	800546e <_free_r+0x22>
 80054d6:	bd38      	pop	{r3, r4, r5, pc}
 80054d8:	200004a4 	.word	0x200004a4

080054dc <sbrk_aligned>:
 80054dc:	b570      	push	{r4, r5, r6, lr}
 80054de:	4e0e      	ldr	r6, [pc, #56]	; (8005518 <sbrk_aligned+0x3c>)
 80054e0:	460c      	mov	r4, r1
 80054e2:	6831      	ldr	r1, [r6, #0]
 80054e4:	4605      	mov	r5, r0
 80054e6:	b911      	cbnz	r1, 80054ee <sbrk_aligned+0x12>
 80054e8:	f000 f88c 	bl	8005604 <_sbrk_r>
 80054ec:	6030      	str	r0, [r6, #0]
 80054ee:	4621      	mov	r1, r4
 80054f0:	4628      	mov	r0, r5
 80054f2:	f000 f887 	bl	8005604 <_sbrk_r>
 80054f6:	1c43      	adds	r3, r0, #1
 80054f8:	d00a      	beq.n	8005510 <sbrk_aligned+0x34>
 80054fa:	1cc4      	adds	r4, r0, #3
 80054fc:	f024 0403 	bic.w	r4, r4, #3
 8005500:	42a0      	cmp	r0, r4
 8005502:	d007      	beq.n	8005514 <sbrk_aligned+0x38>
 8005504:	1a21      	subs	r1, r4, r0
 8005506:	4628      	mov	r0, r5
 8005508:	f000 f87c 	bl	8005604 <_sbrk_r>
 800550c:	3001      	adds	r0, #1
 800550e:	d101      	bne.n	8005514 <sbrk_aligned+0x38>
 8005510:	f04f 34ff 	mov.w	r4, #4294967295
 8005514:	4620      	mov	r0, r4
 8005516:	bd70      	pop	{r4, r5, r6, pc}
 8005518:	200004a8 	.word	0x200004a8

0800551c <_malloc_r>:
 800551c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005520:	1ccd      	adds	r5, r1, #3
 8005522:	f025 0503 	bic.w	r5, r5, #3
 8005526:	3508      	adds	r5, #8
 8005528:	2d0c      	cmp	r5, #12
 800552a:	bf38      	it	cc
 800552c:	250c      	movcc	r5, #12
 800552e:	2d00      	cmp	r5, #0
 8005530:	4607      	mov	r7, r0
 8005532:	db01      	blt.n	8005538 <_malloc_r+0x1c>
 8005534:	42a9      	cmp	r1, r5
 8005536:	d905      	bls.n	8005544 <_malloc_r+0x28>
 8005538:	230c      	movs	r3, #12
 800553a:	2600      	movs	r6, #0
 800553c:	603b      	str	r3, [r7, #0]
 800553e:	4630      	mov	r0, r6
 8005540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005544:	4e2e      	ldr	r6, [pc, #184]	; (8005600 <_malloc_r+0xe4>)
 8005546:	f000 f94b 	bl	80057e0 <__malloc_lock>
 800554a:	6833      	ldr	r3, [r6, #0]
 800554c:	461c      	mov	r4, r3
 800554e:	bb34      	cbnz	r4, 800559e <_malloc_r+0x82>
 8005550:	4629      	mov	r1, r5
 8005552:	4638      	mov	r0, r7
 8005554:	f7ff ffc2 	bl	80054dc <sbrk_aligned>
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	4604      	mov	r4, r0
 800555c:	d14d      	bne.n	80055fa <_malloc_r+0xde>
 800555e:	6834      	ldr	r4, [r6, #0]
 8005560:	4626      	mov	r6, r4
 8005562:	2e00      	cmp	r6, #0
 8005564:	d140      	bne.n	80055e8 <_malloc_r+0xcc>
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	4631      	mov	r1, r6
 800556a:	4638      	mov	r0, r7
 800556c:	eb04 0803 	add.w	r8, r4, r3
 8005570:	f000 f848 	bl	8005604 <_sbrk_r>
 8005574:	4580      	cmp	r8, r0
 8005576:	d13a      	bne.n	80055ee <_malloc_r+0xd2>
 8005578:	6821      	ldr	r1, [r4, #0]
 800557a:	3503      	adds	r5, #3
 800557c:	1a6d      	subs	r5, r5, r1
 800557e:	f025 0503 	bic.w	r5, r5, #3
 8005582:	3508      	adds	r5, #8
 8005584:	2d0c      	cmp	r5, #12
 8005586:	bf38      	it	cc
 8005588:	250c      	movcc	r5, #12
 800558a:	4638      	mov	r0, r7
 800558c:	4629      	mov	r1, r5
 800558e:	f7ff ffa5 	bl	80054dc <sbrk_aligned>
 8005592:	3001      	adds	r0, #1
 8005594:	d02b      	beq.n	80055ee <_malloc_r+0xd2>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	442b      	add	r3, r5
 800559a:	6023      	str	r3, [r4, #0]
 800559c:	e00e      	b.n	80055bc <_malloc_r+0xa0>
 800559e:	6822      	ldr	r2, [r4, #0]
 80055a0:	1b52      	subs	r2, r2, r5
 80055a2:	d41e      	bmi.n	80055e2 <_malloc_r+0xc6>
 80055a4:	2a0b      	cmp	r2, #11
 80055a6:	d916      	bls.n	80055d6 <_malloc_r+0xba>
 80055a8:	1961      	adds	r1, r4, r5
 80055aa:	42a3      	cmp	r3, r4
 80055ac:	6025      	str	r5, [r4, #0]
 80055ae:	bf18      	it	ne
 80055b0:	6059      	strne	r1, [r3, #4]
 80055b2:	6863      	ldr	r3, [r4, #4]
 80055b4:	bf08      	it	eq
 80055b6:	6031      	streq	r1, [r6, #0]
 80055b8:	5162      	str	r2, [r4, r5]
 80055ba:	604b      	str	r3, [r1, #4]
 80055bc:	4638      	mov	r0, r7
 80055be:	f104 060b 	add.w	r6, r4, #11
 80055c2:	f000 f913 	bl	80057ec <__malloc_unlock>
 80055c6:	f026 0607 	bic.w	r6, r6, #7
 80055ca:	1d23      	adds	r3, r4, #4
 80055cc:	1af2      	subs	r2, r6, r3
 80055ce:	d0b6      	beq.n	800553e <_malloc_r+0x22>
 80055d0:	1b9b      	subs	r3, r3, r6
 80055d2:	50a3      	str	r3, [r4, r2]
 80055d4:	e7b3      	b.n	800553e <_malloc_r+0x22>
 80055d6:	6862      	ldr	r2, [r4, #4]
 80055d8:	42a3      	cmp	r3, r4
 80055da:	bf0c      	ite	eq
 80055dc:	6032      	streq	r2, [r6, #0]
 80055de:	605a      	strne	r2, [r3, #4]
 80055e0:	e7ec      	b.n	80055bc <_malloc_r+0xa0>
 80055e2:	4623      	mov	r3, r4
 80055e4:	6864      	ldr	r4, [r4, #4]
 80055e6:	e7b2      	b.n	800554e <_malloc_r+0x32>
 80055e8:	4634      	mov	r4, r6
 80055ea:	6876      	ldr	r6, [r6, #4]
 80055ec:	e7b9      	b.n	8005562 <_malloc_r+0x46>
 80055ee:	230c      	movs	r3, #12
 80055f0:	4638      	mov	r0, r7
 80055f2:	603b      	str	r3, [r7, #0]
 80055f4:	f000 f8fa 	bl	80057ec <__malloc_unlock>
 80055f8:	e7a1      	b.n	800553e <_malloc_r+0x22>
 80055fa:	6025      	str	r5, [r4, #0]
 80055fc:	e7de      	b.n	80055bc <_malloc_r+0xa0>
 80055fe:	bf00      	nop
 8005600:	200004a4 	.word	0x200004a4

08005604 <_sbrk_r>:
 8005604:	b538      	push	{r3, r4, r5, lr}
 8005606:	2300      	movs	r3, #0
 8005608:	4d05      	ldr	r5, [pc, #20]	; (8005620 <_sbrk_r+0x1c>)
 800560a:	4604      	mov	r4, r0
 800560c:	4608      	mov	r0, r1
 800560e:	602b      	str	r3, [r5, #0]
 8005610:	f7fb fe5e 	bl	80012d0 <_sbrk>
 8005614:	1c43      	adds	r3, r0, #1
 8005616:	d102      	bne.n	800561e <_sbrk_r+0x1a>
 8005618:	682b      	ldr	r3, [r5, #0]
 800561a:	b103      	cbz	r3, 800561e <_sbrk_r+0x1a>
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	bd38      	pop	{r3, r4, r5, pc}
 8005620:	200004ac 	.word	0x200004ac

08005624 <_raise_r>:
 8005624:	291f      	cmp	r1, #31
 8005626:	b538      	push	{r3, r4, r5, lr}
 8005628:	4604      	mov	r4, r0
 800562a:	460d      	mov	r5, r1
 800562c:	d904      	bls.n	8005638 <_raise_r+0x14>
 800562e:	2316      	movs	r3, #22
 8005630:	6003      	str	r3, [r0, #0]
 8005632:	f04f 30ff 	mov.w	r0, #4294967295
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800563a:	b112      	cbz	r2, 8005642 <_raise_r+0x1e>
 800563c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005640:	b94b      	cbnz	r3, 8005656 <_raise_r+0x32>
 8005642:	4620      	mov	r0, r4
 8005644:	f000 f830 	bl	80056a8 <_getpid_r>
 8005648:	462a      	mov	r2, r5
 800564a:	4601      	mov	r1, r0
 800564c:	4620      	mov	r0, r4
 800564e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005652:	f000 b817 	b.w	8005684 <_kill_r>
 8005656:	2b01      	cmp	r3, #1
 8005658:	d00a      	beq.n	8005670 <_raise_r+0x4c>
 800565a:	1c59      	adds	r1, r3, #1
 800565c:	d103      	bne.n	8005666 <_raise_r+0x42>
 800565e:	2316      	movs	r3, #22
 8005660:	6003      	str	r3, [r0, #0]
 8005662:	2001      	movs	r0, #1
 8005664:	e7e7      	b.n	8005636 <_raise_r+0x12>
 8005666:	2400      	movs	r4, #0
 8005668:	4628      	mov	r0, r5
 800566a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800566e:	4798      	blx	r3
 8005670:	2000      	movs	r0, #0
 8005672:	e7e0      	b.n	8005636 <_raise_r+0x12>

08005674 <raise>:
 8005674:	4b02      	ldr	r3, [pc, #8]	; (8005680 <raise+0xc>)
 8005676:	4601      	mov	r1, r0
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	f7ff bfd3 	b.w	8005624 <_raise_r>
 800567e:	bf00      	nop
 8005680:	20000010 	.word	0x20000010

08005684 <_kill_r>:
 8005684:	b538      	push	{r3, r4, r5, lr}
 8005686:	2300      	movs	r3, #0
 8005688:	4d06      	ldr	r5, [pc, #24]	; (80056a4 <_kill_r+0x20>)
 800568a:	4604      	mov	r4, r0
 800568c:	4608      	mov	r0, r1
 800568e:	4611      	mov	r1, r2
 8005690:	602b      	str	r3, [r5, #0]
 8005692:	f7fb fd9a 	bl	80011ca <_kill>
 8005696:	1c43      	adds	r3, r0, #1
 8005698:	d102      	bne.n	80056a0 <_kill_r+0x1c>
 800569a:	682b      	ldr	r3, [r5, #0]
 800569c:	b103      	cbz	r3, 80056a0 <_kill_r+0x1c>
 800569e:	6023      	str	r3, [r4, #0]
 80056a0:	bd38      	pop	{r3, r4, r5, pc}
 80056a2:	bf00      	nop
 80056a4:	200004ac 	.word	0x200004ac

080056a8 <_getpid_r>:
 80056a8:	f7fb bd88 	b.w	80011bc <_getpid>

080056ac <__sread>:
 80056ac:	b510      	push	{r4, lr}
 80056ae:	460c      	mov	r4, r1
 80056b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056b4:	f000 f8a0 	bl	80057f8 <_read_r>
 80056b8:	2800      	cmp	r0, #0
 80056ba:	bfab      	itete	ge
 80056bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80056be:	89a3      	ldrhlt	r3, [r4, #12]
 80056c0:	181b      	addge	r3, r3, r0
 80056c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80056c6:	bfac      	ite	ge
 80056c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80056ca:	81a3      	strhlt	r3, [r4, #12]
 80056cc:	bd10      	pop	{r4, pc}

080056ce <__swrite>:
 80056ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d2:	461f      	mov	r7, r3
 80056d4:	898b      	ldrh	r3, [r1, #12]
 80056d6:	4605      	mov	r5, r0
 80056d8:	05db      	lsls	r3, r3, #23
 80056da:	460c      	mov	r4, r1
 80056dc:	4616      	mov	r6, r2
 80056de:	d505      	bpl.n	80056ec <__swrite+0x1e>
 80056e0:	2302      	movs	r3, #2
 80056e2:	2200      	movs	r2, #0
 80056e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e8:	f000 f868 	bl	80057bc <_lseek_r>
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	4632      	mov	r2, r6
 80056f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056f4:	81a3      	strh	r3, [r4, #12]
 80056f6:	4628      	mov	r0, r5
 80056f8:	463b      	mov	r3, r7
 80056fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005702:	f000 b817 	b.w	8005734 <_write_r>

08005706 <__sseek>:
 8005706:	b510      	push	{r4, lr}
 8005708:	460c      	mov	r4, r1
 800570a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570e:	f000 f855 	bl	80057bc <_lseek_r>
 8005712:	1c43      	adds	r3, r0, #1
 8005714:	89a3      	ldrh	r3, [r4, #12]
 8005716:	bf15      	itete	ne
 8005718:	6560      	strne	r0, [r4, #84]	; 0x54
 800571a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800571e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005722:	81a3      	strheq	r3, [r4, #12]
 8005724:	bf18      	it	ne
 8005726:	81a3      	strhne	r3, [r4, #12]
 8005728:	bd10      	pop	{r4, pc}

0800572a <__sclose>:
 800572a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800572e:	f000 b813 	b.w	8005758 <_close_r>
	...

08005734 <_write_r>:
 8005734:	b538      	push	{r3, r4, r5, lr}
 8005736:	4604      	mov	r4, r0
 8005738:	4608      	mov	r0, r1
 800573a:	4611      	mov	r1, r2
 800573c:	2200      	movs	r2, #0
 800573e:	4d05      	ldr	r5, [pc, #20]	; (8005754 <_write_r+0x20>)
 8005740:	602a      	str	r2, [r5, #0]
 8005742:	461a      	mov	r2, r3
 8005744:	f7fb fd78 	bl	8001238 <_write>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d102      	bne.n	8005752 <_write_r+0x1e>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	b103      	cbz	r3, 8005752 <_write_r+0x1e>
 8005750:	6023      	str	r3, [r4, #0]
 8005752:	bd38      	pop	{r3, r4, r5, pc}
 8005754:	200004ac 	.word	0x200004ac

08005758 <_close_r>:
 8005758:	b538      	push	{r3, r4, r5, lr}
 800575a:	2300      	movs	r3, #0
 800575c:	4d05      	ldr	r5, [pc, #20]	; (8005774 <_close_r+0x1c>)
 800575e:	4604      	mov	r4, r0
 8005760:	4608      	mov	r0, r1
 8005762:	602b      	str	r3, [r5, #0]
 8005764:	f7fb fd84 	bl	8001270 <_close>
 8005768:	1c43      	adds	r3, r0, #1
 800576a:	d102      	bne.n	8005772 <_close_r+0x1a>
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	b103      	cbz	r3, 8005772 <_close_r+0x1a>
 8005770:	6023      	str	r3, [r4, #0]
 8005772:	bd38      	pop	{r3, r4, r5, pc}
 8005774:	200004ac 	.word	0x200004ac

08005778 <_fstat_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	2300      	movs	r3, #0
 800577c:	4d06      	ldr	r5, [pc, #24]	; (8005798 <_fstat_r+0x20>)
 800577e:	4604      	mov	r4, r0
 8005780:	4608      	mov	r0, r1
 8005782:	4611      	mov	r1, r2
 8005784:	602b      	str	r3, [r5, #0]
 8005786:	f7fb fd7e 	bl	8001286 <_fstat>
 800578a:	1c43      	adds	r3, r0, #1
 800578c:	d102      	bne.n	8005794 <_fstat_r+0x1c>
 800578e:	682b      	ldr	r3, [r5, #0]
 8005790:	b103      	cbz	r3, 8005794 <_fstat_r+0x1c>
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	bd38      	pop	{r3, r4, r5, pc}
 8005796:	bf00      	nop
 8005798:	200004ac 	.word	0x200004ac

0800579c <_isatty_r>:
 800579c:	b538      	push	{r3, r4, r5, lr}
 800579e:	2300      	movs	r3, #0
 80057a0:	4d05      	ldr	r5, [pc, #20]	; (80057b8 <_isatty_r+0x1c>)
 80057a2:	4604      	mov	r4, r0
 80057a4:	4608      	mov	r0, r1
 80057a6:	602b      	str	r3, [r5, #0]
 80057a8:	f7fb fd7c 	bl	80012a4 <_isatty>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	d102      	bne.n	80057b6 <_isatty_r+0x1a>
 80057b0:	682b      	ldr	r3, [r5, #0]
 80057b2:	b103      	cbz	r3, 80057b6 <_isatty_r+0x1a>
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	bd38      	pop	{r3, r4, r5, pc}
 80057b8:	200004ac 	.word	0x200004ac

080057bc <_lseek_r>:
 80057bc:	b538      	push	{r3, r4, r5, lr}
 80057be:	4604      	mov	r4, r0
 80057c0:	4608      	mov	r0, r1
 80057c2:	4611      	mov	r1, r2
 80057c4:	2200      	movs	r2, #0
 80057c6:	4d05      	ldr	r5, [pc, #20]	; (80057dc <_lseek_r+0x20>)
 80057c8:	602a      	str	r2, [r5, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	f7fb fd74 	bl	80012b8 <_lseek>
 80057d0:	1c43      	adds	r3, r0, #1
 80057d2:	d102      	bne.n	80057da <_lseek_r+0x1e>
 80057d4:	682b      	ldr	r3, [r5, #0]
 80057d6:	b103      	cbz	r3, 80057da <_lseek_r+0x1e>
 80057d8:	6023      	str	r3, [r4, #0]
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	200004ac 	.word	0x200004ac

080057e0 <__malloc_lock>:
 80057e0:	4801      	ldr	r0, [pc, #4]	; (80057e8 <__malloc_lock+0x8>)
 80057e2:	f7ff bdbd 	b.w	8005360 <__retarget_lock_acquire_recursive>
 80057e6:	bf00      	nop
 80057e8:	200004a0 	.word	0x200004a0

080057ec <__malloc_unlock>:
 80057ec:	4801      	ldr	r0, [pc, #4]	; (80057f4 <__malloc_unlock+0x8>)
 80057ee:	f7ff bdb8 	b.w	8005362 <__retarget_lock_release_recursive>
 80057f2:	bf00      	nop
 80057f4:	200004a0 	.word	0x200004a0

080057f8 <_read_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4604      	mov	r4, r0
 80057fc:	4608      	mov	r0, r1
 80057fe:	4611      	mov	r1, r2
 8005800:	2200      	movs	r2, #0
 8005802:	4d05      	ldr	r5, [pc, #20]	; (8005818 <_read_r+0x20>)
 8005804:	602a      	str	r2, [r5, #0]
 8005806:	461a      	mov	r2, r3
 8005808:	f7fb fcf9 	bl	80011fe <_read>
 800580c:	1c43      	adds	r3, r0, #1
 800580e:	d102      	bne.n	8005816 <_read_r+0x1e>
 8005810:	682b      	ldr	r3, [r5, #0]
 8005812:	b103      	cbz	r3, 8005816 <_read_r+0x1e>
 8005814:	6023      	str	r3, [r4, #0]
 8005816:	bd38      	pop	{r3, r4, r5, pc}
 8005818:	200004ac 	.word	0x200004ac

0800581c <_init>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	bf00      	nop
 8005820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005822:	bc08      	pop	{r3}
 8005824:	469e      	mov	lr, r3
 8005826:	4770      	bx	lr

08005828 <_fini>:
 8005828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582a:	bf00      	nop
 800582c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800582e:	bc08      	pop	{r3}
 8005830:	469e      	mov	lr, r3
 8005832:	4770      	bx	lr
