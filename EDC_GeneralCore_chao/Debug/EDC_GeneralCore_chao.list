
EDC_GeneralCore_chao.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c24  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08008e10  08008e10  00018e10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009150  08009150  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08009150  08009150  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009150  08009150  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009150  08009150  00019150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009154  08009154  00019154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b94  20000074  080091cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c08  080091cc  00020c08  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011668  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002920  00000000  00000000  00031705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00034028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001028  00000000  00000000  00035140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003934  00000000  00000000  00036168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 17 .debug_line   00014a78  00000000  00000000  00039a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d93e  00000000  00000000  0004e514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebe52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000564c  00000000  00000000  000ebea4  2**2
=======
 17 .debug_line   0001409a  00000000  00000000  00038971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d79c  00000000  00000000  0004ca0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea1a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052dc  00000000  00000000  000ea1f8  2**2
>>>>>>> 4f456519e62a6cbf5f4f89b57cb54c6739a548c0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000074 	.word	0x20000074
 8000204:	00000000 	.word	0x00000000
 8000208:	08008df4 	.word	0x08008df4

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000078 	.word	0x20000078
 8000224:	08008df4 	.word	0x08008df4

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2f>:
 8000b24:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b28:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b2c:	bf24      	itt	cs
 8000b2e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b32:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b36:	d90d      	bls.n	8000b54 <__aeabi_d2f+0x30>
 8000b38:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b3c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b40:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b44:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b48:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b58:	d121      	bne.n	8000b9e <__aeabi_d2f+0x7a>
 8000b5a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5e:	bfbc      	itt	lt
 8000b60:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b64:	4770      	bxlt	lr
 8000b66:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b6a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6e:	f1c2 0218 	rsb	r2, r2, #24
 8000b72:	f1c2 0c20 	rsb	ip, r2, #32
 8000b76:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b7a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7e:	bf18      	it	ne
 8000b80:	f040 0001 	orrne.w	r0, r0, #1
 8000b84:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b88:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b90:	ea40 000c 	orr.w	r0, r0, ip
 8000b94:	fa23 f302 	lsr.w	r3, r3, r2
 8000b98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b9c:	e7cc      	b.n	8000b38 <__aeabi_d2f+0x14>
 8000b9e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ba2:	d107      	bne.n	8000bb4 <__aeabi_d2f+0x90>
 8000ba4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba8:	bf1e      	ittt	ne
 8000baa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bb2:	4770      	bxne	lr
 8000bb4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_frsub>:
 8000bc4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bc8:	e002      	b.n	8000bd0 <__addsf3>
 8000bca:	bf00      	nop

08000bcc <__aeabi_fsub>:
 8000bcc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bd0 <__addsf3>:
 8000bd0:	0042      	lsls	r2, r0, #1
 8000bd2:	bf1f      	itttt	ne
 8000bd4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bd8:	ea92 0f03 	teqne	r2, r3
 8000bdc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000be0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000be4:	d06a      	beq.n	8000cbc <__addsf3+0xec>
 8000be6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bea:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bee:	bfc1      	itttt	gt
 8000bf0:	18d2      	addgt	r2, r2, r3
 8000bf2:	4041      	eorgt	r1, r0
 8000bf4:	4048      	eorgt	r0, r1
 8000bf6:	4041      	eorgt	r1, r0
 8000bf8:	bfb8      	it	lt
 8000bfa:	425b      	neglt	r3, r3
 8000bfc:	2b19      	cmp	r3, #25
 8000bfe:	bf88      	it	hi
 8000c00:	4770      	bxhi	lr
 8000c02:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c0a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c0e:	bf18      	it	ne
 8000c10:	4240      	negne	r0, r0
 8000c12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c16:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c1a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c1e:	bf18      	it	ne
 8000c20:	4249      	negne	r1, r1
 8000c22:	ea92 0f03 	teq	r2, r3
 8000c26:	d03f      	beq.n	8000ca8 <__addsf3+0xd8>
 8000c28:	f1a2 0201 	sub.w	r2, r2, #1
 8000c2c:	fa41 fc03 	asr.w	ip, r1, r3
 8000c30:	eb10 000c 	adds.w	r0, r0, ip
 8000c34:	f1c3 0320 	rsb	r3, r3, #32
 8000c38:	fa01 f103 	lsl.w	r1, r1, r3
 8000c3c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	d502      	bpl.n	8000c48 <__addsf3+0x78>
 8000c42:	4249      	negs	r1, r1
 8000c44:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c48:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c4c:	d313      	bcc.n	8000c76 <__addsf3+0xa6>
 8000c4e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c52:	d306      	bcc.n	8000c62 <__addsf3+0x92>
 8000c54:	0840      	lsrs	r0, r0, #1
 8000c56:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c5a:	f102 0201 	add.w	r2, r2, #1
 8000c5e:	2afe      	cmp	r2, #254	; 0xfe
 8000c60:	d251      	bcs.n	8000d06 <__addsf3+0x136>
 8000c62:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c66:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c6a:	bf08      	it	eq
 8000c6c:	f020 0001 	biceq.w	r0, r0, #1
 8000c70:	ea40 0003 	orr.w	r0, r0, r3
 8000c74:	4770      	bx	lr
 8000c76:	0049      	lsls	r1, r1, #1
 8000c78:	eb40 0000 	adc.w	r0, r0, r0
 8000c7c:	3a01      	subs	r2, #1
 8000c7e:	bf28      	it	cs
 8000c80:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c84:	d2ed      	bcs.n	8000c62 <__addsf3+0x92>
 8000c86:	fab0 fc80 	clz	ip, r0
 8000c8a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c8e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c92:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c96:	bfaa      	itet	ge
 8000c98:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c9c:	4252      	neglt	r2, r2
 8000c9e:	4318      	orrge	r0, r3
 8000ca0:	bfbc      	itt	lt
 8000ca2:	40d0      	lsrlt	r0, r2
 8000ca4:	4318      	orrlt	r0, r3
 8000ca6:	4770      	bx	lr
 8000ca8:	f092 0f00 	teq	r2, #0
 8000cac:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cb0:	bf06      	itte	eq
 8000cb2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cb6:	3201      	addeq	r2, #1
 8000cb8:	3b01      	subne	r3, #1
 8000cba:	e7b5      	b.n	8000c28 <__addsf3+0x58>
 8000cbc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc4:	bf18      	it	ne
 8000cc6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cca:	d021      	beq.n	8000d10 <__addsf3+0x140>
 8000ccc:	ea92 0f03 	teq	r2, r3
 8000cd0:	d004      	beq.n	8000cdc <__addsf3+0x10c>
 8000cd2:	f092 0f00 	teq	r2, #0
 8000cd6:	bf08      	it	eq
 8000cd8:	4608      	moveq	r0, r1
 8000cda:	4770      	bx	lr
 8000cdc:	ea90 0f01 	teq	r0, r1
 8000ce0:	bf1c      	itt	ne
 8000ce2:	2000      	movne	r0, #0
 8000ce4:	4770      	bxne	lr
 8000ce6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cea:	d104      	bne.n	8000cf6 <__addsf3+0x126>
 8000cec:	0040      	lsls	r0, r0, #1
 8000cee:	bf28      	it	cs
 8000cf0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cfa:	bf3c      	itt	cc
 8000cfc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d00:	4770      	bxcc	lr
 8000d02:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d06:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d0e:	4770      	bx	lr
 8000d10:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d14:	bf16      	itet	ne
 8000d16:	4608      	movne	r0, r1
 8000d18:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d1c:	4601      	movne	r1, r0
 8000d1e:	0242      	lsls	r2, r0, #9
 8000d20:	bf06      	itte	eq
 8000d22:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d26:	ea90 0f01 	teqeq	r0, r1
 8000d2a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_ui2f>:
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e004      	b.n	8000d40 <__aeabi_i2f+0x8>
 8000d36:	bf00      	nop

08000d38 <__aeabi_i2f>:
 8000d38:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d3c:	bf48      	it	mi
 8000d3e:	4240      	negmi	r0, r0
 8000d40:	ea5f 0c00 	movs.w	ip, r0
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d4c:	4601      	mov	r1, r0
 8000d4e:	f04f 0000 	mov.w	r0, #0
 8000d52:	e01c      	b.n	8000d8e <__aeabi_l2f+0x2a>

08000d54 <__aeabi_ul2f>:
 8000d54:	ea50 0201 	orrs.w	r2, r0, r1
 8000d58:	bf08      	it	eq
 8000d5a:	4770      	bxeq	lr
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e00a      	b.n	8000d78 <__aeabi_l2f+0x14>
 8000d62:	bf00      	nop

08000d64 <__aeabi_l2f>:
 8000d64:	ea50 0201 	orrs.w	r2, r0, r1
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d70:	d502      	bpl.n	8000d78 <__aeabi_l2f+0x14>
 8000d72:	4240      	negs	r0, r0
 8000d74:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d78:	ea5f 0c01 	movs.w	ip, r1
 8000d7c:	bf02      	ittt	eq
 8000d7e:	4684      	moveq	ip, r0
 8000d80:	4601      	moveq	r1, r0
 8000d82:	2000      	moveq	r0, #0
 8000d84:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d88:	bf08      	it	eq
 8000d8a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d92:	fabc f28c 	clz	r2, ip
 8000d96:	3a08      	subs	r2, #8
 8000d98:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d9c:	db10      	blt.n	8000dc0 <__aeabi_l2f+0x5c>
 8000d9e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da2:	4463      	add	r3, ip
 8000da4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da8:	f1c2 0220 	rsb	r2, r2, #32
 8000dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000db0:	fa20 f202 	lsr.w	r2, r0, r2
 8000db4:	eb43 0002 	adc.w	r0, r3, r2
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f102 0220 	add.w	r2, r2, #32
 8000dc4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc8:	f1c2 0220 	rsb	r2, r2, #32
 8000dcc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dd0:	fa21 f202 	lsr.w	r2, r1, r2
 8000dd4:	eb43 0002 	adc.w	r0, r3, r2
 8000dd8:	bf08      	it	eq
 8000dda:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dde:	4770      	bx	lr

08000de0 <__aeabi_fmul>:
 8000de0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000de4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000de8:	bf1e      	ittt	ne
 8000dea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dee:	ea92 0f0c 	teqne	r2, ip
 8000df2:	ea93 0f0c 	teqne	r3, ip
 8000df6:	d06f      	beq.n	8000ed8 <__aeabi_fmul+0xf8>
 8000df8:	441a      	add	r2, r3
 8000dfa:	ea80 0c01 	eor.w	ip, r0, r1
 8000dfe:	0240      	lsls	r0, r0, #9
 8000e00:	bf18      	it	ne
 8000e02:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e06:	d01e      	beq.n	8000e46 <__aeabi_fmul+0x66>
 8000e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e0c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e10:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e14:	fba0 3101 	umull	r3, r1, r0, r1
 8000e18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e1c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e20:	bf3e      	ittt	cc
 8000e22:	0049      	lslcc	r1, r1, #1
 8000e24:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e28:	005b      	lslcc	r3, r3, #1
 8000e2a:	ea40 0001 	orr.w	r0, r0, r1
 8000e2e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e32:	2afd      	cmp	r2, #253	; 0xfd
 8000e34:	d81d      	bhi.n	8000e72 <__aeabi_fmul+0x92>
 8000e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e3e:	bf08      	it	eq
 8000e40:	f020 0001 	biceq.w	r0, r0, #1
 8000e44:	4770      	bx	lr
 8000e46:	f090 0f00 	teq	r0, #0
 8000e4a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e4e:	bf08      	it	eq
 8000e50:	0249      	lsleq	r1, r1, #9
 8000e52:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e56:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e5a:	3a7f      	subs	r2, #127	; 0x7f
 8000e5c:	bfc2      	ittt	gt
 8000e5e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e62:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e66:	4770      	bxgt	lr
 8000e68:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e6c:	f04f 0300 	mov.w	r3, #0
 8000e70:	3a01      	subs	r2, #1
 8000e72:	dc5d      	bgt.n	8000f30 <__aeabi_fmul+0x150>
 8000e74:	f112 0f19 	cmn.w	r2, #25
 8000e78:	bfdc      	itt	le
 8000e7a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e7e:	4770      	bxle	lr
 8000e80:	f1c2 0200 	rsb	r2, r2, #0
 8000e84:	0041      	lsls	r1, r0, #1
 8000e86:	fa21 f102 	lsr.w	r1, r1, r2
 8000e8a:	f1c2 0220 	rsb	r2, r2, #32
 8000e8e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e92:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e96:	f140 0000 	adc.w	r0, r0, #0
 8000e9a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e9e:	bf08      	it	eq
 8000ea0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ea4:	4770      	bx	lr
 8000ea6:	f092 0f00 	teq	r2, #0
 8000eaa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000eae:	bf02      	ittt	eq
 8000eb0:	0040      	lsleq	r0, r0, #1
 8000eb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eb6:	3a01      	subeq	r2, #1
 8000eb8:	d0f9      	beq.n	8000eae <__aeabi_fmul+0xce>
 8000eba:	ea40 000c 	orr.w	r0, r0, ip
 8000ebe:	f093 0f00 	teq	r3, #0
 8000ec2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	bf02      	ittt	eq
 8000ec8:	0049      	lsleq	r1, r1, #1
 8000eca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ece:	3b01      	subeq	r3, #1
 8000ed0:	d0f9      	beq.n	8000ec6 <__aeabi_fmul+0xe6>
 8000ed2:	ea41 010c 	orr.w	r1, r1, ip
 8000ed6:	e78f      	b.n	8000df8 <__aeabi_fmul+0x18>
 8000ed8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000edc:	ea92 0f0c 	teq	r2, ip
 8000ee0:	bf18      	it	ne
 8000ee2:	ea93 0f0c 	teqne	r3, ip
 8000ee6:	d00a      	beq.n	8000efe <__aeabi_fmul+0x11e>
 8000ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000eec:	bf18      	it	ne
 8000eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ef2:	d1d8      	bne.n	8000ea6 <__aeabi_fmul+0xc6>
 8000ef4:	ea80 0001 	eor.w	r0, r0, r1
 8000ef8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000efc:	4770      	bx	lr
 8000efe:	f090 0f00 	teq	r0, #0
 8000f02:	bf17      	itett	ne
 8000f04:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f08:	4608      	moveq	r0, r1
 8000f0a:	f091 0f00 	teqne	r1, #0
 8000f0e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f12:	d014      	beq.n	8000f3e <__aeabi_fmul+0x15e>
 8000f14:	ea92 0f0c 	teq	r2, ip
 8000f18:	d101      	bne.n	8000f1e <__aeabi_fmul+0x13e>
 8000f1a:	0242      	lsls	r2, r0, #9
 8000f1c:	d10f      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f1e:	ea93 0f0c 	teq	r3, ip
 8000f22:	d103      	bne.n	8000f2c <__aeabi_fmul+0x14c>
 8000f24:	024b      	lsls	r3, r1, #9
 8000f26:	bf18      	it	ne
 8000f28:	4608      	movne	r0, r1
 8000f2a:	d108      	bne.n	8000f3e <__aeabi_fmul+0x15e>
 8000f2c:	ea80 0001 	eor.w	r0, r0, r1
 8000f30:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f3c:	4770      	bx	lr
 8000f3e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f42:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f46:	4770      	bx	lr

08000f48 <__aeabi_fdiv>:
 8000f48:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f4c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f50:	bf1e      	ittt	ne
 8000f52:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f56:	ea92 0f0c 	teqne	r2, ip
 8000f5a:	ea93 0f0c 	teqne	r3, ip
 8000f5e:	d069      	beq.n	8001034 <__aeabi_fdiv+0xec>
 8000f60:	eba2 0203 	sub.w	r2, r2, r3
 8000f64:	ea80 0c01 	eor.w	ip, r0, r1
 8000f68:	0249      	lsls	r1, r1, #9
 8000f6a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f6e:	d037      	beq.n	8000fe0 <__aeabi_fdiv+0x98>
 8000f70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f74:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f78:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f80:	428b      	cmp	r3, r1
 8000f82:	bf38      	it	cc
 8000f84:	005b      	lslcc	r3, r3, #1
 8000f86:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f8a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f8e:	428b      	cmp	r3, r1
 8000f90:	bf24      	itt	cs
 8000f92:	1a5b      	subcs	r3, r3, r1
 8000f94:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f98:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f9c:	bf24      	itt	cs
 8000f9e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fa2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fa6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000faa:	bf24      	itt	cs
 8000fac:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fb8:	bf24      	itt	cs
 8000fba:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fbe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	bf18      	it	ne
 8000fc6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fca:	d1e0      	bne.n	8000f8e <__aeabi_fdiv+0x46>
 8000fcc:	2afd      	cmp	r2, #253	; 0xfd
 8000fce:	f63f af50 	bhi.w	8000e72 <__aeabi_fmul+0x92>
 8000fd2:	428b      	cmp	r3, r1
 8000fd4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fd8:	bf08      	it	eq
 8000fda:	f020 0001 	biceq.w	r0, r0, #1
 8000fde:	4770      	bx	lr
 8000fe0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fe4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fe8:	327f      	adds	r2, #127	; 0x7f
 8000fea:	bfc2      	ittt	gt
 8000fec:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ff0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ff4:	4770      	bxgt	lr
 8000ff6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	3a01      	subs	r2, #1
 8001000:	e737      	b.n	8000e72 <__aeabi_fmul+0x92>
 8001002:	f092 0f00 	teq	r2, #0
 8001006:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800100a:	bf02      	ittt	eq
 800100c:	0040      	lsleq	r0, r0, #1
 800100e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001012:	3a01      	subeq	r2, #1
 8001014:	d0f9      	beq.n	800100a <__aeabi_fdiv+0xc2>
 8001016:	ea40 000c 	orr.w	r0, r0, ip
 800101a:	f093 0f00 	teq	r3, #0
 800101e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001022:	bf02      	ittt	eq
 8001024:	0049      	lsleq	r1, r1, #1
 8001026:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800102a:	3b01      	subeq	r3, #1
 800102c:	d0f9      	beq.n	8001022 <__aeabi_fdiv+0xda>
 800102e:	ea41 010c 	orr.w	r1, r1, ip
 8001032:	e795      	b.n	8000f60 <__aeabi_fdiv+0x18>
 8001034:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8001038:	ea92 0f0c 	teq	r2, ip
 800103c:	d108      	bne.n	8001050 <__aeabi_fdiv+0x108>
 800103e:	0242      	lsls	r2, r0, #9
 8001040:	f47f af7d 	bne.w	8000f3e <__aeabi_fmul+0x15e>
 8001044:	ea93 0f0c 	teq	r3, ip
 8001048:	f47f af70 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 800104c:	4608      	mov	r0, r1
 800104e:	e776      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001050:	ea93 0f0c 	teq	r3, ip
 8001054:	d104      	bne.n	8001060 <__aeabi_fdiv+0x118>
 8001056:	024b      	lsls	r3, r1, #9
 8001058:	f43f af4c 	beq.w	8000ef4 <__aeabi_fmul+0x114>
 800105c:	4608      	mov	r0, r1
 800105e:	e76e      	b.n	8000f3e <__aeabi_fmul+0x15e>
 8001060:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001064:	bf18      	it	ne
 8001066:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800106a:	d1ca      	bne.n	8001002 <__aeabi_fdiv+0xba>
 800106c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001070:	f47f af5c 	bne.w	8000f2c <__aeabi_fmul+0x14c>
 8001074:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001078:	f47f af3c 	bne.w	8000ef4 <__aeabi_fmul+0x114>
 800107c:	e75f      	b.n	8000f3e <__aeabi_fmul+0x15e>
 800107e:	bf00      	nop

08001080 <__gesf2>:
 8001080:	f04f 3cff 	mov.w	ip, #4294967295
 8001084:	e006      	b.n	8001094 <__cmpsf2+0x4>
 8001086:	bf00      	nop

08001088 <__lesf2>:
 8001088:	f04f 0c01 	mov.w	ip, #1
 800108c:	e002      	b.n	8001094 <__cmpsf2+0x4>
 800108e:	bf00      	nop

08001090 <__cmpsf2>:
 8001090:	f04f 0c01 	mov.w	ip, #1
 8001094:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001098:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800109c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010a0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a4:	bf18      	it	ne
 80010a6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010aa:	d011      	beq.n	80010d0 <__cmpsf2+0x40>
 80010ac:	b001      	add	sp, #4
 80010ae:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010b2:	bf18      	it	ne
 80010b4:	ea90 0f01 	teqne	r0, r1
 80010b8:	bf58      	it	pl
 80010ba:	ebb2 0003 	subspl.w	r0, r2, r3
 80010be:	bf88      	it	hi
 80010c0:	17c8      	asrhi	r0, r1, #31
 80010c2:	bf38      	it	cc
 80010c4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010c8:	bf18      	it	ne
 80010ca:	f040 0001 	orrne.w	r0, r0, #1
 80010ce:	4770      	bx	lr
 80010d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010d4:	d102      	bne.n	80010dc <__cmpsf2+0x4c>
 80010d6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010da:	d105      	bne.n	80010e8 <__cmpsf2+0x58>
 80010dc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e0:	d1e4      	bne.n	80010ac <__cmpsf2+0x1c>
 80010e2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010e6:	d0e1      	beq.n	80010ac <__cmpsf2+0x1c>
 80010e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop

080010f0 <__aeabi_cfrcmple>:
 80010f0:	4684      	mov	ip, r0
 80010f2:	4608      	mov	r0, r1
 80010f4:	4661      	mov	r1, ip
 80010f6:	e7ff      	b.n	80010f8 <__aeabi_cfcmpeq>

080010f8 <__aeabi_cfcmpeq>:
 80010f8:	b50f      	push	{r0, r1, r2, r3, lr}
 80010fa:	f7ff ffc9 	bl	8001090 <__cmpsf2>
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf48      	it	mi
 8001102:	f110 0f00 	cmnmi.w	r0, #0
 8001106:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001108 <__aeabi_fcmpeq>:
 8001108:	f84d ed08 	str.w	lr, [sp, #-8]!
 800110c:	f7ff fff4 	bl	80010f8 <__aeabi_cfcmpeq>
 8001110:	bf0c      	ite	eq
 8001112:	2001      	moveq	r0, #1
 8001114:	2000      	movne	r0, #0
 8001116:	f85d fb08 	ldr.w	pc, [sp], #8
 800111a:	bf00      	nop

0800111c <__aeabi_fcmplt>:
 800111c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001120:	f7ff ffea 	bl	80010f8 <__aeabi_cfcmpeq>
 8001124:	bf34      	ite	cc
 8001126:	2001      	movcc	r0, #1
 8001128:	2000      	movcs	r0, #0
 800112a:	f85d fb08 	ldr.w	pc, [sp], #8
 800112e:	bf00      	nop

08001130 <__aeabi_fcmple>:
 8001130:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001134:	f7ff ffe0 	bl	80010f8 <__aeabi_cfcmpeq>
 8001138:	bf94      	ite	ls
 800113a:	2001      	movls	r0, #1
 800113c:	2000      	movhi	r0, #0
 800113e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001142:	bf00      	nop

08001144 <__aeabi_fcmpge>:
 8001144:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001148:	f7ff ffd2 	bl	80010f0 <__aeabi_cfrcmple>
 800114c:	bf94      	ite	ls
 800114e:	2001      	movls	r0, #1
 8001150:	2000      	movhi	r0, #0
 8001152:	f85d fb08 	ldr.w	pc, [sp], #8
 8001156:	bf00      	nop

08001158 <__aeabi_fcmpgt>:
 8001158:	f84d ed08 	str.w	lr, [sp, #-8]!
 800115c:	f7ff ffc8 	bl	80010f0 <__aeabi_cfrcmple>
 8001160:	bf34      	ite	cc
 8001162:	2001      	movcc	r0, #1
 8001164:	2000      	movcs	r0, #0
 8001166:	f85d fb08 	ldr.w	pc, [sp], #8
 800116a:	bf00      	nop

0800116c <__aeabi_f2uiz>:
 800116c:	0042      	lsls	r2, r0, #1
 800116e:	d20e      	bcs.n	800118e <__aeabi_f2uiz+0x22>
 8001170:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001174:	d30b      	bcc.n	800118e <__aeabi_f2uiz+0x22>
 8001176:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800117a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800117e:	d409      	bmi.n	8001194 <__aeabi_f2uiz+0x28>
 8001180:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001184:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001188:	fa23 f002 	lsr.w	r0, r3, r2
 800118c:	4770      	bx	lr
 800118e:	f04f 0000 	mov.w	r0, #0
 8001192:	4770      	bx	lr
 8001194:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001198:	d101      	bne.n	800119e <__aeabi_f2uiz+0x32>
 800119a:	0242      	lsls	r2, r0, #9
 800119c:	d102      	bne.n	80011a4 <__aeabi_f2uiz+0x38>
 800119e:	f04f 30ff 	mov.w	r0, #4294967295
 80011a2:	4770      	bx	lr
 80011a4:	f04f 0000 	mov.w	r0, #0
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	0000      	movs	r0, r0
	...

080011b0 <chao_move_angle>:

	}
}

//0 - 360 degree, 0 degree front, clockwise
void chao_move_angle(float _angle, float speed){
 80011b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011b4:	b084      	sub	sp, #16
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	6039      	str	r1, [r7, #0]
	float angle_arc = (_angle / 180) * M_PI;
 80011bc:	4984      	ldr	r1, [pc, #528]	; (80013d0 <chao_move_angle+0x220>)
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fec2 	bl	8000f48 <__aeabi_fdiv>
 80011c4:	4603      	mov	r3, r0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f992 	bl	80004f0 <__aeabi_f2d>
 80011cc:	a37e      	add	r3, pc, #504	; (adr r3, 80013c8 <chao_move_angle+0x218>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff f9e5 	bl	80005a0 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fca1 	bl	8000b24 <__aeabi_d2f>
 80011e2:	4603      	mov	r3, r0
 80011e4:	60fb      	str	r3, [r7, #12]
	cmotor_lf.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 80011e6:	6838      	ldr	r0, [r7, #0]
 80011e8:	f7ff f982 	bl	80004f0 <__aeabi_f2d>
 80011ec:	4604      	mov	r4, r0
 80011ee:	460d      	mov	r5, r1
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f7ff f97d 	bl	80004f0 <__aeabi_f2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f006 fd95 	bl	8007d2c <cos>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4620      	mov	r0, r4
 8001208:	4629      	mov	r1, r5
 800120a:	f7ff f9c9 	bl	80005a0 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4690      	mov	r8, r2
 8001214:	4699      	mov	r9, r3
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f7ff f96a 	bl	80004f0 <__aeabi_f2d>
 800121c:	4604      	mov	r4, r0
 800121e:	460d      	mov	r5, r1
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f7ff f965 	bl	80004f0 <__aeabi_f2d>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f006 fdc3 	bl	8007db8 <sin>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4620      	mov	r0, r4
 8001238:	4629      	mov	r1, r5
 800123a:	f7ff f9b1 	bl	80005a0 <__aeabi_dmul>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4640      	mov	r0, r8
 8001244:	4649      	mov	r1, r9
 8001246:	f7fe fff3 	bl	8000230 <__aeabi_dsub>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4610      	mov	r0, r2
 8001250:	4619      	mov	r1, r3
 8001252:	f7ff fc67 	bl	8000b24 <__aeabi_d2f>
 8001256:	4603      	mov	r3, r0
 8001258:	4a5e      	ldr	r2, [pc, #376]	; (80013d4 <chao_move_angle+0x224>)
 800125a:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rf.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f7ff f947 	bl	80004f0 <__aeabi_f2d>
 8001262:	4604      	mov	r4, r0
 8001264:	460d      	mov	r5, r1
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	f7ff f942 	bl	80004f0 <__aeabi_f2d>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4610      	mov	r0, r2
 8001272:	4619      	mov	r1, r3
 8001274:	f006 fd5a 	bl	8007d2c <cos>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	4620      	mov	r0, r4
 800127e:	4629      	mov	r1, r5
 8001280:	f7ff f98e 	bl	80005a0 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4690      	mov	r8, r2
 800128a:	4699      	mov	r9, r3
 800128c:	6838      	ldr	r0, [r7, #0]
 800128e:	f7ff f92f 	bl	80004f0 <__aeabi_f2d>
 8001292:	4604      	mov	r4, r0
 8001294:	460d      	mov	r5, r1
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f7ff f92a 	bl	80004f0 <__aeabi_f2d>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f006 fd88 	bl	8007db8 <sin>
 80012a8:	4602      	mov	r2, r0
 80012aa:	460b      	mov	r3, r1
 80012ac:	4620      	mov	r0, r4
 80012ae:	4629      	mov	r1, r5
 80012b0:	f7ff f976 	bl	80005a0 <__aeabi_dmul>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4640      	mov	r0, r8
 80012ba:	4649      	mov	r1, r9
 80012bc:	f7fe ffba 	bl	8000234 <__adddf3>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc2c 	bl	8000b24 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a42      	ldr	r2, [pc, #264]	; (80013d8 <chao_move_angle+0x228>)
 80012d0:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_lb.goalSpeed = speed * cos(angle_arc) + speed * sin(angle_arc);
 80012d2:	6838      	ldr	r0, [r7, #0]
 80012d4:	f7ff f90c 	bl	80004f0 <__aeabi_f2d>
 80012d8:	4604      	mov	r4, r0
 80012da:	460d      	mov	r5, r1
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f7ff f907 	bl	80004f0 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4610      	mov	r0, r2
 80012e8:	4619      	mov	r1, r3
 80012ea:	f006 fd1f 	bl	8007d2c <cos>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4620      	mov	r0, r4
 80012f4:	4629      	mov	r1, r5
 80012f6:	f7ff f953 	bl	80005a0 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4690      	mov	r8, r2
 8001300:	4699      	mov	r9, r3
 8001302:	6838      	ldr	r0, [r7, #0]
 8001304:	f7ff f8f4 	bl	80004f0 <__aeabi_f2d>
 8001308:	4604      	mov	r4, r0
 800130a:	460d      	mov	r5, r1
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f7ff f8ef 	bl	80004f0 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4610      	mov	r0, r2
 8001318:	4619      	mov	r1, r3
 800131a:	f006 fd4d 	bl	8007db8 <sin>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7ff f93b 	bl	80005a0 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4640      	mov	r0, r8
 8001330:	4649      	mov	r1, r9
 8001332:	f7fe ff7f 	bl	8000234 <__adddf3>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	4610      	mov	r0, r2
 800133c:	4619      	mov	r1, r3
 800133e:	f7ff fbf1 	bl	8000b24 <__aeabi_d2f>
 8001342:	4603      	mov	r3, r0
 8001344:	4a25      	ldr	r2, [pc, #148]	; (80013dc <chao_move_angle+0x22c>)
 8001346:	6393      	str	r3, [r2, #56]	; 0x38
	cmotor_rb.goalSpeed = speed * cos(angle_arc) - speed * sin(angle_arc);
 8001348:	6838      	ldr	r0, [r7, #0]
 800134a:	f7ff f8d1 	bl	80004f0 <__aeabi_f2d>
 800134e:	4604      	mov	r4, r0
 8001350:	460d      	mov	r5, r1
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff f8cc 	bl	80004f0 <__aeabi_f2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f006 fce4 	bl	8007d2c <cos>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4620      	mov	r0, r4
 800136a:	4629      	mov	r1, r5
 800136c:	f7ff f918 	bl	80005a0 <__aeabi_dmul>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4690      	mov	r8, r2
 8001376:	4699      	mov	r9, r3
 8001378:	6838      	ldr	r0, [r7, #0]
 800137a:	f7ff f8b9 	bl	80004f0 <__aeabi_f2d>
 800137e:	4604      	mov	r4, r0
 8001380:	460d      	mov	r5, r1
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7ff f8b4 	bl	80004f0 <__aeabi_f2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f006 fd12 	bl	8007db8 <sin>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4620      	mov	r0, r4
 800139a:	4629      	mov	r1, r5
 800139c:	f7ff f900 	bl	80005a0 <__aeabi_dmul>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4640      	mov	r0, r8
 80013a6:	4649      	mov	r1, r9
 80013a8:	f7fe ff42 	bl	8000230 <__aeabi_dsub>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4610      	mov	r0, r2
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fbb6 	bl	8000b24 <__aeabi_d2f>
 80013b8:	4603      	mov	r3, r0
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <chao_move_angle+0x230>)
 80013bc:	6393      	str	r3, [r2, #56]	; 0x38
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80013c8:	54442d18 	.word	0x54442d18
 80013cc:	400921fb 	.word	0x400921fb
 80013d0:	43340000 	.word	0x43340000
 80013d4:	2000098c 	.word	0x2000098c
 80013d8:	200009c8 	.word	0x200009c8
 80013dc:	20000a04 	.word	0x20000a04
 80013e0:	20000a40 	.word	0x20000a40

080013e4 <huansic_jy62_init>:
uint8_t setBaud9600_pack[3] = { 0xFF, 0xAA, 0x64 };
uint8_t setHorizontal_pack[3] = { 0xFF, 0xAA, 0x65 };
uint8_t setVertical_pack[3] = { 0xFF, 0xAA, 0x66 };
uint8_t sleepAndAwake_pack[3] = { 0xFF, 0xAA, 0x60 };

void huansic_jy62_init(JY62_HandleTypeDef *hjy62) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	if(!hjy62) return;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d038      	beq.n	8001464 <huansic_jy62_init+0x80>
	if(!hjy62->uartPort) return;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d036      	beq.n	8001468 <huansic_jy62_init+0x84>

	huansic_jy62_resetAngle(hjy62);
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f000 f838 	bl	8001470 <huansic_jy62_resetAngle>

	hjy62->accel_x = 0;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	605a      	str	r2, [r3, #4]
	hjy62->accel_y = 0;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
	hjy62->accel_z = 0;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	60da      	str	r2, [r3, #12]
	hjy62->omega_x = 0;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	611a      	str	r2, [r3, #16]
	hjy62->omega_y = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	615a      	str	r2, [r3, #20]
	hjy62->omega_z = 0;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
	hjy62->theta_x = 0;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	61da      	str	r2, [r3, #28]
	hjy62->theta_y = 0;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	621a      	str	r2, [r3, #32]
	hjy62->theta_z = 0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	625a      	str	r2, [r3, #36]	; 0x24

	hjy62->lastUpdated = HAL_GetTick();
 8001448:	f002 fc02 	bl	8003c50 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	629a      	str	r2, [r3, #40]	; 0x28

	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	332c      	adds	r3, #44	; 0x2c
 800145a:	220b      	movs	r2, #11
 800145c:	4619      	mov	r1, r3
 800145e:	f005 f9b7 	bl	80067d0 <HAL_UART_Receive_DMA>
 8001462:	e002      	b.n	800146a <huansic_jy62_init+0x86>
	if(!hjy62) return;
 8001464:	bf00      	nop
 8001466:	e000      	b.n	800146a <huansic_jy62_init+0x86>
	if(!hjy62->uartPort) return;
 8001468:	bf00      	nop
}
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <huansic_jy62_resetAngle>:

void huansic_jy62_resetAngle(JY62_HandleTypeDef *hjy62) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(hjy62->uartPort, initAngle_pack, 3, HAL_MAX_DELAY);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	f04f 33ff 	mov.w	r3, #4294967295
 8001480:	2203      	movs	r2, #3
 8001482:	4903      	ldr	r1, [pc, #12]	; (8001490 <huansic_jy62_resetAngle+0x20>)
 8001484:	f005 f912 	bl	80066ac <HAL_UART_Transmit>
}
 8001488:	bf00      	nop
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000000 	.word	0x20000000
 8001494:	00000000 	.word	0x00000000

08001498 <huansic_jy62_decodePackage>:

void huansic_jy62_decodePackage(JY62_HandleTypeDef *hjy62) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	// package header
	if (hjy62->buffer[0] != 0x55)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80014a6:	2b55      	cmp	r3, #85	; 0x55
 80014a8:	f040 81f2 	bne.w	8001890 <huansic_jy62_decodePackage+0x3f8>
		return;

	// checksum
	uint8_t sum = hjy62->buffer[0] + hjy62->buffer[1] + hjy62->buffer[2] + hjy62->buffer[3]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80014b8:	4413      	add	r3, r2
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80014c2:	4413      	add	r3, r2
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80014cc:	4413      	add	r3, r2
 80014ce:	b2da      	uxtb	r2, r3
			+ hjy62->buffer[4] + hjy62->buffer[5] + hjy62->buffer[6] + hjy62->buffer[7]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014d6:	4413      	add	r3, r2
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80014e0:	4413      	add	r3, r2
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80014ea:	4413      	add	r3, r2
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80014f4:	4413      	add	r3, r2
 80014f6:	b2da      	uxtb	r2, r3
			+ hjy62->buffer[8] + hjy62->buffer[9];
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014fe:	4413      	add	r3, r2
 8001500:	b2da      	uxtb	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
	uint8_t sum = hjy62->buffer[0] + hjy62->buffer[1] + hjy62->buffer[2] + hjy62->buffer[3]
 8001508:	4413      	add	r3, r2
 800150a:	73fb      	strb	r3, [r7, #15]
	if (hjy62->buffer[10] != sum)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001512:	7bfa      	ldrb	r2, [r7, #15]
 8001514:	429a      	cmp	r2, r3
 8001516:	f040 81bd 	bne.w	8001894 <huansic_jy62_decodePackage+0x3fc>
		return;

	// decoding
	int16_t temp;
	if (hjy62->buffer[1] == 0x51) {		// acceleration
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001520:	2b51      	cmp	r3, #81	; 0x51
 8001522:	d175      	bne.n	8001610 <huansic_jy62_decodePackage+0x178>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800152a:	021b      	lsls	r3, r3, #8
 800152c:	b21a      	sxth	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_x = temp / 32768.0 * 16.0;
 800153a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800153e:	4618      	mov	r0, r3
 8001540:	f7fe ffc4 	bl	80004cc <__aeabi_i2d>
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	4b8d      	ldr	r3, [pc, #564]	; (8001780 <huansic_jy62_decodePackage+0x2e8>)
 800154a:	f7ff f953 	bl	80007f4 <__aeabi_ddiv>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4610      	mov	r0, r2
 8001554:	4619      	mov	r1, r3
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	4b8a      	ldr	r3, [pc, #552]	; (8001784 <huansic_jy62_decodePackage+0x2ec>)
 800155c:	f7ff f820 	bl	80005a0 <__aeabi_dmul>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	4610      	mov	r0, r2
 8001566:	4619      	mov	r1, r3
 8001568:	f7ff fadc 	bl	8000b24 <__aeabi_d2f>
 800156c:	4602      	mov	r2, r0
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	605a      	str	r2, [r3, #4]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21a      	sxth	r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001582:	b21b      	sxth	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_y = temp / 32768.0 * 16.0;
 8001588:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe ff9d 	bl	80004cc <__aeabi_i2d>
 8001592:	f04f 0200 	mov.w	r2, #0
 8001596:	4b7a      	ldr	r3, [pc, #488]	; (8001780 <huansic_jy62_decodePackage+0x2e8>)
 8001598:	f7ff f92c 	bl	80007f4 <__aeabi_ddiv>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b76      	ldr	r3, [pc, #472]	; (8001784 <huansic_jy62_decodePackage+0x2ec>)
 80015aa:	f7fe fff9 	bl	80005a0 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fab5 	bl	8000b24 <__aeabi_d2f>
 80015ba:	4602      	mov	r2, r0
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	609a      	str	r2, [r3, #8]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	b21a      	sxth	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	81bb      	strh	r3, [r7, #12]
		hjy62->accel_z = temp / 32768.0 * 16.0;
 80015d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ff76 	bl	80004cc <__aeabi_i2d>
 80015e0:	f04f 0200 	mov.w	r2, #0
 80015e4:	4b66      	ldr	r3, [pc, #408]	; (8001780 <huansic_jy62_decodePackage+0x2e8>)
 80015e6:	f7ff f905 	bl	80007f4 <__aeabi_ddiv>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f04f 0200 	mov.w	r2, #0
 80015f6:	4b63      	ldr	r3, [pc, #396]	; (8001784 <huansic_jy62_decodePackage+0x2ec>)
 80015f8:	f7fe ffd2 	bl	80005a0 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff fa8e 	bl	8000b24 <__aeabi_d2f>
 8001608:	4602      	mov	r2, r0
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	e139      	b.n	8001884 <huansic_jy62_decodePackage+0x3ec>
	} else if (hjy62->buffer[1] == 0x52) {		// angular speed
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001616:	2b52      	cmp	r3, #82	; 0x52
 8001618:	f040 80ba 	bne.w	8001790 <huansic_jy62_decodePackage+0x2f8>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	b21a      	sxth	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800162c:	b21b      	sxth	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_x = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 8001632:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ff48 	bl	80004cc <__aeabi_i2d>
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	4b4f      	ldr	r3, [pc, #316]	; (8001780 <huansic_jy62_decodePackage+0x2e8>)
 8001642:	f7ff f8d7 	bl	80007f4 <__aeabi_ddiv>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4610      	mov	r0, r2
 800164c:	4619      	mov	r1, r3
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <huansic_jy62_decodePackage+0x2f0>)
 8001654:	f7fe ffa4 	bl	80005a0 <__aeabi_dmul>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4610      	mov	r0, r2
 800165e:	4619      	mov	r1, r3
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	4b49      	ldr	r3, [pc, #292]	; (800178c <huansic_jy62_decodePackage+0x2f4>)
 8001666:	f7ff f8c5 	bl	80007f4 <__aeabi_ddiv>
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	a341      	add	r3, pc, #260	; (adr r3, 8001778 <huansic_jy62_decodePackage+0x2e0>)
 8001674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001678:	f7fe ff92 	bl	80005a0 <__aeabi_dmul>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4610      	mov	r0, r2
 8001682:	4619      	mov	r1, r3
 8001684:	f7ff fa4e 	bl	8000b24 <__aeabi_d2f>
 8001688:	4602      	mov	r2, r0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	611a      	str	r2, [r3, #16]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	b21a      	sxth	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800169e:	b21b      	sxth	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_y = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 80016a4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff0f 	bl	80004cc <__aeabi_i2d>
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b33      	ldr	r3, [pc, #204]	; (8001780 <huansic_jy62_decodePackage+0x2e8>)
 80016b4:	f7ff f89e 	bl	80007f4 <__aeabi_ddiv>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <huansic_jy62_decodePackage+0x2f0>)
 80016c6:	f7fe ff6b 	bl	80005a0 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4610      	mov	r0, r2
 80016d0:	4619      	mov	r1, r3
 80016d2:	f04f 0200 	mov.w	r2, #0
 80016d6:	4b2d      	ldr	r3, [pc, #180]	; (800178c <huansic_jy62_decodePackage+0x2f4>)
 80016d8:	f7ff f88c 	bl	80007f4 <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	a324      	add	r3, pc, #144	; (adr r3, 8001778 <huansic_jy62_decodePackage+0x2e0>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe ff59 	bl	80005a0 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4610      	mov	r0, r2
 80016f4:	4619      	mov	r1, r3
 80016f6:	f7ff fa15 	bl	8000b24 <__aeabi_d2f>
 80016fa:	4602      	mov	r2, r0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	615a      	str	r2, [r3, #20]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	b21a      	sxth	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001710:	b21b      	sxth	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	81bb      	strh	r3, [r7, #12]
		hjy62->omega_z = temp / 32768.0 * 2000.0 / 180.0 * M_PI;
 8001716:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800171a:	4618      	mov	r0, r3
 800171c:	f7fe fed6 	bl	80004cc <__aeabi_i2d>
 8001720:	f04f 0200 	mov.w	r2, #0
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <huansic_jy62_decodePackage+0x2e8>)
 8001726:	f7ff f865 	bl	80007f4 <__aeabi_ddiv>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4610      	mov	r0, r2
 8001730:	4619      	mov	r1, r3
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <huansic_jy62_decodePackage+0x2f0>)
 8001738:	f7fe ff32 	bl	80005a0 <__aeabi_dmul>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <huansic_jy62_decodePackage+0x2f4>)
 800174a:	f7ff f853 	bl	80007f4 <__aeabi_ddiv>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	a308      	add	r3, pc, #32	; (adr r3, 8001778 <huansic_jy62_decodePackage+0x2e0>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe ff20 	bl	80005a0 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	f7ff f9dc 	bl	8000b24 <__aeabi_d2f>
 800176c:	4602      	mov	r2, r0
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	619a      	str	r2, [r3, #24]
 8001772:	e087      	b.n	8001884 <huansic_jy62_decodePackage+0x3ec>
 8001774:	f3af 8000 	nop.w
 8001778:	54442d18 	.word	0x54442d18
 800177c:	400921fb 	.word	0x400921fb
 8001780:	40e00000 	.word	0x40e00000
 8001784:	40300000 	.word	0x40300000
 8001788:	409f4000 	.word	0x409f4000
 800178c:	40668000 	.word	0x40668000
	} else if (hjy62->buffer[1] == 0x53) {		// angle
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001796:	2b53      	cmp	r3, #83	; 0x53
 8001798:	d174      	bne.n	8001884 <huansic_jy62_decodePackage+0x3ec>
		temp = (hjy62->buffer[3] << 8) | hjy62->buffer[2];
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_x = temp / 32768.0 * M_PI;
 80017b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe fe89 	bl	80004cc <__aeabi_i2d>
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <huansic_jy62_decodePackage+0x410>)
 80017c0:	f7ff f818 	bl	80007f4 <__aeabi_ddiv>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4610      	mov	r0, r2
 80017ca:	4619      	mov	r1, r3
 80017cc:	a334      	add	r3, pc, #208	; (adr r3, 80018a0 <huansic_jy62_decodePackage+0x408>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	f7fe fee5 	bl	80005a0 <__aeabi_dmul>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f9a1 	bl	8000b24 <__aeabi_d2f>
 80017e2:	4602      	mov	r2, r0
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	61da      	str	r2, [r3, #28]
		temp = (hjy62->buffer[5] << 8) | hjy62->buffer[4];
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80017ee:	021b      	lsls	r3, r3, #8
 80017f0:	b21a      	sxth	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017f8:	b21b      	sxth	r3, r3
 80017fa:	4313      	orrs	r3, r2
 80017fc:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_y = temp / 32768.0 * M_PI;
 80017fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe fe62 	bl	80004cc <__aeabi_i2d>
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <huansic_jy62_decodePackage+0x410>)
 800180e:	f7fe fff1 	bl	80007f4 <__aeabi_ddiv>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	a321      	add	r3, pc, #132	; (adr r3, 80018a0 <huansic_jy62_decodePackage+0x408>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe febe 	bl	80005a0 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f7ff f97a 	bl	8000b24 <__aeabi_d2f>
 8001830:	4602      	mov	r2, r0
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	621a      	str	r2, [r3, #32]
		temp = (hjy62->buffer[7] << 8) | hjy62->buffer[6];
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	b21a      	sxth	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001846:	b21b      	sxth	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	81bb      	strh	r3, [r7, #12]
		hjy62->theta_z = temp / 32768.0 * M_PI;
 800184c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe3b 	bl	80004cc <__aeabi_i2d>
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <huansic_jy62_decodePackage+0x410>)
 800185c:	f7fe ffca 	bl	80007f4 <__aeabi_ddiv>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	a30d      	add	r3, pc, #52	; (adr r3, 80018a0 <huansic_jy62_decodePackage+0x408>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe fe97 	bl	80005a0 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f953 	bl	8000b24 <__aeabi_d2f>
 800187e:	4602      	mov	r2, r0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// record current time
	hjy62->lastUpdated = HAL_GetTick();
 8001884:	f002 f9e4 	bl	8003c50 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	629a      	str	r2, [r3, #40]	; 0x28
 800188e:	e002      	b.n	8001896 <huansic_jy62_decodePackage+0x3fe>
		return;
 8001890:	bf00      	nop
 8001892:	e000      	b.n	8001896 <huansic_jy62_decodePackage+0x3fe>
		return;
 8001894:	bf00      	nop
}
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	f3af 8000 	nop.w
 80018a0:	54442d18 	.word	0x54442d18
 80018a4:	400921fb 	.word	0x400921fb
 80018a8:	40e00000 	.word	0x40e00000

080018ac <huansic_jy62_setDMA>:

void huansic_jy62_setDMA(JY62_HandleTypeDef *hjy62) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(hjy62->uartPort, hjy62->buffer, JY62_MESSAGE_LENGTH);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	332c      	adds	r3, #44	; 0x2c
 80018bc:	220b      	movs	r2, #11
 80018be:	4619      	mov	r1, r3
 80018c0:	f004 ff86 	bl	80067d0 <HAL_UART_Receive_DMA>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <custom_order_free_fault>:

__weak void custom_path_free_fault(Path *ptr) {

}

__weak void custom_order_free_fault(Order *ptr) {
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]

}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
	...

080018e0 <huansic_order_new>:
	uint8_t i;
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++)
		orderBuffers[i].id = -1;
}

Order* huansic_order_new(int8_t id) {
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	71fb      	strb	r3, [r7, #7]
	if (id == -1)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f2:	d101      	bne.n	80018f8 <huansic_order_new+0x18>
		return 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e046      	b.n	8001986 <huansic_order_new+0xa6>

	uint8_t i;

	// find duplicates
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	73fb      	strb	r3, [r7, #15]
 80018fc:	e017      	b.n	800192e <huansic_order_new+0x4e>
		if (orderBuffers[i].id == id)
 80018fe:	7bfa      	ldrb	r2, [r7, #15]
 8001900:	4923      	ldr	r1, [pc, #140]	; (8001990 <huansic_order_new+0xb0>)
 8001902:	4613      	mov	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4413      	add	r3, r2
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	440b      	add	r3, r1
 800190c:	3310      	adds	r3, #16
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	429a      	cmp	r2, r3
 8001916:	d107      	bne.n	8001928 <huansic_order_new+0x48>
			return &orderBuffers[i];
 8001918:	7bfa      	ldrb	r2, [r7, #15]
 800191a:	4613      	mov	r3, r2
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	4413      	add	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <huansic_order_new+0xb0>)
 8001924:	4413      	add	r3, r2
 8001926:	e02e      	b.n	8001986 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	3301      	adds	r3, #1
 800192c:	73fb      	strb	r3, [r7, #15]
 800192e:	7bfb      	ldrb	r3, [r7, #15]
 8001930:	2b3b      	cmp	r3, #59	; 0x3b
 8001932:	d9e4      	bls.n	80018fe <huansic_order_new+0x1e>
	}

	// find spares
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
 8001938:	e021      	b.n	800197e <huansic_order_new+0x9e>
		if (orderBuffers[i].id == -1) {
 800193a:	7bfa      	ldrb	r2, [r7, #15]
 800193c:	4914      	ldr	r1, [pc, #80]	; (8001990 <huansic_order_new+0xb0>)
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	440b      	add	r3, r1
 8001948:	3310      	adds	r3, #16
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001950:	d112      	bne.n	8001978 <huansic_order_new+0x98>
			orderBuffers[i].id = id;
 8001952:	7bfa      	ldrb	r2, [r7, #15]
 8001954:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <huansic_order_new+0xb0>)
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4403      	add	r3, r0
 8001964:	3310      	adds	r3, #16
 8001966:	6019      	str	r1, [r3, #0]
			return &orderBuffers[i];
 8001968:	7bfa      	ldrb	r2, [r7, #15]
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	00db      	lsls	r3, r3, #3
 8001972:	4a07      	ldr	r2, [pc, #28]	; (8001990 <huansic_order_new+0xb0>)
 8001974:	4413      	add	r3, r2
 8001976:	e006      	b.n	8001986 <huansic_order_new+0xa6>
	for (i = 0; i < HUANSIC_ORDER_PREMALLOC_SIZE; i++) {
 8001978:	7bfb      	ldrb	r3, [r7, #15]
 800197a:	3301      	adds	r3, #1
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	2b3b      	cmp	r3, #59	; 0x3b
 8001982:	d9da      	bls.n	800193a <huansic_order_new+0x5a>
		}
	}

	return 0;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr
 8001990:	20000090 	.word	0x20000090

08001994 <huansic_order_delete>:

void huansic_order_delete(Order *ptr) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	if(ptr->id == -1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019a4:	d103      	bne.n	80019ae <huansic_order_delete+0x1a>
		custom_order_free_fault(ptr);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff ff90 	bl	80018cc <custom_order_free_fault>
	else
		ptr->id = -1;		// simple as is
}
 80019ac:	e003      	b.n	80019b6 <huansic_order_delete+0x22>
		ptr->id = -1;		// simple as is
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295
 80019b4:	611a      	str	r2, [r3, #16]
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
	...

080019c0 <huansic_motor_init>:
 *      Author: Zonghuan Wu
 */

#include "huansic_motorlib.h"

void huansic_motor_init(Motor_HandleTypeDef *hmotor) {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	// checking some stuff
	assert(hmotor->counter);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <huansic_motor_init+0x1c>
 80019d0:	4b55      	ldr	r3, [pc, #340]	; (8001b28 <huansic_motor_init+0x168>)
 80019d2:	4a56      	ldr	r2, [pc, #344]	; (8001b2c <huansic_motor_init+0x16c>)
 80019d4:	210c      	movs	r1, #12
 80019d6:	4856      	ldr	r0, [pc, #344]	; (8001b30 <huansic_motor_init+0x170>)
 80019d8:	f005 f97e 	bl	8006cd8 <__assert_func>
	assert(hmotor->posTimer);	// the negative channel CAN be NULL
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <huansic_motor_init+0x30>
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <huansic_motor_init+0x174>)
 80019e6:	4a51      	ldr	r2, [pc, #324]	; (8001b2c <huansic_motor_init+0x16c>)
 80019e8:	210d      	movs	r1, #13
 80019ea:	4851      	ldr	r0, [pc, #324]	; (8001b30 <huansic_motor_init+0x170>)
 80019ec:	f005 f974 	bl	8006cd8 <__assert_func>
	assert(hmotor->dt);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1b      	ldr	r3, [r3, #32]
 80019f4:	f04f 0100 	mov.w	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fb85 	bl	8001108 <__aeabi_fcmpeq>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d005      	beq.n	8001a10 <huansic_motor_init+0x50>
 8001a04:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <huansic_motor_init+0x178>)
 8001a06:	4a49      	ldr	r2, [pc, #292]	; (8001b2c <huansic_motor_init+0x16c>)
 8001a08:	210e      	movs	r1, #14
 8001a0a:	4849      	ldr	r0, [pc, #292]	; (8001b30 <huansic_motor_init+0x170>)
 8001a0c:	f005 f964 	bl	8006cd8 <__assert_func>

	// initialize
	hmotor->lastTick = 0;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	849a      	strh	r2, [r3, #36]	; 0x24
	hmotor->lastError = 0;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	629a      	str	r2, [r3, #40]	; 0x28
	hmotor->lastSpeed = 0;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	62da      	str	r2, [r3, #44]	; 0x2c
	hmotor->last5Speed = 0;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	631a      	str	r2, [r3, #48]	; 0x30
	hmotor->sumError = 0;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	635a      	str	r2, [r3, #52]	; 0x34
	hmotor->goalSpeed = 0;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	639a      	str	r2, [r3, #56]	; 0x38
	hmotor->counter->Instance->CNT = 0;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2200      	movs	r2, #0
 8001a46:	625a      	str	r2, [r3, #36]	; 0x24

	// shut down the motor for now

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d105      	bne.n	8001a5c <huansic_motor_init+0x9c>
		hmotor->posTimer->Instance->CCR1 = 0;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2200      	movs	r2, #0
 8001a58:	635a      	str	r2, [r3, #52]	; 0x34
 8001a5a:	e01c      	b.n	8001a96 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d105      	bne.n	8001a70 <huansic_motor_init+0xb0>
		hmotor->posTimer->Instance->CCR2 = 0;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	639a      	str	r2, [r3, #56]	; 0x38
 8001a6e:	e012      	b.n	8001a96 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d105      	bne.n	8001a84 <huansic_motor_init+0xc4>
		hmotor->posTimer->Instance->CCR3 = 0;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a82:	e008      	b.n	8001a96 <huansic_motor_init+0xd6>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	2b0c      	cmp	r3, #12
 8001a8a:	d104      	bne.n	8001a96 <huansic_motor_init+0xd6>
		hmotor->posTimer->Instance->CCR4 = 0;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2200      	movs	r2, #0
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d026      	beq.n	8001aec <huansic_motor_init+0x12c>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d105      	bne.n	8001ab2 <huansic_motor_init+0xf2>
			hmotor->negTimer->Instance->CCR1 = 0;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2200      	movs	r2, #0
 8001aae:	635a      	str	r2, [r3, #52]	; 0x34
 8001ab0:	e01c      	b.n	8001aec <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	691b      	ldr	r3, [r3, #16]
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d105      	bne.n	8001ac6 <huansic_motor_init+0x106>
			hmotor->negTimer->Instance->CCR2 = 0;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	639a      	str	r2, [r3, #56]	; 0x38
 8001ac4:	e012      	b.n	8001aec <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d105      	bne.n	8001ada <huansic_motor_init+0x11a>
			hmotor->negTimer->Instance->CCR3 = 0;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ad8:	e008      	b.n	8001aec <huansic_motor_init+0x12c>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d104      	bne.n	8001aec <huansic_motor_init+0x12c>
			hmotor->negTimer->Instance->CCR4 = 0;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
		else
			;
	}
	// and start the counter and timer
	HAL_TIM_Encoder_Start(hmotor->counter, TIM_CHANNEL_ALL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	213c      	movs	r1, #60	; 0x3c
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 fe98 	bl	8005828 <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(hmotor->posTimer, hmotor->pos_channel);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4619      	mov	r1, r3
 8001b02:	4610      	mov	r0, r2
 8001b04:	f003 fd34 	bl	8005570 <HAL_TIM_PWM_Start>
	if (hmotor->negTimer)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <huansic_motor_init+0x160>
		HAL_TIM_PWM_Start(hmotor->negTimer, hmotor->neg_channel);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4610      	mov	r0, r2
 8001b1c:	f003 fd28 	bl	8005570 <HAL_TIM_PWM_Start>
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	08008e10 	.word	0x08008e10
 8001b2c:	08008e78 	.word	0x08008e78
 8001b30:	08008e20 	.word	0x08008e20
 8001b34:	08008e40 	.word	0x08008e40
 8001b38:	08008e54 	.word	0x08008e54

08001b3c <huansic_motor_pid>:

void huansic_motor_pid(Motor_HandleTypeDef *hmotor) {
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	int16_t diffTick = (int16_t)(0x0FFFF & hmotor->counter->Instance->CNT) - (int16_t)hmotor->lastTick;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	82fb      	strh	r3, [r7, #22]

	hmotor->lastTick = hmotor->counter->Instance->CNT;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	b29a      	uxth	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	849a      	strh	r2, [r3, #36]	; 0x24

	hmotor->lastSpeed = (float) diffTick / hmotor->dt;
 8001b66:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f8e4 	bl	8000d38 <__aeabi_i2f>
 8001b70:	4602      	mov	r2, r0
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4619      	mov	r1, r3
 8001b78:	4610      	mov	r0, r2
 8001b7a:	f7ff f9e5 	bl	8000f48 <__aeabi_fdiv>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	62da      	str	r2, [r3, #44]	; 0x2c
	//hmotor->last5Speed = (4.0 * hmotor->last5Speed + hmotor->lastSpeed) / 5.0;

	// Derivative
	float dError = hmotor->lastError - (hmotor->goalSpeed - hmotor->lastSpeed);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b92:	4619      	mov	r1, r3
 8001b94:	4610      	mov	r0, r2
 8001b96:	f7ff f819 	bl	8000bcc <__aeabi_fsub>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	4620      	mov	r0, r4
 8001ba0:	f7ff f814 	bl	8000bcc <__aeabi_fsub>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	613b      	str	r3, [r7, #16]

	// Proportional
	hmotor->lastError = hmotor->goalSpeed - hmotor->lastSpeed;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	f7ff f80a 	bl	8000bcc <__aeabi_fsub>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	629a      	str	r2, [r3, #40]	; 0x28

	// Integral
	hmotor->sumError += hmotor->lastError;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4610      	mov	r0, r2
 8001bcc:	f7ff f800 	bl	8000bd0 <__addsf3>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34

	// calculate and constrain the duty cycle
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695a      	ldr	r2, [r3, #20]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4610      	mov	r0, r2
 8001be4:	f7ff f8fc 	bl	8000de0 <__aeabi_fmul>
 8001be8:	4603      	mov	r3, r0
 8001bea:	461c      	mov	r4, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699a      	ldr	r2, [r3, #24]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4610      	mov	r0, r2
 8001bf8:	f7ff f8f2 	bl	8000de0 <__aeabi_fmul>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4620      	mov	r0, r4
 8001c02:	f7fe ffe5 	bl	8000bd0 <__addsf3>
 8001c06:	4603      	mov	r3, r0
 8001c08:	461c      	mov	r4, r3
			+ hmotor->kd * dError;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69db      	ldr	r3, [r3, #28]
 8001c0e:	6939      	ldr	r1, [r7, #16]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff f8e5 	bl	8000de0 <__aeabi_fmul>
 8001c16:	4603      	mov	r3, r0
	float foutput = hmotor->kp * hmotor->lastError + hmotor->ki * hmotor->sumError
 8001c18:	4619      	mov	r1, r3
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7fe ffd8 	bl	8000bd0 <__addsf3>
 8001c20:	4603      	mov	r3, r0
 8001c22:	60fb      	str	r3, [r7, #12]
	foutput = foutput > 1.0 ? 1.0 : (foutput < -1.0 ? -1.0 : foutput);
 8001c24:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7ff fa95 	bl	8001158 <__aeabi_fcmpgt>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <huansic_motor_pid+0xfe>
 8001c34:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001c38:	e009      	b.n	8001c4e <huansic_motor_pid+0x112>
 8001c3a:	4954      	ldr	r1, [pc, #336]	; (8001d8c <huansic_motor_pid+0x250>)
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f7ff fa6d 	bl	800111c <__aeabi_fcmplt>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <huansic_motor_pid+0x110>
 8001c48:	4b50      	ldr	r3, [pc, #320]	; (8001d8c <huansic_motor_pid+0x250>)
 8001c4a:	e000      	b.n	8001c4e <huansic_motor_pid+0x112>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	60fb      	str	r3, [r7, #12]

	// output to the timers
	uint16_t posoutput = foutput > 0 ? roundf(fabsf(foutput) * hmotor->posTimer->Instance->ARR) : 0;
 8001c50:	f04f 0100 	mov.w	r1, #0
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f7ff fa7f 	bl	8001158 <__aeabi_fcmpgt>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d019      	beq.n	8001c94 <huansic_motor_pid+0x158>
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f85e 	bl	8000d30 <__aeabi_ui2f>
 8001c74:	4603      	mov	r3, r0
 8001c76:	4619      	mov	r1, r3
 8001c78:	4620      	mov	r0, r4
 8001c7a:	f7ff f8b1 	bl	8000de0 <__aeabi_fmul>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f006 f8df 	bl	8007e44 <roundf>
 8001c86:	4603      	mov	r3, r0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fa6f 	bl	800116c <__aeabi_f2uiz>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	e000      	b.n	8001c96 <huansic_motor_pid+0x15a>
 8001c94:	2300      	movs	r3, #0
 8001c96:	817b      	strh	r3, [r7, #10]
	uint16_t negoutput = foutput < 0 ? roundf(fabsf(foutput) * hmotor->negTimer->Instance->ARR) : 0;
 8001c98:	f04f 0100 	mov.w	r1, #0
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f7ff fa3d 	bl	800111c <__aeabi_fcmplt>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d019      	beq.n	8001cdc <huansic_motor_pid+0x1a0>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7ff f83a 	bl	8000d30 <__aeabi_ui2f>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f7ff f88d 	bl	8000de0 <__aeabi_fmul>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f006 f8bb 	bl	8007e44 <roundf>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fa4b 	bl	800116c <__aeabi_f2uiz>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	e000      	b.n	8001cde <huansic_motor_pid+0x1a2>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	813b      	strh	r3, [r7, #8]

	if (hmotor->pos_channel == TIM_CHANNEL_1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d105      	bne.n	8001cf4 <huansic_motor_pid+0x1b8>
		hmotor->posTimer->Instance->CCR1 = posoutput;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	897a      	ldrh	r2, [r7, #10]
 8001cf0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cf2:	e01c      	b.n	8001d2e <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d105      	bne.n	8001d08 <huansic_motor_pid+0x1cc>
		hmotor->posTimer->Instance->CCR2 = posoutput;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	897a      	ldrh	r2, [r7, #10]
 8001d04:	639a      	str	r2, [r3, #56]	; 0x38
 8001d06:	e012      	b.n	8001d2e <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_3)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d105      	bne.n	8001d1c <huansic_motor_pid+0x1e0>
		hmotor->posTimer->Instance->CCR3 = posoutput;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	897a      	ldrh	r2, [r7, #10]
 8001d18:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d1a:	e008      	b.n	8001d2e <huansic_motor_pid+0x1f2>
	else if (hmotor->pos_channel == TIM_CHANNEL_4)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	d104      	bne.n	8001d2e <huansic_motor_pid+0x1f2>
		hmotor->posTimer->Instance->CCR4 = posoutput;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	897a      	ldrh	r2, [r7, #10]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
	else
		;

	if (hmotor->negTimer) {
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d026      	beq.n	8001d84 <huansic_motor_pid+0x248>
		if (hmotor->neg_channel == TIM_CHANNEL_1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d105      	bne.n	8001d4a <huansic_motor_pid+0x20e>
			hmotor->negTimer->Instance->CCR1 = negoutput;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	893a      	ldrh	r2, [r7, #8]
 8001d46:	635a      	str	r2, [r3, #52]	; 0x34
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
			hmotor->negTimer->Instance->CCR4 = negoutput;
		else
			;
	}
}
 8001d48:	e01c      	b.n	8001d84 <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_2)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	2b04      	cmp	r3, #4
 8001d50:	d105      	bne.n	8001d5e <huansic_motor_pid+0x222>
			hmotor->negTimer->Instance->CCR2 = negoutput;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	893a      	ldrh	r2, [r7, #8]
 8001d5a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001d5c:	e012      	b.n	8001d84 <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_3)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d105      	bne.n	8001d72 <huansic_motor_pid+0x236>
			hmotor->negTimer->Instance->CCR3 = negoutput;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	893a      	ldrh	r2, [r7, #8]
 8001d6e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d70:	e008      	b.n	8001d84 <huansic_motor_pid+0x248>
		else if (hmotor->neg_channel == TIM_CHANNEL_4)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b0c      	cmp	r3, #12
 8001d78:	d104      	bne.n	8001d84 <huansic_motor_pid+0x248>
			hmotor->negTimer->Instance->CCR4 = negoutput;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	893a      	ldrh	r2, [r7, #8]
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001d84:	bf00      	nop
 8001d86:	371c      	adds	r7, #28
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd90      	pop	{r4, r7, pc}
 8001d8c:	bf800000 	.word	0xbf800000

08001d90 <custom_order_new_failed>:
extern float myCharge;				// current charge returned by Master

// interchange information 1
extern uint32_t gameStageTimeLeft;		// in ms

__weak void custom_order_new_failed(uint8_t id) {
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	71fb      	strb	r3, [r7, #7]

}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr

08001da4 <huansic_xb_init>:

void huansic_xb_init(XB_HandleTypeDef *hxb) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
	hxb->nextPackageLength = 6;		// header length
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2206      	movs	r2, #6
 8001db0:	725a      	strb	r2, [r3, #9]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6818      	ldr	r0, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f103 010a 	add.w	r1, r3, #10
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7a5b      	ldrb	r3, [r3, #9]
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	f004 fd04 	bl	80067d0 <HAL_UART_Receive_DMA>
}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <huansic_xb_decodeHeader>:

uint8_t huansic_xb_decodeHeader(XB_HandleTypeDef *hxb) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
	// checksum
	if (hxb->buffer[5]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7bda      	ldrb	r2, [r3, #15]
			!= (hxb->buffer[0] ^ hxb->buffer[1] ^ hxb->buffer[2] ^ hxb->buffer[3] ^ hxb->buffer[4]))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	7a99      	ldrb	r1, [r3, #10]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	7adb      	ldrb	r3, [r3, #11]
 8001de4:	404b      	eors	r3, r1
 8001de6:	b2d9      	uxtb	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	7b1b      	ldrb	r3, [r3, #12]
 8001dec:	404b      	eors	r3, r1
 8001dee:	b2d9      	uxtb	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7b5b      	ldrb	r3, [r3, #13]
 8001df4:	404b      	eors	r3, r1
 8001df6:	b2d9      	uxtb	r1, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7b9b      	ldrb	r3, [r3, #14]
 8001dfc:	404b      	eors	r3, r1
 8001dfe:	b2db      	uxtb	r3, r3
	if (hxb->buffer[5]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <huansic_xb_decodeHeader+0x38>
		return 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e01d      	b.n	8001e44 <huansic_xb_decodeHeader+0x74>

	// get and check packet ID
	if (hxb->buffer[0] != 0x01 && hxb->buffer[0] != 0x05)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	7a9b      	ldrb	r3, [r3, #10]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d005      	beq.n	8001e1c <huansic_xb_decodeHeader+0x4c>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7a9b      	ldrb	r3, [r3, #10]
 8001e14:	2b05      	cmp	r3, #5
 8001e16:	d001      	beq.n	8001e1c <huansic_xb_decodeHeader+0x4c>
		return 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e013      	b.n	8001e44 <huansic_xb_decodeHeader+0x74>
	hxb->nextPackageID = hxb->buffer[0];
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	7a9a      	ldrb	r2, [r3, #10]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	721a      	strb	r2, [r3, #8]

	// read next package length
	hxb->nextPackageLength = hxb->buffer[4]; // the length shall not be longer than 255 (the max possible is 225)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	7b9a      	ldrb	r2, [r3, #14]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	725a      	strb	r2, [r3, #9]

	// set up next DMA
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f103 010a 	add.w	r1, r3, #10
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	7a5b      	ldrb	r3, [r3, #9]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	f004 fcc7 	bl	80067d0 <HAL_UART_Receive_DMA>
	return 1;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <huansic_xb_decodeBody>:

void huansic_xb_decodeBody(XB_HandleTypeDef *hxb) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b088      	sub	sp, #32
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	uint8_t listLength = 0, i, j, index = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	76fb      	strb	r3, [r7, #27]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	777b      	strb	r3, [r7, #29]
	uint32_t temp;
	if (hxb->nextPackageID == 0x01) {		// game information
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	7a1b      	ldrb	r3, [r3, #8]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	f040 8175 	bne.w	8002150 <huansic_xb_decodeBody+0x304>
		/* game stage */
		gameStage = hxb->buffer[index++];
 8001e66:	7f7b      	ldrb	r3, [r7, #29]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	777a      	strb	r2, [r7, #29]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	7a9a      	ldrb	r2, [r3, #10]
 8001e74:	4b8f      	ldr	r3, [pc, #572]	; (80020b4 <huansic_xb_decodeBody+0x268>)
 8001e76:	701a      	strb	r2, [r3, #0]

		/* barrier list */
		// listLength = hxb->buffer[index];		// the length is fixed to 5
		index++;
 8001e78:	7f7b      	ldrb	r3, [r7, #29]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	777b      	strb	r3, [r7, #29]
		for (i = 0; i < 5; i++) {
 8001e7e:	2300      	movs	r3, #0
 8001e80:	77fb      	strb	r3, [r7, #31]
 8001e82:	e079      	b.n	8001f78 <huansic_xb_decodeBody+0x12c>
			index += 2;
 8001e84:	7f7b      	ldrb	r3, [r7, #29]
 8001e86:	3302      	adds	r3, #2
 8001e88:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.x = (uint16_t) hxb->buffer[index++] << 8;
 8001e8a:	7f7b      	ldrb	r3, [r7, #29]
 8001e8c:	1c5a      	adds	r2, r3, #1
 8001e8e:	777a      	strb	r2, [r7, #29]
 8001e90:	461a      	mov	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4413      	add	r3, r2
 8001e96:	7a9b      	ldrb	r3, [r3, #10]
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	7ffb      	ldrb	r3, [r7, #31]
 8001e9c:	0212      	lsls	r2, r2, #8
 8001e9e:	b291      	uxth	r1, r2
 8001ea0:	4a85      	ldr	r2, [pc, #532]	; (80020b8 <huansic_xb_decodeBody+0x26c>)
 8001ea2:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			obstacles[i].coord1.x = hxb->buffer[index++];
 8001ea6:	7f7b      	ldrb	r3, [r7, #29]
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	777a      	strb	r2, [r7, #29]
 8001eac:	461a      	mov	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	7a9a      	ldrb	r2, [r3, #10]
 8001eb4:	7ffb      	ldrb	r3, [r7, #31]
 8001eb6:	b291      	uxth	r1, r2
 8001eb8:	4a7f      	ldr	r2, [pc, #508]	; (80020b8 <huansic_xb_decodeBody+0x26c>)
 8001eba:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
			index += 2;
 8001ebe:	7f7b      	ldrb	r3, [r7, #29]
 8001ec0:	3302      	adds	r3, #2
 8001ec2:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord1.y = (uint16_t) hxb->buffer[index++] << 8;
 8001ec4:	7f7b      	ldrb	r3, [r7, #29]
 8001ec6:	1c5a      	adds	r2, r3, #1
 8001ec8:	777a      	strb	r2, [r7, #29]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4413      	add	r3, r2
 8001ed0:	7a9b      	ldrb	r3, [r3, #10]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	7ffb      	ldrb	r3, [r7, #31]
 8001ed6:	0212      	lsls	r2, r2, #8
 8001ed8:	b291      	uxth	r1, r2
 8001eda:	4a77      	ldr	r2, [pc, #476]	; (80020b8 <huansic_xb_decodeBody+0x26c>)
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4413      	add	r3, r2
 8001ee0:	460a      	mov	r2, r1
 8001ee2:	805a      	strh	r2, [r3, #2]
			obstacles[i].coord1.y = hxb->buffer[index];
 8001ee4:	7f7b      	ldrb	r3, [r7, #29]
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	4413      	add	r3, r2
 8001eea:	7a9a      	ldrb	r2, [r3, #10]
 8001eec:	7ffb      	ldrb	r3, [r7, #31]
 8001eee:	b291      	uxth	r1, r2
 8001ef0:	4a71      	ldr	r2, [pc, #452]	; (80020b8 <huansic_xb_decodeBody+0x26c>)
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	460a      	mov	r2, r1
 8001ef8:	805a      	strh	r2, [r3, #2]
			index += 2;
 8001efa:	7f7b      	ldrb	r3, [r7, #29]
 8001efc:	3302      	adds	r3, #2
 8001efe:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.x = (uint16_t) hxb->buffer[index++] << 8;
 8001f00:	7f7b      	ldrb	r3, [r7, #29]
 8001f02:	1c5a      	adds	r2, r3, #1
 8001f04:	777a      	strb	r2, [r7, #29]
 8001f06:	461a      	mov	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	7a9b      	ldrb	r3, [r3, #10]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	7ffb      	ldrb	r3, [r7, #31]
 8001f12:	0212      	lsls	r2, r2, #8
 8001f14:	b291      	uxth	r1, r2
 8001f16:	4a68      	ldr	r2, [pc, #416]	; (80020b8 <huansic_xb_decodeBody+0x26c>)
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	460a      	mov	r2, r1
 8001f1e:	809a      	strh	r2, [r3, #4]
			obstacles[i].coord2.x = hxb->buffer[index];
 8001f20:	7f7b      	ldrb	r3, [r7, #29]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	7a9a      	ldrb	r2, [r3, #10]
 8001f28:	7ffb      	ldrb	r3, [r7, #31]
 8001f2a:	b291      	uxth	r1, r2
 8001f2c:	4a62      	ldr	r2, [pc, #392]	; (80020b8 <huansic_xb_decodeBody+0x26c>)
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	460a      	mov	r2, r1
 8001f34:	809a      	strh	r2, [r3, #4]
			index += 2;
 8001f36:	7f7b      	ldrb	r3, [r7, #29]
 8001f38:	3302      	adds	r3, #2
 8001f3a:	777b      	strb	r3, [r7, #29]
			obstacles[i].coord2.y = (uint16_t) hxb->buffer[index++] << 8;
 8001f3c:	7f7b      	ldrb	r3, [r7, #29]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	777a      	strb	r2, [r7, #29]
 8001f42:	461a      	mov	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4413      	add	r3, r2
 8001f48:	7a9b      	ldrb	r3, [r3, #10]
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	7ffb      	ldrb	r3, [r7, #31]
 8001f4e:	0212      	lsls	r2, r2, #8
 8001f50:	b291      	uxth	r1, r2
 8001f52:	4a59      	ldr	r2, [pc, #356]	; (80020b8 <huansic_xb_decodeBody+0x26c>)
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4413      	add	r3, r2
 8001f58:	460a      	mov	r2, r1
 8001f5a:	80da      	strh	r2, [r3, #6]
			obstacles[i].coord2.y = hxb->buffer[index];
 8001f5c:	7f7b      	ldrb	r3, [r7, #29]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	7a9a      	ldrb	r2, [r3, #10]
 8001f64:	7ffb      	ldrb	r3, [r7, #31]
 8001f66:	b291      	uxth	r1, r2
 8001f68:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <huansic_xb_decodeBody+0x26c>)
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	460a      	mov	r2, r1
 8001f70:	80da      	strh	r2, [r3, #6]
		for (i = 0; i < 5; i++) {
 8001f72:	7ffb      	ldrb	r3, [r7, #31]
 8001f74:	3301      	adds	r3, #1
 8001f76:	77fb      	strb	r3, [r7, #31]
 8001f78:	7ffb      	ldrb	r3, [r7, #31]
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d982      	bls.n	8001e84 <huansic_xb_decodeBody+0x38>
		}

		/* total time of this round */
		index++;
 8001f7e:	7f7b      	ldrb	r3, [r7, #29]
 8001f80:	3301      	adds	r3, #1
 8001f82:	777b      	strb	r3, [r7, #29]
		gameStageTimeLimit = hxb->buffer[index++];
 8001f84:	7f7b      	ldrb	r3, [r7, #29]
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	777a      	strb	r2, [r7, #29]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4413      	add	r3, r2
 8001f90:	7a9b      	ldrb	r3, [r3, #10]
 8001f92:	461a      	mov	r2, r3
 8001f94:	4b49      	ldr	r3, [pc, #292]	; (80020bc <huansic_xb_decodeBody+0x270>)
 8001f96:	601a      	str	r2, [r3, #0]
		gameStageTimeLimit <<= 8;
 8001f98:	4b48      	ldr	r3, [pc, #288]	; (80020bc <huansic_xb_decodeBody+0x270>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	4a47      	ldr	r2, [pc, #284]	; (80020bc <huansic_xb_decodeBody+0x270>)
 8001fa0:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001fa2:	7f7b      	ldrb	r3, [r7, #29]
 8001fa4:	1c5a      	adds	r2, r3, #1
 8001fa6:	777a      	strb	r2, [r7, #29]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	7a9b      	ldrb	r3, [r3, #10]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	4b42      	ldr	r3, [pc, #264]	; (80020bc <huansic_xb_decodeBody+0x270>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	4a40      	ldr	r2, [pc, #256]	; (80020bc <huansic_xb_decodeBody+0x270>)
 8001fba:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001fbc:	4b3f      	ldr	r3, [pc, #252]	; (80020bc <huansic_xb_decodeBody+0x270>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	4a3e      	ldr	r2, [pc, #248]	; (80020bc <huansic_xb_decodeBody+0x270>)
 8001fc4:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001fc6:	7f7b      	ldrb	r3, [r7, #29]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	777a      	strb	r2, [r7, #29]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	7a9b      	ldrb	r3, [r3, #10]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4b39      	ldr	r3, [pc, #228]	; (80020bc <huansic_xb_decodeBody+0x270>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	4a37      	ldr	r2, [pc, #220]	; (80020bc <huansic_xb_decodeBody+0x270>)
 8001fde:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit <<= 8;
 8001fe0:	4b36      	ldr	r3, [pc, #216]	; (80020bc <huansic_xb_decodeBody+0x270>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	4a35      	ldr	r2, [pc, #212]	; (80020bc <huansic_xb_decodeBody+0x270>)
 8001fe8:	6013      	str	r3, [r2, #0]
		gameStageTimeLimit |= hxb->buffer[index++];
 8001fea:	7f7b      	ldrb	r3, [r7, #29]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	777a      	strb	r2, [r7, #29]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	7a9b      	ldrb	r3, [r3, #10]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b30      	ldr	r3, [pc, #192]	; (80020bc <huansic_xb_decodeBody+0x270>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	4a2e      	ldr	r2, [pc, #184]	; (80020bc <huansic_xb_decodeBody+0x270>)
 8002002:	6013      	str	r3, [r2, #0]

		/* ally beacons */
		listLength = hxb->buffer[index];
 8002004:	7f7b      	ldrb	r3, [r7, #29]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	7a9b      	ldrb	r3, [r3, #10]
 800200c:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 800200e:	2300      	movs	r3, #0
 8002010:	77fb      	strb	r3, [r7, #31]
 8002012:	e040      	b.n	8002096 <huansic_xb_decodeBody+0x24a>
			index += 2;
 8002014:	7f7b      	ldrb	r3, [r7, #29]
 8002016:	3302      	adds	r3, #2
 8002018:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 800201a:	7f7b      	ldrb	r3, [r7, #29]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	777a      	strb	r2, [r7, #29]
 8002020:	461a      	mov	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	7a9b      	ldrb	r3, [r3, #10]
 8002028:	b29a      	uxth	r2, r3
 800202a:	7ffb      	ldrb	r3, [r7, #31]
 800202c:	0212      	lsls	r2, r2, #8
 800202e:	b291      	uxth	r1, r2
 8002030:	4a23      	ldr	r2, [pc, #140]	; (80020c0 <huansic_xb_decodeBody+0x274>)
 8002032:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			allyBeacons[i].x = hxb->buffer[index++];
 8002036:	7f7b      	ldrb	r3, [r7, #29]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	777a      	strb	r2, [r7, #29]
 800203c:	461a      	mov	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	7a9a      	ldrb	r2, [r3, #10]
 8002044:	7ffb      	ldrb	r3, [r7, #31]
 8002046:	b291      	uxth	r1, r2
 8002048:	4a1d      	ldr	r2, [pc, #116]	; (80020c0 <huansic_xb_decodeBody+0x274>)
 800204a:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 800204e:	7f7b      	ldrb	r3, [r7, #29]
 8002050:	3302      	adds	r3, #2
 8002052:	777b      	strb	r3, [r7, #29]
			allyBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002054:	7f7b      	ldrb	r3, [r7, #29]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	777a      	strb	r2, [r7, #29]
 800205a:	461a      	mov	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4413      	add	r3, r2
 8002060:	7a9b      	ldrb	r3, [r3, #10]
 8002062:	b29a      	uxth	r2, r3
 8002064:	7ffb      	ldrb	r3, [r7, #31]
 8002066:	0212      	lsls	r2, r2, #8
 8002068:	b291      	uxth	r1, r2
 800206a:	4a15      	ldr	r2, [pc, #84]	; (80020c0 <huansic_xb_decodeBody+0x274>)
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	4413      	add	r3, r2
 8002070:	460a      	mov	r2, r1
 8002072:	805a      	strh	r2, [r3, #2]
			allyBeacons[i].y = hxb->buffer[index++];
 8002074:	7f7b      	ldrb	r3, [r7, #29]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	777a      	strb	r2, [r7, #29]
 800207a:	461a      	mov	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4413      	add	r3, r2
 8002080:	7a9a      	ldrb	r2, [r3, #10]
 8002082:	7ffb      	ldrb	r3, [r7, #31]
 8002084:	b291      	uxth	r1, r2
 8002086:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <huansic_xb_decodeBody+0x274>)
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	460a      	mov	r2, r1
 800208e:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8002090:	7ffb      	ldrb	r3, [r7, #31]
 8002092:	3301      	adds	r3, #1
 8002094:	77fb      	strb	r3, [r7, #31]
 8002096:	7ffa      	ldrb	r2, [r7, #31]
 8002098:	7efb      	ldrb	r3, [r7, #27]
 800209a:	429a      	cmp	r2, r3
 800209c:	d3ba      	bcc.n	8002014 <huansic_xb_decodeBody+0x1c8>
		}

		/* opponent beacons */
		index++;
 800209e:	7f7b      	ldrb	r3, [r7, #29]
 80020a0:	3301      	adds	r3, #1
 80020a2:	777b      	strb	r3, [r7, #29]
		listLength = hxb->buffer[index];
 80020a4:	7f7b      	ldrb	r3, [r7, #29]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4413      	add	r3, r2
 80020aa:	7a9b      	ldrb	r3, [r3, #10]
 80020ac:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 80020ae:	2300      	movs	r3, #0
 80020b0:	77fb      	strb	r3, [r7, #31]
 80020b2:	e048      	b.n	8002146 <huansic_xb_decodeBody+0x2fa>
 80020b4:	20000b80 	.word	0x20000b80
 80020b8:	20000b8c 	.word	0x20000b8c
 80020bc:	20000b84 	.word	0x20000b84
 80020c0:	20000bb4 	.word	0x20000bb4
			index += 2;
 80020c4:	7f7b      	ldrb	r3, [r7, #29]
 80020c6:	3302      	adds	r3, #2
 80020c8:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].x = (uint16_t) hxb->buffer[index++] << 8;
 80020ca:	7f7b      	ldrb	r3, [r7, #29]
 80020cc:	1c5a      	adds	r2, r3, #1
 80020ce:	777a      	strb	r2, [r7, #29]
 80020d0:	461a      	mov	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	7a9b      	ldrb	r3, [r3, #10]
 80020d8:	b29a      	uxth	r2, r3
 80020da:	7ffb      	ldrb	r3, [r7, #31]
 80020dc:	0212      	lsls	r2, r2, #8
 80020de:	b291      	uxth	r1, r2
 80020e0:	4aa0      	ldr	r2, [pc, #640]	; (8002364 <huansic_xb_decodeBody+0x518>)
 80020e2:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			oppoBeacons[i].x = hxb->buffer[index++];
 80020e6:	7f7b      	ldrb	r3, [r7, #29]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	777a      	strb	r2, [r7, #29]
 80020ec:	461a      	mov	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4413      	add	r3, r2
 80020f2:	7a9a      	ldrb	r2, [r3, #10]
 80020f4:	7ffb      	ldrb	r3, [r7, #31]
 80020f6:	b291      	uxth	r1, r2
 80020f8:	4a9a      	ldr	r2, [pc, #616]	; (8002364 <huansic_xb_decodeBody+0x518>)
 80020fa:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
			index += 2;
 80020fe:	7f7b      	ldrb	r3, [r7, #29]
 8002100:	3302      	adds	r3, #2
 8002102:	777b      	strb	r3, [r7, #29]
			oppoBeacons[i].y = (uint16_t) hxb->buffer[index++] << 8;
 8002104:	7f7b      	ldrb	r3, [r7, #29]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	777a      	strb	r2, [r7, #29]
 800210a:	461a      	mov	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	7a9b      	ldrb	r3, [r3, #10]
 8002112:	b29a      	uxth	r2, r3
 8002114:	7ffb      	ldrb	r3, [r7, #31]
 8002116:	0212      	lsls	r2, r2, #8
 8002118:	b291      	uxth	r1, r2
 800211a:	4a92      	ldr	r2, [pc, #584]	; (8002364 <huansic_xb_decodeBody+0x518>)
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	460a      	mov	r2, r1
 8002122:	805a      	strh	r2, [r3, #2]
			oppoBeacons[i].y = hxb->buffer[index++];
 8002124:	7f7b      	ldrb	r3, [r7, #29]
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	777a      	strb	r2, [r7, #29]
 800212a:	461a      	mov	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	7a9a      	ldrb	r2, [r3, #10]
 8002132:	7ffb      	ldrb	r3, [r7, #31]
 8002134:	b291      	uxth	r1, r2
 8002136:	4a8b      	ldr	r2, [pc, #556]	; (8002364 <huansic_xb_decodeBody+0x518>)
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	460a      	mov	r2, r1
 800213e:	805a      	strh	r2, [r3, #2]
		for (i = 0; i < listLength; i++) {
 8002140:	7ffb      	ldrb	r3, [r7, #31]
 8002142:	3301      	adds	r3, #1
 8002144:	77fb      	strb	r3, [r7, #31]
 8002146:	7ffa      	ldrb	r2, [r7, #31]
 8002148:	7efb      	ldrb	r3, [r7, #27]
 800214a:	429a      	cmp	r2, r3
 800214c:	d3ba      	bcc.n	80020c4 <huansic_xb_decodeBody+0x278>
 800214e:	e324      	b.n	800279a <huansic_xb_decodeBody+0x94e>
		}
	} else if (hxb->nextPackageID == 0x05) {		// game status
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7a1b      	ldrb	r3, [r3, #8]
 8002154:	2b05      	cmp	r3, #5
 8002156:	f040 8320 	bne.w	800279a <huansic_xb_decodeBody+0x94e>
		/* game status */
		gameStatus = hxb->buffer[index++];
 800215a:	7f7b      	ldrb	r3, [r7, #29]
 800215c:	1c5a      	adds	r2, r3, #1
 800215e:	777a      	strb	r2, [r7, #29]
 8002160:	461a      	mov	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	7a9a      	ldrb	r2, [r3, #10]
 8002168:	4b7f      	ldr	r3, [pc, #508]	; (8002368 <huansic_xb_decodeBody+0x51c>)
 800216a:	701a      	strb	r2, [r3, #0]

		/* time since round started */
		gameStageTimeSinceStart = hxb->buffer[index++];
 800216c:	7f7b      	ldrb	r3, [r7, #29]
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	777a      	strb	r2, [r7, #29]
 8002172:	461a      	mov	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4413      	add	r3, r2
 8002178:	7a9b      	ldrb	r3, [r3, #10]
 800217a:	461a      	mov	r2, r3
 800217c:	4b7b      	ldr	r3, [pc, #492]	; (800236c <huansic_xb_decodeBody+0x520>)
 800217e:	601a      	str	r2, [r3, #0]
		gameStageTimeSinceStart <<= 8;
 8002180:	4b7a      	ldr	r3, [pc, #488]	; (800236c <huansic_xb_decodeBody+0x520>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	021b      	lsls	r3, r3, #8
 8002186:	4a79      	ldr	r2, [pc, #484]	; (800236c <huansic_xb_decodeBody+0x520>)
 8002188:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 800218a:	7f7b      	ldrb	r3, [r7, #29]
 800218c:	1c5a      	adds	r2, r3, #1
 800218e:	777a      	strb	r2, [r7, #29]
 8002190:	461a      	mov	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	7a9b      	ldrb	r3, [r3, #10]
 8002198:	461a      	mov	r2, r3
 800219a:	4b74      	ldr	r3, [pc, #464]	; (800236c <huansic_xb_decodeBody+0x520>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4313      	orrs	r3, r2
 80021a0:	4a72      	ldr	r2, [pc, #456]	; (800236c <huansic_xb_decodeBody+0x520>)
 80021a2:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 80021a4:	4b71      	ldr	r3, [pc, #452]	; (800236c <huansic_xb_decodeBody+0x520>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	021b      	lsls	r3, r3, #8
 80021aa:	4a70      	ldr	r2, [pc, #448]	; (800236c <huansic_xb_decodeBody+0x520>)
 80021ac:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 80021ae:	7f7b      	ldrb	r3, [r7, #29]
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	777a      	strb	r2, [r7, #29]
 80021b4:	461a      	mov	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	7a9b      	ldrb	r3, [r3, #10]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b6b      	ldr	r3, [pc, #428]	; (800236c <huansic_xb_decodeBody+0x520>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	4a69      	ldr	r2, [pc, #420]	; (800236c <huansic_xb_decodeBody+0x520>)
 80021c6:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart <<= 8;
 80021c8:	4b68      	ldr	r3, [pc, #416]	; (800236c <huansic_xb_decodeBody+0x520>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	021b      	lsls	r3, r3, #8
 80021ce:	4a67      	ldr	r2, [pc, #412]	; (800236c <huansic_xb_decodeBody+0x520>)
 80021d0:	6013      	str	r3, [r2, #0]
		gameStageTimeSinceStart |= hxb->buffer[index++];
 80021d2:	7f7b      	ldrb	r3, [r7, #29]
 80021d4:	1c5a      	adds	r2, r3, #1
 80021d6:	777a      	strb	r2, [r7, #29]
 80021d8:	461a      	mov	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	7a9b      	ldrb	r3, [r3, #10]
 80021e0:	461a      	mov	r2, r3
 80021e2:	4b62      	ldr	r3, [pc, #392]	; (800236c <huansic_xb_decodeBody+0x520>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	4a60      	ldr	r2, [pc, #384]	; (800236c <huansic_xb_decodeBody+0x520>)
 80021ea:	6013      	str	r3, [r2, #0]
		gameStageTimeLeft = gameStageTimeLimit - gameStageTimeSinceStart;
 80021ec:	4b60      	ldr	r3, [pc, #384]	; (8002370 <huansic_xb_decodeBody+0x524>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b5e      	ldr	r3, [pc, #376]	; (800236c <huansic_xb_decodeBody+0x520>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	4a5f      	ldr	r2, [pc, #380]	; (8002374 <huansic_xb_decodeBody+0x528>)
 80021f8:	6013      	str	r3, [r2, #0]

		/* fetch score */
		temp = hxb->buffer[index++];
 80021fa:	7f7b      	ldrb	r3, [r7, #29]
 80021fc:	1c5a      	adds	r2, r3, #1
 80021fe:	777a      	strb	r2, [r7, #29]
 8002200:	461a      	mov	r2, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	7a9b      	ldrb	r3, [r3, #10]
 8002208:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	021b      	lsls	r3, r3, #8
 800220e:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002210:	7f7b      	ldrb	r3, [r7, #29]
 8002212:	1c5a      	adds	r2, r3, #1
 8002214:	777a      	strb	r2, [r7, #29]
 8002216:	461a      	mov	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	7a9b      	ldrb	r3, [r3, #10]
 800221e:	461a      	mov	r2, r3
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	4313      	orrs	r3, r2
 8002224:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	021b      	lsls	r3, r3, #8
 800222a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800222c:	7f7b      	ldrb	r3, [r7, #29]
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	777a      	strb	r2, [r7, #29]
 8002232:	461a      	mov	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	7a9b      	ldrb	r3, [r3, #10]
 800223a:	461a      	mov	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 8002248:	7f7b      	ldrb	r3, [r7, #29]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	777a      	strb	r2, [r7, #29]
 800224e:	461a      	mov	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4413      	add	r3, r2
 8002254:	7a9b      	ldrb	r3, [r3, #10]
 8002256:	461a      	mov	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
		myScore = *(float*) &temp;			// decode float from uint32
 800225e:	f107 0310 	add.w	r3, r7, #16
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a44      	ldr	r2, [pc, #272]	; (8002378 <huansic_xb_decodeBody+0x52c>)
 8002266:	6013      	str	r3, [r2, #0]

		/* my position */
		index += 2;
 8002268:	7f7b      	ldrb	r3, [r7, #29]
 800226a:	3302      	adds	r3, #2
 800226c:	777b      	strb	r3, [r7, #29]
		myCoord.x = (uint16_t) hxb->buffer[index++] << 8;
 800226e:	7f7b      	ldrb	r3, [r7, #29]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	777a      	strb	r2, [r7, #29]
 8002274:	461a      	mov	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	7a9b      	ldrb	r3, [r3, #10]
 800227c:	b29b      	uxth	r3, r3
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	b29a      	uxth	r2, r3
 8002282:	4b3e      	ldr	r3, [pc, #248]	; (800237c <huansic_xb_decodeBody+0x530>)
 8002284:	801a      	strh	r2, [r3, #0]
		myCoord.x = hxb->buffer[index++];
 8002286:	7f7b      	ldrb	r3, [r7, #29]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	777a      	strb	r2, [r7, #29]
 800228c:	461a      	mov	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4413      	add	r3, r2
 8002292:	7a9b      	ldrb	r3, [r3, #10]
 8002294:	b29a      	uxth	r2, r3
 8002296:	4b39      	ldr	r3, [pc, #228]	; (800237c <huansic_xb_decodeBody+0x530>)
 8002298:	801a      	strh	r2, [r3, #0]
		index += 2;
 800229a:	7f7b      	ldrb	r3, [r7, #29]
 800229c:	3302      	adds	r3, #2
 800229e:	777b      	strb	r3, [r7, #29]
		myCoord.y = (uint16_t) hxb->buffer[index++] << 8;
 80022a0:	7f7b      	ldrb	r3, [r7, #29]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	777a      	strb	r2, [r7, #29]
 80022a6:	461a      	mov	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	7a9b      	ldrb	r3, [r3, #10]
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	4b31      	ldr	r3, [pc, #196]	; (800237c <huansic_xb_decodeBody+0x530>)
 80022b6:	805a      	strh	r2, [r3, #2]
		myCoord.y = hxb->buffer[index++];
 80022b8:	7f7b      	ldrb	r3, [r7, #29]
 80022ba:	1c5a      	adds	r2, r3, #1
 80022bc:	777a      	strb	r2, [r7, #29]
 80022be:	461a      	mov	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4413      	add	r3, r2
 80022c4:	7a9b      	ldrb	r3, [r3, #10]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	4b2c      	ldr	r3, [pc, #176]	; (800237c <huansic_xb_decodeBody+0x530>)
 80022ca:	805a      	strh	r2, [r3, #2]

		/* fetch battery */
		temp = hxb->buffer[index++];
 80022cc:	7f7b      	ldrb	r3, [r7, #29]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	777a      	strb	r2, [r7, #29]
 80022d2:	461a      	mov	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	7a9b      	ldrb	r3, [r3, #10]
 80022da:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 80022e2:	7f7b      	ldrb	r3, [r7, #29]
 80022e4:	1c5a      	adds	r2, r3, #1
 80022e6:	777a      	strb	r2, [r7, #29]
 80022e8:	461a      	mov	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	7a9b      	ldrb	r3, [r3, #10]
 80022f0:	461a      	mov	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 80022fe:	7f7b      	ldrb	r3, [r7, #29]
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	777a      	strb	r2, [r7, #29]
 8002304:	461a      	mov	r2, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4413      	add	r3, r2
 800230a:	7a9b      	ldrb	r3, [r3, #10]
 800230c:	461a      	mov	r2, r3
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	4313      	orrs	r3, r2
 8002312:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	021b      	lsls	r3, r3, #8
 8002318:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index++];
 800231a:	7f7b      	ldrb	r3, [r7, #29]
 800231c:	1c5a      	adds	r2, r3, #1
 800231e:	777a      	strb	r2, [r7, #29]
 8002320:	461a      	mov	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	7a9b      	ldrb	r3, [r3, #10]
 8002328:	461a      	mov	r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
		myCharge = *(float*) &temp;			// decode float from uint32
 8002330:	f107 0310 	add.w	r3, r7, #16
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a12      	ldr	r2, [pc, #72]	; (8002380 <huansic_xb_decodeBody+0x534>)
 8002338:	6013      	str	r3, [r2, #0]

		/* my orders */
		int8_t updatedOrder[] = { -1, -1, -1, -1, -1 };
 800233a:	4a12      	ldr	r2, [pc, #72]	; (8002384 <huansic_xb_decodeBody+0x538>)
 800233c:	f107 0308 	add.w	r3, r7, #8
 8002340:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002344:	6018      	str	r0, [r3, #0]
 8002346:	3304      	adds	r3, #4
 8002348:	7019      	strb	r1, [r3, #0]
		uint8_t updatedOrderIndex = 0;
 800234a:	2300      	movs	r3, #0
 800234c:	773b      	strb	r3, [r7, #28]
		Order *tempOrder;
		listLength = hxb->buffer[index++];
 800234e:	7f7b      	ldrb	r3, [r7, #29]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	777a      	strb	r2, [r7, #29]
 8002354:	461a      	mov	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	7a9b      	ldrb	r3, [r3, #10]
 800235c:	76fb      	strb	r3, [r7, #27]
		for (i = 0; i < listLength; i++) {
 800235e:	2300      	movs	r3, #0
 8002360:	77fb      	strb	r3, [r7, #31]
 8002362:	e101      	b.n	8002568 <huansic_xb_decodeBody+0x71c>
 8002364:	20000bc0 	.word	0x20000bc0
 8002368:	20000b81 	.word	0x20000b81
 800236c:	20000b88 	.word	0x20000b88
 8002370:	20000b84 	.word	0x20000b84
 8002374:	20000bec 	.word	0x20000bec
 8002378:	20000be4 	.word	0x20000be4
 800237c:	20000be0 	.word	0x20000be0
 8002380:	20000be8 	.word	0x20000be8
 8002384:	08008e60 	.word	0x08008e60
			temp = hxb->buffer[index + 24];
 8002388:	7f7b      	ldrb	r3, [r7, #29]
 800238a:	3318      	adds	r3, #24
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	4413      	add	r3, r2
 8002390:	7a9b      	ldrb	r3, [r3, #10]
 8002392:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 25];
 800239a:	7f7b      	ldrb	r3, [r7, #29]
 800239c:	3319      	adds	r3, #25
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	7a9b      	ldrb	r3, [r3, #10]
 80023a4:	461a      	mov	r2, r3
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 26];
 80023b2:	7f7b      	ldrb	r3, [r7, #29]
 80023b4:	331a      	adds	r3, #26
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	7a9b      	ldrb	r3, [r3, #10]
 80023bc:	461a      	mov	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	021b      	lsls	r3, r3, #8
 80023c8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 27];
 80023ca:	7f7b      	ldrb	r3, [r7, #29]
 80023cc:	331b      	adds	r3, #27
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	7a9b      	ldrb	r3, [r3, #10]
 80023d4:	461a      	mov	r2, r3
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
			tempOrder = huansic_order_new(temp);
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	b25b      	sxtb	r3, r3
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fa7d 	bl	80018e0 <huansic_order_new>
 80023e6:	6178      	str	r0, [r7, #20]
			if (!tempOrder) {
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d108      	bne.n	8002400 <huansic_xb_decodeBody+0x5b4>
				index += 28;
 80023ee:	7f7b      	ldrb	r3, [r7, #29]
 80023f0:	331c      	adds	r3, #28
 80023f2:	777b      	strb	r3, [r7, #29]
				custom_order_new_failed(temp);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fcc9 	bl	8001d90 <custom_order_new_failed>
				continue;
 80023fe:	e0b0      	b.n	8002562 <huansic_xb_decodeBody+0x716>
			}
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002400:	7f7b      	ldrb	r3, [r7, #29]
 8002402:	3302      	adds	r3, #2
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4413      	add	r3, r2
 8002408:	7a9b      	ldrb	r3, [r3, #10]
 800240a:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 800240c:	b21a      	sxth	r2, r3
 800240e:	7f7b      	ldrb	r3, [r7, #29]
 8002410:	3303      	adds	r3, #3
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	440b      	add	r3, r1
 8002416:	7a9b      	ldrb	r3, [r3, #10]
 8002418:	b21b      	sxth	r3, r3
 800241a:	4313      	orrs	r3, r2
 800241c:	b21b      	sxth	r3, r3
 800241e:	b29a      	uxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002424:	7f7b      	ldrb	r3, [r7, #29]
 8002426:	3306      	adds	r3, #6
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	4413      	add	r3, r2
 800242c:	7a9b      	ldrb	r3, [r3, #10]
 800242e:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 8002430:	b21a      	sxth	r2, r3
 8002432:	7f7b      	ldrb	r3, [r7, #29]
 8002434:	3307      	adds	r3, #7
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	440b      	add	r3, r1
 800243a:	7a9b      	ldrb	r3, [r3, #10]
 800243c:	b21b      	sxth	r3, r3
 800243e:	4313      	orrs	r3, r2
 8002440:	b21b      	sxth	r3, r3
 8002442:	b29a      	uxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	805a      	strh	r2, [r3, #2]
			// destination
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8002448:	7f7b      	ldrb	r3, [r7, #29]
 800244a:	330a      	adds	r3, #10
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	7a9b      	ldrb	r3, [r3, #10]
 8002452:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 8002454:	b21a      	sxth	r2, r3
 8002456:	7f7b      	ldrb	r3, [r7, #29]
 8002458:	330b      	adds	r3, #11
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	440b      	add	r3, r1
 800245e:	7a9b      	ldrb	r3, [r3, #10]
 8002460:	b21b      	sxth	r3, r3
 8002462:	4313      	orrs	r3, r2
 8002464:	b21b      	sxth	r3, r3
 8002466:	b29a      	uxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 800246c:	7f7b      	ldrb	r3, [r7, #29]
 800246e:	330e      	adds	r3, #14
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	4413      	add	r3, r2
 8002474:	7a9b      	ldrb	r3, [r3, #10]
 8002476:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 8002478:	b21a      	sxth	r2, r3
 800247a:	7f7b      	ldrb	r3, [r7, #29]
 800247c:	330f      	adds	r3, #15
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	440b      	add	r3, r1
 8002482:	7a9b      	ldrb	r3, [r3, #10]
 8002484:	b21b      	sxth	r3, r3
 8002486:	4313      	orrs	r3, r2
 8002488:	b21b      	sxth	r3, r3
 800248a:	b29a      	uxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 8002490:	7f7b      	ldrb	r3, [r7, #29]
 8002492:	3310      	adds	r3, #16
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	4413      	add	r3, r2
 8002498:	7a9b      	ldrb	r3, [r3, #10]
 800249a:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 80024a2:	7f7b      	ldrb	r3, [r7, #29]
 80024a4:	3311      	adds	r3, #17
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	7a9b      	ldrb	r3, [r3, #10]
 80024ac:	461a      	mov	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 80024ba:	7f7b      	ldrb	r3, [r7, #29]
 80024bc:	3312      	adds	r3, #18
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	7a9b      	ldrb	r3, [r3, #10]
 80024c4:	461a      	mov	r2, r3
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	021b      	lsls	r3, r3, #8
 80024d0:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 80024d2:	7f7b      	ldrb	r3, [r7, #29]
 80024d4:	3313      	adds	r3, #19
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	7a9b      	ldrb	r3, [r3, #10]
 80024dc:	461a      	mov	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 80024e4:	693a      	ldr	r2, [r7, #16]
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 80024ea:	7f7b      	ldrb	r3, [r7, #29]
 80024ec:	3314      	adds	r3, #20
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	7a9b      	ldrb	r3, [r3, #10]
 80024f4:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	021b      	lsls	r3, r3, #8
 80024fa:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 80024fc:	7f7b      	ldrb	r3, [r7, #29]
 80024fe:	3315      	adds	r3, #21
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	7a9b      	ldrb	r3, [r3, #10]
 8002506:	461a      	mov	r2, r3
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 8002514:	7f7b      	ldrb	r3, [r7, #29]
 8002516:	3316      	adds	r3, #22
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	7a9b      	ldrb	r3, [r3, #10]
 800251e:	461a      	mov	r2, r3
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	021b      	lsls	r3, r3, #8
 800252a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 800252c:	7f7b      	ldrb	r3, [r7, #29]
 800252e:	3317      	adds	r3, #23
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	4413      	add	r3, r2
 8002534:	7a9b      	ldrb	r3, [r3, #10]
 8002536:	461a      	mov	r2, r3
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 800253e:	f107 0310 	add.w	r3, r7, #16
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	615a      	str	r2, [r3, #20]
			// increment index and record id
			index += 28;
 8002548:	7f7b      	ldrb	r3, [r7, #29]
 800254a:	331c      	adds	r3, #28
 800254c:	777b      	strb	r3, [r7, #29]
			updatedOrder[updatedOrderIndex++] = tempOrder->id;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	7f3b      	ldrb	r3, [r7, #28]
 8002554:	1c59      	adds	r1, r3, #1
 8002556:	7739      	strb	r1, [r7, #28]
 8002558:	b252      	sxtb	r2, r2
 800255a:	3320      	adds	r3, #32
 800255c:	443b      	add	r3, r7
 800255e:	f803 2c18 	strb.w	r2, [r3, #-24]
		for (i = 0; i < listLength; i++) {
 8002562:	7ffb      	ldrb	r3, [r7, #31]
 8002564:	3301      	adds	r3, #1
 8002566:	77fb      	strb	r3, [r7, #31]
 8002568:	7ffa      	ldrb	r2, [r7, #31]
 800256a:	7efb      	ldrb	r3, [r7, #27]
 800256c:	429a      	cmp	r2, r3
 800256e:	f4ff af0b 	bcc.w	8002388 <huansic_xb_decodeBody+0x53c>
		}

		/* order management */
		for (i = 0; i < 5; i++)
 8002572:	2300      	movs	r3, #0
 8002574:	77fb      	strb	r3, [r7, #31]
 8002576:	e02d      	b.n	80025d4 <huansic_xb_decodeBody+0x788>
			if (delivering[i]->id != -1) {
 8002578:	7ffb      	ldrb	r3, [r7, #31]
 800257a:	4a92      	ldr	r2, [pc, #584]	; (80027c4 <huansic_xb_decodeBody+0x978>)
 800257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002586:	d022      	beq.n	80025ce <huansic_xb_decodeBody+0x782>
				for (j = 0; i < updatedOrderIndex; j++)
 8002588:	2300      	movs	r3, #0
 800258a:	77bb      	strb	r3, [r7, #30]
 800258c:	e011      	b.n	80025b2 <huansic_xb_decodeBody+0x766>
					if (delivering[i]->id == updatedOrder[j]) {		// pulled from remote
 800258e:	7ffb      	ldrb	r3, [r7, #31]
 8002590:	4a8c      	ldr	r2, [pc, #560]	; (80027c4 <huansic_xb_decodeBody+0x978>)
 8002592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	7fba      	ldrb	r2, [r7, #30]
 800259a:	3220      	adds	r2, #32
 800259c:	443a      	add	r2, r7
 800259e:	f912 2c18 	ldrsb.w	r2, [r2, #-24]
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d102      	bne.n	80025ac <huansic_xb_decodeBody+0x760>
						j = 255;
 80025a6:	23ff      	movs	r3, #255	; 0xff
 80025a8:	77bb      	strb	r3, [r7, #30]
						break;
 80025aa:	e006      	b.n	80025ba <huansic_xb_decodeBody+0x76e>
				for (j = 0; i < updatedOrderIndex; j++)
 80025ac:	7fbb      	ldrb	r3, [r7, #30]
 80025ae:	3301      	adds	r3, #1
 80025b0:	77bb      	strb	r3, [r7, #30]
 80025b2:	7ffa      	ldrb	r2, [r7, #31]
 80025b4:	7f3b      	ldrb	r3, [r7, #28]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d3e9      	bcc.n	800258e <huansic_xb_decodeBody+0x742>
					}
				if (j != 255)
 80025ba:	7fbb      	ldrb	r3, [r7, #30]
 80025bc:	2bff      	cmp	r3, #255	; 0xff
 80025be:	d006      	beq.n	80025ce <huansic_xb_decodeBody+0x782>
					huansic_order_delete(delivering[i]);// delete the order if the order is no longer in the delivery list
 80025c0:	7ffb      	ldrb	r3, [r7, #31]
 80025c2:	4a80      	ldr	r2, [pc, #512]	; (80027c4 <huansic_xb_decodeBody+0x978>)
 80025c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff f9e3 	bl	8001994 <huansic_order_delete>
		for (i = 0; i < 5; i++)
 80025ce:	7ffb      	ldrb	r3, [r7, #31]
 80025d0:	3301      	adds	r3, #1
 80025d2:	77fb      	strb	r3, [r7, #31]
 80025d4:	7ffb      	ldrb	r3, [r7, #31]
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d9ce      	bls.n	8002578 <huansic_xb_decodeBody+0x72c>
			}

		/* record latest order */
		temp = hxb->buffer[index + 24];
 80025da:	7f7b      	ldrb	r3, [r7, #29]
 80025dc:	3318      	adds	r3, #24
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	4413      	add	r3, r2
 80025e2:	7a9b      	ldrb	r3, [r3, #10]
 80025e4:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 25];
 80025ec:	7f7b      	ldrb	r3, [r7, #29]
 80025ee:	3319      	adds	r3, #25
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	4413      	add	r3, r2
 80025f4:	7a9b      	ldrb	r3, [r3, #10]
 80025f6:	461a      	mov	r2, r3
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	021b      	lsls	r3, r3, #8
 8002602:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 26];
 8002604:	7f7b      	ldrb	r3, [r7, #29]
 8002606:	331a      	adds	r3, #26
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	7a9b      	ldrb	r3, [r3, #10]
 800260e:	461a      	mov	r2, r3
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
		temp <<= 8;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	021b      	lsls	r3, r3, #8
 800261a:	613b      	str	r3, [r7, #16]
		temp |= hxb->buffer[index + 27];
 800261c:	7f7b      	ldrb	r3, [r7, #29]
 800261e:	331b      	adds	r3, #27
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	4413      	add	r3, r2
 8002624:	7a9b      	ldrb	r3, [r3, #10]
 8002626:	461a      	mov	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
		tempOrder = huansic_order_new(temp);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	b25b      	sxtb	r3, r3
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff f954 	bl	80018e0 <huansic_order_new>
 8002638:	6178      	str	r0, [r7, #20]
		if (!tempOrder) {
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d108      	bne.n	8002652 <huansic_xb_decodeBody+0x806>
			index += 28;
 8002640:	7f7b      	ldrb	r3, [r7, #29]
 8002642:	331c      	adds	r3, #28
 8002644:	777b      	strb	r3, [r7, #29]
			custom_order_new_failed(temp);
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	b2db      	uxtb	r3, r3
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff fba0 	bl	8001d90 <custom_order_new_failed>
 8002650:	e0a3      	b.n	800279a <huansic_xb_decodeBody+0x94e>
		} else {
			// start coordinate
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002652:	7f7b      	ldrb	r3, [r7, #29]
 8002654:	3302      	adds	r3, #2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	4413      	add	r3, r2
 800265a:	7a9b      	ldrb	r3, [r3, #10]
 800265c:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 3];
 800265e:	b21a      	sxth	r2, r3
 8002660:	7f7b      	ldrb	r3, [r7, #29]
 8002662:	3303      	adds	r3, #3
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	440b      	add	r3, r1
 8002668:	7a9b      	ldrb	r3, [r3, #10]
 800266a:	b21b      	sxth	r3, r3
 800266c:	4313      	orrs	r3, r2
 800266e:	b21b      	sxth	r3, r3
 8002670:	b29a      	uxth	r2, r3
			tempOrder->startCoord.x = ((uint16_t) hxb->buffer[index + 2] << 8)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	801a      	strh	r2, [r3, #0]
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002676:	7f7b      	ldrb	r3, [r7, #29]
 8002678:	3306      	adds	r3, #6
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	7a9b      	ldrb	r3, [r3, #10]
 8002680:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 7];
 8002682:	b21a      	sxth	r2, r3
 8002684:	7f7b      	ldrb	r3, [r7, #29]
 8002686:	3307      	adds	r3, #7
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	440b      	add	r3, r1
 800268c:	7a9b      	ldrb	r3, [r3, #10]
 800268e:	b21b      	sxth	r3, r3
 8002690:	4313      	orrs	r3, r2
 8002692:	b21b      	sxth	r3, r3
 8002694:	b29a      	uxth	r2, r3
			tempOrder->startCoord.y = ((uint16_t) hxb->buffer[index + 6] << 8)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	805a      	strh	r2, [r3, #2]
			// end coordinate
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 800269a:	7f7b      	ldrb	r3, [r7, #29]
 800269c:	330a      	adds	r3, #10
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	7a9b      	ldrb	r3, [r3, #10]
 80026a4:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 11];
 80026a6:	b21a      	sxth	r2, r3
 80026a8:	7f7b      	ldrb	r3, [r7, #29]
 80026aa:	330b      	adds	r3, #11
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	440b      	add	r3, r1
 80026b0:	7a9b      	ldrb	r3, [r3, #10]
 80026b2:	b21b      	sxth	r3, r3
 80026b4:	4313      	orrs	r3, r2
 80026b6:	b21b      	sxth	r3, r3
 80026b8:	b29a      	uxth	r2, r3
			tempOrder->destCoord.x = ((uint16_t) hxb->buffer[index + 10] << 8)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	809a      	strh	r2, [r3, #4]
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80026be:	7f7b      	ldrb	r3, [r7, #29]
 80026c0:	330e      	adds	r3, #14
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	4413      	add	r3, r2
 80026c6:	7a9b      	ldrb	r3, [r3, #10]
 80026c8:	021b      	lsls	r3, r3, #8
					| hxb->buffer[index + 15];
 80026ca:	b21a      	sxth	r2, r3
 80026cc:	7f7b      	ldrb	r3, [r7, #29]
 80026ce:	330f      	adds	r3, #15
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	440b      	add	r3, r1
 80026d4:	7a9b      	ldrb	r3, [r3, #10]
 80026d6:	b21b      	sxth	r3, r3
 80026d8:	4313      	orrs	r3, r2
 80026da:	b21b      	sxth	r3, r3
 80026dc:	b29a      	uxth	r2, r3
			tempOrder->destCoord.y = ((uint16_t) hxb->buffer[index + 14] << 8)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	80da      	strh	r2, [r3, #6]
			// time limit
			temp = hxb->buffer[index + 16];
 80026e2:	7f7b      	ldrb	r3, [r7, #29]
 80026e4:	3310      	adds	r3, #16
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4413      	add	r3, r2
 80026ea:	7a9b      	ldrb	r3, [r3, #10]
 80026ec:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	021b      	lsls	r3, r3, #8
 80026f2:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 17];
 80026f4:	7f7b      	ldrb	r3, [r7, #29]
 80026f6:	3311      	adds	r3, #17
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4413      	add	r3, r2
 80026fc:	7a9b      	ldrb	r3, [r3, #10]
 80026fe:	461a      	mov	r2, r3
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	021b      	lsls	r3, r3, #8
 800270a:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 18];
 800270c:	7f7b      	ldrb	r3, [r7, #29]
 800270e:	3312      	adds	r3, #18
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	4413      	add	r3, r2
 8002714:	7a9b      	ldrb	r3, [r3, #10]
 8002716:	461a      	mov	r2, r3
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4313      	orrs	r3, r2
 800271c:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 19];
 8002724:	7f7b      	ldrb	r3, [r7, #29]
 8002726:	3313      	adds	r3, #19
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	4413      	add	r3, r2
 800272c:	7a9b      	ldrb	r3, [r3, #10]
 800272e:	461a      	mov	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4313      	orrs	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
			tempOrder->timeLimit = temp;
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	609a      	str	r2, [r3, #8]
			// reward
			temp = hxb->buffer[index + 20];
 800273c:	7f7b      	ldrb	r3, [r7, #29]
 800273e:	3314      	adds	r3, #20
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	4413      	add	r3, r2
 8002744:	7a9b      	ldrb	r3, [r3, #10]
 8002746:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 21];
 800274e:	7f7b      	ldrb	r3, [r7, #29]
 8002750:	3315      	adds	r3, #21
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	7a9b      	ldrb	r3, [r3, #10]
 8002758:	461a      	mov	r2, r3
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	021b      	lsls	r3, r3, #8
 8002764:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 22];
 8002766:	7f7b      	ldrb	r3, [r7, #29]
 8002768:	3316      	adds	r3, #22
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	7a9b      	ldrb	r3, [r3, #10]
 8002770:	461a      	mov	r2, r3
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
			temp <<= 8;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	021b      	lsls	r3, r3, #8
 800277c:	613b      	str	r3, [r7, #16]
			temp |= hxb->buffer[index + 23];
 800277e:	7f7b      	ldrb	r3, [r7, #29]
 8002780:	3317      	adds	r3, #23
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	4413      	add	r3, r2
 8002786:	7a9b      	ldrb	r3, [r3, #10]
 8002788:	461a      	mov	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
			tempOrder->reward = *(float*) &temp;
 8002790:	f107 0310 	add.w	r3, r7, #16
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	615a      	str	r2, [r3, #20]
		}
	}

	// set up next DMA
	hxb->nextPackageLength = 6;		// header length
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2206      	movs	r2, #6
 800279e:	725a      	strb	r2, [r3, #9]
	hxb->nextPackageID = 0x00;		// the next one is header
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive_DMA(hxb->uartPort, hxb->buffer, hxb->nextPackageLength);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f103 010a 	add.w	r1, r3, #10
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	7a5b      	ldrb	r3, [r3, #9]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	f004 f80a 	bl	80067d0 <HAL_UART_Receive_DMA>
}
 80027bc:	bf00      	nop
 80027be:	3720      	adds	r7, #32
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000bcc 	.word	0x20000bcc

080027c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027cc:	f001 f9e8 	bl	8003ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027d0:	f000 f854 	bl	800287c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027d4:	f000 fc4e 	bl	8003074 <MX_GPIO_Init>
  MX_DMA_Init();
 80027d8:	f000 fc26 	bl	8003028 <MX_DMA_Init>
  MX_I2C1_Init();
 80027dc:	f000 f894 	bl	8002908 <MX_I2C1_Init>
  MX_TIM1_Init();
 80027e0:	f000 f8c0 	bl	8002964 <MX_TIM1_Init>
  MX_TIM2_Init();
 80027e4:	f000 f982 	bl	8002aec <MX_TIM2_Init>
  MX_TIM3_Init();
 80027e8:	f000 f9d4 	bl	8002b94 <MX_TIM3_Init>
  MX_TIM4_Init();
 80027ec:	f000 fa26 	bl	8002c3c <MX_TIM4_Init>
  MX_TIM5_Init();
 80027f0:	f000 fa78 	bl	8002ce4 <MX_TIM5_Init>
  MX_TIM8_Init();
 80027f4:	f000 fb00 	bl	8002df8 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80027f8:	f000 fbc2 	bl	8002f80 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80027fc:	f000 fbea 	bl	8002fd4 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8002800:	f000 fac4 	bl	8002d8c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	HUAN_MOTOR1_Init();
 8002804:	f000 fc8c 	bl	8003120 <HUAN_MOTOR1_Init>
	HUAN_MOTOR2_Init();
 8002808:	f000 fcba 	bl	8003180 <HUAN_MOTOR2_Init>
	HUAN_MOTOR3_Init();
 800280c:	f000 fce8 	bl	80031e0 <HUAN_MOTOR3_Init>
	HUAN_MOTOR4_Init();
 8002810:	f000 fd16 	bl	8003240 <HUAN_MOTOR4_Init>
	HUAN_IMU_Init();
 8002814:	f000 fd44 	bl	80032a0 <HUAN_IMU_Init>
	HUAN_ZIGBEE_Init();
 8002818:	f000 fd50 	bl	80032bc <HUAN_ZIGBEE_Init>

	// tick per motor rev = 1080 (measured)
	// tick per rotor rev = 54 (calculated)
	// reduction ratio = 20 (given)

	HAL_TIM_Base_Start_IT(&htim6);
 800281c:	4812      	ldr	r0, [pc, #72]	; (8002868 <main+0xa0>)
 800281e:	f002 fdef 	bl	8005400 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_Delay(2000);
 8002822:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002826:	f001 fa1d 	bl	8003c64 <HAL_Delay>
		chao_move_angle(0, 4000);
 800282a:	4910      	ldr	r1, [pc, #64]	; (800286c <main+0xa4>)
 800282c:	f04f 0000 	mov.w	r0, #0
 8002830:	f7fe fcbe 	bl	80011b0 <chao_move_angle>

		HAL_Delay(2000);
 8002834:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002838:	f001 fa14 	bl	8003c64 <HAL_Delay>
		chao_move_angle(90, 4000);
 800283c:	490b      	ldr	r1, [pc, #44]	; (800286c <main+0xa4>)
 800283e:	480c      	ldr	r0, [pc, #48]	; (8002870 <main+0xa8>)
 8002840:	f7fe fcb6 	bl	80011b0 <chao_move_angle>

		HAL_Delay(2000);
 8002844:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002848:	f001 fa0c 	bl	8003c64 <HAL_Delay>
		chao_move_angle(180, 4000);
 800284c:	4907      	ldr	r1, [pc, #28]	; (800286c <main+0xa4>)
 800284e:	4809      	ldr	r0, [pc, #36]	; (8002874 <main+0xac>)
 8002850:	f7fe fcae 	bl	80011b0 <chao_move_angle>

		HAL_Delay(2000);
 8002854:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002858:	f001 fa04 	bl	8003c64 <HAL_Delay>
		chao_move_angle(270, 4000);
 800285c:	4903      	ldr	r1, [pc, #12]	; (800286c <main+0xa4>)
 800285e:	4806      	ldr	r0, [pc, #24]	; (8002878 <main+0xb0>)
 8002860:	f7fe fca6 	bl	80011b0 <chao_move_angle>
		HAL_Delay(2000);
 8002864:	e7dd      	b.n	8002822 <main+0x5a>
 8002866:	bf00      	nop
 8002868:	200007ec 	.word	0x200007ec
 800286c:	457a0000 	.word	0x457a0000
 8002870:	42b40000 	.word	0x42b40000
 8002874:	43340000 	.word	0x43340000
 8002878:	43870000 	.word	0x43870000

0800287c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b090      	sub	sp, #64	; 0x40
 8002880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002882:	f107 0318 	add.w	r3, r7, #24
 8002886:	2228      	movs	r2, #40	; 0x28
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f004 fa7e 	bl	8006d8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
 800289c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800289e:	2301      	movs	r3, #1
 80028a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80028a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028ae:	2301      	movs	r3, #1
 80028b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028b2:	2302      	movs	r3, #2
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80028bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80028c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028c2:	f107 0318 	add.w	r3, r7, #24
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 f92e 	bl	8004b28 <HAL_RCC_OscConfig>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80028d2:	f000 fd01 	bl	80032d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028d6:	230f      	movs	r3, #15
 80028d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028da:	2302      	movs	r3, #2
 80028dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028de:	2300      	movs	r3, #0
 80028e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80028e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	2102      	movs	r1, #2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f002 fb9b 	bl	800502c <HAL_RCC_ClockConfig>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80028fc:	f000 fcec 	bl	80032d8 <Error_Handler>
  }
}
 8002900:	bf00      	nop
 8002902:	3740      	adds	r7, #64	; 0x40
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800290c:	4b12      	ldr	r3, [pc, #72]	; (8002958 <MX_I2C1_Init+0x50>)
 800290e:	4a13      	ldr	r2, [pc, #76]	; (800295c <MX_I2C1_Init+0x54>)
 8002910:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <MX_I2C1_Init+0x50>)
 8002914:	4a12      	ldr	r2, [pc, #72]	; (8002960 <MX_I2C1_Init+0x58>)
 8002916:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <MX_I2C1_Init+0x50>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <MX_I2C1_Init+0x50>)
 8002920:	2200      	movs	r2, #0
 8002922:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <MX_I2C1_Init+0x50>)
 8002926:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800292a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <MX_I2C1_Init+0x50>)
 800292e:	2200      	movs	r2, #0
 8002930:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002932:	4b09      	ldr	r3, [pc, #36]	; (8002958 <MX_I2C1_Init+0x50>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002938:	4b07      	ldr	r3, [pc, #28]	; (8002958 <MX_I2C1_Init+0x50>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <MX_I2C1_Init+0x50>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <MX_I2C1_Init+0x50>)
 8002946:	f001 ffab 	bl	80048a0 <HAL_I2C_Init>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002950:	f000 fcc2 	bl	80032d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002954:	bf00      	nop
 8002956:	bd80      	pop	{r7, pc}
 8002958:	20000630 	.word	0x20000630
 800295c:	40005400 	.word	0x40005400
 8002960:	000186a0 	.word	0x000186a0

08002964 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b096      	sub	sp, #88	; 0x58
 8002968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800296a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
 8002972:	605a      	str	r2, [r3, #4]
 8002974:	609a      	str	r2, [r3, #8]
 8002976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002978:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
 800298c:	609a      	str	r2, [r3, #8]
 800298e:	60da      	str	r2, [r3, #12]
 8002990:	611a      	str	r2, [r3, #16]
 8002992:	615a      	str	r2, [r3, #20]
 8002994:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002996:	1d3b      	adds	r3, r7, #4
 8002998:	2220      	movs	r2, #32
 800299a:	2100      	movs	r1, #0
 800299c:	4618      	mov	r0, r3
 800299e:	f004 f9f5 	bl	8006d8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80029a2:	4b50      	ldr	r3, [pc, #320]	; (8002ae4 <MX_TIM1_Init+0x180>)
 80029a4:	4a50      	ldr	r2, [pc, #320]	; (8002ae8 <MX_TIM1_Init+0x184>)
 80029a6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80029a8:	4b4e      	ldr	r3, [pc, #312]	; (8002ae4 <MX_TIM1_Init+0x180>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ae:	4b4d      	ldr	r3, [pc, #308]	; (8002ae4 <MX_TIM1_Init+0x180>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50 * 72 - 1;
 80029b4:	4b4b      	ldr	r3, [pc, #300]	; (8002ae4 <MX_TIM1_Init+0x180>)
 80029b6:	f640 620f 	movw	r2, #3599	; 0xe0f
 80029ba:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029bc:	4b49      	ldr	r3, [pc, #292]	; (8002ae4 <MX_TIM1_Init+0x180>)
 80029be:	2200      	movs	r2, #0
 80029c0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80029c2:	4b48      	ldr	r3, [pc, #288]	; (8002ae4 <MX_TIM1_Init+0x180>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029c8:	4b46      	ldr	r3, [pc, #280]	; (8002ae4 <MX_TIM1_Init+0x180>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80029ce:	4845      	ldr	r0, [pc, #276]	; (8002ae4 <MX_TIM1_Init+0x180>)
 80029d0:	f002 fcc6 	bl	8005360 <HAL_TIM_Base_Init>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80029da:	f000 fc7d 	bl	80032d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80029e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80029e8:	4619      	mov	r1, r3
 80029ea:	483e      	ldr	r0, [pc, #248]	; (8002ae4 <MX_TIM1_Init+0x180>)
 80029ec:	f003 f970 	bl	8005cd0 <HAL_TIM_ConfigClockSource>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80029f6:	f000 fc6f 	bl	80032d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029fa:	483a      	ldr	r0, [pc, #232]	; (8002ae4 <MX_TIM1_Init+0x180>)
 80029fc:	f002 fd60 	bl	80054c0 <HAL_TIM_PWM_Init>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002a06:	f000 fc67 	bl	80032d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002a16:	4619      	mov	r1, r3
 8002a18:	4832      	ldr	r0, [pc, #200]	; (8002ae4 <MX_TIM1_Init+0x180>)
 8002a1a:	f003 fd2b 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002a24:	f000 fc58 	bl	80032d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a28:	2360      	movs	r3, #96	; 0x60
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a30:	2300      	movs	r3, #0
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a34:	2300      	movs	r3, #0
 8002a36:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a40:	2300      	movs	r3, #0
 8002a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a48:	2200      	movs	r2, #0
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4825      	ldr	r0, [pc, #148]	; (8002ae4 <MX_TIM1_Init+0x180>)
 8002a4e:	f003 f881 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002a58:	f000 fc3e 	bl	80032d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a60:	2204      	movs	r2, #4
 8002a62:	4619      	mov	r1, r3
 8002a64:	481f      	ldr	r0, [pc, #124]	; (8002ae4 <MX_TIM1_Init+0x180>)
 8002a66:	f003 f875 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002a70:	f000 fc32 	bl	80032d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a78:	2208      	movs	r2, #8
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4819      	ldr	r0, [pc, #100]	; (8002ae4 <MX_TIM1_Init+0x180>)
 8002a7e:	f003 f869 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8002a88:	f000 fc26 	bl	80032d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a90:	220c      	movs	r2, #12
 8002a92:	4619      	mov	r1, r3
 8002a94:	4813      	ldr	r0, [pc, #76]	; (8002ae4 <MX_TIM1_Init+0x180>)
 8002a96:	f003 f85d 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8002aa0:	f000 fc1a 	bl	80032d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002abc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ac2:	1d3b      	adds	r3, r7, #4
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	4807      	ldr	r0, [pc, #28]	; (8002ae4 <MX_TIM1_Init+0x180>)
 8002ac8:	f003 fd40 	bl	800654c <HAL_TIMEx_ConfigBreakDeadTime>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8002ad2:	f000 fc01 	bl	80032d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002ad6:	4803      	ldr	r0, [pc, #12]	; (8002ae4 <MX_TIM1_Init+0x180>)
 8002ad8:	f000 fdc4 	bl	8003664 <HAL_TIM_MspPostInit>

}
 8002adc:	bf00      	nop
 8002ade:	3758      	adds	r7, #88	; 0x58
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	20000684 	.word	0x20000684
 8002ae8:	40012c00 	.word	0x40012c00

08002aec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	; 0x30
 8002af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002af2:	f107 030c 	add.w	r3, r7, #12
 8002af6:	2224      	movs	r2, #36	; 0x24
 8002af8:	2100      	movs	r1, #0
 8002afa:	4618      	mov	r0, r3
 8002afc:	f004 f946 	bl	8006d8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b00:	1d3b      	adds	r3, r7, #4
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002b08:	4b21      	ldr	r3, [pc, #132]	; (8002b90 <MX_TIM2_Init+0xa4>)
 8002b0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002b10:	4b1f      	ldr	r3, [pc, #124]	; (8002b90 <MX_TIM2_Init+0xa4>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <MX_TIM2_Init+0xa4>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8002b1c:	4b1c      	ldr	r3, [pc, #112]	; (8002b90 <MX_TIM2_Init+0xa4>)
 8002b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b24:	4b1a      	ldr	r3, [pc, #104]	; (8002b90 <MX_TIM2_Init+0xa4>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b2a:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <MX_TIM2_Init+0xa4>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b30:	2303      	movs	r3, #3
 8002b32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002b44:	2302      	movs	r3, #2
 8002b46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002b54:	f107 030c 	add.w	r3, r7, #12
 8002b58:	4619      	mov	r1, r3
 8002b5a:	480d      	ldr	r0, [pc, #52]	; (8002b90 <MX_TIM2_Init+0xa4>)
 8002b5c:	f002 fdc2 	bl	80056e4 <HAL_TIM_Encoder_Init>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002b66:	f000 fbb7 	bl	80032d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002b72:	1d3b      	adds	r3, r7, #4
 8002b74:	4619      	mov	r1, r3
 8002b76:	4806      	ldr	r0, [pc, #24]	; (8002b90 <MX_TIM2_Init+0xa4>)
 8002b78:	f003 fc7c 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002b82:	f000 fba9 	bl	80032d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002b86:	bf00      	nop
 8002b88:	3730      	adds	r7, #48	; 0x30
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	200006cc 	.word	0x200006cc

08002b94 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08c      	sub	sp, #48	; 0x30
 8002b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b9a:	f107 030c 	add.w	r3, r7, #12
 8002b9e:	2224      	movs	r2, #36	; 0x24
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f004 f8f2 	bl	8006d8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba8:	1d3b      	adds	r3, r7, #4
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002bb0:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <MX_TIM3_Init+0xa0>)
 8002bb2:	4a21      	ldr	r2, [pc, #132]	; (8002c38 <MX_TIM3_Init+0xa4>)
 8002bb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002bb6:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <MX_TIM3_Init+0xa0>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <MX_TIM3_Init+0xa0>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002bc2:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <MX_TIM3_Init+0xa0>)
 8002bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bca:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <MX_TIM3_Init+0xa0>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bd0:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <MX_TIM3_Init+0xa0>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002bde:	2301      	movs	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002bea:	2302      	movs	r3, #2
 8002bec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002bfa:	f107 030c 	add.w	r3, r7, #12
 8002bfe:	4619      	mov	r1, r3
 8002c00:	480c      	ldr	r0, [pc, #48]	; (8002c34 <MX_TIM3_Init+0xa0>)
 8002c02:	f002 fd6f 	bl	80056e4 <HAL_TIM_Encoder_Init>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002c0c:	f000 fb64 	bl	80032d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c10:	2300      	movs	r3, #0
 8002c12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c18:	1d3b      	adds	r3, r7, #4
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4805      	ldr	r0, [pc, #20]	; (8002c34 <MX_TIM3_Init+0xa0>)
 8002c1e:	f003 fc29 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002c28:	f000 fb56 	bl	80032d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c2c:	bf00      	nop
 8002c2e:	3730      	adds	r7, #48	; 0x30
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000714 	.word	0x20000714
 8002c38:	40000400 	.word	0x40000400

08002c3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	; 0x30
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002c42:	f107 030c 	add.w	r3, r7, #12
 8002c46:	2224      	movs	r2, #36	; 0x24
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 f89e 	bl	8006d8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c50:	1d3b      	adds	r3, r7, #4
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002c58:	4b20      	ldr	r3, [pc, #128]	; (8002cdc <MX_TIM4_Init+0xa0>)
 8002c5a:	4a21      	ldr	r2, [pc, #132]	; (8002ce0 <MX_TIM4_Init+0xa4>)
 8002c5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002c5e:	4b1f      	ldr	r3, [pc, #124]	; (8002cdc <MX_TIM4_Init+0xa0>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c64:	4b1d      	ldr	r3, [pc, #116]	; (8002cdc <MX_TIM4_Init+0xa0>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002c6a:	4b1c      	ldr	r3, [pc, #112]	; (8002cdc <MX_TIM4_Init+0xa0>)
 8002c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c70:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <MX_TIM4_Init+0xa0>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c78:	4b18      	ldr	r3, [pc, #96]	; (8002cdc <MX_TIM4_Init+0xa0>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002c82:	2300      	movs	r3, #0
 8002c84:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002c86:	2301      	movs	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002c92:	2300      	movs	r3, #0
 8002c94:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002c96:	2301      	movs	r3, #1
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002ca2:	f107 030c 	add.w	r3, r7, #12
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	480c      	ldr	r0, [pc, #48]	; (8002cdc <MX_TIM4_Init+0xa0>)
 8002caa:	f002 fd1b 	bl	80056e4 <HAL_TIM_Encoder_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002cb4:	f000 fb10 	bl	80032d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4805      	ldr	r0, [pc, #20]	; (8002cdc <MX_TIM4_Init+0xa0>)
 8002cc6:	f003 fbd5 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002cd0:	f000 fb02 	bl	80032d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002cd4:	bf00      	nop
 8002cd6:	3730      	adds	r7, #48	; 0x30
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	2000075c 	.word	0x2000075c
 8002ce0:	40000800 	.word	0x40000800

08002ce4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b08c      	sub	sp, #48	; 0x30
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002cea:	f107 030c 	add.w	r3, r7, #12
 8002cee:	2224      	movs	r2, #36	; 0x24
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f004 f84a 	bl	8006d8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf8:	1d3b      	adds	r3, r7, #4
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002d00:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <MX_TIM5_Init+0xa0>)
 8002d02:	4a21      	ldr	r2, [pc, #132]	; (8002d88 <MX_TIM5_Init+0xa4>)
 8002d04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002d06:	4b1f      	ldr	r3, [pc, #124]	; (8002d84 <MX_TIM5_Init+0xa0>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d0c:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <MX_TIM5_Init+0xa0>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002d12:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <MX_TIM5_Init+0xa0>)
 8002d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <MX_TIM5_Init+0xa0>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d20:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <MX_TIM5_Init+0xa0>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002d26:	2303      	movs	r3, #3
 8002d28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002d32:	2300      	movs	r3, #0
 8002d34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002d42:	2300      	movs	r3, #0
 8002d44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8002d4a:	f107 030c 	add.w	r3, r7, #12
 8002d4e:	4619      	mov	r1, r3
 8002d50:	480c      	ldr	r0, [pc, #48]	; (8002d84 <MX_TIM5_Init+0xa0>)
 8002d52:	f002 fcc7 	bl	80056e4 <HAL_TIM_Encoder_Init>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8002d5c:	f000 fabc 	bl	80032d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d60:	2300      	movs	r3, #0
 8002d62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002d68:	1d3b      	adds	r3, r7, #4
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4805      	ldr	r0, [pc, #20]	; (8002d84 <MX_TIM5_Init+0xa0>)
 8002d6e:	f003 fb81 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8002d78:	f000 faae 	bl	80032d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002d7c:	bf00      	nop
 8002d7e:	3730      	adds	r7, #48	; 0x30
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	200007a4 	.word	0x200007a4
 8002d88:	40000c00 	.word	0x40000c00

08002d8c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d92:	463b      	mov	r3, r7
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002d9a:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <MX_TIM6_Init+0x64>)
 8002d9c:	4a15      	ldr	r2, [pc, #84]	; (8002df4 <MX_TIM6_Init+0x68>)
 8002d9e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72 - 1;
 8002da0:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <MX_TIM6_Init+0x64>)
 8002da2:	2247      	movs	r2, #71	; 0x47
 8002da4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <MX_TIM6_Init+0x64>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 50000;
 8002dac:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <MX_TIM6_Init+0x64>)
 8002dae:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002db2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db4:	4b0e      	ldr	r3, [pc, #56]	; (8002df0 <MX_TIM6_Init+0x64>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002dba:	480d      	ldr	r0, [pc, #52]	; (8002df0 <MX_TIM6_Init+0x64>)
 8002dbc:	f002 fad0 	bl	8005360 <HAL_TIM_Base_Init>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8002dc6:	f000 fa87 	bl	80032d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002dd2:	463b      	mov	r3, r7
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4806      	ldr	r0, [pc, #24]	; (8002df0 <MX_TIM6_Init+0x64>)
 8002dd8:	f003 fb4c 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002de2:	f000 fa79 	bl	80032d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200007ec 	.word	0x200007ec
 8002df4:	40001000 	.word	0x40001000

08002df8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b096      	sub	sp, #88	; 0x58
 8002dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dfe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	605a      	str	r2, [r3, #4]
 8002e20:	609a      	str	r2, [r3, #8]
 8002e22:	60da      	str	r2, [r3, #12]
 8002e24:	611a      	str	r2, [r3, #16]
 8002e26:	615a      	str	r2, [r3, #20]
 8002e28:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4618      	mov	r0, r3
 8002e32:	f003 ffab 	bl	8006d8c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002e36:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002e38:	4a50      	ldr	r2, [pc, #320]	; (8002f7c <MX_TIM8_Init+0x184>)
 8002e3a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002e3c:	4b4e      	ldr	r3, [pc, #312]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e42:	4b4d      	ldr	r3, [pc, #308]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 50 * 72 - 1;
 8002e48:	4b4b      	ldr	r3, [pc, #300]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002e4a:	f640 620f 	movw	r2, #3599	; 0xe0f
 8002e4e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e50:	4b49      	ldr	r3, [pc, #292]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002e56:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e5c:	4b46      	ldr	r3, [pc, #280]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002e62:	4845      	ldr	r0, [pc, #276]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002e64:	f002 fa7c 	bl	8005360 <HAL_TIM_Base_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8002e6e:	f000 fa33 	bl	80032d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002e78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	483e      	ldr	r0, [pc, #248]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002e80:	f002 ff26 	bl	8005cd0 <HAL_TIM_ConfigClockSource>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8002e8a:	f000 fa25 	bl	80032d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002e8e:	483a      	ldr	r0, [pc, #232]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002e90:	f002 fb16 	bl	80054c0 <HAL_TIM_PWM_Init>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8002e9a:	f000 fa1d 	bl	80032d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002ea6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4832      	ldr	r0, [pc, #200]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002eae:	f003 fae1 	bl	8006474 <HAL_TIMEx_MasterConfigSynchronization>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8002eb8:	f000 fa0e 	bl	80032d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ebc:	2360      	movs	r3, #96	; 0x60
 8002ebe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002edc:	2200      	movs	r2, #0
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4825      	ldr	r0, [pc, #148]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002ee2:	f002 fe37 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8002eec:	f000 f9f4 	bl	80032d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef4:	2204      	movs	r2, #4
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	481f      	ldr	r0, [pc, #124]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002efa:	f002 fe2b 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8002f04:	f000 f9e8 	bl	80032d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002f08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4819      	ldr	r0, [pc, #100]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002f12:	f002 fe1f 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8002f1c:	f000 f9dc 	bl	80032d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f24:	220c      	movs	r2, #12
 8002f26:	4619      	mov	r1, r3
 8002f28:	4813      	ldr	r0, [pc, #76]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002f2a:	f002 fe13 	bl	8005b54 <HAL_TIM_PWM_ConfigChannel>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d001      	beq.n	8002f38 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8002f34:	f000 f9d0 	bl	80032d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f40:	2300      	movs	r3, #0
 8002f42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f52:	2300      	movs	r3, #0
 8002f54:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002f56:	1d3b      	adds	r3, r7, #4
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4807      	ldr	r0, [pc, #28]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002f5c:	f003 faf6 	bl	800654c <HAL_TIMEx_ConfigBreakDeadTime>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8002f66:	f000 f9b7 	bl	80032d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002f6a:	4803      	ldr	r0, [pc, #12]	; (8002f78 <MX_TIM8_Init+0x180>)
 8002f6c:	f000 fb7a 	bl	8003664 <HAL_TIM_MspPostInit>

}
 8002f70:	bf00      	nop
 8002f72:	3758      	adds	r7, #88	; 0x58
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000834 	.word	0x20000834
 8002f7c:	40013400 	.word	0x40013400

08002f80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f84:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002f86:	4a12      	ldr	r2, [pc, #72]	; (8002fd0 <MX_USART2_UART_Init+0x50>)
 8002f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f8a:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002f8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f92:	4b0e      	ldr	r3, [pc, #56]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f9e:	4b0b      	ldr	r3, [pc, #44]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002fa4:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002faa:	4b08      	ldr	r3, [pc, #32]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002fb6:	4805      	ldr	r0, [pc, #20]	; (8002fcc <MX_USART2_UART_Init+0x4c>)
 8002fb8:	f003 fb2b 	bl	8006612 <HAL_UART_Init>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002fc2:	f000 f989 	bl	80032d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	2000087c 	.word	0x2000087c
 8002fd0:	40004400 	.word	0x40004400

08002fd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fd8:	4b11      	ldr	r3, [pc, #68]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8002fda:	4a12      	ldr	r2, [pc, #72]	; (8003024 <MX_USART3_UART_Init+0x50>)
 8002fdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002fde:	4b10      	ldr	r3, [pc, #64]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8002fe0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fe4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fe6:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fec:	4b0c      	ldr	r3, [pc, #48]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8002ffa:	220c      	movs	r2, #12
 8002ffc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ffe:	4b08      	ldr	r3, [pc, #32]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8003000:	2200      	movs	r2, #0
 8003002:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 8003006:	2200      	movs	r2, #0
 8003008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800300a:	4805      	ldr	r0, [pc, #20]	; (8003020 <MX_USART3_UART_Init+0x4c>)
 800300c:	f003 fb01 	bl	8006612 <HAL_UART_Init>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003016:	f000 f95f 	bl	80032d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	200008c0 	.word	0x200008c0
 8003024:	40004800 	.word	0x40004800

08003028 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <MX_DMA_Init+0x48>)
 8003030:	695b      	ldr	r3, [r3, #20]
 8003032:	4a0f      	ldr	r2, [pc, #60]	; (8003070 <MX_DMA_Init+0x48>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6153      	str	r3, [r2, #20]
 800303a:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <MX_DMA_Init+0x48>)
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 2, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2102      	movs	r1, #2
 800304a:	200d      	movs	r0, #13
 800304c:	f000 ff05 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003050:	200d      	movs	r0, #13
 8003052:	f000 ff1e 	bl	8003e92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 2, 0);
 8003056:	2200      	movs	r2, #0
 8003058:	2102      	movs	r1, #2
 800305a:	2010      	movs	r0, #16
 800305c:	f000 fefd 	bl	8003e5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003060:	2010      	movs	r0, #16
 8003062:	f000 ff16 	bl	8003e92 <HAL_NVIC_EnableIRQ>

}
 8003066:	bf00      	nop
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000

08003074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800307a:	f107 0310 	add.w	r3, r7, #16
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	605a      	str	r2, [r3, #4]
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003088:	4b23      	ldr	r3, [pc, #140]	; (8003118 <MX_GPIO_Init+0xa4>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	4a22      	ldr	r2, [pc, #136]	; (8003118 <MX_GPIO_Init+0xa4>)
 800308e:	f043 0320 	orr.w	r3, r3, #32
 8003092:	6193      	str	r3, [r2, #24]
 8003094:	4b20      	ldr	r3, [pc, #128]	; (8003118 <MX_GPIO_Init+0xa4>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 0320 	and.w	r3, r3, #32
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a0:	4b1d      	ldr	r3, [pc, #116]	; (8003118 <MX_GPIO_Init+0xa4>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <MX_GPIO_Init+0xa4>)
 80030a6:	f043 0304 	orr.w	r3, r3, #4
 80030aa:	6193      	str	r3, [r2, #24]
 80030ac:	4b1a      	ldr	r3, [pc, #104]	; (8003118 <MX_GPIO_Init+0xa4>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b8:	4b17      	ldr	r3, [pc, #92]	; (8003118 <MX_GPIO_Init+0xa4>)
 80030ba:	699b      	ldr	r3, [r3, #24]
 80030bc:	4a16      	ldr	r2, [pc, #88]	; (8003118 <MX_GPIO_Init+0xa4>)
 80030be:	f043 0308 	orr.w	r3, r3, #8
 80030c2:	6193      	str	r3, [r2, #24]
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <MX_GPIO_Init+0xa4>)
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	607b      	str	r3, [r7, #4]
 80030ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d0:	4b11      	ldr	r3, [pc, #68]	; (8003118 <MX_GPIO_Init+0xa4>)
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	4a10      	ldr	r2, [pc, #64]	; (8003118 <MX_GPIO_Init+0xa4>)
 80030d6:	f043 0310 	orr.w	r3, r3, #16
 80030da:	6193      	str	r3, [r2, #24]
 80030dc:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <MX_GPIO_Init+0xa4>)
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	603b      	str	r3, [r7, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80030e8:	2200      	movs	r2, #0
 80030ea:	2107      	movs	r1, #7
 80030ec:	480b      	ldr	r0, [pc, #44]	; (800311c <MX_GPIO_Init+0xa8>)
 80030ee:	f001 fbbf 	bl	8004870 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80030f2:	2307      	movs	r3, #7
 80030f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030f6:	2301      	movs	r3, #1
 80030f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030fe:	2302      	movs	r3, #2
 8003100:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003102:	f107 0310 	add.w	r3, r7, #16
 8003106:	4619      	mov	r1, r3
 8003108:	4804      	ldr	r0, [pc, #16]	; (800311c <MX_GPIO_Init+0xa8>)
 800310a:	f001 fa1d 	bl	8004548 <HAL_GPIO_Init>

}
 800310e:	bf00      	nop
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40021000 	.word	0x40021000
 800311c:	40010c00 	.word	0x40010c00

08003120 <HUAN_MOTOR1_Init>:

/* USER CODE BEGIN 4 */

static void HUAN_MOTOR1_Init(void) {
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
	cmotor_lf.counter = &htim2;
 8003124:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <HUAN_MOTOR1_Init+0x44>)
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <HUAN_MOTOR1_Init+0x48>)
 8003128:	601a      	str	r2, [r3, #0]
	cmotor_lf.dt = 0.05;
 800312a:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <HUAN_MOTOR1_Init+0x44>)
 800312c:	4a0f      	ldr	r2, [pc, #60]	; (800316c <HUAN_MOTOR1_Init+0x4c>)
 800312e:	621a      	str	r2, [r3, #32]
	cmotor_lf.posTimer = &htim1;
 8003130:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <HUAN_MOTOR1_Init+0x44>)
 8003132:	4a0f      	ldr	r2, [pc, #60]	; (8003170 <HUAN_MOTOR1_Init+0x50>)
 8003134:	605a      	str	r2, [r3, #4]
	cmotor_lf.pos_channel = TIM_CHANNEL_4;
 8003136:	4b0b      	ldr	r3, [pc, #44]	; (8003164 <HUAN_MOTOR1_Init+0x44>)
 8003138:	220c      	movs	r2, #12
 800313a:	60da      	str	r2, [r3, #12]
	cmotor_lf.negTimer = &htim1;
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HUAN_MOTOR1_Init+0x44>)
 800313e:	4a0c      	ldr	r2, [pc, #48]	; (8003170 <HUAN_MOTOR1_Init+0x50>)
 8003140:	609a      	str	r2, [r3, #8]
	cmotor_lf.neg_channel = TIM_CHANNEL_3;
 8003142:	4b08      	ldr	r3, [pc, #32]	; (8003164 <HUAN_MOTOR1_Init+0x44>)
 8003144:	2208      	movs	r2, #8
 8003146:	611a      	str	r2, [r3, #16]
	cmotor_lf.kp = 0.0003;
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <HUAN_MOTOR1_Init+0x44>)
 800314a:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <HUAN_MOTOR1_Init+0x54>)
 800314c:	615a      	str	r2, [r3, #20]
	cmotor_lf.ki = 0.00002;
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <HUAN_MOTOR1_Init+0x44>)
 8003150:	4a09      	ldr	r2, [pc, #36]	; (8003178 <HUAN_MOTOR1_Init+0x58>)
 8003152:	619a      	str	r2, [r3, #24]
	cmotor_lf.kd = 0.00006;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HUAN_MOTOR1_Init+0x44>)
 8003156:	4a09      	ldr	r2, [pc, #36]	; (800317c <HUAN_MOTOR1_Init+0x5c>)
 8003158:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lf);
 800315a:	4802      	ldr	r0, [pc, #8]	; (8003164 <HUAN_MOTOR1_Init+0x44>)
 800315c:	f7fe fc30 	bl	80019c0 <huansic_motor_init>
}
 8003160:	bf00      	nop
 8003162:	bd80      	pop	{r7, pc}
 8003164:	2000098c 	.word	0x2000098c
 8003168:	200006cc 	.word	0x200006cc
 800316c:	3d4ccccd 	.word	0x3d4ccccd
 8003170:	20000684 	.word	0x20000684
 8003174:	399d4952 	.word	0x399d4952
 8003178:	37a7c5ac 	.word	0x37a7c5ac
 800317c:	387ba882 	.word	0x387ba882

08003180 <HUAN_MOTOR2_Init>:

static void HUAN_MOTOR2_Init(void) {
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
	cmotor_rf.counter = &htim4;
 8003184:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <HUAN_MOTOR2_Init+0x44>)
 8003186:	4a10      	ldr	r2, [pc, #64]	; (80031c8 <HUAN_MOTOR2_Init+0x48>)
 8003188:	601a      	str	r2, [r3, #0]
	cmotor_rf.dt = 0.05;
 800318a:	4b0e      	ldr	r3, [pc, #56]	; (80031c4 <HUAN_MOTOR2_Init+0x44>)
 800318c:	4a0f      	ldr	r2, [pc, #60]	; (80031cc <HUAN_MOTOR2_Init+0x4c>)
 800318e:	621a      	str	r2, [r3, #32]
	cmotor_rf.posTimer = &htim1;
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <HUAN_MOTOR2_Init+0x44>)
 8003192:	4a0f      	ldr	r2, [pc, #60]	; (80031d0 <HUAN_MOTOR2_Init+0x50>)
 8003194:	605a      	str	r2, [r3, #4]
	cmotor_rf.pos_channel = TIM_CHANNEL_1;
 8003196:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HUAN_MOTOR2_Init+0x44>)
 8003198:	2200      	movs	r2, #0
 800319a:	60da      	str	r2, [r3, #12]
	cmotor_rf.negTimer = &htim1;
 800319c:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <HUAN_MOTOR2_Init+0x44>)
 800319e:	4a0c      	ldr	r2, [pc, #48]	; (80031d0 <HUAN_MOTOR2_Init+0x50>)
 80031a0:	609a      	str	r2, [r3, #8]
	cmotor_rf.neg_channel = TIM_CHANNEL_2;
 80031a2:	4b08      	ldr	r3, [pc, #32]	; (80031c4 <HUAN_MOTOR2_Init+0x44>)
 80031a4:	2204      	movs	r2, #4
 80031a6:	611a      	str	r2, [r3, #16]
	cmotor_rf.kp = 0.0003;
 80031a8:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HUAN_MOTOR2_Init+0x44>)
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <HUAN_MOTOR2_Init+0x54>)
 80031ac:	615a      	str	r2, [r3, #20]
	cmotor_rf.ki = 0.00002;
 80031ae:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <HUAN_MOTOR2_Init+0x44>)
 80031b0:	4a09      	ldr	r2, [pc, #36]	; (80031d8 <HUAN_MOTOR2_Init+0x58>)
 80031b2:	619a      	str	r2, [r3, #24]
	cmotor_rf.kd = 0.00006;
 80031b4:	4b03      	ldr	r3, [pc, #12]	; (80031c4 <HUAN_MOTOR2_Init+0x44>)
 80031b6:	4a09      	ldr	r2, [pc, #36]	; (80031dc <HUAN_MOTOR2_Init+0x5c>)
 80031b8:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rf);
 80031ba:	4802      	ldr	r0, [pc, #8]	; (80031c4 <HUAN_MOTOR2_Init+0x44>)
 80031bc:	f7fe fc00 	bl	80019c0 <huansic_motor_init>
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	200009c8 	.word	0x200009c8
 80031c8:	2000075c 	.word	0x2000075c
 80031cc:	3d4ccccd 	.word	0x3d4ccccd
 80031d0:	20000684 	.word	0x20000684
 80031d4:	399d4952 	.word	0x399d4952
 80031d8:	37a7c5ac 	.word	0x37a7c5ac
 80031dc:	387ba882 	.word	0x387ba882

080031e0 <HUAN_MOTOR3_Init>:

static void HUAN_MOTOR3_Init(void) {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
	cmotor_lb.counter = &htim3;
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HUAN_MOTOR3_Init+0x44>)
 80031e6:	4a10      	ldr	r2, [pc, #64]	; (8003228 <HUAN_MOTOR3_Init+0x48>)
 80031e8:	601a      	str	r2, [r3, #0]
	cmotor_lb.dt = 0.05;
 80031ea:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <HUAN_MOTOR3_Init+0x44>)
 80031ec:	4a0f      	ldr	r2, [pc, #60]	; (800322c <HUAN_MOTOR3_Init+0x4c>)
 80031ee:	621a      	str	r2, [r3, #32]
	cmotor_lb.posTimer = &htim8;
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <HUAN_MOTOR3_Init+0x44>)
 80031f2:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <HUAN_MOTOR3_Init+0x50>)
 80031f4:	605a      	str	r2, [r3, #4]
	cmotor_lb.pos_channel = TIM_CHANNEL_4;
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HUAN_MOTOR3_Init+0x44>)
 80031f8:	220c      	movs	r2, #12
 80031fa:	60da      	str	r2, [r3, #12]
	cmotor_lb.negTimer = &htim8;
 80031fc:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HUAN_MOTOR3_Init+0x44>)
 80031fe:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <HUAN_MOTOR3_Init+0x50>)
 8003200:	609a      	str	r2, [r3, #8]
	cmotor_lb.neg_channel = TIM_CHANNEL_3;
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <HUAN_MOTOR3_Init+0x44>)
 8003204:	2208      	movs	r2, #8
 8003206:	611a      	str	r2, [r3, #16]
	cmotor_lb.kp = 0.0003;
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HUAN_MOTOR3_Init+0x44>)
 800320a:	4a0a      	ldr	r2, [pc, #40]	; (8003234 <HUAN_MOTOR3_Init+0x54>)
 800320c:	615a      	str	r2, [r3, #20]
	cmotor_lb.ki = 0.00002;
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HUAN_MOTOR3_Init+0x44>)
 8003210:	4a09      	ldr	r2, [pc, #36]	; (8003238 <HUAN_MOTOR3_Init+0x58>)
 8003212:	619a      	str	r2, [r3, #24]
	cmotor_lb.kd = 0.00006;
 8003214:	4b03      	ldr	r3, [pc, #12]	; (8003224 <HUAN_MOTOR3_Init+0x44>)
 8003216:	4a09      	ldr	r2, [pc, #36]	; (800323c <HUAN_MOTOR3_Init+0x5c>)
 8003218:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_lb);
 800321a:	4802      	ldr	r0, [pc, #8]	; (8003224 <HUAN_MOTOR3_Init+0x44>)
 800321c:	f7fe fbd0 	bl	80019c0 <huansic_motor_init>
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}
 8003224:	20000a04 	.word	0x20000a04
 8003228:	20000714 	.word	0x20000714
 800322c:	3d4ccccd 	.word	0x3d4ccccd
 8003230:	20000834 	.word	0x20000834
 8003234:	399d4952 	.word	0x399d4952
 8003238:	37a7c5ac 	.word	0x37a7c5ac
 800323c:	387ba882 	.word	0x387ba882

08003240 <HUAN_MOTOR4_Init>:

static void HUAN_MOTOR4_Init(void) {
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
	cmotor_rb.counter = &htim5;
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <HUAN_MOTOR4_Init+0x44>)
 8003246:	4a10      	ldr	r2, [pc, #64]	; (8003288 <HUAN_MOTOR4_Init+0x48>)
 8003248:	601a      	str	r2, [r3, #0]
	cmotor_rb.dt = 0.05;
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <HUAN_MOTOR4_Init+0x44>)
 800324c:	4a0f      	ldr	r2, [pc, #60]	; (800328c <HUAN_MOTOR4_Init+0x4c>)
 800324e:	621a      	str	r2, [r3, #32]
	cmotor_rb.posTimer = &htim8;
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <HUAN_MOTOR4_Init+0x44>)
 8003252:	4a0f      	ldr	r2, [pc, #60]	; (8003290 <HUAN_MOTOR4_Init+0x50>)
 8003254:	605a      	str	r2, [r3, #4]
	cmotor_rb.pos_channel = TIM_CHANNEL_1;
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HUAN_MOTOR4_Init+0x44>)
 8003258:	2200      	movs	r2, #0
 800325a:	60da      	str	r2, [r3, #12]
	cmotor_rb.negTimer = &htim8;
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <HUAN_MOTOR4_Init+0x44>)
 800325e:	4a0c      	ldr	r2, [pc, #48]	; (8003290 <HUAN_MOTOR4_Init+0x50>)
 8003260:	609a      	str	r2, [r3, #8]
	cmotor_rb.neg_channel = TIM_CHANNEL_2;
 8003262:	4b08      	ldr	r3, [pc, #32]	; (8003284 <HUAN_MOTOR4_Init+0x44>)
 8003264:	2204      	movs	r2, #4
 8003266:	611a      	str	r2, [r3, #16]
	cmotor_rb.kp = 0.0003;
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <HUAN_MOTOR4_Init+0x44>)
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <HUAN_MOTOR4_Init+0x54>)
 800326c:	615a      	str	r2, [r3, #20]
	cmotor_rb.ki = 0.00002;
 800326e:	4b05      	ldr	r3, [pc, #20]	; (8003284 <HUAN_MOTOR4_Init+0x44>)
 8003270:	4a09      	ldr	r2, [pc, #36]	; (8003298 <HUAN_MOTOR4_Init+0x58>)
 8003272:	619a      	str	r2, [r3, #24]
	cmotor_rb.kd = 0.00006;
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <HUAN_MOTOR4_Init+0x44>)
 8003276:	4a09      	ldr	r2, [pc, #36]	; (800329c <HUAN_MOTOR4_Init+0x5c>)
 8003278:	61da      	str	r2, [r3, #28]
	huansic_motor_init(&cmotor_rb);
 800327a:	4802      	ldr	r0, [pc, #8]	; (8003284 <HUAN_MOTOR4_Init+0x44>)
 800327c:	f7fe fba0 	bl	80019c0 <huansic_motor_init>
}
 8003280:	bf00      	nop
 8003282:	bd80      	pop	{r7, pc}
 8003284:	20000a40 	.word	0x20000a40
 8003288:	200007a4 	.word	0x200007a4
 800328c:	3d4ccccd 	.word	0x3d4ccccd
 8003290:	20000834 	.word	0x20000834
 8003294:	399d4952 	.word	0x399d4952
 8003298:	37a7c5ac 	.word	0x37a7c5ac
 800329c:	387ba882 	.word	0x387ba882

080032a0 <HUAN_IMU_Init>:

static void HUAN_IMU_Init(void) {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
	himu.uartPort = &huart3;
 80032a4:	4b03      	ldr	r3, [pc, #12]	; (80032b4 <HUAN_IMU_Init+0x14>)
 80032a6:	4a04      	ldr	r2, [pc, #16]	; (80032b8 <HUAN_IMU_Init+0x18>)
 80032a8:	601a      	str	r2, [r3, #0]
	huansic_jy62_init(&himu);
 80032aa:	4802      	ldr	r0, [pc, #8]	; (80032b4 <HUAN_IMU_Init+0x14>)
 80032ac:	f7fe f89a 	bl	80013e4 <huansic_jy62_init>
}
 80032b0:	bf00      	nop
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000a7c 	.word	0x20000a7c
 80032b8:	200008c0 	.word	0x200008c0

080032bc <HUAN_ZIGBEE_Init>:

static void HUAN_ZIGBEE_Init(void) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
	hxb.uartPort = &huart2;
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <HUAN_ZIGBEE_Init+0x14>)
 80032c2:	4a04      	ldr	r2, [pc, #16]	; (80032d4 <HUAN_ZIGBEE_Init+0x18>)
 80032c4:	601a      	str	r2, [r3, #0]
	huansic_xb_init(&hxb);
 80032c6:	4802      	ldr	r0, [pc, #8]	; (80032d0 <HUAN_ZIGBEE_Init+0x14>)
 80032c8:	f7fe fd6c 	bl	8001da4 <huansic_xb_init>
}
 80032cc:	bf00      	nop
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	20000ab4 	.word	0x20000ab4
 80032d4:	2000087c 	.word	0x2000087c

080032d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032dc:	b672      	cpsid	i
}
 80032de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80032e0:	e7fe      	b.n	80032e0 <Error_Handler+0x8>
	...

080032e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80032ea:	4b15      	ldr	r3, [pc, #84]	; (8003340 <HAL_MspInit+0x5c>)
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	4a14      	ldr	r2, [pc, #80]	; (8003340 <HAL_MspInit+0x5c>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6193      	str	r3, [r2, #24]
 80032f6:	4b12      	ldr	r3, [pc, #72]	; (8003340 <HAL_MspInit+0x5c>)
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003302:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <HAL_MspInit+0x5c>)
 8003304:	69db      	ldr	r3, [r3, #28]
 8003306:	4a0e      	ldr	r2, [pc, #56]	; (8003340 <HAL_MspInit+0x5c>)
 8003308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800330c:	61d3      	str	r3, [r2, #28]
 800330e:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <HAL_MspInit+0x5c>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	607b      	str	r3, [r7, #4]
 8003318:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800331a:	4b0a      	ldr	r3, [pc, #40]	; (8003344 <HAL_MspInit+0x60>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	4a04      	ldr	r2, [pc, #16]	; (8003344 <HAL_MspInit+0x60>)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003336:	bf00      	nop
 8003338:	3714      	adds	r7, #20
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	40021000 	.word	0x40021000
 8003344:	40010000 	.word	0x40010000

08003348 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08a      	sub	sp, #40	; 0x28
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003350:	f107 0314 	add.w	r3, r7, #20
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1d      	ldr	r2, [pc, #116]	; (80033d8 <HAL_I2C_MspInit+0x90>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d132      	bne.n	80033ce <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003368:	4b1c      	ldr	r3, [pc, #112]	; (80033dc <HAL_I2C_MspInit+0x94>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	4a1b      	ldr	r2, [pc, #108]	; (80033dc <HAL_I2C_MspInit+0x94>)
 800336e:	f043 0308 	orr.w	r3, r3, #8
 8003372:	6193      	str	r3, [r2, #24]
 8003374:	4b19      	ldr	r3, [pc, #100]	; (80033dc <HAL_I2C_MspInit+0x94>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	613b      	str	r3, [r7, #16]
 800337e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003380:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003386:	2312      	movs	r3, #18
 8003388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800338a:	2303      	movs	r3, #3
 800338c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	4619      	mov	r1, r3
 8003394:	4812      	ldr	r0, [pc, #72]	; (80033e0 <HAL_I2C_MspInit+0x98>)
 8003396:	f001 f8d7 	bl	8004548 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800339a:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_I2C_MspInit+0x9c>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	627b      	str	r3, [r7, #36]	; 0x24
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	f043 0302 	orr.w	r3, r3, #2
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
 80033b0:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <HAL_I2C_MspInit+0x9c>)
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033b6:	4b09      	ldr	r3, [pc, #36]	; (80033dc <HAL_I2C_MspInit+0x94>)
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	4a08      	ldr	r2, [pc, #32]	; (80033dc <HAL_I2C_MspInit+0x94>)
 80033bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033c0:	61d3      	str	r3, [r2, #28]
 80033c2:	4b06      	ldr	r3, [pc, #24]	; (80033dc <HAL_I2C_MspInit+0x94>)
 80033c4:	69db      	ldr	r3, [r3, #28]
 80033c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80033ce:	bf00      	nop
 80033d0:	3728      	adds	r7, #40	; 0x28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40005400 	.word	0x40005400
 80033dc:	40021000 	.word	0x40021000
 80033e0:	40010c00 	.word	0x40010c00
 80033e4:	40010000 	.word	0x40010000

080033e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1f      	ldr	r2, [pc, #124]	; (8003474 <HAL_TIM_Base_MspInit+0x8c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d10c      	bne.n	8003414 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033fa:	4b1f      	ldr	r3, [pc, #124]	; (8003478 <HAL_TIM_Base_MspInit+0x90>)
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <HAL_TIM_Base_MspInit+0x90>)
 8003400:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003404:	6193      	str	r3, [r2, #24]
 8003406:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <HAL_TIM_Base_MspInit+0x90>)
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003412:	e02a      	b.n	800346a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a18      	ldr	r2, [pc, #96]	; (800347c <HAL_TIM_Base_MspInit+0x94>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d114      	bne.n	8003448 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800341e:	4b16      	ldr	r3, [pc, #88]	; (8003478 <HAL_TIM_Base_MspInit+0x90>)
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	4a15      	ldr	r2, [pc, #84]	; (8003478 <HAL_TIM_Base_MspInit+0x90>)
 8003424:	f043 0310 	orr.w	r3, r3, #16
 8003428:	61d3      	str	r3, [r2, #28]
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_TIM_Base_MspInit+0x90>)
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_IRQn, 1, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	2101      	movs	r1, #1
 800343a:	2036      	movs	r0, #54	; 0x36
 800343c:	f000 fd0d 	bl	8003e5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003440:	2036      	movs	r0, #54	; 0x36
 8003442:	f000 fd26 	bl	8003e92 <HAL_NVIC_EnableIRQ>
}
 8003446:	e010      	b.n	800346a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <HAL_TIM_Base_MspInit+0x98>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d10b      	bne.n	800346a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_TIM_Base_MspInit+0x90>)
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	4a08      	ldr	r2, [pc, #32]	; (8003478 <HAL_TIM_Base_MspInit+0x90>)
 8003458:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800345c:	6193      	str	r3, [r2, #24]
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_TIM_Base_MspInit+0x90>)
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
}
 800346a:	bf00      	nop
 800346c:	3718      	adds	r7, #24
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40012c00 	.word	0x40012c00
 8003478:	40021000 	.word	0x40021000
 800347c:	40001000 	.word	0x40001000
 8003480:	40013400 	.word	0x40013400

08003484 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b090      	sub	sp, #64	; 0x40
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800348c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a2:	d14f      	bne.n	8003544 <HAL_TIM_Encoder_MspInit+0xc0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034a4:	4b68      	ldr	r3, [pc, #416]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	4a67      	ldr	r2, [pc, #412]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	61d3      	str	r3, [r2, #28]
 80034b0:	4b65      	ldr	r3, [pc, #404]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ba:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034bc:	4b62      	ldr	r3, [pc, #392]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	4a61      	ldr	r2, [pc, #388]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034c2:	f043 0304 	orr.w	r3, r3, #4
 80034c6:	6193      	str	r3, [r2, #24]
 80034c8:	4b5f      	ldr	r3, [pc, #380]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	627b      	str	r3, [r7, #36]	; 0x24
 80034d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034d4:	4b5c      	ldr	r3, [pc, #368]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034d6:	699b      	ldr	r3, [r3, #24]
 80034d8:	4a5b      	ldr	r2, [pc, #364]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034da:	f043 0308 	orr.w	r3, r3, #8
 80034de:	6193      	str	r3, [r2, #24]
 80034e0:	4b59      	ldr	r3, [pc, #356]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	f003 0308 	and.w	r3, r3, #8
 80034e8:	623b      	str	r3, [r7, #32]
 80034ea:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80034ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f2:	2300      	movs	r3, #0
 80034f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	2300      	movs	r3, #0
 80034f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034fe:	4619      	mov	r1, r3
 8003500:	4852      	ldr	r0, [pc, #328]	; (800364c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003502:	f001 f821 	bl	8004548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003506:	2308      	movs	r3, #8
 8003508:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800350a:	2300      	movs	r3, #0
 800350c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350e:	2300      	movs	r3, #0
 8003510:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003516:	4619      	mov	r1, r3
 8003518:	484d      	ldr	r0, [pc, #308]	; (8003650 <HAL_TIM_Encoder_MspInit+0x1cc>)
 800351a:	f001 f815 	bl	8004548 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800351e:	4b4d      	ldr	r3, [pc, #308]	; (8003654 <HAL_TIM_Encoder_MspInit+0x1d0>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800352c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800353c:	4a45      	ldr	r2, [pc, #276]	; (8003654 <HAL_TIM_Encoder_MspInit+0x1d0>)
 800353e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003540:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003542:	e07c      	b.n	800363e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM3)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a43      	ldr	r2, [pc, #268]	; (8003658 <HAL_TIM_Encoder_MspInit+0x1d4>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d124      	bne.n	8003598 <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800354e:	4b3e      	ldr	r3, [pc, #248]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	4a3d      	ldr	r2, [pc, #244]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003554:	f043 0302 	orr.w	r3, r3, #2
 8003558:	61d3      	str	r3, [r2, #28]
 800355a:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	61fb      	str	r3, [r7, #28]
 8003564:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003566:	4b38      	ldr	r3, [pc, #224]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	4a37      	ldr	r2, [pc, #220]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800356c:	f043 0304 	orr.w	r3, r3, #4
 8003570:	6193      	str	r3, [r2, #24]
 8003572:	4b35      	ldr	r3, [pc, #212]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800357e:	23c0      	movs	r3, #192	; 0xc0
 8003580:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003582:	2300      	movs	r3, #0
 8003584:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800358e:	4619      	mov	r1, r3
 8003590:	482e      	ldr	r0, [pc, #184]	; (800364c <HAL_TIM_Encoder_MspInit+0x1c8>)
 8003592:	f000 ffd9 	bl	8004548 <HAL_GPIO_Init>
}
 8003596:	e052      	b.n	800363e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM4)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a2f      	ldr	r2, [pc, #188]	; (800365c <HAL_TIM_Encoder_MspInit+0x1d8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d124      	bne.n	80035ec <HAL_TIM_Encoder_MspInit+0x168>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80035a2:	4b29      	ldr	r3, [pc, #164]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	4a28      	ldr	r2, [pc, #160]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035a8:	f043 0304 	orr.w	r3, r3, #4
 80035ac:	61d3      	str	r3, [r2, #28]
 80035ae:	4b26      	ldr	r3, [pc, #152]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	617b      	str	r3, [r7, #20]
 80035b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ba:	4b23      	ldr	r3, [pc, #140]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	4a22      	ldr	r2, [pc, #136]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035c0:	f043 0308 	orr.w	r3, r3, #8
 80035c4:	6193      	str	r3, [r2, #24]
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	613b      	str	r3, [r7, #16]
 80035d0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035d2:	23c0      	movs	r3, #192	; 0xc0
 80035d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035d6:	2300      	movs	r3, #0
 80035d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035e2:	4619      	mov	r1, r3
 80035e4:	481a      	ldr	r0, [pc, #104]	; (8003650 <HAL_TIM_Encoder_MspInit+0x1cc>)
 80035e6:	f000 ffaf 	bl	8004548 <HAL_GPIO_Init>
}
 80035ea:	e028      	b.n	800363e <HAL_TIM_Encoder_MspInit+0x1ba>
  else if(htim_encoder->Instance==TIM5)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a1b      	ldr	r2, [pc, #108]	; (8003660 <HAL_TIM_Encoder_MspInit+0x1dc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d123      	bne.n	800363e <HAL_TIM_Encoder_MspInit+0x1ba>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80035f6:	4b14      	ldr	r3, [pc, #80]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4a13      	ldr	r2, [pc, #76]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 80035fc:	f043 0308 	orr.w	r3, r3, #8
 8003600:	61d3      	str	r3, [r2, #28]
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	4a0d      	ldr	r2, [pc, #52]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 8003614:	f043 0304 	orr.w	r3, r3, #4
 8003618:	6193      	str	r3, [r2, #24]
 800361a:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <HAL_TIM_Encoder_MspInit+0x1c4>)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003626:	2303      	movs	r3, #3
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800362a:	2300      	movs	r3, #0
 800362c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003632:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003636:	4619      	mov	r1, r3
 8003638:	4804      	ldr	r0, [pc, #16]	; (800364c <HAL_TIM_Encoder_MspInit+0x1c8>)
 800363a:	f000 ff85 	bl	8004548 <HAL_GPIO_Init>
}
 800363e:	bf00      	nop
 8003640:	3740      	adds	r7, #64	; 0x40
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	40021000 	.word	0x40021000
 800364c:	40010800 	.word	0x40010800
 8003650:	40010c00 	.word	0x40010c00
 8003654:	40010000 	.word	0x40010000
 8003658:	40000400 	.word	0x40000400
 800365c:	40000800 	.word	0x40000800
 8003660:	40000c00 	.word	0x40000c00

08003664 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800366c:	f107 0310 	add.w	r3, r7, #16
 8003670:	2200      	movs	r2, #0
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	605a      	str	r2, [r3, #4]
 8003676:	609a      	str	r2, [r3, #8]
 8003678:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <HAL_TIM_MspPostInit+0x98>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d119      	bne.n	80036b8 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003684:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <HAL_TIM_MspPostInit+0x9c>)
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	4a1d      	ldr	r2, [pc, #116]	; (8003700 <HAL_TIM_MspPostInit+0x9c>)
 800368a:	f043 0304 	orr.w	r3, r3, #4
 800368e:	6193      	str	r3, [r2, #24]
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <HAL_TIM_MspPostInit+0x9c>)
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	f003 0304 	and.w	r3, r3, #4
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800369c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80036a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a2:	2302      	movs	r3, #2
 80036a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a6:	2302      	movs	r3, #2
 80036a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036aa:	f107 0310 	add.w	r3, r7, #16
 80036ae:	4619      	mov	r1, r3
 80036b0:	4814      	ldr	r0, [pc, #80]	; (8003704 <HAL_TIM_MspPostInit+0xa0>)
 80036b2:	f000 ff49 	bl	8004548 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80036b6:	e01d      	b.n	80036f4 <HAL_TIM_MspPostInit+0x90>
  else if(htim->Instance==TIM8)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a12      	ldr	r2, [pc, #72]	; (8003708 <HAL_TIM_MspPostInit+0xa4>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d118      	bne.n	80036f4 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80036c2:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <HAL_TIM_MspPostInit+0x9c>)
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	4a0e      	ldr	r2, [pc, #56]	; (8003700 <HAL_TIM_MspPostInit+0x9c>)
 80036c8:	f043 0310 	orr.w	r3, r3, #16
 80036cc:	6193      	str	r3, [r2, #24]
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <HAL_TIM_MspPostInit+0x9c>)
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	60bb      	str	r3, [r7, #8]
 80036d8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80036da:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80036de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e0:	2302      	movs	r3, #2
 80036e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e4:	2302      	movs	r3, #2
 80036e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036e8:	f107 0310 	add.w	r3, r7, #16
 80036ec:	4619      	mov	r1, r3
 80036ee:	4807      	ldr	r0, [pc, #28]	; (800370c <HAL_TIM_MspPostInit+0xa8>)
 80036f0:	f000 ff2a 	bl	8004548 <HAL_GPIO_Init>
}
 80036f4:	bf00      	nop
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40021000 	.word	0x40021000
 8003704:	40010800 	.word	0x40010800
 8003708:	40013400 	.word	0x40013400
 800370c:	40011000 	.word	0x40011000

08003710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08c      	sub	sp, #48	; 0x30
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	f107 031c 	add.w	r3, r7, #28
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	605a      	str	r2, [r3, #4]
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a66      	ldr	r2, [pc, #408]	; (80038c4 <HAL_UART_MspInit+0x1b4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d156      	bne.n	80037de <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003730:	4b65      	ldr	r3, [pc, #404]	; (80038c8 <HAL_UART_MspInit+0x1b8>)
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	4a64      	ldr	r2, [pc, #400]	; (80038c8 <HAL_UART_MspInit+0x1b8>)
 8003736:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373a:	61d3      	str	r3, [r2, #28]
 800373c:	4b62      	ldr	r3, [pc, #392]	; (80038c8 <HAL_UART_MspInit+0x1b8>)
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003744:	61bb      	str	r3, [r7, #24]
 8003746:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003748:	4b5f      	ldr	r3, [pc, #380]	; (80038c8 <HAL_UART_MspInit+0x1b8>)
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	4a5e      	ldr	r2, [pc, #376]	; (80038c8 <HAL_UART_MspInit+0x1b8>)
 800374e:	f043 0304 	orr.w	r3, r3, #4
 8003752:	6193      	str	r3, [r2, #24]
 8003754:	4b5c      	ldr	r3, [pc, #368]	; (80038c8 <HAL_UART_MspInit+0x1b8>)
 8003756:	699b      	ldr	r3, [r3, #24]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = XB_TX_Pin;
 8003760:	2304      	movs	r3, #4
 8003762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003764:	2302      	movs	r3, #2
 8003766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003768:	2303      	movs	r3, #3
 800376a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 800376c:	f107 031c 	add.w	r3, r7, #28
 8003770:	4619      	mov	r1, r3
 8003772:	4856      	ldr	r0, [pc, #344]	; (80038cc <HAL_UART_MspInit+0x1bc>)
 8003774:	f000 fee8 	bl	8004548 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = XB_RX_Pin;
 8003778:	2308      	movs	r3, #8
 800377a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800377c:	2300      	movs	r3, #0
 800377e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003780:	2300      	movs	r3, #0
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 8003784:	f107 031c 	add.w	r3, r7, #28
 8003788:	4619      	mov	r1, r3
 800378a:	4850      	ldr	r0, [pc, #320]	; (80038cc <HAL_UART_MspInit+0x1bc>)
 800378c:	f000 fedc 	bl	8004548 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003790:	4b4f      	ldr	r3, [pc, #316]	; (80038d0 <HAL_UART_MspInit+0x1c0>)
 8003792:	4a50      	ldr	r2, [pc, #320]	; (80038d4 <HAL_UART_MspInit+0x1c4>)
 8003794:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003796:	4b4e      	ldr	r3, [pc, #312]	; (80038d0 <HAL_UART_MspInit+0x1c0>)
 8003798:	2200      	movs	r2, #0
 800379a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800379c:	4b4c      	ldr	r3, [pc, #304]	; (80038d0 <HAL_UART_MspInit+0x1c0>)
 800379e:	2200      	movs	r2, #0
 80037a0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037a2:	4b4b      	ldr	r3, [pc, #300]	; (80038d0 <HAL_UART_MspInit+0x1c0>)
 80037a4:	2280      	movs	r2, #128	; 0x80
 80037a6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037a8:	4b49      	ldr	r3, [pc, #292]	; (80038d0 <HAL_UART_MspInit+0x1c0>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037ae:	4b48      	ldr	r3, [pc, #288]	; (80038d0 <HAL_UART_MspInit+0x1c0>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80037b4:	4b46      	ldr	r3, [pc, #280]	; (80038d0 <HAL_UART_MspInit+0x1c0>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037ba:	4b45      	ldr	r3, [pc, #276]	; (80038d0 <HAL_UART_MspInit+0x1c0>)
 80037bc:	2200      	movs	r2, #0
 80037be:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80037c0:	4843      	ldr	r0, [pc, #268]	; (80038d0 <HAL_UART_MspInit+0x1c0>)
 80037c2:	f000 fb81 	bl	8003ec8 <HAL_DMA_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80037cc:	f7ff fd84 	bl	80032d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a3f      	ldr	r2, [pc, #252]	; (80038d0 <HAL_UART_MspInit+0x1c0>)
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
 80037d6:	4a3e      	ldr	r2, [pc, #248]	; (80038d0 <HAL_UART_MspInit+0x1c0>)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80037dc:	e06e      	b.n	80038bc <HAL_UART_MspInit+0x1ac>
  else if(huart->Instance==USART3)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a3d      	ldr	r2, [pc, #244]	; (80038d8 <HAL_UART_MspInit+0x1c8>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d169      	bne.n	80038bc <HAL_UART_MspInit+0x1ac>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037e8:	4b37      	ldr	r3, [pc, #220]	; (80038c8 <HAL_UART_MspInit+0x1b8>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	4a36      	ldr	r2, [pc, #216]	; (80038c8 <HAL_UART_MspInit+0x1b8>)
 80037ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037f2:	61d3      	str	r3, [r2, #28]
 80037f4:	4b34      	ldr	r3, [pc, #208]	; (80038c8 <HAL_UART_MspInit+0x1b8>)
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003800:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <HAL_UART_MspInit+0x1b8>)
 8003802:	699b      	ldr	r3, [r3, #24]
 8003804:	4a30      	ldr	r2, [pc, #192]	; (80038c8 <HAL_UART_MspInit+0x1b8>)
 8003806:	f043 0310 	orr.w	r3, r3, #16
 800380a:	6193      	str	r3, [r2, #24]
 800380c:	4b2e      	ldr	r3, [pc, #184]	; (80038c8 <HAL_UART_MspInit+0x1b8>)
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	f003 0310 	and.w	r3, r3, #16
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = JY_TX_Pin;
 8003818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800381c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381e:	2302      	movs	r3, #2
 8003820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003822:	2303      	movs	r3, #3
 8003824:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(JY_TX_GPIO_Port, &GPIO_InitStruct);
 8003826:	f107 031c 	add.w	r3, r7, #28
 800382a:	4619      	mov	r1, r3
 800382c:	482b      	ldr	r0, [pc, #172]	; (80038dc <HAL_UART_MspInit+0x1cc>)
 800382e:	f000 fe8b 	bl	8004548 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = JY_RX_Pin;
 8003832:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003838:	2300      	movs	r3, #0
 800383a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800383c:	2300      	movs	r3, #0
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(JY_RX_GPIO_Port, &GPIO_InitStruct);
 8003840:	f107 031c 	add.w	r3, r7, #28
 8003844:	4619      	mov	r1, r3
 8003846:	4825      	ldr	r0, [pc, #148]	; (80038dc <HAL_UART_MspInit+0x1cc>)
 8003848:	f000 fe7e 	bl	8004548 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800384c:	4b24      	ldr	r3, [pc, #144]	; (80038e0 <HAL_UART_MspInit+0x1d0>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003854:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003864:	f043 0310 	orr.w	r3, r3, #16
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
 800386a:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <HAL_UART_MspInit+0x1d0>)
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800386e:	6053      	str	r3, [r2, #4]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8003870:	4b1c      	ldr	r3, [pc, #112]	; (80038e4 <HAL_UART_MspInit+0x1d4>)
 8003872:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <HAL_UART_MspInit+0x1d8>)
 8003874:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003876:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <HAL_UART_MspInit+0x1d4>)
 8003878:	2200      	movs	r2, #0
 800387a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800387c:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <HAL_UART_MspInit+0x1d4>)
 800387e:	2200      	movs	r2, #0
 8003880:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003882:	4b18      	ldr	r3, [pc, #96]	; (80038e4 <HAL_UART_MspInit+0x1d4>)
 8003884:	2280      	movs	r2, #128	; 0x80
 8003886:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003888:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <HAL_UART_MspInit+0x1d4>)
 800388a:	2200      	movs	r2, #0
 800388c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800388e:	4b15      	ldr	r3, [pc, #84]	; (80038e4 <HAL_UART_MspInit+0x1d4>)
 8003890:	2200      	movs	r2, #0
 8003892:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003894:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <HAL_UART_MspInit+0x1d4>)
 8003896:	2200      	movs	r2, #0
 8003898:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <HAL_UART_MspInit+0x1d4>)
 800389c:	2200      	movs	r2, #0
 800389e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80038a0:	4810      	ldr	r0, [pc, #64]	; (80038e4 <HAL_UART_MspInit+0x1d4>)
 80038a2:	f000 fb11 	bl	8003ec8 <HAL_DMA_Init>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 80038ac:	f7ff fd14 	bl	80032d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a0c      	ldr	r2, [pc, #48]	; (80038e4 <HAL_UART_MspInit+0x1d4>)
 80038b4:	639a      	str	r2, [r3, #56]	; 0x38
 80038b6:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <HAL_UART_MspInit+0x1d4>)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6253      	str	r3, [r2, #36]	; 0x24
}
 80038bc:	bf00      	nop
 80038be:	3730      	adds	r7, #48	; 0x30
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	40004400 	.word	0x40004400
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40010800 	.word	0x40010800
 80038d0:	20000904 	.word	0x20000904
 80038d4:	4002006c 	.word	0x4002006c
 80038d8:	40004800 	.word	0x40004800
 80038dc:	40011000 	.word	0x40011000
 80038e0:	40010000 	.word	0x40010000
 80038e4:	20000948 	.word	0x20000948
 80038e8:	40020030 	.word	0x40020030

080038ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80038f0:	e7fe      	b.n	80038f0 <NMI_Handler+0x4>

080038f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038f2:	b480      	push	{r7}
 80038f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038f6:	e7fe      	b.n	80038f6 <HardFault_Handler+0x4>

080038f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038fc:	e7fe      	b.n	80038fc <MemManage_Handler+0x4>

080038fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038fe:	b480      	push	{r7}
 8003900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003902:	e7fe      	b.n	8003902 <BusFault_Handler+0x4>

08003904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003908:	e7fe      	b.n	8003908 <UsageFault_Handler+0x4>

0800390a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800390a:	b480      	push	{r7}
 800390c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr

08003916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	46bd      	mov	sp, r7
 800391e:	bc80      	pop	{r7}
 8003920:	4770      	bx	lr

08003922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003922:	b480      	push	{r7}
 8003924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003926:	bf00      	nop
 8003928:	46bd      	mov	sp, r7
 800392a:	bc80      	pop	{r7}
 800392c:	4770      	bx	lr

0800392e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003932:	f000 f97b 	bl	8003c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003936:	bf00      	nop
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
	huansic_jy62_decodePackage(&himu);
 8003940:	4805      	ldr	r0, [pc, #20]	; (8003958 <DMA1_Channel3_IRQHandler+0x1c>)
 8003942:	f7fd fda9 	bl	8001498 <huansic_jy62_decodePackage>
  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003946:	4805      	ldr	r0, [pc, #20]	; (800395c <DMA1_Channel3_IRQHandler+0x20>)
 8003948:	f000 fb94 	bl	8004074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
	huansic_jy62_setDMA(&himu);
 800394c:	4802      	ldr	r0, [pc, #8]	; (8003958 <DMA1_Channel3_IRQHandler+0x1c>)
 800394e:	f7fd ffad 	bl	80018ac <huansic_jy62_setDMA>
  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003952:	bf00      	nop
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	20000a7c 	.word	0x20000a7c
 800395c:	20000948 	.word	0x20000948

08003960 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if (hxb.nextPackageID == 0x00)
 8003964:	4b07      	ldr	r3, [pc, #28]	; (8003984 <DMA1_Channel6_IRQHandler+0x24>)
 8003966:	7a1b      	ldrb	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d103      	bne.n	8003974 <DMA1_Channel6_IRQHandler+0x14>
		huansic_xb_decodeHeader(&hxb);
 800396c:	4805      	ldr	r0, [pc, #20]	; (8003984 <DMA1_Channel6_IRQHandler+0x24>)
 800396e:	f7fe fa2f 	bl	8001dd0 <huansic_xb_decodeHeader>
 8003972:	e002      	b.n	800397a <DMA1_Channel6_IRQHandler+0x1a>
	else
		huansic_xb_decodeBody(&hxb);
 8003974:	4803      	ldr	r0, [pc, #12]	; (8003984 <DMA1_Channel6_IRQHandler+0x24>)
 8003976:	f7fe fa69 	bl	8001e4c <huansic_xb_decodeBody>
  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800397a:	4803      	ldr	r0, [pc, #12]	; (8003988 <DMA1_Channel6_IRQHandler+0x28>)
 800397c:	f000 fb7a 	bl	8004074 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003980:	bf00      	nop
 8003982:	bd80      	pop	{r7, pc}
 8003984:	20000ab4 	.word	0x20000ab4
 8003988:	20000904 	.word	0x20000904

0800398c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */
	huansic_motor_pid(&cmotor_lf);
 8003990:	4808      	ldr	r0, [pc, #32]	; (80039b4 <TIM6_IRQHandler+0x28>)
 8003992:	f7fe f8d3 	bl	8001b3c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rf);
 8003996:	4808      	ldr	r0, [pc, #32]	; (80039b8 <TIM6_IRQHandler+0x2c>)
 8003998:	f7fe f8d0 	bl	8001b3c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_lb);
 800399c:	4807      	ldr	r0, [pc, #28]	; (80039bc <TIM6_IRQHandler+0x30>)
 800399e:	f7fe f8cd 	bl	8001b3c <huansic_motor_pid>
	huansic_motor_pid(&cmotor_rb);
 80039a2:	4807      	ldr	r0, [pc, #28]	; (80039c0 <TIM6_IRQHandler+0x34>)
 80039a4:	f7fe f8ca 	bl	8001b3c <huansic_motor_pid>
  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80039a8:	4806      	ldr	r0, [pc, #24]	; (80039c4 <TIM6_IRQHandler+0x38>)
 80039aa:	f001 ffcb 	bl	8005944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	2000098c 	.word	0x2000098c
 80039b8:	200009c8 	.word	0x200009c8
 80039bc:	20000a04 	.word	0x20000a04
 80039c0:	20000a40 	.word	0x20000a40
 80039c4:	200007ec 	.word	0x200007ec

080039c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
	return 1;
 80039cc:	2301      	movs	r3, #1
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <_kill>:

int _kill(int pid, int sig)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
 80039de:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039e0:	f003 f998 	bl	8006d14 <__errno>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2216      	movs	r2, #22
 80039e8:	601a      	str	r2, [r3, #0]
	return -1;
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <_exit>:

void _exit (int status)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b082      	sub	sp, #8
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80039fe:	f04f 31ff 	mov.w	r1, #4294967295
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff ffe7 	bl	80039d6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a08:	e7fe      	b.n	8003a08 <_exit+0x12>

08003a0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a0a:	b580      	push	{r7, lr}
 8003a0c:	b086      	sub	sp, #24
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	e00a      	b.n	8003a32 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a1c:	f3af 8000 	nop.w
 8003a20:	4601      	mov	r1, r0
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	60ba      	str	r2, [r7, #8]
 8003a28:	b2ca      	uxtb	r2, r1
 8003a2a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	dbf0      	blt.n	8003a1c <_read+0x12>
	}

return len;
 8003a3a:	687b      	ldr	r3, [r7, #4]
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3718      	adds	r7, #24
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b086      	sub	sp, #24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	e009      	b.n	8003a6a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	1c5a      	adds	r2, r3, #1
 8003a5a:	60ba      	str	r2, [r7, #8]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	3301      	adds	r3, #1
 8003a68:	617b      	str	r3, [r7, #20]
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	dbf1      	blt.n	8003a56 <_write+0x12>
	}
	return len;
 8003a72:	687b      	ldr	r3, [r7, #4]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3718      	adds	r7, #24
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <_close>:

int _close(int file)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
	return -1;
 8003a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bc80      	pop	{r7}
 8003a90:	4770      	bx	lr

08003a92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003aa2:	605a      	str	r2, [r3, #4]
	return 0;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bc80      	pop	{r7}
 8003aae:	4770      	bx	lr

08003ab0 <_isatty>:

int _isatty(int file)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	return 1;
 8003ab8:	2301      	movs	r3, #1
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
	return 0;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ae4:	4a14      	ldr	r2, [pc, #80]	; (8003b38 <_sbrk+0x5c>)
 8003ae6:	4b15      	ldr	r3, [pc, #84]	; (8003b3c <_sbrk+0x60>)
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <_sbrk+0x64>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d102      	bne.n	8003afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003af8:	4b11      	ldr	r3, [pc, #68]	; (8003b40 <_sbrk+0x64>)
 8003afa:	4a12      	ldr	r2, [pc, #72]	; (8003b44 <_sbrk+0x68>)
 8003afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003afe:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <_sbrk+0x64>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4413      	add	r3, r2
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d207      	bcs.n	8003b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b0c:	f003 f902 	bl	8006d14 <__errno>
 8003b10:	4603      	mov	r3, r0
 8003b12:	220c      	movs	r2, #12
 8003b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1a:	e009      	b.n	8003b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <_sbrk+0x64>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b22:	4b07      	ldr	r3, [pc, #28]	; (8003b40 <_sbrk+0x64>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	4a05      	ldr	r2, [pc, #20]	; (8003b40 <_sbrk+0x64>)
 8003b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	2000c000 	.word	0x2000c000
 8003b3c:	00000400 	.word	0x00000400
 8003b40:	20000bf0 	.word	0x20000bf0
 8003b44:	20000c08 	.word	0x20000c08

08003b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr

08003b54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b54:	480c      	ldr	r0, [pc, #48]	; (8003b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b56:	490d      	ldr	r1, [pc, #52]	; (8003b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b58:	4a0d      	ldr	r2, [pc, #52]	; (8003b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b5c:	e002      	b.n	8003b64 <LoopCopyDataInit>

08003b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b62:	3304      	adds	r3, #4

08003b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b68:	d3f9      	bcc.n	8003b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b6c:	4c0a      	ldr	r4, [pc, #40]	; (8003b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b70:	e001      	b.n	8003b76 <LoopFillZerobss>

08003b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b74:	3204      	adds	r2, #4

08003b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b78:	d3fb      	bcc.n	8003b72 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003b7a:	f7ff ffe5 	bl	8003b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b7e:	f003 f8e1 	bl	8006d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003b82:	f7fe fe21 	bl	80027c8 <main>
  bx lr
 8003b86:	4770      	bx	lr
  ldr r0, =_sdata
 8003b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b8c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003b90:	08009158 	.word	0x08009158
  ldr r2, =_sbss
 8003b94:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003b98:	20000c08 	.word	0x20000c08

08003b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003b9c:	e7fe      	b.n	8003b9c <ADC1_2_IRQHandler>
	...

08003ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_Init+0x28>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <HAL_Init+0x28>)
 8003baa:	f043 0310 	orr.w	r3, r3, #16
 8003bae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bb0:	2003      	movs	r0, #3
 8003bb2:	f000 f947 	bl	8003e44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bb6:	200f      	movs	r0, #15
 8003bb8:	f000 f808 	bl	8003bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bbc:	f7ff fb92 	bl	80032e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40022000 	.word	0x40022000

08003bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bd4:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <HAL_InitTick+0x54>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <HAL_InitTick+0x58>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f95f 	bl	8003eae <HAL_SYSTICK_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e00e      	b.n	8003c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b0f      	cmp	r3, #15
 8003bfe:	d80a      	bhi.n	8003c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c00:	2200      	movs	r2, #0
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	f04f 30ff 	mov.w	r0, #4294967295
 8003c08:	f000 f927 	bl	8003e5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c0c:	4a06      	ldr	r2, [pc, #24]	; (8003c28 <HAL_InitTick+0x5c>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e000      	b.n	8003c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000004 	.word	0x20000004
 8003c24:	2000000c 	.word	0x2000000c
 8003c28:	20000008 	.word	0x20000008

08003c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_IncTick+0x1c>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b05      	ldr	r3, [pc, #20]	; (8003c4c <HAL_IncTick+0x20>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a03      	ldr	r2, [pc, #12]	; (8003c4c <HAL_IncTick+0x20>)
 8003c3e:	6013      	str	r3, [r2, #0]
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	2000000c 	.word	0x2000000c
 8003c4c:	20000bf4 	.word	0x20000bf4

08003c50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return uwTick;
 8003c54:	4b02      	ldr	r3, [pc, #8]	; (8003c60 <HAL_GetTick+0x10>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	20000bf4 	.word	0x20000bf4

08003c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c6c:	f7ff fff0 	bl	8003c50 <HAL_GetTick>
 8003c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d005      	beq.n	8003c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c7e:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <HAL_Delay+0x44>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	461a      	mov	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c8a:	bf00      	nop
 8003c8c:	f7ff ffe0 	bl	8003c50 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d8f7      	bhi.n	8003c8c <HAL_Delay+0x28>
  {
  }
}
 8003c9c:	bf00      	nop
 8003c9e:	bf00      	nop
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	2000000c 	.word	0x2000000c

08003cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cde:	4a04      	ldr	r2, [pc, #16]	; (8003cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	60d3      	str	r3, [r2, #12]
}
 8003ce4:	bf00      	nop
 8003ce6:	3714      	adds	r7, #20
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <__NVIC_GetPriorityGrouping+0x18>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	0a1b      	lsrs	r3, r3, #8
 8003cfe:	f003 0307 	and.w	r3, r3, #7
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	e000ed00 	.word	0xe000ed00

08003d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	db0b      	blt.n	8003d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d22:	79fb      	ldrb	r3, [r7, #7]
 8003d24:	f003 021f 	and.w	r2, r3, #31
 8003d28:	4906      	ldr	r1, [pc, #24]	; (8003d44 <__NVIC_EnableIRQ+0x34>)
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	2001      	movs	r0, #1
 8003d32:	fa00 f202 	lsl.w	r2, r0, r2
 8003d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr
 8003d44:	e000e100 	.word	0xe000e100

08003d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	6039      	str	r1, [r7, #0]
 8003d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	db0a      	blt.n	8003d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	490c      	ldr	r1, [pc, #48]	; (8003d94 <__NVIC_SetPriority+0x4c>)
 8003d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d66:	0112      	lsls	r2, r2, #4
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	440b      	add	r3, r1
 8003d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d70:	e00a      	b.n	8003d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	4908      	ldr	r1, [pc, #32]	; (8003d98 <__NVIC_SetPriority+0x50>)
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	3b04      	subs	r3, #4
 8003d80:	0112      	lsls	r2, r2, #4
 8003d82:	b2d2      	uxtb	r2, r2
 8003d84:	440b      	add	r3, r1
 8003d86:	761a      	strb	r2, [r3, #24]
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	e000e100 	.word	0xe000e100
 8003d98:	e000ed00 	.word	0xe000ed00

08003d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	; 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f1c3 0307 	rsb	r3, r3, #7
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	bf28      	it	cs
 8003dba:	2304      	movcs	r3, #4
 8003dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	2b06      	cmp	r3, #6
 8003dc4:	d902      	bls.n	8003dcc <NVIC_EncodePriority+0x30>
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	3b03      	subs	r3, #3
 8003dca:	e000      	b.n	8003dce <NVIC_EncodePriority+0x32>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	43da      	mvns	r2, r3
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	401a      	ands	r2, r3
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003de4:	f04f 31ff 	mov.w	r1, #4294967295
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	fa01 f303 	lsl.w	r3, r1, r3
 8003dee:	43d9      	mvns	r1, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df4:	4313      	orrs	r3, r2
         );
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3724      	adds	r7, #36	; 0x24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bc80      	pop	{r7}
 8003dfe:	4770      	bx	lr

08003e00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e10:	d301      	bcc.n	8003e16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e12:	2301      	movs	r3, #1
 8003e14:	e00f      	b.n	8003e36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e16:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <SysTick_Config+0x40>)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e1e:	210f      	movs	r1, #15
 8003e20:	f04f 30ff 	mov.w	r0, #4294967295
 8003e24:	f7ff ff90 	bl	8003d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e28:	4b05      	ldr	r3, [pc, #20]	; (8003e40 <SysTick_Config+0x40>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e2e:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <SysTick_Config+0x40>)
 8003e30:	2207      	movs	r2, #7
 8003e32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	e000e010 	.word	0xe000e010

08003e44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff2d 	bl	8003cac <__NVIC_SetPriorityGrouping>
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b086      	sub	sp, #24
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	4603      	mov	r3, r0
 8003e62:	60b9      	str	r1, [r7, #8]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e6c:	f7ff ff42 	bl	8003cf4 <__NVIC_GetPriorityGrouping>
 8003e70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	6978      	ldr	r0, [r7, #20]
 8003e78:	f7ff ff90 	bl	8003d9c <NVIC_EncodePriority>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff ff5f 	bl	8003d48 <__NVIC_SetPriority>
}
 8003e8a:	bf00      	nop
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	4603      	mov	r3, r0
 8003e9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f7ff ff35 	bl	8003d10 <__NVIC_EnableIRQ>
}
 8003ea6:	bf00      	nop
 8003ea8:	3708      	adds	r7, #8
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}

08003eae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b082      	sub	sp, #8
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f7ff ffa2 	bl	8003e00 <SysTick_Config>
 8003ebc:	4603      	mov	r3, r0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e059      	b.n	8003f92 <HAL_DMA_Init+0xca>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <HAL_DMA_Init+0xd4>)
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d80f      	bhi.n	8003f0a <HAL_DMA_Init+0x42>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	461a      	mov	r2, r3
 8003ef0:	4b2b      	ldr	r3, [pc, #172]	; (8003fa0 <HAL_DMA_Init+0xd8>)
 8003ef2:	4413      	add	r3, r2
 8003ef4:	4a2b      	ldr	r2, [pc, #172]	; (8003fa4 <HAL_DMA_Init+0xdc>)
 8003ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8003efa:	091b      	lsrs	r3, r3, #4
 8003efc:	009a      	lsls	r2, r3, #2
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a28      	ldr	r2, [pc, #160]	; (8003fa8 <HAL_DMA_Init+0xe0>)
 8003f06:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f08:	e00e      	b.n	8003f28 <HAL_DMA_Init+0x60>
  }
  else 
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b26      	ldr	r3, [pc, #152]	; (8003fac <HAL_DMA_Init+0xe4>)
 8003f12:	4413      	add	r3, r2
 8003f14:	4a23      	ldr	r2, [pc, #140]	; (8003fa4 <HAL_DMA_Init+0xdc>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	091b      	lsrs	r3, r3, #4
 8003f1c:	009a      	lsls	r2, r3, #2
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a22      	ldr	r2, [pc, #136]	; (8003fb0 <HAL_DMA_Init+0xe8>)
 8003f26:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003f3e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003f42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	69db      	ldr	r3, [r3, #28]
 8003f6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bc80      	pop	{r7}
 8003f9a:	4770      	bx	lr
 8003f9c:	40020407 	.word	0x40020407
 8003fa0:	bffdfff8 	.word	0xbffdfff8
 8003fa4:	cccccccd 	.word	0xcccccccd
 8003fa8:	40020000 	.word	0x40020000
 8003fac:	bffdfbf8 	.word	0xbffdfbf8
 8003fb0:	40020400 	.word	0x40020400

08003fb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	607a      	str	r2, [r7, #4]
 8003fc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d101      	bne.n	8003fd4 <HAL_DMA_Start_IT+0x20>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e04a      	b.n	800406a <HAL_DMA_Start_IT+0xb6>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d13a      	bne.n	800405c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	68b9      	ldr	r1, [r7, #8]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 fa6e 	bl	80044ec <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 020e 	orr.w	r2, r2, #14
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	e00f      	b.n	800404a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 0204 	bic.w	r2, r2, #4
 8004038:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f042 020a 	orr.w	r2, r2, #10
 8004048:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0201 	orr.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	e005      	b.n	8004068 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004064:	2302      	movs	r3, #2
 8004066:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004068:	7dfb      	ldrb	r3, [r7, #23]
}
 800406a:	4618      	mov	r0, r3
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
	...

08004074 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	2204      	movs	r2, #4
 8004092:	409a      	lsls	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80f1 	beq.w	8004280 <HAL_DMA_IRQHandler+0x20c>
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80eb 	beq.w	8004280 <HAL_DMA_IRQHandler+0x20c>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d107      	bne.n	80040c8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0204 	bic.w	r2, r2, #4
 80040c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b5f      	ldr	r3, [pc, #380]	; (800424c <HAL_DMA_IRQHandler+0x1d8>)
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d958      	bls.n	8004186 <HAL_DMA_IRQHandler+0x112>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a5d      	ldr	r2, [pc, #372]	; (8004250 <HAL_DMA_IRQHandler+0x1dc>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d04f      	beq.n	800417e <HAL_DMA_IRQHandler+0x10a>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a5c      	ldr	r2, [pc, #368]	; (8004254 <HAL_DMA_IRQHandler+0x1e0>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d048      	beq.n	800417a <HAL_DMA_IRQHandler+0x106>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a5a      	ldr	r2, [pc, #360]	; (8004258 <HAL_DMA_IRQHandler+0x1e4>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d040      	beq.n	8004174 <HAL_DMA_IRQHandler+0x100>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a59      	ldr	r2, [pc, #356]	; (800425c <HAL_DMA_IRQHandler+0x1e8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d038      	beq.n	800416e <HAL_DMA_IRQHandler+0xfa>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a57      	ldr	r2, [pc, #348]	; (8004260 <HAL_DMA_IRQHandler+0x1ec>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d030      	beq.n	8004168 <HAL_DMA_IRQHandler+0xf4>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a56      	ldr	r2, [pc, #344]	; (8004264 <HAL_DMA_IRQHandler+0x1f0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d028      	beq.n	8004162 <HAL_DMA_IRQHandler+0xee>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a4d      	ldr	r2, [pc, #308]	; (800424c <HAL_DMA_IRQHandler+0x1d8>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d020      	beq.n	800415c <HAL_DMA_IRQHandler+0xe8>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a52      	ldr	r2, [pc, #328]	; (8004268 <HAL_DMA_IRQHandler+0x1f4>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d019      	beq.n	8004158 <HAL_DMA_IRQHandler+0xe4>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a50      	ldr	r2, [pc, #320]	; (800426c <HAL_DMA_IRQHandler+0x1f8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d012      	beq.n	8004154 <HAL_DMA_IRQHandler+0xe0>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a4f      	ldr	r2, [pc, #316]	; (8004270 <HAL_DMA_IRQHandler+0x1fc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00a      	beq.n	800414e <HAL_DMA_IRQHandler+0xda>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a4d      	ldr	r2, [pc, #308]	; (8004274 <HAL_DMA_IRQHandler+0x200>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d102      	bne.n	8004148 <HAL_DMA_IRQHandler+0xd4>
 8004142:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004146:	e01b      	b.n	8004180 <HAL_DMA_IRQHandler+0x10c>
 8004148:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800414c:	e018      	b.n	8004180 <HAL_DMA_IRQHandler+0x10c>
 800414e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004152:	e015      	b.n	8004180 <HAL_DMA_IRQHandler+0x10c>
 8004154:	2340      	movs	r3, #64	; 0x40
 8004156:	e013      	b.n	8004180 <HAL_DMA_IRQHandler+0x10c>
 8004158:	2304      	movs	r3, #4
 800415a:	e011      	b.n	8004180 <HAL_DMA_IRQHandler+0x10c>
 800415c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004160:	e00e      	b.n	8004180 <HAL_DMA_IRQHandler+0x10c>
 8004162:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004166:	e00b      	b.n	8004180 <HAL_DMA_IRQHandler+0x10c>
 8004168:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800416c:	e008      	b.n	8004180 <HAL_DMA_IRQHandler+0x10c>
 800416e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004172:	e005      	b.n	8004180 <HAL_DMA_IRQHandler+0x10c>
 8004174:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004178:	e002      	b.n	8004180 <HAL_DMA_IRQHandler+0x10c>
 800417a:	2340      	movs	r3, #64	; 0x40
 800417c:	e000      	b.n	8004180 <HAL_DMA_IRQHandler+0x10c>
 800417e:	2304      	movs	r3, #4
 8004180:	4a3d      	ldr	r2, [pc, #244]	; (8004278 <HAL_DMA_IRQHandler+0x204>)
 8004182:	6053      	str	r3, [r2, #4]
 8004184:	e057      	b.n	8004236 <HAL_DMA_IRQHandler+0x1c2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a31      	ldr	r2, [pc, #196]	; (8004250 <HAL_DMA_IRQHandler+0x1dc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d04f      	beq.n	8004230 <HAL_DMA_IRQHandler+0x1bc>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <HAL_DMA_IRQHandler+0x1e0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d048      	beq.n	800422c <HAL_DMA_IRQHandler+0x1b8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a2e      	ldr	r2, [pc, #184]	; (8004258 <HAL_DMA_IRQHandler+0x1e4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d040      	beq.n	8004226 <HAL_DMA_IRQHandler+0x1b2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a2c      	ldr	r2, [pc, #176]	; (800425c <HAL_DMA_IRQHandler+0x1e8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d038      	beq.n	8004220 <HAL_DMA_IRQHandler+0x1ac>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a2b      	ldr	r2, [pc, #172]	; (8004260 <HAL_DMA_IRQHandler+0x1ec>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d030      	beq.n	800421a <HAL_DMA_IRQHandler+0x1a6>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a29      	ldr	r2, [pc, #164]	; (8004264 <HAL_DMA_IRQHandler+0x1f0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d028      	beq.n	8004214 <HAL_DMA_IRQHandler+0x1a0>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a21      	ldr	r2, [pc, #132]	; (800424c <HAL_DMA_IRQHandler+0x1d8>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d020      	beq.n	800420e <HAL_DMA_IRQHandler+0x19a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a25      	ldr	r2, [pc, #148]	; (8004268 <HAL_DMA_IRQHandler+0x1f4>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d019      	beq.n	800420a <HAL_DMA_IRQHandler+0x196>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a24      	ldr	r2, [pc, #144]	; (800426c <HAL_DMA_IRQHandler+0x1f8>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d012      	beq.n	8004206 <HAL_DMA_IRQHandler+0x192>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a22      	ldr	r2, [pc, #136]	; (8004270 <HAL_DMA_IRQHandler+0x1fc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00a      	beq.n	8004200 <HAL_DMA_IRQHandler+0x18c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a21      	ldr	r2, [pc, #132]	; (8004274 <HAL_DMA_IRQHandler+0x200>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d102      	bne.n	80041fa <HAL_DMA_IRQHandler+0x186>
 80041f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041f8:	e01b      	b.n	8004232 <HAL_DMA_IRQHandler+0x1be>
 80041fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80041fe:	e018      	b.n	8004232 <HAL_DMA_IRQHandler+0x1be>
 8004200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004204:	e015      	b.n	8004232 <HAL_DMA_IRQHandler+0x1be>
 8004206:	2340      	movs	r3, #64	; 0x40
 8004208:	e013      	b.n	8004232 <HAL_DMA_IRQHandler+0x1be>
 800420a:	2304      	movs	r3, #4
 800420c:	e011      	b.n	8004232 <HAL_DMA_IRQHandler+0x1be>
 800420e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004212:	e00e      	b.n	8004232 <HAL_DMA_IRQHandler+0x1be>
 8004214:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004218:	e00b      	b.n	8004232 <HAL_DMA_IRQHandler+0x1be>
 800421a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800421e:	e008      	b.n	8004232 <HAL_DMA_IRQHandler+0x1be>
 8004220:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004224:	e005      	b.n	8004232 <HAL_DMA_IRQHandler+0x1be>
 8004226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800422a:	e002      	b.n	8004232 <HAL_DMA_IRQHandler+0x1be>
 800422c:	2340      	movs	r3, #64	; 0x40
 800422e:	e000      	b.n	8004232 <HAL_DMA_IRQHandler+0x1be>
 8004230:	2304      	movs	r3, #4
 8004232:	4a12      	ldr	r2, [pc, #72]	; (800427c <HAL_DMA_IRQHandler+0x208>)
 8004234:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 8136 	beq.w	80044ac <HAL_DMA_IRQHandler+0x438>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8004248:	e130      	b.n	80044ac <HAL_DMA_IRQHandler+0x438>
 800424a:	bf00      	nop
 800424c:	40020080 	.word	0x40020080
 8004250:	40020008 	.word	0x40020008
 8004254:	4002001c 	.word	0x4002001c
 8004258:	40020030 	.word	0x40020030
 800425c:	40020044 	.word	0x40020044
 8004260:	40020058 	.word	0x40020058
 8004264:	4002006c 	.word	0x4002006c
 8004268:	40020408 	.word	0x40020408
 800426c:	4002041c 	.word	0x4002041c
 8004270:	40020430 	.word	0x40020430
 8004274:	40020444 	.word	0x40020444
 8004278:	40020400 	.word	0x40020400
 800427c:	40020000 	.word	0x40020000
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	2202      	movs	r2, #2
 8004286:	409a      	lsls	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80dd 	beq.w	800444c <HAL_DMA_IRQHandler+0x3d8>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 80d7 	beq.w	800444c <HAL_DMA_IRQHandler+0x3d8>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0320 	and.w	r3, r3, #32
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d10b      	bne.n	80042c4 <HAL_DMA_IRQHandler+0x250>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f022 020a 	bic.w	r2, r2, #10
 80042ba:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	4b7b      	ldr	r3, [pc, #492]	; (80044b8 <HAL_DMA_IRQHandler+0x444>)
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d958      	bls.n	8004382 <HAL_DMA_IRQHandler+0x30e>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a79      	ldr	r2, [pc, #484]	; (80044bc <HAL_DMA_IRQHandler+0x448>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d04f      	beq.n	800437a <HAL_DMA_IRQHandler+0x306>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a78      	ldr	r2, [pc, #480]	; (80044c0 <HAL_DMA_IRQHandler+0x44c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d048      	beq.n	8004376 <HAL_DMA_IRQHandler+0x302>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a76      	ldr	r2, [pc, #472]	; (80044c4 <HAL_DMA_IRQHandler+0x450>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d040      	beq.n	8004370 <HAL_DMA_IRQHandler+0x2fc>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a75      	ldr	r2, [pc, #468]	; (80044c8 <HAL_DMA_IRQHandler+0x454>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d038      	beq.n	800436a <HAL_DMA_IRQHandler+0x2f6>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a73      	ldr	r2, [pc, #460]	; (80044cc <HAL_DMA_IRQHandler+0x458>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d030      	beq.n	8004364 <HAL_DMA_IRQHandler+0x2f0>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a72      	ldr	r2, [pc, #456]	; (80044d0 <HAL_DMA_IRQHandler+0x45c>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d028      	beq.n	800435e <HAL_DMA_IRQHandler+0x2ea>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a69      	ldr	r2, [pc, #420]	; (80044b8 <HAL_DMA_IRQHandler+0x444>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d020      	beq.n	8004358 <HAL_DMA_IRQHandler+0x2e4>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a6e      	ldr	r2, [pc, #440]	; (80044d4 <HAL_DMA_IRQHandler+0x460>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d019      	beq.n	8004354 <HAL_DMA_IRQHandler+0x2e0>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a6c      	ldr	r2, [pc, #432]	; (80044d8 <HAL_DMA_IRQHandler+0x464>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d012      	beq.n	8004350 <HAL_DMA_IRQHandler+0x2dc>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a6b      	ldr	r2, [pc, #428]	; (80044dc <HAL_DMA_IRQHandler+0x468>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d00a      	beq.n	800434a <HAL_DMA_IRQHandler+0x2d6>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a69      	ldr	r2, [pc, #420]	; (80044e0 <HAL_DMA_IRQHandler+0x46c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d102      	bne.n	8004344 <HAL_DMA_IRQHandler+0x2d0>
 800433e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004342:	e01b      	b.n	800437c <HAL_DMA_IRQHandler+0x308>
 8004344:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004348:	e018      	b.n	800437c <HAL_DMA_IRQHandler+0x308>
 800434a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800434e:	e015      	b.n	800437c <HAL_DMA_IRQHandler+0x308>
 8004350:	2320      	movs	r3, #32
 8004352:	e013      	b.n	800437c <HAL_DMA_IRQHandler+0x308>
 8004354:	2302      	movs	r3, #2
 8004356:	e011      	b.n	800437c <HAL_DMA_IRQHandler+0x308>
 8004358:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800435c:	e00e      	b.n	800437c <HAL_DMA_IRQHandler+0x308>
 800435e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004362:	e00b      	b.n	800437c <HAL_DMA_IRQHandler+0x308>
 8004364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004368:	e008      	b.n	800437c <HAL_DMA_IRQHandler+0x308>
 800436a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800436e:	e005      	b.n	800437c <HAL_DMA_IRQHandler+0x308>
 8004370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004374:	e002      	b.n	800437c <HAL_DMA_IRQHandler+0x308>
 8004376:	2320      	movs	r3, #32
 8004378:	e000      	b.n	800437c <HAL_DMA_IRQHandler+0x308>
 800437a:	2302      	movs	r3, #2
 800437c:	4a59      	ldr	r2, [pc, #356]	; (80044e4 <HAL_DMA_IRQHandler+0x470>)
 800437e:	6053      	str	r3, [r2, #4]
 8004380:	e057      	b.n	8004432 <HAL_DMA_IRQHandler+0x3be>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a4d      	ldr	r2, [pc, #308]	; (80044bc <HAL_DMA_IRQHandler+0x448>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d04f      	beq.n	800442c <HAL_DMA_IRQHandler+0x3b8>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a4b      	ldr	r2, [pc, #300]	; (80044c0 <HAL_DMA_IRQHandler+0x44c>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d048      	beq.n	8004428 <HAL_DMA_IRQHandler+0x3b4>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a4a      	ldr	r2, [pc, #296]	; (80044c4 <HAL_DMA_IRQHandler+0x450>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d040      	beq.n	8004422 <HAL_DMA_IRQHandler+0x3ae>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a48      	ldr	r2, [pc, #288]	; (80044c8 <HAL_DMA_IRQHandler+0x454>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d038      	beq.n	800441c <HAL_DMA_IRQHandler+0x3a8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a47      	ldr	r2, [pc, #284]	; (80044cc <HAL_DMA_IRQHandler+0x458>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d030      	beq.n	8004416 <HAL_DMA_IRQHandler+0x3a2>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a45      	ldr	r2, [pc, #276]	; (80044d0 <HAL_DMA_IRQHandler+0x45c>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d028      	beq.n	8004410 <HAL_DMA_IRQHandler+0x39c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a3d      	ldr	r2, [pc, #244]	; (80044b8 <HAL_DMA_IRQHandler+0x444>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d020      	beq.n	800440a <HAL_DMA_IRQHandler+0x396>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a41      	ldr	r2, [pc, #260]	; (80044d4 <HAL_DMA_IRQHandler+0x460>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d019      	beq.n	8004406 <HAL_DMA_IRQHandler+0x392>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a40      	ldr	r2, [pc, #256]	; (80044d8 <HAL_DMA_IRQHandler+0x464>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d012      	beq.n	8004402 <HAL_DMA_IRQHandler+0x38e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a3e      	ldr	r2, [pc, #248]	; (80044dc <HAL_DMA_IRQHandler+0x468>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00a      	beq.n	80043fc <HAL_DMA_IRQHandler+0x388>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a3d      	ldr	r2, [pc, #244]	; (80044e0 <HAL_DMA_IRQHandler+0x46c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d102      	bne.n	80043f6 <HAL_DMA_IRQHandler+0x382>
 80043f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043f4:	e01b      	b.n	800442e <HAL_DMA_IRQHandler+0x3ba>
 80043f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80043fa:	e018      	b.n	800442e <HAL_DMA_IRQHandler+0x3ba>
 80043fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004400:	e015      	b.n	800442e <HAL_DMA_IRQHandler+0x3ba>
 8004402:	2320      	movs	r3, #32
 8004404:	e013      	b.n	800442e <HAL_DMA_IRQHandler+0x3ba>
 8004406:	2302      	movs	r3, #2
 8004408:	e011      	b.n	800442e <HAL_DMA_IRQHandler+0x3ba>
 800440a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800440e:	e00e      	b.n	800442e <HAL_DMA_IRQHandler+0x3ba>
 8004410:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004414:	e00b      	b.n	800442e <HAL_DMA_IRQHandler+0x3ba>
 8004416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800441a:	e008      	b.n	800442e <HAL_DMA_IRQHandler+0x3ba>
 800441c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004420:	e005      	b.n	800442e <HAL_DMA_IRQHandler+0x3ba>
 8004422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004426:	e002      	b.n	800442e <HAL_DMA_IRQHandler+0x3ba>
 8004428:	2320      	movs	r3, #32
 800442a:	e000      	b.n	800442e <HAL_DMA_IRQHandler+0x3ba>
 800442c:	2302      	movs	r3, #2
 800442e:	4a2e      	ldr	r2, [pc, #184]	; (80044e8 <HAL_DMA_IRQHandler+0x474>)
 8004430:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800443e:	2b00      	cmp	r3, #0
 8004440:	d034      	beq.n	80044ac <HAL_DMA_IRQHandler+0x438>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800444a:	e02f      	b.n	80044ac <HAL_DMA_IRQHandler+0x438>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	2208      	movs	r2, #8
 8004452:	409a      	lsls	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4013      	ands	r3, r2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d028      	beq.n	80044ae <HAL_DMA_IRQHandler+0x43a>
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 0308 	and.w	r3, r3, #8
 8004462:	2b00      	cmp	r3, #0
 8004464:	d023      	beq.n	80044ae <HAL_DMA_IRQHandler+0x43a>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 020e 	bic.w	r2, r2, #14
 8004474:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447e:	2101      	movs	r1, #1
 8004480:	fa01 f202 	lsl.w	r2, r1, r2
 8004484:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d004      	beq.n	80044ae <HAL_DMA_IRQHandler+0x43a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
    }
  }
  return;
 80044ac:	bf00      	nop
 80044ae:	bf00      	nop
}
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40020080 	.word	0x40020080
 80044bc:	40020008 	.word	0x40020008
 80044c0:	4002001c 	.word	0x4002001c
 80044c4:	40020030 	.word	0x40020030
 80044c8:	40020044 	.word	0x40020044
 80044cc:	40020058 	.word	0x40020058
 80044d0:	4002006c 	.word	0x4002006c
 80044d4:	40020408 	.word	0x40020408
 80044d8:	4002041c 	.word	0x4002041c
 80044dc:	40020430 	.word	0x40020430
 80044e0:	40020444 	.word	0x40020444
 80044e4:	40020400 	.word	0x40020400
 80044e8:	40020000 	.word	0x40020000

080044ec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	607a      	str	r2, [r7, #4]
 80044f8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004502:	2101      	movs	r1, #1
 8004504:	fa01 f202 	lsl.w	r2, r1, r2
 8004508:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b10      	cmp	r3, #16
 8004518:	d108      	bne.n	800452c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800452a:	e007      	b.n	800453c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68ba      	ldr	r2, [r7, #8]
 8004532:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	60da      	str	r2, [r3, #12]
}
 800453c:	bf00      	nop
 800453e:	3714      	adds	r7, #20
 8004540:	46bd      	mov	sp, r7
 8004542:	bc80      	pop	{r7}
 8004544:	4770      	bx	lr
	...

08004548 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004548:	b480      	push	{r7}
 800454a:	b08b      	sub	sp, #44	; 0x2c
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004556:	2300      	movs	r3, #0
 8004558:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800455a:	e179      	b.n	8004850 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800455c:	2201      	movs	r2, #1
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	fa02 f303 	lsl.w	r3, r2, r3
 8004564:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	4013      	ands	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	429a      	cmp	r2, r3
 8004576:	f040 8168 	bne.w	800484a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4a96      	ldr	r2, [pc, #600]	; (80047d8 <HAL_GPIO_Init+0x290>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d05e      	beq.n	8004642 <HAL_GPIO_Init+0xfa>
 8004584:	4a94      	ldr	r2, [pc, #592]	; (80047d8 <HAL_GPIO_Init+0x290>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d875      	bhi.n	8004676 <HAL_GPIO_Init+0x12e>
 800458a:	4a94      	ldr	r2, [pc, #592]	; (80047dc <HAL_GPIO_Init+0x294>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d058      	beq.n	8004642 <HAL_GPIO_Init+0xfa>
 8004590:	4a92      	ldr	r2, [pc, #584]	; (80047dc <HAL_GPIO_Init+0x294>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d86f      	bhi.n	8004676 <HAL_GPIO_Init+0x12e>
 8004596:	4a92      	ldr	r2, [pc, #584]	; (80047e0 <HAL_GPIO_Init+0x298>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d052      	beq.n	8004642 <HAL_GPIO_Init+0xfa>
 800459c:	4a90      	ldr	r2, [pc, #576]	; (80047e0 <HAL_GPIO_Init+0x298>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d869      	bhi.n	8004676 <HAL_GPIO_Init+0x12e>
 80045a2:	4a90      	ldr	r2, [pc, #576]	; (80047e4 <HAL_GPIO_Init+0x29c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d04c      	beq.n	8004642 <HAL_GPIO_Init+0xfa>
 80045a8:	4a8e      	ldr	r2, [pc, #568]	; (80047e4 <HAL_GPIO_Init+0x29c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d863      	bhi.n	8004676 <HAL_GPIO_Init+0x12e>
 80045ae:	4a8e      	ldr	r2, [pc, #568]	; (80047e8 <HAL_GPIO_Init+0x2a0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d046      	beq.n	8004642 <HAL_GPIO_Init+0xfa>
 80045b4:	4a8c      	ldr	r2, [pc, #560]	; (80047e8 <HAL_GPIO_Init+0x2a0>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d85d      	bhi.n	8004676 <HAL_GPIO_Init+0x12e>
 80045ba:	2b12      	cmp	r3, #18
 80045bc:	d82a      	bhi.n	8004614 <HAL_GPIO_Init+0xcc>
 80045be:	2b12      	cmp	r3, #18
 80045c0:	d859      	bhi.n	8004676 <HAL_GPIO_Init+0x12e>
 80045c2:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <HAL_GPIO_Init+0x80>)
 80045c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c8:	08004643 	.word	0x08004643
 80045cc:	0800461d 	.word	0x0800461d
 80045d0:	0800462f 	.word	0x0800462f
 80045d4:	08004671 	.word	0x08004671
 80045d8:	08004677 	.word	0x08004677
 80045dc:	08004677 	.word	0x08004677
 80045e0:	08004677 	.word	0x08004677
 80045e4:	08004677 	.word	0x08004677
 80045e8:	08004677 	.word	0x08004677
 80045ec:	08004677 	.word	0x08004677
 80045f0:	08004677 	.word	0x08004677
 80045f4:	08004677 	.word	0x08004677
 80045f8:	08004677 	.word	0x08004677
 80045fc:	08004677 	.word	0x08004677
 8004600:	08004677 	.word	0x08004677
 8004604:	08004677 	.word	0x08004677
 8004608:	08004677 	.word	0x08004677
 800460c:	08004625 	.word	0x08004625
 8004610:	08004639 	.word	0x08004639
 8004614:	4a75      	ldr	r2, [pc, #468]	; (80047ec <HAL_GPIO_Init+0x2a4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d013      	beq.n	8004642 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800461a:	e02c      	b.n	8004676 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	623b      	str	r3, [r7, #32]
          break;
 8004622:	e029      	b.n	8004678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	3304      	adds	r3, #4
 800462a:	623b      	str	r3, [r7, #32]
          break;
 800462c:	e024      	b.n	8004678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	3308      	adds	r3, #8
 8004634:	623b      	str	r3, [r7, #32]
          break;
 8004636:	e01f      	b.n	8004678 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	330c      	adds	r3, #12
 800463e:	623b      	str	r3, [r7, #32]
          break;
 8004640:	e01a      	b.n	8004678 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800464a:	2304      	movs	r3, #4
 800464c:	623b      	str	r3, [r7, #32]
          break;
 800464e:	e013      	b.n	8004678 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d105      	bne.n	8004664 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004658:	2308      	movs	r3, #8
 800465a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69fa      	ldr	r2, [r7, #28]
 8004660:	611a      	str	r2, [r3, #16]
          break;
 8004662:	e009      	b.n	8004678 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004664:	2308      	movs	r3, #8
 8004666:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	69fa      	ldr	r2, [r7, #28]
 800466c:	615a      	str	r2, [r3, #20]
          break;
 800466e:	e003      	b.n	8004678 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004670:	2300      	movs	r3, #0
 8004672:	623b      	str	r3, [r7, #32]
          break;
 8004674:	e000      	b.n	8004678 <HAL_GPIO_Init+0x130>
          break;
 8004676:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2bff      	cmp	r3, #255	; 0xff
 800467c:	d801      	bhi.n	8004682 <HAL_GPIO_Init+0x13a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	e001      	b.n	8004686 <HAL_GPIO_Init+0x13e>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	3304      	adds	r3, #4
 8004686:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	2bff      	cmp	r3, #255	; 0xff
 800468c:	d802      	bhi.n	8004694 <HAL_GPIO_Init+0x14c>
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	e002      	b.n	800469a <HAL_GPIO_Init+0x152>
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	3b08      	subs	r3, #8
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	210f      	movs	r1, #15
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	43db      	mvns	r3, r3
 80046aa:	401a      	ands	r2, r3
 80046ac:	6a39      	ldr	r1, [r7, #32]
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	fa01 f303 	lsl.w	r3, r1, r3
 80046b4:	431a      	orrs	r2, r3
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80c1 	beq.w	800484a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046c8:	4b49      	ldr	r3, [pc, #292]	; (80047f0 <HAL_GPIO_Init+0x2a8>)
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	4a48      	ldr	r2, [pc, #288]	; (80047f0 <HAL_GPIO_Init+0x2a8>)
 80046ce:	f043 0301 	orr.w	r3, r3, #1
 80046d2:	6193      	str	r3, [r2, #24]
 80046d4:	4b46      	ldr	r3, [pc, #280]	; (80047f0 <HAL_GPIO_Init+0x2a8>)
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	60bb      	str	r3, [r7, #8]
 80046de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046e0:	4a44      	ldr	r2, [pc, #272]	; (80047f4 <HAL_GPIO_Init+0x2ac>)
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	089b      	lsrs	r3, r3, #2
 80046e6:	3302      	adds	r3, #2
 80046e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	f003 0303 	and.w	r3, r3, #3
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	220f      	movs	r2, #15
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4013      	ands	r3, r2
 8004702:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a3c      	ldr	r2, [pc, #240]	; (80047f8 <HAL_GPIO_Init+0x2b0>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d01f      	beq.n	800474c <HAL_GPIO_Init+0x204>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a3b      	ldr	r2, [pc, #236]	; (80047fc <HAL_GPIO_Init+0x2b4>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d019      	beq.n	8004748 <HAL_GPIO_Init+0x200>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a3a      	ldr	r2, [pc, #232]	; (8004800 <HAL_GPIO_Init+0x2b8>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d013      	beq.n	8004744 <HAL_GPIO_Init+0x1fc>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a39      	ldr	r2, [pc, #228]	; (8004804 <HAL_GPIO_Init+0x2bc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00d      	beq.n	8004740 <HAL_GPIO_Init+0x1f8>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a38      	ldr	r2, [pc, #224]	; (8004808 <HAL_GPIO_Init+0x2c0>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d007      	beq.n	800473c <HAL_GPIO_Init+0x1f4>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a37      	ldr	r2, [pc, #220]	; (800480c <HAL_GPIO_Init+0x2c4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d101      	bne.n	8004738 <HAL_GPIO_Init+0x1f0>
 8004734:	2305      	movs	r3, #5
 8004736:	e00a      	b.n	800474e <HAL_GPIO_Init+0x206>
 8004738:	2306      	movs	r3, #6
 800473a:	e008      	b.n	800474e <HAL_GPIO_Init+0x206>
 800473c:	2304      	movs	r3, #4
 800473e:	e006      	b.n	800474e <HAL_GPIO_Init+0x206>
 8004740:	2303      	movs	r3, #3
 8004742:	e004      	b.n	800474e <HAL_GPIO_Init+0x206>
 8004744:	2302      	movs	r3, #2
 8004746:	e002      	b.n	800474e <HAL_GPIO_Init+0x206>
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <HAL_GPIO_Init+0x206>
 800474c:	2300      	movs	r3, #0
 800474e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004750:	f002 0203 	and.w	r2, r2, #3
 8004754:	0092      	lsls	r2, r2, #2
 8004756:	4093      	lsls	r3, r2
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800475e:	4925      	ldr	r1, [pc, #148]	; (80047f4 <HAL_GPIO_Init+0x2ac>)
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	089b      	lsrs	r3, r3, #2
 8004764:	3302      	adds	r3, #2
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d006      	beq.n	8004786 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004778:	4b25      	ldr	r3, [pc, #148]	; (8004810 <HAL_GPIO_Init+0x2c8>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4924      	ldr	r1, [pc, #144]	; (8004810 <HAL_GPIO_Init+0x2c8>)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	4313      	orrs	r3, r2
 8004782:	600b      	str	r3, [r1, #0]
 8004784:	e006      	b.n	8004794 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004786:	4b22      	ldr	r3, [pc, #136]	; (8004810 <HAL_GPIO_Init+0x2c8>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	43db      	mvns	r3, r3
 800478e:	4920      	ldr	r1, [pc, #128]	; (8004810 <HAL_GPIO_Init+0x2c8>)
 8004790:	4013      	ands	r3, r2
 8004792:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d006      	beq.n	80047ae <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80047a0:	4b1b      	ldr	r3, [pc, #108]	; (8004810 <HAL_GPIO_Init+0x2c8>)
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	491a      	ldr	r1, [pc, #104]	; (8004810 <HAL_GPIO_Init+0x2c8>)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	604b      	str	r3, [r1, #4]
 80047ac:	e006      	b.n	80047bc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047ae:	4b18      	ldr	r3, [pc, #96]	; (8004810 <HAL_GPIO_Init+0x2c8>)
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	43db      	mvns	r3, r3
 80047b6:	4916      	ldr	r1, [pc, #88]	; (8004810 <HAL_GPIO_Init+0x2c8>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d025      	beq.n	8004814 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80047c8:	4b11      	ldr	r3, [pc, #68]	; (8004810 <HAL_GPIO_Init+0x2c8>)
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	4910      	ldr	r1, [pc, #64]	; (8004810 <HAL_GPIO_Init+0x2c8>)
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	608b      	str	r3, [r1, #8]
 80047d4:	e025      	b.n	8004822 <HAL_GPIO_Init+0x2da>
 80047d6:	bf00      	nop
 80047d8:	10320000 	.word	0x10320000
 80047dc:	10310000 	.word	0x10310000
 80047e0:	10220000 	.word	0x10220000
 80047e4:	10210000 	.word	0x10210000
 80047e8:	10120000 	.word	0x10120000
 80047ec:	10110000 	.word	0x10110000
 80047f0:	40021000 	.word	0x40021000
 80047f4:	40010000 	.word	0x40010000
 80047f8:	40010800 	.word	0x40010800
 80047fc:	40010c00 	.word	0x40010c00
 8004800:	40011000 	.word	0x40011000
 8004804:	40011400 	.word	0x40011400
 8004808:	40011800 	.word	0x40011800
 800480c:	40011c00 	.word	0x40011c00
 8004810:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004814:	4b15      	ldr	r3, [pc, #84]	; (800486c <HAL_GPIO_Init+0x324>)
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	43db      	mvns	r3, r3
 800481c:	4913      	ldr	r1, [pc, #76]	; (800486c <HAL_GPIO_Init+0x324>)
 800481e:	4013      	ands	r3, r2
 8004820:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d006      	beq.n	800483c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <HAL_GPIO_Init+0x324>)
 8004830:	68da      	ldr	r2, [r3, #12]
 8004832:	490e      	ldr	r1, [pc, #56]	; (800486c <HAL_GPIO_Init+0x324>)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	4313      	orrs	r3, r2
 8004838:	60cb      	str	r3, [r1, #12]
 800483a:	e006      	b.n	800484a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_GPIO_Init+0x324>)
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	43db      	mvns	r3, r3
 8004844:	4909      	ldr	r1, [pc, #36]	; (800486c <HAL_GPIO_Init+0x324>)
 8004846:	4013      	ands	r3, r2
 8004848:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	3301      	adds	r3, #1
 800484e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	fa22 f303 	lsr.w	r3, r2, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	f47f ae7e 	bne.w	800455c <HAL_GPIO_Init+0x14>
  }
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	372c      	adds	r7, #44	; 0x2c
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr
 800486c:	40010400 	.word	0x40010400

08004870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	807b      	strh	r3, [r7, #2]
 800487c:	4613      	mov	r3, r2
 800487e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004880:	787b      	ldrb	r3, [r7, #1]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004886:	887a      	ldrh	r2, [r7, #2]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800488c:	e003      	b.n	8004896 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800488e:	887b      	ldrh	r3, [r7, #2]
 8004890:	041a      	lsls	r2, r3, #16
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	611a      	str	r2, [r3, #16]
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr

080048a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e12b      	b.n	8004b0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fe fd3e 	bl	8003348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2224      	movs	r2, #36	; 0x24
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0201 	bic.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004902:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004904:	f000 fce6 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 8004908:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4a81      	ldr	r2, [pc, #516]	; (8004b14 <HAL_I2C_Init+0x274>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d807      	bhi.n	8004924 <HAL_I2C_Init+0x84>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4a80      	ldr	r2, [pc, #512]	; (8004b18 <HAL_I2C_Init+0x278>)
 8004918:	4293      	cmp	r3, r2
 800491a:	bf94      	ite	ls
 800491c:	2301      	movls	r3, #1
 800491e:	2300      	movhi	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e006      	b.n	8004932 <HAL_I2C_Init+0x92>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	4a7d      	ldr	r2, [pc, #500]	; (8004b1c <HAL_I2C_Init+0x27c>)
 8004928:	4293      	cmp	r3, r2
 800492a:	bf94      	ite	ls
 800492c:	2301      	movls	r3, #1
 800492e:	2300      	movhi	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e0e7      	b.n	8004b0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	4a78      	ldr	r2, [pc, #480]	; (8004b20 <HAL_I2C_Init+0x280>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	0c9b      	lsrs	r3, r3, #18
 8004944:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68ba      	ldr	r2, [r7, #8]
 8004956:	430a      	orrs	r2, r1
 8004958:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4a6a      	ldr	r2, [pc, #424]	; (8004b14 <HAL_I2C_Init+0x274>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d802      	bhi.n	8004974 <HAL_I2C_Init+0xd4>
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	3301      	adds	r3, #1
 8004972:	e009      	b.n	8004988 <HAL_I2C_Init+0xe8>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800497a:	fb02 f303 	mul.w	r3, r2, r3
 800497e:	4a69      	ldr	r2, [pc, #420]	; (8004b24 <HAL_I2C_Init+0x284>)
 8004980:	fba2 2303 	umull	r2, r3, r2, r3
 8004984:	099b      	lsrs	r3, r3, #6
 8004986:	3301      	adds	r3, #1
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	6812      	ldr	r2, [r2, #0]
 800498c:	430b      	orrs	r3, r1
 800498e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800499a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	495c      	ldr	r1, [pc, #368]	; (8004b14 <HAL_I2C_Init+0x274>)
 80049a4:	428b      	cmp	r3, r1
 80049a6:	d819      	bhi.n	80049dc <HAL_I2C_Init+0x13c>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	1e59      	subs	r1, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	005b      	lsls	r3, r3, #1
 80049b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80049b6:	1c59      	adds	r1, r3, #1
 80049b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049bc:	400b      	ands	r3, r1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00a      	beq.n	80049d8 <HAL_I2C_Init+0x138>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	1e59      	subs	r1, r3, #1
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80049d0:	3301      	adds	r3, #1
 80049d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049d6:	e051      	b.n	8004a7c <HAL_I2C_Init+0x1dc>
 80049d8:	2304      	movs	r3, #4
 80049da:	e04f      	b.n	8004a7c <HAL_I2C_Init+0x1dc>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d111      	bne.n	8004a08 <HAL_I2C_Init+0x168>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	1e58      	subs	r0, r3, #1
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6859      	ldr	r1, [r3, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	005b      	lsls	r3, r3, #1
 80049f0:	440b      	add	r3, r1
 80049f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80049f6:	3301      	adds	r3, #1
 80049f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	bf0c      	ite	eq
 8004a00:	2301      	moveq	r3, #1
 8004a02:	2300      	movne	r3, #0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	e012      	b.n	8004a2e <HAL_I2C_Init+0x18e>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	1e58      	subs	r0, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6859      	ldr	r1, [r3, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	0099      	lsls	r1, r3, #2
 8004a18:	440b      	add	r3, r1
 8004a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <HAL_I2C_Init+0x196>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e022      	b.n	8004a7c <HAL_I2C_Init+0x1dc>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10e      	bne.n	8004a5c <HAL_I2C_Init+0x1bc>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	1e58      	subs	r0, r3, #1
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6859      	ldr	r1, [r3, #4]
 8004a46:	460b      	mov	r3, r1
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	440b      	add	r3, r1
 8004a4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a5a:	e00f      	b.n	8004a7c <HAL_I2C_Init+0x1dc>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	1e58      	subs	r0, r3, #1
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6859      	ldr	r1, [r3, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	0099      	lsls	r1, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a72:	3301      	adds	r3, #1
 8004a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	6809      	ldr	r1, [r1, #0]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69da      	ldr	r2, [r3, #28]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004aaa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6911      	ldr	r1, [r2, #16]
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	68d2      	ldr	r2, [r2, #12]
 8004ab6:	4311      	orrs	r1, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	695a      	ldr	r2, [r3, #20]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3710      	adds	r7, #16
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	000186a0 	.word	0x000186a0
 8004b18:	001e847f 	.word	0x001e847f
 8004b1c:	003d08ff 	.word	0x003d08ff
 8004b20:	431bde83 	.word	0x431bde83
 8004b24:	10624dd3 	.word	0x10624dd3

08004b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e272      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 8087 	beq.w	8004c56 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b48:	4b92      	ldr	r3, [pc, #584]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 030c 	and.w	r3, r3, #12
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d00c      	beq.n	8004b6e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004b54:	4b8f      	ldr	r3, [pc, #572]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 030c 	and.w	r3, r3, #12
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d112      	bne.n	8004b86 <HAL_RCC_OscConfig+0x5e>
 8004b60:	4b8c      	ldr	r3, [pc, #560]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b6c:	d10b      	bne.n	8004b86 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b6e:	4b89      	ldr	r3, [pc, #548]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d06c      	beq.n	8004c54 <HAL_RCC_OscConfig+0x12c>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d168      	bne.n	8004c54 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e24c      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b8e:	d106      	bne.n	8004b9e <HAL_RCC_OscConfig+0x76>
 8004b90:	4b80      	ldr	r3, [pc, #512]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a7f      	ldr	r2, [pc, #508]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004b96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e02e      	b.n	8004bfc <HAL_RCC_OscConfig+0xd4>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10c      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x98>
 8004ba6:	4b7b      	ldr	r3, [pc, #492]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a7a      	ldr	r2, [pc, #488]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	4b78      	ldr	r3, [pc, #480]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a77      	ldr	r2, [pc, #476]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	e01d      	b.n	8004bfc <HAL_RCC_OscConfig+0xd4>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bc8:	d10c      	bne.n	8004be4 <HAL_RCC_OscConfig+0xbc>
 8004bca:	4b72      	ldr	r3, [pc, #456]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a71      	ldr	r2, [pc, #452]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd4:	6013      	str	r3, [r2, #0]
 8004bd6:	4b6f      	ldr	r3, [pc, #444]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a6e      	ldr	r2, [pc, #440]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	e00b      	b.n	8004bfc <HAL_RCC_OscConfig+0xd4>
 8004be4:	4b6b      	ldr	r3, [pc, #428]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a6a      	ldr	r2, [pc, #424]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	4b68      	ldr	r3, [pc, #416]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a67      	ldr	r2, [pc, #412]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bfa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d013      	beq.n	8004c2c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c04:	f7ff f824 	bl	8003c50 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c0c:	f7ff f820 	bl	8003c50 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b64      	cmp	r3, #100	; 0x64
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e200      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c1e:	4b5d      	ldr	r3, [pc, #372]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0f0      	beq.n	8004c0c <HAL_RCC_OscConfig+0xe4>
 8004c2a:	e014      	b.n	8004c56 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c2c:	f7ff f810 	bl	8003c50 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c34:	f7ff f80c 	bl	8003c50 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b64      	cmp	r3, #100	; 0x64
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e1ec      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c46:	4b53      	ldr	r3, [pc, #332]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f0      	bne.n	8004c34 <HAL_RCC_OscConfig+0x10c>
 8004c52:	e000      	b.n	8004c56 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d063      	beq.n	8004d2a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c62:	4b4c      	ldr	r3, [pc, #304]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f003 030c 	and.w	r3, r3, #12
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00b      	beq.n	8004c86 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c6e:	4b49      	ldr	r3, [pc, #292]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f003 030c 	and.w	r3, r3, #12
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d11c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x18c>
 8004c7a:	4b46      	ldr	r3, [pc, #280]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d116      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c86:	4b43      	ldr	r3, [pc, #268]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <HAL_RCC_OscConfig+0x176>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d001      	beq.n	8004c9e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e1c0      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9e:	4b3d      	ldr	r3, [pc, #244]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	4939      	ldr	r1, [pc, #228]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cb2:	e03a      	b.n	8004d2a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d020      	beq.n	8004cfe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cbc:	4b36      	ldr	r3, [pc, #216]	; (8004d98 <HAL_RCC_OscConfig+0x270>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc2:	f7fe ffc5 	bl	8003c50 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cca:	f7fe ffc1 	bl	8003c50 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e1a1      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cdc:	4b2d      	ldr	r3, [pc, #180]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ce8:	4b2a      	ldr	r3, [pc, #168]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	4927      	ldr	r1, [pc, #156]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	600b      	str	r3, [r1, #0]
 8004cfc:	e015      	b.n	8004d2a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cfe:	4b26      	ldr	r3, [pc, #152]	; (8004d98 <HAL_RCC_OscConfig+0x270>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d04:	f7fe ffa4 	bl	8003c50 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d0c:	f7fe ffa0 	bl	8003c50 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e180      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d1e:	4b1d      	ldr	r3, [pc, #116]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d03a      	beq.n	8004dac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d019      	beq.n	8004d72 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d3e:	4b17      	ldr	r3, [pc, #92]	; (8004d9c <HAL_RCC_OscConfig+0x274>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d44:	f7fe ff84 	bl	8003c50 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d4c:	f7fe ff80 	bl	8003c50 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e160      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d5e:	4b0d      	ldr	r3, [pc, #52]	; (8004d94 <HAL_RCC_OscConfig+0x26c>)
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0f0      	beq.n	8004d4c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d6a:	2001      	movs	r0, #1
 8004d6c:	f000 fada 	bl	8005324 <RCC_Delay>
 8004d70:	e01c      	b.n	8004dac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d72:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <HAL_RCC_OscConfig+0x274>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d78:	f7fe ff6a 	bl	8003c50 <HAL_GetTick>
 8004d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d7e:	e00f      	b.n	8004da0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d80:	f7fe ff66 	bl	8003c50 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d908      	bls.n	8004da0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e146      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000
 8004d98:	42420000 	.word	0x42420000
 8004d9c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da0:	4b92      	ldr	r3, [pc, #584]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1e9      	bne.n	8004d80 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80a6 	beq.w	8004f06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dbe:	4b8b      	ldr	r3, [pc, #556]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d10d      	bne.n	8004de6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dca:	4b88      	ldr	r3, [pc, #544]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	4a87      	ldr	r2, [pc, #540]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	61d3      	str	r3, [r2, #28]
 8004dd6:	4b85      	ldr	r3, [pc, #532]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004dd8:	69db      	ldr	r3, [r3, #28]
 8004dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de6:	4b82      	ldr	r3, [pc, #520]	; (8004ff0 <HAL_RCC_OscConfig+0x4c8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d118      	bne.n	8004e24 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004df2:	4b7f      	ldr	r3, [pc, #508]	; (8004ff0 <HAL_RCC_OscConfig+0x4c8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a7e      	ldr	r2, [pc, #504]	; (8004ff0 <HAL_RCC_OscConfig+0x4c8>)
 8004df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dfe:	f7fe ff27 	bl	8003c50 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e06:	f7fe ff23 	bl	8003c50 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b64      	cmp	r3, #100	; 0x64
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e103      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e18:	4b75      	ldr	r3, [pc, #468]	; (8004ff0 <HAL_RCC_OscConfig+0x4c8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d106      	bne.n	8004e3a <HAL_RCC_OscConfig+0x312>
 8004e2c:	4b6f      	ldr	r3, [pc, #444]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	4a6e      	ldr	r2, [pc, #440]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	6213      	str	r3, [r2, #32]
 8004e38:	e02d      	b.n	8004e96 <HAL_RCC_OscConfig+0x36e>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10c      	bne.n	8004e5c <HAL_RCC_OscConfig+0x334>
 8004e42:	4b6a      	ldr	r3, [pc, #424]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	4a69      	ldr	r2, [pc, #420]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e48:	f023 0301 	bic.w	r3, r3, #1
 8004e4c:	6213      	str	r3, [r2, #32]
 8004e4e:	4b67      	ldr	r3, [pc, #412]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	4a66      	ldr	r2, [pc, #408]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e54:	f023 0304 	bic.w	r3, r3, #4
 8004e58:	6213      	str	r3, [r2, #32]
 8004e5a:	e01c      	b.n	8004e96 <HAL_RCC_OscConfig+0x36e>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b05      	cmp	r3, #5
 8004e62:	d10c      	bne.n	8004e7e <HAL_RCC_OscConfig+0x356>
 8004e64:	4b61      	ldr	r3, [pc, #388]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	4a60      	ldr	r2, [pc, #384]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e6a:	f043 0304 	orr.w	r3, r3, #4
 8004e6e:	6213      	str	r3, [r2, #32]
 8004e70:	4b5e      	ldr	r3, [pc, #376]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	4a5d      	ldr	r2, [pc, #372]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e76:	f043 0301 	orr.w	r3, r3, #1
 8004e7a:	6213      	str	r3, [r2, #32]
 8004e7c:	e00b      	b.n	8004e96 <HAL_RCC_OscConfig+0x36e>
 8004e7e:	4b5b      	ldr	r3, [pc, #364]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	4a5a      	ldr	r2, [pc, #360]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e84:	f023 0301 	bic.w	r3, r3, #1
 8004e88:	6213      	str	r3, [r2, #32]
 8004e8a:	4b58      	ldr	r3, [pc, #352]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	4a57      	ldr	r2, [pc, #348]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004e90:	f023 0304 	bic.w	r3, r3, #4
 8004e94:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d015      	beq.n	8004eca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e9e:	f7fe fed7 	bl	8003c50 <HAL_GetTick>
 8004ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea4:	e00a      	b.n	8004ebc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ea6:	f7fe fed3 	bl	8003c50 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e0b1      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ebc:	4b4b      	ldr	r3, [pc, #300]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0ee      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x37e>
 8004ec8:	e014      	b.n	8004ef4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eca:	f7fe fec1 	bl	8003c50 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed0:	e00a      	b.n	8004ee8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed2:	f7fe febd 	bl	8003c50 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e09b      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee8:	4b40      	ldr	r3, [pc, #256]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f003 0302 	and.w	r3, r3, #2
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1ee      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d105      	bne.n	8004f06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004efa:	4b3c      	ldr	r3, [pc, #240]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004efc:	69db      	ldr	r3, [r3, #28]
 8004efe:	4a3b      	ldr	r2, [pc, #236]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 8087 	beq.w	800501e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f10:	4b36      	ldr	r3, [pc, #216]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 030c 	and.w	r3, r3, #12
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d061      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d146      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f24:	4b33      	ldr	r3, [pc, #204]	; (8004ff4 <HAL_RCC_OscConfig+0x4cc>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2a:	f7fe fe91 	bl	8003c50 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f32:	f7fe fe8d 	bl	8003c50 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e06d      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f44:	4b29      	ldr	r3, [pc, #164]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f0      	bne.n	8004f32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f58:	d108      	bne.n	8004f6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004f5a:	4b24      	ldr	r3, [pc, #144]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	4921      	ldr	r1, [pc, #132]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f6c:	4b1f      	ldr	r3, [pc, #124]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a19      	ldr	r1, [r3, #32]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	491b      	ldr	r1, [pc, #108]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f84:	4b1b      	ldr	r3, [pc, #108]	; (8004ff4 <HAL_RCC_OscConfig+0x4cc>)
 8004f86:	2201      	movs	r2, #1
 8004f88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8a:	f7fe fe61 	bl	8003c50 <HAL_GetTick>
 8004f8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f90:	e008      	b.n	8004fa4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f92:	f7fe fe5d 	bl	8003c50 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d901      	bls.n	8004fa4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e03d      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004fa4:	4b11      	ldr	r3, [pc, #68]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0f0      	beq.n	8004f92 <HAL_RCC_OscConfig+0x46a>
 8004fb0:	e035      	b.n	800501e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb2:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <HAL_RCC_OscConfig+0x4cc>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb8:	f7fe fe4a 	bl	8003c50 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc0:	f7fe fe46 	bl	8003c50 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e026      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fd2:	4b06      	ldr	r3, [pc, #24]	; (8004fec <HAL_RCC_OscConfig+0x4c4>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x498>
 8004fde:	e01e      	b.n	800501e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d107      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e019      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40007000 	.word	0x40007000
 8004ff4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ff8:	4b0b      	ldr	r3, [pc, #44]	; (8005028 <HAL_RCC_OscConfig+0x500>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	429a      	cmp	r2, r3
 800500a:	d106      	bne.n	800501a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005016:	429a      	cmp	r2, r3
 8005018:	d001      	beq.n	800501e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e000      	b.n	8005020 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000

0800502c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e0d0      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005040:	4b6a      	ldr	r3, [pc, #424]	; (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d910      	bls.n	8005070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b67      	ldr	r3, [pc, #412]	; (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 0207 	bic.w	r2, r3, #7
 8005056:	4965      	ldr	r1, [pc, #404]	; (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b63      	ldr	r3, [pc, #396]	; (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0307 	and.w	r3, r3, #7
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e0b8      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d020      	beq.n	80050be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0304 	and.w	r3, r3, #4
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005088:	4b59      	ldr	r3, [pc, #356]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4a58      	ldr	r2, [pc, #352]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 800508e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005092:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	2b00      	cmp	r3, #0
 800509e:	d005      	beq.n	80050ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050a0:	4b53      	ldr	r3, [pc, #332]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a52      	ldr	r2, [pc, #328]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80050aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050ac:	4b50      	ldr	r3, [pc, #320]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	494d      	ldr	r1, [pc, #308]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0301 	and.w	r3, r3, #1
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d040      	beq.n	800514c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d107      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d2:	4b47      	ldr	r3, [pc, #284]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d115      	bne.n	800510a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e07f      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d107      	bne.n	80050fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ea:	4b41      	ldr	r3, [pc, #260]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d109      	bne.n	800510a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e073      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050fa:	4b3d      	ldr	r3, [pc, #244]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e06b      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800510a:	4b39      	ldr	r3, [pc, #228]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f023 0203 	bic.w	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	4936      	ldr	r1, [pc, #216]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005118:	4313      	orrs	r3, r2
 800511a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800511c:	f7fe fd98 	bl	8003c50 <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005122:	e00a      	b.n	800513a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005124:	f7fe fd94 	bl	8003c50 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e053      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513a:	4b2d      	ldr	r3, [pc, #180]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f003 020c 	and.w	r2, r3, #12
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	429a      	cmp	r2, r3
 800514a:	d1eb      	bne.n	8005124 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800514c:	4b27      	ldr	r3, [pc, #156]	; (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	683a      	ldr	r2, [r7, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d210      	bcs.n	800517c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800515a:	4b24      	ldr	r3, [pc, #144]	; (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f023 0207 	bic.w	r2, r3, #7
 8005162:	4922      	ldr	r1, [pc, #136]	; (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	4313      	orrs	r3, r2
 8005168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800516a:	4b20      	ldr	r3, [pc, #128]	; (80051ec <HAL_RCC_ClockConfig+0x1c0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0307 	and.w	r3, r3, #7
 8005172:	683a      	ldr	r2, [r7, #0]
 8005174:	429a      	cmp	r2, r3
 8005176:	d001      	beq.n	800517c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e032      	b.n	80051e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0304 	and.w	r3, r3, #4
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005188:	4b19      	ldr	r3, [pc, #100]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4916      	ldr	r1, [pc, #88]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 8005196:	4313      	orrs	r3, r2
 8005198:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0308 	and.w	r3, r3, #8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051a6:	4b12      	ldr	r3, [pc, #72]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	490e      	ldr	r1, [pc, #56]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051ba:	f000 f821 	bl	8005200 <HAL_RCC_GetSysClockFreq>
 80051be:	4602      	mov	r2, r0
 80051c0:	4b0b      	ldr	r3, [pc, #44]	; (80051f0 <HAL_RCC_ClockConfig+0x1c4>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f003 030f 	and.w	r3, r3, #15
 80051ca:	490a      	ldr	r1, [pc, #40]	; (80051f4 <HAL_RCC_ClockConfig+0x1c8>)
 80051cc:	5ccb      	ldrb	r3, [r1, r3]
 80051ce:	fa22 f303 	lsr.w	r3, r2, r3
 80051d2:	4a09      	ldr	r2, [pc, #36]	; (80051f8 <HAL_RCC_ClockConfig+0x1cc>)
 80051d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051d6:	4b09      	ldr	r3, [pc, #36]	; (80051fc <HAL_RCC_ClockConfig+0x1d0>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe fcf6 	bl	8003bcc <HAL_InitTick>

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	40022000 	.word	0x40022000
 80051f0:	40021000 	.word	0x40021000
 80051f4:	08008e8c 	.word	0x08008e8c
 80051f8:	20000004 	.word	0x20000004
 80051fc:	20000008 	.word	0x20000008

08005200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005200:	b490      	push	{r4, r7}
 8005202:	b08a      	sub	sp, #40	; 0x28
 8005204:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005206:	4b29      	ldr	r3, [pc, #164]	; (80052ac <HAL_RCC_GetSysClockFreq+0xac>)
 8005208:	1d3c      	adds	r4, r7, #4
 800520a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800520c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005210:	f240 2301 	movw	r3, #513	; 0x201
 8005214:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005216:	2300      	movs	r3, #0
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	2300      	movs	r3, #0
 800521c:	61bb      	str	r3, [r7, #24]
 800521e:	2300      	movs	r3, #0
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800522a:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f003 030c 	and.w	r3, r3, #12
 8005236:	2b04      	cmp	r3, #4
 8005238:	d002      	beq.n	8005240 <HAL_RCC_GetSysClockFreq+0x40>
 800523a:	2b08      	cmp	r3, #8
 800523c:	d003      	beq.n	8005246 <HAL_RCC_GetSysClockFreq+0x46>
 800523e:	e02b      	b.n	8005298 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005240:	4b1c      	ldr	r3, [pc, #112]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005242:	623b      	str	r3, [r7, #32]
      break;
 8005244:	e02b      	b.n	800529e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	0c9b      	lsrs	r3, r3, #18
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	3328      	adds	r3, #40	; 0x28
 8005250:	443b      	add	r3, r7
 8005252:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005256:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d012      	beq.n	8005288 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005262:	4b13      	ldr	r3, [pc, #76]	; (80052b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	0c5b      	lsrs	r3, r3, #17
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	3328      	adds	r3, #40	; 0x28
 800526e:	443b      	add	r3, r7
 8005270:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005274:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	4a0e      	ldr	r2, [pc, #56]	; (80052b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800527a:	fb03 f202 	mul.w	r2, r3, r2
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	fbb2 f3f3 	udiv	r3, r2, r3
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
 8005286:	e004      	b.n	8005292 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	4a0b      	ldr	r2, [pc, #44]	; (80052b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800528c:	fb02 f303 	mul.w	r3, r2, r3
 8005290:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	623b      	str	r3, [r7, #32]
      break;
 8005296:	e002      	b.n	800529e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005298:	4b08      	ldr	r3, [pc, #32]	; (80052bc <HAL_RCC_GetSysClockFreq+0xbc>)
 800529a:	623b      	str	r3, [r7, #32]
      break;
 800529c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800529e:	6a3b      	ldr	r3, [r7, #32]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3728      	adds	r7, #40	; 0x28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc90      	pop	{r4, r7}
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	08008e68 	.word	0x08008e68
 80052b0:	40021000 	.word	0x40021000
 80052b4:	00f42400 	.word	0x00f42400
 80052b8:	003d0900 	.word	0x003d0900
 80052bc:	007a1200 	.word	0x007a1200

080052c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052c0:	b480      	push	{r7}
 80052c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052c4:	4b02      	ldr	r3, [pc, #8]	; (80052d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80052c6:	681b      	ldr	r3, [r3, #0]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bc80      	pop	{r7}
 80052ce:	4770      	bx	lr
 80052d0:	20000004 	.word	0x20000004

080052d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052d8:	f7ff fff2 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 80052dc:	4602      	mov	r2, r0
 80052de:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	4903      	ldr	r1, [pc, #12]	; (80052f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052ea:	5ccb      	ldrb	r3, [r1, r3]
 80052ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	40021000 	.word	0x40021000
 80052f8:	08008e9c 	.word	0x08008e9c

080052fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005300:	f7ff ffde 	bl	80052c0 <HAL_RCC_GetHCLKFreq>
 8005304:	4602      	mov	r2, r0
 8005306:	4b05      	ldr	r3, [pc, #20]	; (800531c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	0adb      	lsrs	r3, r3, #11
 800530c:	f003 0307 	and.w	r3, r3, #7
 8005310:	4903      	ldr	r1, [pc, #12]	; (8005320 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005312:	5ccb      	ldrb	r3, [r1, r3]
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40021000 	.word	0x40021000
 8005320:	08008e9c 	.word	0x08008e9c

08005324 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005324:	b480      	push	{r7}
 8005326:	b085      	sub	sp, #20
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800532c:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <RCC_Delay+0x34>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a0a      	ldr	r2, [pc, #40]	; (800535c <RCC_Delay+0x38>)
 8005332:	fba2 2303 	umull	r2, r3, r2, r3
 8005336:	0a5b      	lsrs	r3, r3, #9
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	fb02 f303 	mul.w	r3, r2, r3
 800533e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005340:	bf00      	nop
  }
  while (Delay --);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1e5a      	subs	r2, r3, #1
 8005346:	60fa      	str	r2, [r7, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d1f9      	bne.n	8005340 <RCC_Delay+0x1c>
}
 800534c:	bf00      	nop
 800534e:	bf00      	nop
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	bc80      	pop	{r7}
 8005356:	4770      	bx	lr
 8005358:	20000004 	.word	0x20000004
 800535c:	10624dd3 	.word	0x10624dd3

08005360 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b082      	sub	sp, #8
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e041      	b.n	80053f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005378:	b2db      	uxtb	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d106      	bne.n	800538c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7fe f82e 	bl	80033e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2202      	movs	r2, #2
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	3304      	adds	r3, #4
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f000 fd88 	bl	8005eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
	...

08005400 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b01      	cmp	r3, #1
 8005412:	d001      	beq.n	8005418 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e044      	b.n	80054a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2202      	movs	r2, #2
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0201 	orr.w	r2, r2, #1
 800542e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a1d      	ldr	r2, [pc, #116]	; (80054ac <HAL_TIM_Base_Start_IT+0xac>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d018      	beq.n	800546c <HAL_TIM_Base_Start_IT+0x6c>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a1c      	ldr	r2, [pc, #112]	; (80054b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d013      	beq.n	800546c <HAL_TIM_Base_Start_IT+0x6c>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544c:	d00e      	beq.n	800546c <HAL_TIM_Base_Start_IT+0x6c>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d009      	beq.n	800546c <HAL_TIM_Base_Start_IT+0x6c>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a16      	ldr	r2, [pc, #88]	; (80054b8 <HAL_TIM_Base_Start_IT+0xb8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d004      	beq.n	800546c <HAL_TIM_Base_Start_IT+0x6c>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a15      	ldr	r2, [pc, #84]	; (80054bc <HAL_TIM_Base_Start_IT+0xbc>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d111      	bne.n	8005490 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b06      	cmp	r3, #6
 800547c:	d010      	beq.n	80054a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f042 0201 	orr.w	r2, r2, #1
 800548c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548e:	e007      	b.n	80054a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3714      	adds	r7, #20
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bc80      	pop	{r7}
 80054aa:	4770      	bx	lr
 80054ac:	40012c00 	.word	0x40012c00
 80054b0:	40013400 	.word	0x40013400
 80054b4:	40000400 	.word	0x40000400
 80054b8:	40000800 	.word	0x40000800
 80054bc:	40000c00 	.word	0x40000c00

080054c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e041      	b.n	8005556 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d106      	bne.n	80054ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 f839 	bl	800555e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2202      	movs	r2, #2
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	3304      	adds	r3, #4
 80054fc:	4619      	mov	r1, r3
 80054fe:	4610      	mov	r0, r2
 8005500:	f000 fcd8 	bl	8005eb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	bc80      	pop	{r7}
 800556e:	4770      	bx	lr

08005570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d109      	bne.n	8005594 <HAL_TIM_PWM_Start+0x24>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	bf14      	ite	ne
 800558c:	2301      	movne	r3, #1
 800558e:	2300      	moveq	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	e022      	b.n	80055da <HAL_TIM_PWM_Start+0x6a>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b04      	cmp	r3, #4
 8005598:	d109      	bne.n	80055ae <HAL_TIM_PWM_Start+0x3e>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	bf14      	ite	ne
 80055a6:	2301      	movne	r3, #1
 80055a8:	2300      	moveq	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	e015      	b.n	80055da <HAL_TIM_PWM_Start+0x6a>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d109      	bne.n	80055c8 <HAL_TIM_PWM_Start+0x58>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b01      	cmp	r3, #1
 80055be:	bf14      	ite	ne
 80055c0:	2301      	movne	r3, #1
 80055c2:	2300      	moveq	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	e008      	b.n	80055da <HAL_TIM_PWM_Start+0x6a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	bf14      	ite	ne
 80055d4:	2301      	movne	r3, #1
 80055d6:	2300      	moveq	r3, #0
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e072      	b.n	80056c8 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d104      	bne.n	80055f2 <HAL_TIM_PWM_Start+0x82>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2202      	movs	r2, #2
 80055ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055f0:	e013      	b.n	800561a <HAL_TIM_PWM_Start+0xaa>
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d104      	bne.n	8005602 <HAL_TIM_PWM_Start+0x92>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005600:	e00b      	b.n	800561a <HAL_TIM_PWM_Start+0xaa>
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	2b08      	cmp	r3, #8
 8005606:	d104      	bne.n	8005612 <HAL_TIM_PWM_Start+0xa2>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2202      	movs	r2, #2
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005610:	e003      	b.n	800561a <HAL_TIM_PWM_Start+0xaa>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2201      	movs	r2, #1
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f000 ff02 	bl	800642c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a28      	ldr	r2, [pc, #160]	; (80056d0 <HAL_TIM_PWM_Start+0x160>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d004      	beq.n	800563c <HAL_TIM_PWM_Start+0xcc>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a27      	ldr	r2, [pc, #156]	; (80056d4 <HAL_TIM_PWM_Start+0x164>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d101      	bne.n	8005640 <HAL_TIM_PWM_Start+0xd0>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <HAL_TIM_PWM_Start+0xd2>
 8005640:	2300      	movs	r3, #0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005654:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1d      	ldr	r2, [pc, #116]	; (80056d0 <HAL_TIM_PWM_Start+0x160>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d018      	beq.n	8005692 <HAL_TIM_PWM_Start+0x122>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1b      	ldr	r2, [pc, #108]	; (80056d4 <HAL_TIM_PWM_Start+0x164>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d013      	beq.n	8005692 <HAL_TIM_PWM_Start+0x122>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005672:	d00e      	beq.n	8005692 <HAL_TIM_PWM_Start+0x122>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a17      	ldr	r2, [pc, #92]	; (80056d8 <HAL_TIM_PWM_Start+0x168>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d009      	beq.n	8005692 <HAL_TIM_PWM_Start+0x122>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a16      	ldr	r2, [pc, #88]	; (80056dc <HAL_TIM_PWM_Start+0x16c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d004      	beq.n	8005692 <HAL_TIM_PWM_Start+0x122>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a14      	ldr	r2, [pc, #80]	; (80056e0 <HAL_TIM_PWM_Start+0x170>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d111      	bne.n	80056b6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2b06      	cmp	r3, #6
 80056a2:	d010      	beq.n	80056c6 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056b4:	e007      	b.n	80056c6 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f042 0201 	orr.w	r2, r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40012c00 	.word	0x40012c00
 80056d4:	40013400 	.word	0x40013400
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800
 80056e0:	40000c00 	.word	0x40000c00

080056e4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e093      	b.n	8005820 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d106      	bne.n	8005712 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f7fd feb9 	bl	8003484 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2202      	movs	r2, #2
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6812      	ldr	r2, [r2, #0]
 8005724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005728:	f023 0307 	bic.w	r3, r3, #7
 800572c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3304      	adds	r3, #4
 8005736:	4619      	mov	r1, r3
 8005738:	4610      	mov	r0, r2
 800573a:	f000 fbbb 	bl	8005eb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005766:	f023 0303 	bic.w	r3, r3, #3
 800576a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	021b      	lsls	r3, r3, #8
 8005776:	4313      	orrs	r3, r2
 8005778:	693a      	ldr	r2, [r7, #16]
 800577a:	4313      	orrs	r3, r2
 800577c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005784:	f023 030c 	bic.w	r3, r3, #12
 8005788:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005790:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	4313      	orrs	r3, r2
 80057a2:	693a      	ldr	r2, [r7, #16]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	011a      	lsls	r2, r3, #4
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	031b      	lsls	r3, r3, #12
 80057b4:	4313      	orrs	r3, r2
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80057c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	4313      	orrs	r3, r2
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2201      	movs	r2, #1
 8005812:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005838:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005840:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005848:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005850:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d110      	bne.n	800587a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d102      	bne.n	8005864 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800585e:	7b7b      	ldrb	r3, [r7, #13]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d001      	beq.n	8005868 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e069      	b.n	800593c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005878:	e031      	b.n	80058de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b04      	cmp	r3, #4
 800587e:	d110      	bne.n	80058a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005880:	7bbb      	ldrb	r3, [r7, #14]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d102      	bne.n	800588c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005886:	7b3b      	ldrb	r3, [r7, #12]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d001      	beq.n	8005890 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e055      	b.n	800593c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2202      	movs	r2, #2
 8005894:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058a0:	e01d      	b.n	80058de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058a2:	7bfb      	ldrb	r3, [r7, #15]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d108      	bne.n	80058ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80058a8:	7bbb      	ldrb	r3, [r7, #14]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d105      	bne.n	80058ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ae:	7b7b      	ldrb	r3, [r7, #13]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d102      	bne.n	80058ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80058b4:	7b3b      	ldrb	r3, [r7, #12]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d001      	beq.n	80058be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e03e      	b.n	800593c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2202      	movs	r2, #2
 80058c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2202      	movs	r2, #2
 80058d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2202      	movs	r2, #2
 80058da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_TIM_Encoder_Start+0xc4>
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b04      	cmp	r3, #4
 80058e8:	d008      	beq.n	80058fc <HAL_TIM_Encoder_Start+0xd4>
 80058ea:	e00f      	b.n	800590c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2201      	movs	r2, #1
 80058f2:	2100      	movs	r1, #0
 80058f4:	4618      	mov	r0, r3
 80058f6:	f000 fd99 	bl	800642c <TIM_CCxChannelCmd>
      break;
 80058fa:	e016      	b.n	800592a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2201      	movs	r2, #1
 8005902:	2104      	movs	r1, #4
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fd91 	bl	800642c <TIM_CCxChannelCmd>
      break;
 800590a:	e00e      	b.n	800592a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2201      	movs	r2, #1
 8005912:	2100      	movs	r1, #0
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fd89 	bl	800642c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2201      	movs	r2, #1
 8005920:	2104      	movs	r1, #4
 8005922:	4618      	mov	r0, r3
 8005924:	f000 fd82 	bl	800642c <TIM_CCxChannelCmd>
      break;
 8005928:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f042 0201 	orr.w	r2, r2, #1
 8005938:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3710      	adds	r7, #16
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0302 	and.w	r3, r3, #2
 8005956:	2b02      	cmp	r3, #2
 8005958:	d122      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b02      	cmp	r3, #2
 8005966:	d11b      	bne.n	80059a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0202 	mvn.w	r2, #2
 8005970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	f003 0303 	and.w	r3, r3, #3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 fa78 	bl	8005e7c <HAL_TIM_IC_CaptureCallback>
 800598c:	e005      	b.n	800599a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fa6b 	bl	8005e6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fa7a 	bl	8005e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d122      	bne.n	80059f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d11b      	bne.n	80059f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0204 	mvn.w	r2, #4
 80059c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2202      	movs	r2, #2
 80059ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 fa4e 	bl	8005e7c <HAL_TIM_IC_CaptureCallback>
 80059e0:	e005      	b.n	80059ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fa41 	bl	8005e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 fa50 	bl	8005e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	2b08      	cmp	r3, #8
 8005a00:	d122      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d11b      	bne.n	8005a48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0208 	mvn.w	r2, #8
 8005a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2204      	movs	r2, #4
 8005a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69db      	ldr	r3, [r3, #28]
 8005a26:	f003 0303 	and.w	r3, r3, #3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fa24 	bl	8005e7c <HAL_TIM_IC_CaptureCallback>
 8005a34:	e005      	b.n	8005a42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fa17 	bl	8005e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 fa26 	bl	8005e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0310 	and.w	r3, r3, #16
 8005a52:	2b10      	cmp	r3, #16
 8005a54:	d122      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0310 	and.w	r3, r3, #16
 8005a60:	2b10      	cmp	r3, #16
 8005a62:	d11b      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0210 	mvn.w	r2, #16
 8005a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2208      	movs	r2, #8
 8005a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f9fa 	bl	8005e7c <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f9ed 	bl	8005e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f9fc 	bl	8005e8e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0301 	and.w	r3, r3, #1
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d10e      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d107      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0201 	mvn.w	r2, #1
 8005ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f9c8 	bl	8005e58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad2:	2b80      	cmp	r3, #128	; 0x80
 8005ad4:	d10e      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae0:	2b80      	cmp	r3, #128	; 0x80
 8005ae2:	d107      	bne.n	8005af4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fd86 	bl	8006600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	d10e      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0c:	2b40      	cmp	r3, #64	; 0x40
 8005b0e:	d107      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f9c0 	bl	8005ea0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0320 	and.w	r3, r3, #32
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d10e      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0320 	and.w	r3, r3, #32
 8005b38:	2b20      	cmp	r3, #32
 8005b3a:	d107      	bne.n	8005b4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0220 	mvn.w	r2, #32
 8005b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fd51 	bl	80065ee <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	3708      	adds	r7, #8
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d101      	bne.n	8005b6e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005b6a:	2302      	movs	r3, #2
 8005b6c:	e0ac      	b.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2b0c      	cmp	r3, #12
 8005b7a:	f200 809f 	bhi.w	8005cbc <HAL_TIM_PWM_ConfigChannel+0x168>
 8005b7e:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b84:	08005bb9 	.word	0x08005bb9
 8005b88:	08005cbd 	.word	0x08005cbd
 8005b8c:	08005cbd 	.word	0x08005cbd
 8005b90:	08005cbd 	.word	0x08005cbd
 8005b94:	08005bf9 	.word	0x08005bf9
 8005b98:	08005cbd 	.word	0x08005cbd
 8005b9c:	08005cbd 	.word	0x08005cbd
 8005ba0:	08005cbd 	.word	0x08005cbd
 8005ba4:	08005c3b 	.word	0x08005c3b
 8005ba8:	08005cbd 	.word	0x08005cbd
 8005bac:	08005cbd 	.word	0x08005cbd
 8005bb0:	08005cbd 	.word	0x08005cbd
 8005bb4:	08005c7b 	.word	0x08005c7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 f9f2 	bl	8005fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0208 	orr.w	r2, r2, #8
 8005bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0204 	bic.w	r2, r2, #4
 8005be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6999      	ldr	r1, [r3, #24]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	691a      	ldr	r2, [r3, #16]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	619a      	str	r2, [r3, #24]
      break;
 8005bf6:	e062      	b.n	8005cbe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fa42 	bl	8006088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6999      	ldr	r1, [r3, #24]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	021a      	lsls	r2, r3, #8
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	619a      	str	r2, [r3, #24]
      break;
 8005c38:	e041      	b.n	8005cbe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68b9      	ldr	r1, [r7, #8]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fa95 	bl	8006170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f042 0208 	orr.w	r2, r2, #8
 8005c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f022 0204 	bic.w	r2, r2, #4
 8005c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69d9      	ldr	r1, [r3, #28]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	691a      	ldr	r2, [r3, #16]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	61da      	str	r2, [r3, #28]
      break;
 8005c78:	e021      	b.n	8005cbe <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	68b9      	ldr	r1, [r7, #8]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f000 fae9 	bl	8006258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ca4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69d9      	ldr	r1, [r3, #28]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	021a      	lsls	r2, r3, #8
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	61da      	str	r2, [r3, #28]
      break;
 8005cba:	e000      	b.n	8005cbe <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005cbc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d101      	bne.n	8005ce8 <HAL_TIM_ConfigClockSource+0x18>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	e0b3      	b.n	8005e50 <HAL_TIM_ConfigClockSource+0x180>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d06:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d0e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d20:	d03e      	beq.n	8005da0 <HAL_TIM_ConfigClockSource+0xd0>
 8005d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d26:	f200 8087 	bhi.w	8005e38 <HAL_TIM_ConfigClockSource+0x168>
 8005d2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d2e:	f000 8085 	beq.w	8005e3c <HAL_TIM_ConfigClockSource+0x16c>
 8005d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d36:	d87f      	bhi.n	8005e38 <HAL_TIM_ConfigClockSource+0x168>
 8005d38:	2b70      	cmp	r3, #112	; 0x70
 8005d3a:	d01a      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0xa2>
 8005d3c:	2b70      	cmp	r3, #112	; 0x70
 8005d3e:	d87b      	bhi.n	8005e38 <HAL_TIM_ConfigClockSource+0x168>
 8005d40:	2b60      	cmp	r3, #96	; 0x60
 8005d42:	d050      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0x116>
 8005d44:	2b60      	cmp	r3, #96	; 0x60
 8005d46:	d877      	bhi.n	8005e38 <HAL_TIM_ConfigClockSource+0x168>
 8005d48:	2b50      	cmp	r3, #80	; 0x50
 8005d4a:	d03c      	beq.n	8005dc6 <HAL_TIM_ConfigClockSource+0xf6>
 8005d4c:	2b50      	cmp	r3, #80	; 0x50
 8005d4e:	d873      	bhi.n	8005e38 <HAL_TIM_ConfigClockSource+0x168>
 8005d50:	2b40      	cmp	r3, #64	; 0x40
 8005d52:	d058      	beq.n	8005e06 <HAL_TIM_ConfigClockSource+0x136>
 8005d54:	2b40      	cmp	r3, #64	; 0x40
 8005d56:	d86f      	bhi.n	8005e38 <HAL_TIM_ConfigClockSource+0x168>
 8005d58:	2b30      	cmp	r3, #48	; 0x30
 8005d5a:	d064      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x156>
 8005d5c:	2b30      	cmp	r3, #48	; 0x30
 8005d5e:	d86b      	bhi.n	8005e38 <HAL_TIM_ConfigClockSource+0x168>
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	d060      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x156>
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d867      	bhi.n	8005e38 <HAL_TIM_ConfigClockSource+0x168>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d05c      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x156>
 8005d6c:	2b10      	cmp	r3, #16
 8005d6e:	d05a      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d70:	e062      	b.n	8005e38 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6899      	ldr	r1, [r3, #8]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	685a      	ldr	r2, [r3, #4]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f000 fb34 	bl	80063ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d94:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	609a      	str	r2, [r3, #8]
      break;
 8005d9e:	e04e      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6818      	ldr	r0, [r3, #0]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	6899      	ldr	r1, [r3, #8]
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f000 fb1d 	bl	80063ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005dc2:	609a      	str	r2, [r3, #8]
      break;
 8005dc4:	e03b      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6818      	ldr	r0, [r3, #0]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	6859      	ldr	r1, [r3, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f000 fa94 	bl	8006300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2150      	movs	r1, #80	; 0x50
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 faeb 	bl	80063ba <TIM_ITRx_SetConfig>
      break;
 8005de4:	e02b      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6859      	ldr	r1, [r3, #4]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	461a      	mov	r2, r3
 8005df4:	f000 fab2 	bl	800635c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2160      	movs	r1, #96	; 0x60
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fadb 	bl	80063ba <TIM_ITRx_SetConfig>
      break;
 8005e04:	e01b      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6818      	ldr	r0, [r3, #0]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	6859      	ldr	r1, [r3, #4]
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	461a      	mov	r2, r3
 8005e14:	f000 fa74 	bl	8006300 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2140      	movs	r1, #64	; 0x40
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f000 facb 	bl	80063ba <TIM_ITRx_SetConfig>
      break;
 8005e24:	e00b      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	4610      	mov	r0, r2
 8005e32:	f000 fac2 	bl	80063ba <TIM_ITRx_SetConfig>
        break;
 8005e36:	e002      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e38:	bf00      	nop
 8005e3a:	e000      	b.n	8005e3e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005e3c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3710      	adds	r7, #16
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr

08005e6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bc80      	pop	{r7}
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bc80      	pop	{r7}
 8005e8c:	4770      	bx	lr

08005e8e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e8e:	b480      	push	{r7}
 8005e90:	b083      	sub	sp, #12
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bc80      	pop	{r7}
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ea8:	bf00      	nop
 8005eaa:	370c      	adds	r7, #12
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bc80      	pop	{r7}
 8005eb0:	4770      	bx	lr
	...

08005eb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b085      	sub	sp, #20
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a33      	ldr	r2, [pc, #204]	; (8005f94 <TIM_Base_SetConfig+0xe0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d013      	beq.n	8005ef4 <TIM_Base_SetConfig+0x40>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a32      	ldr	r2, [pc, #200]	; (8005f98 <TIM_Base_SetConfig+0xe4>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00f      	beq.n	8005ef4 <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eda:	d00b      	beq.n	8005ef4 <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a2f      	ldr	r2, [pc, #188]	; (8005f9c <TIM_Base_SetConfig+0xe8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d007      	beq.n	8005ef4 <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a2e      	ldr	r2, [pc, #184]	; (8005fa0 <TIM_Base_SetConfig+0xec>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d003      	beq.n	8005ef4 <TIM_Base_SetConfig+0x40>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a2d      	ldr	r2, [pc, #180]	; (8005fa4 <TIM_Base_SetConfig+0xf0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d108      	bne.n	8005f06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a22      	ldr	r2, [pc, #136]	; (8005f94 <TIM_Base_SetConfig+0xe0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d013      	beq.n	8005f36 <TIM_Base_SetConfig+0x82>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a21      	ldr	r2, [pc, #132]	; (8005f98 <TIM_Base_SetConfig+0xe4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d00f      	beq.n	8005f36 <TIM_Base_SetConfig+0x82>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f1c:	d00b      	beq.n	8005f36 <TIM_Base_SetConfig+0x82>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1e      	ldr	r2, [pc, #120]	; (8005f9c <TIM_Base_SetConfig+0xe8>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d007      	beq.n	8005f36 <TIM_Base_SetConfig+0x82>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1d      	ldr	r2, [pc, #116]	; (8005fa0 <TIM_Base_SetConfig+0xec>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d003      	beq.n	8005f36 <TIM_Base_SetConfig+0x82>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a1c      	ldr	r2, [pc, #112]	; (8005fa4 <TIM_Base_SetConfig+0xf0>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d108      	bne.n	8005f48 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	689a      	ldr	r2, [r3, #8]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a09      	ldr	r2, [pc, #36]	; (8005f94 <TIM_Base_SetConfig+0xe0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <TIM_Base_SetConfig+0xc8>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a08      	ldr	r2, [pc, #32]	; (8005f98 <TIM_Base_SetConfig+0xe4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d103      	bne.n	8005f84 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691a      	ldr	r2, [r3, #16]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	615a      	str	r2, [r3, #20]
}
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr
 8005f94:	40012c00 	.word	0x40012c00
 8005f98:	40013400 	.word	0x40013400
 8005f9c:	40000400 	.word	0x40000400
 8005fa0:	40000800 	.word	0x40000800
 8005fa4:	40000c00 	.word	0x40000c00

08005fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	f023 0201 	bic.w	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0303 	bic.w	r3, r3, #3
 8005fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 0302 	bic.w	r3, r3, #2
 8005ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a20      	ldr	r2, [pc, #128]	; (8006080 <TIM_OC1_SetConfig+0xd8>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d003      	beq.n	800600c <TIM_OC1_SetConfig+0x64>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a1f      	ldr	r2, [pc, #124]	; (8006084 <TIM_OC1_SetConfig+0xdc>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d10c      	bne.n	8006026 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f023 0308 	bic.w	r3, r3, #8
 8006012:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	697a      	ldr	r2, [r7, #20]
 800601a:	4313      	orrs	r3, r2
 800601c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f023 0304 	bic.w	r3, r3, #4
 8006024:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a15      	ldr	r2, [pc, #84]	; (8006080 <TIM_OC1_SetConfig+0xd8>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d003      	beq.n	8006036 <TIM_OC1_SetConfig+0x8e>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a14      	ldr	r2, [pc, #80]	; (8006084 <TIM_OC1_SetConfig+0xdc>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d111      	bne.n	800605a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800603c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006044:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	693a      	ldr	r2, [r7, #16]
 800605e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	621a      	str	r2, [r3, #32]
}
 8006074:	bf00      	nop
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	bc80      	pop	{r7}
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40012c00 	.word	0x40012c00
 8006084:	40013400 	.word	0x40013400

08006088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	f023 0210 	bic.w	r2, r3, #16
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	021b      	lsls	r3, r3, #8
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f023 0320 	bic.w	r3, r3, #32
 80060d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	011b      	lsls	r3, r3, #4
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	4313      	orrs	r3, r2
 80060de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a21      	ldr	r2, [pc, #132]	; (8006168 <TIM_OC2_SetConfig+0xe0>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d003      	beq.n	80060f0 <TIM_OC2_SetConfig+0x68>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a20      	ldr	r2, [pc, #128]	; (800616c <TIM_OC2_SetConfig+0xe4>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d10d      	bne.n	800610c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800610a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a16      	ldr	r2, [pc, #88]	; (8006168 <TIM_OC2_SetConfig+0xe0>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d003      	beq.n	800611c <TIM_OC2_SetConfig+0x94>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a15      	ldr	r2, [pc, #84]	; (800616c <TIM_OC2_SetConfig+0xe4>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d113      	bne.n	8006144 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800612a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr
 8006168:	40012c00 	.word	0x40012c00
 800616c:	40013400 	.word	0x40013400

08006170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	69db      	ldr	r3, [r3, #28]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800619e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0303 	bic.w	r3, r3, #3
 80061a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	021b      	lsls	r3, r3, #8
 80061c0:	697a      	ldr	r2, [r7, #20]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a21      	ldr	r2, [pc, #132]	; (8006250 <TIM_OC3_SetConfig+0xe0>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d003      	beq.n	80061d6 <TIM_OC3_SetConfig+0x66>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a20      	ldr	r2, [pc, #128]	; (8006254 <TIM_OC3_SetConfig+0xe4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d10d      	bne.n	80061f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	021b      	lsls	r3, r3, #8
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	4313      	orrs	r3, r2
 80061e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a16      	ldr	r2, [pc, #88]	; (8006250 <TIM_OC3_SetConfig+0xe0>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d003      	beq.n	8006202 <TIM_OC3_SetConfig+0x92>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a15      	ldr	r2, [pc, #84]	; (8006254 <TIM_OC3_SetConfig+0xe4>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d113      	bne.n	800622a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	011b      	lsls	r3, r3, #4
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	693a      	ldr	r2, [r7, #16]
 8006226:	4313      	orrs	r3, r2
 8006228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	621a      	str	r2, [r3, #32]
}
 8006244:	bf00      	nop
 8006246:	371c      	adds	r7, #28
 8006248:	46bd      	mov	sp, r7
 800624a:	bc80      	pop	{r7}
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	40012c00 	.word	0x40012c00
 8006254:	40013400 	.word	0x40013400

08006258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006258:	b480      	push	{r7}
 800625a:	b087      	sub	sp, #28
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a1b      	ldr	r3, [r3, #32]
 8006272:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800628e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	021b      	lsls	r3, r3, #8
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4313      	orrs	r3, r2
 800629a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	031b      	lsls	r3, r3, #12
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a11      	ldr	r2, [pc, #68]	; (80062f8 <TIM_OC4_SetConfig+0xa0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d003      	beq.n	80062c0 <TIM_OC4_SetConfig+0x68>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a10      	ldr	r2, [pc, #64]	; (80062fc <TIM_OC4_SetConfig+0xa4>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d109      	bne.n	80062d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	695b      	ldr	r3, [r3, #20]
 80062cc:	019b      	lsls	r3, r3, #6
 80062ce:	697a      	ldr	r2, [r7, #20]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	621a      	str	r2, [r3, #32]
}
 80062ee:	bf00      	nop
 80062f0:	371c      	adds	r7, #28
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bc80      	pop	{r7}
 80062f6:	4770      	bx	lr
 80062f8:	40012c00 	.word	0x40012c00
 80062fc:	40013400 	.word	0x40013400

08006300 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006300:	b480      	push	{r7}
 8006302:	b087      	sub	sp, #28
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	f023 0201 	bic.w	r2, r3, #1
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	699b      	ldr	r3, [r3, #24]
 8006322:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800632a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f023 030a 	bic.w	r3, r3, #10
 800633c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr

0800635c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	f023 0210 	bic.w	r2, r3, #16
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	6a1b      	ldr	r3, [r3, #32]
 800637e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006386:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	031b      	lsls	r3, r3, #12
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	4313      	orrs	r3, r2
 8006390:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006398:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	693a      	ldr	r2, [r7, #16]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	621a      	str	r2, [r3, #32]
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr

080063ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063d2:	683a      	ldr	r2, [r7, #0]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4313      	orrs	r3, r2
 80063d8:	f043 0307 	orr.w	r3, r3, #7
 80063dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	609a      	str	r2, [r3, #8]
}
 80063e4:	bf00      	nop
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bc80      	pop	{r7}
 80063ec:	4770      	bx	lr

080063ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b087      	sub	sp, #28
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	60f8      	str	r0, [r7, #12]
 80063f6:	60b9      	str	r1, [r7, #8]
 80063f8:	607a      	str	r2, [r7, #4]
 80063fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006408:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	021a      	lsls	r2, r3, #8
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	431a      	orrs	r2, r3
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	4313      	orrs	r3, r2
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	609a      	str	r2, [r3, #8]
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	bc80      	pop	{r7}
 800642a:	4770      	bx	lr

0800642c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800642c:	b480      	push	{r7}
 800642e:	b087      	sub	sp, #28
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f003 031f 	and.w	r3, r3, #31
 800643e:	2201      	movs	r2, #1
 8006440:	fa02 f303 	lsl.w	r3, r2, r3
 8006444:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	6a1a      	ldr	r2, [r3, #32]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	43db      	mvns	r3, r3
 800644e:	401a      	ands	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a1a      	ldr	r2, [r3, #32]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	f003 031f 	and.w	r3, r3, #31
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	fa01 f303 	lsl.w	r3, r1, r3
 8006464:	431a      	orrs	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	621a      	str	r2, [r3, #32]
}
 800646a:	bf00      	nop
 800646c:	371c      	adds	r7, #28
 800646e:	46bd      	mov	sp, r7
 8006470:	bc80      	pop	{r7}
 8006472:	4770      	bx	lr

08006474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006484:	2b01      	cmp	r3, #1
 8006486:	d101      	bne.n	800648c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006488:	2302      	movs	r3, #2
 800648a:	e050      	b.n	800652e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2202      	movs	r2, #2
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1b      	ldr	r2, [pc, #108]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d018      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a19      	ldr	r2, [pc, #100]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d013      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e2:	d00e      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a15      	ldr	r2, [pc, #84]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d009      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a14      	ldr	r2, [pc, #80]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d004      	beq.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a12      	ldr	r2, [pc, #72]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d10c      	bne.n	800651c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006508:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	4313      	orrs	r3, r2
 8006512:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3714      	adds	r7, #20
 8006532:	46bd      	mov	sp, r7
 8006534:	bc80      	pop	{r7}
 8006536:	4770      	bx	lr
 8006538:	40012c00 	.word	0x40012c00
 800653c:	40013400 	.word	0x40013400
 8006540:	40000400 	.word	0x40000400
 8006544:	40000800 	.word	0x40000800
 8006548:	40000c00 	.word	0x40000c00

0800654c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800654c:	b480      	push	{r7}
 800654e:	b085      	sub	sp, #20
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006560:	2b01      	cmp	r3, #1
 8006562:	d101      	bne.n	8006568 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006564:	2302      	movs	r3, #2
 8006566:	e03d      	b.n	80065e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	4313      	orrs	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	4313      	orrs	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4313      	orrs	r3, r2
 80065a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	69db      	ldr	r3, [r3, #28]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bc80      	pop	{r7}
 80065ec:	4770      	bx	lr

080065ee <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065ee:	b480      	push	{r7}
 80065f0:	b083      	sub	sp, #12
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065f6:	bf00      	nop
 80065f8:	370c      	adds	r7, #12
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bc80      	pop	{r7}
 80065fe:	4770      	bx	lr

08006600 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr

08006612 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b082      	sub	sp, #8
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d101      	bne.n	8006624 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	e03f      	b.n	80066a4 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800662a:	b2db      	uxtb	r3, r3
 800662c:	2b00      	cmp	r3, #0
 800662e:	d106      	bne.n	800663e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f7fd f869 	bl	8003710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2224      	movs	r2, #36	; 0x24
 8006642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68da      	ldr	r2, [r3, #12]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006654:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fab0 	bl	8006bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691a      	ldr	r2, [r3, #16]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800666a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695a      	ldr	r2, [r3, #20]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800667a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68da      	ldr	r2, [r3, #12]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800668a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3708      	adds	r7, #8
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}

080066ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b08a      	sub	sp, #40	; 0x28
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	60f8      	str	r0, [r7, #12]
 80066b4:	60b9      	str	r1, [r7, #8]
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	4613      	mov	r3, r2
 80066ba:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066bc:	2300      	movs	r3, #0
 80066be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	2b20      	cmp	r3, #32
 80066ca:	d17c      	bne.n	80067c6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_UART_Transmit+0x2c>
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d101      	bne.n	80066dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e075      	b.n	80067c8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d101      	bne.n	80066ea <HAL_UART_Transmit+0x3e>
 80066e6:	2302      	movs	r3, #2
 80066e8:	e06e      	b.n	80067c8 <HAL_UART_Transmit+0x11c>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2201      	movs	r2, #1
 80066ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2221      	movs	r2, #33	; 0x21
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006700:	f7fd faa6 	bl	8003c50 <HAL_GetTick>
 8006704:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	88fa      	ldrh	r2, [r7, #6]
 800670a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	88fa      	ldrh	r2, [r7, #6]
 8006710:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671a:	d108      	bne.n	800672e <HAL_UART_Transmit+0x82>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d104      	bne.n	800672e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006724:	2300      	movs	r3, #0
 8006726:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	61bb      	str	r3, [r7, #24]
 800672c:	e003      	b.n	8006736 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006732:	2300      	movs	r3, #0
 8006734:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800673e:	e02a      	b.n	8006796 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2200      	movs	r2, #0
 8006748:	2180      	movs	r1, #128	; 0x80
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 f946 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e036      	b.n	80067c8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d10b      	bne.n	8006778 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800676e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	3302      	adds	r3, #2
 8006774:	61bb      	str	r3, [r7, #24]
 8006776:	e007      	b.n	8006788 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	781a      	ldrb	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	3301      	adds	r3, #1
 8006786:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800678c:	b29b      	uxth	r3, r3
 800678e:	3b01      	subs	r3, #1
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800679a:	b29b      	uxth	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1cf      	bne.n	8006740 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2200      	movs	r2, #0
 80067a8:	2140      	movs	r1, #64	; 0x40
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 f916 	bl	80069dc <UART_WaitOnFlagUntilTimeout>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e006      	b.n	80067c8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2220      	movs	r2, #32
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80067c2:	2300      	movs	r3, #0
 80067c4:	e000      	b.n	80067c8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80067c6:	2302      	movs	r3, #2
  }
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3720      	adds	r7, #32
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	4613      	mov	r3, r2
 80067dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	2b20      	cmp	r3, #32
 80067e8:	d11d      	bne.n	8006826 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_UART_Receive_DMA+0x26>
 80067f0:	88fb      	ldrh	r3, [r7, #6]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e016      	b.n	8006828 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006800:	2b01      	cmp	r3, #1
 8006802:	d101      	bne.n	8006808 <HAL_UART_Receive_DMA+0x38>
 8006804:	2302      	movs	r3, #2
 8006806:	e00f      	b.n	8006828 <HAL_UART_Receive_DMA+0x58>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	461a      	mov	r2, r3
 800681a:	68b9      	ldr	r1, [r7, #8]
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f927 	bl	8006a70 <UART_Start_Receive_DMA>
 8006822:	4603      	mov	r3, r0
 8006824:	e000      	b.n	8006828 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006826:	2302      	movs	r3, #2
  }
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	bc80      	pop	{r7}
 8006840:	4770      	bx	lr

08006842 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	bc80      	pop	{r7}
 8006852:	4770      	bx	lr

08006854 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800685c:	bf00      	nop
 800685e:	370c      	adds	r7, #12
 8006860:	46bd      	mov	sp, r7
 8006862:	bc80      	pop	{r7}
 8006864:	4770      	bx	lr

08006866 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	460b      	mov	r3, r1
 8006870:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	bc80      	pop	{r7}
 800687a:	4770      	bx	lr

0800687c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 0320 	and.w	r3, r3, #32
 8006894:	2b00      	cmp	r3, #0
 8006896:	d12a      	bne.n	80068ee <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068ac:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	695a      	ldr	r2, [r3, #20]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f022 0201 	bic.w	r2, r2, #1
 80068bc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	695a      	ldr	r2, [r3, #20]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068cc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d107      	bne.n	80068ee <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68da      	ldr	r2, [r3, #12]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0210 	bic.w	r2, r2, #16
 80068ec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d106      	bne.n	8006904 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068fa:	4619      	mov	r1, r3
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f7ff ffb2 	bl	8006866 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006902:	e002      	b.n	800690a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006904:	68f8      	ldr	r0, [r7, #12]
 8006906:	f7ff ff93 	bl	8006830 <HAL_UART_RxCpltCallback>
}
 800690a:	bf00      	nop
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	2b01      	cmp	r3, #1
 8006926:	d108      	bne.n	800693a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800692c:	085b      	lsrs	r3, r3, #1
 800692e:	b29b      	uxth	r3, r3
 8006930:	4619      	mov	r1, r3
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f7ff ff97 	bl	8006866 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006938:	e002      	b.n	8006940 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f7ff ff81 	bl	8006842 <HAL_UART_RxHalfCpltCallback>
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006958:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006964:	2b00      	cmp	r3, #0
 8006966:	bf14      	ite	ne
 8006968:	2301      	movne	r3, #1
 800696a:	2300      	moveq	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b21      	cmp	r3, #33	; 0x21
 800697a:	d108      	bne.n	800698e <UART_DMAError+0x46>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d005      	beq.n	800698e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2200      	movs	r2, #0
 8006986:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006988:	68b8      	ldr	r0, [r7, #8]
 800698a:	f000 f8d5 	bl	8006b38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006998:	2b00      	cmp	r3, #0
 800699a:	bf14      	ite	ne
 800699c:	2301      	movne	r3, #1
 800699e:	2300      	moveq	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b22      	cmp	r3, #34	; 0x22
 80069ae:	d108      	bne.n	80069c2 <UART_DMAError+0x7a>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d005      	beq.n	80069c2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	2200      	movs	r2, #0
 80069ba:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80069bc:	68b8      	ldr	r0, [r7, #8]
 80069be:	f000 f8d0 	bl	8006b62 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	f043 0210 	orr.w	r2, r3, #16
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069ce:	68b8      	ldr	r0, [r7, #8]
 80069d0:	f7ff ff40 	bl	8006854 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	603b      	str	r3, [r7, #0]
 80069e8:	4613      	mov	r3, r2
 80069ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ec:	e02c      	b.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f4:	d028      	beq.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d007      	beq.n	8006a0c <UART_WaitOnFlagUntilTimeout+0x30>
 80069fc:	f7fd f928 	bl	8003c50 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d21d      	bcs.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a1a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695a      	ldr	r2, [r3, #20]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0201 	bic.w	r2, r2, #1
 8006a2a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e00f      	b.n	8006a68 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	4013      	ands	r3, r2
 8006a52:	68ba      	ldr	r2, [r7, #8]
 8006a54:	429a      	cmp	r2, r3
 8006a56:	bf0c      	ite	eq
 8006a58:	2301      	moveq	r3, #1
 8006a5a:	2300      	movne	r3, #0
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	461a      	mov	r2, r3
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d0c3      	beq.n	80069ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a66:	2300      	movs	r3, #0
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3710      	adds	r7, #16
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	88fa      	ldrh	r2, [r7, #6]
 8006a88:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2222      	movs	r2, #34	; 0x22
 8006a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	4a23      	ldr	r2, [pc, #140]	; (8006b2c <UART_Start_Receive_DMA+0xbc>)
 8006a9e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa4:	4a22      	ldr	r2, [pc, #136]	; (8006b30 <UART_Start_Receive_DMA+0xc0>)
 8006aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aac:	4a21      	ldr	r2, [pc, #132]	; (8006b34 <UART_Start_Receive_DMA+0xc4>)
 8006aae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ab8:	f107 0308 	add.w	r3, r7, #8
 8006abc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4619      	mov	r1, r3
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	88fb      	ldrh	r3, [r7, #6]
 8006ad0:	f7fd fa70 	bl	8003fb4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	613b      	str	r3, [r7, #16]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b00:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	695a      	ldr	r2, [r3, #20]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f042 0201 	orr.w	r2, r2, #1
 8006b10:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	695a      	ldr	r2, [r3, #20]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b20:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	0800687d 	.word	0x0800687d
 8006b30:	08006913 	.word	0x08006913
 8006b34:	08006949 	.word	0x08006949

08006b38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b083      	sub	sp, #12
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68da      	ldr	r2, [r3, #12]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006b4e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2220      	movs	r2, #32
 8006b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006b58:	bf00      	nop
 8006b5a:	370c      	adds	r7, #12
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bc80      	pop	{r7}
 8006b60:	4770      	bx	lr

08006b62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b62:	b480      	push	{r7}
 8006b64:	b083      	sub	sp, #12
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b78:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	695a      	ldr	r2, [r3, #20]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0201 	bic.w	r2, r2, #1
 8006b88:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d107      	bne.n	8006ba2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f022 0210 	bic.w	r2, r2, #16
 8006ba0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2220      	movs	r2, #32
 8006ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc80      	pop	{r7}
 8006bb8:	4770      	bx	lr
	...

08006bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006bf6:	f023 030c 	bic.w	r3, r3, #12
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6812      	ldr	r2, [r2, #0]
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	430b      	orrs	r3, r1
 8006c02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	699a      	ldr	r2, [r3, #24]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a2c      	ldr	r2, [pc, #176]	; (8006cd0 <UART_SetConfig+0x114>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d103      	bne.n	8006c2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006c24:	f7fe fb6a 	bl	80052fc <HAL_RCC_GetPCLK2Freq>
 8006c28:	60f8      	str	r0, [r7, #12]
 8006c2a:	e002      	b.n	8006c32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006c2c:	f7fe fb52 	bl	80052d4 <HAL_RCC_GetPCLK1Freq>
 8006c30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	009a      	lsls	r2, r3, #2
 8006c3c:	441a      	add	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c48:	4a22      	ldr	r2, [pc, #136]	; (8006cd4 <UART_SetConfig+0x118>)
 8006c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c4e:	095b      	lsrs	r3, r3, #5
 8006c50:	0119      	lsls	r1, r3, #4
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	4613      	mov	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4413      	add	r3, r2
 8006c5a:	009a      	lsls	r2, r3, #2
 8006c5c:	441a      	add	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8006c68:	4b1a      	ldr	r3, [pc, #104]	; (8006cd4 <UART_SetConfig+0x118>)
 8006c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8006c6e:	095b      	lsrs	r3, r3, #5
 8006c70:	2064      	movs	r0, #100	; 0x64
 8006c72:	fb00 f303 	mul.w	r3, r0, r3
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	011b      	lsls	r3, r3, #4
 8006c7a:	3332      	adds	r3, #50	; 0x32
 8006c7c:	4a15      	ldr	r2, [pc, #84]	; (8006cd4 <UART_SetConfig+0x118>)
 8006c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c82:	095b      	lsrs	r3, r3, #5
 8006c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c88:	4419      	add	r1, r3
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4413      	add	r3, r2
 8006c92:	009a      	lsls	r2, r3, #2
 8006c94:	441a      	add	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ca0:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <UART_SetConfig+0x118>)
 8006ca2:	fba3 0302 	umull	r0, r3, r3, r2
 8006ca6:	095b      	lsrs	r3, r3, #5
 8006ca8:	2064      	movs	r0, #100	; 0x64
 8006caa:	fb00 f303 	mul.w	r3, r0, r3
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	011b      	lsls	r3, r3, #4
 8006cb2:	3332      	adds	r3, #50	; 0x32
 8006cb4:	4a07      	ldr	r2, [pc, #28]	; (8006cd4 <UART_SetConfig+0x118>)
 8006cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cba:	095b      	lsrs	r3, r3, #5
 8006cbc:	f003 020f 	and.w	r2, r3, #15
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006cc8:	bf00      	nop
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	40013800 	.word	0x40013800
 8006cd4:	51eb851f 	.word	0x51eb851f

08006cd8 <__assert_func>:
 8006cd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006cda:	4614      	mov	r4, r2
 8006cdc:	461a      	mov	r2, r3
 8006cde:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <__assert_func+0x2c>)
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	68d8      	ldr	r0, [r3, #12]
 8006ce6:	b14c      	cbz	r4, 8006cfc <__assert_func+0x24>
 8006ce8:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <__assert_func+0x30>)
 8006cea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006cee:	9100      	str	r1, [sp, #0]
 8006cf0:	462b      	mov	r3, r5
 8006cf2:	4906      	ldr	r1, [pc, #24]	; (8006d0c <__assert_func+0x34>)
 8006cf4:	f000 f814 	bl	8006d20 <fiprintf>
 8006cf8:	f000 fcea 	bl	80076d0 <abort>
 8006cfc:	4b04      	ldr	r3, [pc, #16]	; (8006d10 <__assert_func+0x38>)
 8006cfe:	461c      	mov	r4, r3
 8006d00:	e7f3      	b.n	8006cea <__assert_func+0x12>
 8006d02:	bf00      	nop
 8006d04:	20000010 	.word	0x20000010
 8006d08:	08008ea4 	.word	0x08008ea4
 8006d0c:	08008eb1 	.word	0x08008eb1
 8006d10:	08008edf 	.word	0x08008edf

08006d14 <__errno>:
 8006d14:	4b01      	ldr	r3, [pc, #4]	; (8006d1c <__errno+0x8>)
 8006d16:	6818      	ldr	r0, [r3, #0]
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	20000010 	.word	0x20000010

08006d20 <fiprintf>:
 8006d20:	b40e      	push	{r1, r2, r3}
 8006d22:	b503      	push	{r0, r1, lr}
 8006d24:	4601      	mov	r1, r0
 8006d26:	ab03      	add	r3, sp, #12
 8006d28:	4805      	ldr	r0, [pc, #20]	; (8006d40 <fiprintf+0x20>)
 8006d2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d2e:	6800      	ldr	r0, [r0, #0]
 8006d30:	9301      	str	r3, [sp, #4]
 8006d32:	f000 f937 	bl	8006fa4 <_vfiprintf_r>
 8006d36:	b002      	add	sp, #8
 8006d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d3c:	b003      	add	sp, #12
 8006d3e:	4770      	bx	lr
 8006d40:	20000010 	.word	0x20000010

08006d44 <__libc_init_array>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	2600      	movs	r6, #0
 8006d48:	4d0c      	ldr	r5, [pc, #48]	; (8006d7c <__libc_init_array+0x38>)
 8006d4a:	4c0d      	ldr	r4, [pc, #52]	; (8006d80 <__libc_init_array+0x3c>)
 8006d4c:	1b64      	subs	r4, r4, r5
 8006d4e:	10a4      	asrs	r4, r4, #2
 8006d50:	42a6      	cmp	r6, r4
 8006d52:	d109      	bne.n	8006d68 <__libc_init_array+0x24>
 8006d54:	f002 f84e 	bl	8008df4 <_init>
 8006d58:	2600      	movs	r6, #0
 8006d5a:	4d0a      	ldr	r5, [pc, #40]	; (8006d84 <__libc_init_array+0x40>)
 8006d5c:	4c0a      	ldr	r4, [pc, #40]	; (8006d88 <__libc_init_array+0x44>)
 8006d5e:	1b64      	subs	r4, r4, r5
 8006d60:	10a4      	asrs	r4, r4, #2
 8006d62:	42a6      	cmp	r6, r4
 8006d64:	d105      	bne.n	8006d72 <__libc_init_array+0x2e>
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d6c:	4798      	blx	r3
 8006d6e:	3601      	adds	r6, #1
 8006d70:	e7ee      	b.n	8006d50 <__libc_init_array+0xc>
 8006d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d76:	4798      	blx	r3
 8006d78:	3601      	adds	r6, #1
 8006d7a:	e7f2      	b.n	8006d62 <__libc_init_array+0x1e>
 8006d7c:	08009150 	.word	0x08009150
 8006d80:	08009150 	.word	0x08009150
 8006d84:	08009150 	.word	0x08009150
 8006d88:	08009154 	.word	0x08009154

08006d8c <memset>:
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	4402      	add	r2, r0
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d100      	bne.n	8006d96 <memset+0xa>
 8006d94:	4770      	bx	lr
 8006d96:	f803 1b01 	strb.w	r1, [r3], #1
 8006d9a:	e7f9      	b.n	8006d90 <memset+0x4>

08006d9c <_free_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4605      	mov	r5, r0
 8006da0:	2900      	cmp	r1, #0
 8006da2:	d040      	beq.n	8006e26 <_free_r+0x8a>
 8006da4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006da8:	1f0c      	subs	r4, r1, #4
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	bfb8      	it	lt
 8006dae:	18e4      	addlt	r4, r4, r3
 8006db0:	f000 fec0 	bl	8007b34 <__malloc_lock>
 8006db4:	4a1c      	ldr	r2, [pc, #112]	; (8006e28 <_free_r+0x8c>)
 8006db6:	6813      	ldr	r3, [r2, #0]
 8006db8:	b933      	cbnz	r3, 8006dc8 <_free_r+0x2c>
 8006dba:	6063      	str	r3, [r4, #4]
 8006dbc:	6014      	str	r4, [r2, #0]
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dc4:	f000 bebc 	b.w	8007b40 <__malloc_unlock>
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d908      	bls.n	8006dde <_free_r+0x42>
 8006dcc:	6820      	ldr	r0, [r4, #0]
 8006dce:	1821      	adds	r1, r4, r0
 8006dd0:	428b      	cmp	r3, r1
 8006dd2:	bf01      	itttt	eq
 8006dd4:	6819      	ldreq	r1, [r3, #0]
 8006dd6:	685b      	ldreq	r3, [r3, #4]
 8006dd8:	1809      	addeq	r1, r1, r0
 8006dda:	6021      	streq	r1, [r4, #0]
 8006ddc:	e7ed      	b.n	8006dba <_free_r+0x1e>
 8006dde:	461a      	mov	r2, r3
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	b10b      	cbz	r3, 8006de8 <_free_r+0x4c>
 8006de4:	42a3      	cmp	r3, r4
 8006de6:	d9fa      	bls.n	8006dde <_free_r+0x42>
 8006de8:	6811      	ldr	r1, [r2, #0]
 8006dea:	1850      	adds	r0, r2, r1
 8006dec:	42a0      	cmp	r0, r4
 8006dee:	d10b      	bne.n	8006e08 <_free_r+0x6c>
 8006df0:	6820      	ldr	r0, [r4, #0]
 8006df2:	4401      	add	r1, r0
 8006df4:	1850      	adds	r0, r2, r1
 8006df6:	4283      	cmp	r3, r0
 8006df8:	6011      	str	r1, [r2, #0]
 8006dfa:	d1e0      	bne.n	8006dbe <_free_r+0x22>
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	4401      	add	r1, r0
 8006e02:	6011      	str	r1, [r2, #0]
 8006e04:	6053      	str	r3, [r2, #4]
 8006e06:	e7da      	b.n	8006dbe <_free_r+0x22>
 8006e08:	d902      	bls.n	8006e10 <_free_r+0x74>
 8006e0a:	230c      	movs	r3, #12
 8006e0c:	602b      	str	r3, [r5, #0]
 8006e0e:	e7d6      	b.n	8006dbe <_free_r+0x22>
 8006e10:	6820      	ldr	r0, [r4, #0]
 8006e12:	1821      	adds	r1, r4, r0
 8006e14:	428b      	cmp	r3, r1
 8006e16:	bf01      	itttt	eq
 8006e18:	6819      	ldreq	r1, [r3, #0]
 8006e1a:	685b      	ldreq	r3, [r3, #4]
 8006e1c:	1809      	addeq	r1, r1, r0
 8006e1e:	6021      	streq	r1, [r4, #0]
 8006e20:	6063      	str	r3, [r4, #4]
 8006e22:	6054      	str	r4, [r2, #4]
 8006e24:	e7cb      	b.n	8006dbe <_free_r+0x22>
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	20000bf8 	.word	0x20000bf8

08006e2c <sbrk_aligned>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	4e0e      	ldr	r6, [pc, #56]	; (8006e68 <sbrk_aligned+0x3c>)
 8006e30:	460c      	mov	r4, r1
 8006e32:	6831      	ldr	r1, [r6, #0]
 8006e34:	4605      	mov	r5, r0
 8006e36:	b911      	cbnz	r1, 8006e3e <sbrk_aligned+0x12>
 8006e38:	f000 fb7a 	bl	8007530 <_sbrk_r>
 8006e3c:	6030      	str	r0, [r6, #0]
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4628      	mov	r0, r5
 8006e42:	f000 fb75 	bl	8007530 <_sbrk_r>
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	d00a      	beq.n	8006e60 <sbrk_aligned+0x34>
 8006e4a:	1cc4      	adds	r4, r0, #3
 8006e4c:	f024 0403 	bic.w	r4, r4, #3
 8006e50:	42a0      	cmp	r0, r4
 8006e52:	d007      	beq.n	8006e64 <sbrk_aligned+0x38>
 8006e54:	1a21      	subs	r1, r4, r0
 8006e56:	4628      	mov	r0, r5
 8006e58:	f000 fb6a 	bl	8007530 <_sbrk_r>
 8006e5c:	3001      	adds	r0, #1
 8006e5e:	d101      	bne.n	8006e64 <sbrk_aligned+0x38>
 8006e60:	f04f 34ff 	mov.w	r4, #4294967295
 8006e64:	4620      	mov	r0, r4
 8006e66:	bd70      	pop	{r4, r5, r6, pc}
 8006e68:	20000bfc 	.word	0x20000bfc

08006e6c <_malloc_r>:
 8006e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e70:	1ccd      	adds	r5, r1, #3
 8006e72:	f025 0503 	bic.w	r5, r5, #3
 8006e76:	3508      	adds	r5, #8
 8006e78:	2d0c      	cmp	r5, #12
 8006e7a:	bf38      	it	cc
 8006e7c:	250c      	movcc	r5, #12
 8006e7e:	2d00      	cmp	r5, #0
 8006e80:	4607      	mov	r7, r0
 8006e82:	db01      	blt.n	8006e88 <_malloc_r+0x1c>
 8006e84:	42a9      	cmp	r1, r5
 8006e86:	d905      	bls.n	8006e94 <_malloc_r+0x28>
 8006e88:	230c      	movs	r3, #12
 8006e8a:	2600      	movs	r6, #0
 8006e8c:	603b      	str	r3, [r7, #0]
 8006e8e:	4630      	mov	r0, r6
 8006e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e94:	4e2e      	ldr	r6, [pc, #184]	; (8006f50 <_malloc_r+0xe4>)
 8006e96:	f000 fe4d 	bl	8007b34 <__malloc_lock>
 8006e9a:	6833      	ldr	r3, [r6, #0]
 8006e9c:	461c      	mov	r4, r3
 8006e9e:	bb34      	cbnz	r4, 8006eee <_malloc_r+0x82>
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4638      	mov	r0, r7
 8006ea4:	f7ff ffc2 	bl	8006e2c <sbrk_aligned>
 8006ea8:	1c43      	adds	r3, r0, #1
 8006eaa:	4604      	mov	r4, r0
 8006eac:	d14d      	bne.n	8006f4a <_malloc_r+0xde>
 8006eae:	6834      	ldr	r4, [r6, #0]
 8006eb0:	4626      	mov	r6, r4
 8006eb2:	2e00      	cmp	r6, #0
 8006eb4:	d140      	bne.n	8006f38 <_malloc_r+0xcc>
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	4631      	mov	r1, r6
 8006eba:	4638      	mov	r0, r7
 8006ebc:	eb04 0803 	add.w	r8, r4, r3
 8006ec0:	f000 fb36 	bl	8007530 <_sbrk_r>
 8006ec4:	4580      	cmp	r8, r0
 8006ec6:	d13a      	bne.n	8006f3e <_malloc_r+0xd2>
 8006ec8:	6821      	ldr	r1, [r4, #0]
 8006eca:	3503      	adds	r5, #3
 8006ecc:	1a6d      	subs	r5, r5, r1
 8006ece:	f025 0503 	bic.w	r5, r5, #3
 8006ed2:	3508      	adds	r5, #8
 8006ed4:	2d0c      	cmp	r5, #12
 8006ed6:	bf38      	it	cc
 8006ed8:	250c      	movcc	r5, #12
 8006eda:	4638      	mov	r0, r7
 8006edc:	4629      	mov	r1, r5
 8006ede:	f7ff ffa5 	bl	8006e2c <sbrk_aligned>
 8006ee2:	3001      	adds	r0, #1
 8006ee4:	d02b      	beq.n	8006f3e <_malloc_r+0xd2>
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	442b      	add	r3, r5
 8006eea:	6023      	str	r3, [r4, #0]
 8006eec:	e00e      	b.n	8006f0c <_malloc_r+0xa0>
 8006eee:	6822      	ldr	r2, [r4, #0]
 8006ef0:	1b52      	subs	r2, r2, r5
 8006ef2:	d41e      	bmi.n	8006f32 <_malloc_r+0xc6>
 8006ef4:	2a0b      	cmp	r2, #11
 8006ef6:	d916      	bls.n	8006f26 <_malloc_r+0xba>
 8006ef8:	1961      	adds	r1, r4, r5
 8006efa:	42a3      	cmp	r3, r4
 8006efc:	6025      	str	r5, [r4, #0]
 8006efe:	bf18      	it	ne
 8006f00:	6059      	strne	r1, [r3, #4]
 8006f02:	6863      	ldr	r3, [r4, #4]
 8006f04:	bf08      	it	eq
 8006f06:	6031      	streq	r1, [r6, #0]
 8006f08:	5162      	str	r2, [r4, r5]
 8006f0a:	604b      	str	r3, [r1, #4]
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f104 060b 	add.w	r6, r4, #11
 8006f12:	f000 fe15 	bl	8007b40 <__malloc_unlock>
 8006f16:	f026 0607 	bic.w	r6, r6, #7
 8006f1a:	1d23      	adds	r3, r4, #4
 8006f1c:	1af2      	subs	r2, r6, r3
 8006f1e:	d0b6      	beq.n	8006e8e <_malloc_r+0x22>
 8006f20:	1b9b      	subs	r3, r3, r6
 8006f22:	50a3      	str	r3, [r4, r2]
 8006f24:	e7b3      	b.n	8006e8e <_malloc_r+0x22>
 8006f26:	6862      	ldr	r2, [r4, #4]
 8006f28:	42a3      	cmp	r3, r4
 8006f2a:	bf0c      	ite	eq
 8006f2c:	6032      	streq	r2, [r6, #0]
 8006f2e:	605a      	strne	r2, [r3, #4]
 8006f30:	e7ec      	b.n	8006f0c <_malloc_r+0xa0>
 8006f32:	4623      	mov	r3, r4
 8006f34:	6864      	ldr	r4, [r4, #4]
 8006f36:	e7b2      	b.n	8006e9e <_malloc_r+0x32>
 8006f38:	4634      	mov	r4, r6
 8006f3a:	6876      	ldr	r6, [r6, #4]
 8006f3c:	e7b9      	b.n	8006eb2 <_malloc_r+0x46>
 8006f3e:	230c      	movs	r3, #12
 8006f40:	4638      	mov	r0, r7
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	f000 fdfc 	bl	8007b40 <__malloc_unlock>
 8006f48:	e7a1      	b.n	8006e8e <_malloc_r+0x22>
 8006f4a:	6025      	str	r5, [r4, #0]
 8006f4c:	e7de      	b.n	8006f0c <_malloc_r+0xa0>
 8006f4e:	bf00      	nop
 8006f50:	20000bf8 	.word	0x20000bf8

08006f54 <__sfputc_r>:
 8006f54:	6893      	ldr	r3, [r2, #8]
 8006f56:	b410      	push	{r4}
 8006f58:	3b01      	subs	r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	6093      	str	r3, [r2, #8]
 8006f5e:	da07      	bge.n	8006f70 <__sfputc_r+0x1c>
 8006f60:	6994      	ldr	r4, [r2, #24]
 8006f62:	42a3      	cmp	r3, r4
 8006f64:	db01      	blt.n	8006f6a <__sfputc_r+0x16>
 8006f66:	290a      	cmp	r1, #10
 8006f68:	d102      	bne.n	8006f70 <__sfputc_r+0x1c>
 8006f6a:	bc10      	pop	{r4}
 8006f6c:	f000 baf0 	b.w	8007550 <__swbuf_r>
 8006f70:	6813      	ldr	r3, [r2, #0]
 8006f72:	1c58      	adds	r0, r3, #1
 8006f74:	6010      	str	r0, [r2, #0]
 8006f76:	7019      	strb	r1, [r3, #0]
 8006f78:	4608      	mov	r0, r1
 8006f7a:	bc10      	pop	{r4}
 8006f7c:	4770      	bx	lr

08006f7e <__sfputs_r>:
 8006f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f80:	4606      	mov	r6, r0
 8006f82:	460f      	mov	r7, r1
 8006f84:	4614      	mov	r4, r2
 8006f86:	18d5      	adds	r5, r2, r3
 8006f88:	42ac      	cmp	r4, r5
 8006f8a:	d101      	bne.n	8006f90 <__sfputs_r+0x12>
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	e007      	b.n	8006fa0 <__sfputs_r+0x22>
 8006f90:	463a      	mov	r2, r7
 8006f92:	4630      	mov	r0, r6
 8006f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f98:	f7ff ffdc 	bl	8006f54 <__sfputc_r>
 8006f9c:	1c43      	adds	r3, r0, #1
 8006f9e:	d1f3      	bne.n	8006f88 <__sfputs_r+0xa>
 8006fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fa4 <_vfiprintf_r>:
 8006fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa8:	460d      	mov	r5, r1
 8006faa:	4614      	mov	r4, r2
 8006fac:	4698      	mov	r8, r3
 8006fae:	4606      	mov	r6, r0
 8006fb0:	b09d      	sub	sp, #116	; 0x74
 8006fb2:	b118      	cbz	r0, 8006fbc <_vfiprintf_r+0x18>
 8006fb4:	6983      	ldr	r3, [r0, #24]
 8006fb6:	b90b      	cbnz	r3, 8006fbc <_vfiprintf_r+0x18>
 8006fb8:	f000 fca8 	bl	800790c <__sinit>
 8006fbc:	4b89      	ldr	r3, [pc, #548]	; (80071e4 <_vfiprintf_r+0x240>)
 8006fbe:	429d      	cmp	r5, r3
 8006fc0:	d11b      	bne.n	8006ffa <_vfiprintf_r+0x56>
 8006fc2:	6875      	ldr	r5, [r6, #4]
 8006fc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fc6:	07d9      	lsls	r1, r3, #31
 8006fc8:	d405      	bmi.n	8006fd6 <_vfiprintf_r+0x32>
 8006fca:	89ab      	ldrh	r3, [r5, #12]
 8006fcc:	059a      	lsls	r2, r3, #22
 8006fce:	d402      	bmi.n	8006fd6 <_vfiprintf_r+0x32>
 8006fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fd2:	f000 fd39 	bl	8007a48 <__retarget_lock_acquire_recursive>
 8006fd6:	89ab      	ldrh	r3, [r5, #12]
 8006fd8:	071b      	lsls	r3, r3, #28
 8006fda:	d501      	bpl.n	8006fe0 <_vfiprintf_r+0x3c>
 8006fdc:	692b      	ldr	r3, [r5, #16]
 8006fde:	b9eb      	cbnz	r3, 800701c <_vfiprintf_r+0x78>
 8006fe0:	4629      	mov	r1, r5
 8006fe2:	4630      	mov	r0, r6
 8006fe4:	f000 fb06 	bl	80075f4 <__swsetup_r>
 8006fe8:	b1c0      	cbz	r0, 800701c <_vfiprintf_r+0x78>
 8006fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fec:	07dc      	lsls	r4, r3, #31
 8006fee:	d50e      	bpl.n	800700e <_vfiprintf_r+0x6a>
 8006ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff4:	b01d      	add	sp, #116	; 0x74
 8006ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ffa:	4b7b      	ldr	r3, [pc, #492]	; (80071e8 <_vfiprintf_r+0x244>)
 8006ffc:	429d      	cmp	r5, r3
 8006ffe:	d101      	bne.n	8007004 <_vfiprintf_r+0x60>
 8007000:	68b5      	ldr	r5, [r6, #8]
 8007002:	e7df      	b.n	8006fc4 <_vfiprintf_r+0x20>
 8007004:	4b79      	ldr	r3, [pc, #484]	; (80071ec <_vfiprintf_r+0x248>)
 8007006:	429d      	cmp	r5, r3
 8007008:	bf08      	it	eq
 800700a:	68f5      	ldreq	r5, [r6, #12]
 800700c:	e7da      	b.n	8006fc4 <_vfiprintf_r+0x20>
 800700e:	89ab      	ldrh	r3, [r5, #12]
 8007010:	0598      	lsls	r0, r3, #22
 8007012:	d4ed      	bmi.n	8006ff0 <_vfiprintf_r+0x4c>
 8007014:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007016:	f000 fd18 	bl	8007a4a <__retarget_lock_release_recursive>
 800701a:	e7e9      	b.n	8006ff0 <_vfiprintf_r+0x4c>
 800701c:	2300      	movs	r3, #0
 800701e:	9309      	str	r3, [sp, #36]	; 0x24
 8007020:	2320      	movs	r3, #32
 8007022:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007026:	2330      	movs	r3, #48	; 0x30
 8007028:	f04f 0901 	mov.w	r9, #1
 800702c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007030:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80071f0 <_vfiprintf_r+0x24c>
 8007034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007038:	4623      	mov	r3, r4
 800703a:	469a      	mov	sl, r3
 800703c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007040:	b10a      	cbz	r2, 8007046 <_vfiprintf_r+0xa2>
 8007042:	2a25      	cmp	r2, #37	; 0x25
 8007044:	d1f9      	bne.n	800703a <_vfiprintf_r+0x96>
 8007046:	ebba 0b04 	subs.w	fp, sl, r4
 800704a:	d00b      	beq.n	8007064 <_vfiprintf_r+0xc0>
 800704c:	465b      	mov	r3, fp
 800704e:	4622      	mov	r2, r4
 8007050:	4629      	mov	r1, r5
 8007052:	4630      	mov	r0, r6
 8007054:	f7ff ff93 	bl	8006f7e <__sfputs_r>
 8007058:	3001      	adds	r0, #1
 800705a:	f000 80aa 	beq.w	80071b2 <_vfiprintf_r+0x20e>
 800705e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007060:	445a      	add	r2, fp
 8007062:	9209      	str	r2, [sp, #36]	; 0x24
 8007064:	f89a 3000 	ldrb.w	r3, [sl]
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 80a2 	beq.w	80071b2 <_vfiprintf_r+0x20e>
 800706e:	2300      	movs	r3, #0
 8007070:	f04f 32ff 	mov.w	r2, #4294967295
 8007074:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007078:	f10a 0a01 	add.w	sl, sl, #1
 800707c:	9304      	str	r3, [sp, #16]
 800707e:	9307      	str	r3, [sp, #28]
 8007080:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007084:	931a      	str	r3, [sp, #104]	; 0x68
 8007086:	4654      	mov	r4, sl
 8007088:	2205      	movs	r2, #5
 800708a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800708e:	4858      	ldr	r0, [pc, #352]	; (80071f0 <_vfiprintf_r+0x24c>)
 8007090:	f000 fd42 	bl	8007b18 <memchr>
 8007094:	9a04      	ldr	r2, [sp, #16]
 8007096:	b9d8      	cbnz	r0, 80070d0 <_vfiprintf_r+0x12c>
 8007098:	06d1      	lsls	r1, r2, #27
 800709a:	bf44      	itt	mi
 800709c:	2320      	movmi	r3, #32
 800709e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070a2:	0713      	lsls	r3, r2, #28
 80070a4:	bf44      	itt	mi
 80070a6:	232b      	movmi	r3, #43	; 0x2b
 80070a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ac:	f89a 3000 	ldrb.w	r3, [sl]
 80070b0:	2b2a      	cmp	r3, #42	; 0x2a
 80070b2:	d015      	beq.n	80070e0 <_vfiprintf_r+0x13c>
 80070b4:	4654      	mov	r4, sl
 80070b6:	2000      	movs	r0, #0
 80070b8:	f04f 0c0a 	mov.w	ip, #10
 80070bc:	9a07      	ldr	r2, [sp, #28]
 80070be:	4621      	mov	r1, r4
 80070c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070c4:	3b30      	subs	r3, #48	; 0x30
 80070c6:	2b09      	cmp	r3, #9
 80070c8:	d94e      	bls.n	8007168 <_vfiprintf_r+0x1c4>
 80070ca:	b1b0      	cbz	r0, 80070fa <_vfiprintf_r+0x156>
 80070cc:	9207      	str	r2, [sp, #28]
 80070ce:	e014      	b.n	80070fa <_vfiprintf_r+0x156>
 80070d0:	eba0 0308 	sub.w	r3, r0, r8
 80070d4:	fa09 f303 	lsl.w	r3, r9, r3
 80070d8:	4313      	orrs	r3, r2
 80070da:	46a2      	mov	sl, r4
 80070dc:	9304      	str	r3, [sp, #16]
 80070de:	e7d2      	b.n	8007086 <_vfiprintf_r+0xe2>
 80070e0:	9b03      	ldr	r3, [sp, #12]
 80070e2:	1d19      	adds	r1, r3, #4
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	9103      	str	r1, [sp, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bfbb      	ittet	lt
 80070ec:	425b      	neglt	r3, r3
 80070ee:	f042 0202 	orrlt.w	r2, r2, #2
 80070f2:	9307      	strge	r3, [sp, #28]
 80070f4:	9307      	strlt	r3, [sp, #28]
 80070f6:	bfb8      	it	lt
 80070f8:	9204      	strlt	r2, [sp, #16]
 80070fa:	7823      	ldrb	r3, [r4, #0]
 80070fc:	2b2e      	cmp	r3, #46	; 0x2e
 80070fe:	d10c      	bne.n	800711a <_vfiprintf_r+0x176>
 8007100:	7863      	ldrb	r3, [r4, #1]
 8007102:	2b2a      	cmp	r3, #42	; 0x2a
 8007104:	d135      	bne.n	8007172 <_vfiprintf_r+0x1ce>
 8007106:	9b03      	ldr	r3, [sp, #12]
 8007108:	3402      	adds	r4, #2
 800710a:	1d1a      	adds	r2, r3, #4
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	9203      	str	r2, [sp, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	bfb8      	it	lt
 8007114:	f04f 33ff 	movlt.w	r3, #4294967295
 8007118:	9305      	str	r3, [sp, #20]
 800711a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80071f4 <_vfiprintf_r+0x250>
 800711e:	2203      	movs	r2, #3
 8007120:	4650      	mov	r0, sl
 8007122:	7821      	ldrb	r1, [r4, #0]
 8007124:	f000 fcf8 	bl	8007b18 <memchr>
 8007128:	b140      	cbz	r0, 800713c <_vfiprintf_r+0x198>
 800712a:	2340      	movs	r3, #64	; 0x40
 800712c:	eba0 000a 	sub.w	r0, r0, sl
 8007130:	fa03 f000 	lsl.w	r0, r3, r0
 8007134:	9b04      	ldr	r3, [sp, #16]
 8007136:	3401      	adds	r4, #1
 8007138:	4303      	orrs	r3, r0
 800713a:	9304      	str	r3, [sp, #16]
 800713c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007140:	2206      	movs	r2, #6
 8007142:	482d      	ldr	r0, [pc, #180]	; (80071f8 <_vfiprintf_r+0x254>)
 8007144:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007148:	f000 fce6 	bl	8007b18 <memchr>
 800714c:	2800      	cmp	r0, #0
 800714e:	d03f      	beq.n	80071d0 <_vfiprintf_r+0x22c>
 8007150:	4b2a      	ldr	r3, [pc, #168]	; (80071fc <_vfiprintf_r+0x258>)
 8007152:	bb1b      	cbnz	r3, 800719c <_vfiprintf_r+0x1f8>
 8007154:	9b03      	ldr	r3, [sp, #12]
 8007156:	3307      	adds	r3, #7
 8007158:	f023 0307 	bic.w	r3, r3, #7
 800715c:	3308      	adds	r3, #8
 800715e:	9303      	str	r3, [sp, #12]
 8007160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007162:	443b      	add	r3, r7
 8007164:	9309      	str	r3, [sp, #36]	; 0x24
 8007166:	e767      	b.n	8007038 <_vfiprintf_r+0x94>
 8007168:	460c      	mov	r4, r1
 800716a:	2001      	movs	r0, #1
 800716c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007170:	e7a5      	b.n	80070be <_vfiprintf_r+0x11a>
 8007172:	2300      	movs	r3, #0
 8007174:	f04f 0c0a 	mov.w	ip, #10
 8007178:	4619      	mov	r1, r3
 800717a:	3401      	adds	r4, #1
 800717c:	9305      	str	r3, [sp, #20]
 800717e:	4620      	mov	r0, r4
 8007180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007184:	3a30      	subs	r2, #48	; 0x30
 8007186:	2a09      	cmp	r2, #9
 8007188:	d903      	bls.n	8007192 <_vfiprintf_r+0x1ee>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d0c5      	beq.n	800711a <_vfiprintf_r+0x176>
 800718e:	9105      	str	r1, [sp, #20]
 8007190:	e7c3      	b.n	800711a <_vfiprintf_r+0x176>
 8007192:	4604      	mov	r4, r0
 8007194:	2301      	movs	r3, #1
 8007196:	fb0c 2101 	mla	r1, ip, r1, r2
 800719a:	e7f0      	b.n	800717e <_vfiprintf_r+0x1da>
 800719c:	ab03      	add	r3, sp, #12
 800719e:	9300      	str	r3, [sp, #0]
 80071a0:	462a      	mov	r2, r5
 80071a2:	4630      	mov	r0, r6
 80071a4:	4b16      	ldr	r3, [pc, #88]	; (8007200 <_vfiprintf_r+0x25c>)
 80071a6:	a904      	add	r1, sp, #16
 80071a8:	f3af 8000 	nop.w
 80071ac:	4607      	mov	r7, r0
 80071ae:	1c78      	adds	r0, r7, #1
 80071b0:	d1d6      	bne.n	8007160 <_vfiprintf_r+0x1bc>
 80071b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071b4:	07d9      	lsls	r1, r3, #31
 80071b6:	d405      	bmi.n	80071c4 <_vfiprintf_r+0x220>
 80071b8:	89ab      	ldrh	r3, [r5, #12]
 80071ba:	059a      	lsls	r2, r3, #22
 80071bc:	d402      	bmi.n	80071c4 <_vfiprintf_r+0x220>
 80071be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071c0:	f000 fc43 	bl	8007a4a <__retarget_lock_release_recursive>
 80071c4:	89ab      	ldrh	r3, [r5, #12]
 80071c6:	065b      	lsls	r3, r3, #25
 80071c8:	f53f af12 	bmi.w	8006ff0 <_vfiprintf_r+0x4c>
 80071cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071ce:	e711      	b.n	8006ff4 <_vfiprintf_r+0x50>
 80071d0:	ab03      	add	r3, sp, #12
 80071d2:	9300      	str	r3, [sp, #0]
 80071d4:	462a      	mov	r2, r5
 80071d6:	4630      	mov	r0, r6
 80071d8:	4b09      	ldr	r3, [pc, #36]	; (8007200 <_vfiprintf_r+0x25c>)
 80071da:	a904      	add	r1, sp, #16
 80071dc:	f000 f882 	bl	80072e4 <_printf_i>
 80071e0:	e7e4      	b.n	80071ac <_vfiprintf_r+0x208>
 80071e2:	bf00      	nop
 80071e4:	08008f38 	.word	0x08008f38
 80071e8:	08008f58 	.word	0x08008f58
 80071ec:	08008f18 	.word	0x08008f18
 80071f0:	08008ee4 	.word	0x08008ee4
 80071f4:	08008eea 	.word	0x08008eea
 80071f8:	08008eee 	.word	0x08008eee
 80071fc:	00000000 	.word	0x00000000
 8007200:	08006f7f 	.word	0x08006f7f

08007204 <_printf_common>:
 8007204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007208:	4616      	mov	r6, r2
 800720a:	4699      	mov	r9, r3
 800720c:	688a      	ldr	r2, [r1, #8]
 800720e:	690b      	ldr	r3, [r1, #16]
 8007210:	4607      	mov	r7, r0
 8007212:	4293      	cmp	r3, r2
 8007214:	bfb8      	it	lt
 8007216:	4613      	movlt	r3, r2
 8007218:	6033      	str	r3, [r6, #0]
 800721a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800721e:	460c      	mov	r4, r1
 8007220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007224:	b10a      	cbz	r2, 800722a <_printf_common+0x26>
 8007226:	3301      	adds	r3, #1
 8007228:	6033      	str	r3, [r6, #0]
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	0699      	lsls	r1, r3, #26
 800722e:	bf42      	ittt	mi
 8007230:	6833      	ldrmi	r3, [r6, #0]
 8007232:	3302      	addmi	r3, #2
 8007234:	6033      	strmi	r3, [r6, #0]
 8007236:	6825      	ldr	r5, [r4, #0]
 8007238:	f015 0506 	ands.w	r5, r5, #6
 800723c:	d106      	bne.n	800724c <_printf_common+0x48>
 800723e:	f104 0a19 	add.w	sl, r4, #25
 8007242:	68e3      	ldr	r3, [r4, #12]
 8007244:	6832      	ldr	r2, [r6, #0]
 8007246:	1a9b      	subs	r3, r3, r2
 8007248:	42ab      	cmp	r3, r5
 800724a:	dc28      	bgt.n	800729e <_printf_common+0x9a>
 800724c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007250:	1e13      	subs	r3, r2, #0
 8007252:	6822      	ldr	r2, [r4, #0]
 8007254:	bf18      	it	ne
 8007256:	2301      	movne	r3, #1
 8007258:	0692      	lsls	r2, r2, #26
 800725a:	d42d      	bmi.n	80072b8 <_printf_common+0xb4>
 800725c:	4649      	mov	r1, r9
 800725e:	4638      	mov	r0, r7
 8007260:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007264:	47c0      	blx	r8
 8007266:	3001      	adds	r0, #1
 8007268:	d020      	beq.n	80072ac <_printf_common+0xa8>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	68e5      	ldr	r5, [r4, #12]
 800726e:	f003 0306 	and.w	r3, r3, #6
 8007272:	2b04      	cmp	r3, #4
 8007274:	bf18      	it	ne
 8007276:	2500      	movne	r5, #0
 8007278:	6832      	ldr	r2, [r6, #0]
 800727a:	f04f 0600 	mov.w	r6, #0
 800727e:	68a3      	ldr	r3, [r4, #8]
 8007280:	bf08      	it	eq
 8007282:	1aad      	subeq	r5, r5, r2
 8007284:	6922      	ldr	r2, [r4, #16]
 8007286:	bf08      	it	eq
 8007288:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800728c:	4293      	cmp	r3, r2
 800728e:	bfc4      	itt	gt
 8007290:	1a9b      	subgt	r3, r3, r2
 8007292:	18ed      	addgt	r5, r5, r3
 8007294:	341a      	adds	r4, #26
 8007296:	42b5      	cmp	r5, r6
 8007298:	d11a      	bne.n	80072d0 <_printf_common+0xcc>
 800729a:	2000      	movs	r0, #0
 800729c:	e008      	b.n	80072b0 <_printf_common+0xac>
 800729e:	2301      	movs	r3, #1
 80072a0:	4652      	mov	r2, sl
 80072a2:	4649      	mov	r1, r9
 80072a4:	4638      	mov	r0, r7
 80072a6:	47c0      	blx	r8
 80072a8:	3001      	adds	r0, #1
 80072aa:	d103      	bne.n	80072b4 <_printf_common+0xb0>
 80072ac:	f04f 30ff 	mov.w	r0, #4294967295
 80072b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b4:	3501      	adds	r5, #1
 80072b6:	e7c4      	b.n	8007242 <_printf_common+0x3e>
 80072b8:	2030      	movs	r0, #48	; 0x30
 80072ba:	18e1      	adds	r1, r4, r3
 80072bc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072c6:	4422      	add	r2, r4
 80072c8:	3302      	adds	r3, #2
 80072ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072ce:	e7c5      	b.n	800725c <_printf_common+0x58>
 80072d0:	2301      	movs	r3, #1
 80072d2:	4622      	mov	r2, r4
 80072d4:	4649      	mov	r1, r9
 80072d6:	4638      	mov	r0, r7
 80072d8:	47c0      	blx	r8
 80072da:	3001      	adds	r0, #1
 80072dc:	d0e6      	beq.n	80072ac <_printf_common+0xa8>
 80072de:	3601      	adds	r6, #1
 80072e0:	e7d9      	b.n	8007296 <_printf_common+0x92>
	...

080072e4 <_printf_i>:
 80072e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072e8:	7e0f      	ldrb	r7, [r1, #24]
 80072ea:	4691      	mov	r9, r2
 80072ec:	2f78      	cmp	r7, #120	; 0x78
 80072ee:	4680      	mov	r8, r0
 80072f0:	460c      	mov	r4, r1
 80072f2:	469a      	mov	sl, r3
 80072f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80072f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80072fa:	d807      	bhi.n	800730c <_printf_i+0x28>
 80072fc:	2f62      	cmp	r7, #98	; 0x62
 80072fe:	d80a      	bhi.n	8007316 <_printf_i+0x32>
 8007300:	2f00      	cmp	r7, #0
 8007302:	f000 80d9 	beq.w	80074b8 <_printf_i+0x1d4>
 8007306:	2f58      	cmp	r7, #88	; 0x58
 8007308:	f000 80a4 	beq.w	8007454 <_printf_i+0x170>
 800730c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007310:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007314:	e03a      	b.n	800738c <_printf_i+0xa8>
 8007316:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800731a:	2b15      	cmp	r3, #21
 800731c:	d8f6      	bhi.n	800730c <_printf_i+0x28>
 800731e:	a101      	add	r1, pc, #4	; (adr r1, 8007324 <_printf_i+0x40>)
 8007320:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007324:	0800737d 	.word	0x0800737d
 8007328:	08007391 	.word	0x08007391
 800732c:	0800730d 	.word	0x0800730d
 8007330:	0800730d 	.word	0x0800730d
 8007334:	0800730d 	.word	0x0800730d
 8007338:	0800730d 	.word	0x0800730d
 800733c:	08007391 	.word	0x08007391
 8007340:	0800730d 	.word	0x0800730d
 8007344:	0800730d 	.word	0x0800730d
 8007348:	0800730d 	.word	0x0800730d
 800734c:	0800730d 	.word	0x0800730d
 8007350:	0800749f 	.word	0x0800749f
 8007354:	080073c1 	.word	0x080073c1
 8007358:	08007481 	.word	0x08007481
 800735c:	0800730d 	.word	0x0800730d
 8007360:	0800730d 	.word	0x0800730d
 8007364:	080074c1 	.word	0x080074c1
 8007368:	0800730d 	.word	0x0800730d
 800736c:	080073c1 	.word	0x080073c1
 8007370:	0800730d 	.word	0x0800730d
 8007374:	0800730d 	.word	0x0800730d
 8007378:	08007489 	.word	0x08007489
 800737c:	682b      	ldr	r3, [r5, #0]
 800737e:	1d1a      	adds	r2, r3, #4
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	602a      	str	r2, [r5, #0]
 8007384:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007388:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800738c:	2301      	movs	r3, #1
 800738e:	e0a4      	b.n	80074da <_printf_i+0x1f6>
 8007390:	6820      	ldr	r0, [r4, #0]
 8007392:	6829      	ldr	r1, [r5, #0]
 8007394:	0606      	lsls	r6, r0, #24
 8007396:	f101 0304 	add.w	r3, r1, #4
 800739a:	d50a      	bpl.n	80073b2 <_printf_i+0xce>
 800739c:	680e      	ldr	r6, [r1, #0]
 800739e:	602b      	str	r3, [r5, #0]
 80073a0:	2e00      	cmp	r6, #0
 80073a2:	da03      	bge.n	80073ac <_printf_i+0xc8>
 80073a4:	232d      	movs	r3, #45	; 0x2d
 80073a6:	4276      	negs	r6, r6
 80073a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073ac:	230a      	movs	r3, #10
 80073ae:	485e      	ldr	r0, [pc, #376]	; (8007528 <_printf_i+0x244>)
 80073b0:	e019      	b.n	80073e6 <_printf_i+0x102>
 80073b2:	680e      	ldr	r6, [r1, #0]
 80073b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073b8:	602b      	str	r3, [r5, #0]
 80073ba:	bf18      	it	ne
 80073bc:	b236      	sxthne	r6, r6
 80073be:	e7ef      	b.n	80073a0 <_printf_i+0xbc>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	6820      	ldr	r0, [r4, #0]
 80073c4:	1d19      	adds	r1, r3, #4
 80073c6:	6029      	str	r1, [r5, #0]
 80073c8:	0601      	lsls	r1, r0, #24
 80073ca:	d501      	bpl.n	80073d0 <_printf_i+0xec>
 80073cc:	681e      	ldr	r6, [r3, #0]
 80073ce:	e002      	b.n	80073d6 <_printf_i+0xf2>
 80073d0:	0646      	lsls	r6, r0, #25
 80073d2:	d5fb      	bpl.n	80073cc <_printf_i+0xe8>
 80073d4:	881e      	ldrh	r6, [r3, #0]
 80073d6:	2f6f      	cmp	r7, #111	; 0x6f
 80073d8:	bf0c      	ite	eq
 80073da:	2308      	moveq	r3, #8
 80073dc:	230a      	movne	r3, #10
 80073de:	4852      	ldr	r0, [pc, #328]	; (8007528 <_printf_i+0x244>)
 80073e0:	2100      	movs	r1, #0
 80073e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80073e6:	6865      	ldr	r5, [r4, #4]
 80073e8:	2d00      	cmp	r5, #0
 80073ea:	bfa8      	it	ge
 80073ec:	6821      	ldrge	r1, [r4, #0]
 80073ee:	60a5      	str	r5, [r4, #8]
 80073f0:	bfa4      	itt	ge
 80073f2:	f021 0104 	bicge.w	r1, r1, #4
 80073f6:	6021      	strge	r1, [r4, #0]
 80073f8:	b90e      	cbnz	r6, 80073fe <_printf_i+0x11a>
 80073fa:	2d00      	cmp	r5, #0
 80073fc:	d04d      	beq.n	800749a <_printf_i+0x1b6>
 80073fe:	4615      	mov	r5, r2
 8007400:	fbb6 f1f3 	udiv	r1, r6, r3
 8007404:	fb03 6711 	mls	r7, r3, r1, r6
 8007408:	5dc7      	ldrb	r7, [r0, r7]
 800740a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800740e:	4637      	mov	r7, r6
 8007410:	42bb      	cmp	r3, r7
 8007412:	460e      	mov	r6, r1
 8007414:	d9f4      	bls.n	8007400 <_printf_i+0x11c>
 8007416:	2b08      	cmp	r3, #8
 8007418:	d10b      	bne.n	8007432 <_printf_i+0x14e>
 800741a:	6823      	ldr	r3, [r4, #0]
 800741c:	07de      	lsls	r6, r3, #31
 800741e:	d508      	bpl.n	8007432 <_printf_i+0x14e>
 8007420:	6923      	ldr	r3, [r4, #16]
 8007422:	6861      	ldr	r1, [r4, #4]
 8007424:	4299      	cmp	r1, r3
 8007426:	bfde      	ittt	le
 8007428:	2330      	movle	r3, #48	; 0x30
 800742a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800742e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007432:	1b52      	subs	r2, r2, r5
 8007434:	6122      	str	r2, [r4, #16]
 8007436:	464b      	mov	r3, r9
 8007438:	4621      	mov	r1, r4
 800743a:	4640      	mov	r0, r8
 800743c:	f8cd a000 	str.w	sl, [sp]
 8007440:	aa03      	add	r2, sp, #12
 8007442:	f7ff fedf 	bl	8007204 <_printf_common>
 8007446:	3001      	adds	r0, #1
 8007448:	d14c      	bne.n	80074e4 <_printf_i+0x200>
 800744a:	f04f 30ff 	mov.w	r0, #4294967295
 800744e:	b004      	add	sp, #16
 8007450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007454:	4834      	ldr	r0, [pc, #208]	; (8007528 <_printf_i+0x244>)
 8007456:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800745a:	6829      	ldr	r1, [r5, #0]
 800745c:	6823      	ldr	r3, [r4, #0]
 800745e:	f851 6b04 	ldr.w	r6, [r1], #4
 8007462:	6029      	str	r1, [r5, #0]
 8007464:	061d      	lsls	r5, r3, #24
 8007466:	d514      	bpl.n	8007492 <_printf_i+0x1ae>
 8007468:	07df      	lsls	r7, r3, #31
 800746a:	bf44      	itt	mi
 800746c:	f043 0320 	orrmi.w	r3, r3, #32
 8007470:	6023      	strmi	r3, [r4, #0]
 8007472:	b91e      	cbnz	r6, 800747c <_printf_i+0x198>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	f023 0320 	bic.w	r3, r3, #32
 800747a:	6023      	str	r3, [r4, #0]
 800747c:	2310      	movs	r3, #16
 800747e:	e7af      	b.n	80073e0 <_printf_i+0xfc>
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	f043 0320 	orr.w	r3, r3, #32
 8007486:	6023      	str	r3, [r4, #0]
 8007488:	2378      	movs	r3, #120	; 0x78
 800748a:	4828      	ldr	r0, [pc, #160]	; (800752c <_printf_i+0x248>)
 800748c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007490:	e7e3      	b.n	800745a <_printf_i+0x176>
 8007492:	0659      	lsls	r1, r3, #25
 8007494:	bf48      	it	mi
 8007496:	b2b6      	uxthmi	r6, r6
 8007498:	e7e6      	b.n	8007468 <_printf_i+0x184>
 800749a:	4615      	mov	r5, r2
 800749c:	e7bb      	b.n	8007416 <_printf_i+0x132>
 800749e:	682b      	ldr	r3, [r5, #0]
 80074a0:	6826      	ldr	r6, [r4, #0]
 80074a2:	1d18      	adds	r0, r3, #4
 80074a4:	6961      	ldr	r1, [r4, #20]
 80074a6:	6028      	str	r0, [r5, #0]
 80074a8:	0635      	lsls	r5, r6, #24
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	d501      	bpl.n	80074b2 <_printf_i+0x1ce>
 80074ae:	6019      	str	r1, [r3, #0]
 80074b0:	e002      	b.n	80074b8 <_printf_i+0x1d4>
 80074b2:	0670      	lsls	r0, r6, #25
 80074b4:	d5fb      	bpl.n	80074ae <_printf_i+0x1ca>
 80074b6:	8019      	strh	r1, [r3, #0]
 80074b8:	2300      	movs	r3, #0
 80074ba:	4615      	mov	r5, r2
 80074bc:	6123      	str	r3, [r4, #16]
 80074be:	e7ba      	b.n	8007436 <_printf_i+0x152>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	2100      	movs	r1, #0
 80074c4:	1d1a      	adds	r2, r3, #4
 80074c6:	602a      	str	r2, [r5, #0]
 80074c8:	681d      	ldr	r5, [r3, #0]
 80074ca:	6862      	ldr	r2, [r4, #4]
 80074cc:	4628      	mov	r0, r5
 80074ce:	f000 fb23 	bl	8007b18 <memchr>
 80074d2:	b108      	cbz	r0, 80074d8 <_printf_i+0x1f4>
 80074d4:	1b40      	subs	r0, r0, r5
 80074d6:	6060      	str	r0, [r4, #4]
 80074d8:	6863      	ldr	r3, [r4, #4]
 80074da:	6123      	str	r3, [r4, #16]
 80074dc:	2300      	movs	r3, #0
 80074de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e2:	e7a8      	b.n	8007436 <_printf_i+0x152>
 80074e4:	462a      	mov	r2, r5
 80074e6:	4649      	mov	r1, r9
 80074e8:	4640      	mov	r0, r8
 80074ea:	6923      	ldr	r3, [r4, #16]
 80074ec:	47d0      	blx	sl
 80074ee:	3001      	adds	r0, #1
 80074f0:	d0ab      	beq.n	800744a <_printf_i+0x166>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	079b      	lsls	r3, r3, #30
 80074f6:	d413      	bmi.n	8007520 <_printf_i+0x23c>
 80074f8:	68e0      	ldr	r0, [r4, #12]
 80074fa:	9b03      	ldr	r3, [sp, #12]
 80074fc:	4298      	cmp	r0, r3
 80074fe:	bfb8      	it	lt
 8007500:	4618      	movlt	r0, r3
 8007502:	e7a4      	b.n	800744e <_printf_i+0x16a>
 8007504:	2301      	movs	r3, #1
 8007506:	4632      	mov	r2, r6
 8007508:	4649      	mov	r1, r9
 800750a:	4640      	mov	r0, r8
 800750c:	47d0      	blx	sl
 800750e:	3001      	adds	r0, #1
 8007510:	d09b      	beq.n	800744a <_printf_i+0x166>
 8007512:	3501      	adds	r5, #1
 8007514:	68e3      	ldr	r3, [r4, #12]
 8007516:	9903      	ldr	r1, [sp, #12]
 8007518:	1a5b      	subs	r3, r3, r1
 800751a:	42ab      	cmp	r3, r5
 800751c:	dcf2      	bgt.n	8007504 <_printf_i+0x220>
 800751e:	e7eb      	b.n	80074f8 <_printf_i+0x214>
 8007520:	2500      	movs	r5, #0
 8007522:	f104 0619 	add.w	r6, r4, #25
 8007526:	e7f5      	b.n	8007514 <_printf_i+0x230>
 8007528:	08008ef5 	.word	0x08008ef5
 800752c:	08008f06 	.word	0x08008f06

08007530 <_sbrk_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	2300      	movs	r3, #0
 8007534:	4d05      	ldr	r5, [pc, #20]	; (800754c <_sbrk_r+0x1c>)
 8007536:	4604      	mov	r4, r0
 8007538:	4608      	mov	r0, r1
 800753a:	602b      	str	r3, [r5, #0]
 800753c:	f7fc face 	bl	8003adc <_sbrk>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_sbrk_r+0x1a>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	b103      	cbz	r3, 800754a <_sbrk_r+0x1a>
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	20000c04 	.word	0x20000c04

08007550 <__swbuf_r>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	460e      	mov	r6, r1
 8007554:	4614      	mov	r4, r2
 8007556:	4605      	mov	r5, r0
 8007558:	b118      	cbz	r0, 8007562 <__swbuf_r+0x12>
 800755a:	6983      	ldr	r3, [r0, #24]
 800755c:	b90b      	cbnz	r3, 8007562 <__swbuf_r+0x12>
 800755e:	f000 f9d5 	bl	800790c <__sinit>
 8007562:	4b21      	ldr	r3, [pc, #132]	; (80075e8 <__swbuf_r+0x98>)
 8007564:	429c      	cmp	r4, r3
 8007566:	d12b      	bne.n	80075c0 <__swbuf_r+0x70>
 8007568:	686c      	ldr	r4, [r5, #4]
 800756a:	69a3      	ldr	r3, [r4, #24]
 800756c:	60a3      	str	r3, [r4, #8]
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	071a      	lsls	r2, r3, #28
 8007572:	d52f      	bpl.n	80075d4 <__swbuf_r+0x84>
 8007574:	6923      	ldr	r3, [r4, #16]
 8007576:	b36b      	cbz	r3, 80075d4 <__swbuf_r+0x84>
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	6820      	ldr	r0, [r4, #0]
 800757c:	b2f6      	uxtb	r6, r6
 800757e:	1ac0      	subs	r0, r0, r3
 8007580:	6963      	ldr	r3, [r4, #20]
 8007582:	4637      	mov	r7, r6
 8007584:	4283      	cmp	r3, r0
 8007586:	dc04      	bgt.n	8007592 <__swbuf_r+0x42>
 8007588:	4621      	mov	r1, r4
 800758a:	4628      	mov	r0, r5
 800758c:	f000 f92a 	bl	80077e4 <_fflush_r>
 8007590:	bb30      	cbnz	r0, 80075e0 <__swbuf_r+0x90>
 8007592:	68a3      	ldr	r3, [r4, #8]
 8007594:	3001      	adds	r0, #1
 8007596:	3b01      	subs	r3, #1
 8007598:	60a3      	str	r3, [r4, #8]
 800759a:	6823      	ldr	r3, [r4, #0]
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	6022      	str	r2, [r4, #0]
 80075a0:	701e      	strb	r6, [r3, #0]
 80075a2:	6963      	ldr	r3, [r4, #20]
 80075a4:	4283      	cmp	r3, r0
 80075a6:	d004      	beq.n	80075b2 <__swbuf_r+0x62>
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	07db      	lsls	r3, r3, #31
 80075ac:	d506      	bpl.n	80075bc <__swbuf_r+0x6c>
 80075ae:	2e0a      	cmp	r6, #10
 80075b0:	d104      	bne.n	80075bc <__swbuf_r+0x6c>
 80075b2:	4621      	mov	r1, r4
 80075b4:	4628      	mov	r0, r5
 80075b6:	f000 f915 	bl	80077e4 <_fflush_r>
 80075ba:	b988      	cbnz	r0, 80075e0 <__swbuf_r+0x90>
 80075bc:	4638      	mov	r0, r7
 80075be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075c0:	4b0a      	ldr	r3, [pc, #40]	; (80075ec <__swbuf_r+0x9c>)
 80075c2:	429c      	cmp	r4, r3
 80075c4:	d101      	bne.n	80075ca <__swbuf_r+0x7a>
 80075c6:	68ac      	ldr	r4, [r5, #8]
 80075c8:	e7cf      	b.n	800756a <__swbuf_r+0x1a>
 80075ca:	4b09      	ldr	r3, [pc, #36]	; (80075f0 <__swbuf_r+0xa0>)
 80075cc:	429c      	cmp	r4, r3
 80075ce:	bf08      	it	eq
 80075d0:	68ec      	ldreq	r4, [r5, #12]
 80075d2:	e7ca      	b.n	800756a <__swbuf_r+0x1a>
 80075d4:	4621      	mov	r1, r4
 80075d6:	4628      	mov	r0, r5
 80075d8:	f000 f80c 	bl	80075f4 <__swsetup_r>
 80075dc:	2800      	cmp	r0, #0
 80075de:	d0cb      	beq.n	8007578 <__swbuf_r+0x28>
 80075e0:	f04f 37ff 	mov.w	r7, #4294967295
 80075e4:	e7ea      	b.n	80075bc <__swbuf_r+0x6c>
 80075e6:	bf00      	nop
 80075e8:	08008f38 	.word	0x08008f38
 80075ec:	08008f58 	.word	0x08008f58
 80075f0:	08008f18 	.word	0x08008f18

080075f4 <__swsetup_r>:
 80075f4:	4b32      	ldr	r3, [pc, #200]	; (80076c0 <__swsetup_r+0xcc>)
 80075f6:	b570      	push	{r4, r5, r6, lr}
 80075f8:	681d      	ldr	r5, [r3, #0]
 80075fa:	4606      	mov	r6, r0
 80075fc:	460c      	mov	r4, r1
 80075fe:	b125      	cbz	r5, 800760a <__swsetup_r+0x16>
 8007600:	69ab      	ldr	r3, [r5, #24]
 8007602:	b913      	cbnz	r3, 800760a <__swsetup_r+0x16>
 8007604:	4628      	mov	r0, r5
 8007606:	f000 f981 	bl	800790c <__sinit>
 800760a:	4b2e      	ldr	r3, [pc, #184]	; (80076c4 <__swsetup_r+0xd0>)
 800760c:	429c      	cmp	r4, r3
 800760e:	d10f      	bne.n	8007630 <__swsetup_r+0x3c>
 8007610:	686c      	ldr	r4, [r5, #4]
 8007612:	89a3      	ldrh	r3, [r4, #12]
 8007614:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007618:	0719      	lsls	r1, r3, #28
 800761a:	d42c      	bmi.n	8007676 <__swsetup_r+0x82>
 800761c:	06dd      	lsls	r5, r3, #27
 800761e:	d411      	bmi.n	8007644 <__swsetup_r+0x50>
 8007620:	2309      	movs	r3, #9
 8007622:	6033      	str	r3, [r6, #0]
 8007624:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007628:	f04f 30ff 	mov.w	r0, #4294967295
 800762c:	81a3      	strh	r3, [r4, #12]
 800762e:	e03e      	b.n	80076ae <__swsetup_r+0xba>
 8007630:	4b25      	ldr	r3, [pc, #148]	; (80076c8 <__swsetup_r+0xd4>)
 8007632:	429c      	cmp	r4, r3
 8007634:	d101      	bne.n	800763a <__swsetup_r+0x46>
 8007636:	68ac      	ldr	r4, [r5, #8]
 8007638:	e7eb      	b.n	8007612 <__swsetup_r+0x1e>
 800763a:	4b24      	ldr	r3, [pc, #144]	; (80076cc <__swsetup_r+0xd8>)
 800763c:	429c      	cmp	r4, r3
 800763e:	bf08      	it	eq
 8007640:	68ec      	ldreq	r4, [r5, #12]
 8007642:	e7e6      	b.n	8007612 <__swsetup_r+0x1e>
 8007644:	0758      	lsls	r0, r3, #29
 8007646:	d512      	bpl.n	800766e <__swsetup_r+0x7a>
 8007648:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764a:	b141      	cbz	r1, 800765e <__swsetup_r+0x6a>
 800764c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007650:	4299      	cmp	r1, r3
 8007652:	d002      	beq.n	800765a <__swsetup_r+0x66>
 8007654:	4630      	mov	r0, r6
 8007656:	f7ff fba1 	bl	8006d9c <_free_r>
 800765a:	2300      	movs	r3, #0
 800765c:	6363      	str	r3, [r4, #52]	; 0x34
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007664:	81a3      	strh	r3, [r4, #12]
 8007666:	2300      	movs	r3, #0
 8007668:	6063      	str	r3, [r4, #4]
 800766a:	6923      	ldr	r3, [r4, #16]
 800766c:	6023      	str	r3, [r4, #0]
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	f043 0308 	orr.w	r3, r3, #8
 8007674:	81a3      	strh	r3, [r4, #12]
 8007676:	6923      	ldr	r3, [r4, #16]
 8007678:	b94b      	cbnz	r3, 800768e <__swsetup_r+0x9a>
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007684:	d003      	beq.n	800768e <__swsetup_r+0x9a>
 8007686:	4621      	mov	r1, r4
 8007688:	4630      	mov	r0, r6
 800768a:	f000 fa05 	bl	8007a98 <__smakebuf_r>
 800768e:	89a0      	ldrh	r0, [r4, #12]
 8007690:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007694:	f010 0301 	ands.w	r3, r0, #1
 8007698:	d00a      	beq.n	80076b0 <__swsetup_r+0xbc>
 800769a:	2300      	movs	r3, #0
 800769c:	60a3      	str	r3, [r4, #8]
 800769e:	6963      	ldr	r3, [r4, #20]
 80076a0:	425b      	negs	r3, r3
 80076a2:	61a3      	str	r3, [r4, #24]
 80076a4:	6923      	ldr	r3, [r4, #16]
 80076a6:	b943      	cbnz	r3, 80076ba <__swsetup_r+0xc6>
 80076a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076ac:	d1ba      	bne.n	8007624 <__swsetup_r+0x30>
 80076ae:	bd70      	pop	{r4, r5, r6, pc}
 80076b0:	0781      	lsls	r1, r0, #30
 80076b2:	bf58      	it	pl
 80076b4:	6963      	ldrpl	r3, [r4, #20]
 80076b6:	60a3      	str	r3, [r4, #8]
 80076b8:	e7f4      	b.n	80076a4 <__swsetup_r+0xb0>
 80076ba:	2000      	movs	r0, #0
 80076bc:	e7f7      	b.n	80076ae <__swsetup_r+0xba>
 80076be:	bf00      	nop
 80076c0:	20000010 	.word	0x20000010
 80076c4:	08008f38 	.word	0x08008f38
 80076c8:	08008f58 	.word	0x08008f58
 80076cc:	08008f18 	.word	0x08008f18

080076d0 <abort>:
 80076d0:	2006      	movs	r0, #6
 80076d2:	b508      	push	{r3, lr}
 80076d4:	f000 fa62 	bl	8007b9c <raise>
 80076d8:	2001      	movs	r0, #1
 80076da:	f7fc f98c 	bl	80039f6 <_exit>
	...

080076e0 <__sflush_r>:
 80076e0:	898a      	ldrh	r2, [r1, #12]
 80076e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e4:	4605      	mov	r5, r0
 80076e6:	0710      	lsls	r0, r2, #28
 80076e8:	460c      	mov	r4, r1
 80076ea:	d457      	bmi.n	800779c <__sflush_r+0xbc>
 80076ec:	684b      	ldr	r3, [r1, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	dc04      	bgt.n	80076fc <__sflush_r+0x1c>
 80076f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dc01      	bgt.n	80076fc <__sflush_r+0x1c>
 80076f8:	2000      	movs	r0, #0
 80076fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80076fe:	2e00      	cmp	r6, #0
 8007700:	d0fa      	beq.n	80076f8 <__sflush_r+0x18>
 8007702:	2300      	movs	r3, #0
 8007704:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007708:	682f      	ldr	r7, [r5, #0]
 800770a:	602b      	str	r3, [r5, #0]
 800770c:	d032      	beq.n	8007774 <__sflush_r+0x94>
 800770e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007710:	89a3      	ldrh	r3, [r4, #12]
 8007712:	075a      	lsls	r2, r3, #29
 8007714:	d505      	bpl.n	8007722 <__sflush_r+0x42>
 8007716:	6863      	ldr	r3, [r4, #4]
 8007718:	1ac0      	subs	r0, r0, r3
 800771a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800771c:	b10b      	cbz	r3, 8007722 <__sflush_r+0x42>
 800771e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007720:	1ac0      	subs	r0, r0, r3
 8007722:	2300      	movs	r3, #0
 8007724:	4602      	mov	r2, r0
 8007726:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007728:	4628      	mov	r0, r5
 800772a:	6a21      	ldr	r1, [r4, #32]
 800772c:	47b0      	blx	r6
 800772e:	1c43      	adds	r3, r0, #1
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	d106      	bne.n	8007742 <__sflush_r+0x62>
 8007734:	6829      	ldr	r1, [r5, #0]
 8007736:	291d      	cmp	r1, #29
 8007738:	d82c      	bhi.n	8007794 <__sflush_r+0xb4>
 800773a:	4a29      	ldr	r2, [pc, #164]	; (80077e0 <__sflush_r+0x100>)
 800773c:	40ca      	lsrs	r2, r1
 800773e:	07d6      	lsls	r6, r2, #31
 8007740:	d528      	bpl.n	8007794 <__sflush_r+0xb4>
 8007742:	2200      	movs	r2, #0
 8007744:	6062      	str	r2, [r4, #4]
 8007746:	6922      	ldr	r2, [r4, #16]
 8007748:	04d9      	lsls	r1, r3, #19
 800774a:	6022      	str	r2, [r4, #0]
 800774c:	d504      	bpl.n	8007758 <__sflush_r+0x78>
 800774e:	1c42      	adds	r2, r0, #1
 8007750:	d101      	bne.n	8007756 <__sflush_r+0x76>
 8007752:	682b      	ldr	r3, [r5, #0]
 8007754:	b903      	cbnz	r3, 8007758 <__sflush_r+0x78>
 8007756:	6560      	str	r0, [r4, #84]	; 0x54
 8007758:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800775a:	602f      	str	r7, [r5, #0]
 800775c:	2900      	cmp	r1, #0
 800775e:	d0cb      	beq.n	80076f8 <__sflush_r+0x18>
 8007760:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007764:	4299      	cmp	r1, r3
 8007766:	d002      	beq.n	800776e <__sflush_r+0x8e>
 8007768:	4628      	mov	r0, r5
 800776a:	f7ff fb17 	bl	8006d9c <_free_r>
 800776e:	2000      	movs	r0, #0
 8007770:	6360      	str	r0, [r4, #52]	; 0x34
 8007772:	e7c2      	b.n	80076fa <__sflush_r+0x1a>
 8007774:	6a21      	ldr	r1, [r4, #32]
 8007776:	2301      	movs	r3, #1
 8007778:	4628      	mov	r0, r5
 800777a:	47b0      	blx	r6
 800777c:	1c41      	adds	r1, r0, #1
 800777e:	d1c7      	bne.n	8007710 <__sflush_r+0x30>
 8007780:	682b      	ldr	r3, [r5, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0c4      	beq.n	8007710 <__sflush_r+0x30>
 8007786:	2b1d      	cmp	r3, #29
 8007788:	d001      	beq.n	800778e <__sflush_r+0xae>
 800778a:	2b16      	cmp	r3, #22
 800778c:	d101      	bne.n	8007792 <__sflush_r+0xb2>
 800778e:	602f      	str	r7, [r5, #0]
 8007790:	e7b2      	b.n	80076f8 <__sflush_r+0x18>
 8007792:	89a3      	ldrh	r3, [r4, #12]
 8007794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007798:	81a3      	strh	r3, [r4, #12]
 800779a:	e7ae      	b.n	80076fa <__sflush_r+0x1a>
 800779c:	690f      	ldr	r7, [r1, #16]
 800779e:	2f00      	cmp	r7, #0
 80077a0:	d0aa      	beq.n	80076f8 <__sflush_r+0x18>
 80077a2:	0793      	lsls	r3, r2, #30
 80077a4:	bf18      	it	ne
 80077a6:	2300      	movne	r3, #0
 80077a8:	680e      	ldr	r6, [r1, #0]
 80077aa:	bf08      	it	eq
 80077ac:	694b      	ldreq	r3, [r1, #20]
 80077ae:	1bf6      	subs	r6, r6, r7
 80077b0:	600f      	str	r7, [r1, #0]
 80077b2:	608b      	str	r3, [r1, #8]
 80077b4:	2e00      	cmp	r6, #0
 80077b6:	dd9f      	ble.n	80076f8 <__sflush_r+0x18>
 80077b8:	4633      	mov	r3, r6
 80077ba:	463a      	mov	r2, r7
 80077bc:	4628      	mov	r0, r5
 80077be:	6a21      	ldr	r1, [r4, #32]
 80077c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80077c4:	47e0      	blx	ip
 80077c6:	2800      	cmp	r0, #0
 80077c8:	dc06      	bgt.n	80077d8 <__sflush_r+0xf8>
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	f04f 30ff 	mov.w	r0, #4294967295
 80077d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d4:	81a3      	strh	r3, [r4, #12]
 80077d6:	e790      	b.n	80076fa <__sflush_r+0x1a>
 80077d8:	4407      	add	r7, r0
 80077da:	1a36      	subs	r6, r6, r0
 80077dc:	e7ea      	b.n	80077b4 <__sflush_r+0xd4>
 80077de:	bf00      	nop
 80077e0:	20400001 	.word	0x20400001

080077e4 <_fflush_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	690b      	ldr	r3, [r1, #16]
 80077e8:	4605      	mov	r5, r0
 80077ea:	460c      	mov	r4, r1
 80077ec:	b913      	cbnz	r3, 80077f4 <_fflush_r+0x10>
 80077ee:	2500      	movs	r5, #0
 80077f0:	4628      	mov	r0, r5
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	b118      	cbz	r0, 80077fe <_fflush_r+0x1a>
 80077f6:	6983      	ldr	r3, [r0, #24]
 80077f8:	b90b      	cbnz	r3, 80077fe <_fflush_r+0x1a>
 80077fa:	f000 f887 	bl	800790c <__sinit>
 80077fe:	4b14      	ldr	r3, [pc, #80]	; (8007850 <_fflush_r+0x6c>)
 8007800:	429c      	cmp	r4, r3
 8007802:	d11b      	bne.n	800783c <_fflush_r+0x58>
 8007804:	686c      	ldr	r4, [r5, #4]
 8007806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0ef      	beq.n	80077ee <_fflush_r+0xa>
 800780e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007810:	07d0      	lsls	r0, r2, #31
 8007812:	d404      	bmi.n	800781e <_fflush_r+0x3a>
 8007814:	0599      	lsls	r1, r3, #22
 8007816:	d402      	bmi.n	800781e <_fflush_r+0x3a>
 8007818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800781a:	f000 f915 	bl	8007a48 <__retarget_lock_acquire_recursive>
 800781e:	4628      	mov	r0, r5
 8007820:	4621      	mov	r1, r4
 8007822:	f7ff ff5d 	bl	80076e0 <__sflush_r>
 8007826:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007828:	4605      	mov	r5, r0
 800782a:	07da      	lsls	r2, r3, #31
 800782c:	d4e0      	bmi.n	80077f0 <_fflush_r+0xc>
 800782e:	89a3      	ldrh	r3, [r4, #12]
 8007830:	059b      	lsls	r3, r3, #22
 8007832:	d4dd      	bmi.n	80077f0 <_fflush_r+0xc>
 8007834:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007836:	f000 f908 	bl	8007a4a <__retarget_lock_release_recursive>
 800783a:	e7d9      	b.n	80077f0 <_fflush_r+0xc>
 800783c:	4b05      	ldr	r3, [pc, #20]	; (8007854 <_fflush_r+0x70>)
 800783e:	429c      	cmp	r4, r3
 8007840:	d101      	bne.n	8007846 <_fflush_r+0x62>
 8007842:	68ac      	ldr	r4, [r5, #8]
 8007844:	e7df      	b.n	8007806 <_fflush_r+0x22>
 8007846:	4b04      	ldr	r3, [pc, #16]	; (8007858 <_fflush_r+0x74>)
 8007848:	429c      	cmp	r4, r3
 800784a:	bf08      	it	eq
 800784c:	68ec      	ldreq	r4, [r5, #12]
 800784e:	e7da      	b.n	8007806 <_fflush_r+0x22>
 8007850:	08008f38 	.word	0x08008f38
 8007854:	08008f58 	.word	0x08008f58
 8007858:	08008f18 	.word	0x08008f18

0800785c <std>:
 800785c:	2300      	movs	r3, #0
 800785e:	b510      	push	{r4, lr}
 8007860:	4604      	mov	r4, r0
 8007862:	e9c0 3300 	strd	r3, r3, [r0]
 8007866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800786a:	6083      	str	r3, [r0, #8]
 800786c:	8181      	strh	r1, [r0, #12]
 800786e:	6643      	str	r3, [r0, #100]	; 0x64
 8007870:	81c2      	strh	r2, [r0, #14]
 8007872:	6183      	str	r3, [r0, #24]
 8007874:	4619      	mov	r1, r3
 8007876:	2208      	movs	r2, #8
 8007878:	305c      	adds	r0, #92	; 0x5c
 800787a:	f7ff fa87 	bl	8006d8c <memset>
 800787e:	4b05      	ldr	r3, [pc, #20]	; (8007894 <std+0x38>)
 8007880:	6224      	str	r4, [r4, #32]
 8007882:	6263      	str	r3, [r4, #36]	; 0x24
 8007884:	4b04      	ldr	r3, [pc, #16]	; (8007898 <std+0x3c>)
 8007886:	62a3      	str	r3, [r4, #40]	; 0x28
 8007888:	4b04      	ldr	r3, [pc, #16]	; (800789c <std+0x40>)
 800788a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800788c:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <std+0x44>)
 800788e:	6323      	str	r3, [r4, #48]	; 0x30
 8007890:	bd10      	pop	{r4, pc}
 8007892:	bf00      	nop
 8007894:	08007bd5 	.word	0x08007bd5
 8007898:	08007bf7 	.word	0x08007bf7
 800789c:	08007c2f 	.word	0x08007c2f
 80078a0:	08007c53 	.word	0x08007c53

080078a4 <_cleanup_r>:
 80078a4:	4901      	ldr	r1, [pc, #4]	; (80078ac <_cleanup_r+0x8>)
 80078a6:	f000 b8af 	b.w	8007a08 <_fwalk_reent>
 80078aa:	bf00      	nop
 80078ac:	080077e5 	.word	0x080077e5

080078b0 <__sfmoreglue>:
 80078b0:	2268      	movs	r2, #104	; 0x68
 80078b2:	b570      	push	{r4, r5, r6, lr}
 80078b4:	1e4d      	subs	r5, r1, #1
 80078b6:	4355      	muls	r5, r2
 80078b8:	460e      	mov	r6, r1
 80078ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078be:	f7ff fad5 	bl	8006e6c <_malloc_r>
 80078c2:	4604      	mov	r4, r0
 80078c4:	b140      	cbz	r0, 80078d8 <__sfmoreglue+0x28>
 80078c6:	2100      	movs	r1, #0
 80078c8:	e9c0 1600 	strd	r1, r6, [r0]
 80078cc:	300c      	adds	r0, #12
 80078ce:	60a0      	str	r0, [r4, #8]
 80078d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078d4:	f7ff fa5a 	bl	8006d8c <memset>
 80078d8:	4620      	mov	r0, r4
 80078da:	bd70      	pop	{r4, r5, r6, pc}

080078dc <__sfp_lock_acquire>:
 80078dc:	4801      	ldr	r0, [pc, #4]	; (80078e4 <__sfp_lock_acquire+0x8>)
 80078de:	f000 b8b3 	b.w	8007a48 <__retarget_lock_acquire_recursive>
 80078e2:	bf00      	nop
 80078e4:	20000c01 	.word	0x20000c01

080078e8 <__sfp_lock_release>:
 80078e8:	4801      	ldr	r0, [pc, #4]	; (80078f0 <__sfp_lock_release+0x8>)
 80078ea:	f000 b8ae 	b.w	8007a4a <__retarget_lock_release_recursive>
 80078ee:	bf00      	nop
 80078f0:	20000c01 	.word	0x20000c01

080078f4 <__sinit_lock_acquire>:
 80078f4:	4801      	ldr	r0, [pc, #4]	; (80078fc <__sinit_lock_acquire+0x8>)
 80078f6:	f000 b8a7 	b.w	8007a48 <__retarget_lock_acquire_recursive>
 80078fa:	bf00      	nop
 80078fc:	20000c02 	.word	0x20000c02

08007900 <__sinit_lock_release>:
 8007900:	4801      	ldr	r0, [pc, #4]	; (8007908 <__sinit_lock_release+0x8>)
 8007902:	f000 b8a2 	b.w	8007a4a <__retarget_lock_release_recursive>
 8007906:	bf00      	nop
 8007908:	20000c02 	.word	0x20000c02

0800790c <__sinit>:
 800790c:	b510      	push	{r4, lr}
 800790e:	4604      	mov	r4, r0
 8007910:	f7ff fff0 	bl	80078f4 <__sinit_lock_acquire>
 8007914:	69a3      	ldr	r3, [r4, #24]
 8007916:	b11b      	cbz	r3, 8007920 <__sinit+0x14>
 8007918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800791c:	f7ff bff0 	b.w	8007900 <__sinit_lock_release>
 8007920:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007924:	6523      	str	r3, [r4, #80]	; 0x50
 8007926:	4b13      	ldr	r3, [pc, #76]	; (8007974 <__sinit+0x68>)
 8007928:	4a13      	ldr	r2, [pc, #76]	; (8007978 <__sinit+0x6c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	62a2      	str	r2, [r4, #40]	; 0x28
 800792e:	42a3      	cmp	r3, r4
 8007930:	bf08      	it	eq
 8007932:	2301      	moveq	r3, #1
 8007934:	4620      	mov	r0, r4
 8007936:	bf08      	it	eq
 8007938:	61a3      	streq	r3, [r4, #24]
 800793a:	f000 f81f 	bl	800797c <__sfp>
 800793e:	6060      	str	r0, [r4, #4]
 8007940:	4620      	mov	r0, r4
 8007942:	f000 f81b 	bl	800797c <__sfp>
 8007946:	60a0      	str	r0, [r4, #8]
 8007948:	4620      	mov	r0, r4
 800794a:	f000 f817 	bl	800797c <__sfp>
 800794e:	2200      	movs	r2, #0
 8007950:	2104      	movs	r1, #4
 8007952:	60e0      	str	r0, [r4, #12]
 8007954:	6860      	ldr	r0, [r4, #4]
 8007956:	f7ff ff81 	bl	800785c <std>
 800795a:	2201      	movs	r2, #1
 800795c:	2109      	movs	r1, #9
 800795e:	68a0      	ldr	r0, [r4, #8]
 8007960:	f7ff ff7c 	bl	800785c <std>
 8007964:	2202      	movs	r2, #2
 8007966:	2112      	movs	r1, #18
 8007968:	68e0      	ldr	r0, [r4, #12]
 800796a:	f7ff ff77 	bl	800785c <std>
 800796e:	2301      	movs	r3, #1
 8007970:	61a3      	str	r3, [r4, #24]
 8007972:	e7d1      	b.n	8007918 <__sinit+0xc>
 8007974:	08008ee0 	.word	0x08008ee0
 8007978:	080078a5 	.word	0x080078a5

0800797c <__sfp>:
 800797c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797e:	4607      	mov	r7, r0
 8007980:	f7ff ffac 	bl	80078dc <__sfp_lock_acquire>
 8007984:	4b1e      	ldr	r3, [pc, #120]	; (8007a00 <__sfp+0x84>)
 8007986:	681e      	ldr	r6, [r3, #0]
 8007988:	69b3      	ldr	r3, [r6, #24]
 800798a:	b913      	cbnz	r3, 8007992 <__sfp+0x16>
 800798c:	4630      	mov	r0, r6
 800798e:	f7ff ffbd 	bl	800790c <__sinit>
 8007992:	3648      	adds	r6, #72	; 0x48
 8007994:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007998:	3b01      	subs	r3, #1
 800799a:	d503      	bpl.n	80079a4 <__sfp+0x28>
 800799c:	6833      	ldr	r3, [r6, #0]
 800799e:	b30b      	cbz	r3, 80079e4 <__sfp+0x68>
 80079a0:	6836      	ldr	r6, [r6, #0]
 80079a2:	e7f7      	b.n	8007994 <__sfp+0x18>
 80079a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079a8:	b9d5      	cbnz	r5, 80079e0 <__sfp+0x64>
 80079aa:	4b16      	ldr	r3, [pc, #88]	; (8007a04 <__sfp+0x88>)
 80079ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079b0:	60e3      	str	r3, [r4, #12]
 80079b2:	6665      	str	r5, [r4, #100]	; 0x64
 80079b4:	f000 f847 	bl	8007a46 <__retarget_lock_init_recursive>
 80079b8:	f7ff ff96 	bl	80078e8 <__sfp_lock_release>
 80079bc:	2208      	movs	r2, #8
 80079be:	4629      	mov	r1, r5
 80079c0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079c4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079c8:	6025      	str	r5, [r4, #0]
 80079ca:	61a5      	str	r5, [r4, #24]
 80079cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079d0:	f7ff f9dc 	bl	8006d8c <memset>
 80079d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079dc:	4620      	mov	r0, r4
 80079de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e0:	3468      	adds	r4, #104	; 0x68
 80079e2:	e7d9      	b.n	8007998 <__sfp+0x1c>
 80079e4:	2104      	movs	r1, #4
 80079e6:	4638      	mov	r0, r7
 80079e8:	f7ff ff62 	bl	80078b0 <__sfmoreglue>
 80079ec:	4604      	mov	r4, r0
 80079ee:	6030      	str	r0, [r6, #0]
 80079f0:	2800      	cmp	r0, #0
 80079f2:	d1d5      	bne.n	80079a0 <__sfp+0x24>
 80079f4:	f7ff ff78 	bl	80078e8 <__sfp_lock_release>
 80079f8:	230c      	movs	r3, #12
 80079fa:	603b      	str	r3, [r7, #0]
 80079fc:	e7ee      	b.n	80079dc <__sfp+0x60>
 80079fe:	bf00      	nop
 8007a00:	08008ee0 	.word	0x08008ee0
 8007a04:	ffff0001 	.word	0xffff0001

08007a08 <_fwalk_reent>:
 8007a08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a0c:	4606      	mov	r6, r0
 8007a0e:	4688      	mov	r8, r1
 8007a10:	2700      	movs	r7, #0
 8007a12:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a1a:	f1b9 0901 	subs.w	r9, r9, #1
 8007a1e:	d505      	bpl.n	8007a2c <_fwalk_reent+0x24>
 8007a20:	6824      	ldr	r4, [r4, #0]
 8007a22:	2c00      	cmp	r4, #0
 8007a24:	d1f7      	bne.n	8007a16 <_fwalk_reent+0xe>
 8007a26:	4638      	mov	r0, r7
 8007a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a2c:	89ab      	ldrh	r3, [r5, #12]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d907      	bls.n	8007a42 <_fwalk_reent+0x3a>
 8007a32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a36:	3301      	adds	r3, #1
 8007a38:	d003      	beq.n	8007a42 <_fwalk_reent+0x3a>
 8007a3a:	4629      	mov	r1, r5
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	47c0      	blx	r8
 8007a40:	4307      	orrs	r7, r0
 8007a42:	3568      	adds	r5, #104	; 0x68
 8007a44:	e7e9      	b.n	8007a1a <_fwalk_reent+0x12>

08007a46 <__retarget_lock_init_recursive>:
 8007a46:	4770      	bx	lr

08007a48 <__retarget_lock_acquire_recursive>:
 8007a48:	4770      	bx	lr

08007a4a <__retarget_lock_release_recursive>:
 8007a4a:	4770      	bx	lr

08007a4c <__swhatbuf_r>:
 8007a4c:	b570      	push	{r4, r5, r6, lr}
 8007a4e:	460e      	mov	r6, r1
 8007a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a54:	4614      	mov	r4, r2
 8007a56:	2900      	cmp	r1, #0
 8007a58:	461d      	mov	r5, r3
 8007a5a:	b096      	sub	sp, #88	; 0x58
 8007a5c:	da08      	bge.n	8007a70 <__swhatbuf_r+0x24>
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a64:	602a      	str	r2, [r5, #0]
 8007a66:	061a      	lsls	r2, r3, #24
 8007a68:	d410      	bmi.n	8007a8c <__swhatbuf_r+0x40>
 8007a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a6e:	e00e      	b.n	8007a8e <__swhatbuf_r+0x42>
 8007a70:	466a      	mov	r2, sp
 8007a72:	f000 f915 	bl	8007ca0 <_fstat_r>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	dbf1      	blt.n	8007a5e <__swhatbuf_r+0x12>
 8007a7a:	9a01      	ldr	r2, [sp, #4]
 8007a7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a84:	425a      	negs	r2, r3
 8007a86:	415a      	adcs	r2, r3
 8007a88:	602a      	str	r2, [r5, #0]
 8007a8a:	e7ee      	b.n	8007a6a <__swhatbuf_r+0x1e>
 8007a8c:	2340      	movs	r3, #64	; 0x40
 8007a8e:	2000      	movs	r0, #0
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	b016      	add	sp, #88	; 0x58
 8007a94:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a98 <__smakebuf_r>:
 8007a98:	898b      	ldrh	r3, [r1, #12]
 8007a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a9c:	079d      	lsls	r5, r3, #30
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	460c      	mov	r4, r1
 8007aa2:	d507      	bpl.n	8007ab4 <__smakebuf_r+0x1c>
 8007aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007aa8:	6023      	str	r3, [r4, #0]
 8007aaa:	6123      	str	r3, [r4, #16]
 8007aac:	2301      	movs	r3, #1
 8007aae:	6163      	str	r3, [r4, #20]
 8007ab0:	b002      	add	sp, #8
 8007ab2:	bd70      	pop	{r4, r5, r6, pc}
 8007ab4:	466a      	mov	r2, sp
 8007ab6:	ab01      	add	r3, sp, #4
 8007ab8:	f7ff ffc8 	bl	8007a4c <__swhatbuf_r>
 8007abc:	9900      	ldr	r1, [sp, #0]
 8007abe:	4605      	mov	r5, r0
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f7ff f9d3 	bl	8006e6c <_malloc_r>
 8007ac6:	b948      	cbnz	r0, 8007adc <__smakebuf_r+0x44>
 8007ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007acc:	059a      	lsls	r2, r3, #22
 8007ace:	d4ef      	bmi.n	8007ab0 <__smakebuf_r+0x18>
 8007ad0:	f023 0303 	bic.w	r3, r3, #3
 8007ad4:	f043 0302 	orr.w	r3, r3, #2
 8007ad8:	81a3      	strh	r3, [r4, #12]
 8007ada:	e7e3      	b.n	8007aa4 <__smakebuf_r+0xc>
 8007adc:	4b0d      	ldr	r3, [pc, #52]	; (8007b14 <__smakebuf_r+0x7c>)
 8007ade:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	6020      	str	r0, [r4, #0]
 8007ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ae8:	81a3      	strh	r3, [r4, #12]
 8007aea:	9b00      	ldr	r3, [sp, #0]
 8007aec:	6120      	str	r0, [r4, #16]
 8007aee:	6163      	str	r3, [r4, #20]
 8007af0:	9b01      	ldr	r3, [sp, #4]
 8007af2:	b15b      	cbz	r3, 8007b0c <__smakebuf_r+0x74>
 8007af4:	4630      	mov	r0, r6
 8007af6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007afa:	f000 f8e3 	bl	8007cc4 <_isatty_r>
 8007afe:	b128      	cbz	r0, 8007b0c <__smakebuf_r+0x74>
 8007b00:	89a3      	ldrh	r3, [r4, #12]
 8007b02:	f023 0303 	bic.w	r3, r3, #3
 8007b06:	f043 0301 	orr.w	r3, r3, #1
 8007b0a:	81a3      	strh	r3, [r4, #12]
 8007b0c:	89a0      	ldrh	r0, [r4, #12]
 8007b0e:	4305      	orrs	r5, r0
 8007b10:	81a5      	strh	r5, [r4, #12]
 8007b12:	e7cd      	b.n	8007ab0 <__smakebuf_r+0x18>
 8007b14:	080078a5 	.word	0x080078a5

08007b18 <memchr>:
 8007b18:	4603      	mov	r3, r0
 8007b1a:	b510      	push	{r4, lr}
 8007b1c:	b2c9      	uxtb	r1, r1
 8007b1e:	4402      	add	r2, r0
 8007b20:	4293      	cmp	r3, r2
 8007b22:	4618      	mov	r0, r3
 8007b24:	d101      	bne.n	8007b2a <memchr+0x12>
 8007b26:	2000      	movs	r0, #0
 8007b28:	e003      	b.n	8007b32 <memchr+0x1a>
 8007b2a:	7804      	ldrb	r4, [r0, #0]
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	428c      	cmp	r4, r1
 8007b30:	d1f6      	bne.n	8007b20 <memchr+0x8>
 8007b32:	bd10      	pop	{r4, pc}

08007b34 <__malloc_lock>:
 8007b34:	4801      	ldr	r0, [pc, #4]	; (8007b3c <__malloc_lock+0x8>)
 8007b36:	f7ff bf87 	b.w	8007a48 <__retarget_lock_acquire_recursive>
 8007b3a:	bf00      	nop
 8007b3c:	20000c00 	.word	0x20000c00

08007b40 <__malloc_unlock>:
 8007b40:	4801      	ldr	r0, [pc, #4]	; (8007b48 <__malloc_unlock+0x8>)
 8007b42:	f7ff bf82 	b.w	8007a4a <__retarget_lock_release_recursive>
 8007b46:	bf00      	nop
 8007b48:	20000c00 	.word	0x20000c00

08007b4c <_raise_r>:
 8007b4c:	291f      	cmp	r1, #31
 8007b4e:	b538      	push	{r3, r4, r5, lr}
 8007b50:	4604      	mov	r4, r0
 8007b52:	460d      	mov	r5, r1
 8007b54:	d904      	bls.n	8007b60 <_raise_r+0x14>
 8007b56:	2316      	movs	r3, #22
 8007b58:	6003      	str	r3, [r0, #0]
 8007b5a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b62:	b112      	cbz	r2, 8007b6a <_raise_r+0x1e>
 8007b64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b68:	b94b      	cbnz	r3, 8007b7e <_raise_r+0x32>
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	f000 f830 	bl	8007bd0 <_getpid_r>
 8007b70:	462a      	mov	r2, r5
 8007b72:	4601      	mov	r1, r0
 8007b74:	4620      	mov	r0, r4
 8007b76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b7a:	f000 b817 	b.w	8007bac <_kill_r>
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d00a      	beq.n	8007b98 <_raise_r+0x4c>
 8007b82:	1c59      	adds	r1, r3, #1
 8007b84:	d103      	bne.n	8007b8e <_raise_r+0x42>
 8007b86:	2316      	movs	r3, #22
 8007b88:	6003      	str	r3, [r0, #0]
 8007b8a:	2001      	movs	r0, #1
 8007b8c:	e7e7      	b.n	8007b5e <_raise_r+0x12>
 8007b8e:	2400      	movs	r4, #0
 8007b90:	4628      	mov	r0, r5
 8007b92:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b96:	4798      	blx	r3
 8007b98:	2000      	movs	r0, #0
 8007b9a:	e7e0      	b.n	8007b5e <_raise_r+0x12>

08007b9c <raise>:
 8007b9c:	4b02      	ldr	r3, [pc, #8]	; (8007ba8 <raise+0xc>)
 8007b9e:	4601      	mov	r1, r0
 8007ba0:	6818      	ldr	r0, [r3, #0]
 8007ba2:	f7ff bfd3 	b.w	8007b4c <_raise_r>
 8007ba6:	bf00      	nop
 8007ba8:	20000010 	.word	0x20000010

08007bac <_kill_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	2300      	movs	r3, #0
 8007bb0:	4d06      	ldr	r5, [pc, #24]	; (8007bcc <_kill_r+0x20>)
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	602b      	str	r3, [r5, #0]
 8007bba:	f7fb ff0c 	bl	80039d6 <_kill>
 8007bbe:	1c43      	adds	r3, r0, #1
 8007bc0:	d102      	bne.n	8007bc8 <_kill_r+0x1c>
 8007bc2:	682b      	ldr	r3, [r5, #0]
 8007bc4:	b103      	cbz	r3, 8007bc8 <_kill_r+0x1c>
 8007bc6:	6023      	str	r3, [r4, #0]
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	bf00      	nop
 8007bcc:	20000c04 	.word	0x20000c04

08007bd0 <_getpid_r>:
 8007bd0:	f7fb befa 	b.w	80039c8 <_getpid>

08007bd4 <__sread>:
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bdc:	f000 f894 	bl	8007d08 <_read_r>
 8007be0:	2800      	cmp	r0, #0
 8007be2:	bfab      	itete	ge
 8007be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007be6:	89a3      	ldrhlt	r3, [r4, #12]
 8007be8:	181b      	addge	r3, r3, r0
 8007bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bee:	bfac      	ite	ge
 8007bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bf2:	81a3      	strhlt	r3, [r4, #12]
 8007bf4:	bd10      	pop	{r4, pc}

08007bf6 <__swrite>:
 8007bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bfa:	461f      	mov	r7, r3
 8007bfc:	898b      	ldrh	r3, [r1, #12]
 8007bfe:	4605      	mov	r5, r0
 8007c00:	05db      	lsls	r3, r3, #23
 8007c02:	460c      	mov	r4, r1
 8007c04:	4616      	mov	r6, r2
 8007c06:	d505      	bpl.n	8007c14 <__swrite+0x1e>
 8007c08:	2302      	movs	r3, #2
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c10:	f000 f868 	bl	8007ce4 <_lseek_r>
 8007c14:	89a3      	ldrh	r3, [r4, #12]
 8007c16:	4632      	mov	r2, r6
 8007c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c1c:	81a3      	strh	r3, [r4, #12]
 8007c1e:	4628      	mov	r0, r5
 8007c20:	463b      	mov	r3, r7
 8007c22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c2a:	f000 b817 	b.w	8007c5c <_write_r>

08007c2e <__sseek>:
 8007c2e:	b510      	push	{r4, lr}
 8007c30:	460c      	mov	r4, r1
 8007c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c36:	f000 f855 	bl	8007ce4 <_lseek_r>
 8007c3a:	1c43      	adds	r3, r0, #1
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	bf15      	itete	ne
 8007c40:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c4a:	81a3      	strheq	r3, [r4, #12]
 8007c4c:	bf18      	it	ne
 8007c4e:	81a3      	strhne	r3, [r4, #12]
 8007c50:	bd10      	pop	{r4, pc}

08007c52 <__sclose>:
 8007c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c56:	f000 b813 	b.w	8007c80 <_close_r>
	...

08007c5c <_write_r>:
 8007c5c:	b538      	push	{r3, r4, r5, lr}
 8007c5e:	4604      	mov	r4, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	4611      	mov	r1, r2
 8007c64:	2200      	movs	r2, #0
 8007c66:	4d05      	ldr	r5, [pc, #20]	; (8007c7c <_write_r+0x20>)
 8007c68:	602a      	str	r2, [r5, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f7fb feea 	bl	8003a44 <_write>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_write_r+0x1e>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_write_r+0x1e>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	20000c04 	.word	0x20000c04

08007c80 <_close_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	2300      	movs	r3, #0
 8007c84:	4d05      	ldr	r5, [pc, #20]	; (8007c9c <_close_r+0x1c>)
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	602b      	str	r3, [r5, #0]
 8007c8c:	f7fb fef6 	bl	8003a7c <_close>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_close_r+0x1a>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_close_r+0x1a>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	20000c04 	.word	0x20000c04

08007ca0 <_fstat_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	4d06      	ldr	r5, [pc, #24]	; (8007cc0 <_fstat_r+0x20>)
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	4608      	mov	r0, r1
 8007caa:	4611      	mov	r1, r2
 8007cac:	602b      	str	r3, [r5, #0]
 8007cae:	f7fb fef0 	bl	8003a92 <_fstat>
 8007cb2:	1c43      	adds	r3, r0, #1
 8007cb4:	d102      	bne.n	8007cbc <_fstat_r+0x1c>
 8007cb6:	682b      	ldr	r3, [r5, #0]
 8007cb8:	b103      	cbz	r3, 8007cbc <_fstat_r+0x1c>
 8007cba:	6023      	str	r3, [r4, #0]
 8007cbc:	bd38      	pop	{r3, r4, r5, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000c04 	.word	0x20000c04

08007cc4 <_isatty_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	4d05      	ldr	r5, [pc, #20]	; (8007ce0 <_isatty_r+0x1c>)
 8007cca:	4604      	mov	r4, r0
 8007ccc:	4608      	mov	r0, r1
 8007cce:	602b      	str	r3, [r5, #0]
 8007cd0:	f7fb feee 	bl	8003ab0 <_isatty>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_isatty_r+0x1a>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_isatty_r+0x1a>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	20000c04 	.word	0x20000c04

08007ce4 <_lseek_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	4608      	mov	r0, r1
 8007cea:	4611      	mov	r1, r2
 8007cec:	2200      	movs	r2, #0
 8007cee:	4d05      	ldr	r5, [pc, #20]	; (8007d04 <_lseek_r+0x20>)
 8007cf0:	602a      	str	r2, [r5, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f7fb fee6 	bl	8003ac4 <_lseek>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_lseek_r+0x1e>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_lseek_r+0x1e>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	20000c04 	.word	0x20000c04

08007d08 <_read_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4604      	mov	r4, r0
 8007d0c:	4608      	mov	r0, r1
 8007d0e:	4611      	mov	r1, r2
 8007d10:	2200      	movs	r2, #0
 8007d12:	4d05      	ldr	r5, [pc, #20]	; (8007d28 <_read_r+0x20>)
 8007d14:	602a      	str	r2, [r5, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	f7fb fe77 	bl	8003a0a <_read>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	d102      	bne.n	8007d26 <_read_r+0x1e>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	b103      	cbz	r3, 8007d26 <_read_r+0x1e>
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	20000c04 	.word	0x20000c04

08007d2c <cos>:
 8007d2c:	b530      	push	{r4, r5, lr}
 8007d2e:	4a20      	ldr	r2, [pc, #128]	; (8007db0 <cos+0x84>)
 8007d30:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d34:	4293      	cmp	r3, r2
 8007d36:	b087      	sub	sp, #28
 8007d38:	dc06      	bgt.n	8007d48 <cos+0x1c>
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	b007      	add	sp, #28
 8007d40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d44:	f000 ba9c 	b.w	8008280 <__kernel_cos>
 8007d48:	4a1a      	ldr	r2, [pc, #104]	; (8007db4 <cos+0x88>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	dd05      	ble.n	8007d5a <cos+0x2e>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	460b      	mov	r3, r1
 8007d52:	f7f8 fa6d 	bl	8000230 <__aeabi_dsub>
 8007d56:	b007      	add	sp, #28
 8007d58:	bd30      	pop	{r4, r5, pc}
 8007d5a:	aa02      	add	r2, sp, #8
 8007d5c:	f000 f898 	bl	8007e90 <__ieee754_rem_pio2>
 8007d60:	f000 0003 	and.w	r0, r0, #3
 8007d64:	2801      	cmp	r0, #1
 8007d66:	d009      	beq.n	8007d7c <cos+0x50>
 8007d68:	2802      	cmp	r0, #2
 8007d6a:	d011      	beq.n	8007d90 <cos+0x64>
 8007d6c:	b9b8      	cbnz	r0, 8007d9e <cos+0x72>
 8007d6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d76:	f000 fa83 	bl	8008280 <__kernel_cos>
 8007d7a:	e7ec      	b.n	8007d56 <cos+0x2a>
 8007d7c:	9000      	str	r0, [sp, #0]
 8007d7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d86:	f000 fe7b 	bl	8008a80 <__kernel_sin>
 8007d8a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007d8e:	e7e2      	b.n	8007d56 <cos+0x2a>
 8007d90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d98:	f000 fa72 	bl	8008280 <__kernel_cos>
 8007d9c:	e7f5      	b.n	8007d8a <cos+0x5e>
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007daa:	f000 fe69 	bl	8008a80 <__kernel_sin>
 8007dae:	e7d2      	b.n	8007d56 <cos+0x2a>
 8007db0:	3fe921fb 	.word	0x3fe921fb
 8007db4:	7fefffff 	.word	0x7fefffff

08007db8 <sin>:
 8007db8:	b530      	push	{r4, r5, lr}
 8007dba:	4a20      	ldr	r2, [pc, #128]	; (8007e3c <sin+0x84>)
 8007dbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	dc06      	bgt.n	8007dd4 <sin+0x1c>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	2200      	movs	r2, #0
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f000 fe57 	bl	8008a80 <__kernel_sin>
 8007dd2:	e006      	b.n	8007de2 <sin+0x2a>
 8007dd4:	4a1a      	ldr	r2, [pc, #104]	; (8007e40 <sin+0x88>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	dd05      	ble.n	8007de6 <sin+0x2e>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	f7f8 fa27 	bl	8000230 <__aeabi_dsub>
 8007de2:	b007      	add	sp, #28
 8007de4:	bd30      	pop	{r4, r5, pc}
 8007de6:	aa02      	add	r2, sp, #8
 8007de8:	f000 f852 	bl	8007e90 <__ieee754_rem_pio2>
 8007dec:	f000 0003 	and.w	r0, r0, #3
 8007df0:	2801      	cmp	r0, #1
 8007df2:	d009      	beq.n	8007e08 <sin+0x50>
 8007df4:	2802      	cmp	r0, #2
 8007df6:	d00e      	beq.n	8007e16 <sin+0x5e>
 8007df8:	b9c0      	cbnz	r0, 8007e2c <sin+0x74>
 8007dfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007dfe:	2301      	movs	r3, #1
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e06:	e7e2      	b.n	8007dce <sin+0x16>
 8007e08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e10:	f000 fa36 	bl	8008280 <__kernel_cos>
 8007e14:	e7e5      	b.n	8007de2 <sin+0x2a>
 8007e16:	2301      	movs	r3, #1
 8007e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e1c:	9300      	str	r3, [sp, #0]
 8007e1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e22:	f000 fe2d 	bl	8008a80 <__kernel_sin>
 8007e26:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8007e2a:	e7da      	b.n	8007de2 <sin+0x2a>
 8007e2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e34:	f000 fa24 	bl	8008280 <__kernel_cos>
 8007e38:	e7f5      	b.n	8007e26 <sin+0x6e>
 8007e3a:	bf00      	nop
 8007e3c:	3fe921fb 	.word	0x3fe921fb
 8007e40:	7fefffff 	.word	0x7fefffff

08007e44 <roundf>:
 8007e44:	b508      	push	{r3, lr}
 8007e46:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007e4a:	3b7f      	subs	r3, #127	; 0x7f
 8007e4c:	2b16      	cmp	r3, #22
 8007e4e:	4601      	mov	r1, r0
 8007e50:	4602      	mov	r2, r0
 8007e52:	dc14      	bgt.n	8007e7e <roundf+0x3a>
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	da07      	bge.n	8007e68 <roundf+0x24>
 8007e58:	3301      	adds	r3, #1
 8007e5a:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 8007e5e:	d101      	bne.n	8007e64 <roundf+0x20>
 8007e60:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8007e64:	4608      	mov	r0, r1
 8007e66:	bd08      	pop	{r3, pc}
 8007e68:	4808      	ldr	r0, [pc, #32]	; (8007e8c <roundf+0x48>)
 8007e6a:	4118      	asrs	r0, r3
 8007e6c:	4201      	tst	r1, r0
 8007e6e:	d0f9      	beq.n	8007e64 <roundf+0x20>
 8007e70:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e74:	4119      	asrs	r1, r3
 8007e76:	4411      	add	r1, r2
 8007e78:	ea21 0100 	bic.w	r1, r1, r0
 8007e7c:	e7f2      	b.n	8007e64 <roundf+0x20>
 8007e7e:	2b80      	cmp	r3, #128	; 0x80
 8007e80:	d1f0      	bne.n	8007e64 <roundf+0x20>
 8007e82:	f7f8 fea5 	bl	8000bd0 <__addsf3>
 8007e86:	4601      	mov	r1, r0
 8007e88:	e7ec      	b.n	8007e64 <roundf+0x20>
 8007e8a:	bf00      	nop
 8007e8c:	007fffff 	.word	0x007fffff

08007e90 <__ieee754_rem_pio2>:
 8007e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e94:	4614      	mov	r4, r2
 8007e96:	4ac4      	ldr	r2, [pc, #784]	; (80081a8 <__ieee754_rem_pio2+0x318>)
 8007e98:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8007e9c:	b08d      	sub	sp, #52	; 0x34
 8007e9e:	4592      	cmp	sl, r2
 8007ea0:	9104      	str	r1, [sp, #16]
 8007ea2:	dc07      	bgt.n	8007eb4 <__ieee754_rem_pio2+0x24>
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	e9c4 0100 	strd	r0, r1, [r4]
 8007eac:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007eb0:	2500      	movs	r5, #0
 8007eb2:	e024      	b.n	8007efe <__ieee754_rem_pio2+0x6e>
 8007eb4:	4abd      	ldr	r2, [pc, #756]	; (80081ac <__ieee754_rem_pio2+0x31c>)
 8007eb6:	4592      	cmp	sl, r2
 8007eb8:	dc72      	bgt.n	8007fa0 <__ieee754_rem_pio2+0x110>
 8007eba:	9b04      	ldr	r3, [sp, #16]
 8007ebc:	4dbc      	ldr	r5, [pc, #752]	; (80081b0 <__ieee754_rem_pio2+0x320>)
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	a3ab      	add	r3, pc, #684	; (adr r3, 8008170 <__ieee754_rem_pio2+0x2e0>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	dd36      	ble.n	8007f36 <__ieee754_rem_pio2+0xa6>
 8007ec8:	f7f8 f9b2 	bl	8000230 <__aeabi_dsub>
 8007ecc:	45aa      	cmp	sl, r5
 8007ece:	4606      	mov	r6, r0
 8007ed0:	460f      	mov	r7, r1
 8007ed2:	d018      	beq.n	8007f06 <__ieee754_rem_pio2+0x76>
 8007ed4:	a3a8      	add	r3, pc, #672	; (adr r3, 8008178 <__ieee754_rem_pio2+0x2e8>)
 8007ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eda:	f7f8 f9a9 	bl	8000230 <__aeabi_dsub>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	e9c4 2300 	strd	r2, r3, [r4]
 8007ee8:	4639      	mov	r1, r7
 8007eea:	f7f8 f9a1 	bl	8000230 <__aeabi_dsub>
 8007eee:	a3a2      	add	r3, pc, #648	; (adr r3, 8008178 <__ieee754_rem_pio2+0x2e8>)
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	f7f8 f99c 	bl	8000230 <__aeabi_dsub>
 8007ef8:	2501      	movs	r5, #1
 8007efa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007efe:	4628      	mov	r0, r5
 8007f00:	b00d      	add	sp, #52	; 0x34
 8007f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f06:	a39e      	add	r3, pc, #632	; (adr r3, 8008180 <__ieee754_rem_pio2+0x2f0>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	f7f8 f990 	bl	8000230 <__aeabi_dsub>
 8007f10:	a39d      	add	r3, pc, #628	; (adr r3, 8008188 <__ieee754_rem_pio2+0x2f8>)
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	4606      	mov	r6, r0
 8007f18:	460f      	mov	r7, r1
 8007f1a:	f7f8 f989 	bl	8000230 <__aeabi_dsub>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4630      	mov	r0, r6
 8007f24:	e9c4 2300 	strd	r2, r3, [r4]
 8007f28:	4639      	mov	r1, r7
 8007f2a:	f7f8 f981 	bl	8000230 <__aeabi_dsub>
 8007f2e:	a396      	add	r3, pc, #600	; (adr r3, 8008188 <__ieee754_rem_pio2+0x2f8>)
 8007f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f34:	e7de      	b.n	8007ef4 <__ieee754_rem_pio2+0x64>
 8007f36:	f7f8 f97d 	bl	8000234 <__adddf3>
 8007f3a:	45aa      	cmp	sl, r5
 8007f3c:	4606      	mov	r6, r0
 8007f3e:	460f      	mov	r7, r1
 8007f40:	d016      	beq.n	8007f70 <__ieee754_rem_pio2+0xe0>
 8007f42:	a38d      	add	r3, pc, #564	; (adr r3, 8008178 <__ieee754_rem_pio2+0x2e8>)
 8007f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f48:	f7f8 f974 	bl	8000234 <__adddf3>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4630      	mov	r0, r6
 8007f52:	e9c4 2300 	strd	r2, r3, [r4]
 8007f56:	4639      	mov	r1, r7
 8007f58:	f7f8 f96a 	bl	8000230 <__aeabi_dsub>
 8007f5c:	a386      	add	r3, pc, #536	; (adr r3, 8008178 <__ieee754_rem_pio2+0x2e8>)
 8007f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f62:	f7f8 f967 	bl	8000234 <__adddf3>
 8007f66:	f04f 35ff 	mov.w	r5, #4294967295
 8007f6a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007f6e:	e7c6      	b.n	8007efe <__ieee754_rem_pio2+0x6e>
 8007f70:	a383      	add	r3, pc, #524	; (adr r3, 8008180 <__ieee754_rem_pio2+0x2f0>)
 8007f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f76:	f7f8 f95d 	bl	8000234 <__adddf3>
 8007f7a:	a383      	add	r3, pc, #524	; (adr r3, 8008188 <__ieee754_rem_pio2+0x2f8>)
 8007f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f80:	4606      	mov	r6, r0
 8007f82:	460f      	mov	r7, r1
 8007f84:	f7f8 f956 	bl	8000234 <__adddf3>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	4630      	mov	r0, r6
 8007f8e:	e9c4 2300 	strd	r2, r3, [r4]
 8007f92:	4639      	mov	r1, r7
 8007f94:	f7f8 f94c 	bl	8000230 <__aeabi_dsub>
 8007f98:	a37b      	add	r3, pc, #492	; (adr r3, 8008188 <__ieee754_rem_pio2+0x2f8>)
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	e7e0      	b.n	8007f62 <__ieee754_rem_pio2+0xd2>
 8007fa0:	4a84      	ldr	r2, [pc, #528]	; (80081b4 <__ieee754_rem_pio2+0x324>)
 8007fa2:	4592      	cmp	sl, r2
 8007fa4:	f300 80d5 	bgt.w	8008152 <__ieee754_rem_pio2+0x2c2>
 8007fa8:	f000 fe20 	bl	8008bec <fabs>
 8007fac:	a378      	add	r3, pc, #480	; (adr r3, 8008190 <__ieee754_rem_pio2+0x300>)
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	4606      	mov	r6, r0
 8007fb4:	460f      	mov	r7, r1
 8007fb6:	f7f8 faf3 	bl	80005a0 <__aeabi_dmul>
 8007fba:	2200      	movs	r2, #0
 8007fbc:	4b7e      	ldr	r3, [pc, #504]	; (80081b8 <__ieee754_rem_pio2+0x328>)
 8007fbe:	f7f8 f939 	bl	8000234 <__adddf3>
 8007fc2:	f7f8 fd87 	bl	8000ad4 <__aeabi_d2iz>
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	f7f8 fa80 	bl	80004cc <__aeabi_i2d>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	460b      	mov	r3, r1
 8007fd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fd4:	a366      	add	r3, pc, #408	; (adr r3, 8008170 <__ieee754_rem_pio2+0x2e0>)
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	f7f8 fae1 	bl	80005a0 <__aeabi_dmul>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	4639      	mov	r1, r7
 8007fe6:	f7f8 f923 	bl	8000230 <__aeabi_dsub>
 8007fea:	a363      	add	r3, pc, #396	; (adr r3, 8008178 <__ieee754_rem_pio2+0x2e8>)
 8007fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff0:	4680      	mov	r8, r0
 8007ff2:	4689      	mov	r9, r1
 8007ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ff8:	f7f8 fad2 	bl	80005a0 <__aeabi_dmul>
 8007ffc:	2d1f      	cmp	r5, #31
 8007ffe:	4606      	mov	r6, r0
 8008000:	460f      	mov	r7, r1
 8008002:	dc0e      	bgt.n	8008022 <__ieee754_rem_pio2+0x192>
 8008004:	4b6d      	ldr	r3, [pc, #436]	; (80081bc <__ieee754_rem_pio2+0x32c>)
 8008006:	1e6a      	subs	r2, r5, #1
 8008008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800c:	4553      	cmp	r3, sl
 800800e:	d008      	beq.n	8008022 <__ieee754_rem_pio2+0x192>
 8008010:	4632      	mov	r2, r6
 8008012:	463b      	mov	r3, r7
 8008014:	4640      	mov	r0, r8
 8008016:	4649      	mov	r1, r9
 8008018:	f7f8 f90a 	bl	8000230 <__aeabi_dsub>
 800801c:	e9c4 0100 	strd	r0, r1, [r4]
 8008020:	e013      	b.n	800804a <__ieee754_rem_pio2+0x1ba>
 8008022:	463b      	mov	r3, r7
 8008024:	4632      	mov	r2, r6
 8008026:	4640      	mov	r0, r8
 8008028:	4649      	mov	r1, r9
 800802a:	f7f8 f901 	bl	8000230 <__aeabi_dsub>
 800802e:	ea4f 532a 	mov.w	r3, sl, asr #20
 8008032:	9305      	str	r3, [sp, #20]
 8008034:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008038:	ebc3 5a1a 	rsb	sl, r3, sl, lsr #20
 800803c:	f1ba 0f10 	cmp.w	sl, #16
 8008040:	dc1f      	bgt.n	8008082 <__ieee754_rem_pio2+0x1f2>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	e9c4 2300 	strd	r2, r3, [r4]
 800804a:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800804e:	4640      	mov	r0, r8
 8008050:	4653      	mov	r3, sl
 8008052:	4649      	mov	r1, r9
 8008054:	f7f8 f8ec 	bl	8000230 <__aeabi_dsub>
 8008058:	4632      	mov	r2, r6
 800805a:	463b      	mov	r3, r7
 800805c:	f7f8 f8e8 	bl	8000230 <__aeabi_dsub>
 8008060:	460b      	mov	r3, r1
 8008062:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008066:	9904      	ldr	r1, [sp, #16]
 8008068:	4602      	mov	r2, r0
 800806a:	2900      	cmp	r1, #0
 800806c:	f6bf af47 	bge.w	8007efe <__ieee754_rem_pio2+0x6e>
 8008070:	f10a 4100 	add.w	r1, sl, #2147483648	; 0x80000000
 8008074:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8008078:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800807c:	60e3      	str	r3, [r4, #12]
 800807e:	426d      	negs	r5, r5
 8008080:	e73d      	b.n	8007efe <__ieee754_rem_pio2+0x6e>
 8008082:	a33f      	add	r3, pc, #252	; (adr r3, 8008180 <__ieee754_rem_pio2+0x2f0>)
 8008084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008088:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800808c:	f7f8 fa88 	bl	80005a0 <__aeabi_dmul>
 8008090:	4606      	mov	r6, r0
 8008092:	460f      	mov	r7, r1
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	4640      	mov	r0, r8
 800809a:	4649      	mov	r1, r9
 800809c:	f7f8 f8c8 	bl	8000230 <__aeabi_dsub>
 80080a0:	4602      	mov	r2, r0
 80080a2:	460b      	mov	r3, r1
 80080a4:	4682      	mov	sl, r0
 80080a6:	468b      	mov	fp, r1
 80080a8:	4640      	mov	r0, r8
 80080aa:	4649      	mov	r1, r9
 80080ac:	f7f8 f8c0 	bl	8000230 <__aeabi_dsub>
 80080b0:	4632      	mov	r2, r6
 80080b2:	463b      	mov	r3, r7
 80080b4:	f7f8 f8bc 	bl	8000230 <__aeabi_dsub>
 80080b8:	a333      	add	r3, pc, #204	; (adr r3, 8008188 <__ieee754_rem_pio2+0x2f8>)
 80080ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080be:	4606      	mov	r6, r0
 80080c0:	460f      	mov	r7, r1
 80080c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c6:	f7f8 fa6b 	bl	80005a0 <__aeabi_dmul>
 80080ca:	4632      	mov	r2, r6
 80080cc:	463b      	mov	r3, r7
 80080ce:	f7f8 f8af 	bl	8000230 <__aeabi_dsub>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4606      	mov	r6, r0
 80080d8:	460f      	mov	r7, r1
 80080da:	4650      	mov	r0, sl
 80080dc:	4659      	mov	r1, fp
 80080de:	f7f8 f8a7 	bl	8000230 <__aeabi_dsub>
 80080e2:	9a05      	ldr	r2, [sp, #20]
 80080e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	2b31      	cmp	r3, #49	; 0x31
 80080ec:	dc06      	bgt.n	80080fc <__ieee754_rem_pio2+0x26c>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	46d0      	mov	r8, sl
 80080f4:	46d9      	mov	r9, fp
 80080f6:	e9c4 2300 	strd	r2, r3, [r4]
 80080fa:	e7a6      	b.n	800804a <__ieee754_rem_pio2+0x1ba>
 80080fc:	a326      	add	r3, pc, #152	; (adr r3, 8008198 <__ieee754_rem_pio2+0x308>)
 80080fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008106:	f7f8 fa4b 	bl	80005a0 <__aeabi_dmul>
 800810a:	4606      	mov	r6, r0
 800810c:	460f      	mov	r7, r1
 800810e:	4602      	mov	r2, r0
 8008110:	460b      	mov	r3, r1
 8008112:	4650      	mov	r0, sl
 8008114:	4659      	mov	r1, fp
 8008116:	f7f8 f88b 	bl	8000230 <__aeabi_dsub>
 800811a:	4602      	mov	r2, r0
 800811c:	460b      	mov	r3, r1
 800811e:	4680      	mov	r8, r0
 8008120:	4689      	mov	r9, r1
 8008122:	4650      	mov	r0, sl
 8008124:	4659      	mov	r1, fp
 8008126:	f7f8 f883 	bl	8000230 <__aeabi_dsub>
 800812a:	4632      	mov	r2, r6
 800812c:	463b      	mov	r3, r7
 800812e:	f7f8 f87f 	bl	8000230 <__aeabi_dsub>
 8008132:	a31b      	add	r3, pc, #108	; (adr r3, 80081a0 <__ieee754_rem_pio2+0x310>)
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	4606      	mov	r6, r0
 800813a:	460f      	mov	r7, r1
 800813c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008140:	f7f8 fa2e 	bl	80005a0 <__aeabi_dmul>
 8008144:	4632      	mov	r2, r6
 8008146:	463b      	mov	r3, r7
 8008148:	f7f8 f872 	bl	8000230 <__aeabi_dsub>
 800814c:	4606      	mov	r6, r0
 800814e:	460f      	mov	r7, r1
 8008150:	e75e      	b.n	8008010 <__ieee754_rem_pio2+0x180>
 8008152:	4a1b      	ldr	r2, [pc, #108]	; (80081c0 <__ieee754_rem_pio2+0x330>)
 8008154:	4592      	cmp	sl, r2
 8008156:	dd35      	ble.n	80081c4 <__ieee754_rem_pio2+0x334>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	f7f8 f868 	bl	8000230 <__aeabi_dsub>
 8008160:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008164:	e9c4 0100 	strd	r0, r1, [r4]
 8008168:	e6a2      	b.n	8007eb0 <__ieee754_rem_pio2+0x20>
 800816a:	bf00      	nop
 800816c:	f3af 8000 	nop.w
 8008170:	54400000 	.word	0x54400000
 8008174:	3ff921fb 	.word	0x3ff921fb
 8008178:	1a626331 	.word	0x1a626331
 800817c:	3dd0b461 	.word	0x3dd0b461
 8008180:	1a600000 	.word	0x1a600000
 8008184:	3dd0b461 	.word	0x3dd0b461
 8008188:	2e037073 	.word	0x2e037073
 800818c:	3ba3198a 	.word	0x3ba3198a
 8008190:	6dc9c883 	.word	0x6dc9c883
 8008194:	3fe45f30 	.word	0x3fe45f30
 8008198:	2e000000 	.word	0x2e000000
 800819c:	3ba3198a 	.word	0x3ba3198a
 80081a0:	252049c1 	.word	0x252049c1
 80081a4:	397b839a 	.word	0x397b839a
 80081a8:	3fe921fb 	.word	0x3fe921fb
 80081ac:	4002d97b 	.word	0x4002d97b
 80081b0:	3ff921fb 	.word	0x3ff921fb
 80081b4:	413921fb 	.word	0x413921fb
 80081b8:	3fe00000 	.word	0x3fe00000
 80081bc:	08008f78 	.word	0x08008f78
 80081c0:	7fefffff 	.word	0x7fefffff
 80081c4:	ea4f 552a 	mov.w	r5, sl, asr #20
 80081c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80081cc:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 80081d0:	460f      	mov	r7, r1
 80081d2:	4606      	mov	r6, r0
 80081d4:	f7f8 fc7e 	bl	8000ad4 <__aeabi_d2iz>
 80081d8:	f7f8 f978 	bl	80004cc <__aeabi_i2d>
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	4630      	mov	r0, r6
 80081e2:	4639      	mov	r1, r7
 80081e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80081e8:	f7f8 f822 	bl	8000230 <__aeabi_dsub>
 80081ec:	2200      	movs	r2, #0
 80081ee:	4b22      	ldr	r3, [pc, #136]	; (8008278 <__ieee754_rem_pio2+0x3e8>)
 80081f0:	f7f8 f9d6 	bl	80005a0 <__aeabi_dmul>
 80081f4:	460f      	mov	r7, r1
 80081f6:	4606      	mov	r6, r0
 80081f8:	f7f8 fc6c 	bl	8000ad4 <__aeabi_d2iz>
 80081fc:	f7f8 f966 	bl	80004cc <__aeabi_i2d>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	4630      	mov	r0, r6
 8008206:	4639      	mov	r1, r7
 8008208:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800820c:	f7f8 f810 	bl	8000230 <__aeabi_dsub>
 8008210:	2200      	movs	r2, #0
 8008212:	4b19      	ldr	r3, [pc, #100]	; (8008278 <__ieee754_rem_pio2+0x3e8>)
 8008214:	f7f8 f9c4 	bl	80005a0 <__aeabi_dmul>
 8008218:	f04f 0803 	mov.w	r8, #3
 800821c:	2600      	movs	r6, #0
 800821e:	2700      	movs	r7, #0
 8008220:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008224:	f10d 0928 	add.w	r9, sp, #40	; 0x28
 8008228:	4632      	mov	r2, r6
 800822a:	e879 0102 	ldrd	r0, r1, [r9], #-8
 800822e:	463b      	mov	r3, r7
 8008230:	46c2      	mov	sl, r8
 8008232:	f108 38ff 	add.w	r8, r8, #4294967295
 8008236:	f7f8 fc1b 	bl	8000a70 <__aeabi_dcmpeq>
 800823a:	2800      	cmp	r0, #0
 800823c:	d1f4      	bne.n	8008228 <__ieee754_rem_pio2+0x398>
 800823e:	4b0f      	ldr	r3, [pc, #60]	; (800827c <__ieee754_rem_pio2+0x3ec>)
 8008240:	462a      	mov	r2, r5
 8008242:	9301      	str	r3, [sp, #4]
 8008244:	2302      	movs	r3, #2
 8008246:	4621      	mov	r1, r4
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	a806      	add	r0, sp, #24
 800824c:	4653      	mov	r3, sl
 800824e:	f000 f8d5 	bl	80083fc <__kernel_rem_pio2>
 8008252:	9b04      	ldr	r3, [sp, #16]
 8008254:	4605      	mov	r5, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	f6bf ae51 	bge.w	8007efe <__ieee754_rem_pio2+0x6e>
 800825c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8008260:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008264:	e9c4 2300 	strd	r2, r3, [r4]
 8008268:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800826c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008270:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008274:	e703      	b.n	800807e <__ieee754_rem_pio2+0x1ee>
 8008276:	bf00      	nop
 8008278:	41700000 	.word	0x41700000
 800827c:	08008ff8 	.word	0x08008ff8

08008280 <__kernel_cos>:
 8008280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008288:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800828c:	4680      	mov	r8, r0
 800828e:	460f      	mov	r7, r1
 8008290:	e9cd 2300 	strd	r2, r3, [sp]
 8008294:	da04      	bge.n	80082a0 <__kernel_cos+0x20>
 8008296:	f7f8 fc1d 	bl	8000ad4 <__aeabi_d2iz>
 800829a:	2800      	cmp	r0, #0
 800829c:	f000 8086 	beq.w	80083ac <__kernel_cos+0x12c>
 80082a0:	4642      	mov	r2, r8
 80082a2:	463b      	mov	r3, r7
 80082a4:	4640      	mov	r0, r8
 80082a6:	4639      	mov	r1, r7
 80082a8:	f7f8 f97a 	bl	80005a0 <__aeabi_dmul>
 80082ac:	2200      	movs	r2, #0
 80082ae:	4b4e      	ldr	r3, [pc, #312]	; (80083e8 <__kernel_cos+0x168>)
 80082b0:	4604      	mov	r4, r0
 80082b2:	460d      	mov	r5, r1
 80082b4:	f7f8 f974 	bl	80005a0 <__aeabi_dmul>
 80082b8:	a33f      	add	r3, pc, #252	; (adr r3, 80083b8 <__kernel_cos+0x138>)
 80082ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082be:	4682      	mov	sl, r0
 80082c0:	468b      	mov	fp, r1
 80082c2:	4620      	mov	r0, r4
 80082c4:	4629      	mov	r1, r5
 80082c6:	f7f8 f96b 	bl	80005a0 <__aeabi_dmul>
 80082ca:	a33d      	add	r3, pc, #244	; (adr r3, 80083c0 <__kernel_cos+0x140>)
 80082cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d0:	f7f7 ffb0 	bl	8000234 <__adddf3>
 80082d4:	4622      	mov	r2, r4
 80082d6:	462b      	mov	r3, r5
 80082d8:	f7f8 f962 	bl	80005a0 <__aeabi_dmul>
 80082dc:	a33a      	add	r3, pc, #232	; (adr r3, 80083c8 <__kernel_cos+0x148>)
 80082de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082e2:	f7f7 ffa5 	bl	8000230 <__aeabi_dsub>
 80082e6:	4622      	mov	r2, r4
 80082e8:	462b      	mov	r3, r5
 80082ea:	f7f8 f959 	bl	80005a0 <__aeabi_dmul>
 80082ee:	a338      	add	r3, pc, #224	; (adr r3, 80083d0 <__kernel_cos+0x150>)
 80082f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f4:	f7f7 ff9e 	bl	8000234 <__adddf3>
 80082f8:	4622      	mov	r2, r4
 80082fa:	462b      	mov	r3, r5
 80082fc:	f7f8 f950 	bl	80005a0 <__aeabi_dmul>
 8008300:	a335      	add	r3, pc, #212	; (adr r3, 80083d8 <__kernel_cos+0x158>)
 8008302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008306:	f7f7 ff93 	bl	8000230 <__aeabi_dsub>
 800830a:	4622      	mov	r2, r4
 800830c:	462b      	mov	r3, r5
 800830e:	f7f8 f947 	bl	80005a0 <__aeabi_dmul>
 8008312:	a333      	add	r3, pc, #204	; (adr r3, 80083e0 <__kernel_cos+0x160>)
 8008314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008318:	f7f7 ff8c 	bl	8000234 <__adddf3>
 800831c:	4622      	mov	r2, r4
 800831e:	462b      	mov	r3, r5
 8008320:	f7f8 f93e 	bl	80005a0 <__aeabi_dmul>
 8008324:	4622      	mov	r2, r4
 8008326:	462b      	mov	r3, r5
 8008328:	f7f8 f93a 	bl	80005a0 <__aeabi_dmul>
 800832c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008330:	4604      	mov	r4, r0
 8008332:	460d      	mov	r5, r1
 8008334:	4640      	mov	r0, r8
 8008336:	4639      	mov	r1, r7
 8008338:	f7f8 f932 	bl	80005a0 <__aeabi_dmul>
 800833c:	460b      	mov	r3, r1
 800833e:	4602      	mov	r2, r0
 8008340:	4629      	mov	r1, r5
 8008342:	4620      	mov	r0, r4
 8008344:	f7f7 ff74 	bl	8000230 <__aeabi_dsub>
 8008348:	4b28      	ldr	r3, [pc, #160]	; (80083ec <__kernel_cos+0x16c>)
 800834a:	4680      	mov	r8, r0
 800834c:	429e      	cmp	r6, r3
 800834e:	4689      	mov	r9, r1
 8008350:	dc0e      	bgt.n	8008370 <__kernel_cos+0xf0>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	4650      	mov	r0, sl
 8008358:	4659      	mov	r1, fp
 800835a:	f7f7 ff69 	bl	8000230 <__aeabi_dsub>
 800835e:	4602      	mov	r2, r0
 8008360:	2000      	movs	r0, #0
 8008362:	460b      	mov	r3, r1
 8008364:	4922      	ldr	r1, [pc, #136]	; (80083f0 <__kernel_cos+0x170>)
 8008366:	f7f7 ff63 	bl	8000230 <__aeabi_dsub>
 800836a:	b003      	add	sp, #12
 800836c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008370:	2400      	movs	r4, #0
 8008372:	4b20      	ldr	r3, [pc, #128]	; (80083f4 <__kernel_cos+0x174>)
 8008374:	4622      	mov	r2, r4
 8008376:	429e      	cmp	r6, r3
 8008378:	bfcc      	ite	gt
 800837a:	4d1f      	ldrgt	r5, [pc, #124]	; (80083f8 <__kernel_cos+0x178>)
 800837c:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008380:	462b      	mov	r3, r5
 8008382:	2000      	movs	r0, #0
 8008384:	491a      	ldr	r1, [pc, #104]	; (80083f0 <__kernel_cos+0x170>)
 8008386:	f7f7 ff53 	bl	8000230 <__aeabi_dsub>
 800838a:	4622      	mov	r2, r4
 800838c:	4606      	mov	r6, r0
 800838e:	460f      	mov	r7, r1
 8008390:	462b      	mov	r3, r5
 8008392:	4650      	mov	r0, sl
 8008394:	4659      	mov	r1, fp
 8008396:	f7f7 ff4b 	bl	8000230 <__aeabi_dsub>
 800839a:	4642      	mov	r2, r8
 800839c:	464b      	mov	r3, r9
 800839e:	f7f7 ff47 	bl	8000230 <__aeabi_dsub>
 80083a2:	4602      	mov	r2, r0
 80083a4:	460b      	mov	r3, r1
 80083a6:	4630      	mov	r0, r6
 80083a8:	4639      	mov	r1, r7
 80083aa:	e7dc      	b.n	8008366 <__kernel_cos+0xe6>
 80083ac:	2000      	movs	r0, #0
 80083ae:	4910      	ldr	r1, [pc, #64]	; (80083f0 <__kernel_cos+0x170>)
 80083b0:	e7db      	b.n	800836a <__kernel_cos+0xea>
 80083b2:	bf00      	nop
 80083b4:	f3af 8000 	nop.w
 80083b8:	be8838d4 	.word	0xbe8838d4
 80083bc:	bda8fae9 	.word	0xbda8fae9
 80083c0:	bdb4b1c4 	.word	0xbdb4b1c4
 80083c4:	3e21ee9e 	.word	0x3e21ee9e
 80083c8:	809c52ad 	.word	0x809c52ad
 80083cc:	3e927e4f 	.word	0x3e927e4f
 80083d0:	19cb1590 	.word	0x19cb1590
 80083d4:	3efa01a0 	.word	0x3efa01a0
 80083d8:	16c15177 	.word	0x16c15177
 80083dc:	3f56c16c 	.word	0x3f56c16c
 80083e0:	5555554c 	.word	0x5555554c
 80083e4:	3fa55555 	.word	0x3fa55555
 80083e8:	3fe00000 	.word	0x3fe00000
 80083ec:	3fd33332 	.word	0x3fd33332
 80083f0:	3ff00000 	.word	0x3ff00000
 80083f4:	3fe90000 	.word	0x3fe90000
 80083f8:	3fd20000 	.word	0x3fd20000

080083fc <__kernel_rem_pio2>:
 80083fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008400:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8008404:	9308      	str	r3, [sp, #32]
 8008406:	9106      	str	r1, [sp, #24]
 8008408:	4bb6      	ldr	r3, [pc, #728]	; (80086e4 <__kernel_rem_pio2+0x2e8>)
 800840a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800840c:	f112 0f14 	cmn.w	r2, #20
 8008410:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008414:	bfa8      	it	ge
 8008416:	1ed4      	subge	r4, r2, #3
 8008418:	9302      	str	r3, [sp, #8]
 800841a:	9b08      	ldr	r3, [sp, #32]
 800841c:	bfb8      	it	lt
 800841e:	2400      	movlt	r4, #0
 8008420:	f103 33ff 	add.w	r3, r3, #4294967295
 8008424:	9307      	str	r3, [sp, #28]
 8008426:	bfa4      	itt	ge
 8008428:	2318      	movge	r3, #24
 800842a:	fb94 f4f3 	sdivge	r4, r4, r3
 800842e:	f06f 0317 	mvn.w	r3, #23
 8008432:	fb04 3303 	mla	r3, r4, r3, r3
 8008436:	eb03 0b02 	add.w	fp, r3, r2
 800843a:	9a07      	ldr	r2, [sp, #28]
 800843c:	9b02      	ldr	r3, [sp, #8]
 800843e:	1aa7      	subs	r7, r4, r2
 8008440:	eb03 0802 	add.w	r8, r3, r2
 8008444:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8008446:	2500      	movs	r5, #0
 8008448:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800844c:	2200      	movs	r2, #0
 800844e:	2300      	movs	r3, #0
 8008450:	9009      	str	r0, [sp, #36]	; 0x24
 8008452:	ae20      	add	r6, sp, #128	; 0x80
 8008454:	4545      	cmp	r5, r8
 8008456:	dd14      	ble.n	8008482 <__kernel_rem_pio2+0x86>
 8008458:	f04f 0800 	mov.w	r8, #0
 800845c:	9a08      	ldr	r2, [sp, #32]
 800845e:	ab20      	add	r3, sp, #128	; 0x80
 8008460:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 8008464:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 8008468:	9b02      	ldr	r3, [sp, #8]
 800846a:	4598      	cmp	r8, r3
 800846c:	dc35      	bgt.n	80084da <__kernel_rem_pio2+0xde>
 800846e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008470:	2200      	movs	r2, #0
 8008472:	f1a3 0908 	sub.w	r9, r3, #8
 8008476:	2300      	movs	r3, #0
 8008478:	462f      	mov	r7, r5
 800847a:	2600      	movs	r6, #0
 800847c:	e9cd 2300 	strd	r2, r3, [sp]
 8008480:	e01f      	b.n	80084c2 <__kernel_rem_pio2+0xc6>
 8008482:	42ef      	cmn	r7, r5
 8008484:	d40b      	bmi.n	800849e <__kernel_rem_pio2+0xa2>
 8008486:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800848a:	e9cd 2300 	strd	r2, r3, [sp]
 800848e:	f7f8 f81d 	bl	80004cc <__aeabi_i2d>
 8008492:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008496:	e8e6 0102 	strd	r0, r1, [r6], #8
 800849a:	3501      	adds	r5, #1
 800849c:	e7da      	b.n	8008454 <__kernel_rem_pio2+0x58>
 800849e:	4610      	mov	r0, r2
 80084a0:	4619      	mov	r1, r3
 80084a2:	e7f8      	b.n	8008496 <__kernel_rem_pio2+0x9a>
 80084a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084a8:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80084ac:	f7f8 f878 	bl	80005a0 <__aeabi_dmul>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084b8:	f7f7 febc 	bl	8000234 <__adddf3>
 80084bc:	e9cd 0100 	strd	r0, r1, [sp]
 80084c0:	3601      	adds	r6, #1
 80084c2:	9b07      	ldr	r3, [sp, #28]
 80084c4:	3f08      	subs	r7, #8
 80084c6:	429e      	cmp	r6, r3
 80084c8:	ddec      	ble.n	80084a4 <__kernel_rem_pio2+0xa8>
 80084ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084ce:	f108 0801 	add.w	r8, r8, #1
 80084d2:	e8ea 2302 	strd	r2, r3, [sl], #8
 80084d6:	3508      	adds	r5, #8
 80084d8:	e7c6      	b.n	8008468 <__kernel_rem_pio2+0x6c>
 80084da:	9b02      	ldr	r3, [sp, #8]
 80084dc:	aa0c      	add	r2, sp, #48	; 0x30
 80084de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80084e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084e4:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 80084e6:	9e02      	ldr	r6, [sp, #8]
 80084e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80084ec:	930a      	str	r3, [sp, #40]	; 0x28
 80084ee:	ab98      	add	r3, sp, #608	; 0x260
 80084f0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80084f4:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 80084f8:	ab70      	add	r3, sp, #448	; 0x1c0
 80084fa:	eb03 0ac6 	add.w	sl, r3, r6, lsl #3
 80084fe:	46d0      	mov	r8, sl
 8008500:	46b1      	mov	r9, r6
 8008502:	af0c      	add	r7, sp, #48	; 0x30
 8008504:	9700      	str	r7, [sp, #0]
 8008506:	f1b9 0f00 	cmp.w	r9, #0
 800850a:	f1a8 0808 	sub.w	r8, r8, #8
 800850e:	dc71      	bgt.n	80085f4 <__kernel_rem_pio2+0x1f8>
 8008510:	465a      	mov	r2, fp
 8008512:	4620      	mov	r0, r4
 8008514:	4629      	mov	r1, r5
 8008516:	f000 fbef 	bl	8008cf8 <scalbn>
 800851a:	2200      	movs	r2, #0
 800851c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8008520:	4604      	mov	r4, r0
 8008522:	460d      	mov	r5, r1
 8008524:	f7f8 f83c 	bl	80005a0 <__aeabi_dmul>
 8008528:	f000 fb66 	bl	8008bf8 <floor>
 800852c:	2200      	movs	r2, #0
 800852e:	4b6e      	ldr	r3, [pc, #440]	; (80086e8 <__kernel_rem_pio2+0x2ec>)
 8008530:	f7f8 f836 	bl	80005a0 <__aeabi_dmul>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	4620      	mov	r0, r4
 800853a:	4629      	mov	r1, r5
 800853c:	f7f7 fe78 	bl	8000230 <__aeabi_dsub>
 8008540:	460d      	mov	r5, r1
 8008542:	4604      	mov	r4, r0
 8008544:	f7f8 fac6 	bl	8000ad4 <__aeabi_d2iz>
 8008548:	9004      	str	r0, [sp, #16]
 800854a:	f7f7 ffbf 	bl	80004cc <__aeabi_i2d>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4620      	mov	r0, r4
 8008554:	4629      	mov	r1, r5
 8008556:	f7f7 fe6b 	bl	8000230 <__aeabi_dsub>
 800855a:	f1bb 0f00 	cmp.w	fp, #0
 800855e:	4680      	mov	r8, r0
 8008560:	4689      	mov	r9, r1
 8008562:	dd70      	ble.n	8008646 <__kernel_rem_pio2+0x24a>
 8008564:	1e72      	subs	r2, r6, #1
 8008566:	ab0c      	add	r3, sp, #48	; 0x30
 8008568:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800856c:	9c04      	ldr	r4, [sp, #16]
 800856e:	f1cb 0118 	rsb	r1, fp, #24
 8008572:	fa40 f301 	asr.w	r3, r0, r1
 8008576:	441c      	add	r4, r3
 8008578:	408b      	lsls	r3, r1
 800857a:	1ac0      	subs	r0, r0, r3
 800857c:	ab0c      	add	r3, sp, #48	; 0x30
 800857e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008582:	f1cb 0317 	rsb	r3, fp, #23
 8008586:	9404      	str	r4, [sp, #16]
 8008588:	fa40 f303 	asr.w	r3, r0, r3
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	9b00      	ldr	r3, [sp, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	dd66      	ble.n	8008662 <__kernel_rem_pio2+0x266>
 8008594:	2200      	movs	r2, #0
 8008596:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800859a:	4614      	mov	r4, r2
 800859c:	9b04      	ldr	r3, [sp, #16]
 800859e:	3301      	adds	r3, #1
 80085a0:	9304      	str	r3, [sp, #16]
 80085a2:	4296      	cmp	r6, r2
 80085a4:	f300 80ac 	bgt.w	8008700 <__kernel_rem_pio2+0x304>
 80085a8:	f1bb 0f00 	cmp.w	fp, #0
 80085ac:	dd07      	ble.n	80085be <__kernel_rem_pio2+0x1c2>
 80085ae:	f1bb 0f01 	cmp.w	fp, #1
 80085b2:	f000 80b4 	beq.w	800871e <__kernel_rem_pio2+0x322>
 80085b6:	f1bb 0f02 	cmp.w	fp, #2
 80085ba:	f000 80ba 	beq.w	8008732 <__kernel_rem_pio2+0x336>
 80085be:	9b00      	ldr	r3, [sp, #0]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d14e      	bne.n	8008662 <__kernel_rem_pio2+0x266>
 80085c4:	4642      	mov	r2, r8
 80085c6:	464b      	mov	r3, r9
 80085c8:	2000      	movs	r0, #0
 80085ca:	4948      	ldr	r1, [pc, #288]	; (80086ec <__kernel_rem_pio2+0x2f0>)
 80085cc:	f7f7 fe30 	bl	8000230 <__aeabi_dsub>
 80085d0:	4680      	mov	r8, r0
 80085d2:	4689      	mov	r9, r1
 80085d4:	2c00      	cmp	r4, #0
 80085d6:	d044      	beq.n	8008662 <__kernel_rem_pio2+0x266>
 80085d8:	465a      	mov	r2, fp
 80085da:	2000      	movs	r0, #0
 80085dc:	4943      	ldr	r1, [pc, #268]	; (80086ec <__kernel_rem_pio2+0x2f0>)
 80085de:	f000 fb8b 	bl	8008cf8 <scalbn>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4640      	mov	r0, r8
 80085e8:	4649      	mov	r1, r9
 80085ea:	f7f7 fe21 	bl	8000230 <__aeabi_dsub>
 80085ee:	4680      	mov	r8, r0
 80085f0:	4689      	mov	r9, r1
 80085f2:	e036      	b.n	8008662 <__kernel_rem_pio2+0x266>
 80085f4:	2200      	movs	r2, #0
 80085f6:	4b3e      	ldr	r3, [pc, #248]	; (80086f0 <__kernel_rem_pio2+0x2f4>)
 80085f8:	4620      	mov	r0, r4
 80085fa:	4629      	mov	r1, r5
 80085fc:	f7f7 ffd0 	bl	80005a0 <__aeabi_dmul>
 8008600:	f7f8 fa68 	bl	8000ad4 <__aeabi_d2iz>
 8008604:	f7f7 ff62 	bl	80004cc <__aeabi_i2d>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008610:	2200      	movs	r2, #0
 8008612:	4b38      	ldr	r3, [pc, #224]	; (80086f4 <__kernel_rem_pio2+0x2f8>)
 8008614:	f7f7 ffc4 	bl	80005a0 <__aeabi_dmul>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	4620      	mov	r0, r4
 800861e:	4629      	mov	r1, r5
 8008620:	f7f7 fe06 	bl	8000230 <__aeabi_dsub>
 8008624:	f7f8 fa56 	bl	8000ad4 <__aeabi_d2iz>
 8008628:	9b00      	ldr	r3, [sp, #0]
 800862a:	f109 39ff 	add.w	r9, r9, #4294967295
 800862e:	f843 0b04 	str.w	r0, [r3], #4
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008638:	e9d8 2300 	ldrd	r2, r3, [r8]
 800863c:	f7f7 fdfa 	bl	8000234 <__adddf3>
 8008640:	4604      	mov	r4, r0
 8008642:	460d      	mov	r5, r1
 8008644:	e75f      	b.n	8008506 <__kernel_rem_pio2+0x10a>
 8008646:	d105      	bne.n	8008654 <__kernel_rem_pio2+0x258>
 8008648:	1e73      	subs	r3, r6, #1
 800864a:	aa0c      	add	r2, sp, #48	; 0x30
 800864c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008650:	15c3      	asrs	r3, r0, #23
 8008652:	e79b      	b.n	800858c <__kernel_rem_pio2+0x190>
 8008654:	2200      	movs	r2, #0
 8008656:	4b28      	ldr	r3, [pc, #160]	; (80086f8 <__kernel_rem_pio2+0x2fc>)
 8008658:	f7f8 fa28 	bl	8000aac <__aeabi_dcmpge>
 800865c:	2800      	cmp	r0, #0
 800865e:	d13e      	bne.n	80086de <__kernel_rem_pio2+0x2e2>
 8008660:	9000      	str	r0, [sp, #0]
 8008662:	2200      	movs	r2, #0
 8008664:	2300      	movs	r3, #0
 8008666:	4640      	mov	r0, r8
 8008668:	4649      	mov	r1, r9
 800866a:	f7f8 fa01 	bl	8000a70 <__aeabi_dcmpeq>
 800866e:	2800      	cmp	r0, #0
 8008670:	f000 80b1 	beq.w	80087d6 <__kernel_rem_pio2+0x3da>
 8008674:	1e74      	subs	r4, r6, #1
 8008676:	4623      	mov	r3, r4
 8008678:	2200      	movs	r2, #0
 800867a:	9902      	ldr	r1, [sp, #8]
 800867c:	428b      	cmp	r3, r1
 800867e:	da5f      	bge.n	8008740 <__kernel_rem_pio2+0x344>
 8008680:	2a00      	cmp	r2, #0
 8008682:	d074      	beq.n	800876e <__kernel_rem_pio2+0x372>
 8008684:	ab0c      	add	r3, sp, #48	; 0x30
 8008686:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800868a:	f1ab 0b18 	sub.w	fp, fp, #24
 800868e:	2b00      	cmp	r3, #0
 8008690:	f000 809f 	beq.w	80087d2 <__kernel_rem_pio2+0x3d6>
 8008694:	465a      	mov	r2, fp
 8008696:	2000      	movs	r0, #0
 8008698:	4914      	ldr	r1, [pc, #80]	; (80086ec <__kernel_rem_pio2+0x2f0>)
 800869a:	f000 fb2d 	bl	8008cf8 <scalbn>
 800869e:	46a2      	mov	sl, r4
 80086a0:	4606      	mov	r6, r0
 80086a2:	460f      	mov	r7, r1
 80086a4:	f04f 0800 	mov.w	r8, #0
 80086a8:	ab70      	add	r3, sp, #448	; 0x1c0
 80086aa:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80086f0 <__kernel_rem_pio2+0x2f4>
 80086ae:	00e5      	lsls	r5, r4, #3
 80086b0:	eb03 0bc4 	add.w	fp, r3, r4, lsl #3
 80086b4:	f1ba 0f00 	cmp.w	sl, #0
 80086b8:	f280 80c3 	bge.w	8008842 <__kernel_rem_pio2+0x446>
 80086bc:	4626      	mov	r6, r4
 80086be:	2e00      	cmp	r6, #0
 80086c0:	f2c0 80f5 	blt.w	80088ae <__kernel_rem_pio2+0x4b2>
 80086c4:	4b0d      	ldr	r3, [pc, #52]	; (80086fc <__kernel_rem_pio2+0x300>)
 80086c6:	f04f 0a00 	mov.w	sl, #0
 80086ca:	9307      	str	r3, [sp, #28]
 80086cc:	ab70      	add	r3, sp, #448	; 0x1c0
 80086ce:	f04f 0b00 	mov.w	fp, #0
 80086d2:	f04f 0800 	mov.w	r8, #0
 80086d6:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80086da:	1ba7      	subs	r7, r4, r6
 80086dc:	e0db      	b.n	8008896 <__kernel_rem_pio2+0x49a>
 80086de:	2302      	movs	r3, #2
 80086e0:	9300      	str	r3, [sp, #0]
 80086e2:	e757      	b.n	8008594 <__kernel_rem_pio2+0x198>
 80086e4:	08009140 	.word	0x08009140
 80086e8:	40200000 	.word	0x40200000
 80086ec:	3ff00000 	.word	0x3ff00000
 80086f0:	3e700000 	.word	0x3e700000
 80086f4:	41700000 	.word	0x41700000
 80086f8:	3fe00000 	.word	0x3fe00000
 80086fc:	08009100 	.word	0x08009100
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	b944      	cbnz	r4, 8008716 <__kernel_rem_pio2+0x31a>
 8008704:	b11b      	cbz	r3, 800870e <__kernel_rem_pio2+0x312>
 8008706:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800870a:	603b      	str	r3, [r7, #0]
 800870c:	2301      	movs	r3, #1
 800870e:	461c      	mov	r4, r3
 8008710:	3201      	adds	r2, #1
 8008712:	3704      	adds	r7, #4
 8008714:	e745      	b.n	80085a2 <__kernel_rem_pio2+0x1a6>
 8008716:	1acb      	subs	r3, r1, r3
 8008718:	603b      	str	r3, [r7, #0]
 800871a:	4623      	mov	r3, r4
 800871c:	e7f7      	b.n	800870e <__kernel_rem_pio2+0x312>
 800871e:	1e72      	subs	r2, r6, #1
 8008720:	ab0c      	add	r3, sp, #48	; 0x30
 8008722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008726:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800872a:	a90c      	add	r1, sp, #48	; 0x30
 800872c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008730:	e745      	b.n	80085be <__kernel_rem_pio2+0x1c2>
 8008732:	1e72      	subs	r2, r6, #1
 8008734:	ab0c      	add	r3, sp, #48	; 0x30
 8008736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800873e:	e7f4      	b.n	800872a <__kernel_rem_pio2+0x32e>
 8008740:	a90c      	add	r1, sp, #48	; 0x30
 8008742:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008746:	3b01      	subs	r3, #1
 8008748:	430a      	orrs	r2, r1
 800874a:	e796      	b.n	800867a <__kernel_rem_pio2+0x27e>
 800874c:	3401      	adds	r4, #1
 800874e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008752:	2a00      	cmp	r2, #0
 8008754:	d0fa      	beq.n	800874c <__kernel_rem_pio2+0x350>
 8008756:	9b08      	ldr	r3, [sp, #32]
 8008758:	f106 0801 	add.w	r8, r6, #1
 800875c:	18f5      	adds	r5, r6, r3
 800875e:	ab20      	add	r3, sp, #128	; 0x80
 8008760:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008764:	4434      	add	r4, r6
 8008766:	4544      	cmp	r4, r8
 8008768:	da04      	bge.n	8008774 <__kernel_rem_pio2+0x378>
 800876a:	4626      	mov	r6, r4
 800876c:	e6bf      	b.n	80084ee <__kernel_rem_pio2+0xf2>
 800876e:	2401      	movs	r4, #1
 8008770:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008772:	e7ec      	b.n	800874e <__kernel_rem_pio2+0x352>
 8008774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008776:	f04f 0900 	mov.w	r9, #0
 800877a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800877e:	f7f7 fea5 	bl	80004cc <__aeabi_i2d>
 8008782:	2600      	movs	r6, #0
 8008784:	2700      	movs	r7, #0
 8008786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008788:	e9c5 0100 	strd	r0, r1, [r5]
 800878c:	3b08      	subs	r3, #8
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	9504      	str	r5, [sp, #16]
 8008792:	9b07      	ldr	r3, [sp, #28]
 8008794:	4599      	cmp	r9, r3
 8008796:	dd05      	ble.n	80087a4 <__kernel_rem_pio2+0x3a8>
 8008798:	e9ea 6702 	strd	r6, r7, [sl, #8]!
 800879c:	f108 0801 	add.w	r8, r8, #1
 80087a0:	3508      	adds	r5, #8
 80087a2:	e7e0      	b.n	8008766 <__kernel_rem_pio2+0x36a>
 80087a4:	f8dd c010 	ldr.w	ip, [sp, #16]
 80087a8:	9900      	ldr	r1, [sp, #0]
 80087aa:	f109 0901 	add.w	r9, r9, #1
 80087ae:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80087b2:	9100      	str	r1, [sp, #0]
 80087b4:	e87c 0102 	ldrd	r0, r1, [ip], #-8
 80087b8:	f8cd c010 	str.w	ip, [sp, #16]
 80087bc:	f7f7 fef0 	bl	80005a0 <__aeabi_dmul>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4630      	mov	r0, r6
 80087c6:	4639      	mov	r1, r7
 80087c8:	f7f7 fd34 	bl	8000234 <__adddf3>
 80087cc:	4606      	mov	r6, r0
 80087ce:	460f      	mov	r7, r1
 80087d0:	e7df      	b.n	8008792 <__kernel_rem_pio2+0x396>
 80087d2:	3c01      	subs	r4, #1
 80087d4:	e756      	b.n	8008684 <__kernel_rem_pio2+0x288>
 80087d6:	f1cb 0200 	rsb	r2, fp, #0
 80087da:	4640      	mov	r0, r8
 80087dc:	4649      	mov	r1, r9
 80087de:	f000 fa8b 	bl	8008cf8 <scalbn>
 80087e2:	2200      	movs	r2, #0
 80087e4:	4ba4      	ldr	r3, [pc, #656]	; (8008a78 <__kernel_rem_pio2+0x67c>)
 80087e6:	4604      	mov	r4, r0
 80087e8:	460d      	mov	r5, r1
 80087ea:	f7f8 f95f 	bl	8000aac <__aeabi_dcmpge>
 80087ee:	b1f8      	cbz	r0, 8008830 <__kernel_rem_pio2+0x434>
 80087f0:	2200      	movs	r2, #0
 80087f2:	4ba2      	ldr	r3, [pc, #648]	; (8008a7c <__kernel_rem_pio2+0x680>)
 80087f4:	4620      	mov	r0, r4
 80087f6:	4629      	mov	r1, r5
 80087f8:	f7f7 fed2 	bl	80005a0 <__aeabi_dmul>
 80087fc:	f7f8 f96a 	bl	8000ad4 <__aeabi_d2iz>
 8008800:	4607      	mov	r7, r0
 8008802:	f7f7 fe63 	bl	80004cc <__aeabi_i2d>
 8008806:	2200      	movs	r2, #0
 8008808:	4b9b      	ldr	r3, [pc, #620]	; (8008a78 <__kernel_rem_pio2+0x67c>)
 800880a:	f7f7 fec9 	bl	80005a0 <__aeabi_dmul>
 800880e:	460b      	mov	r3, r1
 8008810:	4602      	mov	r2, r0
 8008812:	4629      	mov	r1, r5
 8008814:	4620      	mov	r0, r4
 8008816:	f7f7 fd0b 	bl	8000230 <__aeabi_dsub>
 800881a:	f7f8 f95b 	bl	8000ad4 <__aeabi_d2iz>
 800881e:	1c74      	adds	r4, r6, #1
 8008820:	ab0c      	add	r3, sp, #48	; 0x30
 8008822:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008826:	f10b 0b18 	add.w	fp, fp, #24
 800882a:	f843 7024 	str.w	r7, [r3, r4, lsl #2]
 800882e:	e731      	b.n	8008694 <__kernel_rem_pio2+0x298>
 8008830:	4620      	mov	r0, r4
 8008832:	4629      	mov	r1, r5
 8008834:	f7f8 f94e 	bl	8000ad4 <__aeabi_d2iz>
 8008838:	ab0c      	add	r3, sp, #48	; 0x30
 800883a:	4634      	mov	r4, r6
 800883c:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008840:	e728      	b.n	8008694 <__kernel_rem_pio2+0x298>
 8008842:	ab0c      	add	r3, sp, #48	; 0x30
 8008844:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008848:	f7f7 fe40 	bl	80004cc <__aeabi_i2d>
 800884c:	4632      	mov	r2, r6
 800884e:	463b      	mov	r3, r7
 8008850:	f7f7 fea6 	bl	80005a0 <__aeabi_dmul>
 8008854:	4642      	mov	r2, r8
 8008856:	e86b 0102 	strd	r0, r1, [fp], #-8
 800885a:	464b      	mov	r3, r9
 800885c:	4630      	mov	r0, r6
 800885e:	4639      	mov	r1, r7
 8008860:	f7f7 fe9e 	bl	80005a0 <__aeabi_dmul>
 8008864:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008868:	4606      	mov	r6, r0
 800886a:	460f      	mov	r7, r1
 800886c:	e722      	b.n	80086b4 <__kernel_rem_pio2+0x2b8>
 800886e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008872:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8008876:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800887a:	f8cd c01c 	str.w	ip, [sp, #28]
 800887e:	f7f7 fe8f 	bl	80005a0 <__aeabi_dmul>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4650      	mov	r0, sl
 8008888:	4659      	mov	r1, fp
 800888a:	f7f7 fcd3 	bl	8000234 <__adddf3>
 800888e:	4682      	mov	sl, r0
 8008890:	468b      	mov	fp, r1
 8008892:	f108 0801 	add.w	r8, r8, #1
 8008896:	9b02      	ldr	r3, [sp, #8]
 8008898:	4598      	cmp	r8, r3
 800889a:	dc01      	bgt.n	80088a0 <__kernel_rem_pio2+0x4a4>
 800889c:	45b8      	cmp	r8, r7
 800889e:	dde6      	ble.n	800886e <__kernel_rem_pio2+0x472>
 80088a0:	ab48      	add	r3, sp, #288	; 0x120
 80088a2:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80088a6:	e9c7 ab00 	strd	sl, fp, [r7]
 80088aa:	3e01      	subs	r6, #1
 80088ac:	e707      	b.n	80086be <__kernel_rem_pio2+0x2c2>
 80088ae:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80088b0:	2b02      	cmp	r3, #2
 80088b2:	dc09      	bgt.n	80088c8 <__kernel_rem_pio2+0x4cc>
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	dc32      	bgt.n	800891e <__kernel_rem_pio2+0x522>
 80088b8:	d05a      	beq.n	8008970 <__kernel_rem_pio2+0x574>
 80088ba:	9b04      	ldr	r3, [sp, #16]
 80088bc:	f003 0007 	and.w	r0, r3, #7
 80088c0:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80088c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d1f5      	bne.n	80088ba <__kernel_rem_pio2+0x4be>
 80088ce:	ab48      	add	r3, sp, #288	; 0x120
 80088d0:	441d      	add	r5, r3
 80088d2:	46aa      	mov	sl, r5
 80088d4:	46a3      	mov	fp, r4
 80088d6:	f1bb 0f00 	cmp.w	fp, #0
 80088da:	dc76      	bgt.n	80089ca <__kernel_rem_pio2+0x5ce>
 80088dc:	46aa      	mov	sl, r5
 80088de:	46a3      	mov	fp, r4
 80088e0:	f1bb 0f01 	cmp.w	fp, #1
 80088e4:	f300 8090 	bgt.w	8008a08 <__kernel_rem_pio2+0x60c>
 80088e8:	2700      	movs	r7, #0
 80088ea:	463e      	mov	r6, r7
 80088ec:	2c01      	cmp	r4, #1
 80088ee:	f300 80aa 	bgt.w	8008a46 <__kernel_rem_pio2+0x64a>
 80088f2:	e9dd 5048 	ldrd	r5, r0, [sp, #288]	; 0x120
 80088f6:	e9dd 414a 	ldrd	r4, r1, [sp, #296]	; 0x128
 80088fa:	9b00      	ldr	r3, [sp, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f040 80ac 	bne.w	8008a5a <__kernel_rem_pio2+0x65e>
 8008902:	4603      	mov	r3, r0
 8008904:	462a      	mov	r2, r5
 8008906:	9806      	ldr	r0, [sp, #24]
 8008908:	e9c0 2300 	strd	r2, r3, [r0]
 800890c:	4622      	mov	r2, r4
 800890e:	460b      	mov	r3, r1
 8008910:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008914:	463a      	mov	r2, r7
 8008916:	4633      	mov	r3, r6
 8008918:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800891c:	e7cd      	b.n	80088ba <__kernel_rem_pio2+0x4be>
 800891e:	2000      	movs	r0, #0
 8008920:	46a0      	mov	r8, r4
 8008922:	4601      	mov	r1, r0
 8008924:	ab48      	add	r3, sp, #288	; 0x120
 8008926:	441d      	add	r5, r3
 8008928:	f1b8 0f00 	cmp.w	r8, #0
 800892c:	da3a      	bge.n	80089a4 <__kernel_rem_pio2+0x5a8>
 800892e:	9b00      	ldr	r3, [sp, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d03e      	beq.n	80089b2 <__kernel_rem_pio2+0x5b6>
 8008934:	f101 4500 	add.w	r5, r1, #2147483648	; 0x80000000
 8008938:	4602      	mov	r2, r0
 800893a:	462b      	mov	r3, r5
 800893c:	9d06      	ldr	r5, [sp, #24]
 800893e:	2601      	movs	r6, #1
 8008940:	e9c5 2300 	strd	r2, r3, [r5]
 8008944:	460b      	mov	r3, r1
 8008946:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800894a:	f7f7 fc71 	bl	8000230 <__aeabi_dsub>
 800894e:	4684      	mov	ip, r0
 8008950:	460f      	mov	r7, r1
 8008952:	ad48      	add	r5, sp, #288	; 0x120
 8008954:	42b4      	cmp	r4, r6
 8008956:	f105 0508 	add.w	r5, r5, #8
 800895a:	da2c      	bge.n	80089b6 <__kernel_rem_pio2+0x5ba>
 800895c:	9b00      	ldr	r3, [sp, #0]
 800895e:	b10b      	cbz	r3, 8008964 <__kernel_rem_pio2+0x568>
 8008960:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008964:	4662      	mov	r2, ip
 8008966:	463b      	mov	r3, r7
 8008968:	9906      	ldr	r1, [sp, #24]
 800896a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800896e:	e7a4      	b.n	80088ba <__kernel_rem_pio2+0x4be>
 8008970:	9ea2      	ldr	r6, [sp, #648]	; 0x288
 8008972:	ab48      	add	r3, sp, #288	; 0x120
 8008974:	4637      	mov	r7, r6
 8008976:	441d      	add	r5, r3
 8008978:	2c00      	cmp	r4, #0
 800897a:	da09      	bge.n	8008990 <__kernel_rem_pio2+0x594>
 800897c:	9b00      	ldr	r3, [sp, #0]
 800897e:	b10b      	cbz	r3, 8008984 <__kernel_rem_pio2+0x588>
 8008980:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8008984:	4632      	mov	r2, r6
 8008986:	463b      	mov	r3, r7
 8008988:	9906      	ldr	r1, [sp, #24]
 800898a:	e9c1 2300 	strd	r2, r3, [r1]
 800898e:	e794      	b.n	80088ba <__kernel_rem_pio2+0x4be>
 8008990:	4630      	mov	r0, r6
 8008992:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008996:	4639      	mov	r1, r7
 8008998:	f7f7 fc4c 	bl	8000234 <__adddf3>
 800899c:	3c01      	subs	r4, #1
 800899e:	4606      	mov	r6, r0
 80089a0:	460f      	mov	r7, r1
 80089a2:	e7e9      	b.n	8008978 <__kernel_rem_pio2+0x57c>
 80089a4:	e875 2302 	ldrd	r2, r3, [r5], #-8
 80089a8:	f7f7 fc44 	bl	8000234 <__adddf3>
 80089ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80089b0:	e7ba      	b.n	8008928 <__kernel_rem_pio2+0x52c>
 80089b2:	460d      	mov	r5, r1
 80089b4:	e7c0      	b.n	8008938 <__kernel_rem_pio2+0x53c>
 80089b6:	4660      	mov	r0, ip
 80089b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80089bc:	4639      	mov	r1, r7
 80089be:	f7f7 fc39 	bl	8000234 <__adddf3>
 80089c2:	3601      	adds	r6, #1
 80089c4:	4684      	mov	ip, r0
 80089c6:	460f      	mov	r7, r1
 80089c8:	e7c4      	b.n	8008954 <__kernel_rem_pio2+0x558>
 80089ca:	e9da 6700 	ldrd	r6, r7, [sl]
 80089ce:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 80089d2:	4632      	mov	r2, r6
 80089d4:	463b      	mov	r3, r7
 80089d6:	4640      	mov	r0, r8
 80089d8:	4649      	mov	r1, r9
 80089da:	f7f7 fc2b 	bl	8000234 <__adddf3>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089e6:	4640      	mov	r0, r8
 80089e8:	4649      	mov	r1, r9
 80089ea:	f7f7 fc21 	bl	8000230 <__aeabi_dsub>
 80089ee:	4632      	mov	r2, r6
 80089f0:	463b      	mov	r3, r7
 80089f2:	f7f7 fc1f 	bl	8000234 <__adddf3>
 80089f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089fa:	e86a 0102 	strd	r0, r1, [sl], #-8
 80089fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a02:	e9ca 2300 	strd	r2, r3, [sl]
 8008a06:	e766      	b.n	80088d6 <__kernel_rem_pio2+0x4da>
 8008a08:	e9da 8900 	ldrd	r8, r9, [sl]
 8008a0c:	e95a 6702 	ldrd	r6, r7, [sl, #-8]
 8008a10:	4642      	mov	r2, r8
 8008a12:	464b      	mov	r3, r9
 8008a14:	4630      	mov	r0, r6
 8008a16:	4639      	mov	r1, r7
 8008a18:	f7f7 fc0c 	bl	8000234 <__adddf3>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a24:	4630      	mov	r0, r6
 8008a26:	4639      	mov	r1, r7
 8008a28:	f7f7 fc02 	bl	8000230 <__aeabi_dsub>
 8008a2c:	4642      	mov	r2, r8
 8008a2e:	464b      	mov	r3, r9
 8008a30:	f7f7 fc00 	bl	8000234 <__adddf3>
 8008a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a38:	e86a 0102 	strd	r0, r1, [sl], #-8
 8008a3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008a40:	e9ca 2300 	strd	r2, r3, [sl]
 8008a44:	e74c      	b.n	80088e0 <__kernel_rem_pio2+0x4e4>
 8008a46:	4638      	mov	r0, r7
 8008a48:	e875 2302 	ldrd	r2, r3, [r5], #-8
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	f7f7 fbf1 	bl	8000234 <__adddf3>
 8008a52:	3c01      	subs	r4, #1
 8008a54:	4607      	mov	r7, r0
 8008a56:	460e      	mov	r6, r1
 8008a58:	e748      	b.n	80088ec <__kernel_rem_pio2+0x4f0>
 8008a5a:	9b06      	ldr	r3, [sp, #24]
 8008a5c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8008a60:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008a64:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8008a68:	e9c3 0401 	strd	r0, r4, [r3, #4]
 8008a6c:	e9c3 1703 	strd	r1, r7, [r3, #12]
 8008a70:	601d      	str	r5, [r3, #0]
 8008a72:	615e      	str	r6, [r3, #20]
 8008a74:	e721      	b.n	80088ba <__kernel_rem_pio2+0x4be>
 8008a76:	bf00      	nop
 8008a78:	41700000 	.word	0x41700000
 8008a7c:	3e700000 	.word	0x3e700000

08008a80 <__kernel_sin>:
 8008a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a84:	b086      	sub	sp, #24
 8008a86:	e9cd 2300 	strd	r2, r3, [sp]
 8008a8a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a8e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008a92:	4682      	mov	sl, r0
 8008a94:	460c      	mov	r4, r1
 8008a96:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008a98:	da03      	bge.n	8008aa2 <__kernel_sin+0x22>
 8008a9a:	f7f8 f81b 	bl	8000ad4 <__aeabi_d2iz>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d050      	beq.n	8008b44 <__kernel_sin+0xc4>
 8008aa2:	4652      	mov	r2, sl
 8008aa4:	4623      	mov	r3, r4
 8008aa6:	4650      	mov	r0, sl
 8008aa8:	4621      	mov	r1, r4
 8008aaa:	f7f7 fd79 	bl	80005a0 <__aeabi_dmul>
 8008aae:	4606      	mov	r6, r0
 8008ab0:	460f      	mov	r7, r1
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	4650      	mov	r0, sl
 8008ab8:	4621      	mov	r1, r4
 8008aba:	f7f7 fd71 	bl	80005a0 <__aeabi_dmul>
 8008abe:	a33e      	add	r3, pc, #248	; (adr r3, 8008bb8 <__kernel_sin+0x138>)
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	4680      	mov	r8, r0
 8008ac6:	4689      	mov	r9, r1
 8008ac8:	4630      	mov	r0, r6
 8008aca:	4639      	mov	r1, r7
 8008acc:	f7f7 fd68 	bl	80005a0 <__aeabi_dmul>
 8008ad0:	a33b      	add	r3, pc, #236	; (adr r3, 8008bc0 <__kernel_sin+0x140>)
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	f7f7 fbab 	bl	8000230 <__aeabi_dsub>
 8008ada:	4632      	mov	r2, r6
 8008adc:	463b      	mov	r3, r7
 8008ade:	f7f7 fd5f 	bl	80005a0 <__aeabi_dmul>
 8008ae2:	a339      	add	r3, pc, #228	; (adr r3, 8008bc8 <__kernel_sin+0x148>)
 8008ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae8:	f7f7 fba4 	bl	8000234 <__adddf3>
 8008aec:	4632      	mov	r2, r6
 8008aee:	463b      	mov	r3, r7
 8008af0:	f7f7 fd56 	bl	80005a0 <__aeabi_dmul>
 8008af4:	a336      	add	r3, pc, #216	; (adr r3, 8008bd0 <__kernel_sin+0x150>)
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	f7f7 fb99 	bl	8000230 <__aeabi_dsub>
 8008afe:	4632      	mov	r2, r6
 8008b00:	463b      	mov	r3, r7
 8008b02:	f7f7 fd4d 	bl	80005a0 <__aeabi_dmul>
 8008b06:	a334      	add	r3, pc, #208	; (adr r3, 8008bd8 <__kernel_sin+0x158>)
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	f7f7 fb92 	bl	8000234 <__adddf3>
 8008b10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b14:	b9dd      	cbnz	r5, 8008b4e <__kernel_sin+0xce>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	f7f7 fd3f 	bl	80005a0 <__aeabi_dmul>
 8008b22:	a32f      	add	r3, pc, #188	; (adr r3, 8008be0 <__kernel_sin+0x160>)
 8008b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b28:	f7f7 fb82 	bl	8000230 <__aeabi_dsub>
 8008b2c:	4642      	mov	r2, r8
 8008b2e:	464b      	mov	r3, r9
 8008b30:	f7f7 fd36 	bl	80005a0 <__aeabi_dmul>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4650      	mov	r0, sl
 8008b3a:	4621      	mov	r1, r4
 8008b3c:	f7f7 fb7a 	bl	8000234 <__adddf3>
 8008b40:	4682      	mov	sl, r0
 8008b42:	460c      	mov	r4, r1
 8008b44:	4650      	mov	r0, sl
 8008b46:	4621      	mov	r1, r4
 8008b48:	b006      	add	sp, #24
 8008b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b4e:	2200      	movs	r2, #0
 8008b50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b54:	4b24      	ldr	r3, [pc, #144]	; (8008be8 <__kernel_sin+0x168>)
 8008b56:	f7f7 fd23 	bl	80005a0 <__aeabi_dmul>
 8008b5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b5e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b62:	4640      	mov	r0, r8
 8008b64:	4649      	mov	r1, r9
 8008b66:	f7f7 fd1b 	bl	80005a0 <__aeabi_dmul>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b72:	f7f7 fb5d 	bl	8000230 <__aeabi_dsub>
 8008b76:	4632      	mov	r2, r6
 8008b78:	463b      	mov	r3, r7
 8008b7a:	f7f7 fd11 	bl	80005a0 <__aeabi_dmul>
 8008b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b82:	f7f7 fb55 	bl	8000230 <__aeabi_dsub>
 8008b86:	a316      	add	r3, pc, #88	; (adr r3, 8008be0 <__kernel_sin+0x160>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	4606      	mov	r6, r0
 8008b8e:	460f      	mov	r7, r1
 8008b90:	4640      	mov	r0, r8
 8008b92:	4649      	mov	r1, r9
 8008b94:	f7f7 fd04 	bl	80005a0 <__aeabi_dmul>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	4630      	mov	r0, r6
 8008b9e:	4639      	mov	r1, r7
 8008ba0:	f7f7 fb48 	bl	8000234 <__adddf3>
 8008ba4:	4602      	mov	r2, r0
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4650      	mov	r0, sl
 8008baa:	4621      	mov	r1, r4
 8008bac:	f7f7 fb40 	bl	8000230 <__aeabi_dsub>
 8008bb0:	e7c6      	b.n	8008b40 <__kernel_sin+0xc0>
 8008bb2:	bf00      	nop
 8008bb4:	f3af 8000 	nop.w
 8008bb8:	5acfd57c 	.word	0x5acfd57c
 8008bbc:	3de5d93a 	.word	0x3de5d93a
 8008bc0:	8a2b9ceb 	.word	0x8a2b9ceb
 8008bc4:	3e5ae5e6 	.word	0x3e5ae5e6
 8008bc8:	57b1fe7d 	.word	0x57b1fe7d
 8008bcc:	3ec71de3 	.word	0x3ec71de3
 8008bd0:	19c161d5 	.word	0x19c161d5
 8008bd4:	3f2a01a0 	.word	0x3f2a01a0
 8008bd8:	1110f8a6 	.word	0x1110f8a6
 8008bdc:	3f811111 	.word	0x3f811111
 8008be0:	55555549 	.word	0x55555549
 8008be4:	3fc55555 	.word	0x3fc55555
 8008be8:	3fe00000 	.word	0x3fe00000

08008bec <fabs>:
 8008bec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008bf0:	4770      	bx	lr
 8008bf2:	0000      	movs	r0, r0
 8008bf4:	0000      	movs	r0, r0
	...

08008bf8 <floor>:
 8008bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8008c00:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8008c04:	2e13      	cmp	r6, #19
 8008c06:	4602      	mov	r2, r0
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4607      	mov	r7, r0
 8008c0c:	460c      	mov	r4, r1
 8008c0e:	4605      	mov	r5, r0
 8008c10:	dc33      	bgt.n	8008c7a <floor+0x82>
 8008c12:	2e00      	cmp	r6, #0
 8008c14:	da14      	bge.n	8008c40 <floor+0x48>
 8008c16:	a334      	add	r3, pc, #208	; (adr r3, 8008ce8 <floor+0xf0>)
 8008c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c1c:	f7f7 fb0a 	bl	8000234 <__adddf3>
 8008c20:	2200      	movs	r2, #0
 8008c22:	2300      	movs	r3, #0
 8008c24:	f7f7 ff4c 	bl	8000ac0 <__aeabi_dcmpgt>
 8008c28:	b138      	cbz	r0, 8008c3a <floor+0x42>
 8008c2a:	2c00      	cmp	r4, #0
 8008c2c:	da58      	bge.n	8008ce0 <floor+0xe8>
 8008c2e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008c32:	431d      	orrs	r5, r3
 8008c34:	d001      	beq.n	8008c3a <floor+0x42>
 8008c36:	2500      	movs	r5, #0
 8008c38:	4c2d      	ldr	r4, [pc, #180]	; (8008cf0 <floor+0xf8>)
 8008c3a:	4623      	mov	r3, r4
 8008c3c:	462f      	mov	r7, r5
 8008c3e:	e025      	b.n	8008c8c <floor+0x94>
 8008c40:	4a2c      	ldr	r2, [pc, #176]	; (8008cf4 <floor+0xfc>)
 8008c42:	fa42 f806 	asr.w	r8, r2, r6
 8008c46:	ea01 0208 	and.w	r2, r1, r8
 8008c4a:	4302      	orrs	r2, r0
 8008c4c:	d01e      	beq.n	8008c8c <floor+0x94>
 8008c4e:	a326      	add	r3, pc, #152	; (adr r3, 8008ce8 <floor+0xf0>)
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	f7f7 faee 	bl	8000234 <__adddf3>
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f7f7 ff30 	bl	8000ac0 <__aeabi_dcmpgt>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	d0ea      	beq.n	8008c3a <floor+0x42>
 8008c64:	2c00      	cmp	r4, #0
 8008c66:	bfbe      	ittt	lt
 8008c68:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008c6c:	fa43 f606 	asrlt.w	r6, r3, r6
 8008c70:	19a4      	addlt	r4, r4, r6
 8008c72:	2500      	movs	r5, #0
 8008c74:	ea24 0408 	bic.w	r4, r4, r8
 8008c78:	e7df      	b.n	8008c3a <floor+0x42>
 8008c7a:	2e33      	cmp	r6, #51	; 0x33
 8008c7c:	dd0a      	ble.n	8008c94 <floor+0x9c>
 8008c7e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008c82:	d103      	bne.n	8008c8c <floor+0x94>
 8008c84:	f7f7 fad6 	bl	8000234 <__adddf3>
 8008c88:	4607      	mov	r7, r0
 8008c8a:	460b      	mov	r3, r1
 8008c8c:	4638      	mov	r0, r7
 8008c8e:	4619      	mov	r1, r3
 8008c90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c94:	f04f 32ff 	mov.w	r2, #4294967295
 8008c98:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8008c9c:	fa22 f808 	lsr.w	r8, r2, r8
 8008ca0:	ea18 0f00 	tst.w	r8, r0
 8008ca4:	d0f2      	beq.n	8008c8c <floor+0x94>
 8008ca6:	a310      	add	r3, pc, #64	; (adr r3, 8008ce8 <floor+0xf0>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	f7f7 fac2 	bl	8000234 <__adddf3>
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	f7f7 ff04 	bl	8000ac0 <__aeabi_dcmpgt>
 8008cb8:	2800      	cmp	r0, #0
 8008cba:	d0be      	beq.n	8008c3a <floor+0x42>
 8008cbc:	2c00      	cmp	r4, #0
 8008cbe:	da02      	bge.n	8008cc6 <floor+0xce>
 8008cc0:	2e14      	cmp	r6, #20
 8008cc2:	d103      	bne.n	8008ccc <floor+0xd4>
 8008cc4:	3401      	adds	r4, #1
 8008cc6:	ea25 0508 	bic.w	r5, r5, r8
 8008cca:	e7b6      	b.n	8008c3a <floor+0x42>
 8008ccc:	2301      	movs	r3, #1
 8008cce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008cd2:	fa03 f606 	lsl.w	r6, r3, r6
 8008cd6:	4435      	add	r5, r6
 8008cd8:	42bd      	cmp	r5, r7
 8008cda:	bf38      	it	cc
 8008cdc:	18e4      	addcc	r4, r4, r3
 8008cde:	e7f2      	b.n	8008cc6 <floor+0xce>
 8008ce0:	2500      	movs	r5, #0
 8008ce2:	462c      	mov	r4, r5
 8008ce4:	e7a9      	b.n	8008c3a <floor+0x42>
 8008ce6:	bf00      	nop
 8008ce8:	8800759c 	.word	0x8800759c
 8008cec:	7e37e43c 	.word	0x7e37e43c
 8008cf0:	bff00000 	.word	0xbff00000
 8008cf4:	000fffff 	.word	0x000fffff

08008cf8 <scalbn>:
 8008cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cfa:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8008cfe:	4604      	mov	r4, r0
 8008d00:	460d      	mov	r5, r1
 8008d02:	4617      	mov	r7, r2
 8008d04:	460b      	mov	r3, r1
 8008d06:	b996      	cbnz	r6, 8008d2e <scalbn+0x36>
 8008d08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008d0c:	4303      	orrs	r3, r0
 8008d0e:	d039      	beq.n	8008d84 <scalbn+0x8c>
 8008d10:	4b33      	ldr	r3, [pc, #204]	; (8008de0 <scalbn+0xe8>)
 8008d12:	2200      	movs	r2, #0
 8008d14:	f7f7 fc44 	bl	80005a0 <__aeabi_dmul>
 8008d18:	4b32      	ldr	r3, [pc, #200]	; (8008de4 <scalbn+0xec>)
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	429f      	cmp	r7, r3
 8008d1e:	460d      	mov	r5, r1
 8008d20:	da0f      	bge.n	8008d42 <scalbn+0x4a>
 8008d22:	a32b      	add	r3, pc, #172	; (adr r3, 8008dd0 <scalbn+0xd8>)
 8008d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d28:	f7f7 fc3a 	bl	80005a0 <__aeabi_dmul>
 8008d2c:	e006      	b.n	8008d3c <scalbn+0x44>
 8008d2e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8008d32:	4296      	cmp	r6, r2
 8008d34:	d10a      	bne.n	8008d4c <scalbn+0x54>
 8008d36:	4602      	mov	r2, r0
 8008d38:	f7f7 fa7c 	bl	8000234 <__adddf3>
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	460d      	mov	r5, r1
 8008d40:	e020      	b.n	8008d84 <scalbn+0x8c>
 8008d42:	460b      	mov	r3, r1
 8008d44:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008d48:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8008d4c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8008d50:	19b9      	adds	r1, r7, r6
 8008d52:	4291      	cmp	r1, r2
 8008d54:	dd0e      	ble.n	8008d74 <scalbn+0x7c>
 8008d56:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8008d5a:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8008d5e:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8008d62:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8008d66:	4820      	ldr	r0, [pc, #128]	; (8008de8 <scalbn+0xf0>)
 8008d68:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8008d6c:	a31a      	add	r3, pc, #104	; (adr r3, 8008dd8 <scalbn+0xe0>)
 8008d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d72:	e7d9      	b.n	8008d28 <scalbn+0x30>
 8008d74:	2900      	cmp	r1, #0
 8008d76:	dd08      	ble.n	8008d8a <scalbn+0x92>
 8008d78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d80:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008d84:	4620      	mov	r0, r4
 8008d86:	4629      	mov	r1, r5
 8008d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d8a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8008d8e:	da12      	bge.n	8008db6 <scalbn+0xbe>
 8008d90:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008d94:	429f      	cmp	r7, r3
 8008d96:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8008d9a:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8008d9e:	dcdc      	bgt.n	8008d5a <scalbn+0x62>
 8008da0:	a30b      	add	r3, pc, #44	; (adr r3, 8008dd0 <scalbn+0xd8>)
 8008da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da6:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8008daa:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8008dae:	480f      	ldr	r0, [pc, #60]	; (8008dec <scalbn+0xf4>)
 8008db0:	f041 011f 	orr.w	r1, r1, #31
 8008db4:	e7b8      	b.n	8008d28 <scalbn+0x30>
 8008db6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008dba:	3136      	adds	r1, #54	; 0x36
 8008dbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008dc0:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	4629      	mov	r1, r5
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4b09      	ldr	r3, [pc, #36]	; (8008df0 <scalbn+0xf8>)
 8008dcc:	e7ac      	b.n	8008d28 <scalbn+0x30>
 8008dce:	bf00      	nop
 8008dd0:	c2f8f359 	.word	0xc2f8f359
 8008dd4:	01a56e1f 	.word	0x01a56e1f
 8008dd8:	8800759c 	.word	0x8800759c
 8008ddc:	7e37e43c 	.word	0x7e37e43c
 8008de0:	43500000 	.word	0x43500000
 8008de4:	ffff3cb0 	.word	0xffff3cb0
 8008de8:	8800759c 	.word	0x8800759c
 8008dec:	c2f8f359 	.word	0xc2f8f359
 8008df0:	3c900000 	.word	0x3c900000

08008df4 <_init>:
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	bf00      	nop
 8008df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dfa:	bc08      	pop	{r3}
 8008dfc:	469e      	mov	lr, r3
 8008dfe:	4770      	bx	lr

08008e00 <_fini>:
 8008e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e02:	bf00      	nop
 8008e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e06:	bc08      	pop	{r3}
 8008e08:	469e      	mov	lr, r3
 8008e0a:	4770      	bx	lr
