
QuadMecanumWithIR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c14  08005c14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005c14  08005c14  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c14  08005c14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c14  08005c14  00015c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c18  08005c18  00015c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000004a8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004b4  200004b4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013551  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e3  00000000  00000000  0003358d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00035970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f58  00000000  00000000  000369a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002222  00000000  00000000  000378f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014818  00000000  00000000  00039b1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7bf2  00000000  00000000  0004e332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00105f24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044e4  00000000  00000000  00105f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005bc4 	.word	0x08005bc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005bc4 	.word	0x08005bc4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f001 f9b4 	bl	8001538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f81d 	bl	800020e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fd4e 	bl	8000c74 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 fd26 	bl	8000c28 <MX_DMA_Init>
  MX_I2C1_Init();
 80001dc:	f000 f87c 	bl	80002d8 <MX_I2C1_Init>
  MX_TIM1_Init();
 80001e0:	f000 f8ba 	bl	8000358 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001e4:	f000 f912 	bl	800040c <MX_TIM2_Init>
  MX_TIM3_Init();
 80001e8:	f000 f964 	bl	80004b4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80001ec:	f000 f9b8 	bl	8000560 <MX_TIM4_Init>
  MX_TIM8_Init();
 80001f0:	f000 fa42 	bl	8000678 <MX_TIM8_Init>
  MX_TIM15_Init();
 80001f4:	f000 fb14 	bl	8000820 <MX_TIM15_Init>
  MX_TIM16_Init();
 80001f8:	f000 fbc2 	bl	8000980 <MX_TIM16_Init>
  MX_TIM17_Init();
 80001fc:	f000 fc3a 	bl	8000a74 <MX_TIM17_Init>
  MX_UART4_Init();
 8000200:	f000 fcb2 	bl	8000b68 <MX_UART4_Init>
  MX_UART5_Init();
 8000204:	f000 fce0 	bl	8000bc8 <MX_UART5_Init>
  MX_TIM6_Init();
 8000208:	f000 fa00 	bl	800060c <MX_TIM6_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020c:	e7fe      	b.n	800020c <main+0x44>

0800020e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020e:	b580      	push	{r7, lr}
 8000210:	b09e      	sub	sp, #120	; 0x78
 8000212:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000214:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000218:	2228      	movs	r2, #40	; 0x28
 800021a:	2100      	movs	r1, #0
 800021c:	4618      	mov	r0, r3
 800021e:	f005 fcc9 	bl	8005bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000222:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000232:	463b      	mov	r3, r7
 8000234:	223c      	movs	r2, #60	; 0x3c
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f005 fcbb 	bl	8005bb4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800023e:	2303      	movs	r3, #3
 8000240:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000242:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000246:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000248:	2300      	movs	r3, #0
 800024a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024c:	2301      	movs	r3, #1
 800024e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000250:	2310      	movs	r3, #16
 8000252:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000254:	2302      	movs	r3, #2
 8000256:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800025e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000262:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000268:	4618      	mov	r0, r3
 800026a:	f001 ff31 	bl	80020d0 <HAL_RCC_OscConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000274:	f000 fd7e 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000278:	230f      	movs	r3, #15
 800027a:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027c:	2302      	movs	r3, #2
 800027e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000288:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800028e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000292:	2102      	movs	r1, #2
 8000294:	4618      	mov	r0, r3
 8000296:	f002 ff59 	bl	800314c <HAL_RCC_ClockConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002a0:	f000 fd68 	bl	8000d74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
 80002a4:	f243 0338 	movw	r3, #12344	; 0x3038
 80002a8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_TIM8;
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]
  PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80002b6:	2300      	movs	r3, #0
 80002b8:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80002ba:	2300      	movs	r3, #0
 80002bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002be:	463b      	mov	r3, r7
 80002c0:	4618      	mov	r0, r3
 80002c2:	f003 f97b 	bl	80035bc <HAL_RCCEx_PeriphCLKConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80002cc:	f000 fd52 	bl	8000d74 <Error_Handler>
  }
}
 80002d0:	bf00      	nop
 80002d2:	3778      	adds	r7, #120	; 0x78
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}

080002d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002dc:	4b1b      	ldr	r3, [pc, #108]	; (800034c <MX_I2C1_Init+0x74>)
 80002de:	4a1c      	ldr	r2, [pc, #112]	; (8000350 <MX_I2C1_Init+0x78>)
 80002e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002e2:	4b1a      	ldr	r3, [pc, #104]	; (800034c <MX_I2C1_Init+0x74>)
 80002e4:	4a1b      	ldr	r2, [pc, #108]	; (8000354 <MX_I2C1_Init+0x7c>)
 80002e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <MX_I2C1_Init+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002ee:	4b17      	ldr	r3, [pc, #92]	; (800034c <MX_I2C1_Init+0x74>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <MX_I2C1_Init+0x74>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fa:	4b14      	ldr	r3, [pc, #80]	; (800034c <MX_I2C1_Init+0x74>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000300:	4b12      	ldr	r3, [pc, #72]	; (800034c <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000306:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_I2C1_Init+0x74>)
 8000308:	2200      	movs	r2, #0
 800030a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800030c:	4b0f      	ldr	r3, [pc, #60]	; (800034c <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000312:	480e      	ldr	r0, [pc, #56]	; (800034c <MX_I2C1_Init+0x74>)
 8000314:	f001 fdb6 	bl	8001e84 <HAL_I2C_Init>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800031e:	f000 fd29 	bl	8000d74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000322:	2100      	movs	r1, #0
 8000324:	4809      	ldr	r0, [pc, #36]	; (800034c <MX_I2C1_Init+0x74>)
 8000326:	f001 fe3c 	bl	8001fa2 <HAL_I2CEx_ConfigAnalogFilter>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000330:	f000 fd20 	bl	8000d74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000334:	2100      	movs	r1, #0
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_I2C1_Init+0x74>)
 8000338:	f001 fe7e 	bl	8002038 <HAL_I2CEx_ConfigDigitalFilter>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000342:	f000 fd17 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20000028 	.word	0x20000028
 8000350:	40005400 	.word	0x40005400
 8000354:	2000090e 	.word	0x2000090e

08000358 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b08c      	sub	sp, #48	; 0x30
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800035e:	f107 030c 	add.w	r3, r7, #12
 8000362:	2224      	movs	r2, #36	; 0x24
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f005 fc24 	bl	8005bb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800036c:	463b      	mov	r3, r7
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
 8000372:	605a      	str	r2, [r3, #4]
 8000374:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000376:	4b23      	ldr	r3, [pc, #140]	; (8000404 <MX_TIM1_Init+0xac>)
 8000378:	4a23      	ldr	r2, [pc, #140]	; (8000408 <MX_TIM1_Init+0xb0>)
 800037a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800037c:	4b21      	ldr	r3, [pc, #132]	; (8000404 <MX_TIM1_Init+0xac>)
 800037e:	2200      	movs	r2, #0
 8000380:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000382:	4b20      	ldr	r3, [pc, #128]	; (8000404 <MX_TIM1_Init+0xac>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000388:	4b1e      	ldr	r3, [pc, #120]	; (8000404 <MX_TIM1_Init+0xac>)
 800038a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800038e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000390:	4b1c      	ldr	r3, [pc, #112]	; (8000404 <MX_TIM1_Init+0xac>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000396:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <MX_TIM1_Init+0xac>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <MX_TIM1_Init+0xac>)
 800039e:	2200      	movs	r2, #0
 80003a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80003a2:	2301      	movs	r3, #1
 80003a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80003a6:	2300      	movs	r3, #0
 80003a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80003aa:	2301      	movs	r3, #1
 80003ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80003b6:	2300      	movs	r3, #0
 80003b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80003ba:	2301      	movs	r3, #1
 80003bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80003be:	2300      	movs	r3, #0
 80003c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80003c6:	f107 030c 	add.w	r3, r7, #12
 80003ca:	4619      	mov	r1, r3
 80003cc:	480d      	ldr	r0, [pc, #52]	; (8000404 <MX_TIM1_Init+0xac>)
 80003ce:	f003 fb5d 	bl	8003a8c <HAL_TIM_Encoder_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80003d8:	f000 fccc 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003dc:	2300      	movs	r3, #0
 80003de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80003e0:	2300      	movs	r3, #0
 80003e2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003e4:	2300      	movs	r3, #0
 80003e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80003e8:	463b      	mov	r3, r7
 80003ea:	4619      	mov	r1, r3
 80003ec:	4805      	ldr	r0, [pc, #20]	; (8000404 <MX_TIM1_Init+0xac>)
 80003ee:	f004 fb23 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 80003f2:	4603      	mov	r3, r0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d001      	beq.n	80003fc <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80003f8:	f000 fcbc 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80003fc:	bf00      	nop
 80003fe:	3730      	adds	r7, #48	; 0x30
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000074 	.word	0x20000074
 8000408:	40012c00 	.word	0x40012c00

0800040c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b08c      	sub	sp, #48	; 0x30
 8000410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000412:	f107 030c 	add.w	r3, r7, #12
 8000416:	2224      	movs	r2, #36	; 0x24
 8000418:	2100      	movs	r1, #0
 800041a:	4618      	mov	r0, r3
 800041c:	f005 fbca 	bl	8005bb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000420:	463b      	mov	r3, r7
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800042a:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <MX_TIM2_Init+0xa4>)
 800042c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000430:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000432:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <MX_TIM2_Init+0xa4>)
 8000434:	2200      	movs	r2, #0
 8000436:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000438:	4b1d      	ldr	r3, [pc, #116]	; (80004b0 <MX_TIM2_Init+0xa4>)
 800043a:	2200      	movs	r2, #0
 800043c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800043e:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <MX_TIM2_Init+0xa4>)
 8000440:	f04f 32ff 	mov.w	r2, #4294967295
 8000444:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000446:	4b1a      	ldr	r3, [pc, #104]	; (80004b0 <MX_TIM2_Init+0xa4>)
 8000448:	2200      	movs	r2, #0
 800044a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <MX_TIM2_Init+0xa4>)
 800044e:	2200      	movs	r2, #0
 8000450:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000452:	2301      	movs	r3, #1
 8000454:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000456:	2300      	movs	r3, #0
 8000458:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800045a:	2301      	movs	r3, #1
 800045c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000466:	2300      	movs	r3, #0
 8000468:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800046a:	2301      	movs	r3, #1
 800046c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800046e:	2300      	movs	r3, #0
 8000470:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000476:	f107 030c 	add.w	r3, r7, #12
 800047a:	4619      	mov	r1, r3
 800047c:	480c      	ldr	r0, [pc, #48]	; (80004b0 <MX_TIM2_Init+0xa4>)
 800047e:	f003 fb05 	bl	8003a8c <HAL_TIM_Encoder_Init>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d001      	beq.n	800048c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000488:	f000 fc74 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800048c:	2300      	movs	r3, #0
 800048e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000490:	2300      	movs	r3, #0
 8000492:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000494:	463b      	mov	r3, r7
 8000496:	4619      	mov	r1, r3
 8000498:	4805      	ldr	r0, [pc, #20]	; (80004b0 <MX_TIM2_Init+0xa4>)
 800049a:	f004 facd 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80004a4:	f000 fc66 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004a8:	bf00      	nop
 80004aa:	3730      	adds	r7, #48	; 0x30
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	200000c0 	.word	0x200000c0

080004b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b08c      	sub	sp, #48	; 0x30
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	2224      	movs	r2, #36	; 0x24
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f005 fb76 	bl	8005bb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c8:	463b      	mov	r3, r7
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004d2:	4b21      	ldr	r3, [pc, #132]	; (8000558 <MX_TIM3_Init+0xa4>)
 80004d4:	4a21      	ldr	r2, [pc, #132]	; (800055c <MX_TIM3_Init+0xa8>)
 80004d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80004d8:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <MX_TIM3_Init+0xa4>)
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004de:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <MX_TIM3_Init+0xa4>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80004e4:	4b1c      	ldr	r3, [pc, #112]	; (8000558 <MX_TIM3_Init+0xa4>)
 80004e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ec:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <MX_TIM3_Init+0xa4>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f2:	4b19      	ldr	r3, [pc, #100]	; (8000558 <MX_TIM3_Init+0xa4>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004f8:	2301      	movs	r3, #1
 80004fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004fc:	2300      	movs	r3, #0
 80004fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000500:	2301      	movs	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800050c:	2300      	movs	r3, #0
 800050e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000510:	2301      	movs	r3, #1
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000514:	2300      	movs	r3, #0
 8000516:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	4619      	mov	r1, r3
 8000522:	480d      	ldr	r0, [pc, #52]	; (8000558 <MX_TIM3_Init+0xa4>)
 8000524:	f003 fab2 	bl	8003a8c <HAL_TIM_Encoder_Init>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800052e:	f000 fc21 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000532:	2300      	movs	r3, #0
 8000534:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800053a:	463b      	mov	r3, r7
 800053c:	4619      	mov	r1, r3
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <MX_TIM3_Init+0xa4>)
 8000540:	f004 fa7a 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800054a:	f000 fc13 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800054e:	bf00      	nop
 8000550:	3730      	adds	r7, #48	; 0x30
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	2000010c 	.word	0x2000010c
 800055c:	40000400 	.word	0x40000400

08000560 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	; 0x30
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	2224      	movs	r2, #36	; 0x24
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f005 fb20 	bl	8005bb4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000574:	463b      	mov	r3, r7
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800057e:	4b21      	ldr	r3, [pc, #132]	; (8000604 <MX_TIM4_Init+0xa4>)
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <MX_TIM4_Init+0xa8>)
 8000582:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <MX_TIM4_Init+0xa4>)
 8000586:	2200      	movs	r2, #0
 8000588:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800058a:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <MX_TIM4_Init+0xa4>)
 800058c:	2200      	movs	r2, #0
 800058e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <MX_TIM4_Init+0xa4>)
 8000592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000596:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <MX_TIM4_Init+0xa4>)
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <MX_TIM4_Init+0xa4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80005a4:	2301      	movs	r3, #1
 80005a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80005a8:	2300      	movs	r3, #0
 80005aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80005ac:	2301      	movs	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80005bc:	2301      	movs	r3, #1
 80005be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80005c8:	f107 030c 	add.w	r3, r7, #12
 80005cc:	4619      	mov	r1, r3
 80005ce:	480d      	ldr	r0, [pc, #52]	; (8000604 <MX_TIM4_Init+0xa4>)
 80005d0:	f003 fa5c 	bl	8003a8c <HAL_TIM_Encoder_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 80005da:	f000 fbcb 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <MX_TIM4_Init+0xa4>)
 80005ec:	f004 fa24 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80005f6:	f000 fbbd 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	3730      	adds	r7, #48	; 0x30
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000158 	.word	0x20000158
 8000608:	40000800 	.word	0x40000800

0800060c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800061c:	4b14      	ldr	r3, [pc, #80]	; (8000670 <MX_TIM6_Init+0x64>)
 800061e:	4a15      	ldr	r2, [pc, #84]	; (8000674 <MX_TIM6_Init+0x68>)
 8000620:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 64 - 1;
 8000622:	4b13      	ldr	r3, [pc, #76]	; (8000670 <MX_TIM6_Init+0x64>)
 8000624:	223f      	movs	r2, #63	; 0x3f
 8000626:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000628:	4b11      	ldr	r3, [pc, #68]	; (8000670 <MX_TIM6_Init+0x64>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 60000 - 1;
 800062e:	4b10      	ldr	r3, [pc, #64]	; (8000670 <MX_TIM6_Init+0x64>)
 8000630:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000634:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <MX_TIM6_Init+0x64>)
 8000638:	2200      	movs	r2, #0
 800063a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <MX_TIM6_Init+0x64>)
 800063e:	f003 f96d 	bl	800391c <HAL_TIM_Base_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000648:	f000 fb94 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	4619      	mov	r1, r3
 8000658:	4805      	ldr	r0, [pc, #20]	; (8000670 <MX_TIM6_Init+0x64>)
 800065a:	f004 f9ed 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000664:	f000 fb86 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200001a4 	.word	0x200001a4
 8000674:	40001000 	.word	0x40001000

08000678 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b09a      	sub	sp, #104	; 0x68
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800067e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000698:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
 80006a8:	615a      	str	r2, [r3, #20]
 80006aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	222c      	movs	r2, #44	; 0x2c
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f005 fa7e 	bl	8005bb4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80006b8:	4b56      	ldr	r3, [pc, #344]	; (8000814 <MX_TIM8_Init+0x19c>)
 80006ba:	4a57      	ldr	r2, [pc, #348]	; (8000818 <MX_TIM8_Init+0x1a0>)
 80006bc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80006be:	4b55      	ldr	r3, [pc, #340]	; (8000814 <MX_TIM8_Init+0x19c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c4:	4b53      	ldr	r3, [pc, #332]	; (8000814 <MX_TIM8_Init+0x19c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 2560 - 1;
 80006ca:	4b52      	ldr	r3, [pc, #328]	; (8000814 <MX_TIM8_Init+0x19c>)
 80006cc:	f640 12ff 	movw	r2, #2559	; 0x9ff
 80006d0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d2:	4b50      	ldr	r3, [pc, #320]	; (8000814 <MX_TIM8_Init+0x19c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80006d8:	4b4e      	ldr	r3, [pc, #312]	; (8000814 <MX_TIM8_Init+0x19c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006de:	4b4d      	ldr	r3, [pc, #308]	; (8000814 <MX_TIM8_Init+0x19c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80006e4:	484b      	ldr	r0, [pc, #300]	; (8000814 <MX_TIM8_Init+0x19c>)
 80006e6:	f003 f919 	bl	800391c <HAL_TIM_Base_Init>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80006f0:	f000 fb40 	bl	8000d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80006fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006fe:	4619      	mov	r1, r3
 8000700:	4844      	ldr	r0, [pc, #272]	; (8000814 <MX_TIM8_Init+0x19c>)
 8000702:	f003 fc9d 	bl	8004040 <HAL_TIM_ConfigClockSource>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 800070c:	f000 fb32 	bl	8000d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000710:	4840      	ldr	r0, [pc, #256]	; (8000814 <MX_TIM8_Init+0x19c>)
 8000712:	f003 f95a 	bl	80039ca <HAL_TIM_PWM_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 800071c:	f000 fb2a 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000720:	2300      	movs	r3, #0
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000724:	2300      	movs	r3, #0
 8000726:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800072c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000730:	4619      	mov	r1, r3
 8000732:	4838      	ldr	r0, [pc, #224]	; (8000814 <MX_TIM8_Init+0x19c>)
 8000734:	f004 f980 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800073e:	f000 fb19 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_COMBINED_PWM1;
 8000742:	4b36      	ldr	r3, [pc, #216]	; (800081c <MX_TIM8_Init+0x1a4>)
 8000744:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800074a:	2300      	movs	r3, #0
 800074c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800074e:	2300      	movs	r3, #0
 8000750:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800075a:	2300      	movs	r3, #0
 800075c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800075e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000762:	2200      	movs	r2, #0
 8000764:	4619      	mov	r1, r3
 8000766:	482b      	ldr	r0, [pc, #172]	; (8000814 <MX_TIM8_Init+0x19c>)
 8000768:	f003 fb56 	bl	8003e18 <HAL_TIM_PWM_ConfigChannel>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000772:	f000 faff 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000776:	2360      	movs	r3, #96	; 0x60
 8000778:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800077a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800077e:	2204      	movs	r2, #4
 8000780:	4619      	mov	r1, r3
 8000782:	4824      	ldr	r0, [pc, #144]	; (8000814 <MX_TIM8_Init+0x19c>)
 8000784:	f003 fb48 	bl	8003e18 <HAL_TIM_PWM_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM8_Init+0x11a>
  {
    Error_Handler();
 800078e:	f000 faf1 	bl	8000d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000792:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000796:	2208      	movs	r2, #8
 8000798:	4619      	mov	r1, r3
 800079a:	481e      	ldr	r0, [pc, #120]	; (8000814 <MX_TIM8_Init+0x19c>)
 800079c:	f003 fb3c 	bl	8003e18 <HAL_TIM_PWM_ConfigChannel>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_TIM8_Init+0x132>
  {
    Error_Handler();
 80007a6:	f000 fae5 	bl	8000d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ae:	220c      	movs	r2, #12
 80007b0:	4619      	mov	r1, r3
 80007b2:	4818      	ldr	r0, [pc, #96]	; (8000814 <MX_TIM8_Init+0x19c>)
 80007b4:	f003 fb30 	bl	8003e18 <HAL_TIM_PWM_ConfigChannel>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM8_Init+0x14a>
  {
    Error_Handler();
 80007be:	f000 fad9 	bl	8000d74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007ca:	2300      	movs	r3, #0
 80007cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	4619      	mov	r1, r3
 80007f6:	4807      	ldr	r0, [pc, #28]	; (8000814 <MX_TIM8_Init+0x19c>)
 80007f8:	f004 f99e 	bl	8004b38 <HAL_TIMEx_ConfigBreakDeadTime>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM8_Init+0x18e>
  {
    Error_Handler();
 8000802:	f000 fab7 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000806:	4803      	ldr	r0, [pc, #12]	; (8000814 <MX_TIM8_Init+0x19c>)
 8000808:	f000 fc6e 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 800080c:	bf00      	nop
 800080e:	3768      	adds	r7, #104	; 0x68
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200001f0 	.word	0x200001f0
 8000818:	40013400 	.word	0x40013400
 800081c:	00010040 	.word	0x00010040

08000820 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b09a      	sub	sp, #104	; 0x68
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000826:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000834:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000840:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	222c      	movs	r2, #44	; 0x2c
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f005 f9aa 	bl	8005bb4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000860:	4b45      	ldr	r3, [pc, #276]	; (8000978 <MX_TIM15_Init+0x158>)
 8000862:	4a46      	ldr	r2, [pc, #280]	; (800097c <MX_TIM15_Init+0x15c>)
 8000864:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000866:	4b44      	ldr	r3, [pc, #272]	; (8000978 <MX_TIM15_Init+0x158>)
 8000868:	2200      	movs	r2, #0
 800086a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086c:	4b42      	ldr	r3, [pc, #264]	; (8000978 <MX_TIM15_Init+0x158>)
 800086e:	2200      	movs	r2, #0
 8000870:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 2560 - 1;
 8000872:	4b41      	ldr	r3, [pc, #260]	; (8000978 <MX_TIM15_Init+0x158>)
 8000874:	f640 12ff 	movw	r2, #2559	; 0x9ff
 8000878:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087a:	4b3f      	ldr	r3, [pc, #252]	; (8000978 <MX_TIM15_Init+0x158>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000880:	4b3d      	ldr	r3, [pc, #244]	; (8000978 <MX_TIM15_Init+0x158>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000886:	4b3c      	ldr	r3, [pc, #240]	; (8000978 <MX_TIM15_Init+0x158>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800088c:	483a      	ldr	r0, [pc, #232]	; (8000978 <MX_TIM15_Init+0x158>)
 800088e:	f003 f845 	bl	800391c <HAL_TIM_Base_Init>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8000898:	f000 fa6c 	bl	8000d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800089c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008a0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80008a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80008a6:	4619      	mov	r1, r3
 80008a8:	4833      	ldr	r0, [pc, #204]	; (8000978 <MX_TIM15_Init+0x158>)
 80008aa:	f003 fbc9 	bl	8004040 <HAL_TIM_ConfigClockSource>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 80008b4:	f000 fa5e 	bl	8000d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80008b8:	482f      	ldr	r0, [pc, #188]	; (8000978 <MX_TIM15_Init+0x158>)
 80008ba:	f003 f886 	bl	80039ca <HAL_TIM_PWM_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 80008c4:	f000 fa56 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c8:	2300      	movs	r3, #0
 80008ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008cc:	2300      	movs	r3, #0
 80008ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80008d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008d4:	4619      	mov	r1, r3
 80008d6:	4828      	ldr	r0, [pc, #160]	; (8000978 <MX_TIM15_Init+0x158>)
 80008d8:	f004 f8ae 	bl	8004a38 <HAL_TIMEx_MasterConfigSynchronization>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80008e2:	f000 fa47 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008e6:	2360      	movs	r3, #96	; 0x60
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ee:	2300      	movs	r3, #0
 80008f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008f2:	2300      	movs	r3, #0
 80008f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008f6:	2300      	movs	r3, #0
 80008f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008fa:	2300      	movs	r3, #0
 80008fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008fe:	2300      	movs	r3, #0
 8000900:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000902:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000906:	2200      	movs	r2, #0
 8000908:	4619      	mov	r1, r3
 800090a:	481b      	ldr	r0, [pc, #108]	; (8000978 <MX_TIM15_Init+0x158>)
 800090c:	f003 fa84 	bl	8003e18 <HAL_TIM_PWM_ConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM15_Init+0xfa>
  {
    Error_Handler();
 8000916:	f000 fa2d 	bl	8000d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800091a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800091e:	2204      	movs	r2, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4815      	ldr	r0, [pc, #84]	; (8000978 <MX_TIM15_Init+0x158>)
 8000924:	f003 fa78 	bl	8003e18 <HAL_TIM_PWM_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM15_Init+0x112>
  {
    Error_Handler();
 800092e:	f000 fa21 	bl	8000d74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800093a:	2300      	movs	r3, #0
 800093c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000946:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800094a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	4619      	mov	r1, r3
 8000958:	4807      	ldr	r0, [pc, #28]	; (8000978 <MX_TIM15_Init+0x158>)
 800095a:	f004 f8ed 	bl	8004b38 <HAL_TIMEx_ConfigBreakDeadTime>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <MX_TIM15_Init+0x148>
  {
    Error_Handler();
 8000964:	f000 fa06 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000968:	4803      	ldr	r0, [pc, #12]	; (8000978 <MX_TIM15_Init+0x158>)
 800096a:	f000 fbbd 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 800096e:	bf00      	nop
 8000970:	3768      	adds	r7, #104	; 0x68
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	2000023c 	.word	0x2000023c
 800097c:	40014000 	.word	0x40014000

08000980 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b092      	sub	sp, #72	; 0x48
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000986:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
 8000996:	615a      	str	r2, [r3, #20]
 8000998:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800099a:	463b      	mov	r3, r7
 800099c:	222c      	movs	r2, #44	; 0x2c
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f005 f907 	bl	8005bb4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80009a6:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009a8:	4a31      	ldr	r2, [pc, #196]	; (8000a70 <MX_TIM16_Init+0xf0>)
 80009aa:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80009ac:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b2:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2560 - 1;
 80009b8:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009ba:	f640 12ff 	movw	r2, #2559	; 0x9ff
 80009be:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80009c6:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009cc:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80009d2:	4826      	ldr	r0, [pc, #152]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009d4:	f002 ffa2 	bl	800391c <HAL_TIM_Base_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80009de:	f000 f9c9 	bl	8000d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80009e2:	4822      	ldr	r0, [pc, #136]	; (8000a6c <MX_TIM16_Init+0xec>)
 80009e4:	f002 fff1 	bl	80039ca <HAL_TIM_PWM_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80009ee:	f000 f9c1 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f2:	2360      	movs	r3, #96	; 0x60
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009fa:	2300      	movs	r3, #0
 80009fc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009fe:	2300      	movs	r3, #0
 8000a00:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a06:	2300      	movs	r3, #0
 8000a08:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a12:	2200      	movs	r2, #0
 8000a14:	4619      	mov	r1, r3
 8000a16:	4815      	ldr	r0, [pc, #84]	; (8000a6c <MX_TIM16_Init+0xec>)
 8000a18:	f003 f9fe 	bl	8003e18 <HAL_TIM_PWM_ConfigChannel>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000a22:	f000 f9a7 	bl	8000d74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a3e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000a48:	463b      	mov	r3, r7
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4807      	ldr	r0, [pc, #28]	; (8000a6c <MX_TIM16_Init+0xec>)
 8000a4e:	f004 f873 	bl	8004b38 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000a58:	f000 f98c 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <MX_TIM16_Init+0xec>)
 8000a5e:	f000 fb43 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 8000a62:	bf00      	nop
 8000a64:	3748      	adds	r7, #72	; 0x48
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000288 	.word	0x20000288
 8000a70:	40014400 	.word	0x40014400

08000a74 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b092      	sub	sp, #72	; 0x48
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
 8000a8a:	615a      	str	r2, [r3, #20]
 8000a8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a8e:	463b      	mov	r3, r7
 8000a90:	222c      	movs	r2, #44	; 0x2c
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f005 f88d 	bl	8005bb4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a9a:	4b31      	ldr	r3, [pc, #196]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000a9c:	4a31      	ldr	r2, [pc, #196]	; (8000b64 <MX_TIM17_Init+0xf0>)
 8000a9e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000aa0:	4b2f      	ldr	r3, [pc, #188]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2560 - 1;
 8000aac:	4b2c      	ldr	r3, [pc, #176]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000aae:	f640 12ff 	movw	r2, #2559	; 0x9ff
 8000ab2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000aba:	4b29      	ldr	r3, [pc, #164]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000ac6:	4826      	ldr	r0, [pc, #152]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000ac8:	f002 ff28 	bl	800391c <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000ad2:	f000 f94f 	bl	8000d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000ad6:	4822      	ldr	r0, [pc, #136]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000ad8:	f002 ff77 	bl	80039ca <HAL_TIM_PWM_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000ae2:	f000 f947 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae6:	2360      	movs	r3, #96	; 0x60
 8000ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aee:	2300      	movs	r3, #0
 8000af0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af2:	2300      	movs	r3, #0
 8000af4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000afa:	2300      	movs	r3, #0
 8000afc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b06:	2200      	movs	r2, #0
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4815      	ldr	r0, [pc, #84]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000b0c:	f003 f984 	bl	8003e18 <HAL_TIM_PWM_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000b16:	f000 f92d 	bl	8000d74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b22:	2300      	movs	r3, #0
 8000b24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4807      	ldr	r0, [pc, #28]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000b42:	f003 fff9 	bl	8004b38 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000b4c:	f000 f912 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <MX_TIM17_Init+0xec>)
 8000b52:	f000 fac9 	bl	80010e8 <HAL_TIM_MspPostInit>

}
 8000b56:	bf00      	nop
 8000b58:	3748      	adds	r7, #72	; 0x48
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200002d4 	.word	0x200002d4
 8000b64:	40014800 	.word	0x40014800

08000b68 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_UART4_Init+0x58>)
 8000b6e:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <MX_UART4_Init+0x5c>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_UART4_Init+0x58>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_UART4_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_UART4_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_UART4_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_UART4_Init+0x58>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_UART4_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_UART4_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_UART4_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_UART4_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_UART4_Init+0x58>)
 8000bac:	f004 f860 	bl	8004c70 <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000bb6:	f000 f8dd 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000320 	.word	0x20000320
 8000bc4:	40004c00 	.word	0x40004c00

08000bc8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_UART5_Init+0x58>)
 8000bce:	4a15      	ldr	r2, [pc, #84]	; (8000c24 <MX_UART5_Init+0x5c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000bd2:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <MX_UART5_Init+0x58>)
 8000bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bd8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_UART5_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_UART5_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	; (8000c20 <MX_UART5_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_UART5_Init+0x58>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <MX_UART5_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_UART5_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <MX_UART5_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_UART5_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_UART5_Init+0x58>)
 8000c0c:	f004 f830 	bl	8004c70 <HAL_UART_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000c16:	f000 f8ad 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	200003a4 	.word	0x200003a4
 8000c24:	40005000 	.word	0x40005000

08000c28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_DMA_Init+0x48>)
 8000c30:	695b      	ldr	r3, [r3, #20]
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <MX_DMA_Init+0x48>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6153      	str	r3, [r2, #20]
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_DMA_Init+0x48>)
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel3_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	203a      	movs	r0, #58	; 0x3a
 8000c4c:	f000 fdb5 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel3_IRQn);
 8000c50:	203a      	movs	r0, #58	; 0x3a
 8000c52:	f000 fdce 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	203c      	movs	r0, #60	; 0x3c
 8000c5c:	f000 fdad 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000c60:	203c      	movs	r0, #60	; 0x3c
 8000c62:	f000 fdc6 	bl	80017f2 <HAL_NVIC_EnableIRQ>

}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	; 0x28
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8a:	4b38      	ldr	r3, [pc, #224]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a37      	ldr	r2, [pc, #220]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000c90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b35      	ldr	r3, [pc, #212]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca2:	4b32      	ldr	r3, [pc, #200]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000ca4:	695b      	ldr	r3, [r3, #20]
 8000ca6:	4a31      	ldr	r2, [pc, #196]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000ca8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cac:	6153      	str	r3, [r2, #20]
 8000cae:	4b2f      	ldr	r3, [pc, #188]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000cbc:	695b      	ldr	r3, [r3, #20]
 8000cbe:	4a2b      	ldr	r2, [pc, #172]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	6153      	str	r3, [r2, #20]
 8000cc6:	4b29      	ldr	r3, [pc, #164]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	60bb      	str	r3, [r7, #8]
 8000cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cdc:	6153      	str	r3, [r2, #20]
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000ce0:	695b      	ldr	r3, [r3, #20]
 8000ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cea:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000cec:	695b      	ldr	r3, [r3, #20]
 8000cee:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cf4:	6153      	str	r3, [r2, #20]
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <MX_GPIO_Init+0xf8>)
 8000cf8:	695b      	ldr	r3, [r3, #20]
 8000cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED2_Pin|LED3_Pin|LED1_Pin|IR_ON_Pin
 8000d02:	2200      	movs	r2, #0
 8000d04:	f24e 0103 	movw	r1, #57347	; 0xe003
 8000d08:	4819      	ldr	r0, [pc, #100]	; (8000d70 <MX_GPIO_Init+0xfc>)
 8000d0a:	f001 f8a3 	bl	8001e54 <HAL_GPIO_WritePin>
                          |M_SDn_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED2_Pin LED3_Pin LED1_Pin IR_ON_Pin
                           M_SDn_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin|LED1_Pin|IR_ON_Pin
 8000d0e:	f24e 0303 	movw	r3, #57347	; 0xe003
 8000d12:	617b      	str	r3, [r7, #20]
                          |M_SDn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d14:	2301      	movs	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4812      	ldr	r0, [pc, #72]	; (8000d70 <MX_GPIO_Init+0xfc>)
 8000d28:	f000 ff1a 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : IR_OUTL1_Pin IR_OUTL2_Pin IR_OUTR1_Pin IR_OUTR2_Pin
                           IR_OUTF2_Pin IR_OUTF1_Pin */
  GPIO_InitStruct.Pin = IR_OUTL1_Pin|IR_OUTL2_Pin|IR_OUTR1_Pin|IR_OUTR2_Pin
 8000d2c:	23fc      	movs	r3, #252	; 0xfc
 8000d2e:	617b      	str	r3, [r7, #20]
                          |IR_OUTF2_Pin|IR_OUTF1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d42:	f000 ff0d 	bl	8001b60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5e:	f000 feff 	bl	8001b60 <HAL_GPIO_Init>

}
 8000d62:	bf00      	nop
 8000d64:	3728      	adds	r7, #40	; 0x28
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40021000 	.word	0x40021000
 8000d70:	48000800 	.word	0x48000800

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	6193      	str	r3, [r2, #24]
 8000d92:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <HAL_MspInit+0x44>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <HAL_MspInit+0x44>)
 8000da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da8:	61d3      	str	r3, [r2, #28]
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <HAL_MspInit+0x44>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	; 0x28
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a17      	ldr	r2, [pc, #92]	; (8000e44 <HAL_I2C_MspInit+0x7c>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d127      	bne.n	8000e3a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_I2C_MspInit+0x80>)
 8000dec:	695b      	ldr	r3, [r3, #20]
 8000dee:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <HAL_I2C_MspInit+0x80>)
 8000df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000df4:	6153      	str	r3, [r2, #20]
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_I2C_MspInit+0x80>)
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e02:	23c0      	movs	r3, #192	; 0xc0
 8000e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e06:	2312      	movs	r3, #18
 8000e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e0e:	2303      	movs	r3, #3
 8000e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e12:	2304      	movs	r3, #4
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	480b      	ldr	r0, [pc, #44]	; (8000e4c <HAL_I2C_MspInit+0x84>)
 8000e1e:	f000 fe9f 	bl	8001b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_I2C_MspInit+0x80>)
 8000e24:	69db      	ldr	r3, [r3, #28]
 8000e26:	4a08      	ldr	r2, [pc, #32]	; (8000e48 <HAL_I2C_MspInit+0x80>)
 8000e28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e2c:	61d3      	str	r3, [r2, #28]
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_I2C_MspInit+0x80>)
 8000e30:	69db      	ldr	r3, [r3, #28]
 8000e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	; 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40005400 	.word	0x40005400
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	48000400 	.word	0x48000400

08000e50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b090      	sub	sp, #64	; 0x40
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a5e      	ldr	r2, [pc, #376]	; (8000fe8 <HAL_TIM_Encoder_MspInit+0x198>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d12a      	bne.n	8000ec8 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e72:	4b5e      	ldr	r3, [pc, #376]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	4a5d      	ldr	r2, [pc, #372]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000e78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e7c:	6193      	str	r3, [r2, #24]
 8000e7e:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e88:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8a:	4b58      	ldr	r3, [pc, #352]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	4a57      	ldr	r2, [pc, #348]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e94:	6153      	str	r3, [r2, #20]
 8000e96:	4b55      	ldr	r3, [pc, #340]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000e98:	695b      	ldr	r3, [r3, #20]
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ea2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000eb4:	2306      	movs	r3, #6
 8000eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec2:	f000 fe4d 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ec6:	e08b      	b.n	8000fe0 <HAL_TIM_Encoder_MspInit+0x190>
  else if(htim_encoder->Instance==TIM2)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed0:	d129      	bne.n	8000f26 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed2:	4b46      	ldr	r3, [pc, #280]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	4a45      	ldr	r2, [pc, #276]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000ed8:	f043 0301 	orr.w	r3, r3, #1
 8000edc:	61d3      	str	r3, [r2, #28]
 8000ede:	4b43      	ldr	r3, [pc, #268]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000ee0:	69db      	ldr	r3, [r3, #28]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	623b      	str	r3, [r7, #32]
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b40      	ldr	r3, [pc, #256]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	4a3f      	ldr	r2, [pc, #252]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	6153      	str	r3, [r2, #20]
 8000ef6:	4b3d      	ldr	r3, [pc, #244]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	61fb      	str	r3, [r7, #28]
 8000f00:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f02:	2303      	movs	r3, #3
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f12:	2301      	movs	r3, #1
 8000f14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f000 fe1e 	bl	8001b60 <HAL_GPIO_Init>
}
 8000f24:	e05c      	b.n	8000fe0 <HAL_TIM_Encoder_MspInit+0x190>
  else if(htim_encoder->Instance==TIM3)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a31      	ldr	r2, [pc, #196]	; (8000ff0 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d128      	bne.n	8000f82 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f30:	4b2e      	ldr	r3, [pc, #184]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	4a2d      	ldr	r2, [pc, #180]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000f36:	f043 0302 	orr.w	r3, r3, #2
 8000f3a:	61d3      	str	r3, [r2, #28]
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	4a27      	ldr	r2, [pc, #156]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000f4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f52:	6153      	str	r3, [r2, #20]
 8000f54:	4b25      	ldr	r3, [pc, #148]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000f56:	695b      	ldr	r3, [r3, #20]
 8000f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f60:	2330      	movs	r3, #48	; 0x30
 8000f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	2302      	movs	r3, #2
 8000f66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f70:	2302      	movs	r3, #2
 8000f72:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f78:	4619      	mov	r1, r3
 8000f7a:	481e      	ldr	r0, [pc, #120]	; (8000ff4 <HAL_TIM_Encoder_MspInit+0x1a4>)
 8000f7c:	f000 fdf0 	bl	8001b60 <HAL_GPIO_Init>
}
 8000f80:	e02e      	b.n	8000fe0 <HAL_TIM_Encoder_MspInit+0x190>
  else if(htim_encoder->Instance==TIM4)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <HAL_TIM_Encoder_MspInit+0x1a8>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d129      	bne.n	8000fe0 <HAL_TIM_Encoder_MspInit+0x190>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f8c:	4b17      	ldr	r3, [pc, #92]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	4a16      	ldr	r2, [pc, #88]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	61d3      	str	r3, [r2, #28]
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	4a10      	ldr	r2, [pc, #64]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fae:	6153      	str	r3, [r2, #20]
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_TIM_Encoder_MspInit+0x19c>)
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000fbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8000fce:	230a      	movs	r3, #10
 8000fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fdc:	f000 fdc0 	bl	8001b60 <HAL_GPIO_Init>
}
 8000fe0:	bf00      	nop
 8000fe2:	3740      	adds	r7, #64	; 0x40
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40012c00 	.word	0x40012c00
 8000fec:	40021000 	.word	0x40021000
 8000ff0:	40000400 	.word	0x40000400
 8000ff4:	48000400 	.word	0x48000400
 8000ff8:	40000800 	.word	0x40000800

08000ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a31      	ldr	r2, [pc, #196]	; (80010d0 <HAL_TIM_Base_MspInit+0xd4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d114      	bne.n	8001038 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800100e:	4b31      	ldr	r3, [pc, #196]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a30      	ldr	r2, [pc, #192]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b2e      	ldr	r3, [pc, #184]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2036      	movs	r0, #54	; 0x36
 800102c:	f000 fbc5 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001030:	2036      	movs	r0, #54	; 0x36
 8001032:	f000 fbde 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001036:	e046      	b.n	80010c6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM8)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a26      	ldr	r2, [pc, #152]	; (80010d8 <HAL_TIM_Base_MspInit+0xdc>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d10c      	bne.n	800105c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001042:	4b24      	ldr	r3, [pc, #144]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	4a23      	ldr	r2, [pc, #140]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 8001048:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800104c:	6193      	str	r3, [r2, #24]
 800104e:	4b21      	ldr	r3, [pc, #132]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 8001050:	699b      	ldr	r3, [r3, #24]
 8001052:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	69bb      	ldr	r3, [r7, #24]
}
 800105a:	e034      	b.n	80010c6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM15)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <HAL_TIM_Base_MspInit+0xe0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d10c      	bne.n	8001080 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001066:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	4a1a      	ldr	r2, [pc, #104]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 800106c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001070:	6193      	str	r3, [r2, #24]
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 8001074:	699b      	ldr	r3, [r3, #24]
 8001076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
}
 800107e:	e022      	b.n	80010c6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM16)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a16      	ldr	r2, [pc, #88]	; (80010e0 <HAL_TIM_Base_MspInit+0xe4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d10c      	bne.n	80010a4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800108a:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 800108c:	699b      	ldr	r3, [r3, #24]
 800108e:	4a11      	ldr	r2, [pc, #68]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 8001090:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001094:	6193      	str	r3, [r2, #24]
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
}
 80010a2:	e010      	b.n	80010c6 <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM17)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <HAL_TIM_Base_MspInit+0xe8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d10b      	bne.n	80010c6 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 80010b0:	699b      	ldr	r3, [r3, #24]
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 80010b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010b8:	6193      	str	r3, [r2, #24]
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_TIM_Base_MspInit+0xd8>)
 80010bc:	699b      	ldr	r3, [r3, #24]
 80010be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
}
 80010c6:	bf00      	nop
 80010c8:	3720      	adds	r7, #32
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40001000 	.word	0x40001000
 80010d4:	40021000 	.word	0x40021000
 80010d8:	40013400 	.word	0x40013400
 80010dc:	40014000 	.word	0x40014000
 80010e0:	40014400 	.word	0x40014400
 80010e4:	40014800 	.word	0x40014800

080010e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a46      	ldr	r2, [pc, #280]	; (8001220 <HAL_TIM_MspPostInit+0x138>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d11d      	bne.n	8001146 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	4b46      	ldr	r3, [pc, #280]	; (8001224 <HAL_TIM_MspPostInit+0x13c>)
 800110c:	695b      	ldr	r3, [r3, #20]
 800110e:	4a45      	ldr	r2, [pc, #276]	; (8001224 <HAL_TIM_MspPostInit+0x13c>)
 8001110:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001114:	6153      	str	r3, [r2, #20]
 8001116:	4b43      	ldr	r3, [pc, #268]	; (8001224 <HAL_TIM_MspPostInit+0x13c>)
 8001118:	695b      	ldr	r3, [r3, #20]
 800111a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800111e:	61bb      	str	r3, [r7, #24]
 8001120:	69bb      	ldr	r3, [r7, #24]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001122:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001134:	2304      	movs	r3, #4
 8001136:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001138:	f107 031c 	add.w	r3, r7, #28
 800113c:	4619      	mov	r1, r3
 800113e:	483a      	ldr	r0, [pc, #232]	; (8001228 <HAL_TIM_MspPostInit+0x140>)
 8001140:	f000 fd0e 	bl	8001b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001144:	e067      	b.n	8001216 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM15)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a38      	ldr	r2, [pc, #224]	; (800122c <HAL_TIM_MspPostInit+0x144>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d11d      	bne.n	800118c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b34      	ldr	r3, [pc, #208]	; (8001224 <HAL_TIM_MspPostInit+0x13c>)
 8001152:	695b      	ldr	r3, [r3, #20]
 8001154:	4a33      	ldr	r2, [pc, #204]	; (8001224 <HAL_TIM_MspPostInit+0x13c>)
 8001156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800115a:	6153      	str	r3, [r2, #20]
 800115c:	4b31      	ldr	r3, [pc, #196]	; (8001224 <HAL_TIM_MspPostInit+0x13c>)
 800115e:	695b      	ldr	r3, [r3, #20]
 8001160:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001168:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800116c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	2302      	movs	r3, #2
 8001170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 800117a:	2301      	movs	r3, #1
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 031c 	add.w	r3, r7, #28
 8001182:	4619      	mov	r1, r3
 8001184:	482a      	ldr	r0, [pc, #168]	; (8001230 <HAL_TIM_MspPostInit+0x148>)
 8001186:	f000 fceb 	bl	8001b60 <HAL_GPIO_Init>
}
 800118a:	e044      	b.n	8001216 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM16)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a28      	ldr	r2, [pc, #160]	; (8001234 <HAL_TIM_MspPostInit+0x14c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d11d      	bne.n	80011d2 <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001196:	4b23      	ldr	r3, [pc, #140]	; (8001224 <HAL_TIM_MspPostInit+0x13c>)
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	4a22      	ldr	r2, [pc, #136]	; (8001224 <HAL_TIM_MspPostInit+0x13c>)
 800119c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011a0:	6153      	str	r3, [r2, #20]
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_TIM_MspPostInit+0x13c>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80011c0:	2301      	movs	r3, #1
 80011c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	4819      	ldr	r0, [pc, #100]	; (8001230 <HAL_TIM_MspPostInit+0x148>)
 80011cc:	f000 fcc8 	bl	8001b60 <HAL_GPIO_Init>
}
 80011d0:	e021      	b.n	8001216 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM17)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a18      	ldr	r2, [pc, #96]	; (8001238 <HAL_TIM_MspPostInit+0x150>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d11c      	bne.n	8001216 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <HAL_TIM_MspPostInit+0x13c>)
 80011de:	695b      	ldr	r3, [r3, #20]
 80011e0:	4a10      	ldr	r2, [pc, #64]	; (8001224 <HAL_TIM_MspPostInit+0x13c>)
 80011e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e6:	6153      	str	r3, [r2, #20]
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_TIM_MspPostInit+0x13c>)
 80011ea:	695b      	ldr	r3, [r3, #20]
 80011ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001206:	2301      	movs	r3, #1
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 031c 	add.w	r3, r7, #28
 800120e:	4619      	mov	r1, r3
 8001210:	4807      	ldr	r0, [pc, #28]	; (8001230 <HAL_TIM_MspPostInit+0x148>)
 8001212:	f000 fca5 	bl	8001b60 <HAL_GPIO_Init>
}
 8001216:	bf00      	nop
 8001218:	3730      	adds	r7, #48	; 0x30
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40013400 	.word	0x40013400
 8001224:	40021000 	.word	0x40021000
 8001228:	48000800 	.word	0x48000800
 800122c:	40014000 	.word	0x40014000
 8001230:	48000400 	.word	0x48000400
 8001234:	40014400 	.word	0x40014400
 8001238:	40014800 	.word	0x40014800

0800123c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08c      	sub	sp, #48	; 0x30
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a67      	ldr	r2, [pc, #412]	; (80013f8 <HAL_UART_MspInit+0x1bc>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d175      	bne.n	800134a <HAL_UART_MspInit+0x10e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800125e:	4b67      	ldr	r3, [pc, #412]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	4a66      	ldr	r2, [pc, #408]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 8001264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001268:	61d3      	str	r3, [r2, #28]
 800126a:	4b64      	ldr	r3, [pc, #400]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001272:	61bb      	str	r3, [r7, #24]
 8001274:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	4b61      	ldr	r3, [pc, #388]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	4a60      	ldr	r2, [pc, #384]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 800127c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001280:	6153      	str	r3, [r2, #20]
 8001282:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = JY62_TX_Pin|JY62_RX_Pin;
 800128e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129c:	2303      	movs	r3, #3
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80012a0:	2305      	movs	r3, #5
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	4855      	ldr	r0, [pc, #340]	; (8001400 <HAL_UART_MspInit+0x1c4>)
 80012ac:	f000 fc58 	bl	8001b60 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA2_Channel3;
 80012b0:	4b54      	ldr	r3, [pc, #336]	; (8001404 <HAL_UART_MspInit+0x1c8>)
 80012b2:	4a55      	ldr	r2, [pc, #340]	; (8001408 <HAL_UART_MspInit+0x1cc>)
 80012b4:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b6:	4b53      	ldr	r3, [pc, #332]	; (8001404 <HAL_UART_MspInit+0x1c8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012bc:	4b51      	ldr	r3, [pc, #324]	; (8001404 <HAL_UART_MspInit+0x1c8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012c2:	4b50      	ldr	r3, [pc, #320]	; (8001404 <HAL_UART_MspInit+0x1c8>)
 80012c4:	2280      	movs	r2, #128	; 0x80
 80012c6:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c8:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <HAL_UART_MspInit+0x1c8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012ce:	4b4d      	ldr	r3, [pc, #308]	; (8001404 <HAL_UART_MspInit+0x1c8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80012d4:	4b4b      	ldr	r3, [pc, #300]	; (8001404 <HAL_UART_MspInit+0x1c8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012da:	4b4a      	ldr	r3, [pc, #296]	; (8001404 <HAL_UART_MspInit+0x1c8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80012e0:	4848      	ldr	r0, [pc, #288]	; (8001404 <HAL_UART_MspInit+0x1c8>)
 80012e2:	f000 faa0 	bl	8001826 <HAL_DMA_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 80012ec:	f7ff fd42 	bl	8000d74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a44      	ldr	r2, [pc, #272]	; (8001404 <HAL_UART_MspInit+0x1c8>)
 80012f4:	671a      	str	r2, [r3, #112]	; 0x70
 80012f6:	4a43      	ldr	r2, [pc, #268]	; (8001404 <HAL_UART_MspInit+0x1c8>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6253      	str	r3, [r2, #36]	; 0x24

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA2_Channel5;
 80012fc:	4b43      	ldr	r3, [pc, #268]	; (800140c <HAL_UART_MspInit+0x1d0>)
 80012fe:	4a44      	ldr	r2, [pc, #272]	; (8001410 <HAL_UART_MspInit+0x1d4>)
 8001300:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001302:	4b42      	ldr	r3, [pc, #264]	; (800140c <HAL_UART_MspInit+0x1d0>)
 8001304:	2210      	movs	r2, #16
 8001306:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001308:	4b40      	ldr	r3, [pc, #256]	; (800140c <HAL_UART_MspInit+0x1d0>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800130e:	4b3f      	ldr	r3, [pc, #252]	; (800140c <HAL_UART_MspInit+0x1d0>)
 8001310:	2280      	movs	r2, #128	; 0x80
 8001312:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001314:	4b3d      	ldr	r3, [pc, #244]	; (800140c <HAL_UART_MspInit+0x1d0>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800131a:	4b3c      	ldr	r3, [pc, #240]	; (800140c <HAL_UART_MspInit+0x1d0>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8001320:	4b3a      	ldr	r3, [pc, #232]	; (800140c <HAL_UART_MspInit+0x1d0>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001326:	4b39      	ldr	r3, [pc, #228]	; (800140c <HAL_UART_MspInit+0x1d0>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800132c:	4837      	ldr	r0, [pc, #220]	; (800140c <HAL_UART_MspInit+0x1d0>)
 800132e:	f000 fa7a 	bl	8001826 <HAL_DMA_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001338:	f7ff fd1c 	bl	8000d74 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a33      	ldr	r2, [pc, #204]	; (800140c <HAL_UART_MspInit+0x1d0>)
 8001340:	66da      	str	r2, [r3, #108]	; 0x6c
 8001342:	4a32      	ldr	r2, [pc, #200]	; (800140c <HAL_UART_MspInit+0x1d0>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8001348:	e051      	b.n	80013ee <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==UART5)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a31      	ldr	r2, [pc, #196]	; (8001414 <HAL_UART_MspInit+0x1d8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d14c      	bne.n	80013ee <HAL_UART_MspInit+0x1b2>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001354:	4b29      	ldr	r3, [pc, #164]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 8001356:	69db      	ldr	r3, [r3, #28]
 8001358:	4a28      	ldr	r2, [pc, #160]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 800135a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800135e:	61d3      	str	r3, [r2, #28]
 8001360:	4b26      	ldr	r3, [pc, #152]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	4a22      	ldr	r2, [pc, #136]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 8001372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001376:	6153      	str	r3, [r2, #20]
 8001378:	4b20      	ldr	r3, [pc, #128]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 800138a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800138e:	6153      	str	r3, [r2, #20]
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_UART_MspInit+0x1c0>)
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = XB_TX_Pin;
 800139c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80013ae:	2305      	movs	r3, #5
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(XB_TX_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4619      	mov	r1, r3
 80013b8:	4811      	ldr	r0, [pc, #68]	; (8001400 <HAL_UART_MspInit+0x1c4>)
 80013ba:	f000 fbd1 	bl	8001b60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = XB_RX_Pin;
 80013be:	2304      	movs	r3, #4
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ca:	2303      	movs	r3, #3
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80013ce:	2305      	movs	r3, #5
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(XB_RX_GPIO_Port, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	480f      	ldr	r0, [pc, #60]	; (8001418 <HAL_UART_MspInit+0x1dc>)
 80013da:	f000 fbc1 	bl	8001b60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2100      	movs	r1, #0
 80013e2:	2035      	movs	r0, #53	; 0x35
 80013e4:	f000 f9e9 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80013e8:	2035      	movs	r0, #53	; 0x35
 80013ea:	f000 fa02 	bl	80017f2 <HAL_NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	3730      	adds	r7, #48	; 0x30
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40004c00 	.word	0x40004c00
 80013fc:	40021000 	.word	0x40021000
 8001400:	48000800 	.word	0x48000800
 8001404:	20000428 	.word	0x20000428
 8001408:	40020430 	.word	0x40020430
 800140c:	2000046c 	.word	0x2000046c
 8001410:	40020458 	.word	0x40020458
 8001414:	40005000 	.word	0x40005000
 8001418:	48000c00 	.word	0x48000c00

0800141c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001420:	e7fe      	b.n	8001420 <NMI_Handler+0x4>

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001468:	f000 f8ac 	bl	80015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001474:	4802      	ldr	r0, [pc, #8]	; (8001480 <UART5_IRQHandler+0x10>)
 8001476:	f003 fc49 	bl	8004d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	200003a4 	.word	0x200003a4

08001484 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles Timer 6 interrupt and DAC underrun interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001488:	4802      	ldr	r0, [pc, #8]	; (8001494 <TIM6_DAC_IRQHandler+0x10>)
 800148a:	f002 fba5 	bl	8003bd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	200001a4 	.word	0x200001a4

08001498 <DMA2_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA2 channel3 global interrupt.
  */
void DMA2_Channel3_IRQHandler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel3_IRQn 0 */

  /* USER CODE END DMA2_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800149c:	4802      	ldr	r0, [pc, #8]	; (80014a8 <DMA2_Channel3_IRQHandler+0x10>)
 800149e:	f000 fa80 	bl	80019a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel3_IRQn 1 */

  /* USER CODE END DMA2_Channel3_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000428 	.word	0x20000428

080014ac <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 80014b0:	4802      	ldr	r0, [pc, #8]	; (80014bc <DMA2_Channel5_IRQHandler+0x10>)
 80014b2:	f000 fa76 	bl	80019a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	2000046c 	.word	0x2000046c

080014c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <SystemInit+0x20>)
 80014c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <SystemInit+0x20>)
 80014cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800151c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <LoopForever+0x6>)
  ldr r1, =_edata
 80014ea:	490e      	ldr	r1, [pc, #56]	; (8001524 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014ec:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <LoopForever+0xe>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001500:	4c0b      	ldr	r4, [pc, #44]	; (8001530 <LoopForever+0x16>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800150e:	f7ff ffd7 	bl	80014c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001512:	f004 fb2b 	bl	8005b6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001516:	f7fe fe57 	bl	80001c8 <main>

0800151a <LoopForever>:

LoopForever:
    b LoopForever
 800151a:	e7fe      	b.n	800151a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800151c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001528:	08005c1c 	.word	0x08005c1c
  ldr r2, =_sbss
 800152c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001530:	200004b4 	.word	0x200004b4

08001534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC1_2_IRQHandler>
	...

08001538 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800153c:	4b08      	ldr	r3, [pc, #32]	; (8001560 <HAL_Init+0x28>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_Init+0x28>)
 8001542:	f043 0310 	orr.w	r3, r3, #16
 8001546:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001548:	2003      	movs	r0, #3
 800154a:	f000 f92b 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154e:	200f      	movs	r0, #15
 8001550:	f000 f808 	bl	8001564 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001554:	f7ff fc14 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40022000 	.word	0x40022000

08001564 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_InitTick+0x54>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b12      	ldr	r3, [pc, #72]	; (80015bc <HAL_InitTick+0x58>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800157a:	fbb3 f3f1 	udiv	r3, r3, r1
 800157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001582:	4618      	mov	r0, r3
 8001584:	f000 f943 	bl	800180e <HAL_SYSTICK_Config>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e00e      	b.n	80015b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b0f      	cmp	r3, #15
 8001596:	d80a      	bhi.n	80015ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001598:	2200      	movs	r2, #0
 800159a:	6879      	ldr	r1, [r7, #4]
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f000 f90b 	bl	80017ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <HAL_InitTick+0x5c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	e000      	b.n	80015b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000000 	.word	0x20000000
 80015bc:	20000008 	.word	0x20000008
 80015c0:	20000004 	.word	0x20000004

080015c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_IncTick+0x20>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_IncTick+0x24>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4413      	add	r3, r2
 80015d4:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <HAL_IncTick+0x24>)
 80015d6:	6013      	str	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008
 80015e8:	200004b0 	.word	0x200004b0

080015ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200004b0 	.word	0x200004b0

08001604 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001620:	4013      	ands	r3, r2
 8001622:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800162c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001636:	4a04      	ldr	r2, [pc, #16]	; (8001648 <__NVIC_SetPriorityGrouping+0x44>)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	60d3      	str	r3, [r2, #12]
}
 800163c:	bf00      	nop
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001650:	4b04      	ldr	r3, [pc, #16]	; (8001664 <__NVIC_GetPriorityGrouping+0x18>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	f003 0307 	and.w	r3, r3, #7
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001676:	2b00      	cmp	r3, #0
 8001678:	db0b      	blt.n	8001692 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	f003 021f 	and.w	r2, r3, #31
 8001680:	4907      	ldr	r1, [pc, #28]	; (80016a0 <__NVIC_EnableIRQ+0x38>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	095b      	lsrs	r3, r3, #5
 8001688:	2001      	movs	r0, #1
 800168a:	fa00 f202 	lsl.w	r2, r0, r2
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	e000e100 	.word	0xe000e100

080016a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	6039      	str	r1, [r7, #0]
 80016ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	db0a      	blt.n	80016ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	490c      	ldr	r1, [pc, #48]	; (80016f0 <__NVIC_SetPriority+0x4c>)
 80016be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c2:	0112      	lsls	r2, r2, #4
 80016c4:	b2d2      	uxtb	r2, r2
 80016c6:	440b      	add	r3, r1
 80016c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016cc:	e00a      	b.n	80016e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	4908      	ldr	r1, [pc, #32]	; (80016f4 <__NVIC_SetPriority+0x50>)
 80016d4:	79fb      	ldrb	r3, [r7, #7]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	3b04      	subs	r3, #4
 80016dc:	0112      	lsls	r2, r2, #4
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	440b      	add	r3, r1
 80016e2:	761a      	strb	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	e000e100 	.word	0xe000e100
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b089      	sub	sp, #36	; 0x24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	f1c3 0307 	rsb	r3, r3, #7
 8001712:	2b04      	cmp	r3, #4
 8001714:	bf28      	it	cs
 8001716:	2304      	movcs	r3, #4
 8001718:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3304      	adds	r3, #4
 800171e:	2b06      	cmp	r3, #6
 8001720:	d902      	bls.n	8001728 <NVIC_EncodePriority+0x30>
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	3b03      	subs	r3, #3
 8001726:	e000      	b.n	800172a <NVIC_EncodePriority+0x32>
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800172c:	f04f 32ff 	mov.w	r2, #4294967295
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	401a      	ands	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001740:	f04f 31ff 	mov.w	r1, #4294967295
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	fa01 f303 	lsl.w	r3, r1, r3
 800174a:	43d9      	mvns	r1, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001750:	4313      	orrs	r3, r2
         );
}
 8001752:	4618      	mov	r0, r3
 8001754:	3724      	adds	r7, #36	; 0x24
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f7ff ff8e 	bl	80016a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff29 	bl	8001604 <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff3e 	bl	800164c <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff8e 	bl	80016f8 <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5d 	bl	80016a4 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff31 	bl	8001668 <__NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffa2 	bl	8001760 <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001826:	b580      	push	{r7, lr}
 8001828:	b084      	sub	sp, #16
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e037      	b.n	80018ac <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001852:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001856:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001860:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800186c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001878:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4313      	orrs	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f92a 	bl	8001ae8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2200      	movs	r2, #0
 80018a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80018aa:	2300      	movs	r3, #0
}  
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d008      	beq.n	80018d8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2204      	movs	r2, #4
 80018ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e020      	b.n	800191a <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 020e 	bic.w	r2, r2, #14
 80018e6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0201 	bic.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001900:	2101      	movs	r1, #1
 8001902:	fa01 f202 	lsl.w	r2, r1, r2
 8001906:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001938:	2b02      	cmp	r3, #2
 800193a:	d005      	beq.n	8001948 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2204      	movs	r2, #4
 8001940:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
 8001946:	e027      	b.n	8001998 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f022 020e 	bic.w	r2, r2, #14
 8001956:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f202 	lsl.w	r2, r1, r2
 8001976:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	4798      	blx	r3
    } 
  }
  return status;
 8001998:	7bfb      	ldrb	r3, [r7, #15]
}
 800199a:	4618      	mov	r0, r3
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b084      	sub	sp, #16
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	2204      	movs	r2, #4
 80019c0:	409a      	lsls	r2, r3
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d024      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x72>
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f003 0304 	and.w	r3, r3, #4
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01f      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0320 	and.w	r3, r3, #32
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d107      	bne.n	80019f2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0204 	bic.w	r2, r2, #4
 80019f0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fa:	2104      	movs	r1, #4
 80019fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001a00:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d06a      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001a12:	e065      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	2202      	movs	r2, #2
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d02c      	beq.n	8001a7e <HAL_DMA_IRQHandler+0xdc>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d027      	beq.n	8001a7e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10b      	bne.n	8001a54 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 020a 	bic.w	r2, r2, #10
 8001a4a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5c:	2102      	movs	r1, #2
 8001a5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a62:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d035      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001a7c:	e030      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	2208      	movs	r2, #8
 8001a84:	409a      	lsls	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d028      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x13e>
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f003 0308 	and.w	r3, r3, #8
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d023      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 020e 	bic.w	r2, r2, #14
 8001aa6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d004      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	4798      	blx	r3
    }
  }
}  
 8001ade:	e7ff      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x13e>
 8001ae0:	bf00      	nop
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <DMA_CalcBaseAndBitshift+0x60>)
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d80f      	bhi.n	8001b1c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <DMA_CalcBaseAndBitshift+0x64>)
 8001b04:	4413      	add	r3, r2
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <DMA_CalcBaseAndBitshift+0x68>)
 8001b08:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0c:	091b      	lsrs	r3, r3, #4
 8001b0e:	009a      	lsls	r2, r3, #2
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a0f      	ldr	r2, [pc, #60]	; (8001b54 <DMA_CalcBaseAndBitshift+0x6c>)
 8001b18:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001b1a:	e00e      	b.n	8001b3a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <DMA_CalcBaseAndBitshift+0x70>)
 8001b24:	4413      	add	r3, r2
 8001b26:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <DMA_CalcBaseAndBitshift+0x68>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	091b      	lsrs	r3, r3, #4
 8001b2e:	009a      	lsls	r2, r3, #2
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <DMA_CalcBaseAndBitshift+0x74>)
 8001b38:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	40020407 	.word	0x40020407
 8001b4c:	bffdfff8 	.word	0xbffdfff8
 8001b50:	cccccccd 	.word	0xcccccccd
 8001b54:	40020000 	.word	0x40020000
 8001b58:	bffdfbf8 	.word	0xbffdfbf8
 8001b5c:	40020400 	.word	0x40020400

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6e:	e154      	b.n	8001e1a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8146 	beq.w	8001e14 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d005      	beq.n	8001ba0 <HAL_GPIO_Init+0x40>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d130      	bne.n	8001c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f003 0201 	and.w	r2, r3, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d017      	beq.n	8001c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d123      	bne.n	8001c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	220f      	movs	r2, #15
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	6939      	ldr	r1, [r7, #16]
 8001c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0203 	and.w	r2, r3, #3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 80a0 	beq.w	8001e14 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd4:	4b58      	ldr	r3, [pc, #352]	; (8001e38 <HAL_GPIO_Init+0x2d8>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a57      	ldr	r2, [pc, #348]	; (8001e38 <HAL_GPIO_Init+0x2d8>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b55      	ldr	r3, [pc, #340]	; (8001e38 <HAL_GPIO_Init+0x2d8>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cec:	4a53      	ldr	r2, [pc, #332]	; (8001e3c <HAL_GPIO_Init+0x2dc>)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d16:	d019      	beq.n	8001d4c <HAL_GPIO_Init+0x1ec>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a49      	ldr	r2, [pc, #292]	; (8001e40 <HAL_GPIO_Init+0x2e0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d013      	beq.n	8001d48 <HAL_GPIO_Init+0x1e8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a48      	ldr	r2, [pc, #288]	; (8001e44 <HAL_GPIO_Init+0x2e4>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d00d      	beq.n	8001d44 <HAL_GPIO_Init+0x1e4>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a47      	ldr	r2, [pc, #284]	; (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d007      	beq.n	8001d40 <HAL_GPIO_Init+0x1e0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a46      	ldr	r2, [pc, #280]	; (8001e4c <HAL_GPIO_Init+0x2ec>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d101      	bne.n	8001d3c <HAL_GPIO_Init+0x1dc>
 8001d38:	2304      	movs	r3, #4
 8001d3a:	e008      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d3c:	2305      	movs	r3, #5
 8001d3e:	e006      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d40:	2303      	movs	r3, #3
 8001d42:	e004      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e002      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <HAL_GPIO_Init+0x1ee>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	f002 0203 	and.w	r2, r2, #3
 8001d54:	0092      	lsls	r2, r2, #2
 8001d56:	4093      	lsls	r3, r2
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d5e:	4937      	ldr	r1, [pc, #220]	; (8001e3c <HAL_GPIO_Init+0x2dc>)
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	089b      	lsrs	r3, r3, #2
 8001d64:	3302      	adds	r3, #2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6c:	4b38      	ldr	r3, [pc, #224]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d90:	4a2f      	ldr	r2, [pc, #188]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d96:	4b2e      	ldr	r3, [pc, #184]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	4013      	ands	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dba:	4a25      	ldr	r2, [pc, #148]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc0:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001de4:	4a1a      	ldr	r2, [pc, #104]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dea:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e0e:	4a10      	ldr	r2, [pc, #64]	; (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	3301      	adds	r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	fa22 f303 	lsr.w	r3, r2, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f47f aea3 	bne.w	8001b70 <HAL_GPIO_Init+0x10>
  }
}
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	371c      	adds	r7, #28
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010000 	.word	0x40010000
 8001e40:	48000400 	.word	0x48000400
 8001e44:	48000800 	.word	0x48000800
 8001e48:	48000c00 	.word	0x48000c00
 8001e4c:	48001000 	.word	0x48001000
 8001e50:	40010400 	.word	0x40010400

08001e54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]
 8001e60:	4613      	mov	r3, r2
 8001e62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e64:	787b      	ldrb	r3, [r7, #1]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e70:	e002      	b.n	8001e78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e081      	b.n	8001f9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d106      	bne.n	8001eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7fe ff8c 	bl	8000dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2224      	movs	r2, #36	; 0x24
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0201 	bic.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ed4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689a      	ldr	r2, [r3, #8]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ee4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	e006      	b.n	8001f0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689a      	ldr	r2, [r3, #8]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d104      	bne.n	8001f1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691a      	ldr	r2, [r3, #16]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69d9      	ldr	r1, [r3, #28]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a1a      	ldr	r2, [r3, #32]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0201 	orr.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2220      	movs	r2, #32
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
 8001faa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b20      	cmp	r3, #32
 8001fb6:	d138      	bne.n	800202a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d101      	bne.n	8001fc6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e032      	b.n	800202c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2224      	movs	r2, #36	; 0x24
 8001fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0201 	bic.w	r2, r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ff4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6819      	ldr	r1, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0201 	orr.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800202a:	2302      	movs	r3, #2
  }
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002038:	b480      	push	{r7}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b20      	cmp	r3, #32
 800204c:	d139      	bne.n	80020c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002054:	2b01      	cmp	r3, #1
 8002056:	d101      	bne.n	800205c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002058:	2302      	movs	r3, #2
 800205a:	e033      	b.n	80020c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2224      	movs	r2, #36	; 0x24
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800208a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	021b      	lsls	r3, r3, #8
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0201 	orr.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2220      	movs	r2, #32
 80020b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020be:	2300      	movs	r3, #0
 80020c0:	e000      	b.n	80020c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020c2:	2302      	movs	r3, #2
  }
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	f001 b823 	b.w	800313c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 817d 	beq.w	8002406 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800210c:	4bbc      	ldr	r3, [pc, #752]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b04      	cmp	r3, #4
 8002116:	d00c      	beq.n	8002132 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002118:	4bb9      	ldr	r3, [pc, #740]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d15c      	bne.n	80021de <HAL_RCC_OscConfig+0x10e>
 8002124:	4bb6      	ldr	r3, [pc, #728]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800212c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002130:	d155      	bne.n	80021de <HAL_RCC_OscConfig+0x10e>
 8002132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002136:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002146:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_RCC_OscConfig+0x94>
 800215e:	4ba8      	ldr	r3, [pc, #672]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	e015      	b.n	8002190 <HAL_RCC_OscConfig+0xc0>
 8002164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002168:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002170:	fa93 f3a3 	rbit	r3, r3
 8002174:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800217c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002180:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800218c:	4b9c      	ldr	r3, [pc, #624]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 800218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002190:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002194:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002198:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800219c:	fa92 f2a2 	rbit	r2, r2
 80021a0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80021a4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80021a8:	fab2 f282 	clz	r2, r2
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	f042 0220 	orr.w	r2, r2, #32
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	f002 021f 	and.w	r2, r2, #31
 80021b8:	2101      	movs	r1, #1
 80021ba:	fa01 f202 	lsl.w	r2, r1, r2
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 811f 	beq.w	8002404 <HAL_RCC_OscConfig+0x334>
 80021c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	f040 8116 	bne.w	8002404 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	f000 bfaf 	b.w	800313c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x12e>
 80021f0:	4b83      	ldr	r3, [pc, #524]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a82      	ldr	r2, [pc, #520]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 80021f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	e036      	b.n	800226c <HAL_RCC_OscConfig+0x19c>
 80021fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10c      	bne.n	8002228 <HAL_RCC_OscConfig+0x158>
 800220e:	4b7c      	ldr	r3, [pc, #496]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a7b      	ldr	r2, [pc, #492]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 8002214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	4b79      	ldr	r3, [pc, #484]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a78      	ldr	r2, [pc, #480]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 8002220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	e021      	b.n	800226c <HAL_RCC_OscConfig+0x19c>
 8002228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800222c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x184>
 800223a:	4b71      	ldr	r3, [pc, #452]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a70      	ldr	r2, [pc, #448]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b6e      	ldr	r3, [pc, #440]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a6d      	ldr	r2, [pc, #436]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0x19c>
 8002254:	4b6a      	ldr	r3, [pc, #424]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a69      	ldr	r2, [pc, #420]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 800225a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b67      	ldr	r3, [pc, #412]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a66      	ldr	r2, [pc, #408]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800226c:	4b64      	ldr	r3, [pc, #400]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	f023 020f 	bic.w	r2, r3, #15
 8002274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002278:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	495f      	ldr	r1, [pc, #380]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 8002282:	4313      	orrs	r3, r2
 8002284:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800228a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d059      	beq.n	800234a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7ff f9a9 	bl	80015ec <HAL_GetTick>
 800229a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e00a      	b.n	80022b6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff f9a4 	bl	80015ec <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	; 0x64
 80022ae:	d902      	bls.n	80022b6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	f000 bf43 	b.w	800313c <HAL_RCC_OscConfig+0x106c>
 80022b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022be:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80022c2:	fa93 f3a3 	rbit	r3, r3
 80022c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80022ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d102      	bne.n	80022e8 <HAL_RCC_OscConfig+0x218>
 80022e2:	4b47      	ldr	r3, [pc, #284]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	e015      	b.n	8002314 <HAL_RCC_OscConfig+0x244>
 80022e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022ec:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80022fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002300:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002304:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002308:	fa93 f3a3 	rbit	r3, r3
 800230c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002310:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002318:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800231c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002320:	fa92 f2a2 	rbit	r2, r2
 8002324:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002328:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800232c:	fab2 f282 	clz	r2, r2
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	f042 0220 	orr.w	r2, r2, #32
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	f002 021f 	and.w	r2, r2, #31
 800233c:	2101      	movs	r1, #1
 800233e:	fa01 f202 	lsl.w	r2, r1, r2
 8002342:	4013      	ands	r3, r2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ab      	beq.n	80022a0 <HAL_RCC_OscConfig+0x1d0>
 8002348:	e05d      	b.n	8002406 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7ff f94f 	bl	80015ec <HAL_GetTick>
 800234e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002352:	e00a      	b.n	800236a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002354:	f7ff f94a 	bl	80015ec <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b64      	cmp	r3, #100	; 0x64
 8002362:	d902      	bls.n	800236a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	f000 bee9 	b.w	800313c <HAL_RCC_OscConfig+0x106c>
 800236a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800236e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800237e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d102      	bne.n	800239c <HAL_RCC_OscConfig+0x2cc>
 8002396:	4b1a      	ldr	r3, [pc, #104]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	e015      	b.n	80023c8 <HAL_RCC_OscConfig+0x2f8>
 800239c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023a0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80023a8:	fa93 f3a3 	rbit	r3, r3
 80023ac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80023b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80023b8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80023c4:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_RCC_OscConfig+0x330>)
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023cc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80023d0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80023d4:	fa92 f2a2 	rbit	r2, r2
 80023d8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80023dc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80023e0:	fab2 f282 	clz	r2, r2
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	f042 0220 	orr.w	r2, r2, #32
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	f002 021f 	and.w	r2, r2, #31
 80023f0:	2101      	movs	r1, #1
 80023f2:	fa01 f202 	lsl.w	r2, r1, r2
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1ab      	bne.n	8002354 <HAL_RCC_OscConfig+0x284>
 80023fc:	e003      	b.n	8002406 <HAL_RCC_OscConfig+0x336>
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800240a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 817d 	beq.w	8002716 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800241c:	4ba6      	ldr	r3, [pc, #664]	; (80026b8 <HAL_RCC_OscConfig+0x5e8>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00b      	beq.n	8002440 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002428:	4ba3      	ldr	r3, [pc, #652]	; (80026b8 <HAL_RCC_OscConfig+0x5e8>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d172      	bne.n	800251a <HAL_RCC_OscConfig+0x44a>
 8002434:	4ba0      	ldr	r3, [pc, #640]	; (80026b8 <HAL_RCC_OscConfig+0x5e8>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d16c      	bne.n	800251a <HAL_RCC_OscConfig+0x44a>
 8002440:	2302      	movs	r3, #2
 8002442:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002446:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002452:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	095b      	lsrs	r3, r3, #5
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b01      	cmp	r3, #1
 8002468:	d102      	bne.n	8002470 <HAL_RCC_OscConfig+0x3a0>
 800246a:	4b93      	ldr	r3, [pc, #588]	; (80026b8 <HAL_RCC_OscConfig+0x5e8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	e013      	b.n	8002498 <HAL_RCC_OscConfig+0x3c8>
 8002470:	2302      	movs	r3, #2
 8002472:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002482:	2302      	movs	r3, #2
 8002484:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002488:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800248c:	fa93 f3a3 	rbit	r3, r3
 8002490:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002494:	4b88      	ldr	r3, [pc, #544]	; (80026b8 <HAL_RCC_OscConfig+0x5e8>)
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	2202      	movs	r2, #2
 800249a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800249e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80024a2:	fa92 f2a2 	rbit	r2, r2
 80024a6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80024aa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80024ae:	fab2 f282 	clz	r2, r2
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	f042 0220 	orr.w	r2, r2, #32
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	f002 021f 	and.w	r2, r2, #31
 80024be:	2101      	movs	r1, #1
 80024c0:	fa01 f202 	lsl.w	r2, r1, r2
 80024c4:	4013      	ands	r3, r2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCC_OscConfig+0x410>
 80024ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d002      	beq.n	80024e0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f000 be2e 	b.w	800313c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024e0:	4b75      	ldr	r3, [pc, #468]	; (80026b8 <HAL_RCC_OscConfig+0x5e8>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	21f8      	movs	r1, #248	; 0xf8
 80024f6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80024fe:	fa91 f1a1 	rbit	r1, r1
 8002502:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002506:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800250a:	fab1 f181 	clz	r1, r1
 800250e:	b2c9      	uxtb	r1, r1
 8002510:	408b      	lsls	r3, r1
 8002512:	4969      	ldr	r1, [pc, #420]	; (80026b8 <HAL_RCC_OscConfig+0x5e8>)
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002518:	e0fd      	b.n	8002716 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800251a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800251e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8088 	beq.w	800263c <HAL_RCC_OscConfig+0x56c>
 800252c:	2301      	movs	r3, #1
 800252e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800253e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002542:	fab3 f383 	clz	r3, r3
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800254c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	461a      	mov	r2, r3
 8002554:	2301      	movs	r3, #1
 8002556:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7ff f848 	bl	80015ec <HAL_GetTick>
 800255c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002562:	f7ff f843 	bl	80015ec <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d902      	bls.n	8002578 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	f000 bde2 	b.w	800313c <HAL_RCC_OscConfig+0x106c>
 8002578:	2302      	movs	r3, #2
 800257a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800258a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d102      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4d8>
 80025a2:	4b45      	ldr	r3, [pc, #276]	; (80026b8 <HAL_RCC_OscConfig+0x5e8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	e013      	b.n	80025d0 <HAL_RCC_OscConfig+0x500>
 80025a8:	2302      	movs	r3, #2
 80025aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80025b2:	fa93 f3a3 	rbit	r3, r3
 80025b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80025ba:	2302      	movs	r3, #2
 80025bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80025c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80025cc:	4b3a      	ldr	r3, [pc, #232]	; (80026b8 <HAL_RCC_OscConfig+0x5e8>)
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	2202      	movs	r2, #2
 80025d2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80025d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80025da:	fa92 f2a2 	rbit	r2, r2
 80025de:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80025e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80025e6:	fab2 f282 	clz	r2, r2
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	f042 0220 	orr.w	r2, r2, #32
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	f002 021f 	and.w	r2, r2, #31
 80025f6:	2101      	movs	r1, #1
 80025f8:	fa01 f202 	lsl.w	r2, r1, r2
 80025fc:	4013      	ands	r3, r2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0af      	beq.n	8002562 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002602:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <HAL_RCC_OscConfig+0x5e8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800260a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800260e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	21f8      	movs	r1, #248	; 0xf8
 8002618:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002620:	fa91 f1a1 	rbit	r1, r1
 8002624:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002628:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800262c:	fab1 f181 	clz	r1, r1
 8002630:	b2c9      	uxtb	r1, r1
 8002632:	408b      	lsls	r3, r1
 8002634:	4920      	ldr	r1, [pc, #128]	; (80026b8 <HAL_RCC_OscConfig+0x5e8>)
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]
 800263a:	e06c      	b.n	8002716 <HAL_RCC_OscConfig+0x646>
 800263c:	2301      	movs	r3, #1
 800263e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002642:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800264e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800265c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	461a      	mov	r2, r3
 8002664:	2300      	movs	r3, #0
 8002666:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002668:	f7fe ffc0 	bl	80015ec <HAL_GetTick>
 800266c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002672:	f7fe ffbb 	bl	80015ec <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d902      	bls.n	8002688 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	f000 bd5a 	b.w	800313c <HAL_RCC_OscConfig+0x106c>
 8002688:	2302      	movs	r3, #2
 800268a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800269a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269e:	fab3 f383 	clz	r3, r3
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d104      	bne.n	80026bc <HAL_RCC_OscConfig+0x5ec>
 80026b2:	4b01      	ldr	r3, [pc, #4]	; (80026b8 <HAL_RCC_OscConfig+0x5e8>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	e015      	b.n	80026e4 <HAL_RCC_OscConfig+0x614>
 80026b8:	40021000 	.word	0x40021000
 80026bc:	2302      	movs	r3, #2
 80026be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80026c6:	fa93 f3a3 	rbit	r3, r3
 80026ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80026ce:	2302      	movs	r3, #2
 80026d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80026d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80026e0:	4bc8      	ldr	r3, [pc, #800]	; (8002a04 <HAL_RCC_OscConfig+0x934>)
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	2202      	movs	r2, #2
 80026e6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80026ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80026ee:	fa92 f2a2 	rbit	r2, r2
 80026f2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80026f6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80026fa:	fab2 f282 	clz	r2, r2
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	f042 0220 	orr.w	r2, r2, #32
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	f002 021f 	and.w	r2, r2, #31
 800270a:	2101      	movs	r1, #1
 800270c:	fa01 f202 	lsl.w	r2, r1, r2
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ad      	bne.n	8002672 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 8110 	beq.w	800294c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800272c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002730:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d079      	beq.n	8002830 <HAL_RCC_OscConfig+0x760>
 800273c:	2301      	movs	r3, #1
 800273e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002746:	fa93 f3a3 	rbit	r3, r3
 800274a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800274e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002752:	fab3 f383 	clz	r3, r3
 8002756:	b2db      	uxtb	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	4bab      	ldr	r3, [pc, #684]	; (8002a08 <HAL_RCC_OscConfig+0x938>)
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	461a      	mov	r2, r3
 8002762:	2301      	movs	r3, #1
 8002764:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002766:	f7fe ff41 	bl	80015ec <HAL_GetTick>
 800276a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276e:	e00a      	b.n	8002786 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002770:	f7fe ff3c 	bl	80015ec <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d902      	bls.n	8002786 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	f000 bcdb 	b.w	800313c <HAL_RCC_OscConfig+0x106c>
 8002786:	2302      	movs	r3, #2
 8002788:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002790:	fa93 f3a3 	rbit	r3, r3
 8002794:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027a0:	2202      	movs	r2, #2
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	fa93 f2a3 	rbit	r2, r3
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027c4:	2202      	movs	r2, #2
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	fa93 f2a3 	rbit	r2, r3
 80027d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e0:	4b88      	ldr	r3, [pc, #544]	; (8002a04 <HAL_RCC_OscConfig+0x934>)
 80027e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027ec:	2102      	movs	r1, #2
 80027ee:	6019      	str	r1, [r3, #0]
 80027f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	fa93 f1a3 	rbit	r1, r3
 80027fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002802:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002806:	6019      	str	r1, [r3, #0]
  return result;
 8002808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	2101      	movs	r1, #1
 8002824:	fa01 f303 	lsl.w	r3, r1, r3
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0a0      	beq.n	8002770 <HAL_RCC_OscConfig+0x6a0>
 800282e:	e08d      	b.n	800294c <HAL_RCC_OscConfig+0x87c>
 8002830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002834:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002838:	2201      	movs	r2, #1
 800283a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002840:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fa93 f2a3 	rbit	r2, r3
 800284a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002852:	601a      	str	r2, [r3, #0]
  return result;
 8002854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002858:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800285c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	461a      	mov	r2, r3
 8002866:	4b68      	ldr	r3, [pc, #416]	; (8002a08 <HAL_RCC_OscConfig+0x938>)
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	461a      	mov	r2, r3
 800286e:	2300      	movs	r3, #0
 8002870:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002872:	f7fe febb 	bl	80015ec <HAL_GetTick>
 8002876:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800287a:	e00a      	b.n	8002892 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800287c:	f7fe feb6 	bl	80015ec <HAL_GetTick>
 8002880:	4602      	mov	r2, r0
 8002882:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d902      	bls.n	8002892 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	f000 bc55 	b.w	800313c <HAL_RCC_OscConfig+0x106c>
 8002892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002896:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800289a:	2202      	movs	r2, #2
 800289c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	fa93 f2a3 	rbit	r2, r3
 80028ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028be:	2202      	movs	r2, #2
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	fa93 f2a3 	rbit	r2, r3
 80028d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80028d8:	601a      	str	r2, [r3, #0]
 80028da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80028e2:	2202      	movs	r2, #2
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	fa93 f2a3 	rbit	r2, r3
 80028f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80028fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028fe:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_RCC_OscConfig+0x934>)
 8002900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002906:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800290a:	2102      	movs	r1, #2
 800290c:	6019      	str	r1, [r3, #0]
 800290e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002912:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	fa93 f1a3 	rbit	r1, r3
 800291c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002920:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002924:	6019      	str	r1, [r3, #0]
  return result;
 8002926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800292a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	fab3 f383 	clz	r3, r3
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	2101      	movs	r1, #1
 8002942:	fa01 f303 	lsl.w	r3, r1, r3
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d197      	bne.n	800287c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800294c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002950:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0304 	and.w	r3, r3, #4
 800295c:	2b00      	cmp	r3, #0
 800295e:	f000 81a1 	beq.w	8002ca4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002968:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <HAL_RCC_OscConfig+0x934>)
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d116      	bne.n	80029a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002974:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <HAL_RCC_OscConfig+0x934>)
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	4a22      	ldr	r2, [pc, #136]	; (8002a04 <HAL_RCC_OscConfig+0x934>)
 800297a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297e:	61d3      	str	r3, [r2, #28]
 8002980:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_RCC_OscConfig+0x934>)
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800298c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002996:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800299a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800299c:	2301      	movs	r3, #1
 800299e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <HAL_RCC_OscConfig+0x93c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d11a      	bne.n	80029e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ae:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <HAL_RCC_OscConfig+0x93c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a16      	ldr	r2, [pc, #88]	; (8002a0c <HAL_RCC_OscConfig+0x93c>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ba:	f7fe fe17 	bl	80015ec <HAL_GetTick>
 80029be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c2:	e009      	b.n	80029d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c4:	f7fe fe12 	bl	80015ec <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b64      	cmp	r3, #100	; 0x64
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e3b1      	b.n	800313c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <HAL_RCC_OscConfig+0x93c>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0ef      	beq.n	80029c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d10d      	bne.n	8002a10 <HAL_RCC_OscConfig+0x940>
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_RCC_OscConfig+0x934>)
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	4a02      	ldr	r2, [pc, #8]	; (8002a04 <HAL_RCC_OscConfig+0x934>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6213      	str	r3, [r2, #32]
 8002a00:	e03c      	b.n	8002a7c <HAL_RCC_OscConfig+0x9ac>
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	10908120 	.word	0x10908120
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10c      	bne.n	8002a3a <HAL_RCC_OscConfig+0x96a>
 8002a20:	4bc1      	ldr	r3, [pc, #772]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	4ac0      	ldr	r2, [pc, #768]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	6213      	str	r3, [r2, #32]
 8002a2c:	4bbe      	ldr	r3, [pc, #760]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	4abd      	ldr	r2, [pc, #756]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002a32:	f023 0304 	bic.w	r3, r3, #4
 8002a36:	6213      	str	r3, [r2, #32]
 8002a38:	e020      	b.n	8002a7c <HAL_RCC_OscConfig+0x9ac>
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d10c      	bne.n	8002a64 <HAL_RCC_OscConfig+0x994>
 8002a4a:	4bb7      	ldr	r3, [pc, #732]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	4ab6      	ldr	r2, [pc, #728]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002a50:	f043 0304 	orr.w	r3, r3, #4
 8002a54:	6213      	str	r3, [r2, #32]
 8002a56:	4bb4      	ldr	r3, [pc, #720]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002a58:	6a1b      	ldr	r3, [r3, #32]
 8002a5a:	4ab3      	ldr	r2, [pc, #716]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	6213      	str	r3, [r2, #32]
 8002a62:	e00b      	b.n	8002a7c <HAL_RCC_OscConfig+0x9ac>
 8002a64:	4bb0      	ldr	r3, [pc, #704]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4aaf      	ldr	r2, [pc, #700]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002a6a:	f023 0301 	bic.w	r3, r3, #1
 8002a6e:	6213      	str	r3, [r2, #32]
 8002a70:	4bad      	ldr	r3, [pc, #692]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	4aac      	ldr	r2, [pc, #688]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002a76:	f023 0304 	bic.w	r3, r3, #4
 8002a7a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8081 	beq.w	8002b90 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a8e:	f7fe fdad 	bl	80015ec <HAL_GetTick>
 8002a92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a96:	e00b      	b.n	8002ab0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a98:	f7fe fda8 	bl	80015ec <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d901      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e345      	b.n	800313c <HAL_RCC_OscConfig+0x106c>
 8002ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ab4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ab8:	2202      	movs	r2, #2
 8002aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	fa93 f2a3 	rbit	r2, r3
 8002aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ace:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ad8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002adc:	2202      	movs	r2, #2
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	fa93 f2a3 	rbit	r2, r3
 8002aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002af2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002af6:	601a      	str	r2, [r3, #0]
  return result;
 8002af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002b00:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	fab3 f383 	clz	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f043 0302 	orr.w	r3, r3, #2
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d102      	bne.n	8002b1c <HAL_RCC_OscConfig+0xa4c>
 8002b16:	4b84      	ldr	r3, [pc, #528]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	e013      	b.n	8002b44 <HAL_RCC_OscConfig+0xa74>
 8002b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b20:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b24:	2202      	movs	r2, #2
 8002b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	fa93 f2a3 	rbit	r2, r3
 8002b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b3a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	4b79      	ldr	r3, [pc, #484]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b48:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b4c:	2102      	movs	r1, #2
 8002b4e:	6011      	str	r1, [r2, #0]
 8002b50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b54:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002b58:	6812      	ldr	r2, [r2, #0]
 8002b5a:	fa92 f1a2 	rbit	r1, r2
 8002b5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b62:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b66:	6011      	str	r1, [r2, #0]
  return result;
 8002b68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b6c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	fab2 f282 	clz	r2, r2
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	f002 021f 	and.w	r2, r2, #31
 8002b82:	2101      	movs	r1, #1
 8002b84:	fa01 f202 	lsl.w	r2, r1, r2
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d084      	beq.n	8002a98 <HAL_RCC_OscConfig+0x9c8>
 8002b8e:	e07f      	b.n	8002c90 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b90:	f7fe fd2c 	bl	80015ec <HAL_GetTick>
 8002b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b98:	e00b      	b.n	8002bb2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9a:	f7fe fd27 	bl	80015ec <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e2c4      	b.n	800313c <HAL_RCC_OscConfig+0x106c>
 8002bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002bba:	2202      	movs	r2, #2
 8002bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bc2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fa93 f2a3 	rbit	r2, r3
 8002bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002bde:	2202      	movs	r2, #2
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	fa93 f2a3 	rbit	r2, r3
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002bf8:	601a      	str	r2, [r3, #0]
  return result;
 8002bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002c02:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	095b      	lsrs	r3, r3, #5
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	f043 0302 	orr.w	r3, r3, #2
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d102      	bne.n	8002c1e <HAL_RCC_OscConfig+0xb4e>
 8002c18:	4b43      	ldr	r3, [pc, #268]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	e013      	b.n	8002c46 <HAL_RCC_OscConfig+0xb76>
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c26:	2202      	movs	r2, #2
 8002c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	fa93 f2a3 	rbit	r2, r3
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	4b39      	ldr	r3, [pc, #228]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c4a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c4e:	2102      	movs	r1, #2
 8002c50:	6011      	str	r1, [r2, #0]
 8002c52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c56:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	fa92 f1a2 	rbit	r1, r2
 8002c60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c64:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c68:	6011      	str	r1, [r2, #0]
  return result;
 8002c6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c6e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002c72:	6812      	ldr	r2, [r2, #0]
 8002c74:	fab2 f282 	clz	r2, r2
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	f002 021f 	and.w	r2, r2, #31
 8002c84:	2101      	movs	r1, #1
 8002c86:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d184      	bne.n	8002b9a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c90:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d105      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c98:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	4a22      	ldr	r2, [pc, #136]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ca2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ca8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 8242 	beq.w	800313a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cb6:	4b1c      	ldr	r3, [pc, #112]	; (8002d28 <HAL_RCC_OscConfig+0xc58>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 030c 	and.w	r3, r3, #12
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	f000 8213 	beq.w	80030ea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	f040 8162 	bne.w	8002f9a <HAL_RCC_OscConfig+0xeca>
 8002cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cda:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002cde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	fa93 f2a3 	rbit	r2, r3
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002cfa:	601a      	str	r2, [r3, #0]
  return result;
 8002cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d00:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002d04:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d06:	fab3 f383 	clz	r3, r3
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	461a      	mov	r2, r3
 8002d18:	2300      	movs	r3, #0
 8002d1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fc66 	bl	80015ec <HAL_GetTick>
 8002d20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d24:	e00c      	b.n	8002d40 <HAL_RCC_OscConfig+0xc70>
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe fc5e 	bl	80015ec <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e1fd      	b.n	800313c <HAL_RCC_OscConfig+0x106c>
 8002d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d44:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d52:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	fa93 f2a3 	rbit	r2, r3
 8002d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d60:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d64:	601a      	str	r2, [r3, #0]
  return result;
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002d6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	095b      	lsrs	r3, r3, #5
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d102      	bne.n	8002d8a <HAL_RCC_OscConfig+0xcba>
 8002d84:	4bb0      	ldr	r3, [pc, #704]	; (8003048 <HAL_RCC_OscConfig+0xf78>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	e027      	b.n	8002dda <HAL_RCC_OscConfig+0xd0a>
 8002d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002d92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	fa93 f2a3 	rbit	r2, r3
 8002da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002daa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002db4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	fa93 f2a3 	rbit	r2, r3
 8002dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	4b9c      	ldr	r3, [pc, #624]	; (8003048 <HAL_RCC_OscConfig+0xf78>)
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dde:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002de2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002de6:	6011      	str	r1, [r2, #0]
 8002de8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dec:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	fa92 f1a2 	rbit	r1, r2
 8002df6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002dfa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002dfe:	6011      	str	r1, [r2, #0]
  return result;
 8002e00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e04:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002e08:	6812      	ldr	r2, [r2, #0]
 8002e0a:	fab2 f282 	clz	r2, r2
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	f042 0220 	orr.w	r2, r2, #32
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	f002 021f 	and.w	r2, r2, #31
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d182      	bne.n	8002d2c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e26:	4b88      	ldr	r3, [pc, #544]	; (8003048 <HAL_RCC_OscConfig+0xf78>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6a1b      	ldr	r3, [r3, #32]
 8002e46:	430b      	orrs	r3, r1
 8002e48:	497f      	ldr	r1, [pc, #508]	; (8003048 <HAL_RCC_OscConfig+0xf78>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	604b      	str	r3, [r1, #4]
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e60:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	fa93 f2a3 	rbit	r2, r3
 8002e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e72:	601a      	str	r2, [r3, #0]
  return result;
 8002e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e78:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002e7c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002e88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	461a      	mov	r2, r3
 8002e90:	2301      	movs	r3, #1
 8002e92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fe fbaa 	bl	80015ec <HAL_GetTick>
 8002e98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e9c:	e009      	b.n	8002eb2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e9e:	f7fe fba5 	bl	80015ec <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e144      	b.n	800313c <HAL_RCC_OscConfig+0x106c>
 8002eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002eba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ebe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	fa93 f2a3 	rbit	r2, r3
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ed6:	601a      	str	r2, [r3, #0]
  return result;
 8002ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002edc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002ee0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d102      	bne.n	8002efc <HAL_RCC_OscConfig+0xe2c>
 8002ef6:	4b54      	ldr	r3, [pc, #336]	; (8003048 <HAL_RCC_OscConfig+0xf78>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	e027      	b.n	8002f4c <HAL_RCC_OscConfig+0xe7c>
 8002efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f00:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	fa93 f2a3 	rbit	r2, r3
 8002f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f1c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002f20:	601a      	str	r2, [r3, #0]
 8002f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f26:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	fa93 f2a3 	rbit	r2, r3
 8002f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f42:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	4b3f      	ldr	r3, [pc, #252]	; (8003048 <HAL_RCC_OscConfig+0xf78>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f50:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f58:	6011      	str	r1, [r2, #0]
 8002f5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f5e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	fa92 f1a2 	rbit	r1, r2
 8002f68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f6c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f70:	6011      	str	r1, [r2, #0]
  return result;
 8002f72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f76:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002f7a:	6812      	ldr	r2, [r2, #0]
 8002f7c:	fab2 f282 	clz	r2, r2
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	f042 0220 	orr.w	r2, r2, #32
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	f002 021f 	and.w	r2, r2, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d082      	beq.n	8002e9e <HAL_RCC_OscConfig+0xdce>
 8002f98:	e0cf      	b.n	800313a <HAL_RCC_OscConfig+0x106a>
 8002f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002fa2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	fa93 f2a3 	rbit	r2, r3
 8002fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002fbe:	601a      	str	r2, [r3, #0]
  return result;
 8002fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002fc8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fca:	fab3 f383 	clz	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	461a      	mov	r2, r3
 8002fdc:	2300      	movs	r3, #0
 8002fde:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fe fb04 	bl	80015ec <HAL_GetTick>
 8002fe4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe8:	e009      	b.n	8002ffe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fea:	f7fe faff 	bl	80015ec <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e09e      	b.n	800313c <HAL_RCC_OscConfig+0x106c>
 8002ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003002:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003006:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800300a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003010:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	fa93 f2a3 	rbit	r2, r3
 800301a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003022:	601a      	str	r2, [r3, #0]
  return result;
 8003024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003028:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800302c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	b2db      	uxtb	r3, r3
 8003038:	f043 0301 	orr.w	r3, r3, #1
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b01      	cmp	r3, #1
 8003040:	d104      	bne.n	800304c <HAL_RCC_OscConfig+0xf7c>
 8003042:	4b01      	ldr	r3, [pc, #4]	; (8003048 <HAL_RCC_OscConfig+0xf78>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	e029      	b.n	800309c <HAL_RCC_OscConfig+0xfcc>
 8003048:	40021000 	.word	0x40021000
 800304c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003050:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003054:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	fa93 f2a3 	rbit	r2, r3
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003076:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800307a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003084:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003092:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003096:	601a      	str	r2, [r3, #0]
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <HAL_RCC_OscConfig+0x1078>)
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030a0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80030a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030a8:	6011      	str	r1, [r2, #0]
 80030aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030ae:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	fa92 f1a2 	rbit	r1, r2
 80030b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030bc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030c0:	6011      	str	r1, [r2, #0]
  return result;
 80030c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80030c6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	fab2 f282 	clz	r2, r2
 80030d0:	b2d2      	uxtb	r2, r2
 80030d2:	f042 0220 	orr.w	r2, r2, #32
 80030d6:	b2d2      	uxtb	r2, r2
 80030d8:	f002 021f 	and.w	r2, r2, #31
 80030dc:	2101      	movs	r1, #1
 80030de:	fa01 f202 	lsl.w	r2, r1, r2
 80030e2:	4013      	ands	r3, r2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d180      	bne.n	8002fea <HAL_RCC_OscConfig+0xf1a>
 80030e8:	e027      	b.n	800313a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e01e      	b.n	800313c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030fe:	4b12      	ldr	r3, [pc, #72]	; (8003148 <HAL_RCC_OscConfig+0x1078>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003106:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800310a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	429a      	cmp	r2, r3
 800311c:	d10b      	bne.n	8003136 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800311e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003122:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800312a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003132:	429a      	cmp	r2, r3
 8003134:	d001      	beq.n	800313a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000

0800314c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b09e      	sub	sp, #120	; 0x78
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003156:	2300      	movs	r3, #0
 8003158:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	e162      	b.n	800342a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003164:	4b90      	ldr	r3, [pc, #576]	; (80033a8 <HAL_RCC_ClockConfig+0x25c>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d910      	bls.n	8003194 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b8d      	ldr	r3, [pc, #564]	; (80033a8 <HAL_RCC_ClockConfig+0x25c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 0207 	bic.w	r2, r3, #7
 800317a:	498b      	ldr	r1, [pc, #556]	; (80033a8 <HAL_RCC_ClockConfig+0x25c>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b89      	ldr	r3, [pc, #548]	; (80033a8 <HAL_RCC_ClockConfig+0x25c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d001      	beq.n	8003194 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e14a      	b.n	800342a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d008      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031a0:	4b82      	ldr	r3, [pc, #520]	; (80033ac <HAL_RCC_ClockConfig+0x260>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	497f      	ldr	r1, [pc, #508]	; (80033ac <HAL_RCC_ClockConfig+0x260>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 80dc 	beq.w	8003378 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d13c      	bne.n	8003242 <HAL_RCC_ClockConfig+0xf6>
 80031c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d102      	bne.n	80031f2 <HAL_RCC_ClockConfig+0xa6>
 80031ec:	4b6f      	ldr	r3, [pc, #444]	; (80033ac <HAL_RCC_ClockConfig+0x260>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	e00f      	b.n	8003212 <HAL_RCC_ClockConfig+0xc6>
 80031f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031fa:	fa93 f3a3 	rbit	r3, r3
 80031fe:	667b      	str	r3, [r7, #100]	; 0x64
 8003200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003204:	663b      	str	r3, [r7, #96]	; 0x60
 8003206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800320e:	4b67      	ldr	r3, [pc, #412]	; (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003216:	65ba      	str	r2, [r7, #88]	; 0x58
 8003218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800321a:	fa92 f2a2 	rbit	r2, r2
 800321e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003222:	fab2 f282 	clz	r2, r2
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	f042 0220 	orr.w	r2, r2, #32
 800322c:	b2d2      	uxtb	r2, r2
 800322e:	f002 021f 	and.w	r2, r2, #31
 8003232:	2101      	movs	r1, #1
 8003234:	fa01 f202 	lsl.w	r2, r1, r2
 8003238:	4013      	ands	r3, r2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d17b      	bne.n	8003336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e0f3      	b.n	800342a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b02      	cmp	r3, #2
 8003248:	d13c      	bne.n	80032c4 <HAL_RCC_ClockConfig+0x178>
 800324a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800324e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b01      	cmp	r3, #1
 800326c:	d102      	bne.n	8003274 <HAL_RCC_ClockConfig+0x128>
 800326e:	4b4f      	ldr	r3, [pc, #316]	; (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	e00f      	b.n	8003294 <HAL_RCC_ClockConfig+0x148>
 8003274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003278:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800327c:	fa93 f3a3 	rbit	r3, r3
 8003280:	647b      	str	r3, [r7, #68]	; 0x44
 8003282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003286:	643b      	str	r3, [r7, #64]	; 0x40
 8003288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003290:	4b46      	ldr	r3, [pc, #280]	; (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003298:	63ba      	str	r2, [r7, #56]	; 0x38
 800329a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800329c:	fa92 f2a2 	rbit	r2, r2
 80032a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80032a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032a4:	fab2 f282 	clz	r2, r2
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	f042 0220 	orr.w	r2, r2, #32
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	f002 021f 	and.w	r2, r2, #31
 80032b4:	2101      	movs	r1, #1
 80032b6:	fa01 f202 	lsl.w	r2, r1, r2
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d13a      	bne.n	8003336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e0b2      	b.n	800342a <HAL_RCC_ClockConfig+0x2de>
 80032c4:	2302      	movs	r3, #2
 80032c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	095b      	lsrs	r3, r3, #5
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d102      	bne.n	80032ec <HAL_RCC_ClockConfig+0x1a0>
 80032e6:	4b31      	ldr	r3, [pc, #196]	; (80033ac <HAL_RCC_ClockConfig+0x260>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	e00d      	b.n	8003308 <HAL_RCC_ClockConfig+0x1bc>
 80032ec:	2302      	movs	r3, #2
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	627b      	str	r3, [r7, #36]	; 0x24
 80032f8:	2302      	movs	r3, #2
 80032fa:	623b      	str	r3, [r7, #32]
 80032fc:	6a3b      	ldr	r3, [r7, #32]
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	4b29      	ldr	r3, [pc, #164]	; (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003308:	2202      	movs	r2, #2
 800330a:	61ba      	str	r2, [r7, #24]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	fa92 f2a2 	rbit	r2, r2
 8003312:	617a      	str	r2, [r7, #20]
  return result;
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	fab2 f282 	clz	r2, r2
 800331a:	b2d2      	uxtb	r2, r2
 800331c:	f042 0220 	orr.w	r2, r2, #32
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	f002 021f 	and.w	r2, r2, #31
 8003326:	2101      	movs	r1, #1
 8003328:	fa01 f202 	lsl.w	r2, r1, r2
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d101      	bne.n	8003336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e079      	b.n	800342a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003336:	4b1d      	ldr	r3, [pc, #116]	; (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f023 0203 	bic.w	r2, r3, #3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	491a      	ldr	r1, [pc, #104]	; (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003348:	f7fe f950 	bl	80015ec <HAL_GetTick>
 800334c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334e:	e00a      	b.n	8003366 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003350:	f7fe f94c 	bl	80015ec <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	; 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e061      	b.n	800342a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003366:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_RCC_ClockConfig+0x260>)
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f003 020c 	and.w	r2, r3, #12
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	429a      	cmp	r2, r3
 8003376:	d1eb      	bne.n	8003350 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003378:	4b0b      	ldr	r3, [pc, #44]	; (80033a8 <HAL_RCC_ClockConfig+0x25c>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	429a      	cmp	r2, r3
 8003384:	d214      	bcs.n	80033b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003386:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <HAL_RCC_ClockConfig+0x25c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 0207 	bic.w	r2, r3, #7
 800338e:	4906      	ldr	r1, [pc, #24]	; (80033a8 <HAL_RCC_ClockConfig+0x25c>)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	4313      	orrs	r3, r2
 8003394:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b04      	ldr	r3, [pc, #16]	; (80033a8 <HAL_RCC_ClockConfig+0x25c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d005      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e040      	b.n	800342a <HAL_RCC_ClockConfig+0x2de>
 80033a8:	40022000 	.word	0x40022000
 80033ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0304 	and.w	r3, r3, #4
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d008      	beq.n	80033ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033bc:	4b1d      	ldr	r3, [pc, #116]	; (8003434 <HAL_RCC_ClockConfig+0x2e8>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	491a      	ldr	r1, [pc, #104]	; (8003434 <HAL_RCC_ClockConfig+0x2e8>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0308 	and.w	r3, r3, #8
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033da:	4b16      	ldr	r3, [pc, #88]	; (8003434 <HAL_RCC_ClockConfig+0x2e8>)
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4912      	ldr	r1, [pc, #72]	; (8003434 <HAL_RCC_ClockConfig+0x2e8>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033ee:	f000 f829 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 80033f2:	4601      	mov	r1, r0
 80033f4:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <HAL_RCC_ClockConfig+0x2e8>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033fc:	22f0      	movs	r2, #240	; 0xf0
 80033fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	fa92 f2a2 	rbit	r2, r2
 8003406:	60fa      	str	r2, [r7, #12]
  return result;
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	fab2 f282 	clz	r2, r2
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	40d3      	lsrs	r3, r2
 8003412:	4a09      	ldr	r2, [pc, #36]	; (8003438 <HAL_RCC_ClockConfig+0x2ec>)
 8003414:	5cd3      	ldrb	r3, [r2, r3]
 8003416:	fa21 f303 	lsr.w	r3, r1, r3
 800341a:	4a08      	ldr	r2, [pc, #32]	; (800343c <HAL_RCC_ClockConfig+0x2f0>)
 800341c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <HAL_RCC_ClockConfig+0x2f4>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7fe f89e 	bl	8001564 <HAL_InitTick>
  
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3778      	adds	r7, #120	; 0x78
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40021000 	.word	0x40021000
 8003438:	08005bdc 	.word	0x08005bdc
 800343c:	20000000 	.word	0x20000000
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003444:	b480      	push	{r7}
 8003446:	b08b      	sub	sp, #44	; 0x2c
 8003448:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	61fb      	str	r3, [r7, #28]
 800344e:	2300      	movs	r3, #0
 8003450:	61bb      	str	r3, [r7, #24]
 8003452:	2300      	movs	r3, #0
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
 8003456:	2300      	movs	r3, #0
 8003458:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800345e:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 030c 	and.w	r3, r3, #12
 800346a:	2b04      	cmp	r3, #4
 800346c:	d002      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0x30>
 800346e:	2b08      	cmp	r3, #8
 8003470:	d003      	beq.n	800347a <HAL_RCC_GetSysClockFreq+0x36>
 8003472:	e03c      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003474:	4b24      	ldr	r3, [pc, #144]	; (8003508 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003476:	623b      	str	r3, [r7, #32]
      break;
 8003478:	e03c      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003480:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003484:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	fa92 f2a2 	rbit	r2, r2
 800348c:	607a      	str	r2, [r7, #4]
  return result;
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	fab2 f282 	clz	r2, r2
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	40d3      	lsrs	r3, r2
 8003498:	4a1c      	ldr	r2, [pc, #112]	; (800350c <HAL_RCC_GetSysClockFreq+0xc8>)
 800349a:	5cd3      	ldrb	r3, [r2, r3]
 800349c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800349e:	4b19      	ldr	r3, [pc, #100]	; (8003504 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	220f      	movs	r2, #15
 80034a8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	fa92 f2a2 	rbit	r2, r2
 80034b0:	60fa      	str	r2, [r7, #12]
  return result;
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	fab2 f282 	clz	r2, r2
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	40d3      	lsrs	r3, r2
 80034bc:	4a14      	ldr	r2, [pc, #80]	; (8003510 <HAL_RCC_GetSysClockFreq+0xcc>)
 80034be:	5cd3      	ldrb	r3, [r2, r3]
 80034c0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034cc:	4a0e      	ldr	r2, [pc, #56]	; (8003508 <HAL_RCC_GetSysClockFreq+0xc4>)
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	627b      	str	r3, [r7, #36]	; 0x24
 80034dc:	e004      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	4a0c      	ldr	r2, [pc, #48]	; (8003514 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	623b      	str	r3, [r7, #32]
      break;
 80034ec:	e002      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034ee:	4b0a      	ldr	r3, [pc, #40]	; (8003518 <HAL_RCC_GetSysClockFreq+0xd4>)
 80034f0:	623b      	str	r3, [r7, #32]
      break;
 80034f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034f4:	6a3b      	ldr	r3, [r7, #32]
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	372c      	adds	r7, #44	; 0x2c
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	00f42400 	.word	0x00f42400
 800350c:	08005bf4 	.word	0x08005bf4
 8003510:	08005c04 	.word	0x08005c04
 8003514:	003d0900 	.word	0x003d0900
 8003518:	007a1200 	.word	0x007a1200

0800351c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003520:	4b03      	ldr	r3, [pc, #12]	; (8003530 <HAL_RCC_GetHCLKFreq+0x14>)
 8003522:	681b      	ldr	r3, [r3, #0]
}
 8003524:	4618      	mov	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	20000000 	.word	0x20000000

08003534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800353a:	f7ff ffef 	bl	800351c <HAL_RCC_GetHCLKFreq>
 800353e:	4601      	mov	r1, r0
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003548:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800354c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	fa92 f2a2 	rbit	r2, r2
 8003554:	603a      	str	r2, [r7, #0]
  return result;
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	fab2 f282 	clz	r2, r2
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	40d3      	lsrs	r3, r2
 8003560:	4a04      	ldr	r2, [pc, #16]	; (8003574 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003562:	5cd3      	ldrb	r3, [r2, r3]
 8003564:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40021000 	.word	0x40021000
 8003574:	08005bec 	.word	0x08005bec

08003578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800357e:	f7ff ffcd 	bl	800351c <HAL_RCC_GetHCLKFreq>
 8003582:	4601      	mov	r1, r0
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800358c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003590:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	fa92 f2a2 	rbit	r2, r2
 8003598:	603a      	str	r2, [r7, #0]
  return result;
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	fab2 f282 	clz	r2, r2
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	40d3      	lsrs	r3, r2
 80035a4:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80035a6:	5cd3      	ldrb	r3, [r2, r3]
 80035a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	08005bec 	.word	0x08005bec

080035bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b092      	sub	sp, #72	; 0x48
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035cc:	2300      	movs	r3, #0
 80035ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 80d4 	beq.w	8003788 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e0:	4b4e      	ldr	r3, [pc, #312]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10e      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ec:	4b4b      	ldr	r3, [pc, #300]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	4a4a      	ldr	r2, [pc, #296]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f6:	61d3      	str	r3, [r2, #28]
 80035f8:	4b48      	ldr	r3, [pc, #288]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003604:	2301      	movs	r3, #1
 8003606:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360a:	4b45      	ldr	r3, [pc, #276]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003612:	2b00      	cmp	r3, #0
 8003614:	d118      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003616:	4b42      	ldr	r3, [pc, #264]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a41      	ldr	r2, [pc, #260]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800361c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003620:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003622:	f7fd ffe3 	bl	80015ec <HAL_GetTick>
 8003626:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003628:	e008      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800362a:	f7fd ffdf 	bl	80015ec <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b64      	cmp	r3, #100	; 0x64
 8003636:	d901      	bls.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e169      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363c:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003648:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003650:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003652:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003654:	2b00      	cmp	r3, #0
 8003656:	f000 8084 	beq.w	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003662:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003664:	429a      	cmp	r2, r3
 8003666:	d07c      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003668:	4b2c      	ldr	r3, [pc, #176]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003676:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367a:	fa93 f3a3 	rbit	r3, r3
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	4b26      	ldr	r3, [pc, #152]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	461a      	mov	r2, r3
 8003692:	2301      	movs	r3, #1
 8003694:	6013      	str	r3, [r2, #0]
 8003696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800369a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369e:	fa93 f3a3 	rbit	r3, r3
 80036a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036a6:	fab3 f383 	clz	r3, r3
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	4b1d      	ldr	r3, [pc, #116]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	461a      	mov	r2, r3
 80036b6:	2300      	movs	r3, #0
 80036b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036ba:	4a18      	ldr	r2, [pc, #96]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d04b      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ca:	f7fd ff8f 	bl	80015ec <HAL_GetTick>
 80036ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7fd ff8b 	bl	80015ec <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e113      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80036e8:	2302      	movs	r3, #2
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ee:	fa93 f3a3 	rbit	r3, r3
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
 80036f4:	2302      	movs	r3, #2
 80036f6:	623b      	str	r3, [r7, #32]
 80036f8:	6a3b      	ldr	r3, [r7, #32]
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	61fb      	str	r3, [r7, #28]
  return result;
 8003700:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f043 0302 	orr.w	r3, r3, #2
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d108      	bne.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003716:	4b01      	ldr	r3, [pc, #4]	; (800371c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	e00d      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800371c:	40021000 	.word	0x40021000
 8003720:	40007000 	.word	0x40007000
 8003724:	10908100 	.word	0x10908100
 8003728:	2302      	movs	r3, #2
 800372a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	4b78      	ldr	r3, [pc, #480]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	2202      	movs	r2, #2
 800373a:	613a      	str	r2, [r7, #16]
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	fa92 f2a2 	rbit	r2, r2
 8003742:	60fa      	str	r2, [r7, #12]
  return result;
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	fab2 f282 	clz	r2, r2
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	f002 021f 	and.w	r2, r2, #31
 8003756:	2101      	movs	r1, #1
 8003758:	fa01 f202 	lsl.w	r2, r1, r2
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0b7      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003762:	4b6d      	ldr	r3, [pc, #436]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	496a      	ldr	r1, [pc, #424]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003770:	4313      	orrs	r3, r2
 8003772:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003774:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003778:	2b01      	cmp	r3, #1
 800377a:	d105      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377c:	4b66      	ldr	r3, [pc, #408]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	4a65      	ldr	r2, [pc, #404]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003786:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003794:	4b60      	ldr	r3, [pc, #384]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	f023 0203 	bic.w	r2, r3, #3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	495d      	ldr	r1, [pc, #372]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d008      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b2:	4b59      	ldr	r3, [pc, #356]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	4956      	ldr	r1, [pc, #344]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d008      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037d0:	4b51      	ldr	r3, [pc, #324]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	691b      	ldr	r3, [r3, #16]
 80037dc:	494e      	ldr	r1, [pc, #312]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d008      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037ee:	4b4a      	ldr	r3, [pc, #296]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	f023 0210 	bic.w	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	4947      	ldr	r1, [pc, #284]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80037fc:	4313      	orrs	r3, r2
 80037fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800380c:	4b42      	ldr	r3, [pc, #264]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	493f      	ldr	r1, [pc, #252]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d008      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800382a:	4b3b      	ldr	r3, [pc, #236]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f023 0220 	bic.w	r2, r3, #32
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	4938      	ldr	r1, [pc, #224]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003838:	4313      	orrs	r3, r2
 800383a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d008      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003848:	4b33      	ldr	r3, [pc, #204]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	4930      	ldr	r1, [pc, #192]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003856:	4313      	orrs	r3, r2
 8003858:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	2b00      	cmp	r3, #0
 8003864:	d008      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003866:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	4929      	ldr	r1, [pc, #164]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003874:	4313      	orrs	r3, r2
 8003876:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003884:	4b24      	ldr	r3, [pc, #144]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	4921      	ldr	r1, [pc, #132]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003892:	4313      	orrs	r3, r2
 8003894:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038a2:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	491a      	ldr	r1, [pc, #104]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	4912      	ldr	r1, [pc, #72]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d008      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80038de:	4b0e      	ldr	r3, [pc, #56]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	490b      	ldr	r1, [pc, #44]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003908:	4903      	ldr	r1, [pc, #12]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800390a:	4313      	orrs	r3, r2
 800390c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3748      	adds	r7, #72	; 0x48
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40021000 	.word	0x40021000

0800391c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e049      	b.n	80039c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fb5a 	bl	8000ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3304      	adds	r3, #4
 8003958:	4619      	mov	r1, r3
 800395a:	4610      	mov	r0, r2
 800395c:	f000 fc6c 	bl	8004238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e049      	b.n	8003a70 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d106      	bne.n	80039f6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f841 	bl	8003a78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f000 fc15 	bl	8004238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b086      	sub	sp, #24
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e097      	b.n	8003bd0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d106      	bne.n	8003aba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7fd f9cb 	bl	8000e50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2202      	movs	r2, #2
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003ad0:	f023 0307 	bic.w	r3, r3, #7
 8003ad4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3304      	adds	r3, #4
 8003ade:	4619      	mov	r1, r3
 8003ae0:	4610      	mov	r0, r2
 8003ae2:	f000 fba9 	bl	8004238 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0e:	f023 0303 	bic.w	r3, r3, #3
 8003b12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b2c:	f023 030c 	bic.w	r3, r3, #12
 8003b30:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	021b      	lsls	r3, r3, #8
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	011a      	lsls	r2, r3, #4
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	031b      	lsls	r3, r3, #12
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003b6a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003b72:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68fa      	ldr	r2, [r7, #12]
 8003b9c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3718      	adds	r7, #24
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d122      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0302 	and.w	r3, r3, #2
 8003bf8:	2b02      	cmp	r3, #2
 8003bfa:	d11b      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0202 	mvn.w	r2, #2
 8003c04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699b      	ldr	r3, [r3, #24]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 faed 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003c20:	e005      	b.n	8003c2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 fadf 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 faf0 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d122      	bne.n	8003c88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d11b      	bne.n	8003c88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0204 	mvn.w	r2, #4
 8003c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 fac3 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003c74:	e005      	b.n	8003c82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fab5 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fac6 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f003 0308 	and.w	r3, r3, #8
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d122      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d11b      	bne.n	8003cdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0208 	mvn.w	r2, #8
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fa99 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 fa8b 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 fa9c 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	f003 0310 	and.w	r3, r3, #16
 8003ce6:	2b10      	cmp	r3, #16
 8003ce8:	d122      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f003 0310 	and.w	r3, r3, #16
 8003cf4:	2b10      	cmp	r3, #16
 8003cf6:	d11b      	bne.n	8003d30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f06f 0210 	mvn.w	r2, #16
 8003d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2208      	movs	r2, #8
 8003d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa6f 	bl	80041fa <HAL_TIM_IC_CaptureCallback>
 8003d1c:	e005      	b.n	8003d2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 fa61 	bl	80041e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 fa72 	bl	800420e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d10e      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d107      	bne.n	8003d5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f06f 0201 	mvn.w	r2, #1
 8003d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 fa3b 	bl	80041d2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d66:	2b80      	cmp	r3, #128	; 0x80
 8003d68:	d10e      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d74:	2b80      	cmp	r3, #128	; 0x80
 8003d76:	d107      	bne.n	8003d88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 ff60 	bl	8004c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d96:	d10e      	bne.n	8003db6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da2:	2b80      	cmp	r3, #128	; 0x80
 8003da4:	d107      	bne.n	8003db6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003dae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 ff53 	bl	8004c5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d10e      	bne.n	8003de2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dce:	2b40      	cmp	r3, #64	; 0x40
 8003dd0:	d107      	bne.n	8003de2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fa20 	bl	8004222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f003 0320 	and.w	r3, r3, #32
 8003dec:	2b20      	cmp	r3, #32
 8003dee:	d10e      	bne.n	8003e0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0320 	and.w	r3, r3, #32
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	d107      	bne.n	8003e0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f06f 0220 	mvn.w	r2, #32
 8003e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 ff13 	bl	8004c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e0ff      	b.n	8004036 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b14      	cmp	r3, #20
 8003e42:	f200 80f0 	bhi.w	8004026 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e46:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4c:	08003ea1 	.word	0x08003ea1
 8003e50:	08004027 	.word	0x08004027
 8003e54:	08004027 	.word	0x08004027
 8003e58:	08004027 	.word	0x08004027
 8003e5c:	08003ee1 	.word	0x08003ee1
 8003e60:	08004027 	.word	0x08004027
 8003e64:	08004027 	.word	0x08004027
 8003e68:	08004027 	.word	0x08004027
 8003e6c:	08003f23 	.word	0x08003f23
 8003e70:	08004027 	.word	0x08004027
 8003e74:	08004027 	.word	0x08004027
 8003e78:	08004027 	.word	0x08004027
 8003e7c:	08003f63 	.word	0x08003f63
 8003e80:	08004027 	.word	0x08004027
 8003e84:	08004027 	.word	0x08004027
 8003e88:	08004027 	.word	0x08004027
 8003e8c:	08003fa5 	.word	0x08003fa5
 8003e90:	08004027 	.word	0x08004027
 8003e94:	08004027 	.word	0x08004027
 8003e98:	08004027 	.word	0x08004027
 8003e9c:	08003fe5 	.word	0x08003fe5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f000 fa56 	bl	8004358 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f042 0208 	orr.w	r2, r2, #8
 8003eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0204 	bic.w	r2, r2, #4
 8003eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6999      	ldr	r1, [r3, #24]
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	619a      	str	r2, [r3, #24]
      break;
 8003ede:	e0a5      	b.n	800402c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fac6 	bl	8004478 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699a      	ldr	r2, [r3, #24]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6999      	ldr	r1, [r3, #24]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	021a      	lsls	r2, r3, #8
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	619a      	str	r2, [r3, #24]
      break;
 8003f20:	e084      	b.n	800402c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fb2f 	bl	800458c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69da      	ldr	r2, [r3, #28]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0208 	orr.w	r2, r2, #8
 8003f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0204 	bic.w	r2, r2, #4
 8003f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69d9      	ldr	r1, [r3, #28]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	61da      	str	r2, [r3, #28]
      break;
 8003f60:	e064      	b.n	800402c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f000 fb97 	bl	800469c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	69da      	ldr	r2, [r3, #28]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	69da      	ldr	r2, [r3, #28]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	69d9      	ldr	r1, [r3, #28]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	021a      	lsls	r2, r3, #8
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	61da      	str	r2, [r3, #28]
      break;
 8003fa2:	e043      	b.n	800402c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68b9      	ldr	r1, [r7, #8]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f000 fbe0 	bl	8004770 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0208 	orr.w	r2, r2, #8
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0204 	bic.w	r2, r2, #4
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003fe2:	e023      	b.n	800402c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fc24 	bl	8004838 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ffe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800400e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	021a      	lsls	r2, r3, #8
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004024:	e002      	b.n	800402c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	75fb      	strb	r3, [r7, #23]
      break;
 800402a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004034:	7dfb      	ldrb	r3, [r7, #23]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop

08004040 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800404a:	2300      	movs	r3, #0
 800404c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004054:	2b01      	cmp	r3, #1
 8004056:	d101      	bne.n	800405c <HAL_TIM_ConfigClockSource+0x1c>
 8004058:	2302      	movs	r3, #2
 800405a:	e0b6      	b.n	80041ca <HAL_TIM_ConfigClockSource+0x18a>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800407e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004086:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004098:	d03e      	beq.n	8004118 <HAL_TIM_ConfigClockSource+0xd8>
 800409a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409e:	f200 8087 	bhi.w	80041b0 <HAL_TIM_ConfigClockSource+0x170>
 80040a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a6:	f000 8086 	beq.w	80041b6 <HAL_TIM_ConfigClockSource+0x176>
 80040aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040ae:	d87f      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x170>
 80040b0:	2b70      	cmp	r3, #112	; 0x70
 80040b2:	d01a      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0xaa>
 80040b4:	2b70      	cmp	r3, #112	; 0x70
 80040b6:	d87b      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x170>
 80040b8:	2b60      	cmp	r3, #96	; 0x60
 80040ba:	d050      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x11e>
 80040bc:	2b60      	cmp	r3, #96	; 0x60
 80040be:	d877      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x170>
 80040c0:	2b50      	cmp	r3, #80	; 0x50
 80040c2:	d03c      	beq.n	800413e <HAL_TIM_ConfigClockSource+0xfe>
 80040c4:	2b50      	cmp	r3, #80	; 0x50
 80040c6:	d873      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x170>
 80040c8:	2b40      	cmp	r3, #64	; 0x40
 80040ca:	d058      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x13e>
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d86f      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x170>
 80040d0:	2b30      	cmp	r3, #48	; 0x30
 80040d2:	d064      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15e>
 80040d4:	2b30      	cmp	r3, #48	; 0x30
 80040d6:	d86b      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x170>
 80040d8:	2b20      	cmp	r3, #32
 80040da:	d060      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15e>
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d867      	bhi.n	80041b0 <HAL_TIM_ConfigClockSource+0x170>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d05c      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15e>
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d05a      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x15e>
 80040e8:	e062      	b.n	80041b0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6899      	ldr	r1, [r3, #8]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f000 fc7d 	bl	80049f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800410c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	609a      	str	r2, [r3, #8]
      break;
 8004116:	e04f      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6899      	ldr	r1, [r3, #8]
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f000 fc66 	bl	80049f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800413a:	609a      	str	r2, [r3, #8]
      break;
 800413c:	e03c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	461a      	mov	r2, r3
 800414c:	f000 fbda 	bl	8004904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2150      	movs	r1, #80	; 0x50
 8004156:	4618      	mov	r0, r3
 8004158:	f000 fc33 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 800415c:	e02c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6859      	ldr	r1, [r3, #4]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	461a      	mov	r2, r3
 800416c:	f000 fbf9 	bl	8004962 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2160      	movs	r1, #96	; 0x60
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fc23 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 800417c:	e01c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6859      	ldr	r1, [r3, #4]
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	461a      	mov	r2, r3
 800418c:	f000 fbba 	bl	8004904 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2140      	movs	r1, #64	; 0x40
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fc13 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 800419c:	e00c      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f000 fc0a 	bl	80049c2 <TIM_ITRx_SetConfig>
      break;
 80041ae:	e003      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
      break;
 80041b4:	e000      	b.n	80041b8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80041b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
	...

08004238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a3c      	ldr	r2, [pc, #240]	; (800433c <TIM_Base_SetConfig+0x104>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d00f      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004256:	d00b      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a39      	ldr	r2, [pc, #228]	; (8004340 <TIM_Base_SetConfig+0x108>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d007      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a38      	ldr	r2, [pc, #224]	; (8004344 <TIM_Base_SetConfig+0x10c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d003      	beq.n	8004270 <TIM_Base_SetConfig+0x38>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4a37      	ldr	r2, [pc, #220]	; (8004348 <TIM_Base_SetConfig+0x110>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d108      	bne.n	8004282 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a2d      	ldr	r2, [pc, #180]	; (800433c <TIM_Base_SetConfig+0x104>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d01b      	beq.n	80042c2 <TIM_Base_SetConfig+0x8a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004290:	d017      	beq.n	80042c2 <TIM_Base_SetConfig+0x8a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a2a      	ldr	r2, [pc, #168]	; (8004340 <TIM_Base_SetConfig+0x108>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <TIM_Base_SetConfig+0x8a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a29      	ldr	r2, [pc, #164]	; (8004344 <TIM_Base_SetConfig+0x10c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00f      	beq.n	80042c2 <TIM_Base_SetConfig+0x8a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a28      	ldr	r2, [pc, #160]	; (8004348 <TIM_Base_SetConfig+0x110>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d00b      	beq.n	80042c2 <TIM_Base_SetConfig+0x8a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a27      	ldr	r2, [pc, #156]	; (800434c <TIM_Base_SetConfig+0x114>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d007      	beq.n	80042c2 <TIM_Base_SetConfig+0x8a>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a26      	ldr	r2, [pc, #152]	; (8004350 <TIM_Base_SetConfig+0x118>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d003      	beq.n	80042c2 <TIM_Base_SetConfig+0x8a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a25      	ldr	r2, [pc, #148]	; (8004354 <TIM_Base_SetConfig+0x11c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d108      	bne.n	80042d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68fa      	ldr	r2, [r7, #12]
 80042e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a10      	ldr	r2, [pc, #64]	; (800433c <TIM_Base_SetConfig+0x104>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00f      	beq.n	8004320 <TIM_Base_SetConfig+0xe8>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a11      	ldr	r2, [pc, #68]	; (8004348 <TIM_Base_SetConfig+0x110>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00b      	beq.n	8004320 <TIM_Base_SetConfig+0xe8>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a10      	ldr	r2, [pc, #64]	; (800434c <TIM_Base_SetConfig+0x114>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d007      	beq.n	8004320 <TIM_Base_SetConfig+0xe8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a0f      	ldr	r2, [pc, #60]	; (8004350 <TIM_Base_SetConfig+0x118>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_Base_SetConfig+0xe8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a0e      	ldr	r2, [pc, #56]	; (8004354 <TIM_Base_SetConfig+0x11c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d103      	bne.n	8004328 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	615a      	str	r2, [r3, #20]
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40012c00 	.word	0x40012c00
 8004340:	40000400 	.word	0x40000400
 8004344:	40000800 	.word	0x40000800
 8004348:	40013400 	.word	0x40013400
 800434c:	40014000 	.word	0x40014000
 8004350:	40014400 	.word	0x40014400
 8004354:	40014800 	.word	0x40014800

08004358 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f023 0201 	bic.w	r2, r3, #1
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a1b      	ldr	r3, [r3, #32]
 8004372:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0303 	bic.w	r3, r3, #3
 8004392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f023 0302 	bic.w	r3, r3, #2
 80043a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a2c      	ldr	r2, [pc, #176]	; (8004464 <TIM_OC1_SetConfig+0x10c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00f      	beq.n	80043d8 <TIM_OC1_SetConfig+0x80>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a2b      	ldr	r2, [pc, #172]	; (8004468 <TIM_OC1_SetConfig+0x110>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00b      	beq.n	80043d8 <TIM_OC1_SetConfig+0x80>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a2a      	ldr	r2, [pc, #168]	; (800446c <TIM_OC1_SetConfig+0x114>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d007      	beq.n	80043d8 <TIM_OC1_SetConfig+0x80>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a29      	ldr	r2, [pc, #164]	; (8004470 <TIM_OC1_SetConfig+0x118>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d003      	beq.n	80043d8 <TIM_OC1_SetConfig+0x80>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a28      	ldr	r2, [pc, #160]	; (8004474 <TIM_OC1_SetConfig+0x11c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d10c      	bne.n	80043f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	f023 0308 	bic.w	r3, r3, #8
 80043de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f023 0304 	bic.w	r3, r3, #4
 80043f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a1b      	ldr	r2, [pc, #108]	; (8004464 <TIM_OC1_SetConfig+0x10c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00f      	beq.n	800441a <TIM_OC1_SetConfig+0xc2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a1a      	ldr	r2, [pc, #104]	; (8004468 <TIM_OC1_SetConfig+0x110>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d00b      	beq.n	800441a <TIM_OC1_SetConfig+0xc2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a19      	ldr	r2, [pc, #100]	; (800446c <TIM_OC1_SetConfig+0x114>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d007      	beq.n	800441a <TIM_OC1_SetConfig+0xc2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a18      	ldr	r2, [pc, #96]	; (8004470 <TIM_OC1_SetConfig+0x118>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d003      	beq.n	800441a <TIM_OC1_SetConfig+0xc2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a17      	ldr	r2, [pc, #92]	; (8004474 <TIM_OC1_SetConfig+0x11c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d111      	bne.n	800443e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	4313      	orrs	r3, r2
 800443c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	621a      	str	r2, [r3, #32]
}
 8004458:	bf00      	nop
 800445a:	371c      	adds	r7, #28
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40013400 	.word	0x40013400
 800446c:	40014000 	.word	0x40014000
 8004470:	40014400 	.word	0x40014400
 8004474:	40014800 	.word	0x40014800

08004478 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	f023 0210 	bic.w	r2, r3, #16
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f023 0320 	bic.w	r3, r3, #32
 80044c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	011b      	lsls	r3, r3, #4
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a28      	ldr	r2, [pc, #160]	; (8004578 <TIM_OC2_SetConfig+0x100>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_OC2_SetConfig+0x6c>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a27      	ldr	r2, [pc, #156]	; (800457c <TIM_OC2_SetConfig+0x104>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d10d      	bne.n	8004500 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a1d      	ldr	r2, [pc, #116]	; (8004578 <TIM_OC2_SetConfig+0x100>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00f      	beq.n	8004528 <TIM_OC2_SetConfig+0xb0>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a1c      	ldr	r2, [pc, #112]	; (800457c <TIM_OC2_SetConfig+0x104>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d00b      	beq.n	8004528 <TIM_OC2_SetConfig+0xb0>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <TIM_OC2_SetConfig+0x108>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d007      	beq.n	8004528 <TIM_OC2_SetConfig+0xb0>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a1a      	ldr	r2, [pc, #104]	; (8004584 <TIM_OC2_SetConfig+0x10c>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d003      	beq.n	8004528 <TIM_OC2_SetConfig+0xb0>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a19      	ldr	r2, [pc, #100]	; (8004588 <TIM_OC2_SetConfig+0x110>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d113      	bne.n	8004550 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800452e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004536:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	68fa      	ldr	r2, [r7, #12]
 800455a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	697a      	ldr	r2, [r7, #20]
 8004568:	621a      	str	r2, [r3, #32]
}
 800456a:	bf00      	nop
 800456c:	371c      	adds	r7, #28
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40012c00 	.word	0x40012c00
 800457c:	40013400 	.word	0x40013400
 8004580:	40014000 	.word	0x40014000
 8004584:	40014400 	.word	0x40014400
 8004588:	40014800 	.word	0x40014800

0800458c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0303 	bic.w	r3, r3, #3
 80045c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a27      	ldr	r2, [pc, #156]	; (8004688 <TIM_OC3_SetConfig+0xfc>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d003      	beq.n	80045f6 <TIM_OC3_SetConfig+0x6a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a26      	ldr	r2, [pc, #152]	; (800468c <TIM_OC3_SetConfig+0x100>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d10d      	bne.n	8004612 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004610:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <TIM_OC3_SetConfig+0xfc>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00f      	beq.n	800463a <TIM_OC3_SetConfig+0xae>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a1b      	ldr	r2, [pc, #108]	; (800468c <TIM_OC3_SetConfig+0x100>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00b      	beq.n	800463a <TIM_OC3_SetConfig+0xae>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a1a      	ldr	r2, [pc, #104]	; (8004690 <TIM_OC3_SetConfig+0x104>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d007      	beq.n	800463a <TIM_OC3_SetConfig+0xae>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a19      	ldr	r2, [pc, #100]	; (8004694 <TIM_OC3_SetConfig+0x108>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d003      	beq.n	800463a <TIM_OC3_SetConfig+0xae>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a18      	ldr	r2, [pc, #96]	; (8004698 <TIM_OC3_SetConfig+0x10c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d113      	bne.n	8004662 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	4313      	orrs	r3, r2
 8004654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	4313      	orrs	r3, r2
 8004660:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	621a      	str	r2, [r3, #32]
}
 800467c:	bf00      	nop
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40013400 	.word	0x40013400
 8004690:	40014000 	.word	0x40014000
 8004694:	40014400 	.word	0x40014400
 8004698:	40014800 	.word	0x40014800

0800469c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	031b      	lsls	r3, r3, #12
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4a18      	ldr	r2, [pc, #96]	; (800475c <TIM_OC4_SetConfig+0xc0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d00f      	beq.n	8004720 <TIM_OC4_SetConfig+0x84>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4a17      	ldr	r2, [pc, #92]	; (8004760 <TIM_OC4_SetConfig+0xc4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d00b      	beq.n	8004720 <TIM_OC4_SetConfig+0x84>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a16      	ldr	r2, [pc, #88]	; (8004764 <TIM_OC4_SetConfig+0xc8>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d007      	beq.n	8004720 <TIM_OC4_SetConfig+0x84>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a15      	ldr	r2, [pc, #84]	; (8004768 <TIM_OC4_SetConfig+0xcc>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d003      	beq.n	8004720 <TIM_OC4_SetConfig+0x84>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a14      	ldr	r2, [pc, #80]	; (800476c <TIM_OC4_SetConfig+0xd0>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d109      	bne.n	8004734 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004726:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4313      	orrs	r3, r2
 8004732:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	621a      	str	r2, [r3, #32]
}
 800474e:	bf00      	nop
 8004750:	371c      	adds	r7, #28
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40012c00 	.word	0x40012c00
 8004760:	40013400 	.word	0x40013400
 8004764:	40014000 	.word	0x40014000
 8004768:	40014400 	.word	0x40014400
 800476c:	40014800 	.word	0x40014800

08004770 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80047b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	4313      	orrs	r3, r2
 80047c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a17      	ldr	r2, [pc, #92]	; (8004824 <TIM_OC5_SetConfig+0xb4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00f      	beq.n	80047ea <TIM_OC5_SetConfig+0x7a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a16      	ldr	r2, [pc, #88]	; (8004828 <TIM_OC5_SetConfig+0xb8>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00b      	beq.n	80047ea <TIM_OC5_SetConfig+0x7a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a15      	ldr	r2, [pc, #84]	; (800482c <TIM_OC5_SetConfig+0xbc>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d007      	beq.n	80047ea <TIM_OC5_SetConfig+0x7a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a14      	ldr	r2, [pc, #80]	; (8004830 <TIM_OC5_SetConfig+0xc0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d003      	beq.n	80047ea <TIM_OC5_SetConfig+0x7a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a13      	ldr	r2, [pc, #76]	; (8004834 <TIM_OC5_SetConfig+0xc4>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d109      	bne.n	80047fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	621a      	str	r2, [r3, #32]
}
 8004818:	bf00      	nop
 800481a:	371c      	adds	r7, #28
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr
 8004824:	40012c00 	.word	0x40012c00
 8004828:	40013400 	.word	0x40013400
 800482c:	40014000 	.word	0x40014000
 8004830:	40014400 	.word	0x40014400
 8004834:	40014800 	.word	0x40014800

08004838 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a1b      	ldr	r3, [r3, #32]
 8004846:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
 8004852:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800485e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800486a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800487e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	051b      	lsls	r3, r3, #20
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	4313      	orrs	r3, r2
 800488a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a18      	ldr	r2, [pc, #96]	; (80048f0 <TIM_OC6_SetConfig+0xb8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d00f      	beq.n	80048b4 <TIM_OC6_SetConfig+0x7c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a17      	ldr	r2, [pc, #92]	; (80048f4 <TIM_OC6_SetConfig+0xbc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00b      	beq.n	80048b4 <TIM_OC6_SetConfig+0x7c>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a16      	ldr	r2, [pc, #88]	; (80048f8 <TIM_OC6_SetConfig+0xc0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d007      	beq.n	80048b4 <TIM_OC6_SetConfig+0x7c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a15      	ldr	r2, [pc, #84]	; (80048fc <TIM_OC6_SetConfig+0xc4>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d003      	beq.n	80048b4 <TIM_OC6_SetConfig+0x7c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a14      	ldr	r2, [pc, #80]	; (8004900 <TIM_OC6_SetConfig+0xc8>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d109      	bne.n	80048c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	029b      	lsls	r3, r3, #10
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685a      	ldr	r2, [r3, #4]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	621a      	str	r2, [r3, #32]
}
 80048e2:	bf00      	nop
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40012c00 	.word	0x40012c00
 80048f4:	40013400 	.word	0x40013400
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800

08004904 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	f023 0201 	bic.w	r2, r3, #1
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800492e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f023 030a 	bic.w	r3, r3, #10
 8004940:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004942:	697a      	ldr	r2, [r7, #20]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4313      	orrs	r3, r2
 8004948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	697a      	ldr	r2, [r7, #20]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004962:	b480      	push	{r7}
 8004964:	b087      	sub	sp, #28
 8004966:	af00      	add	r7, sp, #0
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	f023 0210 	bic.w	r2, r3, #16
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800498c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	031b      	lsls	r3, r3, #12
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800499e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
 80049ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4313      	orrs	r3, r2
 80049e0:	f043 0307 	orr.w	r3, r3, #7
 80049e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	609a      	str	r2, [r3, #8]
}
 80049ec:	bf00      	nop
 80049ee:	3714      	adds	r7, #20
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	021a      	lsls	r2, r3, #8
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	609a      	str	r2, [r3, #8]
}
 8004a2c:	bf00      	nop
 8004a2e:	371c      	adds	r7, #28
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d101      	bne.n	8004a50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	e063      	b.n	8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a2b      	ldr	r2, [pc, #172]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d004      	beq.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a2a      	ldr	r2, [pc, #168]	; (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d108      	bne.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d018      	beq.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ac2:	d013      	beq.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a18      	ldr	r2, [pc, #96]	; (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00e      	beq.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a17      	ldr	r2, [pc, #92]	; (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d009      	beq.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d004      	beq.n	8004aec <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a13      	ldr	r2, [pc, #76]	; (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d10c      	bne.n	8004b06 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004af2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3714      	adds	r7, #20
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	40012c00 	.word	0x40012c00
 8004b28:	40013400 	.word	0x40013400
 8004b2c:	40000400 	.word	0x40000400
 8004b30:	40000800 	.word	0x40000800
 8004b34:	40014000 	.word	0x40014000

08004b38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e065      	b.n	8004c20 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	041b      	lsls	r3, r3, #16
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a16      	ldr	r2, [pc, #88]	; (8004c2c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a14      	ldr	r2, [pc, #80]	; (8004c30 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d115      	bne.n	8004c0e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bec:	051b      	lsls	r3, r3, #20
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	69db      	ldr	r3, [r3, #28]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3714      	adds	r7, #20
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	40012c00 	.word	0x40012c00
 8004c30:	40013400 	.word	0x40013400

08004c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e040      	b.n	8004d04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d106      	bne.n	8004c98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fc fad2 	bl	800123c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2224      	movs	r2, #36	; 0x24
 8004c9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f022 0201 	bic.w	r2, r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fb2a 	bl	8005308 <UART_SetConfig>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d101      	bne.n	8004cbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	e022      	b.n	8004d04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d002      	beq.n	8004ccc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fcf4 	bl	80056b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0201 	orr.w	r2, r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fd7b 	bl	80057f8 <UART_CheckIdleState>
 8004d02:	4603      	mov	r3, r0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b0ba      	sub	sp, #232	; 0xe8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d36:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d3a:	4013      	ands	r3, r2
 8004d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d115      	bne.n	8004d74 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00f      	beq.n	8004d74 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d009      	beq.n	8004d74 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 82a3 	beq.w	80052b0 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	4798      	blx	r3
      }
      return;
 8004d72:	e29d      	b.n	80052b0 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d74:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8117 	beq.w	8004fac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d82:	f003 0301 	and.w	r3, r3, #1
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d8a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d8e:	4b85      	ldr	r3, [pc, #532]	; (8004fa4 <HAL_UART_IRQHandler+0x298>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 810a 	beq.w	8004fac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d011      	beq.n	8004dc8 <HAL_UART_IRQHandler+0xbc>
 8004da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00b      	beq.n	8004dc8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2201      	movs	r2, #1
 8004db6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dbe:	f043 0201 	orr.w	r2, r3, #1
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d011      	beq.n	8004df8 <HAL_UART_IRQHandler+0xec>
 8004dd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00b      	beq.n	8004df8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2202      	movs	r2, #2
 8004de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dee:	f043 0204 	orr.w	r2, r3, #4
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d011      	beq.n	8004e28 <HAL_UART_IRQHandler+0x11c>
 8004e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e08:	f003 0301 	and.w	r3, r3, #1
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00b      	beq.n	8004e28 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2204      	movs	r2, #4
 8004e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e1e:	f043 0202 	orr.w	r2, r3, #2
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e2c:	f003 0308 	and.w	r3, r3, #8
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d017      	beq.n	8004e64 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e38:	f003 0320 	and.w	r3, r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d105      	bne.n	8004e4c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e44:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00b      	beq.n	8004e64 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2208      	movs	r2, #8
 8004e52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e5a:	f043 0208 	orr.w	r2, r3, #8
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d012      	beq.n	8004e96 <HAL_UART_IRQHandler+0x18a>
 8004e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00c      	beq.n	8004e96 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e8c:	f043 0220 	orr.w	r2, r3, #32
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 8209 	beq.w	80052b4 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea6:	f003 0320 	and.w	r3, r3, #32
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00d      	beq.n	8004eca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eb2:	f003 0320 	and.w	r3, r3, #32
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d007      	beq.n	8004eca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ed0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ede:	2b40      	cmp	r3, #64	; 0x40
 8004ee0:	d005      	beq.n	8004eee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ee6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d04f      	beq.n	8004f8e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fd8f 	bl	8005a12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004efe:	2b40      	cmp	r3, #64	; 0x40
 8004f00:	d141      	bne.n	8004f86 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	3308      	adds	r3, #8
 8004f08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	3308      	adds	r3, #8
 8004f2a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f2e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f3a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1d9      	bne.n	8004f02 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d013      	beq.n	8004f7e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <HAL_UART_IRQHandler+0x29c>)
 8004f5c:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fc fcdf 	bl	8001926 <HAL_DMA_Abort_IT>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d017      	beq.n	8004f9e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	e00f      	b.n	8004f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f9ac 	bl	80052dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	e00b      	b.n	8004f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f9a8 	bl	80052dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f8c:	e007      	b.n	8004f9e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f9a4 	bl	80052dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004f9c:	e18a      	b.n	80052b4 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9e:	bf00      	nop
    return;
 8004fa0:	e188      	b.n	80052b4 <HAL_UART_IRQHandler+0x5a8>
 8004fa2:	bf00      	nop
 8004fa4:	04000120 	.word	0x04000120
 8004fa8:	08005ad9 	.word	0x08005ad9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	f040 8143 	bne.w	800523c <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f000 813c 	beq.w	800523c <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc8:	f003 0310 	and.w	r3, r3, #16
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f000 8135 	beq.w	800523c <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2210      	movs	r2, #16
 8004fd8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe4:	2b40      	cmp	r3, #64	; 0x40
 8004fe6:	f040 80b1 	bne.w	800514c <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ff6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 815c 	beq.w	80052b8 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005006:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800500a:	429a      	cmp	r2, r3
 800500c:	f080 8154 	bcs.w	80052b8 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005016:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b20      	cmp	r3, #32
 8005022:	f000 8085 	beq.w	8005130 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800502e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005032:	e853 3f00 	ldrex	r3, [r3]
 8005036:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800503a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800503e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	461a      	mov	r2, r3
 800504c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005050:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005054:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005058:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800505c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005068:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d1da      	bne.n	8005026 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	3308      	adds	r3, #8
 8005076:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800507a:	e853 3f00 	ldrex	r3, [r3]
 800507e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005080:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005082:	f023 0301 	bic.w	r3, r3, #1
 8005086:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	3308      	adds	r3, #8
 8005090:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005094:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005098:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800509c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e1      	bne.n	8005070 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3308      	adds	r3, #8
 80050b2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050b6:	e853 3f00 	ldrex	r3, [r3]
 80050ba:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3308      	adds	r3, #8
 80050cc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050d0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050d8:	e841 2300 	strex	r3, r2, [r1]
 80050dc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d1e3      	bne.n	80050ac <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005100:	f023 0310 	bic.w	r3, r3, #16
 8005104:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005112:	65bb      	str	r3, [r7, #88]	; 0x58
 8005114:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005118:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800511a:	e841 2300 	strex	r3, r2, [r1]
 800511e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1e4      	bne.n	80050f0 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800512a:	4618      	mov	r0, r3
 800512c:	f7fc fbc2 	bl	80018b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800513c:	b29b      	uxth	r3, r3
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	b29b      	uxth	r3, r3
 8005142:	4619      	mov	r1, r3
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f8d3 	bl	80052f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800514a:	e0b5      	b.n	80052b8 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005158:	b29b      	uxth	r3, r3
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005166:	b29b      	uxth	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	f000 80a7 	beq.w	80052bc <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800516e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 80a2 	beq.w	80052bc <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005188:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800518c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	461a      	mov	r2, r3
 8005196:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800519a:	647b      	str	r3, [r7, #68]	; 0x44
 800519c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051a2:	e841 2300 	strex	r3, r2, [r1]
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d1e4      	bne.n	8005178 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3308      	adds	r3, #8
 80051b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	623b      	str	r3, [r7, #32]
   return(result);
 80051be:	6a3b      	ldr	r3, [r7, #32]
 80051c0:	f023 0301 	bic.w	r3, r3, #1
 80051c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3308      	adds	r3, #8
 80051ce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051d2:	633a      	str	r2, [r7, #48]	; 0x30
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e3      	bne.n	80051ae <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2220      	movs	r2, #32
 80051ea:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	60fb      	str	r3, [r7, #12]
   return(result);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f023 0310 	bic.w	r3, r3, #16
 800520c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800521a:	61fb      	str	r3, [r7, #28]
 800521c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	69b9      	ldr	r1, [r7, #24]
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	617b      	str	r3, [r7, #20]
   return(result);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e4      	bne.n	80051f8 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800522e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005232:	4619      	mov	r1, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f85b 	bl	80052f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800523a:	e03f      	b.n	80052bc <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800523c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d00e      	beq.n	8005266 <HAL_UART_IRQHandler+0x55a>
 8005248:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800524c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d008      	beq.n	8005266 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800525c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 fc7a 	bl	8005b58 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005264:	e02d      	b.n	80052c2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00e      	beq.n	8005290 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005282:	2b00      	cmp	r3, #0
 8005284:	d01c      	beq.n	80052c0 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	4798      	blx	r3
    }
    return;
 800528e:	e017      	b.n	80052c0 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005298:	2b00      	cmp	r3, #0
 800529a:	d012      	beq.n	80052c2 <HAL_UART_IRQHandler+0x5b6>
 800529c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00c      	beq.n	80052c2 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 fc2b 	bl	8005b04 <UART_EndTransmit_IT>
    return;
 80052ae:	e008      	b.n	80052c2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80052b0:	bf00      	nop
 80052b2:	e006      	b.n	80052c2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80052b4:	bf00      	nop
 80052b6:	e004      	b.n	80052c2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80052b8:	bf00      	nop
 80052ba:	e002      	b.n	80052c2 <HAL_UART_IRQHandler+0x5b6>
      return;
 80052bc:	bf00      	nop
 80052be:	e000      	b.n	80052c2 <HAL_UART_IRQHandler+0x5b6>
    return;
 80052c0:	bf00      	nop
  }

}
 80052c2:	37e8      	adds	r7, #232	; 0xe8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b088      	sub	sp, #32
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005310:	2300      	movs	r3, #0
 8005312:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	431a      	orrs	r2, r3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005336:	f023 030c 	bic.w	r3, r3, #12
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6812      	ldr	r2, [r2, #0]
 800533e:	6979      	ldr	r1, [r7, #20]
 8005340:	430b      	orrs	r3, r1
 8005342:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68da      	ldr	r2, [r3, #12]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a1b      	ldr	r3, [r3, #32]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	430a      	orrs	r2, r1
 800537c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4aa8      	ldr	r2, [pc, #672]	; (8005624 <UART_SetConfig+0x31c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d120      	bne.n	80053ca <UART_SetConfig+0xc2>
 8005388:	4ba7      	ldr	r3, [pc, #668]	; (8005628 <UART_SetConfig+0x320>)
 800538a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538c:	f003 0303 	and.w	r3, r3, #3
 8005390:	2b03      	cmp	r3, #3
 8005392:	d817      	bhi.n	80053c4 <UART_SetConfig+0xbc>
 8005394:	a201      	add	r2, pc, #4	; (adr r2, 800539c <UART_SetConfig+0x94>)
 8005396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539a:	bf00      	nop
 800539c:	080053ad 	.word	0x080053ad
 80053a0:	080053b9 	.word	0x080053b9
 80053a4:	080053bf 	.word	0x080053bf
 80053a8:	080053b3 	.word	0x080053b3
 80053ac:	2301      	movs	r3, #1
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e0b5      	b.n	800551e <UART_SetConfig+0x216>
 80053b2:	2302      	movs	r3, #2
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e0b2      	b.n	800551e <UART_SetConfig+0x216>
 80053b8:	2304      	movs	r3, #4
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	e0af      	b.n	800551e <UART_SetConfig+0x216>
 80053be:	2308      	movs	r3, #8
 80053c0:	77fb      	strb	r3, [r7, #31]
 80053c2:	e0ac      	b.n	800551e <UART_SetConfig+0x216>
 80053c4:	2310      	movs	r3, #16
 80053c6:	77fb      	strb	r3, [r7, #31]
 80053c8:	e0a9      	b.n	800551e <UART_SetConfig+0x216>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a97      	ldr	r2, [pc, #604]	; (800562c <UART_SetConfig+0x324>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d124      	bne.n	800541e <UART_SetConfig+0x116>
 80053d4:	4b94      	ldr	r3, [pc, #592]	; (8005628 <UART_SetConfig+0x320>)
 80053d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053e0:	d011      	beq.n	8005406 <UART_SetConfig+0xfe>
 80053e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053e6:	d817      	bhi.n	8005418 <UART_SetConfig+0x110>
 80053e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ec:	d011      	beq.n	8005412 <UART_SetConfig+0x10a>
 80053ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053f2:	d811      	bhi.n	8005418 <UART_SetConfig+0x110>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <UART_SetConfig+0xf8>
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d006      	beq.n	800540c <UART_SetConfig+0x104>
 80053fe:	e00b      	b.n	8005418 <UART_SetConfig+0x110>
 8005400:	2300      	movs	r3, #0
 8005402:	77fb      	strb	r3, [r7, #31]
 8005404:	e08b      	b.n	800551e <UART_SetConfig+0x216>
 8005406:	2302      	movs	r3, #2
 8005408:	77fb      	strb	r3, [r7, #31]
 800540a:	e088      	b.n	800551e <UART_SetConfig+0x216>
 800540c:	2304      	movs	r3, #4
 800540e:	77fb      	strb	r3, [r7, #31]
 8005410:	e085      	b.n	800551e <UART_SetConfig+0x216>
 8005412:	2308      	movs	r3, #8
 8005414:	77fb      	strb	r3, [r7, #31]
 8005416:	e082      	b.n	800551e <UART_SetConfig+0x216>
 8005418:	2310      	movs	r3, #16
 800541a:	77fb      	strb	r3, [r7, #31]
 800541c:	e07f      	b.n	800551e <UART_SetConfig+0x216>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a83      	ldr	r2, [pc, #524]	; (8005630 <UART_SetConfig+0x328>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d124      	bne.n	8005472 <UART_SetConfig+0x16a>
 8005428:	4b7f      	ldr	r3, [pc, #508]	; (8005628 <UART_SetConfig+0x320>)
 800542a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005430:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005434:	d011      	beq.n	800545a <UART_SetConfig+0x152>
 8005436:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800543a:	d817      	bhi.n	800546c <UART_SetConfig+0x164>
 800543c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005440:	d011      	beq.n	8005466 <UART_SetConfig+0x15e>
 8005442:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005446:	d811      	bhi.n	800546c <UART_SetConfig+0x164>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <UART_SetConfig+0x14c>
 800544c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005450:	d006      	beq.n	8005460 <UART_SetConfig+0x158>
 8005452:	e00b      	b.n	800546c <UART_SetConfig+0x164>
 8005454:	2300      	movs	r3, #0
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e061      	b.n	800551e <UART_SetConfig+0x216>
 800545a:	2302      	movs	r3, #2
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e05e      	b.n	800551e <UART_SetConfig+0x216>
 8005460:	2304      	movs	r3, #4
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	e05b      	b.n	800551e <UART_SetConfig+0x216>
 8005466:	2308      	movs	r3, #8
 8005468:	77fb      	strb	r3, [r7, #31]
 800546a:	e058      	b.n	800551e <UART_SetConfig+0x216>
 800546c:	2310      	movs	r3, #16
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e055      	b.n	800551e <UART_SetConfig+0x216>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a6f      	ldr	r2, [pc, #444]	; (8005634 <UART_SetConfig+0x32c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d124      	bne.n	80054c6 <UART_SetConfig+0x1be>
 800547c:	4b6a      	ldr	r3, [pc, #424]	; (8005628 <UART_SetConfig+0x320>)
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005484:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005488:	d011      	beq.n	80054ae <UART_SetConfig+0x1a6>
 800548a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800548e:	d817      	bhi.n	80054c0 <UART_SetConfig+0x1b8>
 8005490:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005494:	d011      	beq.n	80054ba <UART_SetConfig+0x1b2>
 8005496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800549a:	d811      	bhi.n	80054c0 <UART_SetConfig+0x1b8>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <UART_SetConfig+0x1a0>
 80054a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a4:	d006      	beq.n	80054b4 <UART_SetConfig+0x1ac>
 80054a6:	e00b      	b.n	80054c0 <UART_SetConfig+0x1b8>
 80054a8:	2300      	movs	r3, #0
 80054aa:	77fb      	strb	r3, [r7, #31]
 80054ac:	e037      	b.n	800551e <UART_SetConfig+0x216>
 80054ae:	2302      	movs	r3, #2
 80054b0:	77fb      	strb	r3, [r7, #31]
 80054b2:	e034      	b.n	800551e <UART_SetConfig+0x216>
 80054b4:	2304      	movs	r3, #4
 80054b6:	77fb      	strb	r3, [r7, #31]
 80054b8:	e031      	b.n	800551e <UART_SetConfig+0x216>
 80054ba:	2308      	movs	r3, #8
 80054bc:	77fb      	strb	r3, [r7, #31]
 80054be:	e02e      	b.n	800551e <UART_SetConfig+0x216>
 80054c0:	2310      	movs	r3, #16
 80054c2:	77fb      	strb	r3, [r7, #31]
 80054c4:	e02b      	b.n	800551e <UART_SetConfig+0x216>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a5b      	ldr	r2, [pc, #364]	; (8005638 <UART_SetConfig+0x330>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d124      	bne.n	800551a <UART_SetConfig+0x212>
 80054d0:	4b55      	ldr	r3, [pc, #340]	; (8005628 <UART_SetConfig+0x320>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80054d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054dc:	d011      	beq.n	8005502 <UART_SetConfig+0x1fa>
 80054de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054e2:	d817      	bhi.n	8005514 <UART_SetConfig+0x20c>
 80054e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054e8:	d011      	beq.n	800550e <UART_SetConfig+0x206>
 80054ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054ee:	d811      	bhi.n	8005514 <UART_SetConfig+0x20c>
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d003      	beq.n	80054fc <UART_SetConfig+0x1f4>
 80054f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054f8:	d006      	beq.n	8005508 <UART_SetConfig+0x200>
 80054fa:	e00b      	b.n	8005514 <UART_SetConfig+0x20c>
 80054fc:	2300      	movs	r3, #0
 80054fe:	77fb      	strb	r3, [r7, #31]
 8005500:	e00d      	b.n	800551e <UART_SetConfig+0x216>
 8005502:	2302      	movs	r3, #2
 8005504:	77fb      	strb	r3, [r7, #31]
 8005506:	e00a      	b.n	800551e <UART_SetConfig+0x216>
 8005508:	2304      	movs	r3, #4
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e007      	b.n	800551e <UART_SetConfig+0x216>
 800550e:	2308      	movs	r3, #8
 8005510:	77fb      	strb	r3, [r7, #31]
 8005512:	e004      	b.n	800551e <UART_SetConfig+0x216>
 8005514:	2310      	movs	r3, #16
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e001      	b.n	800551e <UART_SetConfig+0x216>
 800551a:	2310      	movs	r3, #16
 800551c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	69db      	ldr	r3, [r3, #28]
 8005522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005526:	d15c      	bne.n	80055e2 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8005528:	7ffb      	ldrb	r3, [r7, #31]
 800552a:	2b08      	cmp	r3, #8
 800552c:	d827      	bhi.n	800557e <UART_SetConfig+0x276>
 800552e:	a201      	add	r2, pc, #4	; (adr r2, 8005534 <UART_SetConfig+0x22c>)
 8005530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005534:	08005559 	.word	0x08005559
 8005538:	08005561 	.word	0x08005561
 800553c:	08005569 	.word	0x08005569
 8005540:	0800557f 	.word	0x0800557f
 8005544:	0800556f 	.word	0x0800556f
 8005548:	0800557f 	.word	0x0800557f
 800554c:	0800557f 	.word	0x0800557f
 8005550:	0800557f 	.word	0x0800557f
 8005554:	08005577 	.word	0x08005577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005558:	f7fd ffec 	bl	8003534 <HAL_RCC_GetPCLK1Freq>
 800555c:	61b8      	str	r0, [r7, #24]
        break;
 800555e:	e013      	b.n	8005588 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005560:	f7fe f80a 	bl	8003578 <HAL_RCC_GetPCLK2Freq>
 8005564:	61b8      	str	r0, [r7, #24]
        break;
 8005566:	e00f      	b.n	8005588 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005568:	4b34      	ldr	r3, [pc, #208]	; (800563c <UART_SetConfig+0x334>)
 800556a:	61bb      	str	r3, [r7, #24]
        break;
 800556c:	e00c      	b.n	8005588 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800556e:	f7fd ff69 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 8005572:	61b8      	str	r0, [r7, #24]
        break;
 8005574:	e008      	b.n	8005588 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800557a:	61bb      	str	r3, [r7, #24]
        break;
 800557c:	e004      	b.n	8005588 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	77bb      	strb	r3, [r7, #30]
        break;
 8005586:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 8084 	beq.w	8005698 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	005a      	lsls	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	085b      	lsrs	r3, r3, #1
 800559a:	441a      	add	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a4:	b29b      	uxth	r3, r3
 80055a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b0f      	cmp	r3, #15
 80055ac:	d916      	bls.n	80055dc <UART_SetConfig+0x2d4>
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b4:	d212      	bcs.n	80055dc <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f023 030f 	bic.w	r3, r3, #15
 80055be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	085b      	lsrs	r3, r3, #1
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	89fb      	ldrh	r3, [r7, #14]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	89fa      	ldrh	r2, [r7, #14]
 80055d8:	60da      	str	r2, [r3, #12]
 80055da:	e05d      	b.n	8005698 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	77bb      	strb	r3, [r7, #30]
 80055e0:	e05a      	b.n	8005698 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055e2:	7ffb      	ldrb	r3, [r7, #31]
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d836      	bhi.n	8005656 <UART_SetConfig+0x34e>
 80055e8:	a201      	add	r2, pc, #4	; (adr r2, 80055f0 <UART_SetConfig+0x2e8>)
 80055ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ee:	bf00      	nop
 80055f0:	08005615 	.word	0x08005615
 80055f4:	0800561d 	.word	0x0800561d
 80055f8:	08005641 	.word	0x08005641
 80055fc:	08005657 	.word	0x08005657
 8005600:	08005647 	.word	0x08005647
 8005604:	08005657 	.word	0x08005657
 8005608:	08005657 	.word	0x08005657
 800560c:	08005657 	.word	0x08005657
 8005610:	0800564f 	.word	0x0800564f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005614:	f7fd ff8e 	bl	8003534 <HAL_RCC_GetPCLK1Freq>
 8005618:	61b8      	str	r0, [r7, #24]
        break;
 800561a:	e021      	b.n	8005660 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800561c:	f7fd ffac 	bl	8003578 <HAL_RCC_GetPCLK2Freq>
 8005620:	61b8      	str	r0, [r7, #24]
        break;
 8005622:	e01d      	b.n	8005660 <UART_SetConfig+0x358>
 8005624:	40013800 	.word	0x40013800
 8005628:	40021000 	.word	0x40021000
 800562c:	40004400 	.word	0x40004400
 8005630:	40004800 	.word	0x40004800
 8005634:	40004c00 	.word	0x40004c00
 8005638:	40005000 	.word	0x40005000
 800563c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005640:	4b1b      	ldr	r3, [pc, #108]	; (80056b0 <UART_SetConfig+0x3a8>)
 8005642:	61bb      	str	r3, [r7, #24]
        break;
 8005644:	e00c      	b.n	8005660 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005646:	f7fd fefd 	bl	8003444 <HAL_RCC_GetSysClockFreq>
 800564a:	61b8      	str	r0, [r7, #24]
        break;
 800564c:	e008      	b.n	8005660 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800564e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005652:	61bb      	str	r3, [r7, #24]
        break;
 8005654:	e004      	b.n	8005660 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	77bb      	strb	r3, [r7, #30]
        break;
 800565e:	bf00      	nop
    }

    if (pclk != 0U)
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d018      	beq.n	8005698 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	085a      	lsrs	r2, r3, #1
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	441a      	add	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	fbb2 f3f3 	udiv	r3, r2, r3
 8005678:	b29b      	uxth	r3, r3
 800567a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b0f      	cmp	r3, #15
 8005680:	d908      	bls.n	8005694 <UART_SetConfig+0x38c>
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005688:	d204      	bcs.n	8005694 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	60da      	str	r2, [r3, #12]
 8005692:	e001      	b.n	8005698 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80056a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3720      	adds	r7, #32
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	007a1200 	.word	0x007a1200

080056b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00a      	beq.n	80056de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00a      	beq.n	8005700 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00a      	beq.n	8005722 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005726:	f003 0308 	and.w	r3, r3, #8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00a      	beq.n	8005744 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00a      	beq.n	8005766 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	f003 0320 	and.w	r3, r3, #32
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00a      	beq.n	8005788 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01a      	beq.n	80057ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b2:	d10a      	bne.n	80057ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	430a      	orrs	r2, r1
 80057c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d00a      	beq.n	80057ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
  }
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af02      	add	r7, sp, #8
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2200      	movs	r2, #0
 8005804:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005808:	f7fb fef0 	bl	80015ec <HAL_GetTick>
 800580c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0308 	and.w	r3, r3, #8
 8005818:	2b08      	cmp	r3, #8
 800581a:	d10e      	bne.n	800583a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800581c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f82d 	bl	800588a <UART_WaitOnFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d001      	beq.n	800583a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e023      	b.n	8005882 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b04      	cmp	r3, #4
 8005846:	d10e      	bne.n	8005866 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005848:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f817 	bl	800588a <UART_WaitOnFlagUntilTimeout>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e00d      	b.n	8005882 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2220      	movs	r2, #32
 800586a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2220      	movs	r2, #32
 8005870:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b09c      	sub	sp, #112	; 0x70
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	603b      	str	r3, [r7, #0]
 8005896:	4613      	mov	r3, r2
 8005898:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800589a:	e0a5      	b.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800589c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800589e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058a2:	f000 80a1 	beq.w	80059e8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058a6:	f7fb fea1 	bl	80015ec <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d302      	bcc.n	80058bc <UART_WaitOnFlagUntilTimeout+0x32>
 80058b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d13e      	bne.n	800593a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058c4:	e853 3f00 	ldrex	r3, [r3]
 80058c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058d0:	667b      	str	r3, [r7, #100]	; 0x64
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058e2:	e841 2300 	strex	r3, r2, [r1]
 80058e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80058e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d1e6      	bne.n	80058bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	3308      	adds	r3, #8
 80058f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	f023 0301 	bic.w	r3, r3, #1
 8005904:	663b      	str	r3, [r7, #96]	; 0x60
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800590e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005910:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005912:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800591c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1e5      	bne.n	80058ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2220      	movs	r2, #32
 8005926:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e067      	b.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d04f      	beq.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005956:	d147      	bne.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005960:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005976:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	461a      	mov	r2, r3
 800597e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005980:	637b      	str	r3, [r7, #52]	; 0x34
 8005982:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e6      	bne.n	8005962 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3308      	adds	r3, #8
 800599a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	e853 3f00 	ldrex	r3, [r3]
 80059a2:	613b      	str	r3, [r7, #16]
   return(result);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f023 0301 	bic.w	r3, r3, #1
 80059aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	3308      	adds	r3, #8
 80059b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059b4:	623a      	str	r2, [r7, #32]
 80059b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	69f9      	ldr	r1, [r7, #28]
 80059ba:	6a3a      	ldr	r2, [r7, #32]
 80059bc:	e841 2300 	strex	r3, r2, [r1]
 80059c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e5      	bne.n	8005994 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2220      	movs	r2, #32
 80059cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2220      	movs	r2, #32
 80059d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	e010      	b.n	8005a0a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	69da      	ldr	r2, [r3, #28]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	4013      	ands	r3, r2
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	bf0c      	ite	eq
 80059f8:	2301      	moveq	r3, #1
 80059fa:	2300      	movne	r3, #0
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	79fb      	ldrb	r3, [r7, #7]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	f43f af4a 	beq.w	800589c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3770      	adds	r7, #112	; 0x70
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b095      	sub	sp, #84	; 0x54
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a22:	e853 3f00 	ldrex	r3, [r3]
 8005a26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	461a      	mov	r2, r3
 8005a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a38:	643b      	str	r3, [r7, #64]	; 0x40
 8005a3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e6      	bne.n	8005a1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	3308      	adds	r3, #8
 8005a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	e853 3f00 	ldrex	r3, [r3]
 8005a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	f023 0301 	bic.w	r3, r3, #1
 8005a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3308      	adds	r3, #8
 8005a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a74:	e841 2300 	strex	r3, r2, [r1]
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d1e5      	bne.n	8005a4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d118      	bne.n	8005aba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	f023 0310 	bic.w	r3, r3, #16
 8005a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa6:	61bb      	str	r3, [r7, #24]
 8005aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6979      	ldr	r1, [r7, #20]
 8005aac:	69ba      	ldr	r2, [r7, #24]
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e6      	bne.n	8005a88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005acc:	bf00      	nop
 8005ace:	3754      	adds	r7, #84	; 0x54
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff fbf0 	bl	80052dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b088      	sub	sp, #32
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	461a      	mov	r2, r3
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	61bb      	str	r3, [r7, #24]
 8005b2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2e:	6979      	ldr	r1, [r7, #20]
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	e841 2300 	strex	r3, r2, [r1]
 8005b36:	613b      	str	r3, [r7, #16]
   return(result);
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e6      	bne.n	8005b0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2220      	movs	r2, #32
 8005b42:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff fbbc 	bl	80052c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b50:	bf00      	nop
 8005b52:	3720      	adds	r7, #32
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <__libc_init_array>:
 8005b6c:	b570      	push	{r4, r5, r6, lr}
 8005b6e:	4d0d      	ldr	r5, [pc, #52]	; (8005ba4 <__libc_init_array+0x38>)
 8005b70:	4c0d      	ldr	r4, [pc, #52]	; (8005ba8 <__libc_init_array+0x3c>)
 8005b72:	1b64      	subs	r4, r4, r5
 8005b74:	10a4      	asrs	r4, r4, #2
 8005b76:	2600      	movs	r6, #0
 8005b78:	42a6      	cmp	r6, r4
 8005b7a:	d109      	bne.n	8005b90 <__libc_init_array+0x24>
 8005b7c:	4d0b      	ldr	r5, [pc, #44]	; (8005bac <__libc_init_array+0x40>)
 8005b7e:	4c0c      	ldr	r4, [pc, #48]	; (8005bb0 <__libc_init_array+0x44>)
 8005b80:	f000 f820 	bl	8005bc4 <_init>
 8005b84:	1b64      	subs	r4, r4, r5
 8005b86:	10a4      	asrs	r4, r4, #2
 8005b88:	2600      	movs	r6, #0
 8005b8a:	42a6      	cmp	r6, r4
 8005b8c:	d105      	bne.n	8005b9a <__libc_init_array+0x2e>
 8005b8e:	bd70      	pop	{r4, r5, r6, pc}
 8005b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b94:	4798      	blx	r3
 8005b96:	3601      	adds	r6, #1
 8005b98:	e7ee      	b.n	8005b78 <__libc_init_array+0xc>
 8005b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b9e:	4798      	blx	r3
 8005ba0:	3601      	adds	r6, #1
 8005ba2:	e7f2      	b.n	8005b8a <__libc_init_array+0x1e>
 8005ba4:	08005c14 	.word	0x08005c14
 8005ba8:	08005c14 	.word	0x08005c14
 8005bac:	08005c14 	.word	0x08005c14
 8005bb0:	08005c18 	.word	0x08005c18

08005bb4 <memset>:
 8005bb4:	4402      	add	r2, r0
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d100      	bne.n	8005bbe <memset+0xa>
 8005bbc:	4770      	bx	lr
 8005bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc2:	e7f9      	b.n	8005bb8 <memset+0x4>

08005bc4 <_init>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	bf00      	nop
 8005bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bca:	bc08      	pop	{r3}
 8005bcc:	469e      	mov	lr, r3
 8005bce:	4770      	bx	lr

08005bd0 <_fini>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	bf00      	nop
 8005bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd6:	bc08      	pop	{r3}
 8005bd8:	469e      	mov	lr, r3
 8005bda:	4770      	bx	lr
